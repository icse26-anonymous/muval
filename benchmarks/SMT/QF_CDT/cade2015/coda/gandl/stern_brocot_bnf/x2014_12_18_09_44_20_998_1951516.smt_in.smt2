;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun$ 0 )
(declare-sort C_a_a_fun_fun$ 0 )
(declare-sort C_a_fun_a_fun$ 0 )
(declare-sort C_b_a_fun_fun$ 0 )
(declare-sort C_b_c_fun_fun$ 0 )
(declare-sort C_c_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_c_a_fun_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun$ 0 )
(declare-sort C_a_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun$ 0 )
(declare-sort C_b_a_fun_a_fun_fun$ 0 )
(declare-sort C_b_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_b_a_fun_fun_fun$ 0 )
(declare-sort C_c_fun_c_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_a_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort C_a_fun_a_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_b_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_fun_c_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_c_a_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun_c_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_c_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_c_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(B_a_fun_tree$ (node$a (select$ B_a_fun$ )(selecta$ B_a_fun_tree$ )(selectb$ B_a_fun_tree$ )))(B_tree$ (node$b (root$a B$ )(left$a B_tree$ )(right$a B_tree$ )))(C_b_a_fun_fun_tree$ (node$c (selectc$ C_b_a_fun_fun$ )(selectd$ C_b_a_fun_fun_tree$ )(selecte$ C_b_a_fun_fun_tree$ )))(C_tree$ (node$d (root$b C$ )(left$b C_tree$ )(right$b C_tree$ )))(B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ (node$e (selectf$ B_c_a_fun_fun_c_b_a_fun_fun_fun$ )(selectg$ B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(selecth$ B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )))(B_c_a_fun_fun_tree$ (node$f (selecti$ B_c_a_fun_fun$ )(selectj$ B_c_a_fun_fun_tree$ )(selectk$ B_c_a_fun_fun_tree$ )))(C_a_fun_tree$ (node$g (selectl$ C_a_fun$ )(selectm$ C_a_fun_tree$ )(selectn$ C_a_fun_tree$ )))(B_c_fun_tree$ (node$h (selecto$ B_c_fun$ )(selectp$ B_c_fun_tree$ )(selectq$ B_c_fun_tree$ )))(B_b_fun_tree$ (node$i (selectr$ B_b_fun$ )(selects$ B_b_fun_tree$ )(selectt$ B_b_fun_tree$ )))(A_c_a_fun_fun_tree$ (node$j (selectu$ A_c_a_fun_fun$ )(selectv$ A_c_a_fun_fun_tree$ )(selectw$ A_c_a_fun_fun_tree$ )))(A_b_a_fun_fun_tree$ (node$k (selectx$ A_b_a_fun_fun$ )(selecty$ A_b_a_fun_fun_tree$ )(selectz$ A_b_a_fun_fun_tree$ )))(A_a_fun_tree$ (node$l (selecua$ A_a_fun$ )(selecub$ A_a_fun_tree$ )(selecuc$ A_a_fun_tree$ )))(B_a_a_fun_fun_tree$ (node$m (selecud$ B_a_a_fun_fun$ )(selecue$ B_a_a_fun_fun_tree$ )(selecuf$ B_a_a_fun_fun_tree$ )))(B_a_fun_b_a_fun_fun_tree$ (node$n (selecug$ B_a_fun_b_a_fun_fun$ )(selecuh$ B_a_fun_b_a_fun_fun_tree$ )(selecui$ B_a_fun_b_a_fun_fun_tree$ )))(B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$o (selecuj$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ )(selecuk$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )(selecul$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )))(B_b_a_fun_fun_tree$ (node$p (selecum$ B_b_a_fun_fun$ )(selecun$ B_b_a_fun_fun_tree$ )(selecuo$ B_b_a_fun_fun_tree$ )))(B_b_fun_b_a_fun_fun_tree$ (node$q (selecup$ B_b_fun_b_a_fun_fun$ )(selecuq$ B_b_fun_b_a_fun_fun_tree$ )(selecur$ B_b_fun_b_a_fun_fun_tree$ )))(B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ (node$r (selecus$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ )(selecut$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )(selecuu$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )))(B_c_fun_b_a_fun_fun_tree$ (node$s (selecuv$ B_c_fun_b_a_fun_fun$ )(selecuw$ B_c_fun_b_a_fun_fun_tree$ )(selecux$ B_c_fun_b_a_fun_fun_tree$ )))(B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ (node$t (selecuy$ B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ )(selecuz$ B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ )(selecva$ B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ )))(C_a_a_fun_fun_tree$ (node$u (selecvb$ C_a_a_fun_fun$ )(selecvc$ C_a_a_fun_fun_tree$ )(selecvd$ C_a_a_fun_fun_tree$ )))(C_a_fun_c_a_fun_fun_tree$ (node$v (selecve$ C_a_fun_c_a_fun_fun$ )(selecvf$ C_a_fun_c_a_fun_fun_tree$ )(selecvg$ C_a_fun_c_a_fun_fun_tree$ )))(C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ (node$w (selecvh$ C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun$ )(selecvi$ C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )(selecvj$ C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )))(C_b_fun_tree$ (node$x (selecvk$ C_b_fun$ )(selecvl$ C_b_fun_tree$ )(selecvm$ C_b_fun_tree$ )))(C_b_fun_c_a_fun_fun_tree$ (node$y (selecvn$ C_b_fun_c_a_fun_fun$ )(selecvo$ C_b_fun_c_a_fun_fun_tree$ )(selecvp$ C_b_fun_c_a_fun_fun_tree$ )))(C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$ (node$z (selecvq$ C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun$ )(selecvr$ C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$ )(selecvs$ C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$ )))(C_c_a_fun_fun_tree$ (node$aa (selecvt$ C_c_a_fun_fun$ )(selecvu$ C_c_a_fun_fun_tree$ )(selecvv$ C_c_a_fun_fun_tree$ )))(C_c_fun_tree$ (node$ab (selecvw$ C_c_fun$ )(selecvx$ C_c_fun_tree$ )(selecvy$ C_c_fun_tree$ )))(C_c_fun_c_a_fun_fun_tree$ (node$ac (selecvz$ C_c_fun_c_a_fun_fun$ )(selecwa$ C_c_fun_c_a_fun_fun_tree$ )(selecwb$ C_c_fun_c_a_fun_fun_tree$ )))(C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$ (node$ad (selecwc$ C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun$ )(selecwd$ C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$ )(selecwe$ C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$ )))(B_c_a_fun_a_fun_fun_tree$ (node$ae (selecwf$ B_c_a_fun_a_fun_fun$ )(selecwg$ B_c_a_fun_a_fun_fun_tree$ )(selecwh$ B_c_a_fun_a_fun_fun_tree$ )))(B_c_a_fun_fun_b_a_fun_fun_tree$ (node$af (selecwi$ B_c_a_fun_fun_b_a_fun_fun$ )(selecwj$ B_c_a_fun_fun_b_a_fun_fun_tree$ )(selecwk$ B_c_a_fun_fun_b_a_fun_fun_tree$ )))(B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ (node$ag (selecwl$ B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ )(selecwm$ B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ )(selecwn$ B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ )))(C_a_fun_a_fun_tree$ (node$ah (selecwo$ C_a_fun_a_fun$ )(selecwp$ C_a_fun_a_fun_tree$ )(selecwq$ C_a_fun_a_fun_tree$ )))(C_a_b_a_fun_fun_fun_tree$ (node$ai (selecwr$ C_a_b_a_fun_fun_fun$ )(selecws$ C_a_b_a_fun_fun_fun_tree$ )(selecwt$ C_a_b_a_fun_fun_fun_tree$ )))(C_a_fun_c_b_a_fun_fun_fun_tree$ (node$aj (selecwu$ C_a_fun_c_b_a_fun_fun_fun$ )(selecwv$ C_a_fun_c_b_a_fun_fun_fun_tree$ )(selecww$ C_a_fun_c_b_a_fun_fun_fun_tree$ )))(C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ (node$ak (selecwx$ C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ )(selecwy$ C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ )(selecwz$ C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ )))(C_c_b_a_fun_fun_fun_tree$ (node$al (selecxa$ C_c_b_a_fun_fun_fun$ )(selecxb$ C_c_b_a_fun_fun_fun_tree$ )(selecxc$ C_c_b_a_fun_fun_fun_tree$ )))(C_c_fun_c_b_a_fun_fun_fun_tree$ (node$am (selecxd$ C_c_fun_c_b_a_fun_fun_fun$ )(selecxe$ C_c_fun_c_b_a_fun_fun_fun_tree$ )(selecxf$ C_c_fun_c_b_a_fun_fun_fun_tree$ )))(C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ (node$an (selecxg$ C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ )(selecxh$ C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ )(selecxi$ C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ )))(C_b_a_fun_a_fun_fun_tree$ (node$ao (selecxj$ C_b_a_fun_a_fun_fun$ )(selecxk$ C_b_a_fun_a_fun_fun_tree$ )(selecxl$ C_b_a_fun_a_fun_fun_tree$ )))(C_b_a_fun_fun_c_a_fun_fun_tree$ (node$ap (selecxm$ C_b_a_fun_fun_c_a_fun_fun$ )(selecxn$ C_b_a_fun_fun_c_a_fun_fun_tree$ )(selecxo$ C_b_a_fun_fun_c_a_fun_fun_tree$ )))(C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ (node$aq (selecxp$ C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ )(selecxq$ C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ )(selecxr$ C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ )))(B_a_fun_a_fun_tree$ (node$ar (selecxs$ B_a_fun_a_fun$ )(selecxt$ B_a_fun_a_fun_tree$ )(selecxu$ B_a_fun_a_fun_tree$ )))(C_b_c_fun_fun_tree$ (node$as (selecxv$ C_b_c_fun_fun$ )(selecxw$ C_b_c_fun_fun_tree$ )(selecxx$ C_b_c_fun_fun_tree$ )))(B_b_b_fun_fun_tree$ (node$at (selecxy$ B_b_b_fun_fun$ )(selecxz$ B_b_b_fun_fun_tree$ )(selecya$ B_b_b_fun_fun_tree$ )))(C_a_fun_a_c_a_fun_fun_fun_tree$ (node$au (selecyb$ C_a_fun_a_c_a_fun_fun_fun$ )(selecyc$ C_a_fun_a_c_a_fun_fun_fun_tree$ )(selecyd$ C_a_fun_a_c_a_fun_fun_fun_tree$ )))(B_a_fun_a_b_a_fun_fun_fun_tree$ (node$av (selecye$ B_a_fun_a_b_a_fun_fun_fun$ )(selecyf$ B_a_fun_a_b_a_fun_fun_fun_tree$ )(selecyg$ B_a_fun_a_b_a_fun_fun_fun_tree$ )))(A_a_a_fun_fun_tree$ (node$aw (selecyh$ A_a_a_fun_fun$ )(selecyi$ A_a_a_fun_fun_tree$ )(selecyj$ A_a_a_fun_fun_tree$ )))(B_a_fun_c_b_a_fun_fun_fun_tree$ (node$ax (selecyk$ B_a_fun_c_b_a_fun_fun_fun$ )(selecyl$ B_a_fun_c_b_a_fun_fun_fun_tree$ )(selecym$ B_a_fun_c_b_a_fun_fun_fun_tree$ )))(C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ (node$ay (selecyn$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun$ )(selecyo$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )(selecyp$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )))(C_a_fun_b_c_a_fun_fun_fun_tree$ (node$az (selecyq$ C_a_fun_b_c_a_fun_fun_fun$ )(selecyr$ C_a_fun_b_c_a_fun_fun_fun_tree$ )(selecys$ C_a_fun_b_c_a_fun_fun_fun_tree$ )))(A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$ba (selecyt$ A_a_fun_b_a_fun_b_a_fun_fun_fun$ )(selecyu$ A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )(selecyv$ A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )))(B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ (node$bb (selecyw$ B_a_fun_b_b_fun_b_a_fun_fun_fun$ )(selecyx$ B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )(selecyy$ B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )))(C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ (node$bc (selecyz$ C_a_fun_b_c_fun_b_a_fun_fun_fun$ )(selecza$ C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )(seleczb$ C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )))(A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ (node$bd (seleczc$ A_a_fun_c_a_fun_c_a_fun_fun_fun$ )(seleczd$ A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ )(selecze$ A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ )))(B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ (node$be (seleczf$ B_a_fun_c_b_fun_c_a_fun_fun_fun$ )(seleczg$ B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ )(seleczh$ B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ )))(C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ (node$bf (seleczi$ C_a_fun_c_c_fun_c_a_fun_fun_fun$ )(seleczj$ C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ )(seleczk$ C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ )))(C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ (node$bg (seleczl$ C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ )(seleczm$ C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ )(seleczn$ C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ )))(A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ (node$bh (seleczo$ A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ )(seleczp$ A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ )(seleczq$ A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ )))(C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ (node$bi (seleczr$ C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ )(seleczs$ C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ )(seleczt$ C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ )))(B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ (node$bj (seleczu$ B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ )(seleczv$ B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ )(seleczw$ B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ )))(C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ (node$bk (seleczx$ C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun$ )(seleczy$ C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )(seleczz$ C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )))(C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ (node$bl (seledaa$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun$ )(seledab$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ )(seledac$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ )))(C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ (node$bm (seledad$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun$ )(seledae$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )(seledaf$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )))(A_c_a_fun_fun_a_a_fun_fun_tree$ (node$bn (seledag$ A_c_a_fun_fun_a_a_fun_fun$ )(seledah$ A_c_a_fun_fun_a_a_fun_fun_tree$ )(seledai$ A_c_a_fun_fun_a_a_fun_fun_tree$ )))(A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ (node$bo (seledaj$ A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun$ )(seledak$ A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ )(seledal$ A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ )))(A_c_a_fun_a_fun_fun_tree$ (node$bp (seledam$ A_c_a_fun_a_fun_fun$ )(seledan$ A_c_a_fun_a_fun_fun_tree$ )(seledao$ A_c_a_fun_a_fun_fun_tree$ )))(C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$ (node$bq (seledap$ C_b_a_fun_fun_c_b_a_fun_fun_fun$ )(seledaq$ C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(seledar$ C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$ )))(C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ (node$br (seledas$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun$ )(seledat$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )(seledau$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )))(C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$ (node$bs (seledav$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun$ )(seledaw$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$ )(seledax$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$ )))(C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$ (node$bt (seleday$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun$ )(seledaz$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )(seledba$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )))(B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$bu (seledbb$ B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun$ )(seledbc$ B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )(seledbd$ B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )))(B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ (node$bv (seledbe$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun$ )(seledbf$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ )(seledbg$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ )))(B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$bw (seledbh$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun$ )(seledbi$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$ )(seledbj$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$ )))(A_b_a_fun_fun_a_a_fun_fun_tree$ (node$bx (seledbk$ A_b_a_fun_fun_a_a_fun_fun$ )(seledbl$ A_b_a_fun_fun_a_a_fun_fun_tree$ )(seledbm$ A_b_a_fun_fun_a_a_fun_fun_tree$ )))(A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ (node$by (seledbn$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$ )(seledbo$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )(seledbp$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )))(A_b_a_fun_a_fun_fun_tree$ (node$bz (seledbq$ A_b_a_fun_a_fun_fun$ )(seledbr$ A_b_a_fun_a_fun_fun_tree$ )(seledbs$ A_b_a_fun_a_fun_fun_tree$ )))(A_c_fun_tree$ (node$ca (seledbt$ A_c_fun$ )(seledbu$ A_c_fun_tree$ )(seledbv$ A_c_fun_tree$ )))))
(declare-fun u$ ()B_c_a_fun_fun_tree$ )
(declare-fun v$ ()C_tree$ )
(declare-fun w$ ()B_tree$ )
(declare-fun comp$ ()A_a_fun_b_a_fun_b_a_fun_fun_fun$ )
(declare-fun comp$a ()B_a_fun_b_b_fun_b_a_fun_fun_fun$ )
(declare-fun comp$b ()C_a_fun_b_c_fun_b_a_fun_fun_fun$ )
(declare-fun comp$c ()A_a_fun_c_a_fun_c_a_fun_fun_fun$ )
(declare-fun comp$d ()B_a_fun_c_b_fun_c_a_fun_fun_fun$ )
(declare-fun comp$e ()C_a_fun_c_c_fun_c_a_fun_fun_fun$ )
(declare-fun comp$f ()C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ )
(declare-fun comp$g ()A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ )
(declare-fun comp$h ()C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ )
(declare-fun comp$i ()B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ )
(declare-fun left$c (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun left$d (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun left$e (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun left$f (C_b_a_fun_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun left$g (B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun left$h (B_c_a_fun_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun left$i (C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun root$c (B_a_fun_tree$ )B_a_fun$ )
(declare-fun root$d (C_a_fun_tree$ )C_a_fun$ )
(declare-fun root$e (C_b_a_fun_fun_tree$ )C_b_a_fun_fun$ )
(declare-fun root$f (B_c_a_fun_fun_tree$ )B_c_a_fun_fun$ )
(declare-fun root$g (B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )B_c_a_fun_fun_c_b_a_fun_fun_fun$ )
(declare-fun root$h (C_c_fun_tree$ )C_c_fun$ )
(declare-fun root$i (B_c_fun_tree$ )B_c_fun$ )
(declare-fun root$j (A_c_fun_tree$ )A_c_fun$ )
(declare-fun root$k (C_b_fun_tree$ )C_b_fun$ )
(declare-fun root$l (B_b_fun_tree$ )B_b_fun$ )
(declare-fun right$c (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun right$d (C_b_a_fun_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun right$e (B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun right$f (B_c_a_fun_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun right$g (C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_C$ ()B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_I$ ()C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_K$ ()C_b_c_fun_fun_tree$ )
(declare-fun tree_S$ ()B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun fun_app$ (B_a_fun$ B$ )A$ )
(declare-fun tree_I$a ()A_a_fun_tree$ )
(declare-fun tree_I$b ()C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_I$c ()B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_K$a ()B_b_b_fun_fun_tree$ )
(declare-fun tree_K$b ()C_a_fun_a_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$c ()B_a_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$d ()A_a_a_fun_fun_tree$ )
(declare-fun tree_K$e ()A_b_a_fun_fun_tree$ )
(declare-fun tree_K$f ()B_a_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$g ()C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_K$h ()A_c_a_fun_fun_tree$ )
(declare-fun tree_K$i ()C_a_fun_b_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$j ()C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$k ()A_c_a_fun_a_fun_fun_tree$ )
(declare-fun tree_K$l ()C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_K$m ()B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$n ()A_b_a_fun_a_fun_fun_tree$ )
(declare-fun tree_S$a ()B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$b ()B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$c ()C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_S$d ()C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_S$e ()C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_S$f ()B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$g ()C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$h ()C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$i ()C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_S$j ()C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$k ()A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$l ()C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$m ()B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$n ()A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (C_a_fun$ C$ )A$ )
(declare-fun fun_app$b (C_b_a_fun_fun$ C$ )B_a_fun$ )
(declare-fun fun_app$c (B_c_a_fun_fun$ B$ )C_a_fun$ )
(declare-fun fun_app$d (B_c_a_fun_fun_c_b_a_fun_fun_fun$ B_c_a_fun_fun$ )C_b_a_fun_fun$ )
(declare-fun fun_app$e (C_c_fun$ C$ )C$ )
(declare-fun fun_app$f (C_b_fun$ C$ )B$ )
(declare-fun fun_app$g (B_c_fun$ B$ )C$ )
(declare-fun fun_app$h (B_b_fun$ B$ )B$ )
(declare-fun fun_app$i (A_c_fun$ A$ )C$ )
(declare-fun map_tree$ (B_c_fun$ B_tree$ )C_tree$ )
(declare-fun tree_ap$a (C_b_a_fun_fun_tree$ C_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$b (B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ B_c_a_fun_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_ap$c (C_a_fun_tree$ C_tree$ )A_tree$ )
(declare-fun tree_ap$d (B_c_a_fun_fun_tree$ B_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$e (B_c_fun_tree$ B_tree$ )C_tree$ )
(declare-fun tree_ap$f (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$g (A_c_a_fun_fun_tree$ A_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$h (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$i (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$j (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$k (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$l (B_a_a_fun_fun_tree$ B_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$m (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$n (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$o (B_b_a_fun_fun_tree$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$p (B_c_fun_b_a_fun_fun_tree$ B_c_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$q (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ B_c_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$r (C_a_fun_c_a_fun_fun_tree$ C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$s (C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ C_a_a_fun_fun_tree$ )C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$t (C_a_a_fun_fun_tree$ C_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$u (C_b_fun_c_a_fun_fun_tree$ C_b_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$v (C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$ C_b_a_fun_fun_tree$ )C_b_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$w (C_b_fun_tree$ C_tree$ )B_tree$ )
(declare-fun tree_ap$x (C_c_fun_c_a_fun_fun_tree$ C_c_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$y (C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$ C_c_a_fun_fun_tree$ )C_c_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$z (C_c_a_fun_fun_tree$ C_tree$ )C_a_fun_tree$ )
(declare-fun map_tree$a (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun map_tree$b (A_c_a_fun_fun$ A_tree$ )C_a_fun_tree$ )
(declare-fun map_tree$c (A_b_a_fun_fun$ A_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$d (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$e (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$f (C_b_a_fun_fun$ C_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$g (B_c_a_fun_fun_c_b_a_fun_fun_fun$ B_c_a_fun_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun map_tree$h (C_a_fun$ C_tree$ )A_tree$ )
(declare-fun map_tree$i (B_c_a_fun_fun$ B_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$aa (C_c_fun_tree$ C_tree$ )C_tree$ )
(declare-fun tree_ap$ab (B_c_a_fun_fun_b_a_fun_fun_tree$ B_c_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$ac (B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ B_c_a_fun_a_fun_fun_tree$ )B_c_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ad (C_a_fun_a_fun_tree$ C_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$ae (B_c_a_fun_a_fun_fun_tree$ B_tree$ )C_a_fun_a_fun_tree$ )
(declare-fun tree_ap$af (C_a_fun_c_b_a_fun_fun_fun_tree$ C_a_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ag (C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ C_a_b_a_fun_fun_fun_tree$ )C_a_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$ah (C_a_b_a_fun_fun_fun_tree$ C_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ai (C_c_fun_c_b_a_fun_fun_fun_tree$ C_c_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_ap$aj (C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ C_c_b_a_fun_fun_fun_tree$ )C_c_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$ak (C_c_b_a_fun_fun_fun_tree$ C_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_ap$al (C_b_a_fun_fun_c_a_fun_fun_tree$ C_b_a_fun_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$am (C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ C_b_a_fun_a_fun_fun_tree$ )C_b_a_fun_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$an (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$ao (C_b_a_fun_a_fun_fun_tree$ C_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_ap$ap (C_b_c_fun_fun_tree$ C_tree$ )B_c_fun_tree$ )
(declare-fun tree_ap$aq (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$ar (C_a_fun_a_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )A_c_a_fun_fun_tree$ )
(declare-fun tree_ap$as (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$at (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$au (B_a_fun_c_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_ap$av (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ C_b_a_fun_fun_tree$ )B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$aw (C_a_fun_b_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_ap$ax (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ A_a_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ay (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$az (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ C_a_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ba (A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ A_a_fun_tree$ )C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$bb (B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ B_a_fun_tree$ )C_b_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$bc (C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )C_c_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$bd (C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ C_a_fun_a_fun_tree$ )B_c_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$be (A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )C_a_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$bf (C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ C_b_a_fun_fun_tree$ )C_c_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$bg (B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ B_a_fun_a_fun_tree$ )C_b_a_fun_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$bh (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_fun_tree$ )C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$bi (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$bj (A_c_a_fun_fun_a_a_fun_fun_tree$ A_c_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$bk (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ A_c_a_fun_a_fun_fun_tree$ )A_c_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$bl (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$bm (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_ap$bn (B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_fun_c_b_a_fun_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$bo (B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$ )B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$bp (A_b_a_fun_fun_a_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$bq (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_a_fun_fun_tree$ )A_b_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$br (A_c_fun_tree$ A_tree$ )C_tree$ )
(declare-fun tree_pure$ (B$ )B_tree$ )
(declare-fun tree_pure$a (A$ )A_tree$ )
(declare-fun tree_pure$b (C$ )C_tree$ )
(declare-fun tree_pure$c (B_c_a_fun_fun$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_pure$d (A_a_fun_b_a_fun_b_a_fun_fun_fun$ )A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$e (B_a_fun_b_b_fun_b_a_fun_fun_fun$ )B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$f (C_a_fun_b_c_fun_b_a_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$g (A_a_fun_c_a_fun_c_a_fun_fun_fun$ )A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$h (B_a_fun_c_b_fun_c_a_fun_fun_fun$ )B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$i (C_a_fun_c_c_fun_c_a_fun_fun_fun$ )C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$j (C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ )C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$k (A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ )A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$l (C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ )C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$m (B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ )B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$n (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$o (C_a_fun$ )C_a_fun_tree$ )
(declare-fun tree_pure$p (C_b_a_fun_fun$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_pure$q (B_c_a_fun_fun_c_b_a_fun_fun_fun$ )B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$r (C_c_fun$ )C_c_fun_tree$ )
(declare-fun tree_pure$s (C_b_fun$ )C_b_fun_tree$ )
(declare-fun tree_pure$t (B_c_fun$ )B_c_fun_tree$ )
(declare-fun tree_pure$u (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$v (A_c_fun$ )A_c_fun_tree$ )
(declare-fun tree_pure$w (A_c_a_fun_fun$ )A_c_a_fun_fun_tree$ )
(declare-fun tree_pure$x (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_pure$y (A_a_fun$ )A_a_fun_tree$ )
(assert (! (not (= (tree_ap$ (tree_ap$a (tree_ap$b tree_C$ u$ )v$ )w$ )(tree_ap$c (tree_ap$d u$ w$ )v$ ))):named a0 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_c_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$e ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$f ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_c_a_fun_fun_tree$ )(?v1 A_c_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$g ?v0 ?v2 )(tree_ap$g ?v1 ?v2 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$h ?v0 ?v2 )(tree_ap$h ?v1 ?v2 )))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$i ?v0 ?v2 )(tree_ap$i ?v1 ?v2 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$ ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_b_a_fun_fun_tree$ ))(=> (forall ((?v2 C_tree$ ))(= (tree_ap$a ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v1 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ ))(=> (forall ((?v2 B_c_a_fun_fun_tree$ ))(= (tree_ap$b ?v0 ?v2 )(tree_ap$b ?v1 ?v2 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_a_fun_tree$ ))(=> (forall ((?v2 C_tree$ ))(= (tree_ap$c ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$d ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$j (tree_ap$k tree_S$ ?v0 )?v1 )?v2 )(tree_ap$i (tree_ap$l ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$m (tree_ap$n tree_S$a ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$o ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_c_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$p (tree_ap$q tree_S$b ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$d ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 C_a_a_fun_fun_tree$ )(?v1 C_a_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$r (tree_ap$s tree_S$c ?v0 )?v1 )?v2 )(tree_ap$i (tree_ap$t ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_b_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$u (tree_ap$v tree_S$d ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$a ?v0 ?v2 )(tree_ap$w ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 C_c_a_fun_fun_tree$ )(?v1 C_c_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$x (tree_ap$y tree_S$e ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$z ?v0 ?v2 )(tree_ap$aa ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 B_c_a_fun_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ab (tree_ap$ac tree_S$f ?v0 )?v1 )?v2 )(tree_ap$ad (tree_ap$ae ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 C_a_b_a_fun_fun_fun_tree$ )(?v1 C_a_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$a (tree_ap$af (tree_ap$ag tree_S$g ?v0 )?v1 )?v2 )(tree_ap$h (tree_ap$ah ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 C_c_b_a_fun_fun_fun_tree$ )(?v1 C_c_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$a (tree_ap$ai (tree_ap$aj tree_S$h ?v0 )?v1 )?v2 )(tree_ap$a (tree_ap$ak ?v0 ?v2 )(tree_ap$aa ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 C_b_a_fun_a_fun_fun_tree$ )(?v1 C_b_a_fun_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$al (tree_ap$am tree_S$i ?v0 )?v1 )?v2 )(tree_ap$an (tree_ap$ao ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 C_tree$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_ap$ap tree_K$ ?v0 )?v1 )?v0 )):named a21 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (tree_ap$f (tree_ap$aq tree_K$a ?v0 )?v1 )?v0 )):named a22 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$g (tree_ap$ar tree_K$b ?v0 )?v1 )?v0 )):named a23 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$h (tree_ap$as tree_K$c ?v0 )?v1 )?v0 )):named a24 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (tree_ap$i (tree_ap$at tree_K$d ?v0 )?v1 )?v0 )):named a25 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_ap$h tree_K$e ?v0 )?v1 )?v0 )):named a26 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 C_tree$ ))(= (tree_ap$a (tree_ap$au tree_K$f ?v0 )?v1 )?v0 )):named a27 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(= (tree_ap$b (tree_ap$av tree_K$g ?v0 )?v1 )?v0 )):named a28 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 C_tree$ ))(= (tree_ap$c (tree_ap$g tree_K$h ?v0 )?v1 )?v0 )):named a29 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_ap$aw tree_K$i ?v0 )?v1 )?v0 )):named a30 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_c_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$e ?v0 (tree_pure$ ?v2 ))(tree_ap$e ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$f ?v0 (tree_pure$ ?v2 ))(tree_ap$f ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_c_a_fun_fun_tree$ )(?v1 A_c_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$g ?v0 (tree_pure$a ?v2 ))(tree_ap$g ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$h ?v0 (tree_pure$a ?v2 ))(tree_ap$h ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$i ?v0 (tree_pure$a ?v2 ))(tree_ap$i ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$ ?v0 (tree_pure$ ?v2 ))(tree_ap$ ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_b_a_fun_fun_tree$ ))(=> (forall ((?v2 C$ ))(= (tree_ap$a ?v0 (tree_pure$b ?v2 ))(tree_ap$a ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v1 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ ))(=> (forall ((?v2 B_c_a_fun_fun$ ))(= (tree_ap$b ?v0 (tree_pure$c ?v2 ))(tree_ap$b ?v1 (tree_pure$c ?v2 ))))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_a_fun_tree$ ))(=> (forall ((?v2 C$ ))(= (tree_ap$c ?v0 (tree_pure$b ?v2 ))(tree_ap$c ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$d ?v0 (tree_pure$ ?v2 ))(tree_ap$d ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$j (tree_ap$ax (tree_pure$d comp$ )?v0 )?v1 )?v2 )(tree_ap$i ?v0 (tree_ap$ ?v1 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$m (tree_ap$ay (tree_pure$e comp$a )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$f ?v1 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 B_c_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$p (tree_ap$az (tree_pure$f comp$b )?v0 )?v1 )?v2 )(tree_ap$c ?v0 (tree_ap$e ?v1 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 C_a_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$r (tree_ap$ba (tree_pure$g comp$c )?v0 )?v1 )?v2 )(tree_ap$i ?v0 (tree_ap$c ?v1 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 C_b_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$u (tree_ap$bb (tree_pure$h comp$d )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$w ?v1 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_c_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$x (tree_ap$bc (tree_pure$i comp$e )?v0 )?v1 )?v2 )(tree_ap$c ?v0 (tree_ap$aa ?v1 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 C_a_fun_a_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ab (tree_ap$bd (tree_pure$j comp$f )?v0 )?v1 )?v2 )(tree_ap$ad ?v0 (tree_ap$d ?v1 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 C_a_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$a (tree_ap$af (tree_ap$be (tree_pure$k comp$g )?v0 )?v1 )?v2 )(tree_ap$h ?v0 (tree_ap$c ?v1 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_c_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$a (tree_ap$ai (tree_ap$bf (tree_pure$l comp$h )?v0 )?v1 )?v2 )(tree_ap$a ?v0 (tree_ap$aa ?v1 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 C_b_a_fun_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$al (tree_ap$bg (tree_pure$m comp$i )?v0 )?v1 )?v2 )(tree_ap$an ?v0 (tree_ap$a ?v1 ?v2 )))):named a50 ))
(assert (! (= tree_I$ (tree_ap$bh (tree_ap$bi tree_S$j tree_K$j )tree_K$i )):named a51 ))
(assert (! (= tree_I$a (tree_ap$bj (tree_ap$bk tree_S$k tree_K$k )tree_K$h )):named a52 ))
(assert (! (= tree_I$b (tree_ap$bl (tree_ap$bm tree_S$l tree_K$l )tree_K$g )):named a53 ))
(assert (! (= tree_I$c (tree_ap$bn (tree_ap$bo tree_S$m tree_K$m )tree_K$f )):named a54 ))
(assert (! (= tree_I$a (tree_ap$bp (tree_ap$bq tree_S$n tree_K$n )tree_K$e )):named a55 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$n ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$ ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C$ ))(= (tree_ap$c (tree_pure$o ?v0 )(tree_pure$b ?v1 ))(tree_pure$a (fun_app$a ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C$ ))(= (tree_ap$a (tree_pure$p ?v0 )(tree_pure$b ?v1 ))(tree_pure$n (fun_app$b ?v0 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$d (tree_pure$c ?v0 )(tree_pure$ ?v1 ))(tree_pure$o (fun_app$c ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun$ )(?v1 B_c_a_fun_fun$ ))(= (tree_ap$b (tree_pure$q ?v0 )(tree_pure$c ?v1 ))(tree_pure$p (fun_app$d ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ ))(= (tree_ap$aa (tree_pure$r ?v0 )(tree_pure$b ?v1 ))(tree_pure$b (fun_app$e ?v0 ?v1 )))):named a61 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C$ ))(= (tree_ap$w (tree_pure$s ?v0 )(tree_pure$b ?v1 ))(tree_pure$ (fun_app$f ?v0 ?v1 )))):named a62 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B$ ))(= (tree_ap$e (tree_pure$t ?v0 )(tree_pure$ ?v1 ))(tree_pure$b (fun_app$g ?v0 ?v1 )))):named a63 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$f (tree_pure$u ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$h ?v0 ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A$ ))(= (tree_ap$br (tree_pure$v ?v0 )(tree_pure$a ?v1 ))(tree_pure$b (fun_app$i ?v0 ?v1 )))):named a65 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$ (tree_pure$n ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$ ?v0 ?v1 )(tree_ap$ (tree_pure$n ?v0 )?v2 )(tree_ap$ (tree_pure$n ?v0 )?v3 )))):named a66 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$c (tree_pure$o ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$ (fun_app$a ?v0 ?v1 )(tree_ap$c (tree_pure$o ?v0 )?v2 )(tree_ap$c (tree_pure$o ?v0 )?v3 )))):named a67 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$a (tree_pure$p ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$a (fun_app$b ?v0 ?v1 )(tree_ap$a (tree_pure$p ?v0 )?v2 )(tree_ap$a (tree_pure$p ?v0 )?v3 )))):named a68 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$d (tree_pure$c ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$g (fun_app$c ?v0 ?v1 )(tree_ap$d (tree_pure$c ?v0 )?v2 )(tree_ap$d (tree_pure$c ?v0 )?v3 )))):named a69 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun$ )(?v1 B_c_a_fun_fun$ )(?v2 B_c_a_fun_fun_tree$ )(?v3 B_c_a_fun_fun_tree$ ))(= (tree_ap$b (tree_pure$q ?v0 )(node$f ?v1 ?v2 ?v3 ))(node$c (fun_app$d ?v0 ?v1 )(tree_ap$b (tree_pure$q ?v0 )?v2 )(tree_ap$b (tree_pure$q ?v0 )?v3 )))):named a70 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$aa (tree_pure$r ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$d (fun_app$e ?v0 ?v1 )(tree_ap$aa (tree_pure$r ?v0 )?v2 )(tree_ap$aa (tree_pure$r ?v0 )?v3 )))):named a71 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$w (tree_pure$s ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$b (fun_app$f ?v0 ?v1 )(tree_ap$w (tree_pure$s ?v0 )?v2 )(tree_ap$w (tree_pure$s ?v0 )?v3 )))):named a72 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$e (tree_pure$t ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$d (fun_app$g ?v0 ?v1 )(tree_ap$e (tree_pure$t ?v0 )?v2 )(tree_ap$e (tree_pure$t ?v0 )?v3 )))):named a73 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$f (tree_pure$u ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$h ?v0 ?v1 )(tree_ap$f (tree_pure$u ?v0 )?v2 )(tree_ap$f (tree_pure$u ?v0 )?v3 )))):named a74 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$br (tree_pure$v ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$d (fun_app$i ?v0 ?v1 )(tree_ap$br (tree_pure$v ?v0 )?v2 )(tree_ap$br (tree_pure$v ?v0 )?v3 )))):named a75 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$ ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a76 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_a_fun_tree$ )(?v2 C_a_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$c (node$g ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$ (fun_app$a ?v0 ?v3 )(tree_ap$c ?v1 ?v4 )(tree_ap$c ?v2 ?v5 ))):pattern ((tree_ap$c (node$g ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a77 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C_b_a_fun_fun_tree$ )(?v2 C_b_a_fun_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$a (fun_app$b ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a78 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_c_a_fun_fun_tree$ )(?v2 B_c_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$d (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$g (fun_app$c ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a79 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun$ )(?v1 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v2 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v3 B_c_a_fun_fun$ )(?v4 B_c_a_fun_fun_tree$ )(?v5 B_c_a_fun_fun_tree$ ))(! (= (tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$f ?v3 ?v4 ?v5 ))(node$c (fun_app$d ?v0 ?v3 )(tree_ap$b ?v1 ?v4 )(tree_ap$b ?v2 ?v5 ))):pattern ((tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$f ?v3 ?v4 ?v5 ))))):named a80 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_c_fun_tree$ )(?v2 C_c_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$aa (node$ab ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$d (fun_app$e ?v0 ?v3 )(tree_ap$aa ?v1 ?v4 )(tree_ap$aa ?v2 ?v5 ))):pattern ((tree_ap$aa (node$ab ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a81 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_b_fun_tree$ )(?v2 C_b_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$w (node$x ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$b (fun_app$f ?v0 ?v3 )(tree_ap$w ?v1 ?v4 )(tree_ap$w ?v2 ?v5 ))):pattern ((tree_ap$w (node$x ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a82 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_c_fun_tree$ )(?v2 B_c_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$e (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$d (fun_app$g ?v0 ?v3 )(tree_ap$e ?v1 ?v4 )(tree_ap$e ?v2 ?v5 ))):pattern ((tree_ap$e (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a83 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$b (fun_app$h ?v0 ?v3 )(tree_ap$f ?v1 ?v4 )(tree_ap$f ?v2 ?v5 ))):pattern ((tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a84 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_c_fun_tree$ )(?v2 A_c_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$br (node$ca ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$d (fun_app$i ?v0 ?v3 )(tree_ap$br ?v1 ?v4 )(tree_ap$br ?v2 ?v5 ))):pattern ((tree_ap$br (node$ca ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a85 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_pure$t ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a86 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (tree_ap$f (tree_pure$u ?v0 )?v1 )(map_tree$a ?v0 ?v1 ))):named a87 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$g (tree_pure$w ?v0 )?v1 )(map_tree$b ?v0 ?v1 ))):named a88 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$h (tree_pure$x ?v0 )?v1 )(map_tree$c ?v0 ?v1 ))):named a89 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (tree_ap$i (tree_pure$y ?v0 )?v1 )(map_tree$d ?v0 ?v1 ))):named a90 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_pure$n ?v0 )?v1 )(map_tree$e ?v0 ?v1 ))):named a91 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C_tree$ ))(= (tree_ap$a (tree_pure$p ?v0 )?v1 )(map_tree$f ?v0 ?v1 ))):named a92 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun$ )(?v1 B_c_a_fun_fun_tree$ ))(= (tree_ap$b (tree_pure$q ?v0 )?v1 )(map_tree$g ?v0 ?v1 ))):named a93 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_tree$ ))(= (tree_ap$c (tree_pure$o ?v0 )?v1 )(map_tree$h ?v0 ?v1 ))):named a94 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_pure$c ?v0 )?v1 )(map_tree$i ?v0 ?v1 ))):named a95 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (root$ (tree_ap$ ?v0 ?v1 ))(fun_app$ (root$c ?v0 )(root$a ?v1 )))):named a96 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (root$ (tree_ap$c ?v0 ?v1 ))(fun_app$a (root$d ?v0 )(root$b ?v1 )))):named a97 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_tree$ ))(= (root$c (tree_ap$a ?v0 ?v1 ))(fun_app$b (root$e ?v0 )(root$b ?v1 )))):named a98 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$d (tree_ap$d ?v0 ?v1 ))(fun_app$c (root$f ?v0 )(root$a ?v1 )))):named a99 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(= (root$e (tree_ap$b ?v0 ?v1 ))(fun_app$d (root$g ?v0 )(root$f ?v1 )))):named a100 ))
(assert (! (forall ((?v0 C_c_fun_tree$ )(?v1 C_tree$ ))(= (root$b (tree_ap$aa ?v0 ?v1 ))(fun_app$e (root$h ?v0 )(root$b ?v1 )))):named a101 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_tree$ ))(= (root$b (tree_ap$e ?v0 ?v1 ))(fun_app$g (root$i ?v0 )(root$a ?v1 )))):named a102 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 A_tree$ ))(= (root$b (tree_ap$br ?v0 ?v1 ))(fun_app$i (root$j ?v0 )(root$ ?v1 )))):named a103 ))
(assert (! (forall ((?v0 C_b_fun_tree$ )(?v1 C_tree$ ))(= (root$a (tree_ap$w ?v0 ?v1 ))(fun_app$f (root$k ?v0 )(root$b ?v1 )))):named a104 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (root$a (tree_ap$f ?v0 ?v1 ))(fun_app$h (root$l ?v0 )(root$a ?v1 )))):named a105 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (left$ (tree_ap$an ?v0 ?v1 ))(tree_ap$an (left$c ?v0 )(left$d ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (left$ (tree_ap$i ?v0 ?v1 ))(tree_ap$i (left$e ?v0 )(left$ ?v1 )))):named a107 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (left$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (left$d ?v0 )(left$a ?v1 )))):named a108 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_tree$ ))(= (left$d (tree_ap$a ?v0 ?v1 ))(tree_ap$a (left$f ?v0 )(left$b ?v1 )))):named a109 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(= (left$f (tree_ap$b ?v0 ?v1 ))(tree_ap$b (left$g ?v0 )(left$h ?v1 )))):named a110 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (left$ (tree_ap$c ?v0 ?v1 ))(tree_ap$c (left$i ?v0 )(left$b ?v1 )))):named a111 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (left$i (tree_ap$d ?v0 ?v1 ))(tree_ap$d (left$h ?v0 )(left$a ?v1 )))):named a112 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (right$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (right$c ?v0 )(right$a ?v1 )))):named a113 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_tree$ ))(= (right$c (tree_ap$a ?v0 ?v1 ))(tree_ap$a (right$d ?v0 )(right$b ?v1 )))):named a114 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(= (right$d (tree_ap$b ?v0 ?v1 ))(tree_ap$b (right$e ?v0 )(right$f ?v1 )))):named a115 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (right$ (tree_ap$c ?v0 ?v1 ))(tree_ap$c (right$g ?v0 )(right$b ?v1 )))):named a116 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (right$g (tree_ap$d ?v0 ?v1 ))(tree_ap$d (right$f ?v0 )(right$a ?v1 )))):named a117 ))
(check-sat )
;(get-unsat-core )
