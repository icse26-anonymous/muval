;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_b_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_a_fun_b_fun$ 0 )
(declare-sort A_b_fun_a_fun$ 0 )
(declare-sort A_b_fun_b_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort A_tree_bool_fun$ 0 )
(declare-sort B_tree_bool_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort A_a_fun_tree_bool_fun$ 0 )
(declare-sort A_b_fun_tree_bool_fun$ 0 )
(declare-sort B_a_fun_tree_bool_fun$ 0 )
(declare-sort B_b_fun_tree_bool_fun$ 0 )
(declare-sort A_a_b_fun_a_b_fun_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun_a_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun_b_fun$ 0 )
(declare-sort B_a_b_fun_a_b_fun_fun_fun$ 0 )
(declare-sort A_tree_a_tree_bool_fun_fun$ 0 )
(declare-sort B_tree_b_tree_bool_fun_fun$ 0 )
(declare-sort A_a_b_fun_fun_tree_bool_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun_tree_bool_fun$ 0 )
(declare-sort A_a_fun_tree_a_a_fun_tree_bool_fun_fun$ 0 )
(declare-sort A_b_fun_tree_a_b_fun_tree_bool_fun_fun$ 0 )
(declare-sort B_a_fun_tree_b_a_fun_tree_bool_fun_fun$ 0 )
(declare-sort B_b_fun_tree_b_b_fun_tree_bool_fun_fun$ 0 )
(declare-sort A_a_b_fun_a_b_fun_fun_fun_tree_bool_fun$ 0 )
(declare-sort A_a_b_fun_fun_tree_a_a_b_fun_fun_tree_bool_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun_tree_a_b_fun_a_b_fun_fun_tree_bool_fun_fun$ 0 )
(declare-sort A_a_b_fun_a_b_fun_fun_fun_tree_a_a_b_fun_a_b_fun_fun_fun_tree_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_b_fun_tree$ (node$ (select$ A_b_fun$ )(selecta$ A_b_fun_tree$ )(selectb$ A_b_fun_tree$ )))(B_tree$ (node$a (root$ B$ )(left$ B_tree$ )(right$ B_tree$ )))(A_tree$ (node$b (root$a A$ )(left$a A_tree$ )(right$a A_tree$ )))(A_b_fun_a_b_fun_fun_tree$ (node$c (selectc$ A_b_fun_a_b_fun_fun$ )(selectd$ A_b_fun_a_b_fun_fun_tree$ )(selecte$ A_b_fun_a_b_fun_fun_tree$ )))(B_b_fun_tree$ (node$d (selectf$ B_b_fun$ )(selectg$ B_b_fun_tree$ )(selecth$ B_b_fun_tree$ )))(B_a_fun_tree$ (node$e (selecti$ B_a_fun$ )(selectj$ B_a_fun_tree$ )(selectk$ B_a_fun_tree$ )))(A_a_fun_tree$ (node$f (selectl$ A_a_fun$ )(selectm$ A_a_fun_tree$ )(selectn$ A_a_fun_tree$ )))(B_a_b_fun_fun_tree$ (node$g (selecto$ B_a_b_fun_fun$ )(selectp$ B_a_b_fun_fun_tree$ )(selectq$ B_a_b_fun_fun_tree$ )))(A_a_b_fun_fun_tree$ (node$h (selectr$ A_a_b_fun_fun$ )(selects$ A_a_b_fun_fun_tree$ )(selectt$ A_a_b_fun_fun_tree$ )))(A_b_fun_b_fun_tree$ (node$i (selectu$ A_b_fun_b_fun$ )(selectv$ A_b_fun_b_fun_tree$ )(selectw$ A_b_fun_b_fun_tree$ )))(A_b_fun_a_fun_tree$ (node$j (selectx$ A_b_fun_a_fun$ )(selecty$ A_b_fun_a_fun_tree$ )(selectz$ A_b_fun_a_fun_tree$ )))(B_a_b_fun_a_b_fun_fun_fun_tree$ (node$k (selecua$ B_a_b_fun_a_b_fun_fun_fun$ )(selecub$ B_a_b_fun_a_b_fun_fun_fun_tree$ )(selecuc$ B_a_b_fun_a_b_fun_fun_fun_tree$ )))(A_a_a_fun_fun_tree$ (node$l (selecud$ A_a_a_fun_fun$ )(selecue$ A_a_a_fun_fun_tree$ )(selecuf$ A_a_a_fun_fun_tree$ )))(A_a_fun_a_fun_tree$ (node$m (selecug$ A_a_fun_a_fun$ )(selecuh$ A_a_fun_a_fun_tree$ )(selecui$ A_a_fun_a_fun_tree$ )))(A_a_fun_b_fun_tree$ (node$n (selecuj$ A_a_fun_b_fun$ )(selecuk$ A_a_fun_b_fun_tree$ )(selecul$ A_a_fun_b_fun_tree$ )))(B_a_a_fun_fun_tree$ (node$o (selecum$ B_a_a_fun_fun$ )(selecun$ B_a_a_fun_fun_tree$ )(selecuo$ B_a_a_fun_fun_tree$ )))(A_b_fun_a_b_fun_fun_a_fun_tree$ (node$p (selecup$ A_b_fun_a_b_fun_fun_a_fun$ )(selecuq$ A_b_fun_a_b_fun_fun_a_fun_tree$ )(selecur$ A_b_fun_a_b_fun_fun_a_fun_tree$ )))(A_a_b_fun_a_b_fun_fun_fun_tree$ (node$q (selecus$ A_a_b_fun_a_b_fun_fun_fun$ )(selecut$ A_a_b_fun_a_b_fun_fun_fun_tree$ )(selecuu$ A_a_b_fun_a_b_fun_fun_fun_tree$ )))(A_b_fun_a_b_fun_fun_b_fun_tree$ (node$r (selecuv$ A_b_fun_a_b_fun_fun_b_fun$ )(selecuw$ A_b_fun_a_b_fun_fun_b_fun_tree$ )(selecux$ A_b_fun_a_b_fun_fun_b_fun_tree$ )))(A_b_fun_a_b_fun_fun_a_b_fun_fun_tree$ (node$s (selecuy$ A_b_fun_a_b_fun_fun_a_b_fun_fun$ )(selecuz$ A_b_fun_a_b_fun_fun_a_b_fun_fun_tree$ )(selecva$ A_b_fun_a_b_fun_fun_a_b_fun_fun_tree$ )))))
(declare-fun fa$ ()A_b_fun_tree$ )
(declare-fun ga$ ()A_b_fun_tree$ )
(declare-fun left$b (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun left$c (A_b_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun_tree$ )
(declare-fun left$d (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun left$e (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun left$f (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun left$g (B_a_b_fun_fun_tree$ )B_a_b_fun_fun_tree$ )
(declare-fun left$h (A_a_b_fun_fun_tree$ )A_a_b_fun_fun_tree$ )
(declare-fun left$i (A_b_fun_b_fun_tree$ )A_b_fun_b_fun_tree$ )
(declare-fun left$j (A_b_fun_a_fun_tree$ )A_b_fun_a_fun_tree$ )
(declare-fun left$k (B_a_b_fun_a_b_fun_fun_fun_tree$ )B_a_b_fun_a_b_fun_fun_fun_tree$ )
(declare-fun left$l (B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun left$m (A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun left$n (A_a_b_fun_a_b_fun_fun_fun_tree$ )A_a_b_fun_a_b_fun_fun_fun_tree$ )
(declare-fun left$o (A_b_fun_a_b_fun_fun_b_fun_tree$ )A_b_fun_a_b_fun_fun_b_fun_tree$ )
(declare-fun left$p (A_b_fun_a_b_fun_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun_a_b_fun_fun_tree$ )
(declare-fun root$b (A_b_fun_tree$ )A_b_fun$ )
(declare-fun root$c (A_b_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun$ )
(declare-fun root$d (B_b_fun_tree$ )B_b_fun$ )
(declare-fun root$e (B_a_fun_tree$ )B_a_fun$ )
(declare-fun root$f (A_a_fun_tree$ )A_a_fun$ )
(declare-fun root$g (B_a_b_fun_fun_tree$ )B_a_b_fun_fun$ )
(declare-fun root$h (A_a_b_fun_fun_tree$ )A_a_b_fun_fun$ )
(declare-fun root$i (A_b_fun_b_fun_tree$ )A_b_fun_b_fun$ )
(declare-fun root$j (A_b_fun_a_fun_tree$ )A_b_fun_a_fun$ )
(declare-fun root$k (B_a_b_fun_a_b_fun_fun_fun_tree$ )B_a_b_fun_a_b_fun_fun_fun$ )
(declare-fun root$l (B_a_a_fun_fun_tree$ )B_a_a_fun_fun$ )
(declare-fun root$m (A_a_a_fun_fun_tree$ )A_a_a_fun_fun$ )
(declare-fun root$n (A_a_b_fun_a_b_fun_fun_fun_tree$ )A_a_b_fun_a_b_fun_fun_fun$ )
(declare-fun root$o (A_b_fun_a_b_fun_fun_b_fun_tree$ A_b_fun_a_b_fun_fun$ )B$ )
(declare-fun root$p (A_b_fun_a_b_fun_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun_a_b_fun_fun$ )
(declare-fun right$b (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun right$c (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun right$d (A_b_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun_tree$ )
(declare-fun right$e (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun right$f (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun right$g (B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun right$h (A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun right$i (A_a_b_fun_fun_tree$ )A_a_b_fun_fun_tree$ )
(declare-fun right$j (B_a_b_fun_fun_tree$ )B_a_b_fun_fun_tree$ )
(declare-fun right$k (A_b_fun_a_fun_tree$ )A_b_fun_a_fun_tree$ )
(declare-fun right$l (A_b_fun_b_fun_tree$ )A_b_fun_b_fun_tree$ )
(declare-fun right$m (A_b_fun_a_b_fun_fun_a_fun_tree$ )A_b_fun_a_b_fun_fun_a_fun_tree$ )
(declare-fun right$n (A_a_b_fun_a_b_fun_fun_fun_tree$ )A_a_b_fun_a_b_fun_fun_fun_tree$ )
(declare-fun right$o (A_b_fun_a_b_fun_fun_b_fun_tree$ )A_b_fun_a_b_fun_fun_b_fun_tree$ )
(declare-fun right$p (A_b_fun_a_b_fun_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun_a_b_fun_fun_tree$ )
(declare-fun fun_app$ (A_b_fun$ A$ )B$ )
(declare-fun tree_ap$ (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun fun_app$a (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$b (B_b_fun$ B$ )B$ )
(declare-fun fun_app$c (B_a_fun$ B$ )A$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun fun_app$e (B_a_b_fun_fun$ B$ )A_b_fun$ )
(declare-fun fun_app$f (A_a_b_fun_fun$ A$ )A_b_fun$ )
(declare-fun fun_app$g (A_b_fun_b_fun$ A_b_fun$ )B$ )
(declare-fun fun_app$h (A_b_fun_a_fun$ A_b_fun$ )A$ )
(declare-fun fun_app$i (B_a_b_fun_a_b_fun_fun_fun$ B$ )A_b_fun_a_b_fun_fun$ )
(declare-fun fun_app$j (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$k (A_a_fun_a_fun$ A_a_fun$ )A$ )
(declare-fun fun_app$l (A_a_fun_b_fun$ A_a_fun$ )B$ )
(declare-fun fun_app$m (B_b_fun_tree_bool_fun$ B_b_fun_tree$ )Bool )
(declare-fun fun_app$n (B_b_fun_tree_b_b_fun_tree_bool_fun_fun$ B_b_fun_tree$ )B_b_fun_tree_bool_fun$ )
(declare-fun fun_app$o (B_a_fun_tree_bool_fun$ B_a_fun_tree$ )Bool )
(declare-fun fun_app$p (B_a_fun_tree_b_a_fun_tree_bool_fun_fun$ B_a_fun_tree$ )B_a_fun_tree_bool_fun$ )
(declare-fun fun_app$q (A_a_b_fun_a_b_fun_fun_fun_tree_bool_fun$ A_a_b_fun_a_b_fun_fun_fun_tree$ )Bool )
(declare-fun fun_app$r (A_a_b_fun_a_b_fun_fun_fun_tree_a_a_b_fun_a_b_fun_fun_fun_tree_bool_fun_fun$ A_a_b_fun_a_b_fun_fun_fun_tree$ )A_a_b_fun_a_b_fun_fun_fun_tree_bool_fun$ )
(declare-fun fun_app$s (A_a_b_fun_fun_tree_bool_fun$ A_a_b_fun_fun_tree$ )Bool )
(declare-fun fun_app$t (A_a_b_fun_fun_tree_a_a_b_fun_fun_tree_bool_fun_fun$ A_a_b_fun_fun_tree$ )A_a_b_fun_fun_tree_bool_fun$ )
(declare-fun fun_app$u (A_a_fun_tree_bool_fun$ A_a_fun_tree$ )Bool )
(declare-fun fun_app$v (A_a_fun_tree_a_a_fun_tree_bool_fun_fun$ A_a_fun_tree$ )A_a_fun_tree_bool_fun$ )
(declare-fun fun_app$w (A_tree_bool_fun$ A_tree$ )Bool )
(declare-fun fun_app$x (A_tree_a_tree_bool_fun_fun$ A_tree$ )A_tree_bool_fun$ )
(declare-fun fun_app$y (A_b_fun_a_b_fun_fun_tree_bool_fun$ A_b_fun_a_b_fun_fun_tree$ )Bool )
(declare-fun fun_app$z (A_b_fun_a_b_fun_fun_tree_a_b_fun_a_b_fun_fun_tree_bool_fun_fun$ A_b_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun_tree_bool_fun$ )
(declare-fun tree_ap$a (A_b_fun_a_b_fun_fun_tree$ A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$b (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$c (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun tree_ap$d (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$e (B_a_b_fun_fun_tree$ B_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$f (A_a_b_fun_fun_tree$ A_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$g (A_b_fun_b_fun_tree$ A_b_fun_tree$ )B_tree$ )
(declare-fun tree_ap$h (A_b_fun_a_fun_tree$ A_b_fun_tree$ )A_tree$ )
(declare-fun tree_ap$i (B_a_b_fun_a_b_fun_fun_fun_tree$ B_tree$ )A_b_fun_a_b_fun_fun_tree$ )
(declare-fun tree_ap$j (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$k (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$l (A_a_fun_b_fun_tree$ A_a_fun_tree$ )B_tree$ )
(declare-fun tree_ap$m (A_b_fun_a_b_fun_fun_a_fun_tree$ A_b_fun_a_b_fun_fun_tree$ )A_tree$ )
(declare-fun tree_ap$n (A_b_fun_a_b_fun_fun_b_fun_tree$ A_b_fun_a_b_fun_fun_tree$ )B_tree$ )
(declare-fun tree_ap$o (A_b_fun_a_b_fun_fun_a_b_fun_fun_tree$ A_b_fun_a_b_fun_fun_tree$ )A_b_fun_tree$ )
(declare-fun fun_app$aa (B_tree_bool_fun$ B_tree$ )Bool )
(declare-fun fun_app$ab (B_tree_b_tree_bool_fun_fun$ B_tree$ )B_tree_bool_fun$ )
(declare-fun fun_app$ac (A_b_fun_tree_bool_fun$ A_b_fun_tree$ )Bool )
(declare-fun fun_app$ad (A_b_fun_tree_a_b_fun_tree_bool_fun_fun$ A_b_fun_tree$ )A_b_fun_tree_bool_fun$ )
(declare-fun fun_app$ae (A_b_fun_a_b_fun_fun_a_b_fun_fun$ A_b_fun_a_b_fun_fun$ )A_b_fun$ )
(declare-fun tree_pure$ (A$ )A_tree$ )
(declare-fun tree_pure$a (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$b (B$ )B_tree$ )
(declare-fun tree_pure$c (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$d (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$e (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$f (A_a_a_fun_fun$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_pure$g (A_a_b_fun_fun$ )A_a_b_fun_fun_tree$ )
(declare-fun tree_pure$h (A_a_fun_a_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_pure$i (A_a_fun_b_fun$ )A_a_fun_b_fun_tree$ )
(declare-fun tree_pure$j (A_b_fun_a_fun$ )A_b_fun_a_fun_tree$ )
(declare-fun tree_pure$k (A_b_fun_b_fun$ )A_b_fun_b_fun_tree$ )
(declare-fun tree_pure$l (A_b_fun_a_b_fun_fun$ )A_b_fun_a_b_fun_fun_tree$ )
(declare-fun tree_pure$m (B_a_a_fun_fun$ )B_a_a_fun_fun_tree$ )
(assert (! (not (and (= (root$b fa$ )(root$b ga$ ))(and (exists ((?v0 A_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(and (= (left$b fa$ )?v0 )(and (= (left$b ga$ )?v1 )(forall ((?v2 A$ ))(= (tree_ap$ ?v0 (tree_pure$ ?v2 ))(tree_ap$ ?v1 (tree_pure$ ?v2 )))))))(exists ((?v0 A_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(and (= (right$b fa$ )?v0 )(and (= (right$b ga$ )?v1 )(forall ((?v2 A$ ))(= (tree_ap$ ?v0 (tree_pure$ ?v2 ))(tree_ap$ ?v1 (tree_pure$ ?v2 )))))))))):named a0 ))
(assert (! (= (root$b fa$ )(root$b ga$ )):named a1 ))
(assert (! (forall ((?v0 A$ ))(= (tree_ap$ (left$b fa$ )(tree_pure$ ?v0 ))(tree_ap$ (left$b ga$ )(tree_pure$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ ))(= (tree_ap$ (right$b fa$ )(tree_pure$ ?v0 ))(tree_ap$ (right$b ga$ )(tree_pure$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ ))(= (tree_ap$ fa$ (tree_pure$ ?v0 ))(tree_ap$ ga$ (tree_pure$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (left$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (left$b ?v0 )(left$a ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (left$b (tree_ap$a ?v0 ?v1 ))(tree_ap$a (left$c ?v0 )(left$b ?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (left$ (tree_ap$b ?v0 ?v1 ))(tree_ap$b (left$d ?v0 )(left$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (left$a (tree_ap$c ?v0 ?v1 ))(tree_ap$c (left$e ?v0 )(left$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (left$a (tree_ap$d ?v0 ?v1 ))(tree_ap$d (left$f ?v0 )(left$a ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_tree$ ))(= (left$b (tree_ap$e ?v0 ?v1 ))(tree_ap$e (left$g ?v0 )(left$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$ )(?v1 A_tree$ ))(= (left$b (tree_ap$f ?v0 ?v1 ))(tree_ap$f (left$h ?v0 )(left$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_b_fun_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (left$ (tree_ap$g ?v0 ?v1 ))(tree_ap$g (left$i ?v0 )(left$b ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_b_fun_a_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (left$a (tree_ap$h ?v0 ?v1 ))(tree_ap$h (left$j ?v0 )(left$b ?v1 )))):named a13 ))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_fun_tree$ )(?v1 B_tree$ ))(= (left$c (tree_ap$i ?v0 ?v1 ))(tree_ap$i (left$k ?v0 )(left$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (root$ (tree_ap$ ?v0 ?v1 ))(fun_app$ (root$b ?v0 )(root$a ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (root$b (tree_ap$a ?v0 ?v1 ))(fun_app$a (root$c ?v0 )(root$b ?v1 )))):named a16 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (root$ (tree_ap$b ?v0 ?v1 ))(fun_app$b (root$d ?v0 )(root$ ?v1 )))):named a17 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (root$a (tree_ap$c ?v0 ?v1 ))(fun_app$c (root$e ?v0 )(root$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (root$a (tree_ap$d ?v0 ?v1 ))(fun_app$d (root$f ?v0 )(root$a ?v1 )))):named a19 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$b (tree_ap$e ?v0 ?v1 ))(fun_app$e (root$g ?v0 )(root$ ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$ )(?v1 A_tree$ ))(= (root$b (tree_ap$f ?v0 ?v1 ))(fun_app$f (root$h ?v0 )(root$a ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_b_fun_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (root$ (tree_ap$g ?v0 ?v1 ))(fun_app$g (root$i ?v0 )(root$b ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_b_fun_a_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (root$a (tree_ap$h ?v0 ?v1 ))(fun_app$h (root$j ?v0 )(root$b ?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$c (tree_ap$i ?v0 ?v1 ))(fun_app$i (root$k ?v0 )(root$ ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$ (tree_pure$a ?v0 )(tree_pure$ ?v1 ))(tree_pure$b (fun_app$ ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$d (tree_pure$c ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$d ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$c (tree_pure$d ?v0 )(tree_pure$b ?v1 ))(tree_pure$ (fun_app$c ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$b (tree_pure$e ?v0 )(tree_pure$b ?v1 ))(tree_pure$b (fun_app$b ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$j (tree_pure$f ?v0 )(tree_pure$ ?v1 ))(tree_pure$c (fun_app$j ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A$ ))(= (tree_ap$f (tree_pure$g ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$f ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$k (tree_pure$h ?v0 )(tree_pure$c ?v1 ))(tree_pure$ (fun_app$k ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_a_fun_b_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$l (tree_pure$i ?v0 )(tree_pure$c ?v1 ))(tree_pure$b (fun_app$l ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_b_fun_a_fun$ )(?v1 A_b_fun$ ))(= (tree_ap$h (tree_pure$j ?v0 )(tree_pure$a ?v1 ))(tree_pure$ (fun_app$h ?v0 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_b_fun_b_fun$ )(?v1 A_b_fun$ ))(= (tree_ap$g (tree_pure$k ?v0 )(tree_pure$a ?v1 ))(tree_pure$b (fun_app$g ?v0 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A$ ))(= (left$a (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a35 ))
(assert (! (forall ((?v0 A_b_fun$ ))(= (left$b (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a36 ))
(assert (! (forall ((?v0 B$ ))(= (left$ (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a37 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (left$f (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a38 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$ ))(= (left$c (tree_pure$l ?v0 ))(tree_pure$l ?v0 ))):named a39 ))
(assert (! (forall ((?v0 B_b_fun$ ))(= (left$d (tree_pure$e ?v0 ))(tree_pure$e ?v0 ))):named a40 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (left$e (tree_pure$d ?v0 ))(tree_pure$d ?v0 ))):named a41 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ ))(= (left$l (tree_pure$m ?v0 ))(tree_pure$m ?v0 ))):named a42 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ ))(= (left$h (tree_pure$g ?v0 ))(tree_pure$g ?v0 ))):named a43 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(= (left$m (tree_pure$f ?v0 ))(tree_pure$f ?v0 ))):named a44 ))
(assert (! (forall ((?v0 A$ ))(= (right$a (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a45 ))
(assert (! (forall ((?v0 A_b_fun$ ))(= (right$b (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a46 ))
(assert (! (forall ((?v0 B$ ))(= (right$ (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a47 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (right$c (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a48 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$ ))(= (right$d (tree_pure$l ?v0 ))(tree_pure$l ?v0 ))):named a49 ))
(assert (! (forall ((?v0 B_b_fun$ ))(= (right$e (tree_pure$e ?v0 ))(tree_pure$e ?v0 ))):named a50 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (right$f (tree_pure$d ?v0 ))(tree_pure$d ?v0 ))):named a51 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ ))(= (right$g (tree_pure$m ?v0 ))(tree_pure$m ?v0 ))):named a52 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(= (right$h (tree_pure$f ?v0 ))(tree_pure$f ?v0 ))):named a53 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ ))(= (right$i (tree_pure$g ?v0 ))(tree_pure$g ?v0 ))):named a54 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (right$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (right$b ?v0 )(right$a ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (right$b (tree_ap$a ?v0 ?v1 ))(tree_ap$a (right$d ?v0 )(right$b ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (right$a (tree_ap$d ?v0 ?v1 ))(tree_ap$d (right$c ?v0 )(right$a ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (right$a (tree_ap$c ?v0 ?v1 ))(tree_ap$c (right$f ?v0 )(right$ ?v1 )))):named a58 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (right$ (tree_ap$b ?v0 ?v1 ))(tree_ap$b (right$e ?v0 )(right$ ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$ )(?v1 A_tree$ ))(= (right$b (tree_ap$f ?v0 ?v1 ))(tree_ap$f (right$i ?v0 )(right$a ?v1 )))):named a60 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_tree$ ))(= (right$b (tree_ap$e ?v0 ?v1 ))(tree_ap$e (right$j ?v0 )(right$ ?v1 )))):named a61 ))
(assert (! (forall ((?v0 A_b_fun_a_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (right$a (tree_ap$h ?v0 ?v1 ))(tree_ap$h (right$k ?v0 )(right$b ?v1 )))):named a62 ))
(assert (! (forall ((?v0 A_b_fun_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (right$ (tree_ap$g ?v0 ?v1 ))(tree_ap$g (right$l ?v0 )(right$b ?v1 )))):named a63 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_a_fun_tree$ )(?v1 A_b_fun_a_b_fun_fun_tree$ ))(= (right$a (tree_ap$m ?v0 ?v1 ))(tree_ap$m (right$m ?v0 )(right$d ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A$ ))(= (root$a (tree_pure$ ?v0 ))?v0 )):named a65 ))
(assert (! (forall ((?v0 A_b_fun$ ))(= (root$b (tree_pure$a ?v0 ))?v0 )):named a66 ))
(assert (! (forall ((?v0 B$ ))(= (root$ (tree_pure$b ?v0 ))?v0 )):named a67 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (root$f (tree_pure$c ?v0 ))?v0 )):named a68 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$ ))(= (root$c (tree_pure$l ?v0 ))?v0 )):named a69 ))
(assert (! (forall ((?v0 B_b_fun$ ))(= (root$d (tree_pure$e ?v0 ))?v0 )):named a70 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (root$e (tree_pure$d ?v0 ))?v0 )):named a71 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ ))(= (root$l (tree_pure$m ?v0 ))?v0 )):named a72 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ ))(= (root$h (tree_pure$g ?v0 ))?v0 )):named a73 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(= (root$m (tree_pure$f ?v0 ))?v0 )):named a74 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (and (= (root$d ?v0 )(root$d ?v1 ))(and (= (left$d ?v0 )(left$d ?v1 ))(= (right$e ?v0 )(right$e ?v1 ))))(= ?v0 ?v1 ))):named a75 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (and (= (root$e ?v0 )(root$e ?v1 ))(and (= (left$e ?v0 )(left$e ?v1 ))(= (right$f ?v0 )(right$f ?v1 ))))(= ?v0 ?v1 ))):named a76 ))
(assert (! (forall ((?v0 A_a_b_fun_a_b_fun_fun_fun_tree$ )(?v1 A_a_b_fun_a_b_fun_fun_fun_tree$ ))(=> (and (= (root$n ?v0 )(root$n ?v1 ))(and (= (left$n ?v0 )(left$n ?v1 ))(= (right$n ?v0 )(right$n ?v1 ))))(= ?v0 ?v1 ))):named a77 ))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$ )(?v1 A_a_b_fun_fun_tree$ ))(=> (and (= (root$h ?v0 )(root$h ?v1 ))(and (= (left$h ?v0 )(left$h ?v1 ))(= (right$i ?v0 )(right$i ?v1 ))))(= ?v0 ?v1 ))):named a78 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (and (= (root$f ?v0 )(root$f ?v1 ))(and (= (left$f ?v0 )(left$f ?v1 ))(= (right$c ?v0 )(right$c ?v1 ))))(= ?v0 ?v1 ))):named a79 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(=> (and (= (root$a ?v0 )(root$a ?v1 ))(and (= (left$a ?v0 )(left$a ?v1 ))(= (right$a ?v0 )(right$a ?v1 ))))(= ?v0 ?v1 ))):named a80 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_a_b_fun_fun_tree$ ))(=> (and (= (root$c ?v0 )(root$c ?v1 ))(and (= (left$c ?v0 )(left$c ?v1 ))(= (right$d ?v0 )(right$d ?v1 ))))(= ?v0 ?v1 ))):named a81 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(and (= (left$ ?v0 )(left$ ?v1 ))(= (right$ ?v0 )(right$ ?v1 ))))(= ?v0 ?v1 ))):named a82 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(=> (and (= (root$b ?v0 )(root$b ?v1 ))(and (= (left$b ?v0 )(left$b ?v1 ))(= (right$b ?v0 )(right$b ?v1 ))))(= ?v0 ?v1 ))):named a83 ))
(assert (! (forall ((?v0 B_b_fun_tree_b_b_fun_tree_bool_fun_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ ))(=> (and (fun_app$m (fun_app$n ?v0 ?v1 )?v2 )(forall ((?v3 B_b_fun_tree$ )(?v4 B_b_fun_tree$ ))(=> (fun_app$m (fun_app$n ?v0 ?v3 )?v4 )(and (= (root$d ?v3 )(root$d ?v4 ))(and (or (fun_app$m (fun_app$n ?v0 (left$d ?v3 ))(left$d ?v4 ))(= (left$d ?v3 )(left$d ?v4 )))(or (fun_app$m (fun_app$n ?v0 (right$e ?v3 ))(right$e ?v4 ))(= (right$e ?v3 )(right$e ?v4 ))))))))(= ?v1 ?v2 ))):named a84 ))
(assert (! (forall ((?v0 B_a_fun_tree_b_a_fun_tree_bool_fun_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ ))(=> (and (fun_app$o (fun_app$p ?v0 ?v1 )?v2 )(forall ((?v3 B_a_fun_tree$ )(?v4 B_a_fun_tree$ ))(=> (fun_app$o (fun_app$p ?v0 ?v3 )?v4 )(and (= (root$e ?v3 )(root$e ?v4 ))(and (or (fun_app$o (fun_app$p ?v0 (left$e ?v3 ))(left$e ?v4 ))(= (left$e ?v3 )(left$e ?v4 )))(or (fun_app$o (fun_app$p ?v0 (right$f ?v3 ))(right$f ?v4 ))(= (right$f ?v3 )(right$f ?v4 ))))))))(= ?v1 ?v2 ))):named a85 ))
(assert (! (forall ((?v0 A_a_b_fun_a_b_fun_fun_fun_tree_a_a_b_fun_a_b_fun_fun_fun_tree_bool_fun_fun$ )(?v1 A_a_b_fun_a_b_fun_fun_fun_tree$ )(?v2 A_a_b_fun_a_b_fun_fun_fun_tree$ ))(=> (and (fun_app$q (fun_app$r ?v0 ?v1 )?v2 )(forall ((?v3 A_a_b_fun_a_b_fun_fun_fun_tree$ )(?v4 A_a_b_fun_a_b_fun_fun_fun_tree$ ))(=> (fun_app$q (fun_app$r ?v0 ?v3 )?v4 )(and (= (root$n ?v3 )(root$n ?v4 ))(and (or (fun_app$q (fun_app$r ?v0 (left$n ?v3 ))(left$n ?v4 ))(= (left$n ?v3 )(left$n ?v4 )))(or (fun_app$q (fun_app$r ?v0 (right$n ?v3 ))(right$n ?v4 ))(= (right$n ?v3 )(right$n ?v4 ))))))))(= ?v1 ?v2 ))):named a86 ))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree_a_a_b_fun_fun_tree_bool_fun_fun$ )(?v1 A_a_b_fun_fun_tree$ )(?v2 A_a_b_fun_fun_tree$ ))(=> (and (fun_app$s (fun_app$t ?v0 ?v1 )?v2 )(forall ((?v3 A_a_b_fun_fun_tree$ )(?v4 A_a_b_fun_fun_tree$ ))(=> (fun_app$s (fun_app$t ?v0 ?v3 )?v4 )(and (= (root$h ?v3 )(root$h ?v4 ))(and (or (fun_app$s (fun_app$t ?v0 (left$h ?v3 ))(left$h ?v4 ))(= (left$h ?v3 )(left$h ?v4 )))(or (fun_app$s (fun_app$t ?v0 (right$i ?v3 ))(right$i ?v4 ))(= (right$i ?v3 )(right$i ?v4 ))))))))(= ?v1 ?v2 ))):named a87 ))
(assert (! (forall ((?v0 A_a_fun_tree_a_a_fun_tree_bool_fun_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ ))(=> (and (fun_app$u (fun_app$v ?v0 ?v1 )?v2 )(forall ((?v3 A_a_fun_tree$ )(?v4 A_a_fun_tree$ ))(=> (fun_app$u (fun_app$v ?v0 ?v3 )?v4 )(and (= (root$f ?v3 )(root$f ?v4 ))(and (or (fun_app$u (fun_app$v ?v0 (left$f ?v3 ))(left$f ?v4 ))(= (left$f ?v3 )(left$f ?v4 )))(or (fun_app$u (fun_app$v ?v0 (right$c ?v3 ))(right$c ?v4 ))(= (right$c ?v3 )(right$c ?v4 ))))))))(= ?v1 ?v2 ))):named a88 ))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree$ ))(=> (and (fun_app$w (fun_app$x ?v0 ?v1 )?v2 )(forall ((?v3 A_tree$ )(?v4 A_tree$ ))(=> (fun_app$w (fun_app$x ?v0 ?v3 )?v4 )(and (= (root$a ?v3 )(root$a ?v4 ))(and (or (fun_app$w (fun_app$x ?v0 (left$a ?v3 ))(left$a ?v4 ))(= (left$a ?v3 )(left$a ?v4 )))(or (fun_app$w (fun_app$x ?v0 (right$a ?v3 ))(right$a ?v4 ))(= (right$a ?v3 )(right$a ?v4 ))))))))(= ?v1 ?v2 ))):named a89 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree_a_b_fun_a_b_fun_fun_tree_bool_fun_fun$ )(?v1 A_b_fun_a_b_fun_fun_tree$ )(?v2 A_b_fun_a_b_fun_fun_tree$ ))(=> (and (fun_app$y (fun_app$z ?v0 ?v1 )?v2 )(forall ((?v3 A_b_fun_a_b_fun_fun_tree$ )(?v4 A_b_fun_a_b_fun_fun_tree$ ))(=> (fun_app$y (fun_app$z ?v0 ?v3 )?v4 )(and (= (root$c ?v3 )(root$c ?v4 ))(and (or (fun_app$y (fun_app$z ?v0 (left$c ?v3 ))(left$c ?v4 ))(= (left$c ?v3 )(left$c ?v4 )))(or (fun_app$y (fun_app$z ?v0 (right$d ?v3 ))(right$d ?v4 ))(= (right$d ?v3 )(right$d ?v4 ))))))))(= ?v1 ?v2 ))):named a90 ))
(assert (! (forall ((?v0 B_tree_b_tree_bool_fun_fun$ )(?v1 B_tree$ )(?v2 B_tree$ ))(=> (and (fun_app$aa (fun_app$ab ?v0 ?v1 )?v2 )(forall ((?v3 B_tree$ )(?v4 B_tree$ ))(=> (fun_app$aa (fun_app$ab ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (or (fun_app$aa (fun_app$ab ?v0 (left$ ?v3 ))(left$ ?v4 ))(= (left$ ?v3 )(left$ ?v4 )))(or (fun_app$aa (fun_app$ab ?v0 (right$ ?v3 ))(right$ ?v4 ))(= (right$ ?v3 )(right$ ?v4 ))))))))(= ?v1 ?v2 ))):named a91 ))
(assert (! (forall ((?v0 A_b_fun_tree_a_b_fun_tree_bool_fun_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ ))(=> (and (fun_app$ac (fun_app$ad ?v0 ?v1 )?v2 )(forall ((?v3 A_b_fun_tree$ )(?v4 A_b_fun_tree$ ))(=> (fun_app$ac (fun_app$ad ?v0 ?v3 )?v4 )(and (= (root$b ?v3 )(root$b ?v4 ))(and (or (fun_app$ac (fun_app$ad ?v0 (left$b ?v3 ))(left$b ?v4 ))(= (left$b ?v3 )(left$b ?v4 )))(or (fun_app$ac (fun_app$ad ?v0 (right$b ?v3 ))(right$b ?v4 ))(= (right$b ?v3 )(right$b ?v4 ))))))))(= ?v1 ?v2 ))):named a92 ))
(assert (! (forall ((?v0 B_b_fun_tree_b_b_fun_tree_bool_fun_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ ))(=> (and (fun_app$m (fun_app$n ?v0 ?v1 )?v2 )(forall ((?v3 B_b_fun_tree$ )(?v4 B_b_fun_tree$ ))(=> (fun_app$m (fun_app$n ?v0 ?v3 )?v4 )(and (= (root$d ?v3 )(root$d ?v4 ))(and (fun_app$m (fun_app$n ?v0 (left$d ?v3 ))(left$d ?v4 ))(fun_app$m (fun_app$n ?v0 (right$e ?v3 ))(right$e ?v4 )))))))(= ?v1 ?v2 ))):named a93 ))
(assert (! (forall ((?v0 B_a_fun_tree_b_a_fun_tree_bool_fun_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ ))(=> (and (fun_app$o (fun_app$p ?v0 ?v1 )?v2 )(forall ((?v3 B_a_fun_tree$ )(?v4 B_a_fun_tree$ ))(=> (fun_app$o (fun_app$p ?v0 ?v3 )?v4 )(and (= (root$e ?v3 )(root$e ?v4 ))(and (fun_app$o (fun_app$p ?v0 (left$e ?v3 ))(left$e ?v4 ))(fun_app$o (fun_app$p ?v0 (right$f ?v3 ))(right$f ?v4 )))))))(= ?v1 ?v2 ))):named a94 ))
(assert (! (forall ((?v0 A_a_b_fun_a_b_fun_fun_fun_tree_a_a_b_fun_a_b_fun_fun_fun_tree_bool_fun_fun$ )(?v1 A_a_b_fun_a_b_fun_fun_fun_tree$ )(?v2 A_a_b_fun_a_b_fun_fun_fun_tree$ ))(=> (and (fun_app$q (fun_app$r ?v0 ?v1 )?v2 )(forall ((?v3 A_a_b_fun_a_b_fun_fun_fun_tree$ )(?v4 A_a_b_fun_a_b_fun_fun_fun_tree$ ))(=> (fun_app$q (fun_app$r ?v0 ?v3 )?v4 )(and (= (root$n ?v3 )(root$n ?v4 ))(and (fun_app$q (fun_app$r ?v0 (left$n ?v3 ))(left$n ?v4 ))(fun_app$q (fun_app$r ?v0 (right$n ?v3 ))(right$n ?v4 )))))))(= ?v1 ?v2 ))):named a95 ))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree_a_a_b_fun_fun_tree_bool_fun_fun$ )(?v1 A_a_b_fun_fun_tree$ )(?v2 A_a_b_fun_fun_tree$ ))(=> (and (fun_app$s (fun_app$t ?v0 ?v1 )?v2 )(forall ((?v3 A_a_b_fun_fun_tree$ )(?v4 A_a_b_fun_fun_tree$ ))(=> (fun_app$s (fun_app$t ?v0 ?v3 )?v4 )(and (= (root$h ?v3 )(root$h ?v4 ))(and (fun_app$s (fun_app$t ?v0 (left$h ?v3 ))(left$h ?v4 ))(fun_app$s (fun_app$t ?v0 (right$i ?v3 ))(right$i ?v4 )))))))(= ?v1 ?v2 ))):named a96 ))
(assert (! (forall ((?v0 A_a_fun_tree_a_a_fun_tree_bool_fun_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ ))(=> (and (fun_app$u (fun_app$v ?v0 ?v1 )?v2 )(forall ((?v3 A_a_fun_tree$ )(?v4 A_a_fun_tree$ ))(=> (fun_app$u (fun_app$v ?v0 ?v3 )?v4 )(and (= (root$f ?v3 )(root$f ?v4 ))(and (fun_app$u (fun_app$v ?v0 (left$f ?v3 ))(left$f ?v4 ))(fun_app$u (fun_app$v ?v0 (right$c ?v3 ))(right$c ?v4 )))))))(= ?v1 ?v2 ))):named a97 ))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree$ ))(=> (and (fun_app$w (fun_app$x ?v0 ?v1 )?v2 )(forall ((?v3 A_tree$ )(?v4 A_tree$ ))(=> (fun_app$w (fun_app$x ?v0 ?v3 )?v4 )(and (= (root$a ?v3 )(root$a ?v4 ))(and (fun_app$w (fun_app$x ?v0 (left$a ?v3 ))(left$a ?v4 ))(fun_app$w (fun_app$x ?v0 (right$a ?v3 ))(right$a ?v4 )))))))(= ?v1 ?v2 ))):named a98 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree_a_b_fun_a_b_fun_fun_tree_bool_fun_fun$ )(?v1 A_b_fun_a_b_fun_fun_tree$ )(?v2 A_b_fun_a_b_fun_fun_tree$ ))(=> (and (fun_app$y (fun_app$z ?v0 ?v1 )?v2 )(forall ((?v3 A_b_fun_a_b_fun_fun_tree$ )(?v4 A_b_fun_a_b_fun_fun_tree$ ))(=> (fun_app$y (fun_app$z ?v0 ?v3 )?v4 )(and (= (root$c ?v3 )(root$c ?v4 ))(and (fun_app$y (fun_app$z ?v0 (left$c ?v3 ))(left$c ?v4 ))(fun_app$y (fun_app$z ?v0 (right$d ?v3 ))(right$d ?v4 )))))))(= ?v1 ?v2 ))):named a99 ))
(assert (! (forall ((?v0 B_tree_b_tree_bool_fun_fun$ )(?v1 B_tree$ )(?v2 B_tree$ ))(=> (and (fun_app$aa (fun_app$ab ?v0 ?v1 )?v2 )(forall ((?v3 B_tree$ )(?v4 B_tree$ ))(=> (fun_app$aa (fun_app$ab ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (fun_app$aa (fun_app$ab ?v0 (left$ ?v3 ))(left$ ?v4 ))(fun_app$aa (fun_app$ab ?v0 (right$ ?v3 ))(right$ ?v4 )))))))(= ?v1 ?v2 ))):named a100 ))
(assert (! (forall ((?v0 A_b_fun_tree_a_b_fun_tree_bool_fun_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ ))(=> (and (fun_app$ac (fun_app$ad ?v0 ?v1 )?v2 )(forall ((?v3 A_b_fun_tree$ )(?v4 A_b_fun_tree$ ))(=> (fun_app$ac (fun_app$ad ?v0 ?v3 )?v4 )(and (= (root$b ?v3 )(root$b ?v4 ))(and (fun_app$ac (fun_app$ad ?v0 (left$b ?v3 ))(left$b ?v4 ))(fun_app$ac (fun_app$ad ?v0 (right$b ?v3 ))(right$b ?v4 )))))))(= ?v1 ?v2 ))):named a101 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$ ?v0 ?v1 )(node$a (fun_app$ (root$b ?v0 )(root$a ?v1 ))(tree_ap$ (left$b ?v0 )(left$a ?v1 ))(tree_ap$ (right$b ?v0 )(right$a ?v1 ))))):named a102 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$d ?v0 ?v1 )(node$b (fun_app$d (root$f ?v0 )(root$a ?v1 ))(tree_ap$d (left$f ?v0 )(left$a ?v1 ))(tree_ap$d (right$c ?v0 )(right$a ?v1 ))))):named a103 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$b ?v0 ?v1 )(node$a (fun_app$b (root$d ?v0 )(root$ ?v1 ))(tree_ap$b (left$d ?v0 )(left$ ?v1 ))(tree_ap$b (right$e ?v0 )(right$ ?v1 ))))):named a104 ))
(assert (! (forall ((?v0 A_b_fun_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (tree_ap$g ?v0 ?v1 )(node$a (fun_app$g (root$i ?v0 )(root$b ?v1 ))(tree_ap$g (left$i ?v0 )(left$b ?v1 ))(tree_ap$g (right$l ?v0 )(right$b ?v1 ))))):named a105 ))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$f ?v0 ?v1 )(node$ (fun_app$f (root$h ?v0 )(root$a ?v1 ))(tree_ap$f (left$h ?v0 )(left$a ?v1 ))(tree_ap$f (right$i ?v0 )(right$a ?v1 ))))):named a106 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$e ?v0 ?v1 )(node$ (fun_app$e (root$g ?v0 )(root$ ?v1 ))(tree_ap$e (left$g ?v0 )(left$ ?v1 ))(tree_ap$e (right$j ?v0 )(right$ ?v1 ))))):named a107 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (tree_ap$a ?v0 ?v1 )(node$ (fun_app$a (root$c ?v0 )(root$b ?v1 ))(tree_ap$a (left$c ?v0 )(left$b ?v1 ))(tree_ap$a (right$d ?v0 )(right$b ?v1 ))))):named a108 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_b_fun_tree$ )(?v1 A_b_fun_a_b_fun_fun_tree$ ))(= (tree_ap$n ?v0 ?v1 )(node$a (root$o ?v0 (root$c ?v1 ))(tree_ap$n (left$o ?v0 )(left$c ?v1 ))(tree_ap$n (right$o ?v0 )(right$d ?v1 ))))):named a109 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_a_b_fun_fun_tree$ ))(= (tree_ap$o ?v0 ?v1 )(node$ (fun_app$ae (root$p ?v0 )(root$c ?v1 ))(tree_ap$o (left$p ?v0 )(left$c ?v1 ))(tree_ap$o (right$p ?v0 )(right$d ?v1 ))))):named a110 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$c ?v0 ?v1 )(node$b (fun_app$c (root$e ?v0 )(root$ ?v1 ))(tree_ap$c (left$e ?v0 )(left$ ?v1 ))(tree_ap$c (right$f ?v0 )(right$ ?v1 ))))):named a111 ))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$ ))(= (node$h (root$h ?v0 )(left$h ?v0 )(right$i ?v0 ))?v0 )):named a112 ))
(assert (! (forall ((?v0 A_a_fun_tree$ ))(= (node$f (root$f ?v0 )(left$f ?v0 )(right$c ?v0 ))?v0 )):named a113 ))
(assert (! (forall ((?v0 A_tree$ ))(= (node$b (root$a ?v0 )(left$a ?v0 )(right$a ?v0 ))?v0 )):named a114 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ ))(= (node$c (root$c ?v0 )(left$c ?v0 )(right$d ?v0 ))?v0 )):named a115 ))
(assert (! (forall ((?v0 B_tree$ ))(= (node$a (root$ ?v0 )(left$ ?v0 )(right$ ?v0 ))?v0 )):named a116 ))
(assert (! (forall ((?v0 A_b_fun_tree$ ))(= (node$ (root$b ?v0 )(left$b ?v0 )(right$b ?v0 ))?v0 )):named a117 ))
(check-sat )
;(get-unsat-core )
