;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-sort A_tree_bool_fun$ 0 )
(declare-sort A_tree_tree_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_tree_tree_bool_fun$ 0 )
(declare-sort A_a_tree_bool_fun_fun$ 0 )
(declare-sort A_tree_a_bool_fun_fun$ 0 )
(declare-sort A_tree_tree_tree_bool_fun$ 0 )
(declare-sort A_a_tree_tree_bool_fun_fun$ 0 )
(declare-sort A_tree_a_tree_bool_fun_fun$ 0 )
(declare-sort A_tree_tree_a_bool_fun_fun$ 0 )
(declare-sort A_tree_a_tree_tree_bool_fun_fun$ 0 )
(declare-sort A_tree_tree_a_tree_bool_fun_fun$ 0 )
(declare-sort A_tree_a_tree_tree_tree_bool_fun_fun$ 0 )
(declare-sort A_tree_tree_a_tree_tree_bool_fun_fun$ 0 )
(declare-sort A_tree_tree_tree_a_tree_bool_fun_fun$ 0 )
(declare-sort A_tree_tree_a_tree_tree_tree_bool_fun_fun$ 0 )
(declare-sort A_tree_tree_tree_a_tree_tree_bool_fun_fun$ 0 )
(declare-sort A_tree_tree_tree_a_tree_tree_tree_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(A_tree_tree$ (node$a (root$a A_tree$ )(left$a A_tree_tree$ )(right$a A_tree_tree$ )))(A_tree_tree_tree$ (node$b (root$b A_tree_tree$ )(left$b A_tree_tree_tree$ )(right$b A_tree_tree_tree$ )))(A_tree_tree_tree_tree$ (node$c (root$c A_tree_tree_tree$ )(left$c A_tree_tree_tree_tree$ )(right$c A_tree_tree_tree_tree$ )))))
(declare-fun a$ ()A_tree$ )
(declare-fun b$ ()A_tree$ )
(declare-fun c$ ()A_tree$ )
(declare-fun aa$ ()A_tree$ )
(declare-fun ba$ ()A_tree$ )
(declare-fun ca$ ()A_tree$ )
(declare-fun plus$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun plus$a (A_tree_tree_tree$ A_tree_tree_tree$ )A_tree_tree_tree$ )
(declare-fun plus$b (A_tree_tree$ A_tree_tree$ )A_tree_tree$ )
(declare-fun plus$c (A_tree_tree_tree_tree$ A_tree_tree_tree_tree$ )A_tree_tree_tree_tree$ )
(declare-fun plus$d (A$ A$ )A$ )
(declare-fun member$ (A_tree_tree$ A_tree_tree_set$ )Bool )
(declare-fun fun_app$ (A_tree_tree_tree_bool_fun$ A_tree_tree_tree$ )Bool )
(declare-fun member$a (A_tree$ A_tree_set$ )Bool )
(declare-fun member$b (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_tree_tree_tree_a_tree_tree_tree_bool_fun_fun$ A_tree_tree_tree$ )A_tree_tree_tree_bool_fun$ )
(declare-fun fun_app$b (A_tree_tree_bool_fun$ A_tree_tree$ )Bool )
(declare-fun fun_app$c (A_tree_tree_a_tree_tree_bool_fun_fun$ A_tree_tree$ )A_tree_tree_bool_fun$ )
(declare-fun fun_app$d (A_tree_bool_fun$ A_tree$ )Bool )
(declare-fun fun_app$e (A_tree_a_tree_bool_fun_fun$ A_tree$ )A_tree_bool_fun$ )
(declare-fun fun_app$f (A_tree_tree_a_tree_tree_tree_bool_fun_fun$ A_tree_tree$ )A_tree_tree_tree_bool_fun$ )
(declare-fun fun_app$g (A_tree_a_tree_tree_bool_fun_fun$ A_tree$ )A_tree_tree_bool_fun$ )
(declare-fun fun_app$h (A_a_tree_bool_fun_fun$ A$ )A_tree_bool_fun$ )
(declare-fun fun_app$i (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$j (A_tree_tree_a_bool_fun_fun$ A_tree_tree$ )A_bool_fun$ )
(declare-fun fun_app$k (A_tree_tree_a_tree_bool_fun_fun$ A_tree_tree$ )A_tree_bool_fun$ )
(declare-fun fun_app$l (A_a_tree_tree_bool_fun_fun$ A$ )A_tree_tree_bool_fun$ )
(declare-fun fun_app$m (A_tree_a_bool_fun_fun$ A_tree$ )A_bool_fun$ )
(declare-fun fun_app$n (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$o (A_tree_tree_tree_a_tree_bool_fun_fun$ A_tree_tree_tree$ )A_tree_bool_fun$ )
(declare-fun fun_app$p (A_tree_tree_tree_a_tree_tree_bool_fun_fun$ A_tree_tree_tree$ )A_tree_tree_bool_fun$ )
(declare-fun fun_app$q (A_tree_a_tree_tree_tree_bool_fun_fun$ A_tree$ )A_tree_tree_tree_bool_fun$ )
(declare-fun rel_tree$ (A_tree_tree_a_tree_tree_bool_fun_fun$ A_tree_tree_tree$ )A_tree_tree_tree_bool_fun$ )
(declare-fun set_tree$ (A_tree_tree_tree$ )A_tree_tree_set$ )
(declare-fun rel_tree$a (A_tree_tree_a_bool_fun_fun$ A_tree_tree_tree$ )A_tree_bool_fun$ )
(declare-fun rel_tree$b (A_tree_tree_a_tree_bool_fun_fun$ A_tree_tree_tree$ )A_tree_tree_bool_fun$ )
(declare-fun rel_tree$c (A_a_tree_tree_bool_fun_fun$ A_tree$ )A_tree_tree_tree_bool_fun$ )
(declare-fun rel_tree$d (A_tree_a_tree_tree_bool_fun_fun$ A_tree_tree$ )A_tree_tree_tree_bool_fun$ )
(declare-fun rel_tree$e (A_tree_a_tree_bool_fun_fun$ A_tree_tree$ )A_tree_tree_bool_fun$ )
(declare-fun rel_tree$f (A_tree_a_bool_fun_fun$ A_tree_tree$ )A_tree_bool_fun$ )
(declare-fun rel_tree$g (A_a_tree_bool_fun_fun$ A_tree$ )A_tree_tree_bool_fun$ )
(declare-fun rel_tree$h (A_a_bool_fun_fun$ A_tree$ )A_tree_bool_fun$ )
(declare-fun set_tree$a (A_tree_tree$ )A_tree_set$ )
(declare-fun set_tree$b (A_tree$ )A_set$ )
(declare-fun tree_pure$ (A_tree_tree$ )A_tree_tree_tree$ )
(declare-fun tree_pure$a (A_tree$ )A_tree_tree$ )
(declare-fun tree_pure$b (A$ )A_tree$ )
(assert (! (not (and (= (root$ ba$ )(root$ ca$ ))(and (exists ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(and (= (left$ ba$ )?v1 )(and (= (left$ ca$ )?v2 )(= (plus$ ?v1 ?v0 )(plus$ ?v2 ?v0 )))))(exists ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(and (= (right$ ba$ )?v1 )(and (= (right$ ca$ )?v2 )(= (plus$ ?v1 ?v0 )(plus$ ?v2 ?v0 )))))))):named a0 ))
(assert (! (= (plus$ b$ a$ )(plus$ c$ a$ )):named a1 ))
(assert (! (= (plus$ ba$ aa$ )(plus$ ca$ aa$ )):named a2 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ ))(= (left$b (plus$a ?v0 ?v1 ))(plus$a (left$b ?v0 )(left$b ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ ))(= (left$a (plus$b ?v0 ?v1 ))(plus$b (left$a ?v0 )(left$a ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (left$ (plus$ ?v0 ?v1 ))(plus$ (left$ ?v0 )(left$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ ))(= (right$b (plus$a ?v0 ?v1 ))(plus$a (right$b ?v0 )(right$b ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ ))(= (right$a (plus$b ?v0 ?v1 ))(plus$b (right$a ?v0 )(right$a ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (right$ (plus$ ?v0 ?v1 ))(plus$ (right$ ?v0 )(right$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_tree_tree_tree_tree$ )(?v1 A_tree_tree_tree_tree$ ))(= (root$c (plus$c ?v0 ?v1 ))(plus$a (root$c ?v0 )(root$c ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ ))(= (root$b (plus$a ?v0 ?v1 ))(plus$b (root$b ?v0 )(root$b ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ ))(= (root$a (plus$b ?v0 ?v1 ))(plus$ (root$a ?v0 )(root$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (root$ (plus$ ?v0 ?v1 ))(plus$d (root$ ?v0 )(root$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ ))(=> (and (= (root$b ?v0 )(root$b ?v1 ))(and (= (left$b ?v0 )(left$b ?v1 ))(= (right$b ?v0 )(right$b ?v1 ))))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ ))(=> (and (= (root$a ?v0 )(root$a ?v1 ))(and (= (left$a ?v0 )(left$a ?v1 ))(= (right$a ?v0 )(right$a ?v1 ))))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(and (= (left$ ?v0 )(left$ ?v1 ))(= (right$ ?v0 )(right$ ?v1 ))))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_tree_tree_tree_a_tree_tree_tree_bool_fun_fun$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_tree_tree_tree$ )(?v4 A_tree_tree_tree$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (root$b ?v3 )(root$b ?v4 ))(and (or (fun_app$ (fun_app$a ?v0 (left$b ?v3 ))(left$b ?v4 ))(= (left$b ?v3 )(left$b ?v4 )))(or (fun_app$ (fun_app$a ?v0 (right$b ?v3 ))(right$b ?v4 ))(= (right$b ?v3 )(right$b ?v4 ))))))))(= ?v1 ?v2 ))):named a16 ))
(assert (! (forall ((?v0 A_tree_tree_a_tree_tree_bool_fun_fun$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ ))(=> (and (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(forall ((?v3 A_tree_tree$ )(?v4 A_tree_tree$ ))(=> (fun_app$b (fun_app$c ?v0 ?v3 )?v4 )(and (= (root$a ?v3 )(root$a ?v4 ))(and (or (fun_app$b (fun_app$c ?v0 (left$a ?v3 ))(left$a ?v4 ))(= (left$a ?v3 )(left$a ?v4 )))(or (fun_app$b (fun_app$c ?v0 (right$a ?v3 ))(right$a ?v4 ))(= (right$a ?v3 )(right$a ?v4 ))))))))(= ?v1 ?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v3 A_tree$ )(?v4 A_tree$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (or (fun_app$d (fun_app$e ?v0 (left$ ?v3 ))(left$ ?v4 ))(= (left$ ?v3 )(left$ ?v4 )))(or (fun_app$d (fun_app$e ?v0 (right$ ?v3 ))(right$ ?v4 ))(= (right$ ?v3 )(right$ ?v4 ))))))))(= ?v1 ?v2 ))):named a18 ))
(assert (! (forall ((?v0 A_tree_tree_tree_a_tree_tree_tree_bool_fun_fun$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_tree_tree_tree$ )(?v4 A_tree_tree_tree$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (root$b ?v3 )(root$b ?v4 ))(and (fun_app$ (fun_app$a ?v0 (left$b ?v3 ))(left$b ?v4 ))(fun_app$ (fun_app$a ?v0 (right$b ?v3 ))(right$b ?v4 )))))))(= ?v1 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 A_tree_tree_a_tree_tree_bool_fun_fun$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ ))(=> (and (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(forall ((?v3 A_tree_tree$ )(?v4 A_tree_tree$ ))(=> (fun_app$b (fun_app$c ?v0 ?v3 )?v4 )(and (= (root$a ?v3 )(root$a ?v4 ))(and (fun_app$b (fun_app$c ?v0 (left$a ?v3 ))(left$a ?v4 ))(fun_app$b (fun_app$c ?v0 (right$a ?v3 ))(right$a ?v4 )))))))(= ?v1 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v3 A_tree$ )(?v4 A_tree$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (fun_app$d (fun_app$e ?v0 (left$ ?v3 ))(left$ ?v4 ))(fun_app$d (fun_app$e ?v0 (right$ ?v3 ))(right$ ?v4 )))))))(= ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (= (plus$d ?v0 ?v1 )(plus$d ?v2 ?v1 ))(= ?v0 ?v2 ))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (= (plus$d ?v0 ?v1 )(plus$d ?v0 ?v2 ))(= ?v1 ?v2 ))):named a23 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ ))(= (node$b (root$b ?v0 )(left$b ?v0 )(right$b ?v0 ))?v0 )):named a24 ))
(assert (! (forall ((?v0 A_tree_tree$ ))(= (node$a (root$a ?v0 )(left$a ?v0 )(right$a ?v0 ))?v0 )):named a25 ))
(assert (! (forall ((?v0 A_tree$ ))(= (node$ (root$ ?v0 )(left$ ?v0 )(right$ ?v0 ))?v0 )):named a26 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree$ ))(=> (= ?v0 (tree_pure$ ?v1 ))(and (= (root$b ?v0 )?v1 )(and (= (left$b ?v0 )(tree_pure$ ?v1 ))(= (right$b ?v0 )(tree_pure$ ?v1 )))))):named a27 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree$ ))(=> (= ?v0 (tree_pure$a ?v1 ))(and (= (root$a ?v0 )?v1 )(and (= (left$a ?v0 )(tree_pure$a ?v1 ))(= (right$a ?v0 )(tree_pure$a ?v1 )))))):named a28 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (= ?v0 (tree_pure$b ?v1 ))(and (= (root$ ?v0 )?v1 )(and (= (left$ ?v0 )(tree_pure$b ?v1 ))(= (right$ ?v0 )(tree_pure$b ?v1 )))))):named a29 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_a_tree_tree_tree_bool_fun_fun$ ))(=> (and (member$ ?v0 (set_tree$ ?v1 ))(and (forall ((?v3 A_tree_tree_tree$ ))(fun_app$ (fun_app$f ?v2 (root$b ?v3 ))?v3 ))(and (forall ((?v3 A_tree_tree$ )(?v4 A_tree_tree_tree$ ))(=> (and (member$ ?v3 (set_tree$ (left$b ?v4 )))(fun_app$ (fun_app$f ?v2 ?v3 )(left$b ?v4 )))(fun_app$ (fun_app$f ?v2 ?v3 )?v4 )))(forall ((?v3 A_tree_tree$ )(?v4 A_tree_tree_tree$ ))(=> (and (member$ ?v3 (set_tree$ (right$b ?v4 )))(fun_app$ (fun_app$f ?v2 ?v3 )(right$b ?v4 )))(fun_app$ (fun_app$f ?v2 ?v3 )?v4 ))))))(fun_app$ (fun_app$f ?v2 ?v0 )?v1 ))):named a30 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_a_tree_tree_bool_fun_fun$ ))(=> (and (member$a ?v0 (set_tree$a ?v1 ))(and (forall ((?v3 A_tree_tree$ ))(fun_app$b (fun_app$g ?v2 (root$a ?v3 ))?v3 ))(and (forall ((?v3 A_tree$ )(?v4 A_tree_tree$ ))(=> (and (member$a ?v3 (set_tree$a (left$a ?v4 )))(fun_app$b (fun_app$g ?v2 ?v3 )(left$a ?v4 )))(fun_app$b (fun_app$g ?v2 ?v3 )?v4 )))(forall ((?v3 A_tree$ )(?v4 A_tree_tree$ ))(=> (and (member$a ?v3 (set_tree$a (right$a ?v4 )))(fun_app$b (fun_app$g ?v2 ?v3 )(right$a ?v4 )))(fun_app$b (fun_app$g ?v2 ?v3 )?v4 ))))))(fun_app$b (fun_app$g ?v2 ?v0 )?v1 ))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_a_tree_bool_fun_fun$ ))(=> (and (member$b ?v0 (set_tree$b ?v1 ))(and (forall ((?v3 A_tree$ ))(fun_app$d (fun_app$h ?v2 (root$ ?v3 ))?v3 ))(and (forall ((?v3 A$ )(?v4 A_tree$ ))(=> (and (member$b ?v3 (set_tree$b (left$ ?v4 )))(fun_app$d (fun_app$h ?v2 ?v3 )(left$ ?v4 )))(fun_app$d (fun_app$h ?v2 ?v3 )?v4 )))(forall ((?v3 A$ )(?v4 A_tree$ ))(=> (and (member$b ?v3 (set_tree$b (right$ ?v4 )))(fun_app$d (fun_app$h ?v2 ?v3 )(right$ ?v4 )))(fun_app$d (fun_app$h ?v2 ?v3 )?v4 ))))))(fun_app$d (fun_app$h ?v2 ?v0 )?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ ))(=> (=> (= ?v0 (node$b (root$b ?v0 )(left$b ?v0 )(right$b ?v0 )))false )false )):named a33 ))
(assert (! (forall ((?v0 A_tree_tree$ ))(=> (=> (= ?v0 (node$a (root$a ?v0 )(left$a ?v0 )(right$a ?v0 )))false )false )):named a34 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (=> (= ?v0 (node$ (root$ ?v0 )(left$ ?v0 )(right$ ?v0 )))false )false )):named a35 ))
(assert (! (forall ((?v0 A_tree_tree_a_tree_tree_bool_fun_fun$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ ))(= (fun_app$ (rel_tree$ ?v0 ?v1 )?v2 )(and (fun_app$b (fun_app$c ?v0 (root$b ?v1 ))(root$b ?v2 ))(and (fun_app$ (rel_tree$ ?v0 (left$b ?v1 ))(left$b ?v2 ))(fun_app$ (rel_tree$ ?v0 (right$b ?v1 ))(right$b ?v2 )))))):named a36 ))
(assert (! (forall ((?v0 A_tree_tree_a_bool_fun_fun$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree$ ))(= (fun_app$d (rel_tree$a ?v0 ?v1 )?v2 )(and (fun_app$i (fun_app$j ?v0 (root$b ?v1 ))(root$ ?v2 ))(and (fun_app$d (rel_tree$a ?v0 (left$b ?v1 ))(left$ ?v2 ))(fun_app$d (rel_tree$a ?v0 (right$b ?v1 ))(right$ ?v2 )))))):named a37 ))
(assert (! (forall ((?v0 A_tree_tree_a_tree_bool_fun_fun$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree$ ))(= (fun_app$b (rel_tree$b ?v0 ?v1 )?v2 )(and (fun_app$d (fun_app$k ?v0 (root$b ?v1 ))(root$a ?v2 ))(and (fun_app$b (rel_tree$b ?v0 (left$b ?v1 ))(left$a ?v2 ))(fun_app$b (rel_tree$b ?v0 (right$b ?v1 ))(right$a ?v2 )))))):named a38 ))
(assert (! (forall ((?v0 A_a_tree_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree_tree_tree$ ))(= (fun_app$ (rel_tree$c ?v0 ?v1 )?v2 )(and (fun_app$b (fun_app$l ?v0 (root$ ?v1 ))(root$b ?v2 ))(and (fun_app$ (rel_tree$c ?v0 (left$ ?v1 ))(left$b ?v2 ))(fun_app$ (rel_tree$c ?v0 (right$ ?v1 ))(right$b ?v2 )))))):named a39 ))
(assert (! (forall ((?v0 A_tree_a_tree_tree_bool_fun_fun$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree_tree$ ))(= (fun_app$ (rel_tree$d ?v0 ?v1 )?v2 )(and (fun_app$b (fun_app$g ?v0 (root$a ?v1 ))(root$b ?v2 ))(and (fun_app$ (rel_tree$d ?v0 (left$a ?v1 ))(left$b ?v2 ))(fun_app$ (rel_tree$d ?v0 (right$a ?v1 ))(right$b ?v2 )))))):named a40 ))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ ))(= (fun_app$b (rel_tree$e ?v0 ?v1 )?v2 )(and (fun_app$d (fun_app$e ?v0 (root$a ?v1 ))(root$a ?v2 ))(and (fun_app$b (rel_tree$e ?v0 (left$a ?v1 ))(left$a ?v2 ))(fun_app$b (rel_tree$e ?v0 (right$a ?v1 ))(right$a ?v2 )))))):named a41 ))
(assert (! (forall ((?v0 A_tree_a_bool_fun_fun$ )(?v1 A_tree_tree$ )(?v2 A_tree$ ))(= (fun_app$d (rel_tree$f ?v0 ?v1 )?v2 )(and (fun_app$i (fun_app$m ?v0 (root$a ?v1 ))(root$ ?v2 ))(and (fun_app$d (rel_tree$f ?v0 (left$a ?v1 ))(left$ ?v2 ))(fun_app$d (rel_tree$f ?v0 (right$a ?v1 ))(right$ ?v2 )))))):named a42 ))
(assert (! (forall ((?v0 A_a_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree_tree$ ))(= (fun_app$b (rel_tree$g ?v0 ?v1 )?v2 )(and (fun_app$d (fun_app$h ?v0 (root$ ?v1 ))(root$a ?v2 ))(and (fun_app$b (rel_tree$g ?v0 (left$ ?v1 ))(left$a ?v2 ))(fun_app$b (rel_tree$g ?v0 (right$ ?v1 ))(right$a ?v2 )))))):named a43 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (fun_app$d (rel_tree$h ?v0 ?v1 )?v2 )(and (fun_app$i (fun_app$n ?v0 (root$ ?v1 ))(root$ ?v2 ))(and (fun_app$d (rel_tree$h ?v0 (left$ ?v1 ))(left$ ?v2 ))(fun_app$d (rel_tree$h ?v0 (right$ ?v1 ))(right$ ?v2 )))))):named a44 ))
(assert (! (forall ((?v0 A_tree_tree_tree_a_tree_tree_tree_bool_fun_fun$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ )(?v3 A_tree_tree_a_tree_tree_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v4 A_tree_tree_tree$ )(?v5 A_tree_tree_tree$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v5 )(and (fun_app$b (fun_app$c ?v3 (root$b ?v4 ))(root$b ?v5 ))(and (fun_app$ (fun_app$a ?v0 (left$b ?v4 ))(left$b ?v5 ))(fun_app$ (fun_app$a ?v0 (right$b ?v4 ))(right$b ?v5 )))))))(fun_app$ (rel_tree$ ?v3 ?v1 )?v2 ))):named a45 ))
(assert (! (forall ((?v0 A_tree_tree_tree_a_tree_bool_fun_fun$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree$ )(?v3 A_tree_tree_a_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$o ?v0 ?v1 )?v2 )(forall ((?v4 A_tree_tree_tree$ )(?v5 A_tree$ ))(=> (fun_app$d (fun_app$o ?v0 ?v4 )?v5 )(and (fun_app$i (fun_app$j ?v3 (root$b ?v4 ))(root$ ?v5 ))(and (fun_app$d (fun_app$o ?v0 (left$b ?v4 ))(left$ ?v5 ))(fun_app$d (fun_app$o ?v0 (right$b ?v4 ))(right$ ?v5 )))))))(fun_app$d (rel_tree$a ?v3 ?v1 )?v2 ))):named a46 ))
(assert (! (forall ((?v0 A_tree_tree_tree_a_tree_tree_bool_fun_fun$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree$ )(?v3 A_tree_tree_a_tree_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$p ?v0 ?v1 )?v2 )(forall ((?v4 A_tree_tree_tree$ )(?v5 A_tree_tree$ ))(=> (fun_app$b (fun_app$p ?v0 ?v4 )?v5 )(and (fun_app$d (fun_app$k ?v3 (root$b ?v4 ))(root$a ?v5 ))(and (fun_app$b (fun_app$p ?v0 (left$b ?v4 ))(left$a ?v5 ))(fun_app$b (fun_app$p ?v0 (right$b ?v4 ))(right$a ?v5 )))))))(fun_app$b (rel_tree$b ?v3 ?v1 )?v2 ))):named a47 ))
(assert (! (forall ((?v0 A_tree_a_tree_tree_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree_tree_tree$ )(?v3 A_a_tree_tree_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$q ?v0 ?v1 )?v2 )(forall ((?v4 A_tree$ )(?v5 A_tree_tree_tree$ ))(=> (fun_app$ (fun_app$q ?v0 ?v4 )?v5 )(and (fun_app$b (fun_app$l ?v3 (root$ ?v4 ))(root$b ?v5 ))(and (fun_app$ (fun_app$q ?v0 (left$ ?v4 ))(left$b ?v5 ))(fun_app$ (fun_app$q ?v0 (right$ ?v4 ))(right$b ?v5 )))))))(fun_app$ (rel_tree$c ?v3 ?v1 )?v2 ))):named a48 ))
(assert (! (forall ((?v0 A_tree_tree_a_tree_tree_tree_bool_fun_fun$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree_tree$ )(?v3 A_tree_a_tree_tree_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$f ?v0 ?v1 )?v2 )(forall ((?v4 A_tree_tree$ )(?v5 A_tree_tree_tree$ ))(=> (fun_app$ (fun_app$f ?v0 ?v4 )?v5 )(and (fun_app$b (fun_app$g ?v3 (root$a ?v4 ))(root$b ?v5 ))(and (fun_app$ (fun_app$f ?v0 (left$a ?v4 ))(left$b ?v5 ))(fun_app$ (fun_app$f ?v0 (right$a ?v4 ))(right$b ?v5 )))))))(fun_app$ (rel_tree$d ?v3 ?v1 )?v2 ))):named a49 ))
(assert (! (forall ((?v0 A_tree_tree_a_tree_tree_bool_fun_fun$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ )(?v3 A_tree_a_tree_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(forall ((?v4 A_tree_tree$ )(?v5 A_tree_tree$ ))(=> (fun_app$b (fun_app$c ?v0 ?v4 )?v5 )(and (fun_app$d (fun_app$e ?v3 (root$a ?v4 ))(root$a ?v5 ))(and (fun_app$b (fun_app$c ?v0 (left$a ?v4 ))(left$a ?v5 ))(fun_app$b (fun_app$c ?v0 (right$a ?v4 ))(right$a ?v5 )))))))(fun_app$b (rel_tree$e ?v3 ?v1 )?v2 ))):named a50 ))
(assert (! (forall ((?v0 A_tree_tree_a_tree_bool_fun_fun$ )(?v1 A_tree_tree$ )(?v2 A_tree$ )(?v3 A_tree_a_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$k ?v0 ?v1 )?v2 )(forall ((?v4 A_tree_tree$ )(?v5 A_tree$ ))(=> (fun_app$d (fun_app$k ?v0 ?v4 )?v5 )(and (fun_app$i (fun_app$m ?v3 (root$a ?v4 ))(root$ ?v5 ))(and (fun_app$d (fun_app$k ?v0 (left$a ?v4 ))(left$ ?v5 ))(fun_app$d (fun_app$k ?v0 (right$a ?v4 ))(right$ ?v5 )))))))(fun_app$d (rel_tree$f ?v3 ?v1 )?v2 ))):named a51 ))
(assert (! (forall ((?v0 A_tree_a_tree_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree_tree$ )(?v3 A_a_tree_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$g ?v0 ?v1 )?v2 )(forall ((?v4 A_tree$ )(?v5 A_tree_tree$ ))(=> (fun_app$b (fun_app$g ?v0 ?v4 )?v5 )(and (fun_app$d (fun_app$h ?v3 (root$ ?v4 ))(root$a ?v5 ))(and (fun_app$b (fun_app$g ?v0 (left$ ?v4 ))(left$a ?v5 ))(fun_app$b (fun_app$g ?v0 (right$ ?v4 ))(right$a ?v5 )))))))(fun_app$b (rel_tree$g ?v3 ?v1 )?v2 ))):named a52 ))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v4 A_tree$ )(?v5 A_tree$ ))(=> (fun_app$d (fun_app$e ?v0 ?v4 )?v5 )(and (fun_app$i (fun_app$n ?v3 (root$ ?v4 ))(root$ ?v5 ))(and (fun_app$d (fun_app$e ?v0 (left$ ?v4 ))(left$ ?v5 ))(fun_app$d (fun_app$e ?v0 (right$ ?v4 ))(right$ ?v5 )))))))(fun_app$d (rel_tree$h ?v3 ?v1 )?v2 ))):named a53 ))
(check-sat )
;(get-unsat-core )
