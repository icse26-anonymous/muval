;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Integer$ 0 )
(declare-sort Nat_nat_prod$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod$ 0)
(declare-fun fst$ (Nat_nat_prod$)Nat$)
(declare-fun snd$ (Nat_nat_prod$)Nat$)
(declare-fun pair$ (Nat$ Nat$ )Nat_nat_prod$)
(declare-fun fst$a (Nat_nat_prod_nat_nat_prod_prod$)Nat_nat_prod$)
(declare-fun snd$a (Nat_nat_prod_nat_nat_prod_prod$)Nat_nat_prod$)
(declare-fun pair$a (Nat_nat_prod$ Nat_nat_prod$ )Nat_nat_prod_nat_nat_prod_prod$)
(declare-codatatypes ()((Nat_nat_prod_nat_nat_prod_prod_tree$ (node$ (root$ Nat_nat_prod_nat_nat_prod_prod$ )(left$ Nat_nat_prod_nat_nat_prod_prod_tree$ )(right$ Nat_nat_prod_nat_nat_prod_prod_tree$ )))))
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-fun m$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat$ )
(declare-fun one$ ()Nat$ )
(declare-fun imat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun one$a ()Integer$ )
(declare-fun path$ ()Dir_list$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lLmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun uRmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun mediant$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod$ )
(declare-fun tree_pure$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod_tree$ )
(declare-fun traverse_tree$ (Dir_list$ Nat_nat_prod_nat_nat_prod_prod_tree$ )Nat_nat_prod_nat_nat_prod_prod_tree$ )
(declare-fun integer_of_nat$ (Nat$ )Integer$ )
(declare-fun stern_brocot_iterate_aux$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod_tree$ )
(assert (! (not (exists ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(and (= (mulmat$ m$ ?v0 )(root$ (traverse_tree$ path$ (stern_brocot_iterate_aux$ m$ ))))(= (det$ ?v0 )one$ )))):named a0 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ )(?v2 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ (mulmat$ ?v0 ?v1 )?v2 )(mulmat$ ?v0 (mulmat$ ?v1 ?v2 )))):named a1 ))
(assert (! (= (det$ imat$ )one$ ):named a2 ))
(assert (! (= (det$ lLmat$ )one$ ):named a3 ))
(assert (! (= (det$ uRmat$ )one$ ):named a4 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ ?v0 lLmat$ ))one$ ))):named a5 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ ?v0 uRmat$ ))one$ ))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ lLmat$ ?v0 ))one$ ))):named a7 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ uRmat$ ?v0 ))one$ ))):named a8 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ ?v0 imat$ )?v0 )):named a9 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ imat$ ?v0 )?v0 )):named a10 ))
(assert (! (= one$ one$ ):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(= (= one$ ?v0 )(= ?v0 one$ ))):named a12 ))
(assert (! (forall ((?v0 Integer$ ))(= (= one$a ?v0 )(= ?v0 one$a ))):named a13 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ ))(= (traverse_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a14 ))
(assert (! (= (integer_of_nat$ one$ )one$a ):named a15 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Dir_list$ ))(=> (and (= (det$ ?v0 )one$ )(less$ zero$ (snd$ (mediant$ ?v0 ))))(and (= (det$ (root$ (traverse_tree$ ?v1 (stern_brocot_iterate_aux$ ?v0 ))))one$ )(less$ zero$ (snd$ (mediant$ (root$ (traverse_tree$ ?v1 (stern_brocot_iterate_aux$ ?v0 ))))))))):named a16 ))
(check-sat )
;(get-unsat-core )
