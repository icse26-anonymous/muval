;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort B_a_tree_fun$ 0 )
(declare-sort B_b_tree_fun$ 0 )
(declare-sort C_a_tree_fun$ 0 )
(declare-sort C_b_tree_fun$ 0 )
(declare-sort C_c_tree_fun$ 0 )
(declare-sort A_tree_a_tree_fun$ 0 )
(declare-sort A_tree_b_tree_fun$ 0 )
(declare-sort B_tree_a_tree_fun$ 0 )
(declare-sort B_tree_b_tree_fun$ 0 )
(declare-sort C_tree_a_tree_fun$ 0 )
(declare-sort C_tree_b_tree_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort A_c_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_c_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_b_fun_fun$ 0 )
(declare-sort B_c_fun_b_c_fun_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun$ 0 )
(declare-sort C_a_fun_c_b_fun_fun$ 0 )
(declare-sort C_a_fun_c_c_fun_fun$ 0 )
(declare-sort C_b_fun_c_a_fun_fun$ 0 )
(declare-sort C_b_fun_c_b_fun_fun$ 0 )
(declare-sort C_b_fun_c_c_fun_fun$ 0 )
(declare-sort C_c_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_fun_c_b_fun_fun$ 0 )
(declare-sort C_c_fun_c_c_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_tree_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_tree_fun_fun$ 0 )
(declare-sort C_c_fun_c_a_tree_fun_fun$ 0 )
(declare-sort C_c_fun_c_b_tree_fun_fun$ 0 )
(declare-sort C_c_fun_c_c_tree_fun_fun$ 0 )
(declare-sort B_a_tree_fun_b_a_tree_fun_fun$ 0 )
(declare-sort B_b_tree_fun_b_a_tree_fun_fun$ 0 )
(declare-sort C_a_tree_fun_c_a_tree_fun_fun$ 0 )
(declare-sort C_a_tree_fun_c_b_tree_fun_fun$ 0 )
(declare-sort C_b_tree_fun_c_a_tree_fun_fun$ 0 )
(declare-sort C_b_tree_fun_c_b_tree_fun_fun$ 0 )
(declare-sort C_c_tree_fun_c_a_tree_fun_fun$ 0 )
(declare-sort C_c_tree_fun_c_b_tree_fun_fun$ 0 )
(declare-sort C_c_fun_c_c_fun_c_a_tree_fun_fun_fun$ 0 )
(declare-sort C_c_fun_c_c_fun_c_b_tree_fun_fun_fun$ 0 )
(declare-sort B_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun$ 0 )
(declare-sort B_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun$ 0 )
(declare-sort C_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun$ 0 )
(declare-sort C_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun$ 0 )
(declare-sort C_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun$ 0 )
(declare-sort C_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun$ 0 )
(declare-sort C_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun$ 0 )
(declare-sort C_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_c_fun_c_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_c_fun_c_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_c_fun_c_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_a_tree_fun_c_c_fun_c_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_b_tree_fun_c_c_fun_c_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_c_tree_fun_c_c_fun_c_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_bool_fun_c_a_tree_fun_c_c_fun_c_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_bool_fun_c_b_tree_fun_c_c_fun_c_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_bool_fun_c_c_tree_fun_c_c_fun_c_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(B_tree$ (node$a (root$a B$ )(left$a B_tree$ )(right$a B_tree$ )))(C_tree$ (node$b (root$b C$ )(left$b C_tree$ )(right$b C_tree$ )))))
(declare-fun f$ ()B_a_fun$ )
(declare-fun l$ ()C_c_fun$ )
(declare-fun r$ ()C_c_fun$ )
(declare-fun x$ ()C$ )
(declare-fun out$ ()C_b_fun$ )
(declare-fun comp$ (B_a_fun$ )C_b_fun_c_a_fun_fun$ )
(declare-fun comp$a (A_a_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun comp$b (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun comp$c (A_b_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun comp$d (A_b_fun$ )C_a_fun_c_b_fun_fun$ )
(declare-fun comp$e (B_a_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun comp$f (B_b_fun$ )B_b_fun_b_b_fun_fun$ )
(declare-fun comp$g (B_b_fun$ )C_b_fun_c_b_fun_fun$ )
(declare-fun comp$h (C_b_fun$ )B_c_fun_b_b_fun_fun$ )
(declare-fun comp$i (C_b_fun$ )C_c_fun_c_b_fun_fun$ )
(declare-fun comp$j (C_a_fun$ )C_c_fun_c_a_fun_fun$ )
(declare-fun comp$k (A_a_fun$ )C_a_fun_c_a_fun_fun$ )
(declare-fun comp$l (B_tree_a_tree_fun$ )B_b_tree_fun_b_a_tree_fun_fun$ )
(declare-fun comp$m (A_tree_a_tree_fun$ )B_a_tree_fun_b_a_tree_fun_fun$ )
(declare-fun comp$n (C_tree_b_tree_fun$ )C_c_tree_fun_c_b_tree_fun_fun$ )
(declare-fun comp$o (C_tree_a_tree_fun$ )C_c_tree_fun_c_a_tree_fun_fun$ )
(declare-fun comp$p (B_tree_b_tree_fun$ )C_b_tree_fun_c_b_tree_fun_fun$ )
(declare-fun comp$q (A_tree_b_tree_fun$ )C_a_tree_fun_c_b_tree_fun_fun$ )
(declare-fun comp$r (A_tree_a_tree_fun$ )C_a_tree_fun_c_a_tree_fun_fun$ )
(declare-fun comp$s (B_tree_a_tree_fun$ )C_b_tree_fun_c_a_tree_fun_fun$ )
(declare-fun comp$t (B_c_fun$ )C_b_fun_c_c_fun_fun$ )
(declare-fun comp$u (C_a_fun$ )B_c_fun_b_a_fun_fun$ )
(declare-fun comp$v (C_c_fun$ )C_c_fun_c_c_fun_fun$ )
(declare-fun comp$w (A_c_fun$ )C_a_fun_c_c_fun_fun$ )
(declare-fun comp$x (C_a_fun$ )A_c_fun_a_a_fun_fun$ )
(declare-fun comp$y (C_c_fun$ )B_c_fun_b_c_fun_fun$ )
(declare-fun comp$z (B_c_fun$ )B_b_fun_b_c_fun_fun$ )
(declare-fun comp$aa (A_c_fun$ )B_a_fun_b_c_fun_fun$ )
(declare-fun comp$ab (A_b_fun$ )A_a_fun_a_b_fun_fun$ )
(declare-fun comp$ac (B_b_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun comp$ad (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$ (B_tree_a_tree_fun$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (C_b_tree_fun$ C$ )B_tree$ )
(declare-fun fun_app$b (C_c_fun_c_b_tree_fun_fun$ C_c_fun$ )C_b_tree_fun$ )
(declare-fun fun_app$c (C_c_fun_c_c_fun_c_b_tree_fun_fun_fun$ C_c_fun$ )C_c_fun_c_b_tree_fun_fun$ )
(declare-fun fun_app$d (C_a_tree_fun$ C$ )A_tree$ )
(declare-fun fun_app$e (C_c_fun_c_a_tree_fun_fun$ C_c_fun$ )C_a_tree_fun$ )
(declare-fun fun_app$f (C_c_fun_c_c_fun_c_a_tree_fun_fun_fun$ C_c_fun$ )C_c_fun_c_a_tree_fun_fun$ )
(declare-fun fun_app$g (C_b_fun_c_a_fun_fun$ C_b_fun$ )C_a_fun$ )
(declare-fun fun_app$h (A_tree_a_tree_fun$ A_tree$ )A_tree$ )
(declare-fun fun_app$i (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$j (C_tree_b_tree_fun$ C_tree$ )B_tree$ )
(declare-fun fun_app$k (C_tree_a_tree_fun$ C_tree$ )A_tree$ )
(declare-fun fun_app$l (B_tree_b_tree_fun$ B_tree$ )B_tree$ )
(declare-fun fun_app$m (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun fun_app$n (A_tree_b_tree_fun$ A_tree$ )B_tree$ )
(declare-fun fun_app$o (B_a_fun_b_b_fun_fun$ B_a_fun$ )B_b_fun$ )
(declare-fun fun_app$p (C_a_fun_c_b_fun_fun$ C_a_fun$ )C_b_fun$ )
(declare-fun fun_app$q (A_b_fun_a_a_fun_fun$ A_b_fun$ )A_a_fun$ )
(declare-fun fun_app$r (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$s (C_b_fun_c_b_fun_fun$ C_b_fun$ )C_b_fun$ )
(declare-fun fun_app$t (B_c_fun_b_b_fun_fun$ B_c_fun$ )B_b_fun$ )
(declare-fun fun_app$u (C_c_fun_c_b_fun_fun$ C_c_fun$ )C_b_fun$ )
(declare-fun fun_app$v (C_a_fun$ C$ )A$ )
(declare-fun fun_app$w (C_c_fun_c_a_fun_fun$ C_c_fun$ )C_a_fun$ )
(declare-fun fun_app$x (C_c_fun$ C$ )C$ )
(declare-fun fun_app$y (C_b_fun$ C$ )B$ )
(declare-fun fun_app$z (B_b_fun$ B$ )B$ )
(declare-fun map_tree$ (B_a_fun$ )B_tree_a_tree_fun$ )
(declare-fun fun_app$aa (B_a_fun$ B$ )A$ )
(declare-fun fun_app$ab (C_a_fun_c_a_fun_fun$ C_a_fun$ )C_a_fun$ )
(declare-fun fun_app$ac (A_a_fun$ A$ )A$ )
(declare-fun fun_app$ad (B_b_tree_fun_b_a_tree_fun_fun$ B_b_tree_fun$ )B_a_tree_fun$ )
(declare-fun fun_app$ae (B_b_fun_b_b_tree_fun_fun$ B_b_fun$ )B_b_tree_fun$ )
(declare-fun fun_app$af (B_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun$ B_b_tree_fun$ )B_b_fun_b_b_tree_fun_fun$ )
(declare-fun fun_app$ag (B_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun$ B_bool_fun$ )B_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun$ )
(declare-fun fun_app$ah (B_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun$ B_b_fun$ )B_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$ai (B_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun$ B_b_tree_fun$ )B_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$aj (B_bool_fun_b_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun_fun$ B_bool_fun$ )B_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$ak (B_b_fun_b_a_tree_fun_fun$ B_b_fun$ )B_a_tree_fun$ )
(declare-fun fun_app$al (B_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun$ B_a_tree_fun$ )B_b_fun_b_a_tree_fun_fun$ )
(declare-fun fun_app$am (B_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun$ B_bool_fun$ )B_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun$ )
(declare-fun fun_app$an (B_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun$ B_b_fun$ )B_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$ao (B_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun$ B_a_tree_fun$ )B_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$ap (B_bool_fun_b_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun_fun$ B_bool_fun$ )B_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$aq (B_a_tree_fun_b_a_tree_fun_fun$ B_a_tree_fun$ )B_a_tree_fun$ )
(declare-fun fun_app$ar (C_c_tree_fun_c_b_tree_fun_fun$ C_c_tree_fun$ )C_b_tree_fun$ )
(declare-fun fun_app$as (C_c_fun_c_c_tree_fun_fun$ C_c_fun$ )C_c_tree_fun$ )
(declare-fun fun_app$at (C_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun$ C_c_tree_fun$ )C_c_fun_c_c_tree_fun_fun$ )
(declare-fun fun_app$au (C_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun$ C_bool_fun$ )C_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun$ )
(declare-fun fun_app$av (C_c_fun_c_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun_fun$ C_c_fun$ )C_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$aw (C_c_tree_fun_c_c_fun_c_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun_fun_fun$ C_c_tree_fun$ )C_c_fun_c_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$ax (C_bool_fun_c_c_tree_fun_c_c_fun_c_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun_fun_fun_fun$ C_bool_fun$ )C_c_tree_fun_c_c_fun_c_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$ay (C_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun$ C_b_tree_fun$ )C_c_fun_c_b_tree_fun_fun$ )
(declare-fun fun_app$az (C_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun$ C_bool_fun$ )C_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun$ )
(declare-fun fun_app$ba (C_c_fun_c_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun_fun$ C_c_fun$ )C_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$bb (C_b_tree_fun_c_c_fun_c_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun_fun_fun$ C_b_tree_fun$ )C_c_fun_c_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$bc (C_bool_fun_c_b_tree_fun_c_c_fun_c_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun_fun_fun_fun$ C_bool_fun$ )C_b_tree_fun_c_c_fun_c_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$bd (C_c_tree_fun_c_a_tree_fun_fun$ C_c_tree_fun$ )C_a_tree_fun$ )
(declare-fun fun_app$be (C_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun$ C_a_tree_fun$ )C_c_fun_c_a_tree_fun_fun$ )
(declare-fun fun_app$bf (C_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun$ C_bool_fun$ )C_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun$ )
(declare-fun fun_app$bg (C_c_fun_c_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun_fun$ C_c_fun$ )C_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$bh (C_a_tree_fun_c_c_fun_c_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun_fun_fun$ C_a_tree_fun$ )C_c_fun_c_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$bi (C_bool_fun_c_a_tree_fun_c_c_fun_c_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun_fun_fun_fun$ C_bool_fun$ )C_a_tree_fun_c_c_fun_c_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$bj (C_b_tree_fun_c_b_tree_fun_fun$ C_b_tree_fun$ )C_b_tree_fun$ )
(declare-fun fun_app$bk (C_a_tree_fun_c_b_tree_fun_fun$ C_a_tree_fun$ )C_b_tree_fun$ )
(declare-fun fun_app$bl (C_a_tree_fun_c_a_tree_fun_fun$ C_a_tree_fun$ )C_a_tree_fun$ )
(declare-fun fun_app$bm (C_b_tree_fun_c_a_tree_fun_fun$ C_b_tree_fun$ )C_a_tree_fun$ )
(declare-fun fun_app$bn (C_b_fun_c_c_fun_fun$ C_b_fun$ )C_c_fun$ )
(declare-fun fun_app$bo (B_c_fun_b_a_fun_fun$ B_c_fun$ )B_a_fun$ )
(declare-fun fun_app$bp (C_c_fun_c_c_fun_fun$ C_c_fun$ )C_c_fun$ )
(declare-fun fun_app$bq (C_a_fun_c_c_fun_fun$ C_a_fun$ )C_c_fun$ )
(declare-fun fun_app$br (A_c_fun_a_a_fun_fun$ A_c_fun$ )A_a_fun$ )
(declare-fun fun_app$bs (B_c_fun_b_c_fun_fun$ B_c_fun$ )B_c_fun$ )
(declare-fun fun_app$bt (B_b_fun_b_c_fun_fun$ B_b_fun$ )B_c_fun$ )
(declare-fun fun_app$bu (B_a_fun_b_c_fun_fun$ B_a_fun$ )B_c_fun$ )
(declare-fun fun_app$bv (A_a_fun_a_b_fun_fun$ A_a_fun$ )A_b_fun$ )
(declare-fun fun_app$bw (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$bx (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun map_tree$a (A_a_fun$ )A_tree_a_tree_fun$ )
(declare-fun map_tree$b (C_b_fun$ )C_tree_b_tree_fun$ )
(declare-fun map_tree$c (C_a_fun$ )C_tree_a_tree_fun$ )
(declare-fun map_tree$d (B_b_fun$ )B_tree_b_tree_fun$ )
(declare-fun map_tree$e (A_b_fun$ )A_tree_b_tree_fun$ )
(declare-fun map_tree$f (B_c_fun$ B_tree$ )C_tree$ )
(declare-fun map_tree$g (C_c_fun$ C_tree$ )C_tree$ )
(declare-fun corec_tree$ (B_b_fun$ )B_bool_fun_b_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun corec_tree$a (B_a_fun$ )B_bool_fun_b_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun corec_tree$b (C_c_fun$ )C_bool_fun_c_c_tree_fun_c_c_fun_c_bool_fun_c_c_tree_fun_c_c_fun_c_c_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun corec_tree$c (C_b_fun$ )C_bool_fun_c_b_tree_fun_c_c_fun_c_bool_fun_c_b_tree_fun_c_c_fun_c_b_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun corec_tree$d (C_a_fun$ )C_bool_fun_c_a_tree_fun_c_c_fun_c_bool_fun_c_a_tree_fun_c_c_fun_c_a_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun unfold_tree$ (C_b_fun$ )C_c_fun_c_c_fun_c_b_tree_fun_fun_fun$ )
(declare-fun unfold_tree$a (C_a_fun$ )C_c_fun_c_c_fun_c_a_tree_fun_fun_fun$ )
(assert (! (not (= (fun_app$ (map_tree$ f$ )(fun_app$a (fun_app$b (fun_app$c (unfold_tree$ out$ )l$ )r$ )x$ ))(fun_app$d (fun_app$e (fun_app$f (unfold_tree$a (fun_app$g (comp$ f$ )out$ ))l$ )r$ )x$ ))):named a0 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_tree$ ))(= (fun_app$h (map_tree$a ?v0 )(fun_app$ (map_tree$ ?v1 )?v2 ))(fun_app$ (map_tree$ (fun_app$i (comp$a ?v0 )?v1 ))?v2 ))):named a1 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_tree$ ))(= (fun_app$ (map_tree$ ?v0 )(fun_app$j (map_tree$b ?v1 )?v2 ))(fun_app$k (map_tree$c (fun_app$g (comp$ ?v0 )?v1 ))?v2 ))):named a2 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_tree$ ))(= (fun_app$ (map_tree$ ?v0 )(fun_app$l (map_tree$d ?v1 )?v2 ))(fun_app$ (map_tree$ (fun_app$m (comp$b ?v0 )?v1 ))?v2 ))):named a3 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_tree$ ))(= (fun_app$n (map_tree$e ?v0 )(fun_app$ (map_tree$ ?v1 )?v2 ))(fun_app$l (map_tree$d (fun_app$o (comp$c ?v0 )?v1 ))?v2 ))):named a4 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 C_tree$ ))(= (fun_app$n (map_tree$e ?v0 )(fun_app$k (map_tree$c ?v1 )?v2 ))(fun_app$j (map_tree$b (fun_app$p (comp$d ?v0 )?v1 ))?v2 ))):named a5 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_tree$ ))(= (fun_app$ (map_tree$ ?v0 )(fun_app$n (map_tree$e ?v1 )?v2 ))(fun_app$h (map_tree$a (fun_app$q (comp$e ?v0 )?v1 ))?v2 ))):named a6 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_tree$ ))(= (fun_app$l (map_tree$d ?v0 )(fun_app$l (map_tree$d ?v1 )?v2 ))(fun_app$l (map_tree$d (fun_app$r (comp$f ?v0 )?v1 ))?v2 ))):named a7 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_tree$ ))(= (fun_app$l (map_tree$d ?v0 )(fun_app$j (map_tree$b ?v1 )?v2 ))(fun_app$j (map_tree$b (fun_app$s (comp$g ?v0 )?v1 ))?v2 ))):named a8 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_c_fun$ )(?v2 B_tree$ ))(= (fun_app$j (map_tree$b ?v0 )(map_tree$f ?v1 ?v2 ))(fun_app$l (map_tree$d (fun_app$t (comp$h ?v0 )?v1 ))?v2 ))):named a9 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C_tree$ ))(= (fun_app$j (map_tree$b ?v0 )(map_tree$g ?v1 ?v2 ))(fun_app$j (map_tree$b (fun_app$u (comp$i ?v0 )?v1 ))?v2 ))):named a10 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C$ ))(! (= (fun_app$v (fun_app$w (comp$j ?v0 )?v1 )?v2 )(fun_app$v ?v0 (fun_app$x ?v1 ?v2 ))):pattern ((fun_app$v (fun_app$w (comp$j ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$y (fun_app$s (comp$g ?v0 )?v1 )?v2 )(fun_app$z ?v0 (fun_app$y ?v1 ?v2 ))):pattern ((fun_app$y (fun_app$s (comp$g ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$aa (fun_app$m (comp$b ?v0 )?v1 )?v2 )(fun_app$aa ?v0 (fun_app$z ?v1 ?v2 ))):pattern ((fun_app$aa (fun_app$m (comp$b ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$v (fun_app$ab (comp$k ?v0 )?v1 )?v2 )(fun_app$ac ?v0 (fun_app$v ?v1 ?v2 ))):pattern ((fun_app$v (fun_app$ab (comp$k ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$aa (fun_app$i (comp$a ?v0 )?v1 )?v2 )(fun_app$ac ?v0 (fun_app$aa ?v1 ?v2 ))):pattern ((fun_app$aa (fun_app$i (comp$a ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$v (fun_app$g (comp$ ?v0 )?v1 )?v2 )(fun_app$aa ?v0 (fun_app$y ?v1 ?v2 ))):pattern ((fun_app$v (fun_app$g (comp$ ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_bool_fun$ )(?v3 B_b_tree_fun$ )(?v4 B_b_fun$ )(?v5 B_bool_fun$ )(?v6 B_b_tree_fun$ )(?v7 B_b_fun$ ))(= (fun_app$ad (comp$l (map_tree$ ?v0 ))(fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (fun_app$aj (corec_tree$ ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$ak (fun_app$al (fun_app$am (fun_app$an (fun_app$ao (fun_app$ap (corec_tree$a (fun_app$m (comp$b ?v0 )?v1 ))?v2 )(fun_app$ad (comp$l (map_tree$ ?v0 ))?v3 ))?v4 )?v5 )(fun_app$ad (comp$l (map_tree$ ?v0 ))?v6 ))?v7 ))):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_bool_fun$ )(?v3 B_a_tree_fun$ )(?v4 B_b_fun$ )(?v5 B_bool_fun$ )(?v6 B_a_tree_fun$ )(?v7 B_b_fun$ ))(= (fun_app$aq (comp$m (map_tree$a ?v0 ))(fun_app$ak (fun_app$al (fun_app$am (fun_app$an (fun_app$ao (fun_app$ap (corec_tree$a ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$ak (fun_app$al (fun_app$am (fun_app$an (fun_app$ao (fun_app$ap (corec_tree$a (fun_app$i (comp$a ?v0 )?v1 ))?v2 )(fun_app$aq (comp$m (map_tree$a ?v0 ))?v3 ))?v4 )?v5 )(fun_app$aq (comp$m (map_tree$a ?v0 ))?v6 ))?v7 ))):named a18 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C_bool_fun$ )(?v3 C_c_tree_fun$ )(?v4 C_c_fun$ )(?v5 C_bool_fun$ )(?v6 C_c_tree_fun$ )(?v7 C_c_fun$ ))(= (fun_app$ar (comp$n (map_tree$b ?v0 ))(fun_app$as (fun_app$at (fun_app$au (fun_app$av (fun_app$aw (fun_app$ax (corec_tree$b ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$b (fun_app$ay (fun_app$az (fun_app$ba (fun_app$bb (fun_app$bc (corec_tree$c (fun_app$u (comp$i ?v0 )?v1 ))?v2 )(fun_app$ar (comp$n (map_tree$b ?v0 ))?v3 ))?v4 )?v5 )(fun_app$ar (comp$n (map_tree$b ?v0 ))?v6 ))?v7 ))):named a19 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_bool_fun$ )(?v3 C_c_tree_fun$ )(?v4 C_c_fun$ )(?v5 C_bool_fun$ )(?v6 C_c_tree_fun$ )(?v7 C_c_fun$ ))(= (fun_app$bd (comp$o (map_tree$c ?v0 ))(fun_app$as (fun_app$at (fun_app$au (fun_app$av (fun_app$aw (fun_app$ax (corec_tree$b ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$e (fun_app$be (fun_app$bf (fun_app$bg (fun_app$bh (fun_app$bi (corec_tree$d (fun_app$w (comp$j ?v0 )?v1 ))?v2 )(fun_app$bd (comp$o (map_tree$c ?v0 ))?v3 ))?v4 )?v5 )(fun_app$bd (comp$o (map_tree$c ?v0 ))?v6 ))?v7 ))):named a20 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_bool_fun$ )(?v3 C_b_tree_fun$ )(?v4 C_c_fun$ )(?v5 C_bool_fun$ )(?v6 C_b_tree_fun$ )(?v7 C_c_fun$ ))(= (fun_app$bj (comp$p (map_tree$d ?v0 ))(fun_app$b (fun_app$ay (fun_app$az (fun_app$ba (fun_app$bb (fun_app$bc (corec_tree$c ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$b (fun_app$ay (fun_app$az (fun_app$ba (fun_app$bb (fun_app$bc (corec_tree$c (fun_app$s (comp$g ?v0 )?v1 ))?v2 )(fun_app$bj (comp$p (map_tree$d ?v0 ))?v3 ))?v4 )?v5 )(fun_app$bj (comp$p (map_tree$d ?v0 ))?v6 ))?v7 ))):named a21 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 C_bool_fun$ )(?v3 C_a_tree_fun$ )(?v4 C_c_fun$ )(?v5 C_bool_fun$ )(?v6 C_a_tree_fun$ )(?v7 C_c_fun$ ))(= (fun_app$bk (comp$q (map_tree$e ?v0 ))(fun_app$e (fun_app$be (fun_app$bf (fun_app$bg (fun_app$bh (fun_app$bi (corec_tree$d ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$b (fun_app$ay (fun_app$az (fun_app$ba (fun_app$bb (fun_app$bc (corec_tree$c (fun_app$p (comp$d ?v0 )?v1 ))?v2 )(fun_app$bk (comp$q (map_tree$e ?v0 ))?v3 ))?v4 )?v5 )(fun_app$bk (comp$q (map_tree$e ?v0 ))?v6 ))?v7 ))):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_bool_fun$ )(?v3 C_a_tree_fun$ )(?v4 C_c_fun$ )(?v5 C_bool_fun$ )(?v6 C_a_tree_fun$ )(?v7 C_c_fun$ ))(= (fun_app$bl (comp$r (map_tree$a ?v0 ))(fun_app$e (fun_app$be (fun_app$bf (fun_app$bg (fun_app$bh (fun_app$bi (corec_tree$d ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$e (fun_app$be (fun_app$bf (fun_app$bg (fun_app$bh (fun_app$bi (corec_tree$d (fun_app$ab (comp$k ?v0 )?v1 ))?v2 )(fun_app$bl (comp$r (map_tree$a ?v0 ))?v3 ))?v4 )?v5 )(fun_app$bl (comp$r (map_tree$a ?v0 ))?v6 ))?v7 ))):named a23 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_bool_fun$ )(?v3 C_b_tree_fun$ )(?v4 C_c_fun$ )(?v5 C_bool_fun$ )(?v6 C_b_tree_fun$ )(?v7 C_c_fun$ ))(= (fun_app$bm (comp$s (map_tree$ ?v0 ))(fun_app$b (fun_app$ay (fun_app$az (fun_app$ba (fun_app$bb (fun_app$bc (corec_tree$c ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$e (fun_app$be (fun_app$bf (fun_app$bg (fun_app$bh (fun_app$bi (corec_tree$d (fun_app$g (comp$ ?v0 )?v1 ))?v2 )(fun_app$bm (comp$s (map_tree$ ?v0 ))?v3 ))?v4 )?v5 )(fun_app$bm (comp$s (map_tree$ ?v0 ))?v6 ))?v7 ))):named a24 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$ab (comp$k ?v0 )(fun_app$g (comp$ ?v1 )?v2 ))(fun_app$g (comp$ (fun_app$i (comp$a ?v0 )?v1 ))?v2 ))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ ))(= (fun_app$g (comp$ ?v0 )(fun_app$u (comp$i ?v1 )?v2 ))(fun_app$w (comp$j (fun_app$g (comp$ ?v0 )?v1 ))?v2 ))):named a26 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 C_b_fun$ ))(= (fun_app$g (comp$ ?v0 )(fun_app$s (comp$g ?v1 )?v2 ))(fun_app$g (comp$ (fun_app$m (comp$b ?v0 )?v1 ))?v2 ))):named a27 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$p (comp$d ?v0 )(fun_app$g (comp$ ?v1 )?v2 ))(fun_app$s (comp$g (fun_app$o (comp$c ?v0 )?v1 ))?v2 ))):named a28 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 C_a_fun$ ))(= (fun_app$g (comp$ ?v0 )(fun_app$p (comp$d ?v1 )?v2 ))(fun_app$ab (comp$k (fun_app$q (comp$e ?v0 )?v1 ))?v2 ))):named a29 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 C_b_fun$ ))(= (fun_app$w (comp$j ?v0 )(fun_app$bn (comp$t ?v1 )?v2 ))(fun_app$g (comp$ (fun_app$bo (comp$u ?v0 )?v1 ))?v2 ))):named a30 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_c_fun$ ))(= (fun_app$w (comp$j ?v0 )(fun_app$bp (comp$v ?v1 )?v2 ))(fun_app$w (comp$j (fun_app$w (comp$j ?v0 )?v1 ))?v2 ))):named a31 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_c_fun$ )(?v2 C_a_fun$ ))(= (fun_app$w (comp$j ?v0 )(fun_app$bq (comp$w ?v1 )?v2 ))(fun_app$ab (comp$k (fun_app$br (comp$x ?v0 )?v1 ))?v2 ))):named a32 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ ))(= (fun_app$s (comp$g ?v0 )(fun_app$u (comp$i ?v1 )?v2 ))(fun_app$u (comp$i (fun_app$s (comp$g ?v0 )?v1 ))?v2 ))):named a33 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 C_b_fun$ ))(= (fun_app$s (comp$g ?v0 )(fun_app$s (comp$g ?v1 )?v2 ))(fun_app$s (comp$g (fun_app$r (comp$f ?v0 )?v1 ))?v2 ))):named a34 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ ))(= (fun_app$w (comp$j (fun_app$g (comp$ ?v0 )?v1 ))?v2 )(fun_app$g (comp$ ?v0 )(fun_app$u (comp$i ?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$g (comp$ (fun_app$i (comp$a ?v0 )?v1 ))?v2 )(fun_app$ab (comp$k ?v0 )(fun_app$g (comp$ ?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 C_b_fun$ ))(= (fun_app$g (comp$ (fun_app$m (comp$b ?v0 )?v1 ))?v2 )(fun_app$g (comp$ ?v0 )(fun_app$s (comp$g ?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_c_fun$ ))(= (fun_app$bo (comp$u (fun_app$g (comp$ ?v0 )?v1 ))?v2 )(fun_app$m (comp$b ?v0 )(fun_app$t (comp$h ?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ ))(= (fun_app$u (comp$i (fun_app$s (comp$g ?v0 )?v1 ))?v2 )(fun_app$s (comp$g ?v0 )(fun_app$u (comp$i ?v1 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_c_fun$ ))(= (fun_app$bo (comp$u (fun_app$ab (comp$k ?v0 )?v1 ))?v2 )(fun_app$i (comp$a ?v0 )(fun_app$bo (comp$u ?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 C_b_fun$ ))(= (fun_app$g (comp$ (fun_app$bo (comp$u ?v0 )?v1 ))?v2 )(fun_app$w (comp$j ?v0 )(fun_app$bn (comp$t ?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_c_fun$ ))(= (fun_app$w (comp$j (fun_app$w (comp$j ?v0 )?v1 ))?v2 )(fun_app$w (comp$j ?v0 )(fun_app$bp (comp$v ?v1 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ ))(= (fun_app$w (comp$j (fun_app$ab (comp$k ?v0 )?v1 ))?v2 )(fun_app$ab (comp$k ?v0 )(fun_app$w (comp$j ?v1 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$s (comp$g (fun_app$o (comp$c ?v0 )?v1 ))?v2 )(fun_app$p (comp$d ?v0 )(fun_app$g (comp$ ?v1 )?v2 )))):named a44 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C$ ))(! (= (fun_app$v (fun_app$w (comp$j ?v0 )?v1 )?v2 )(fun_app$v ?v0 (fun_app$x ?v1 ?v2 ))):pattern ((fun_app$v (fun_app$w (comp$j ?v0 )?v1 )?v2 )))):named a45 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$y (fun_app$s (comp$g ?v0 )?v1 )?v2 )(fun_app$z ?v0 (fun_app$y ?v1 ?v2 ))):pattern ((fun_app$y (fun_app$s (comp$g ?v0 )?v1 )?v2 )))):named a46 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$aa (fun_app$m (comp$b ?v0 )?v1 )?v2 )(fun_app$aa ?v0 (fun_app$z ?v1 ?v2 ))):pattern ((fun_app$aa (fun_app$m (comp$b ?v0 )?v1 )?v2 )))):named a47 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$v (fun_app$ab (comp$k ?v0 )?v1 )?v2 )(fun_app$ac ?v0 (fun_app$v ?v1 ?v2 ))):pattern ((fun_app$v (fun_app$ab (comp$k ?v0 )?v1 )?v2 )))):named a48 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$aa (fun_app$i (comp$a ?v0 )?v1 )?v2 )(fun_app$ac ?v0 (fun_app$aa ?v1 ?v2 ))):pattern ((fun_app$aa (fun_app$i (comp$a ?v0 )?v1 )?v2 )))):named a49 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$v (fun_app$g (comp$ ?v0 )?v1 )?v2 )(fun_app$aa ?v0 (fun_app$y ?v1 ?v2 ))):pattern ((fun_app$v (fun_app$g (comp$ ?v0 )?v1 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (and (= (fun_app$g (comp$ ?v0 )?v1 )(fun_app$g (comp$ ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$aa ?v0 (fun_app$y ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$y ?v3 ?v4 ))))false ))false )):named a51 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ ))(=> (and (= (fun_app$g (comp$ ?v0 )?v1 )(fun_app$w (comp$j ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$aa ?v0 (fun_app$y ?v1 ?v4 ))(fun_app$v ?v2 (fun_app$x ?v3 ?v4 ))))false ))false )):named a52 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (and (= (fun_app$g (comp$ ?v0 )?v1 )(fun_app$ab (comp$k ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$aa ?v0 (fun_app$y ?v1 ?v4 ))(fun_app$ac ?v2 (fun_app$v ?v3 ?v4 ))))false ))false )):named a53 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (and (= (fun_app$w (comp$j ?v0 )?v1 )(fun_app$g (comp$ ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$v ?v0 (fun_app$x ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$y ?v3 ?v4 ))))false ))false )):named a54 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ ))(=> (and (= (fun_app$w (comp$j ?v0 )?v1 )(fun_app$w (comp$j ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$v ?v0 (fun_app$x ?v1 ?v4 ))(fun_app$v ?v2 (fun_app$x ?v3 ?v4 ))))false ))false )):named a55 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (and (= (fun_app$w (comp$j ?v0 )?v1 )(fun_app$ab (comp$k ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$v ?v0 (fun_app$x ?v1 ?v4 ))(fun_app$ac ?v2 (fun_app$v ?v3 ?v4 ))))false ))false )):named a56 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 B_b_fun$ )(?v3 C_b_fun$ ))(=> (and (= (fun_app$s (comp$g ?v0 )?v1 )(fun_app$s (comp$g ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$z ?v0 (fun_app$y ?v1 ?v4 ))(fun_app$z ?v2 (fun_app$y ?v3 ?v4 ))))false ))false )):named a57 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$m (comp$b ?v0 )?v1 )(fun_app$m (comp$b ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$aa ?v0 (fun_app$z ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$z ?v3 ?v4 ))))false ))false )):named a58 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$m (comp$b ?v0 )?v1 )(fun_app$i (comp$a ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$aa ?v0 (fun_app$z ?v1 ?v4 ))(fun_app$ac ?v2 (fun_app$aa ?v3 ?v4 ))))false ))false )):named a59 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (and (= (fun_app$ab (comp$k ?v0 )?v1 )(fun_app$g (comp$ ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$ac ?v0 (fun_app$v ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$y ?v3 ?v4 ))))false ))false )):named a60 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 B_b_fun$ )(?v3 C_b_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$u (comp$i ?v0 )?v1 )(fun_app$s (comp$g ?v2 )?v3 ))(= (fun_app$m (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$w (comp$j (fun_app$g (comp$ ?v4 )?v0 ))?v1 )(fun_app$g (comp$ ?v5 )?v3 )))):named a61 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_b_fun$ )(?v3 C_c_fun$ )(?v4 B_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$s (comp$g ?v0 )?v1 )(fun_app$u (comp$i ?v2 )?v3 ))(= (fun_app$g (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$g (comp$ (fun_app$m (comp$b ?v4 )?v0 ))?v1 )(fun_app$w (comp$j ?v5 )?v3 )))):named a62 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 A_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$g (comp$ ?v0 )?v1 )(fun_app$g (comp$ ?v2 )?v3 ))(= (fun_app$i (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$g (comp$ (fun_app$i (comp$a ?v4 )?v0 ))?v1 )(fun_app$g (comp$ ?v5 )?v3 )))):named a63 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_c_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 B_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$t (comp$h ?v0 )?v1 )(fun_app$o (comp$c ?v2 )?v3 ))(= (fun_app$q (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$bo (comp$u (fun_app$g (comp$ ?v4 )?v0 ))?v1 )(fun_app$i (comp$a ?v5 )?v3 )))):named a64 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 B_c_fun$ )(?v3 B_b_fun$ )(?v4 C_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$bs (comp$y ?v0 )?v1 )(fun_app$bt (comp$z ?v2 )?v3 ))(= (fun_app$bo (comp$u ?v4 )?v2 )?v5 ))(= (fun_app$bo (comp$u (fun_app$w (comp$j ?v4 )?v0 ))?v1 )(fun_app$m (comp$b ?v5 )?v3 )))):named a65 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 A_c_fun$ )(?v3 B_a_fun$ )(?v4 C_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$bs (comp$y ?v0 )?v1 )(fun_app$bu (comp$aa ?v2 )?v3 ))(= (fun_app$br (comp$x ?v4 )?v2 )?v5 ))(= (fun_app$bo (comp$u (fun_app$w (comp$j ?v4 )?v0 ))?v1 )(fun_app$i (comp$a ?v5 )?v3 )))):named a66 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 A_b_fun$ )(?v3 C_a_fun$ )(?v4 B_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$u (comp$i ?v0 )?v1 )(fun_app$p (comp$d ?v2 )?v3 ))(= (fun_app$q (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$w (comp$j (fun_app$g (comp$ ?v4 )?v0 ))?v1 )(fun_app$ab (comp$k ?v5 )?v3 )))):named a67 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_c_fun$ )(?v2 B_c_fun$ )(?v3 C_b_fun$ )(?v4 C_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$bp (comp$v ?v0 )?v1 )(fun_app$bn (comp$t ?v2 )?v3 ))(= (fun_app$bo (comp$u ?v4 )?v2 )?v5 ))(= (fun_app$w (comp$j (fun_app$w (comp$j ?v4 )?v0 ))?v1 )(fun_app$g (comp$ ?v5 )?v3 )))):named a68 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_c_fun$ )(?v2 A_c_fun$ )(?v3 C_a_fun$ )(?v4 C_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$bp (comp$v ?v0 )?v1 )(fun_app$bq (comp$w ?v2 )?v3 ))(= (fun_app$br (comp$x ?v4 )?v2 )?v5 ))(= (fun_app$w (comp$j (fun_app$w (comp$j ?v4 )?v0 ))?v1 )(fun_app$ab (comp$k ?v5 )?v3 )))):named a69 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 B_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$r (comp$f ?v0 )?v1 )(fun_app$o (comp$c ?v2 )?v3 ))(= (fun_app$q (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$m (comp$b (fun_app$m (comp$b ?v4 )?v0 ))?v1 )(fun_app$i (comp$a ?v5 )?v3 )))):named a70 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 C_b_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$i (comp$a ?v0 )?v1 )(fun_app$m (comp$b ?v2 )?v3 ))(= (fun_app$s (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$ab (comp$k ?v0 )(fun_app$g (comp$ ?v1 )?v4 ))(fun_app$g (comp$ ?v2 )?v5 )))):named a71 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$m (comp$b ?v0 )?v1 )(fun_app$i (comp$a ?v2 )?v3 ))(= (fun_app$g (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$g (comp$ ?v0 )(fun_app$s (comp$g ?v1 )?v4 ))(fun_app$ab (comp$k ?v2 )?v5 )))):named a72 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 C_c_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$g (comp$ ?v0 )?v1 )(fun_app$g (comp$ ?v2 )?v3 ))(= (fun_app$u (comp$i ?v3 )?v4 )?v5 ))(= (fun_app$g (comp$ ?v0 )(fun_app$u (comp$i ?v1 )?v4 ))(fun_app$g (comp$ ?v2 )?v5 )))):named a73 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 C_a_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$bv (comp$ab ?v0 )?v1 )(fun_app$bw (comp$ac ?v2 )?v3 ))(= (fun_app$p (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$p (comp$d ?v0 )(fun_app$ab (comp$k ?v1 )?v4 ))(fun_app$s (comp$g ?v2 )?v5 )))):named a74 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ )(?v3 A_b_fun$ )(?v4 C_a_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$bx (comp$ad ?v0 )?v1 )(fun_app$q (comp$e ?v2 )?v3 ))(= (fun_app$p (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$ab (comp$k ?v0 )(fun_app$ab (comp$k ?v1 )?v4 ))(fun_app$g (comp$ ?v2 )?v5 )))):named a75 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 C_a_fun$ )(?v3 A_c_fun$ )(?v4 C_a_fun$ )(?v5 C_c_fun$ ))(=> (and (= (fun_app$bx (comp$ad ?v0 )?v1 )(fun_app$br (comp$x ?v2 )?v3 ))(= (fun_app$bq (comp$w ?v3 )?v4 )?v5 ))(= (fun_app$ab (comp$k ?v0 )(fun_app$ab (comp$k ?v1 )?v4 ))(fun_app$w (comp$j ?v2 )?v5 )))):named a76 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ )(?v3 A_b_fun$ )(?v4 B_a_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$bx (comp$ad ?v0 )?v1 )(fun_app$q (comp$e ?v2 )?v3 ))(= (fun_app$o (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$i (comp$a ?v0 )(fun_app$i (comp$a ?v1 )?v4 ))(fun_app$m (comp$b ?v2 )?v5 )))):named a77 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$r (comp$f ?v0 )?v1 )(fun_app$o (comp$c ?v2 )?v3 ))(= (fun_app$g (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$s (comp$g ?v0 )(fun_app$s (comp$g ?v1 )?v4 ))(fun_app$p (comp$d ?v2 )?v5 )))):named a78 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 C_b_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$o (comp$c ?v0 )?v1 )(fun_app$r (comp$f ?v2 )?v3 ))(= (fun_app$s (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$p (comp$d ?v0 )(fun_app$g (comp$ ?v1 )?v4 ))(fun_app$s (comp$g ?v2 )?v5 )))):named a79 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 C_b_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$r (comp$f ?v0 )?v1 )(fun_app$r (comp$f ?v2 )?v3 ))(= (fun_app$s (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$s (comp$g ?v0 )(fun_app$s (comp$g ?v1 )?v4 ))(fun_app$s (comp$g ?v2 )?v5 )))):named a80 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 C$ ))(=> (= (fun_app$g (comp$ ?v0 )?v1 )(fun_app$g (comp$ ?v2 )?v3 ))(= (fun_app$aa ?v0 (fun_app$y ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$y ?v3 ?v4 ))))):named a81 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(=> (= (fun_app$g (comp$ ?v0 )?v1 )(fun_app$w (comp$j ?v2 )?v3 ))(= (fun_app$aa ?v0 (fun_app$y ?v1 ?v4 ))(fun_app$v ?v2 (fun_app$x ?v3 ?v4 ))))):named a82 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ )(?v4 C$ ))(=> (= (fun_app$g (comp$ ?v0 )?v1 )(fun_app$ab (comp$k ?v2 )?v3 ))(= (fun_app$aa ?v0 (fun_app$y ?v1 ?v4 ))(fun_app$ac ?v2 (fun_app$v ?v3 ?v4 ))))):named a83 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 C$ ))(=> (= (fun_app$w (comp$j ?v0 )?v1 )(fun_app$g (comp$ ?v2 )?v3 ))(= (fun_app$v ?v0 (fun_app$x ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$y ?v3 ?v4 ))))):named a84 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(=> (= (fun_app$w (comp$j ?v0 )?v1 )(fun_app$w (comp$j ?v2 )?v3 ))(= (fun_app$v ?v0 (fun_app$x ?v1 ?v4 ))(fun_app$v ?v2 (fun_app$x ?v3 ?v4 ))))):named a85 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ )(?v4 C$ ))(=> (= (fun_app$w (comp$j ?v0 )?v1 )(fun_app$ab (comp$k ?v2 )?v3 ))(= (fun_app$v ?v0 (fun_app$x ?v1 ?v4 ))(fun_app$ac ?v2 (fun_app$v ?v3 ?v4 ))))):named a86 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 B_b_fun$ )(?v3 C_b_fun$ )(?v4 C$ ))(=> (= (fun_app$s (comp$g ?v0 )?v1 )(fun_app$s (comp$g ?v2 )?v3 ))(= (fun_app$z ?v0 (fun_app$y ?v1 ?v4 ))(fun_app$z ?v2 (fun_app$y ?v3 ?v4 ))))):named a87 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$m (comp$b ?v0 )?v1 )(fun_app$m (comp$b ?v2 )?v3 ))(= (fun_app$aa ?v0 (fun_app$z ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$z ?v3 ?v4 ))))):named a88 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$m (comp$b ?v0 )?v1 )(fun_app$i (comp$a ?v2 )?v3 ))(= (fun_app$aa ?v0 (fun_app$z ?v1 ?v4 ))(fun_app$ac ?v2 (fun_app$aa ?v3 ?v4 ))))):named a89 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 C$ ))(=> (= (fun_app$ab (comp$k ?v0 )?v1 )(fun_app$g (comp$ ?v2 )?v3 ))(= (fun_app$ac ?v0 (fun_app$v ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$y ?v3 ?v4 ))))):named a90 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$u (comp$i ?v0 )?v1 )?v2 )(= (fun_app$w (comp$j (fun_app$g (comp$ ?v3 )?v0 ))?v1 )(fun_app$g (comp$ ?v3 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$s (comp$g ?v0 )?v1 )?v2 )(= (fun_app$g (comp$ (fun_app$m (comp$b ?v3 )?v0 ))?v1 )(fun_app$g (comp$ ?v3 )?v2 )))):named a92 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$g (comp$ ?v0 )?v1 )?v2 )(= (fun_app$g (comp$ (fun_app$i (comp$a ?v3 )?v0 ))?v1 )(fun_app$ab (comp$k ?v3 )?v2 )))):named a93 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$t (comp$h ?v0 )?v1 )?v2 )(= (fun_app$bo (comp$u (fun_app$g (comp$ ?v3 )?v0 ))?v1 )(fun_app$m (comp$b ?v3 )?v2 )))):named a94 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C_b_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$u (comp$i ?v0 )?v1 )?v2 )(= (fun_app$u (comp$i (fun_app$s (comp$g ?v3 )?v0 ))?v1 )(fun_app$s (comp$g ?v3 )?v2 )))):named a95 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$bo (comp$u ?v0 )?v1 )?v2 )(= (fun_app$bo (comp$u (fun_app$ab (comp$k ?v3 )?v0 ))?v1 )(fun_app$i (comp$a ?v3 )?v2 )))):named a96 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$bn (comp$t ?v0 )?v1 )?v2 )(= (fun_app$g (comp$ (fun_app$bo (comp$u ?v3 )?v0 ))?v1 )(fun_app$w (comp$j ?v3 )?v2 )))):named a97 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_c_fun$ )(?v2 C_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$bp (comp$v ?v0 )?v1 )?v2 )(= (fun_app$w (comp$j (fun_app$w (comp$j ?v3 )?v0 ))?v1 )(fun_app$w (comp$j ?v3 )?v2 )))):named a98 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$r (comp$f ?v0 )?v1 )?v2 )(= (fun_app$m (comp$b (fun_app$m (comp$b ?v3 )?v0 ))?v1 )(fun_app$m (comp$b ?v3 )?v2 )))):named a99 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 C_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$p (comp$d ?v0 )?v1 )?v2 )(= (fun_app$ab (comp$k (fun_app$q (comp$e ?v3 )?v0 ))?v1 )(fun_app$g (comp$ ?v3 )?v2 )))):named a100 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (= (fun_app$i (comp$a ?v0 )?v1 )?v2 )(= (fun_app$ab (comp$k ?v0 )(fun_app$g (comp$ ?v1 )?v3 ))(fun_app$g (comp$ ?v2 )?v3 )))):named a101 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (= (fun_app$m (comp$b ?v0 )?v1 )?v2 )(= (fun_app$g (comp$ ?v0 )(fun_app$s (comp$g ?v1 )?v3 ))(fun_app$g (comp$ ?v2 )?v3 )))):named a102 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ ))(=> (= (fun_app$g (comp$ ?v0 )?v1 )?v2 )(= (fun_app$g (comp$ ?v0 )(fun_app$u (comp$i ?v1 )?v3 ))(fun_app$w (comp$j ?v2 )?v3 )))):named a103 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 C_b_fun$ ))(=> (= (fun_app$o (comp$c ?v0 )?v1 )?v2 )(= (fun_app$p (comp$d ?v0 )(fun_app$g (comp$ ?v1 )?v3 ))(fun_app$s (comp$g ?v2 )?v3 )))):named a104 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$q (comp$e ?v0 )?v1 )?v2 )(= (fun_app$g (comp$ ?v0 )(fun_app$p (comp$d ?v1 )?v3 ))(fun_app$ab (comp$k ?v2 )?v3 )))):named a105 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (= (fun_app$bo (comp$u ?v0 )?v1 )?v2 )(= (fun_app$w (comp$j ?v0 )(fun_app$bn (comp$t ?v1 )?v3 ))(fun_app$g (comp$ ?v2 )?v3 )))):named a106 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_c_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$br (comp$x ?v0 )?v1 )?v2 )(= (fun_app$w (comp$j ?v0 )(fun_app$bq (comp$w ?v1 )?v3 ))(fun_app$ab (comp$k ?v2 )?v3 )))):named a107 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 C_b_fun$ ))(=> (= (fun_app$r (comp$f ?v0 )?v1 )?v2 )(= (fun_app$s (comp$g ?v0 )(fun_app$s (comp$g ?v1 )?v3 ))(fun_app$s (comp$g ?v2 )?v3 )))):named a108 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$q (comp$e ?v0 )?v1 )?v2 )(= (fun_app$m (comp$b ?v0 )(fun_app$o (comp$c ?v1 )?v3 ))(fun_app$i (comp$a ?v2 )?v3 )))):named a109 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$bx (comp$ad ?v0 )?v1 )?v2 )(= (fun_app$ab (comp$k ?v0 )(fun_app$ab (comp$k ?v1 )?v3 ))(fun_app$ab (comp$k ?v2 )?v3 )))):named a110 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 C$ ))(=> (= (fun_app$ab (comp$k ?v0 )?v1 )?v2 )(= (fun_app$ac ?v0 (fun_app$v ?v1 ?v3 ))(fun_app$v ?v2 ?v3 )))):named a111 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$i (comp$a ?v0 )?v1 )?v2 )(= (fun_app$ac ?v0 (fun_app$aa ?v1 ?v3 ))(fun_app$aa ?v2 ?v3 )))):named a112 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C$ ))(=> (= (fun_app$g (comp$ ?v0 )?v1 )?v2 )(= (fun_app$aa ?v0 (fun_app$y ?v1 ?v3 ))(fun_app$v ?v2 ?v3 )))):named a113 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ )(?v5 C$ ))(=> (= (fun_app$aa ?v0 (fun_app$y ?v1 ?v2 ))(fun_app$aa ?v3 (fun_app$y ?v4 ?v5 )))(= (fun_app$v (fun_app$g (comp$ ?v0 )?v1 )?v2 )(fun_app$v (fun_app$g (comp$ ?v3 )?v4 )?v5 )))):named a114 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ ))(=> (= (fun_app$aa ?v0 (fun_app$y ?v1 ?v2 ))(fun_app$aa ?v3 (fun_app$y ?v4 ?v2 )))(= (fun_app$v (fun_app$g (comp$ ?v0 )?v1 )?v2 )(fun_app$v (fun_app$g (comp$ ?v3 )?v4 )?v2 )))):named a115 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C$ )(?v3 B_b_fun$ )(?v4 C_b_fun$ )(?v5 B_a_fun$ ))(=> (= (fun_app$y ?v0 (fun_app$x ?v1 ?v2 ))(fun_app$z ?v3 (fun_app$y ?v4 ?v2 )))(= (fun_app$v (fun_app$w (comp$j (fun_app$g (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$v (fun_app$g (comp$ (fun_app$m (comp$b ?v5 )?v3 ))?v4 )?v2 )))):named a116 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C$ )(?v3 C_b_fun$ )(?v4 C_c_fun$ )(?v5 B_a_fun$ ))(=> (= (fun_app$z ?v0 (fun_app$y ?v1 ?v2 ))(fun_app$y ?v3 (fun_app$x ?v4 ?v2 )))(= (fun_app$v (fun_app$g (comp$ (fun_app$m (comp$b ?v5 )?v0 ))?v1 )?v2 )(fun_app$v (fun_app$w (comp$j (fun_app$g (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a117 ))
(check-sat )
;(get-unsat-core )
