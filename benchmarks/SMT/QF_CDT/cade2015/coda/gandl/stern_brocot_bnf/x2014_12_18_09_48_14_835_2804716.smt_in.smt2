;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_a_fun_b_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort A_a_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_b_a_fun_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_a_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_a_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_a_fun_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun_b_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(B_a_fun_tree$ (node$a (select$ B_a_fun$ )(selecta$ B_a_fun_tree$ )(selectb$ B_a_fun_tree$ )))(B_tree$ (node$b (root$a B$ )(left$a B_tree$ )(right$a B_tree$ )))(B_a_fun_stream$ (sCons$a (selectc$ B_a_fun$ )(selectd$ B_a_fun_stream$ )))(B_stream$ (sCons$b (shd$a B$ )(stl$a B_stream$ )))(A_a_a_fun_fun_tree$ (node$c (selecte$ A_a_a_fun_fun$ )(selectf$ A_a_a_fun_fun_tree$ )(selectg$ A_a_a_fun_fun_tree$ )))(A_a_fun_tree$ (node$d (selecth$ A_a_fun$ )(selecti$ A_a_fun_tree$ )(selectj$ A_a_fun_tree$ )))(A_b_fun_tree$ (node$e (selectk$ A_b_fun$ )(selectl$ A_b_fun_tree$ )(selectm$ A_b_fun_tree$ )))(B_b_a_fun_fun_tree$ (node$f (selectn$ B_b_a_fun_fun$ )(selecto$ B_b_a_fun_fun_tree$ )(selectp$ B_b_a_fun_fun_tree$ )))(B_a_a_fun_fun_tree$ (node$g (selectq$ B_a_a_fun_fun$ )(selectr$ B_a_a_fun_fun_tree$ )(selects$ B_a_a_fun_fun_tree$ )))(B_b_fun_tree$ (node$h (selectt$ B_b_fun$ )(selectu$ B_b_fun_tree$ )(selectv$ B_b_fun_tree$ )))(A_b_a_fun_fun_tree$ (node$i (selectw$ A_b_a_fun_fun$ )(selectx$ A_b_a_fun_fun_tree$ )(selecty$ A_b_a_fun_fun_tree$ )))(B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ (node$j (selectz$ B_a_a_fun_fun_a_b_a_fun_fun_fun$ )(selecua$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )(selecub$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )))(B_b_b_a_fun_fun_fun_tree$ (node$k (selecuc$ B_b_b_a_fun_fun_fun$ )(selecud$ B_b_b_a_fun_fun_fun_tree$ )(selecue$ B_b_b_a_fun_fun_fun_tree$ )))(B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ (node$l (selecuf$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ )(selecug$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )(selecuh$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )))(B_a_b_a_fun_fun_fun_tree$ (node$m (selecui$ B_a_b_a_fun_fun_fun$ )(selecuj$ B_a_b_a_fun_fun_fun_tree$ )(selecuk$ B_a_b_a_fun_fun_fun_tree$ )))(A_b_b_a_fun_fun_fun_tree$ (node$n (selecul$ A_b_b_a_fun_fun_fun$ )(selecum$ A_b_b_a_fun_fun_fun_tree$ )(selecun$ A_b_b_a_fun_fun_fun_tree$ )))(B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ (node$o (selecuo$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ )(selecup$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )(selecuq$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )))(B_b_a_a_fun_fun_fun_tree$ (node$p (selecur$ B_b_a_a_fun_fun_fun$ )(selecus$ B_b_a_a_fun_fun_fun_tree$ )(selecut$ B_b_a_a_fun_fun_fun_tree$ )))(B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ (node$q (selecuu$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ )(selecuv$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )(selecuw$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )))(B_b_b_fun_fun_tree$ (node$r (selecux$ B_b_b_fun_fun$ )(selecuy$ B_b_b_fun_fun_tree$ )(selecuz$ B_b_b_fun_fun_tree$ )))(B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ (node$s (selecva$ B_b_b_fun_fun_b_b_b_fun_fun_fun$ )(selecvb$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )(selecvc$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )))(A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ (node$t (selecvd$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ )(selecve$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )(selecvf$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )))(A_a_b_a_fun_fun_fun_tree$ (node$u (selecvg$ A_a_b_a_fun_fun_fun$ )(selecvh$ A_a_b_a_fun_fun_fun_tree$ )(selecvi$ A_a_b_a_fun_fun_fun_tree$ )))(A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ (node$v (selecvj$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ )(selecvk$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )(selecvl$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )))(A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ (node$w (selecvm$ A_a_a_fun_fun_a_a_a_fun_fun_fun$ )(selecvn$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )(selecvo$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )))(A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ (node$x (selecvp$ A_b_a_fun_fun_b_a_a_fun_fun_fun$ )(selecvq$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )(selecvr$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )))(B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ (node$y (selecvs$ B_b_a_fun_fun_b_b_a_fun_fun_fun$ )(selecvt$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )(selecvu$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )))(B_a_fun_b_a_fun_fun_tree$ (node$z (selecvv$ B_a_fun_b_a_fun_fun$ )(selecvw$ B_a_fun_b_a_fun_fun_tree$ )(selecvx$ B_a_fun_b_a_fun_fun_tree$ )))(B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$aa (selecvy$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ )(selecvz$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )(selecwa$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )))(B_b_fun_b_a_fun_fun_tree$ (node$ab (selecwb$ B_b_fun_b_a_fun_fun$ )(selecwc$ B_b_fun_b_a_fun_fun_tree$ )(selecwd$ B_b_fun_b_a_fun_fun_tree$ )))(B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ (node$ac (selecwe$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ )(selecwf$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )(selecwg$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )))(B_a_b_fun_fun_tree$ (node$ad (selecwh$ B_a_b_fun_fun$ )(selecwi$ B_a_b_fun_fun_tree$ )(selecwj$ B_a_b_fun_fun_tree$ )))(B_a_fun_b_b_fun_fun_tree$ (node$ae (selecwk$ B_a_fun_b_b_fun_fun$ )(selecwl$ B_a_fun_b_b_fun_fun_tree$ )(selecwm$ B_a_fun_b_b_fun_fun_tree$ )))(B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ (node$af (selecwn$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ )(selecwo$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )(selecwp$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )))(B_b_fun_b_b_fun_fun_tree$ (node$ag (selecwq$ B_b_fun_b_b_fun_fun$ )(selecwr$ B_b_fun_b_b_fun_fun_tree$ )(selecws$ B_b_fun_b_b_fun_fun_tree$ )))(B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ (node$ah (selecwt$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ )(selecwu$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )(selecwv$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )))(A_b_fun_a_a_fun_fun_tree$ (node$ai (selecww$ A_b_fun_a_a_fun_fun$ )(selecwx$ A_b_fun_a_a_fun_fun_tree$ )(selecwy$ A_b_fun_a_a_fun_fun_tree$ )))(A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ (node$aj (selecwz$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ )(selecxa$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )(selecxb$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )))(A_a_fun_a_a_fun_fun_tree$ (node$ak (selecxc$ A_a_fun_a_a_fun_fun$ )(selecxd$ A_a_fun_a_a_fun_fun_tree$ )(selecxe$ A_a_fun_a_a_fun_fun_tree$ )))(A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ (node$al (selecxf$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(selecxg$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )(selecxh$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )))(B_b_a_fun_a_fun_fun_tree$ (node$am (selecxi$ B_b_a_fun_a_fun_fun$ )(selecxj$ B_b_a_fun_a_fun_fun_tree$ )(selecxk$ B_b_a_fun_a_fun_fun_tree$ )))(B_b_a_fun_fun_b_a_fun_fun_tree$ (node$an (selecxl$ B_b_a_fun_fun_b_a_fun_fun$ )(selecxm$ B_b_a_fun_fun_b_a_fun_fun_tree$ )(selecxn$ B_b_a_fun_fun_b_a_fun_fun_tree$ )))(B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$ao (selecxo$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ )(selecxp$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )(selecxq$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )))(B_a_fun_a_fun_tree$ (node$ap (selecxr$ B_a_fun_a_fun$ )(selecxs$ B_a_fun_a_fun_tree$ )(selecxt$ B_a_fun_a_fun_tree$ )))(B_a_a_fun_a_fun_fun_tree$ (node$aq (selecxu$ B_a_a_fun_a_fun_fun$ )(selecxv$ B_a_a_fun_a_fun_fun_tree$ )(selecxw$ B_a_a_fun_a_fun_fun_tree$ )))(B_a_a_fun_fun_b_a_fun_fun_tree$ (node$ar (selecxx$ B_a_a_fun_fun_b_a_fun_fun$ )(selecxy$ B_a_a_fun_fun_b_a_fun_fun_tree$ )(selecxz$ B_a_a_fun_fun_b_a_fun_fun_tree$ )))(B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ (node$as (selecya$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ )(selecyb$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )(selecyc$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )))(A_a_fun_a_fun_tree$ (node$at (selecyd$ A_a_fun_a_fun$ )(selecye$ A_a_fun_a_fun_tree$ )(selecyf$ A_a_fun_a_fun_tree$ )))(B_b_fun_b_b_a_fun_fun_fun_tree$ (node$au (selecyg$ B_b_fun_b_b_a_fun_fun_fun$ )(selecyh$ B_b_fun_b_b_a_fun_fun_fun_tree$ )(selecyi$ B_b_fun_b_b_a_fun_fun_fun_tree$ )))(B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ (node$av (selecyj$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ )(selecyk$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )(selecyl$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )))(B_a_fun_b_b_a_fun_fun_fun_tree$ (node$aw (selecym$ B_a_fun_b_b_a_fun_fun_fun$ )(selecyn$ B_a_fun_b_b_a_fun_fun_fun_tree$ )(selecyo$ B_a_fun_b_b_a_fun_fun_fun_tree$ )))(B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ (node$ax (selecyp$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ )(selecyq$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )(selecyr$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )))(A_a_fun_b_a_a_fun_fun_fun_tree$ (node$ay (selecys$ A_a_fun_b_a_a_fun_fun_fun$ )(selecyt$ A_a_fun_b_a_a_fun_fun_fun_tree$ )(selecyu$ A_a_fun_b_a_a_fun_fun_fun_tree$ )))(B_a_fun_a_b_a_fun_fun_fun_tree$ (node$az (selecyv$ B_a_fun_a_b_a_fun_fun_fun$ )(selecyw$ B_a_fun_a_b_a_fun_fun_fun_tree$ )(selecyx$ B_a_fun_a_b_a_fun_fun_fun_tree$ )))))
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-codatatypes ()((B_a_fun_b_fun_tree$ (node$ba (selecyy$ B_a_fun_b_fun$ )(selecyz$ B_a_fun_b_fun_tree$ )(selecza$ B_a_fun_b_fun_tree$ )))(B_a_fun_b_a_fun_fun_stream$ (sCons$c (seleczb$ B_a_fun_b_a_fun_fun$ )(seleczc$ B_a_fun_b_a_fun_fun_stream$ )))(B_a_fun_b_fun_stream$ (sCons$d (seleczd$ B_a_fun_b_fun$ )(selecze$ B_a_fun_b_fun_stream$ )))(B_a_fun_a_fun_stream$ (sCons$e (seleczf$ B_a_fun_a_fun$ )(seleczg$ B_a_fun_a_fun_stream$ )))(B_b_a_fun_fun_stream$ (sCons$f (seleczh$ B_b_a_fun_fun$ )(seleczi$ B_b_a_fun_fun_stream$ )))(B_b_fun_stream$ (sCons$g (seleczj$ B_b_fun$ )(seleczk$ B_b_fun_stream$ )))(A_b_a_fun_fun_stream$ (sCons$h (seleczl$ A_b_a_fun_fun$ )(seleczm$ A_b_a_fun_fun_stream$ )))(A_b_fun_stream$ (sCons$i (seleczn$ A_b_fun$ )(seleczo$ A_b_fun_stream$ )))(A_a_fun_stream$ (sCons$j (seleczp$ A_a_fun$ )(seleczq$ A_a_fun_stream$ )))))
(declare-fun f$ ()B_a_fun_tree$ )
(declare-fun x$ ()B_tree$ )
(declare-fun shd$b (B_a_fun_stream$ )B_a_fun$ )
(declare-fun stl$b (B_a_fun_stream$ )B_a_fun_stream$ )
(declare-fun root$b (B_a_fun_tree$ )B_a_fun$ )
(declare-fun st_ap$ (B_a_fun_stream$ B_stream$ )A_stream$ )
(declare-fun st_ap$a (B_a_fun_b_a_fun_fun_stream$ B_a_fun_stream$ )B_a_fun_stream$ )
(declare-fun st_ap$b (B_a_fun_b_fun_stream$ B_a_fun_stream$ )B_stream$ )
(declare-fun st_ap$c (B_a_fun_a_fun_stream$ B_a_fun_stream$ )A_stream$ )
(declare-fun st_ap$d (B_b_a_fun_fun_stream$ B_stream$ )B_a_fun_stream$ )
(declare-fun st_ap$e (B_b_fun_stream$ B_stream$ )B_stream$ )
(declare-fun st_ap$f (A_b_a_fun_fun_stream$ A_stream$ )B_a_fun_stream$ )
(declare-fun st_ap$g (A_b_fun_stream$ A_stream$ )B_stream$ )
(declare-fun st_ap$h (A_a_fun_stream$ A_stream$ )A_stream$ )
(declare-fun stream$ (A_tree$ )A_stream$ )
(declare-fun tree_C$ ()B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$ ()B_a_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$ ()B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun fun_app$ (B_a_a_fun_fun$ B$ )A_a_fun$ )
(declare-fun stream$a (B_a_fun_tree$ )B_a_fun_stream$ )
(declare-fun stream$b (B_tree$ )B_stream$ )
(declare-fun tree_C$a ()B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$b ()B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$c ()B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$d ()B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )
(declare-fun tree_C$e ()A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$f ()A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$g ()A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )
(declare-fun tree_C$h ()A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_C$i ()B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$a ()A_a_fun_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_K$b ()B_b_b_fun_fun_tree$ )
(declare-fun tree_K$c ()B_a_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$d ()A_a_a_fun_fun_tree$ )
(declare-fun tree_K$e ()A_b_a_fun_fun_tree$ )
(declare-fun tree_S$a ()B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$b ()B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_S$c ()B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_S$d ()A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$e ()A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$f ()B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$g ()B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$h ()B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$i ()B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (B_b_fun$ B$ )B$ )
(declare-fun fun_app$b (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$c (B_a_fun_b_fun$ B_a_fun$ )B$ )
(declare-fun fun_app$d (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$e (B_a_fun_a_fun$ B_a_fun$ )A$ )
(declare-fun fun_app$f (A_b_fun$ A$ )B$ )
(declare-fun fun_app$g (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$h (A_a_fun$ A$ )A$ )
(declare-fun fun_app$i (B_a_fun$ B$ )A$ )
(declare-fun tree_ap$a (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$b (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$c (B_b_a_fun_fun_tree$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$d (B_a_a_fun_fun_tree$ B_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$e (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$f (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$g (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$h (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$i (B_b_b_a_fun_fun_fun_tree$ B_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$j (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$k (A_b_b_a_fun_fun_fun_tree$ A_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$l (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )A_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$m (B_a_b_a_fun_fun_fun_tree$ B_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$n (B_b_a_a_fun_fun_fun_tree$ B_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$o (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ B_b_a_a_fun_fun_fun_tree$ )B_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$p (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$q (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$ )
(declare-fun tree_ap$r (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ A_b_b_a_fun_fun_fun_tree$ )B_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$s (A_a_b_a_fun_fun_fun_tree$ A_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$t (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$u (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_ap$v (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$w (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$x (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$y (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$z (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$aa (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ab (B_a_fun_b_b_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$ac (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ B_a_b_fun_fun_tree$ )B_a_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$ad (B_a_b_fun_fun_tree$ B_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$ae (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$af (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$ag (A_b_fun_a_a_fun_fun_tree$ A_b_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$ah (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ai (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$aj (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ak (B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$al (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_a_fun_fun_tree$ )B_b_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$am (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$an (B_b_a_fun_a_fun_fun_tree$ B_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_ap$ao (B_a_a_fun_fun_b_a_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$ap (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_a_fun_fun_tree$ )B_a_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$aq (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$ar (B_a_a_fun_a_fun_fun_tree$ B_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_ap$as (B_b_fun_b_b_a_fun_fun_fun_tree$ B_b_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$at (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$au (B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$av (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )B_a_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$aw (A_a_fun_b_a_a_fun_fun_fun_tree$ A_a_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ax (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ay (B_a_fun_b_fun_tree$ B_a_fun_tree$ )B_tree$ )
(declare-fun tree_chop$ (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_pure$ (B$ )B_tree$ )
(declare-fun tree_chop$a (B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_chop$b (B_tree$ )B_tree$ )
(declare-fun tree_chop$c (A_tree$ )A_tree$ )
(declare-fun tree_chop$d (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_chop$e (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_chop$f (A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_chop$g (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_chop$h (B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_chop$i (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun tree_chop$j (B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$ )
(declare-fun tree_chop$k (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_pure$a (A$ )A_tree$ )
(declare-fun tree_pure$b (B_a_a_fun_fun$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_pure$c (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$d (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$e (B_b_a_fun_fun$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_pure$f (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$g (B_a_fun_b_fun$ )B_a_fun_b_fun_tree$ )
(declare-fun tree_pure$h (B_a_fun_b_a_fun_fun$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$i (B_a_fun_a_fun$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_pure$j (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$k (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun traverse_tree$ (Dir_list$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun traverse_tree$a (Dir_list$ B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun traverse_tree$b (Dir_list$ B_tree$ )B_tree$ )
(declare-fun traverse_tree$c (Dir_list$ A_tree$ )A_tree$ )
(declare-fun traverse_tree$d (Dir_list$ B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun traverse_tree$e (Dir_list$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun traverse_tree$f (Dir_list$ A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun traverse_tree$g (Dir_list$ B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun traverse_tree$h (Dir_list$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun traverse_tree$i (Dir_list$ A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun traverse_tree$j (Dir_list$ B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$ )
(declare-fun traverse_tree$k (Dir_list$ B_b_fun_tree$ )B_b_fun_tree$ )
(assert (! (not (= (stream$ (tree_ap$ f$ x$ ))(st_ap$ (stream$a f$ )(stream$b x$ )))):named a0 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_a_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$a ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$b ?v0 ?v2 )(tree_ap$b ?v1 ?v2 )))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$c ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$d ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$e ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$f ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$g ?v0 ?v2 )(tree_ap$g ?v1 ?v2 )))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$ ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 A_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$f (tree_ap$h tree_C$ ?v0 )?v1 )?v2 )(tree_ap$g (tree_ap$d ?v0 ?v2 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$c (tree_ap$i (tree_ap$j tree_C$a ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$i ?v0 ?v2 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ )(?v2 B_tree$ ))(= (tree_ap$c (tree_ap$k (tree_ap$l tree_C$b ?v0 )?v1 )?v2 )(tree_ap$f (tree_ap$m ?v0 ?v2 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 B_b_a_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$d (tree_ap$n (tree_ap$o tree_C$c ?v0 )?v1 )?v2 )(tree_ap$d (tree_ap$n ?v0 ?v2 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$p (tree_ap$q tree_C$d ?v0 )?v1 )?v2 )(tree_ap$e (tree_ap$p ?v0 ?v2 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_b_b_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 A_tree$ ))(= (tree_ap$f (tree_ap$m (tree_ap$r tree_C$e ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$k ?v0 ?v2 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (tree_ap$f (tree_ap$s (tree_ap$t tree_C$f ?v0 )?v1 )?v2 )(tree_ap$f (tree_ap$s ?v0 ?v2 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (tree_ap$g (tree_ap$a (tree_ap$u tree_C$g ?v0 )?v1 )?v2 )(tree_ap$g (tree_ap$a ?v0 ?v2 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 B_tree$ )(?v2 A_tree$ ))(= (tree_ap$g (tree_ap$d (tree_ap$v tree_C$h ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$f ?v0 ?v2 )?v1 ))):named a17 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$c (tree_ap$w tree_C$i ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$c ?v0 ?v2 )?v1 ))):named a18 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$x (tree_ap$y tree_S$ ?v0 )?v1 )?v2 )(tree_ap$g (tree_ap$d ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$z (tree_ap$aa tree_S$a ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$c ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$ab (tree_ap$ac tree_S$b ?v0 )?v1 )?v2 )(tree_ap$b (tree_ap$ad ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$ae (tree_ap$af tree_S$c ?v0 )?v1 )?v2 )(tree_ap$e (tree_ap$p ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$g (tree_ap$ag (tree_ap$ah tree_S$d ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$f ?v0 ?v2 )(tree_ap$b ?v1 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$g (tree_ap$ai (tree_ap$aj tree_S$e ?v0 )?v1 )?v2 )(tree_ap$g (tree_ap$a ?v0 ?v2 )(tree_ap$g ?v1 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ak (tree_ap$al tree_S$f ?v0 )?v1 )?v2 )(tree_ap$am (tree_ap$an ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 B_a_a_fun_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ao (tree_ap$ap tree_S$g ?v0 )?v1 )?v2 )(tree_ap$aq (tree_ap$ar ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$c (tree_ap$as (tree_ap$at tree_S$h ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$i ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$c (tree_ap$au (tree_ap$av tree_S$i ?v0 )?v1 )?v2 )(tree_ap$f (tree_ap$m ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$c (tree_ap$au tree_K$ ?v0 )?v1 )?v0 )):named a29 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_ap$aw tree_K$a ?v0 )?v1 )?v0 )):named a30 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_ap$p tree_K$b ?v0 )?v1 )?v0 )):named a31 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$f (tree_ap$ax tree_K$c ?v0 )?v1 )?v0 )):named a32 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (tree_ap$g (tree_ap$a tree_K$d ?v0 )?v1 )?v0 )):named a33 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_ap$f tree_K$e ?v0 )?v1 )?v0 )):named a34 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$c ?v0 (tree_pure$ ?v2 ))(tree_ap$c ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$d ?v0 (tree_pure$ ?v2 ))(tree_ap$d ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$e ?v0 (tree_pure$ ?v2 ))(tree_ap$e ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$f ?v0 (tree_pure$a ?v2 ))(tree_ap$f ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$g ?v0 (tree_pure$a ?v2 ))(tree_ap$g ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$ ?v0 (tree_pure$ ?v2 ))(tree_ap$ ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$d ?v1 ?v2 ))(tree_ap$d (traverse_tree$a ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$c ?v0 (tree_ap$g ?v1 ?v2 ))(tree_ap$g (traverse_tree$ ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_a_fun_tree$ )(?v2 B_a_fun_tree$ ))(= (traverse_tree$c ?v0 (tree_ap$am ?v1 ?v2 ))(tree_ap$am (traverse_tree$d ?v0 ?v1 )(traverse_tree$e ?v0 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_a_fun_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$e ?v0 (tree_ap$f ?v1 ?v2 ))(tree_ap$f (traverse_tree$f ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_b_a_fun_fun_tree$ )(?v2 B_a_fun_tree$ ))(= (traverse_tree$e ?v0 (tree_ap$x ?v1 ?v2 ))(tree_ap$x (traverse_tree$g ?v0 ?v1 )(traverse_tree$e ?v0 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (traverse_tree$e ?v0 (tree_ap$c ?v1 ?v2 ))(tree_ap$c (traverse_tree$h ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$b ?v0 (tree_ap$b ?v1 ?v2 ))(tree_ap$b (traverse_tree$i ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_b_fun_tree$ )(?v2 B_a_fun_tree$ ))(= (traverse_tree$b ?v0 (tree_ap$ay ?v1 ?v2 ))(tree_ap$ay (traverse_tree$j ?v0 ?v1 )(traverse_tree$e ?v0 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (traverse_tree$b ?v0 (tree_ap$e ?v1 ?v2 ))(tree_ap$e (traverse_tree$k ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (traverse_tree$c ?v0 (tree_ap$ ?v1 ?v2 ))(tree_ap$ (traverse_tree$e ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (tree_chop$ (tree_ap$d ?v0 ?v1 ))(tree_ap$d (tree_chop$a ?v0 )(tree_chop$b ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_chop$c (tree_ap$g ?v0 ?v1 ))(tree_ap$g (tree_chop$ ?v0 )(tree_chop$c ?v1 )))):named a52 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (tree_chop$c (tree_ap$am ?v0 ?v1 ))(tree_ap$am (tree_chop$d ?v0 )(tree_chop$e ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (tree_chop$e (tree_ap$f ?v0 ?v1 ))(tree_ap$f (tree_chop$f ?v0 )(tree_chop$c ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (tree_chop$e (tree_ap$x ?v0 ?v1 ))(tree_ap$x (tree_chop$g ?v0 )(tree_chop$e ?v1 )))):named a55 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (tree_chop$e (tree_ap$c ?v0 ?v1 ))(tree_ap$c (tree_chop$h ?v0 )(tree_chop$b ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (tree_chop$b (tree_ap$b ?v0 ?v1 ))(tree_ap$b (tree_chop$i ?v0 )(tree_chop$c ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (tree_chop$b (tree_ap$ay ?v0 ?v1 ))(tree_ap$ay (tree_chop$j ?v0 )(tree_chop$e ?v1 )))):named a58 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (tree_chop$b (tree_ap$e ?v0 ?v1 ))(tree_ap$e (tree_chop$k ?v0 )(tree_chop$b ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_chop$c (tree_ap$ ?v0 ?v1 ))(tree_ap$ (tree_chop$e ?v0 )(tree_chop$b ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_tree$ ))(= (stl$ (stream$ ?v0 ))(stream$ (tree_chop$c ?v0 )))):named a61 ))
(assert (! (forall ((?v0 B_a_fun_tree$ ))(= (stl$b (stream$a ?v0 ))(stream$a (tree_chop$e ?v0 )))):named a62 ))
(assert (! (forall ((?v0 B_tree$ ))(= (stl$a (stream$b ?v0 ))(stream$b (tree_chop$b ?v0 )))):named a63 ))
(assert (! (forall ((?v0 A_tree$ ))(= (shd$ (stream$ ?v0 ))(root$ ?v0 ))):named a64 ))
(assert (! (forall ((?v0 B_a_fun_tree$ ))(= (shd$b (stream$a ?v0 ))(root$b ?v0 ))):named a65 ))
(assert (! (forall ((?v0 B_tree$ ))(= (shd$a (stream$b ?v0 ))(root$a ?v0 ))):named a66 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$d (tree_pure$b ?v0 )(tree_pure$ ?v1 ))(tree_pure$c (fun_app$ ?v0 ?v1 )))):named a67 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$e (tree_pure$d ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$a ?v0 ?v1 )))):named a68 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$c (tree_pure$e ?v0 )(tree_pure$ ?v1 ))(tree_pure$f (fun_app$b ?v0 ?v1 )))):named a69 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$ay (tree_pure$g ?v0 )(tree_pure$f ?v1 ))(tree_pure$ (fun_app$c ?v0 ?v1 )))):named a70 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$x (tree_pure$h ?v0 )(tree_pure$f ?v1 ))(tree_pure$f (fun_app$d ?v0 ?v1 )))):named a71 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$am (tree_pure$i ?v0 )(tree_pure$f ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$b (tree_pure$j ?v0 )(tree_pure$a ?v1 ))(tree_pure$ (fun_app$f ?v0 ?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$f (tree_pure$k ?v0 )(tree_pure$a ?v1 ))(tree_pure$f (fun_app$g ?v0 ?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$g (tree_pure$c ?v0 )(tree_pure$a ?v1 ))(tree_pure$a (fun_app$h ?v0 ?v1 )))):named a75 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$f ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$i ?v0 ?v1 )))):named a76 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$d (tree_pure$b ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$d (fun_app$ ?v0 ?v1 )(tree_ap$d (tree_pure$b ?v0 )?v2 )(tree_ap$d (tree_pure$b ?v0 )?v3 )))):named a77 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$e (tree_pure$d ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$a ?v0 ?v1 )(tree_ap$e (tree_pure$d ?v0 )?v2 )(tree_ap$e (tree_pure$d ?v0 )?v3 )))):named a78 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$c (tree_pure$e ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$a (fun_app$b ?v0 ?v1 )(tree_ap$c (tree_pure$e ?v0 )?v2 )(tree_ap$c (tree_pure$e ?v0 )?v3 )))):named a79 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$b (tree_pure$j ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$b (fun_app$f ?v0 ?v1 )(tree_ap$b (tree_pure$j ?v0 )?v2 )(tree_ap$b (tree_pure$j ?v0 )?v3 )))):named a80 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$g (tree_pure$c ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$h ?v0 ?v1 )(tree_ap$g (tree_pure$c ?v0 )?v2 )(tree_ap$g (tree_pure$c ?v0 )?v3 )))):named a81 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$f (tree_pure$k ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$a (fun_app$g ?v0 ?v1 )(tree_ap$f (tree_pure$k ?v0 )?v2 )(tree_ap$f (tree_pure$k ?v0 )?v3 )))):named a82 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$ay (tree_pure$g ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$b (fun_app$c ?v0 ?v1 )(tree_ap$ay (tree_pure$g ?v0 )?v2 )(tree_ap$ay (tree_pure$g ?v0 )?v3 )))):named a83 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$am (tree_pure$i ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$ (fun_app$e ?v0 ?v1 )(tree_ap$am (tree_pure$i ?v0 )?v2 )(tree_ap$am (tree_pure$i ?v0 )?v3 )))):named a84 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$x (tree_pure$h ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$a (fun_app$d ?v0 ?v1 )(tree_ap$x (tree_pure$h ?v0 )?v2 )(tree_ap$x (tree_pure$h ?v0 )?v3 )))):named a85 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$ (tree_pure$f ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$i ?v0 ?v1 )(tree_ap$ (tree_pure$f ?v0 )?v2 )(tree_ap$ (tree_pure$f ?v0 )?v3 )))):named a86 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_a_a_fun_fun_tree$ )(?v2 B_a_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$d (node$g ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$d (fun_app$ ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$g ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a87 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$e (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$b (fun_app$a ?v0 ?v3 )(tree_ap$e ?v1 ?v4 )(tree_ap$e ?v2 ?v5 ))):pattern ((tree_ap$e (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a88 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_b_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$c (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$a (fun_app$b ?v0 ?v3 )(tree_ap$c ?v1 ?v4 )(tree_ap$c ?v2 ?v5 ))):pattern ((tree_ap$c (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a89 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$b (fun_app$f ?v0 ?v3 )(tree_ap$b ?v1 ?v4 )(tree_ap$b ?v2 ?v5 ))):pattern ((tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a90 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$g (node$d ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$ (fun_app$h ?v0 ?v3 )(tree_ap$g ?v1 ?v4 )(tree_ap$g ?v2 ?v5 ))):pattern ((tree_ap$g (node$d ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a91 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_b_a_fun_fun_tree$ )(?v2 A_b_a_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$a (fun_app$g ?v0 ?v3 )(tree_ap$f ?v1 ?v4 )(tree_ap$f ?v2 ?v5 ))):pattern ((tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a92 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_b_fun_tree$ )(?v2 B_a_fun_b_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$ay (node$ba ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$b (fun_app$c ?v0 ?v3 )(tree_ap$ay ?v1 ?v4 )(tree_ap$ay ?v2 ?v5 ))):pattern ((tree_ap$ay (node$ba ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a93 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_a_fun_tree$ )(?v2 B_a_fun_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$am (node$ap ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$ (fun_app$e ?v0 ?v3 )(tree_ap$am ?v1 ?v4 )(tree_ap$am ?v2 ?v5 ))):pattern ((tree_ap$am (node$ap ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a94 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_b_a_fun_fun_tree$ )(?v2 B_a_fun_b_a_fun_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$x (node$z ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$a (fun_app$d ?v0 ?v3 )(tree_ap$x ?v1 ?v4 )(tree_ap$x ?v2 ?v5 ))):pattern ((tree_ap$x (node$z ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a95 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$i ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a96 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_b_a_fun_fun_stream$ )(?v2 B_a_fun$ )(?v3 B_a_fun_stream$ ))(! (= (st_ap$a (sCons$c ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$a (fun_app$d ?v0 ?v2 )(st_ap$a ?v1 ?v3 ))):pattern ((st_ap$a (sCons$c ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a97 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_b_fun_stream$ )(?v2 B_a_fun$ )(?v3 B_a_fun_stream$ ))(! (= (st_ap$b (sCons$d ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$b (fun_app$c ?v0 ?v2 )(st_ap$b ?v1 ?v3 ))):pattern ((st_ap$b (sCons$d ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a98 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_a_fun_stream$ )(?v2 B_a_fun$ )(?v3 B_a_fun_stream$ ))(! (= (st_ap$c (sCons$e ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$ (fun_app$e ?v0 ?v2 )(st_ap$c ?v1 ?v3 ))):pattern ((st_ap$c (sCons$e ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a99 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_b_a_fun_fun_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (st_ap$d (sCons$f ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$a (fun_app$b ?v0 ?v2 )(st_ap$d ?v1 ?v3 ))):pattern ((st_ap$d (sCons$f ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a100 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (st_ap$e (sCons$g ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$b (fun_app$a ?v0 ?v2 )(st_ap$e ?v1 ?v3 ))):pattern ((st_ap$e (sCons$g ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a101 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_b_a_fun_fun_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (st_ap$f (sCons$h ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$a (fun_app$g ?v0 ?v2 )(st_ap$f ?v1 ?v3 ))):pattern ((st_ap$f (sCons$h ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a102 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (st_ap$g (sCons$i ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$b (fun_app$f ?v0 ?v2 )(st_ap$g ?v1 ?v3 ))):pattern ((st_ap$g (sCons$i ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a103 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (st_ap$h (sCons$j ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$ (fun_app$h ?v0 ?v2 )(st_ap$h ?v1 ?v3 ))):pattern ((st_ap$h (sCons$j ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a104 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (st_ap$ (sCons$a ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$ (fun_app$i ?v0 ?v2 )(st_ap$ ?v1 ?v3 ))):pattern ((st_ap$ (sCons$a ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a105 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$b ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a106 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a107 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a108 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A$ ))(= (traverse_tree$c ?v0 (tree_pure$a ?v1 ))(tree_pure$a ?v1 ))):named a109 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun$ ))(= (traverse_tree$e ?v0 (tree_pure$f ?v1 ))(tree_pure$f ?v1 ))):named a110 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B$ ))(= (traverse_tree$b ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a111 ))
(assert (! (forall ((?v0 B$ ))(= (tree_chop$b (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a112 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (tree_chop$e (tree_pure$f ?v0 ))(tree_pure$f ?v0 ))):named a113 ))
(assert (! (forall ((?v0 A$ ))(= (tree_chop$c (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a114 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tree_pure$ ?v0 )(tree_pure$ ?v1 ))(= ?v0 ?v1 ))):named a115 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun$ ))(= (= (tree_pure$f ?v0 )(tree_pure$f ?v1 ))(= ?v0 ?v1 ))):named a116 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (tree_pure$a ?v0 )(tree_pure$a ?v1 ))(= ?v0 ?v1 ))):named a117 ))
(check-sat )
;(get-unsat-core )
