;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Nat_nat_prod$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod$ 0)
(declare-fun fst$ (Nat_nat_prod$)Nat$)
(declare-fun snd$ (Nat_nat_prod$)Nat$)
(declare-fun pair$ (Nat$ Nat$ )Nat_nat_prod$)
(declare-fun fst$a (Nat_nat_prod_nat_nat_prod_prod$)Nat_nat_prod$)
(declare-fun snd$a (Nat_nat_prod_nat_nat_prod_prod$)Nat_nat_prod$)
(declare-fun pair$a (Nat_nat_prod$ Nat_nat_prod$ )Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun a$ ()Nat$ )
(declare-fun b$ ()Nat$ )
(declare-fun c$ ()Nat$ )
(declare-fun x$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun y$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun aa$ ()Nat$ )
(declare-fun ba$ ()Nat$ )
(declare-fun bb$ ()Nat$ )
(declare-fun ca$ ()Nat$ )
(declare-fun baa$ ()Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun minus$ (Nat$ )Nat_nat_fun$ )
(declare-fun times$ (Nat$ Nat$ )Nat$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$b (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(assert (! (not (and (or (fun_app$ (less$ zero$ )bb$ )(fun_app$ (less$ zero$ )ca$ ))(fun_app$ (less$ (times$ b$ ba$ ))(times$ a$ c$ )))):named a0 ))
(assert (! (= (fun_app$a (minus$ (times$ a$ c$ ))(times$ ba$ b$ ))(suc$ zero$ )):named a1 ))
(assert (! (= (fun_app$a (minus$ (times$ aa$ ca$ ))(times$ baa$ bb$ ))(suc$ zero$ )):named a2 ))
(assert (! (or (fun_app$ (less$ zero$ )b$ )(fun_app$ (less$ zero$ )c$ )):named a3 ))
(assert (! (or (and (fun_app$ (less$ zero$ )b$ )(fun_app$ (less$ zero$ )aa$ ))(or (and (fun_app$ (less$ zero$ )c$ )(or (fun_app$ (less$ zero$ )aa$ )(fun_app$ (less$ zero$ )bb$ )))(or (and (fun_app$ (less$ zero$ )b$ )(fun_app$ (less$ zero$ )baa$ ))(and (fun_app$ (less$ zero$ )c$ )(or (fun_app$ (less$ zero$ )baa$ )(fun_app$ (less$ zero$ )ca$ )))))):named a4 ))
(assert (! (= x$ (pair$a (pair$ a$ b$ )(pair$ ba$ c$ ))):named a5 ))
(assert (! (= y$ (pair$a (pair$ aa$ bb$ )(pair$ baa$ ca$ ))):named a6 ))
(assert (! (= bb$ zero$ ):named a7 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$ (fun_app$b ?v0 zero$ )?v3 ))(and (forall ((?v3 Nat$ ))(fun_app$ (fun_app$b ?v0 ?v3 )zero$ ))(and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (= ?v3 ?v4 )(fun_app$ (fun_app$b ?v0 (suc$ ?v3 ))(suc$ ?v4 ))))(and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (and (fun_app$ (less$ ?v3 )?v4 )(fun_app$ (fun_app$b ?v0 (suc$ ?v3 ))(fun_app$a (minus$ ?v4 )?v3 )))(fun_app$ (fun_app$b ?v0 (suc$ ?v3 ))(suc$ ?v4 ))))(forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (and (fun_app$ (less$ ?v4 )?v3 )(fun_app$ (fun_app$b ?v0 (fun_app$a (minus$ ?v3 )?v4 ))(suc$ ?v4 )))(fun_app$ (fun_app$b ?v0 (suc$ ?v3 ))(suc$ ?v4 ))))))))(fun_app$ (fun_app$b ?v0 ?v1 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 Nat_nat_prod$ ))(=> (and (forall ((?v1 Nat$ ))(=> (= ?v0 (pair$ zero$ ?v1 ))false ))(and (forall ((?v1 Nat$ ))(=> (= ?v0 (pair$ ?v1 zero$ ))false ))(and (forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (= ?v1 ?v2 )(= ?v0 (pair$ (suc$ ?v1 )(suc$ ?v2 ))))false ))(and (forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$ (less$ ?v1 )?v2 )(= ?v0 (pair$ (suc$ ?v1 )(suc$ ?v2 ))))false ))(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$ (less$ ?v2 )?v1 )(= ?v0 (pair$ (suc$ ?v1 )(suc$ ?v2 ))))false ))))))false )):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$ (less$ zero$ )?v0 )(= (suc$ (fun_app$a (minus$ ?v0 )(suc$ zero$ )))?v0 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$ (less$ zero$ )(fun_app$a (minus$ ?v0 )?v1 ))(fun_app$ (less$ ?v1 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (less$ (times$ ?v0 ?v1 ))(times$ ?v0 ?v2 ))(and (fun_app$ (less$ zero$ )?v0 )(fun_app$ (less$ ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (less$ (times$ ?v0 ?v1 ))(times$ ?v2 ?v1 ))(and (fun_app$ (less$ zero$ )?v1 )(fun_app$ (less$ ?v0 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$ (less$ zero$ )(times$ ?v0 ?v1 ))(and (fun_app$ (less$ zero$ )?v0 )(fun_app$ (less$ zero$ )?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (times$ ?v0 ?v1 )(suc$ zero$ ))(and (= ?v0 (suc$ zero$ ))(= ?v1 (suc$ zero$ ))))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ zero$ )(times$ ?v0 ?v1 ))(and (= ?v0 (suc$ zero$ ))(= ?v1 (suc$ zero$ ))))):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (less$ ?v0 )(suc$ zero$ ))(= ?v0 zero$ )):pattern ((less$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$ (less$ zero$ )(suc$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$a (minus$ (fun_app$a (minus$ (suc$ ?v0 ))?v1 ))(suc$ ?v2 ))(fun_app$a (minus$ (fun_app$a (minus$ ?v0 )?v1 ))?v2 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$a (minus$ (suc$ ?v0 ))(suc$ ?v1 ))(fun_app$a (minus$ ?v0 )?v1 )):pattern ((fun_app$a (minus$ (suc$ ?v0 ))(suc$ ?v1 ))))):named a20 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (minus$ ?v0 )?v0 )zero$ ):pattern ((minus$ ?v0 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a23 ))
(check-sat )
;(get-unsat-core )
