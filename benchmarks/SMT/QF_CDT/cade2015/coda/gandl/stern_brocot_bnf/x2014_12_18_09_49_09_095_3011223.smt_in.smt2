;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-codatatypes ()((Int_tree$ (node$ (root$ Int )(left$ Int_tree$ )(right$ Int_tree$ )))))
(declare-sort Num$ 0)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-codatatypes ()((Int_tree_tree$ (node$a (root$a Int_tree$ )(left$a Int_tree_tree$ )(right$a Int_tree_tree$ )))(Int_tree_tree_tree$ (node$b (root$b Int_tree_tree$ )(left$b Int_tree_tree_tree$ )(right$b Int_tree_tree_tree$ )))(Int_tree_tree_tree_tree$ (node$c (root$c Int_tree_tree_tree$ )(left$c Int_tree_tree_tree_tree$ )(right$c Int_tree_tree_tree_tree$ )))))
(declare-fun den$ ()Int_tree$ )
(declare-fun num$ ()Int_tree$ )
(declare-fun plus$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun minus$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun plus$a (Int_tree_tree_tree$ Int_tree_tree_tree$ )Int_tree_tree_tree$ )
(declare-fun plus$b (Int_tree_tree$ Int_tree_tree$ )Int_tree_tree$ )
(declare-fun plus$c (Int_tree_tree_tree_tree$ Int_tree_tree_tree_tree$ )Int_tree_tree_tree_tree$ )
(declare-fun times$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun minus$a (Int_tree_tree_tree$ Int_tree_tree_tree$ )Int_tree_tree_tree$ )
(declare-fun minus$b (Int_tree_tree$ Int_tree_tree$ )Int_tree_tree$ )
(declare-fun minus$c (Int_tree_tree_tree_tree$ Int_tree_tree_tree_tree$ )Int_tree_tree_tree_tree$ )
(declare-fun times$a (Int_tree_tree_tree$ Int_tree_tree_tree$ )Int_tree_tree_tree$ )
(declare-fun times$b (Int_tree_tree$ Int_tree_tree$ )Int_tree_tree$ )
(declare-fun times$c (Int_tree_tree_tree_tree$ Int_tree_tree_tree_tree$ )Int_tree_tree_tree_tree$ )
(declare-fun times$d (Int Int )Int )
(declare-fun numeral$ (Num$ )Int_tree$ )
(declare-fun numeral$a (Num$ )Int_tree_tree_tree$ )
(declare-fun numeral$b (Num$ )Int_tree_tree$ )
(declare-fun numeral$c (Num$ )Int_tree_tree_tree_tree$ )
(declare-fun numeral$d (Num$ )Int )
(declare-fun tree_chop$ (Int_tree$ )Int_tree$ )
(declare-fun tree_chop$a (Int_tree_tree_tree$ )Int_tree_tree_tree$ )
(declare-fun tree_chop$b (Int_tree_tree$ )Int_tree_tree$ )
(assert (! (not (and (= (root$ (minus$ (plus$ num$ den$ )(tree_chop$ den$ )))(root$ (node$ 0 (times$ (numeral$ (bit0$ one$ ))num$ )(minus$ (plus$ num$ den$ )(tree_chop$ den$ )))))(and (= (left$ (minus$ (plus$ num$ den$ )(tree_chop$ den$ )))(left$ (node$ 0 (times$ (numeral$ (bit0$ one$ ))num$ )(minus$ (plus$ num$ den$ )(tree_chop$ den$ )))))(= (right$ (minus$ (plus$ num$ den$ )(tree_chop$ den$ )))(right$ (node$ 0 (times$ (numeral$ (bit0$ one$ ))num$ )(minus$ (plus$ num$ den$ )(tree_chop$ den$ )))))))):named a0 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree_tree$ )(?v2 Int_tree_tree$ )(?v3 Int_tree$ )(?v4 Int_tree_tree$ )(?v5 Int_tree_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a1 ))
(assert (! (forall ((?v0 Int )(?v1 Int_tree$ )(?v2 Int_tree$ )(?v3 Int )(?v4 Int_tree$ )(?v5 Int_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a2 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ )(?v1 Int_tree_tree_tree$ ))(= (left$b (plus$a ?v0 ?v1 ))(plus$a (left$b ?v0 )(left$b ?v1 )))):named a3 ))
(assert (! (forall ((?v0 Int_tree_tree$ )(?v1 Int_tree_tree$ ))(= (left$a (plus$b ?v0 ?v1 ))(plus$b (left$a ?v0 )(left$a ?v1 )))):named a4 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (left$ (plus$ ?v0 ?v1 ))(plus$ (left$ ?v0 )(left$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ )(?v1 Int_tree_tree_tree$ ))(= (right$b (plus$a ?v0 ?v1 ))(plus$a (right$b ?v0 )(right$b ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Int_tree_tree$ )(?v1 Int_tree_tree$ ))(= (right$a (plus$b ?v0 ?v1 ))(plus$b (right$a ?v0 )(right$a ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (right$ (plus$ ?v0 ?v1 ))(plus$ (right$ ?v0 )(right$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ )(?v1 Int_tree_tree_tree$ ))(= (left$b (times$a ?v0 ?v1 ))(times$a (left$b ?v0 )(left$b ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Int_tree_tree$ )(?v1 Int_tree_tree$ ))(= (left$a (times$b ?v0 ?v1 ))(times$b (left$a ?v0 )(left$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (left$ (times$ ?v0 ?v1 ))(times$ (left$ ?v0 )(left$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ )(?v1 Int_tree_tree_tree$ ))(= (right$b (times$a ?v0 ?v1 ))(times$a (right$b ?v0 )(right$b ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Int_tree_tree$ )(?v1 Int_tree_tree$ ))(= (right$a (times$b ?v0 ?v1 ))(times$b (right$a ?v0 )(right$a ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (right$ (times$ ?v0 ?v1 ))(times$ (right$ ?v0 )(right$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Num$ ))(= (left$b (numeral$a ?v0 ))(numeral$a ?v0 ))):named a15 ))
(assert (! (forall ((?v0 Num$ ))(= (left$a (numeral$b ?v0 ))(numeral$b ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Num$ ))(= (left$ (numeral$ ?v0 ))(numeral$ ?v0 ))):named a17 ))
(assert (! (forall ((?v0 Num$ ))(= (right$b (numeral$a ?v0 ))(numeral$a ?v0 ))):named a18 ))
(assert (! (forall ((?v0 Num$ ))(= (right$a (numeral$b ?v0 ))(numeral$b ?v0 ))):named a19 ))
(assert (! (forall ((?v0 Num$ ))(= (right$ (numeral$ ?v0 ))(numeral$ ?v0 ))):named a20 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ )(?v1 Int_tree_tree_tree$ ))(= (left$b (minus$a ?v0 ?v1 ))(minus$a (left$b ?v0 )(left$b ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Int_tree_tree$ )(?v1 Int_tree_tree$ ))(= (left$a (minus$b ?v0 ?v1 ))(minus$b (left$a ?v0 )(left$a ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (left$ (minus$ ?v0 ?v1 ))(minus$ (left$ ?v0 )(left$ ?v1 )))):named a23 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ )(?v1 Int_tree_tree_tree$ ))(= (right$b (minus$a ?v0 ?v1 ))(minus$a (right$b ?v0 )(right$b ?v1 )))):named a24 ))
(assert (! (forall ((?v0 Int_tree_tree$ )(?v1 Int_tree_tree$ ))(= (right$a (minus$b ?v0 ?v1 ))(minus$b (right$a ?v0 )(right$a ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (right$ (minus$ ?v0 ?v1 ))(minus$ (right$ ?v0 )(right$ ?v1 )))):named a26 ))
(assert (! (forall ((?v0 Int_tree_tree_tree_tree$ )(?v1 Int_tree_tree_tree_tree$ ))(= (root$c (plus$c ?v0 ?v1 ))(plus$a (root$c ?v0 )(root$c ?v1 )))):named a27 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ )(?v1 Int_tree_tree_tree$ ))(= (root$b (plus$a ?v0 ?v1 ))(plus$b (root$b ?v0 )(root$b ?v1 )))):named a28 ))
(assert (! (forall ((?v0 Int_tree_tree$ )(?v1 Int_tree_tree$ ))(= (root$a (plus$b ?v0 ?v1 ))(plus$ (root$a ?v0 )(root$a ?v1 )))):named a29 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (root$ (plus$ ?v0 ?v1 ))(+ (root$ ?v0 )(root$ ?v1 )))):named a30 ))
(assert (! (forall ((?v0 Int_tree_tree_tree_tree$ )(?v1 Int_tree_tree_tree_tree$ ))(= (root$c (times$c ?v0 ?v1 ))(times$a (root$c ?v0 )(root$c ?v1 )))):named a31 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ )(?v1 Int_tree_tree_tree$ ))(= (root$b (times$a ?v0 ?v1 ))(times$b (root$b ?v0 )(root$b ?v1 )))):named a32 ))
(assert (! (forall ((?v0 Int_tree_tree$ )(?v1 Int_tree_tree$ ))(= (root$a (times$b ?v0 ?v1 ))(times$ (root$a ?v0 )(root$a ?v1 )))):named a33 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (root$ (times$ ?v0 ?v1 ))(times$d (root$ ?v0 )(root$ ?v1 )))):named a34 ))
(assert (! (forall ((?v0 Num$ ))(= (root$c (numeral$c ?v0 ))(numeral$a ?v0 ))):named a35 ))
(assert (! (forall ((?v0 Num$ ))(= (root$b (numeral$a ?v0 ))(numeral$b ?v0 ))):named a36 ))
(assert (! (forall ((?v0 Num$ ))(= (root$a (numeral$b ?v0 ))(numeral$ ?v0 ))):named a37 ))
(assert (! (forall ((?v0 Num$ ))(= (root$ (numeral$ ?v0 ))(numeral$d ?v0 ))):named a38 ))
(assert (! (= (left$ num$ )num$ ):named a39 ))
(assert (! (forall ((?v0 Int_tree_tree_tree_tree$ )(?v1 Int_tree_tree_tree_tree$ ))(= (root$c (minus$c ?v0 ?v1 ))(minus$a (root$c ?v0 )(root$c ?v1 )))):named a40 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ )(?v1 Int_tree_tree_tree$ ))(= (root$b (minus$a ?v0 ?v1 ))(minus$b (root$b ?v0 )(root$b ?v1 )))):named a41 ))
(assert (! (forall ((?v0 Int_tree_tree$ )(?v1 Int_tree_tree$ ))(= (root$a (minus$b ?v0 ?v1 ))(minus$ (root$a ?v0 )(root$a ?v1 )))):named a42 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (root$ (minus$ ?v0 ?v1 ))(- (root$ ?v0 )(root$ ?v1 )))):named a43 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ ))(= (node$b (root$b ?v0 )(left$b ?v0 )(right$b ?v0 ))?v0 )):named a44 ))
(assert (! (forall ((?v0 Int_tree_tree$ ))(= (node$a (root$a ?v0 )(left$a ?v0 )(right$a ?v0 ))?v0 )):named a45 ))
(assert (! (forall ((?v0 Int_tree$ ))(= (node$ (root$ ?v0 )(left$ ?v0 )(right$ ?v0 ))?v0 )):named a46 ))
(assert (! (= (right$ num$ )(plus$ num$ den$ )):named a47 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ ))(= (root$b (tree_chop$a ?v0 ))(root$b (left$b ?v0 )))):named a48 ))
(assert (! (forall ((?v0 Int_tree_tree$ ))(= (root$a (tree_chop$b ?v0 ))(root$a (left$a ?v0 )))):named a49 ))
(assert (! (forall ((?v0 Int_tree$ ))(= (root$ (tree_chop$ ?v0 ))(root$ (left$ ?v0 )))):named a50 ))
(check-sat )
;(get-unsat-core )
