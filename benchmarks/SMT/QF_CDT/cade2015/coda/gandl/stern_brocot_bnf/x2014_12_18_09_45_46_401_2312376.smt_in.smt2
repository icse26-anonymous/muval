;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_a_fun_bool_fun$ 0 )
(declare-sort A_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_fun$ 0 )
(declare-sort A_a_a_fun_fun_bool_fun$ 0 )
(declare-sort A_a_fun_a_fun_bool_fun$ 0 )
(declare-sort A_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_bool_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(A_a_fun_a_a_fun_fun_tree$ (node$a (select$ A_a_fun_a_a_fun_fun$ )(selecta$ A_a_fun_a_a_fun_fun_tree$ )(selectb$ A_a_fun_a_a_fun_fun_tree$ )))(A_a_fun_a_fun_tree$ (node$b (selectc$ A_a_fun_a_fun$ )(selectd$ A_a_fun_a_fun_tree$ )(selecte$ A_a_fun_a_fun_tree$ )))(A_a_a_fun_fun_tree$ (node$c (selectf$ A_a_a_fun_fun$ )(selectg$ A_a_a_fun_fun_tree$ )(selecth$ A_a_a_fun_fun_tree$ )))(A_a_fun_tree$ (node$d (selecti$ A_a_fun$ )(selectj$ A_a_fun_tree$ )(selectk$ A_a_fun_tree$ )))(A_a_a_fun_a_fun_fun_tree$ (node$e (selectl$ A_a_a_fun_a_fun_fun$ )(selectm$ A_a_a_fun_a_fun_fun_tree$ )(selectn$ A_a_a_fun_a_fun_fun_tree$ )))(A_a_a_a_fun_fun_fun_tree$ (node$f (selecto$ A_a_a_a_fun_fun_fun$ )(selectp$ A_a_a_a_fun_fun_fun_tree$ )(selectq$ A_a_a_a_fun_fun_fun_tree$ )))(A_a_fun_a_fun_a_fun_tree$ (node$g (selectr$ A_a_fun_a_fun_a_fun$ )(selects$ A_a_fun_a_fun_a_fun_tree$ )(selectt$ A_a_fun_a_fun_a_fun_tree$ )))(A_a_a_fun_fun_a_fun_tree$ (node$h (selectu$ A_a_a_fun_fun_a_fun$ )(selectv$ A_a_a_fun_fun_a_fun_tree$ )(selectw$ A_a_a_fun_fun_a_fun_tree$ )))(A_a_a_fun_a_a_fun_fun_fun_tree$ (node$i (selectx$ A_a_a_fun_a_a_fun_fun_fun$ )(selecty$ A_a_a_fun_a_a_fun_fun_fun_tree$ )(selectz$ A_a_a_fun_a_a_fun_fun_fun_tree$ )))(A_a_fun_a_a_fun_a_fun_fun_tree$ (node$j (selecua$ A_a_fun_a_a_fun_a_fun_fun$ )(selecub$ A_a_fun_a_a_fun_a_fun_fun_tree$ )(selecuc$ A_a_fun_a_a_fun_a_fun_fun_tree$ )))))
(declare-fun f$ (A$ )A_a_fun$ )
(declare-fun l$ ()A$ )
(declare-fun r$ ()A$ )
(declare-fun uu$ ()A_a_fun$ )
(declare-fun uua$ ()A_a_fun$ )
(declare-fun uub$ ()A_a_fun_a_a_fun_fun$ )
(declare-fun uuc$ ()A_a_fun$ )
(declare-fun comp$ (A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun comp$a (A_a_fun_a_fun$ )A_a_fun_a_a_fun_fun_a_a_fun_a_fun_fun$ )
(declare-fun comp$b (A_a_fun$ )A_a_fun_a_fun_a_a_fun_a_fun_fun$ )
(declare-fun comp$c (A_a_a_fun_fun$ )A_a_fun_a_a_a_fun_fun_fun$ )
(declare-fun comp$d (A_a_fun_a_a_fun_fun$ )A_a_a_fun_fun_a_a_a_fun_fun_fun$ )
(declare-fun comp$e (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun epsilon$ ()A$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun tree_ap$ (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun fun_app$a (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$c (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$ )A_a_fun_a_fun$ )
(declare-fun fun_app$d (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$ )A_a_a_fun_fun$ )
(declare-fun fun_app$e (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$f (A_a_fun_a_fun$ A_a_fun$ )A$ )
(declare-fun fun_app$g (A_a_a_fun_a_fun_fun$ A$ )A_a_fun_a_fun$ )
(declare-fun fun_app$h (A_a_a_a_fun_fun_fun$ A$ )A_a_a_fun_fun$ )
(declare-fun fun_app$i (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun$ )A$ )
(declare-fun fun_app$j (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun$ )A$ )
(declare-fun fun_app$k (A_a_a_fun_a_a_fun_fun_fun$ A$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$l (A_a_fun_a_a_fun_a_fun_fun$ A_a_fun$ )A_a_fun_a_fun$ )
(declare-fun fun_app$m (A_a_fun_a_a_fun_fun_bool_fun$ A_a_fun_a_a_fun_fun$ )Bool )
(declare-fun fun_app$n (A_a_fun_a_fun_bool_fun$ A_a_fun_a_fun$ )Bool )
(declare-fun fun_app$o (A_a_a_fun_fun_bool_fun$ A_a_a_fun_fun$ )Bool )
(declare-fun fun_app$p (A_a_fun_bool_fun$ A_a_fun$ )Bool )
(declare-fun fun_app$q (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$r (A_a_fun_a_a_fun_fun_a_a_fun_a_fun_fun$ A_a_fun_a_a_fun_fun$ )A_a_fun_a_fun$ )
(declare-fun fun_app$s (A_a_fun_a_a_a_fun_fun_fun$ A_a_fun$ )A_a_a_fun_fun$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun tree_ap$a (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$b (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$c (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$d (A_a_a_fun_a_fun_fun_tree$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_ap$e (A_a_a_a_fun_fun_fun_tree$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_ap$f (A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$g (A_a_a_fun_fun_a_fun_tree$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun tree_ap$h (A_a_a_fun_a_a_fun_fun_fun_tree$ A_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$i (A_a_fun_a_a_fun_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun map_tree$a (A_a_a_fun_fun$ A_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$b (A_a_fun_a_fun$ A_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$c (A_a_fun_a_a_fun_fun$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$d (A_a_a_fun_a_fun_fun$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun map_tree$e (A_a_a_a_fun_fun_fun$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun map_tree$f (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$g (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun map_tree$h (A_a_a_fun_a_a_fun_fun_fun$ A_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun map_tree$i (A_a_fun_a_a_fun_a_fun_fun$ A_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun map_tree$j (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun map_tree$k (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun map_tree$l (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun pred_tree$ (A_a_fun_a_a_fun_fun_bool_fun$ A_a_fun_a_a_fun_fun_tree$ )Bool )
(declare-fun tree_pure$ (A_a_fun$ )A_a_fun_tree$ )
(declare-fun pred_tree$a (A_a_fun_a_fun_bool_fun$ A_a_fun_a_fun_tree$ )Bool )
(declare-fun pred_tree$b (A_a_a_fun_fun_bool_fun$ A_a_a_fun_fun_tree$ )Bool )
(declare-fun pred_tree$c (A_a_fun_bool_fun$ A_a_fun_tree$ )Bool )
(declare-fun pred_tree$d (A_bool_fun$ A_tree$ )Bool )
(declare-fun tree_pure$a (A$ )A_tree$ )
(declare-fun tree_iterate$ (A_a_fun$ A_a_fun$ A$ )A_tree$ )
(declare-fun tree_recurse$ (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_iterate$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_iterate$b (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_iterate$c (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_iterate$d (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_recurse$a (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_recurse$b (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_recurse$c (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_recurse$d (A_a_fun$ A_a_fun$ A$ )A_tree$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uua$ ?v0 )(fun_app$ (f$ ?v0 )r$ )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$ (f$ ?v0 )l$ )):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$a uub$ ?v0 )?v0 ):pattern ((fun_app$a uub$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uuc$ ?v0 )?v0 ):pattern ((fun_app$ uuc$ ?v0 )))):named a3 ))
(assert (! (not (= (node$ epsilon$ (tree_iterate$ uu$ uua$ (fun_app$ (f$ epsilon$ )l$ ))(tree_iterate$ uu$ uua$ (fun_app$ (f$ epsilon$ )r$ )))(node$ epsilon$ (map_tree$ (f$ l$ )(tree_iterate$ uu$ uua$ epsilon$ ))(map_tree$ (f$ r$ )(tree_iterate$ uu$ uua$ epsilon$ ))))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (fun_app$ (f$ (fun_app$ (f$ ?v0 )?v1 ))?v2 )(fun_app$ (f$ ?v0 )(fun_app$ (f$ ?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun_tree$ )(?v2 A_a_fun_a_a_fun_fun_tree$ )(?v3 A_a_fun_a_a_fun_fun$ )(?v4 A_a_fun_a_a_fun_fun_tree$ )(?v5 A_a_fun_a_a_fun_fun_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a6 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_fun_tree$ )(?v2 A_a_fun_a_fun_tree$ )(?v3 A_a_fun_a_fun$ )(?v4 A_a_fun_a_fun_tree$ )(?v5 A_a_fun_a_fun_tree$ ))(= (= (node$b ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a7 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_a_a_fun_fun_tree$ )(?v2 A_a_a_fun_fun_tree$ )(?v3 A_a_a_fun_fun$ )(?v4 A_a_a_fun_fun_tree$ )(?v5 A_a_a_fun_fun_tree$ ))(= (= (node$c ?v0 ?v1 ?v2 )(node$c ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(= (= (node$d ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a10 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$ (f$ ?v0 )epsilon$ )?v0 )):named a11 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$ (f$ epsilon$ )?v0 )?v0 )):named a12 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun$ ))(= (tree_iterate$a ?v0 ?v1 ?v2 )(node$a ?v2 (tree_iterate$a ?v0 ?v1 (fun_app$b ?v0 ?v2 ))(tree_iterate$a ?v0 ?v1 (fun_app$b ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v1 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v2 A_a_fun_a_fun$ ))(= (tree_iterate$b ?v0 ?v1 ?v2 )(node$b ?v2 (tree_iterate$b ?v0 ?v1 (fun_app$c ?v0 ?v2 ))(tree_iterate$b ?v0 ?v1 (fun_app$c ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun$ )(?v1 A_a_a_fun_fun_a_a_a_fun_fun_fun$ )(?v2 A_a_a_fun_fun$ ))(= (tree_iterate$c ?v0 ?v1 ?v2 )(node$c ?v2 (tree_iterate$c ?v0 ?v1 (fun_app$d ?v0 ?v2 ))(tree_iterate$c ?v0 ?v1 (fun_app$d ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun$ ))(= (tree_iterate$d ?v0 ?v1 ?v2 )(node$d ?v2 (tree_iterate$d ?v0 ?v1 (fun_app$a ?v0 ?v2 ))(tree_iterate$d ?v0 ?v1 (fun_app$a ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (tree_iterate$ ?v0 ?v1 ?v2 )(node$ ?v2 (tree_iterate$ ?v0 ?v1 (fun_app$ ?v0 ?v2 ))(tree_iterate$ ?v0 ?v1 (fun_app$ ?v1 ?v2 ))))):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (map_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$ ?v0 ?v1 )(map_tree$ ?v0 ?v2 )(map_tree$ ?v0 ?v3 ))):pattern ((map_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a18 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (map_tree$a ?v0 (node$ ?v1 ?v2 ?v3 ))(node$d (fun_app$e ?v0 ?v1 )(map_tree$a ?v0 ?v2 )(map_tree$a ?v0 ?v3 ))):pattern ((map_tree$a ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a19 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun_tree$ ))(! (= (map_tree$b ?v0 (node$d ?v1 ?v2 ?v3 ))(node$ (fun_app$f ?v0 ?v1 )(map_tree$b ?v0 ?v2 )(map_tree$b ?v0 ?v3 ))):pattern ((map_tree$b ?v0 (node$d ?v1 ?v2 ?v3 ))))):named a20 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun_tree$ ))(! (= (map_tree$c ?v0 (node$d ?v1 ?v2 ?v3 ))(node$d (fun_app$a ?v0 ?v1 )(map_tree$c ?v0 ?v2 )(map_tree$c ?v0 ?v3 ))):pattern ((map_tree$c ?v0 (node$d ?v1 ?v2 ?v3 ))))):named a21 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (map_tree$d ?v0 (node$ ?v1 ?v2 ?v3 ))(node$b (fun_app$g ?v0 ?v1 )(map_tree$d ?v0 ?v2 )(map_tree$d ?v0 ?v3 ))):pattern ((map_tree$d ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a22 ))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (map_tree$e ?v0 (node$ ?v1 ?v2 ?v3 ))(node$c (fun_app$h ?v0 ?v1 )(map_tree$e ?v0 ?v2 )(map_tree$e ?v0 ?v3 ))):pattern ((map_tree$e ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a23 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$ )(?v1 A_a_fun_a_fun$ )(?v2 A_a_fun_a_fun_tree$ )(?v3 A_a_fun_a_fun_tree$ ))(! (= (map_tree$f ?v0 (node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$i ?v0 ?v1 )(map_tree$f ?v0 ?v2 )(map_tree$f ?v0 ?v3 ))):pattern ((map_tree$f ?v0 (node$b ?v1 ?v2 ?v3 ))))):named a24 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$ )(?v1 A_a_a_fun_fun$ )(?v2 A_a_a_fun_fun_tree$ )(?v3 A_a_a_fun_fun_tree$ ))(! (= (map_tree$g ?v0 (node$c ?v1 ?v2 ?v3 ))(node$ (fun_app$j ?v0 ?v1 )(map_tree$g ?v0 ?v2 )(map_tree$g ?v0 ?v3 ))):pattern ((map_tree$g ?v0 (node$c ?v1 ?v2 ?v3 ))))):named a25 ))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (map_tree$h ?v0 (node$ ?v1 ?v2 ?v3 ))(node$a (fun_app$k ?v0 ?v1 )(map_tree$h ?v0 ?v2 )(map_tree$h ?v0 ?v3 ))):pattern ((map_tree$h ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a26 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun_tree$ ))(! (= (map_tree$i ?v0 (node$d ?v1 ?v2 ?v3 ))(node$b (fun_app$l ?v0 ?v1 )(map_tree$i ?v0 ?v2 )(map_tree$i ?v0 ?v3 ))):pattern ((map_tree$i ?v0 (node$d ?v1 ?v2 ?v3 ))))):named a27 ))
(assert (! (forall ((?v0 A_a_fun_tree$ ))(= (map_tree$c uub$ ?v0 )?v0 )):named a28 ))
(assert (! (forall ((?v0 A_tree$ ))(= (map_tree$ uuc$ ?v0 )?v0 )):named a29 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$ ))(=> (forall ((?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun_tree$ )(?v3 A_a_fun_a_a_fun_fun_tree$ ))(=> (= ?v0 (node$a ?v1 ?v2 ?v3 ))false ))false )):named a30 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$ ))(=> (forall ((?v1 A_a_fun_a_fun$ )(?v2 A_a_fun_a_fun_tree$ )(?v3 A_a_fun_a_fun_tree$ ))(=> (= ?v0 (node$b ?v1 ?v2 ?v3 ))false ))false )):named a31 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ ))(=> (forall ((?v1 A_a_a_fun_fun$ )(?v2 A_a_a_fun_fun_tree$ )(?v3 A_a_a_fun_fun_tree$ ))(=> (= ?v0 (node$c ?v1 ?v2 ?v3 ))false ))false )):named a32 ))
(assert (! (forall ((?v0 A_a_fun_tree$ ))(=> (forall ((?v1 A_a_fun$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun_tree$ ))(=> (= ?v0 (node$d ?v1 ?v2 ?v3 ))false ))false )):named a33 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (forall ((?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false ))false )):named a34 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun$ ))(! (= (tree_recurse$ ?v0 ?v1 ?v2 )(node$a ?v2 (map_tree$j ?v0 (tree_recurse$ ?v0 ?v1 ?v2 ))(map_tree$j ?v1 (tree_recurse$ ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$ ?v0 ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v1 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v2 A_a_fun_a_fun$ ))(! (= (tree_recurse$a ?v0 ?v1 ?v2 )(node$b ?v2 (map_tree$k ?v0 (tree_recurse$a ?v0 ?v1 ?v2 ))(map_tree$k ?v1 (tree_recurse$a ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$a ?v0 ?v1 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun$ )(?v1 A_a_a_fun_fun_a_a_a_fun_fun_fun$ )(?v2 A_a_a_fun_fun$ ))(! (= (tree_recurse$b ?v0 ?v1 ?v2 )(node$c ?v2 (map_tree$l ?v0 (tree_recurse$b ?v0 ?v1 ?v2 ))(map_tree$l ?v1 (tree_recurse$b ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$b ?v0 ?v1 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun$ ))(! (= (tree_recurse$c ?v0 ?v1 ?v2 )(node$d ?v2 (map_tree$c ?v0 (tree_recurse$c ?v0 ?v1 ?v2 ))(map_tree$c ?v1 (tree_recurse$c ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$c ?v0 ?v1 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (tree_recurse$d ?v0 ?v1 ?v2 )(node$ ?v2 (map_tree$ ?v0 (tree_recurse$d ?v0 ?v1 ?v2 ))(map_tree$ ?v1 (tree_recurse$d ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$d ?v0 ?v1 ?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(?v3 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ ))(=> (= ?v0 (node$a ?v1 (map_tree$j ?v2 ?v0 )(map_tree$j ?v3 ?v0 )))(= ?v0 (tree_recurse$ ?v2 ?v3 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$ )(?v1 A_a_fun_a_fun$ )(?v2 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v3 A_a_fun_a_fun_a_a_fun_a_fun_fun$ ))(=> (= ?v0 (node$b ?v1 (map_tree$k ?v2 ?v0 )(map_tree$k ?v3 ?v0 )))(= ?v0 (tree_recurse$a ?v2 ?v3 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_a_a_fun_fun$ )(?v2 A_a_a_fun_fun_a_a_a_fun_fun_fun$ )(?v3 A_a_a_fun_fun_a_a_a_fun_fun_fun$ ))(=> (= ?v0 (node$c ?v1 (map_tree$l ?v2 ?v0 )(map_tree$l ?v3 ?v0 )))(= ?v0 (tree_recurse$b ?v2 ?v3 ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun$ )(?v2 A_a_fun_a_a_fun_fun$ )(?v3 A_a_fun_a_a_fun_fun$ ))(=> (= ?v0 (node$d ?v1 (map_tree$c ?v2 ?v0 )(map_tree$c ?v3 ?v0 )))(= ?v0 (tree_recurse$c ?v2 ?v3 ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (= ?v0 (node$ ?v1 (map_tree$ ?v2 ?v0 )(map_tree$ ?v3 ?v0 )))(= ?v0 (tree_recurse$d ?v2 ?v3 ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_bool_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun_tree$ )(?v3 A_a_fun_a_a_fun_fun_tree$ ))(! (= (pred_tree$ ?v0 (node$a ?v1 ?v2 ?v3 ))(and (fun_app$m ?v0 ?v1 )(and (pred_tree$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 )))):pattern ((pred_tree$ ?v0 (node$a ?v1 ?v2 ?v3 ))))):named a45 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_bool_fun$ )(?v1 A_a_fun_a_fun$ )(?v2 A_a_fun_a_fun_tree$ )(?v3 A_a_fun_a_fun_tree$ ))(! (= (pred_tree$a ?v0 (node$b ?v1 ?v2 ?v3 ))(and (fun_app$n ?v0 ?v1 )(and (pred_tree$a ?v0 ?v2 )(pred_tree$a ?v0 ?v3 )))):pattern ((pred_tree$a ?v0 (node$b ?v1 ?v2 ?v3 ))))):named a46 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_bool_fun$ )(?v1 A_a_a_fun_fun$ )(?v2 A_a_a_fun_fun_tree$ )(?v3 A_a_a_fun_fun_tree$ ))(! (= (pred_tree$b ?v0 (node$c ?v1 ?v2 ?v3 ))(and (fun_app$o ?v0 ?v1 )(and (pred_tree$b ?v0 ?v2 )(pred_tree$b ?v0 ?v3 )))):pattern ((pred_tree$b ?v0 (node$c ?v1 ?v2 ?v3 ))))):named a47 ))
(assert (! (forall ((?v0 A_a_fun_bool_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun_tree$ ))(! (= (pred_tree$c ?v0 (node$d ?v1 ?v2 ?v3 ))(and (fun_app$p ?v0 ?v1 )(and (pred_tree$c ?v0 ?v2 )(pred_tree$c ?v0 ?v3 )))):pattern ((pred_tree$c ?v0 (node$d ?v1 ?v2 ?v3 ))))):named a48 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (pred_tree$d ?v0 (node$ ?v1 ?v2 ?v3 ))(and (fun_app$q ?v0 ?v1 )(and (pred_tree$d ?v0 ?v2 )(pred_tree$d ?v0 ?v3 )))):pattern ((pred_tree$d ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a49 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun$ )(?v3 A_a_fun_a_a_fun_fun$ )(?v4 A_a_fun_a_a_fun_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$b (comp$ ?v0 )?v1 )(fun_app$b (comp$ ?v2 )?v0 ))(= (fun_app$b (comp$ ?v0 )?v3 )(fun_app$b (comp$ ?v4 )?v0 )))(= (map_tree$c ?v0 (tree_iterate$d ?v1 ?v3 ?v5 ))(tree_iterate$d ?v2 ?v4 (fun_app$a ?v0 ?v5 ))))):named a50 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun_a_a_fun_fun$ )(?v4 A_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$r (comp$a ?v0 )?v1 )(fun_app$c (comp$b ?v2 )?v0 ))(= (fun_app$r (comp$a ?v0 )?v3 )(fun_app$c (comp$b ?v4 )?v0 )))(= (map_tree$b ?v0 (tree_iterate$d ?v1 ?v3 ?v5 ))(tree_iterate$ ?v2 ?v4 (fun_app$f ?v0 ?v5 ))))):named a51 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun_a_a_fun_fun$ )(?v3 A_a_fun$ )(?v4 A_a_fun_a_a_fun_fun$ )(?v5 A$ ))(=> (and (= (fun_app$s (comp$c ?v0 )?v1 )(fun_app$d (comp$d ?v2 )?v0 ))(= (fun_app$s (comp$c ?v0 )?v3 )(fun_app$d (comp$d ?v4 )?v0 )))(= (map_tree$a ?v0 (tree_iterate$ ?v1 ?v3 ?v5 ))(tree_iterate$d ?v2 ?v4 (fun_app$e ?v0 ?v5 ))))):named a52 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A_a_fun$ )(?v5 A$ ))(=> (and (= (fun_app$a (comp$e ?v0 )?v1 )(fun_app$a (comp$e ?v2 )?v0 ))(= (fun_app$a (comp$e ?v0 )?v3 )(fun_app$a (comp$e ?v4 )?v0 )))(= (map_tree$ ?v0 (tree_iterate$ ?v1 ?v3 ?v5 ))(tree_iterate$ ?v2 ?v4 (fun_app$ ?v0 ?v5 ))))):named a53 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (map_tree$c ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$a ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (map_tree$b ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$f ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (map_tree$a ?v0 (tree_pure$a ?v1 ))(tree_pure$ (fun_app$e ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$a ?v1 ))(tree_pure$a (fun_app$ ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$ (node$d ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$ (fun_app$ ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$d ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a58 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_a_a_fun_fun_tree$ )(?v2 A_a_a_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$d (fun_app$e ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a59 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_fun_tree$ )(?v2 A_a_fun_a_fun_tree$ )(?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(! (= (tree_ap$b (node$b ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$ (fun_app$f ?v0 ?v3 )(tree_ap$b ?v1 ?v4 )(tree_ap$b ?v2 ?v5 ))):pattern ((tree_ap$b (node$b ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a60 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun_tree$ )(?v2 A_a_fun_a_a_fun_fun_tree$ )(?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(! (= (tree_ap$c (node$a ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$d (fun_app$a ?v0 ?v3 )(tree_ap$c ?v1 ?v4 )(tree_ap$c ?v2 ?v5 ))):pattern ((tree_ap$c (node$a ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a61 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$ )(?v1 A_a_a_fun_a_fun_fun_tree$ )(?v2 A_a_a_fun_a_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$d (node$e ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$b (fun_app$g ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$e ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a62 ))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$ )(?v1 A_a_a_a_fun_fun_fun_tree$ )(?v2 A_a_a_a_fun_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$e (node$f ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$c (fun_app$h ?v0 ?v3 )(tree_ap$e ?v1 ?v4 )(tree_ap$e ?v2 ?v5 ))):pattern ((tree_ap$e (node$f ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a63 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$ )(?v1 A_a_fun_a_fun_a_fun_tree$ )(?v2 A_a_fun_a_fun_a_fun_tree$ )(?v3 A_a_fun_a_fun$ )(?v4 A_a_fun_a_fun_tree$ )(?v5 A_a_fun_a_fun_tree$ ))(! (= (tree_ap$f (node$g ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$i ?v0 ?v3 )(tree_ap$f ?v1 ?v4 )(tree_ap$f ?v2 ?v5 ))):pattern ((tree_ap$f (node$g ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a64 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$ )(?v1 A_a_a_fun_fun_a_fun_tree$ )(?v2 A_a_a_fun_fun_a_fun_tree$ )(?v3 A_a_a_fun_fun$ )(?v4 A_a_a_fun_fun_tree$ )(?v5 A_a_a_fun_fun_tree$ ))(! (= (tree_ap$g (node$h ?v0 ?v1 ?v2 )(node$c ?v3 ?v4 ?v5 ))(node$ (fun_app$j ?v0 ?v3 )(tree_ap$g ?v1 ?v4 )(tree_ap$g ?v2 ?v5 ))):pattern ((tree_ap$g (node$h ?v0 ?v1 ?v2 )(node$c ?v3 ?v4 ?v5 ))))):named a65 ))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$ )(?v1 A_a_a_fun_a_a_fun_fun_fun_tree$ )(?v2 A_a_a_fun_a_a_fun_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$h (node$i ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$a (fun_app$k ?v0 ?v3 )(tree_ap$h ?v1 ?v4 )(tree_ap$h ?v2 ?v5 ))):pattern ((tree_ap$h (node$i ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a66 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_a_fun_fun_tree$ )(?v2 A_a_fun_a_a_fun_a_fun_fun_tree$ )(?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(! (= (tree_ap$i (node$j ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$b (fun_app$l ?v0 ?v3 )(tree_ap$i ?v1 ?v4 )(tree_ap$i ?v2 ?v5 ))):pattern ((tree_ap$i (node$j ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a67 ))
(check-sat )
;(get-unsat-core )
