;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Natural$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Natural_natural_fun$ 0 )
(declare-codatatypes ()((Nat_tree$ (node$ (root$ Nat$ )(left$ Nat_tree$ )(right$ Nat_tree$ )))(Nat_tree_tree$ (node$a (root$a Nat_tree$ )(left$a Nat_tree_tree$ )(right$a Nat_tree_tree$ )))(Nat_tree_tree_tree$ (node$b (root$b Nat_tree_tree$ )(left$b Nat_tree_tree_tree$ )(right$b Nat_tree_tree_tree$ )))(Nat_tree_tree_tree_tree$ (node$c (root$c Nat_tree_tree_tree$ )(left$c Nat_tree_tree_tree_tree$ )(right$c Nat_tree_tree_tree_tree$ )))(Natural_tree$ (node$d (root$d Natural$ )(left$d Natural_tree$ )(right$d Natural_tree$ )))(Natural_tree_tree$ (node$e (root$e Natural_tree$ )(left$e Natural_tree_tree$ )(right$e Natural_tree_tree$ )))))
(declare-fun den$ ()Nat_tree$ )
(declare-fun mod$ (Nat_tree$ Nat_tree$ )Nat_tree$ )
(declare-fun num$ ()Nat_tree$ )
(declare-fun mod$a (Nat$ )Nat_nat_fun$ )
(declare-fun mod$b (Natural$ )Natural_natural_fun$ )
(declare-fun mod$c (Nat_tree_tree_tree_tree$ Nat_tree_tree_tree_tree$ )Nat_tree_tree_tree_tree$ )
(declare-fun mod$d (Nat_tree_tree_tree$ Nat_tree_tree_tree$ )Nat_tree_tree_tree$ )
(declare-fun mod$e (Natural_tree_tree$ Natural_tree_tree$ )Natural_tree_tree$ )
(declare-fun mod$f (Natural_tree$ Natural_tree$ )Natural_tree$ )
(declare-fun mod$g (Nat_tree_tree$ Nat_tree_tree$ )Nat_tree_tree$ )
(declare-fun size$ (Natural$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun zero$a ()Natural$ )
(declare-fun fIXME_x$ ()Nat_tree$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$a (Natural_natural_fun$ Natural$ )Natural$ )
(declare-fun fun_app$b (Nat_bool_fun$ Nat$ )Bool )
(declare-fun pred_tree$ (Nat_bool_fun$ Nat_tree$ )Bool )
(declare-fun tree_chop$ (Nat_tree$ )Nat_tree$ )
(declare-fun size_natural$ (Natural$ )Nat$ )
(assert (! (not (= (mod$ num$ den$ )(node$ zero$ num$ (mod$ num$ den$ )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ )(?v3 Nat$ )(?v4 Nat_tree$ )(?v5 Nat_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a1 ))
(assert (! (forall ((?v0 Nat_tree$ ))(=> (forall ((?v1 Nat$ )(?v2 Nat_tree$ )(?v3 Nat_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false ))false )):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (mod$a ?v0 )zero$ )?v0 )):named a3 ))
(assert (! (forall ((?v0 Natural$ ))(= (fun_app$a (mod$b ?v0 )zero$a )?v0 )):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (mod$a ?v0 )?v0 )zero$ ):pattern ((mod$a ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Natural$ ))(! (= (fun_app$a (mod$b ?v0 )?v0 )zero$a ):pattern ((mod$b ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (mod$a zero$ )?v0 )zero$ )):named a7 ))
(assert (! (forall ((?v0 Natural$ ))(= (fun_app$a (mod$b zero$a )?v0 )zero$a )):named a8 ))
(assert (! (forall ((?v0 Natural$ )(?v1 Natural$ ))(= (fun_app$a (mod$b (fun_app$a (mod$b ?v0 )?v1 ))?v1 )(fun_app$a (mod$b ?v0 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$ (mod$a (fun_app$ (mod$a ?v0 )?v1 ))?v1 )(fun_app$ (mod$a ?v0 )?v1 ))):named a10 ))
(assert (! (= fIXME_x$ (node$ zero$ num$ fIXME_x$ )):named a11 ))
(assert (! (forall ((?v0 Nat_tree$ ))(=> (= ?v0 (node$ zero$ num$ ?v0 ))(= ?v0 fIXME_x$ ))):named a12 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_tree$ )(?v3 Nat_tree$ ))(! (= (pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))(and (fun_app$b ?v0 ?v1 )(and (pred_tree$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 )))):pattern ((pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a13 ))
(assert (! (= den$ (tree_chop$ num$ )):named a14 ))
(assert (! (= zero$ zero$ ):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a17 ))
(assert (! (forall ((?v0 Natural$ ))(= (= zero$a ?v0 )(= ?v0 zero$a ))):named a18 ))
(assert (! (= (size_natural$ zero$a )zero$ ):named a19 ))
(assert (! (= (size$ zero$a )zero$ ):named a20 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree_tree$ )(?v1 Nat_tree_tree_tree_tree$ ))(= (root$c (mod$c ?v0 ?v1 ))(mod$d (root$c ?v0 )(root$c ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Natural_tree_tree$ )(?v1 Natural_tree_tree$ ))(= (root$e (mod$e ?v0 ?v1 ))(mod$f (root$e ?v0 )(root$e ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Natural_tree$ )(?v1 Natural_tree$ ))(= (root$d (mod$f ?v0 ?v1 ))(fun_app$a (mod$b (root$d ?v0 ))(root$d ?v1 )))):named a23 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree$ )(?v1 Nat_tree_tree_tree$ ))(= (root$b (mod$d ?v0 ?v1 ))(mod$g (root$b ?v0 )(root$b ?v1 )))):named a24 ))
(assert (! (forall ((?v0 Nat_tree_tree$ )(?v1 Nat_tree_tree$ ))(= (root$a (mod$g ?v0 ?v1 ))(mod$ (root$a ?v0 )(root$a ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree$ ))(= (root$ (mod$ ?v0 ?v1 ))(fun_app$ (mod$a (root$ ?v0 ))(root$ ?v1 )))):named a26 ))
(check-sat )
;(get-unsat-core )
