;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Nat_nat_nat_prod_fun$ 0 )
(declare-sort Nat_nat_nat_nat_prod_fun_fun$ 0 )
(declare-sort Nat_nat_prod$ 0)
(declare-fun fst$ (Nat_nat_prod$)Nat$)
(declare-fun snd$ (Nat_nat_prod$)Nat$)
(declare-fun pair$ (Nat$ Nat$ )Nat_nat_prod$)
(declare-codatatypes ()((Nat_nat_prod_tree$ (node$ (root$ Nat_nat_prod$ )(left$ Nat_nat_prod_tree$ )(right$ Nat_nat_prod_tree$ )))))
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-fun uu$ ()Nat_nat_bool_fun_fun$ )
(declare-fun gcd$ (Nat$ )Nat_nat_fun$ )
(declare-fun one$ ()Nat$ )
(declare-fun uua$ (Bool Nat_nat_bool_fun_fun$ )Nat_nat_bool_fun_fun$ )
(declare-fun uub$ (Nat_nat_nat_nat_prod_fun_fun$ Nat_nat_nat_nat_prod_fun_fun$ )Nat_nat_nat_nat_prod_fun_fun$ )
(declare-fun uuc$ (Nat_nat_bool_fun_fun$ Nat_nat_nat_nat_prod_fun_fun$ )Nat_nat_bool_fun_fun$ )
(declare-fun path$ ()Dir_list$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$b (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$c (Nat_nat_nat_prod_fun$ Nat$ )Nat_nat_prod$ )
(declare-fun fun_app$d (Nat_nat_nat_nat_prod_fun_fun$ Nat$ )Nat_nat_nat_prod_fun$ )
(declare-fun case_prod$ (Nat_nat_nat_nat_prod_fun_fun$ Nat_nat_prod$ )Nat_nat_prod$ )
(declare-fun case_prod$a (Nat_nat_bool_fun_fun$ Nat_nat_prod$ )Bool )
(declare-fun stern_brocot$ ()Nat_nat_prod_tree$ )
(declare-fun traverse_tree$ (Dir_list$ Nat_nat_prod_tree$ )Nat_nat_prod_tree$ )
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(= (fun_app$b (gcd$ ?v0 )?v1 )one$ )):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$ )(?v1 Nat_nat_nat_nat_prod_fun_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(! (= (fun_app$c (fun_app$d (uub$ ?v0 ?v1 )?v2 )?v3 )(case_prod$ ?v0 (fun_app$c (fun_app$d ?v1 ?v2 )?v3 ))):pattern ((fun_app$c (fun_app$d (uub$ ?v0 ?v1 )?v2 )?v3 )))):named a1 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_nat_nat_nat_prod_fun_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$a (uuc$ ?v0 ?v1 )?v2 )?v3 )(case_prod$a ?v0 (fun_app$c (fun_app$d ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uuc$ ?v0 ?v1 )?v2 )?v3 )))):named a2 ))
(assert (! (forall ((?v0 Bool )(?v1 Nat_nat_bool_fun_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uua$ ?v0 ?v1 )?v2 )?v3 )))):named a3 ))
(assert (! (not (case_prod$a uu$ (root$ (traverse_tree$ path$ stern_brocot$ )))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$b (gcd$ ?v0 )one$ )one$ )):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$b (gcd$ ?v0 )one$ )one$ )):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$b (gcd$ one$ )?v0 )one$ )):named a7 ))
(assert (! (forall ((?v0 Bool )(?v1 Nat_nat_bool_fun_fun$ )(?v2 Nat_nat_prod$ ))(= (case_prod$a (uua$ ?v0 ?v1 )?v2 )(and ?v0 (case_prod$a ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$b (gcd$ (fun_app$b (gcd$ ?v0 )?v1 ))?v1 )(fun_app$b (gcd$ ?v0 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$b (gcd$ (fun_app$b (gcd$ ?v0 )?v1 ))?v1 )(fun_app$b (gcd$ ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$b (gcd$ ?v0 )(fun_app$b (gcd$ ?v0 )?v1 ))(fun_app$b (gcd$ ?v0 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$b (gcd$ ?v0 )(fun_app$b (gcd$ ?v0 )?v1 ))(fun_app$b (gcd$ ?v0 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b (gcd$ ?v0 )?v0 )?v0 ):pattern ((gcd$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b (gcd$ ?v0 )?v0 )?v0 ):pattern ((gcd$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$ )(?v1 Nat_nat_nat_nat_prod_fun_fun$ )(?v2 Nat_nat_prod$ ))(= (case_prod$ ?v0 (case_prod$ ?v1 ?v2 ))(case_prod$ (uub$ ?v0 ?v1 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_nat_nat_nat_prod_fun_fun$ )(?v2 Nat_nat_prod$ ))(= (case_prod$a ?v0 (case_prod$ ?v1 ?v2 ))(case_prod$a (uuc$ ?v0 ?v1 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(= (= one$ ?v0 )(= ?v0 one$ ))):named a17 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat_nat_prod$ )(?v2 Nat_nat_nat_nat_prod_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$ ?v2 ?v0 )(case_prod$ ?v2 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat_nat_prod$ )(?v2 Nat_nat_bool_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$a ?v2 ?v0 )(case_prod$a ?v2 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$b (gcd$ ?v0 )?v1 )(fun_app$b (gcd$ ?v1 )?v0 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$b (gcd$ ?v0 )?v1 )(fun_app$b (gcd$ ?v1 )?v0 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$b (gcd$ ?v0 )(fun_app$b (gcd$ ?v1 )?v2 ))(fun_app$b (gcd$ ?v1 )(fun_app$b (gcd$ ?v0 )?v2 )))):named a22 ))
(check-sat )
;(get-unsat-core )
