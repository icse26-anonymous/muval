;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))))
(declare-fun f$ (A$ )A_a_fun$ )
(declare-fun l$ ()A$ )
(declare-fun r$ ()A$ )
(declare-fun uu$ ()A_a_fun$ )
(declare-fun uua$ ()A_a_fun$ )
(declare-fun uub$ ()A_a_fun$ )
(declare-fun comp$ (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun epsilon$ ()A$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun fun_app$a (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun tree_iterate$ (A_a_fun$ A_a_fun$ A$ )A_tree$ )
(declare-fun tree_recurse$ (A_a_fun$ A_a_fun$ A$ )A_tree$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uua$ ?v0 )(fun_app$ (f$ ?v0 )r$ )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$ (f$ ?v0 )l$ )):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uub$ ?v0 )?v0 ):pattern ((fun_app$ uub$ ?v0 )))):named a2 ))
(assert (! (not (= (tree_recurse$ (f$ l$ )(f$ r$ )epsilon$ )(tree_iterate$ uu$ uua$ epsilon$ ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (fun_app$ (f$ (fun_app$ (f$ ?v0 )?v1 ))?v2 )(fun_app$ (f$ ?v0 )(fun_app$ (f$ ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$ (f$ ?v0 )epsilon$ )?v0 )):named a5 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$ (f$ epsilon$ )?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (tree_iterate$ ?v0 ?v1 ?v2 )(node$ ?v2 (tree_iterate$ ?v0 ?v1 (fun_app$ ?v0 ?v2 ))(tree_iterate$ ?v0 ?v1 (fun_app$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (root$ (tree_iterate$ ?v0 ?v1 ?v2 ))?v2 )):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (left$ (tree_iterate$ ?v0 ?v1 ?v2 ))(tree_iterate$ ?v0 ?v1 (fun_app$ ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (right$ (tree_iterate$ ?v0 ?v1 ?v2 ))(tree_iterate$ ?v0 ?v1 (fun_app$ ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (tree_recurse$ ?v0 ?v1 ?v2 )(node$ ?v2 (map_tree$ ?v0 (tree_recurse$ ?v0 ?v1 ?v2 ))(map_tree$ ?v1 (tree_recurse$ ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$ ?v0 ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (= ?v0 (node$ ?v1 (map_tree$ ?v2 ?v0 )(map_tree$ ?v3 ?v0 )))(= ?v0 (tree_recurse$ ?v2 ?v3 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A_a_fun$ )(?v5 A$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v0 ))(= (fun_app$a (comp$ ?v0 )?v3 )(fun_app$a (comp$ ?v4 )?v0 )))(= (map_tree$ ?v0 (tree_recurse$ ?v1 ?v3 ?v5 ))(tree_recurse$ ?v2 ?v4 (fun_app$ ?v0 ?v5 ))))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A_a_fun$ )(?v5 A$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v0 ))(= (fun_app$a (comp$ ?v0 )?v3 )(fun_app$a (comp$ ?v4 )?v0 )))(= (map_tree$ ?v0 (tree_iterate$ ?v1 ?v3 ?v5 ))(tree_iterate$ ?v2 ?v4 (fun_app$ ?v0 ?v5 ))))):named a14 ))
(assert (! (forall ((?v0 A_tree$ ))(= (map_tree$ uub$ ?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$ ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
