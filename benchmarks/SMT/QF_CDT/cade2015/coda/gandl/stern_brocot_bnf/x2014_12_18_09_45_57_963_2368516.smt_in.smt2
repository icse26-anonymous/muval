;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun_nat_nat_bool_fun_fun_fun$ 0 )
(declare-sort Nat_nat_prod$ 0)
(declare-fun fst$ (Nat_nat_prod$)Nat$)
(declare-fun snd$ (Nat_nat_prod$)Nat$)
(declare-fun pair$ (Nat$ Nat$ )Nat_nat_prod$)
(declare-codatatypes ()((Nat_nat_prod_tree$ (node$ (root$ Nat_nat_prod$ )(left$ Nat_nat_prod_tree$ )(right$ Nat_nat_prod_tree$ )))))
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-fun uu$ ()Nat_nat_bool_fun_fun$ )
(declare-fun uua$ (Bool )Nat_nat_bool_fun_fun_nat_nat_bool_fun_fun_fun$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun path$ ()Dir_list$ )
(declare-fun zero$ ()Nat$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$b (Nat_nat_bool_fun_fun_nat_nat_bool_fun_fun_fun$ Nat_nat_bool_fun_fun$ )Nat_nat_bool_fun_fun$ )
(declare-fun case_prod$ (Nat_nat_bool_fun_fun$ Nat_nat_prod$ )Bool )
(declare-fun stern_brocot$ ()Nat_nat_prod_tree$ )
(declare-fun traverse_tree$ (Dir_list$ Nat_nat_prod_tree$ )Nat_nat_prod_tree$ )
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(and (fun_app$ (less$ zero$ )?v0 )(fun_app$ (less$ zero$ )?v1 ))):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 Bool )(?v1 Nat_nat_bool_fun_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$a (fun_app$b (uua$ ?v0 )?v1 )?v2 )?v3 )(and ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (fun_app$b (uua$ ?v0 )?v1 )?v2 )?v3 )))):named a1 ))
(assert (! (not (case_prod$ uu$ (root$ (traverse_tree$ path$ stern_brocot$ )))):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (= ?v0 zero$ ))(fun_app$ (less$ zero$ )?v0 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (fun_app$ (less$ zero$ )?v0 ))(= ?v0 zero$ ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (less$ ?v0 )zero$ )false ):pattern ((less$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Bool )(?v1 Nat_nat_bool_fun_fun$ )(?v2 Nat_nat_prod$ ))(= (case_prod$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )(and ?v0 (case_prod$ ?v1 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(=> (=> (= ?v0 zero$ )false )(fun_app$ (less$ zero$ )?v0 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )?v1 )(not (= ?v1 zero$ )))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$ (less$ ?v0 )zero$ )false )):named a9 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (and (fun_app$ ?v0 zero$ )(forall ((?v2 Nat$ ))(=> (and (fun_app$ (less$ zero$ )?v2 )(not (fun_app$ ?v0 ?v2 )))(exists ((?v3 Nat$ ))(and (fun_app$ (less$ ?v3 )?v2 )(not (fun_app$ ?v0 ?v3 )))))))(fun_app$ ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$ (less$ ?v0 )zero$ ))):named a11 ))
(assert (! (not (fun_app$ (less$ zero$ )zero$ )):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$ (less$ ?v0 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (not (= ?v0 ?v1 ))(and (=> (fun_app$ (less$ ?v0 )?v1 )false )(=> (fun_app$ (less$ ?v1 )?v0 )false )))false )):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$ (less$ ?v0 )?v0 )false )):named a17 ))
(check-sat )
;(get-unsat-core )
