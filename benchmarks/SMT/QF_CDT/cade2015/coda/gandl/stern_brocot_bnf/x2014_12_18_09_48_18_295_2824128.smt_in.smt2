;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(A_tree_tree$ (node$a (root$a A_tree$ )(left$a A_tree_tree$ )(right$a A_tree_tree$ )))(A_stream_tree$ (node$b (root$b A_stream$ )(left$b A_stream_tree$ )(right$b A_stream_tree$ )))(A_stream_tree_tree$ (node$c (root$c A_stream_tree$ )(left$c A_stream_tree_tree$ )(right$c A_stream_tree_tree$ )))(A_tree_tree_tree$ (node$d (root$d A_tree_tree$ )(left$d A_tree_tree_tree$ )(right$d A_tree_tree_tree$ )))(A_stream_stream$ (sCons$a (shd$a A_stream$ )(stl$a A_stream_stream$ )))(A_stream_stream_tree$ (node$e (root$e A_stream_stream$ )(left$e A_stream_stream_tree$ )(right$e A_stream_stream_tree$ )))(A_tree_stream$ (sCons$b (shd$b A_tree$ )(stl$b A_tree_stream$ )))(A_tree_stream_tree$ (node$f (root$f A_tree_stream$ )(left$f A_tree_stream_tree$ )(right$f A_tree_stream_tree$ )))(A_stream_stream_tree_tree$ (node$g (root$g A_stream_stream_tree$ )(left$g A_stream_stream_tree_tree$ )(right$g A_stream_stream_tree_tree$ )))(A_tree_tree_stream$ (sCons$c (shd$c A_tree_tree$ )(stl$c A_tree_tree_stream$ )))(A_tree_tree_stream_tree$ (node$h (root$h A_tree_tree_stream$ )(left$h A_tree_tree_stream_tree$ )(right$h A_tree_tree_stream_tree$ )))(A_stream_tree_stream$ (sCons$d (shd$d A_stream_tree$ )(stl$d A_stream_tree_stream$ )))(A_stream_tree_stream_tree$ (node$i (root$i A_stream_tree_stream$ )(left$i A_stream_tree_stream_tree$ )(right$i A_stream_tree_stream_tree$ )))(A_stream_stream_stream$ (sCons$e (shd$e A_stream_stream$ )(stl$e A_stream_stream_stream$ )))(A_tree_stream_stream$ (sCons$f (shd$f A_tree_stream$ )(stl$f A_tree_stream_stream$ )))(A_stream_stream_tree_stream$ (sCons$g (shd$g A_stream_stream_tree$ )(stl$g A_stream_stream_tree_stream$ )))(A_tree_tree_stream_stream$ (sCons$h (shd$h A_tree_tree_stream$ )(stl$h A_tree_tree_stream_stream$ )))(A_stream_tree_stream_stream$ (sCons$i (shd$i A_stream_tree_stream$ )(stl$i A_stream_tree_stream_stream$ )))))
(declare-fun t$ ()A_tree$ )
(declare-fun t$a ()A_tree$ )
(declare-fun times$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun stream$ (A_tree$ )A_stream$ )
(declare-fun times$a (A_stream$ A_stream$ )A_stream$ )
(declare-fun times$b (A$ A$ )A$ )
(declare-fun times$c (A_tree_tree$ A_tree_tree$ )A_tree_tree$ )
(declare-fun times$d (A_stream_tree$ A_stream_tree$ )A_stream_tree$ )
(declare-fun times$e (A_stream_tree_tree$ A_stream_tree_tree$ )A_stream_tree_tree$ )
(declare-fun times$f (A_tree_tree_tree$ A_tree_tree_tree$ )A_tree_tree_tree$ )
(declare-fun times$g (A_stream_stream_tree$ A_stream_stream_tree$ )A_stream_stream_tree$ )
(declare-fun times$h (A_stream_stream$ A_stream_stream$ )A_stream_stream$ )
(declare-fun times$i (A_tree_stream_tree$ A_tree_stream_tree$ )A_tree_stream_tree$ )
(declare-fun times$j (A_tree_stream$ A_tree_stream$ )A_tree_stream$ )
(declare-fun times$k (A_stream_stream_tree_tree$ A_stream_stream_tree_tree$ )A_stream_stream_tree_tree$ )
(declare-fun times$l (A_tree_tree_stream_tree$ A_tree_tree_stream_tree$ )A_tree_tree_stream_tree$ )
(declare-fun times$m (A_tree_tree_stream$ A_tree_tree_stream$ )A_tree_tree_stream$ )
(declare-fun times$n (A_stream_tree_stream_tree$ A_stream_tree_stream_tree$ )A_stream_tree_stream_tree$ )
(declare-fun times$o (A_stream_tree_stream$ A_stream_tree_stream$ )A_stream_tree_stream$ )
(declare-fun times$p (A_stream_stream_stream$ A_stream_stream_stream$ )A_stream_stream_stream$ )
(declare-fun times$q (A_tree_stream_stream$ A_tree_stream_stream$ )A_tree_stream_stream$ )
(declare-fun times$r (A_stream_stream_tree_stream$ A_stream_stream_tree_stream$ )A_stream_stream_tree_stream$ )
(declare-fun times$s (A_tree_tree_stream_stream$ A_tree_tree_stream_stream$ )A_tree_tree_stream_stream$ )
(declare-fun times$t (A_stream_tree_stream_stream$ A_stream_tree_stream_stream$ )A_stream_tree_stream_stream$ )
(assert (! (not (= (stream$ (times$ t$ t$a ))(times$a (stream$ t$ )(stream$ t$a )))):named a0 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (root$ (times$ ?v0 ?v1 ))(times$b (root$ ?v0 )(root$ ?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ ))(= (root$a (times$c ?v0 ?v1 ))(times$ (root$a ?v0 )(root$a ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_stream_tree$ )(?v1 A_stream_tree$ ))(= (root$b (times$d ?v0 ?v1 ))(times$a (root$b ?v0 )(root$b ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_stream_tree_tree$ )(?v1 A_stream_tree_tree$ ))(= (root$c (times$e ?v0 ?v1 ))(times$d (root$c ?v0 )(root$c ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ ))(= (root$d (times$f ?v0 ?v1 ))(times$c (root$d ?v0 )(root$d ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_stream_stream_tree$ )(?v1 A_stream_stream_tree$ ))(= (root$e (times$g ?v0 ?v1 ))(times$h (root$e ?v0 )(root$e ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_tree_stream_tree$ )(?v1 A_tree_stream_tree$ ))(= (root$f (times$i ?v0 ?v1 ))(times$j (root$f ?v0 )(root$f ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_stream_stream_tree_tree$ )(?v1 A_stream_stream_tree_tree$ ))(= (root$g (times$k ?v0 ?v1 ))(times$g (root$g ?v0 )(root$g ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_tree_tree_stream_tree$ )(?v1 A_tree_tree_stream_tree$ ))(= (root$h (times$l ?v0 ?v1 ))(times$m (root$h ?v0 )(root$h ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_stream_tree_stream_tree$ )(?v1 A_stream_tree_stream_tree$ ))(= (root$i (times$n ?v0 ?v1 ))(times$o (root$i ?v0 )(root$i ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$ (times$a ?v0 ?v1 ))(times$b (shd$ ?v0 )(shd$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_tree_stream$ )(?v1 A_tree_stream$ ))(= (shd$b (times$j ?v0 ?v1 ))(times$ (shd$b ?v0 )(shd$b ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ ))(= (shd$a (times$h ?v0 ?v1 ))(times$a (shd$a ?v0 )(shd$a ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_stream_tree_stream$ )(?v1 A_stream_tree_stream$ ))(= (shd$d (times$o ?v0 ?v1 ))(times$d (shd$d ?v0 )(shd$d ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_tree_tree_stream$ )(?v1 A_tree_tree_stream$ ))(= (shd$c (times$m ?v0 ?v1 ))(times$c (shd$c ?v0 )(shd$c ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_stream$ ))(= (shd$e (times$p ?v0 ?v1 ))(times$h (shd$e ?v0 )(shd$e ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_tree_stream_stream$ )(?v1 A_tree_stream_stream$ ))(= (shd$f (times$q ?v0 ?v1 ))(times$j (shd$f ?v0 )(shd$f ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_stream_stream_tree_stream$ )(?v1 A_stream_stream_tree_stream$ ))(= (shd$g (times$r ?v0 ?v1 ))(times$g (shd$g ?v0 )(shd$g ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_tree_tree_stream_stream$ )(?v1 A_tree_tree_stream_stream$ ))(= (shd$h (times$s ?v0 ?v1 ))(times$m (shd$h ?v0 )(shd$h ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_stream_tree_stream_stream$ )(?v1 A_stream_tree_stream_stream$ ))(= (shd$i (times$t ?v0 ?v1 ))(times$o (shd$i ?v0 )(shd$i ?v1 )))):named a20 ))
(check-sat )
;(get-unsat-core )
