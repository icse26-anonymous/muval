;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun bot$ ()N_set$ )
(declare-fun nsa$ ()N_set$ )
(declare-fun sup$ (N_set$ N_set$ )N_set$ )
(declare-fun tr$a ()Dtree$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun subtr2$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun fun_app$ (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$a (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$b (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(assert (! (not (exists ((?v0 N_set$ )(?v1 Dtree$ ))(and (wf$ ?v1 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )tr$ )?v1 )))):named a0 ))
(assert (! (wf$ tr1a$ ):named a1 ))
(assert (! (wf$ tr1$ ):named a2 ))
(assert (! (exists ((?v0 N_set$ )(?v1 Dtree$ ))(and (wf$ ?v1 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )tra$ )?v1 ))):named a3 ))
(assert (! (fun_app$ (fun_app$a (fun_app$b subtr$ ns$ )tr$a )tr1$ ):named a4 ))
(assert (! (fun_app$ (fun_app$a (fun_app$b subtr$ (sup$ nsa$ (insert$ (root$ tr$ )bot$ )))tr$ )tr1a$ ):named a5 ))
(assert (! (=> (forall ((?v0 N_set$ )(?v1 Dtree$ ))(=> (and (wf$ ?v1 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )tra$ )?v1 ))false ))false ):named a6 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v2 )?v3 ))(fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v1 )?v3 ))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set$ )(?v4 Dtree$ ))(=> (and (fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v3 )?v2 )?v4 ))(fun_app$ (fun_app$a (fun_app$b subtr$ (sup$ ?v0 ?v3 ))?v1 )?v4 ))):named a8 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v1 )?v2 )(member$ (root$ ?v2 )?v0 ))):named a9 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v1 )?v2 )(member$ (root$ ?v1 )?v0 ))):named a10 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (root$ ?v0 )?v1 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v1 )?v0 )?v0 ))):named a11 ))
(assert (! (fun_app$ (fun_app$a (fun_app$b subtr$ (sup$ nsa$ (insert$ (root$ tr$ )bot$ )))tra$ )tr1a$ ):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (inItr$ ?v0 ?v1 ?v2 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v1 )?v3 ))(inItr$ ?v0 ?v3 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v1 )?v3 ))(inFr$ ?v0 ?v3 ?v2 ))):named a14 ))
(assert (! (= subtr$ subtr2$ ):named a15 ))
(assert (! (member$a (inr$ tr$ )(cont$ tra$ )):named a16 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (inItr$ ?v0 ?v1 ?v2 )(exists ((?v3 Dtree$ ))(and (fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v3 )?v1 )(= (root$ ?v3 )?v2 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
