;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort T_set_set$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-sort T_set_set_T_set_set_fun$ 0 )
(declare-sort T_N_sum_set_T_N_sum_set_fun$ 0 )
(declare-sort T_N_sum$ 0)
(declare-fun projl$ (T_N_sum$)T$)
(declare-fun inl$ (T$ )T_N_sum$)
(declare-fun projr$ (T_N_sum$)N$)
(declare-fun inr$ (N$ )T_N_sum$)
(declare-fun k$ (N$ )T_set$ )
(declare-fun n$ ()N$ )
(declare-fun fr$ (N_set$ Dtree$ )T_set$ )
(declare-fun lr$ (N_set$ N$ )T_set_set$ )
(declare-fun n$a ()N$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun ts$ ()T_set$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun bot$ ()N_set$ )
(declare-fun tns$ ()T_N_sum_set$ )
(declare-fun bot$a ()T_set_set$ )
(declare-fun bot$b ()T_N_sum_set$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun minus$ (N_set$ )N_set_N_set_fun$ )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun minus$a (T_set_set$ )T_set_set_T_set_set_fun$ )
(declare-fun minus$b (T_N_sum_set$ )T_N_sum_set_T_N_sum_set_fun$ )
(declare-fun fun_app$ (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun insert$a (T_set$ T_set_set$ )T_set_set$ )
(declare-fun insert$b (T_N_sum$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun member$b (T_set$ T_set_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun subtrOf$ (Dtree$ N$ )Dtree$ )
(declare-fun fun_app$a (T_set_set_T_set_set_fun$ T_set_set$ )T_set_set$ )
(declare-fun fun_app$b (T_N_sum_set_T_N_sum_set_fun$ T_N_sum_set$ )T_N_sum_set$ )
(assert (! (not (and (= (fr$ (fun_app$ (minus$ ns$ )(insert$ n$ bot$ ))(subtrOf$ tr$ n$a ))(fr$ (fun_app$ (minus$ ns$ )(insert$ n$ bot$ ))(subtrOf$ tr$ n$a )))(and (wf$ (subtrOf$ tr$ n$a ))(and (= (root$ (subtrOf$ tr$ n$a ))n$a )(regular$ (subtrOf$ tr$ n$a )))))):named a0 ))
(assert (! (member$ (inr$ n$a )tns$ ):named a1 ))
(assert (! (wf$ tr$ ):named a2 ))
(assert (! (regular$ tr$ ):named a3 ))
(assert (! (member$a n$ ns$ ):named a4 ))
(assert (! (= (root$ tr$ )n$ ):named a5 ))
(assert (! (member$ (inr$ n$a )tns$ ):named a6 ))
(assert (! (= ts$ (fr$ ns$ tr$ )):named a7 ))
(assert (! (member$b ts$ (lr$ ns$ n$ )):named a8 ))
(assert (! (forall ((?v0 N$ ))(= (k$ ?v0 )(fr$ (fun_app$ (minus$ ns$ )(insert$ n$ bot$ ))(subtrOf$ tr$ ?v0 )))):named a9 ))
(assert (! (=> (forall ((?v0 Dtree$ ))(=> (and (wf$ ?v0 )(and (= (root$ ?v0 )n$ )(and (regular$ ?v0 )(= ts$ (fr$ ns$ ?v0 )))))false ))false ):named a10 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set_set$ ))(= (insert$a ?v0 (fun_app$a (minus$a ?v1 )(insert$a ?v0 bot$a )))(insert$a ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ ))(= (insert$b ?v0 (fun_app$b (minus$b ?v1 )(insert$b ?v0 bot$b )))(insert$b ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ ))(= (insert$ ?v0 (fun_app$ (minus$ ?v1 )(insert$ ?v0 bot$ )))(insert$ ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_set$ ))(=> (member$ ?v0 ?v1 )(= (fun_app$b (minus$b (insert$b ?v0 ?v2 ))?v1 )(fun_app$b (minus$b ?v2 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set_set$ )(?v2 T_set_set$ ))(=> (member$b ?v0 ?v1 )(= (fun_app$a (minus$a (insert$a ?v0 ?v2 ))?v1 )(fun_app$a (minus$a ?v2 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (member$a ?v0 ?v1 )(= (fun_app$ (minus$ (insert$ ?v0 ?v2 ))?v1 )(fun_app$ (minus$ ?v2 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_set$ ))(=> (not (member$ ?v0 ?v1 ))(= (fun_app$b (minus$b ?v1 )(insert$b ?v0 ?v2 ))(fun_app$b (minus$b ?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set_set$ )(?v2 T_set_set$ ))(=> (not (member$b ?v0 ?v1 ))(= (fun_app$a (minus$a ?v1 )(insert$a ?v0 ?v2 ))(fun_app$a (minus$a ?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (not (member$a ?v0 ?v1 ))(= (fun_app$ (minus$ ?v1 )(insert$ ?v0 ?v2 ))(fun_app$ (minus$ ?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 T_set_set$ ))(= (fun_app$a (minus$a ?v0 )bot$a )?v0 )):named a20 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(= (fun_app$b (minus$b ?v0 )bot$b )?v0 )):named a21 ))
(assert (! (forall ((?v0 N_set$ ))(= (fun_app$ (minus$ ?v0 )bot$ )?v0 )):named a22 ))
(assert (! (forall ((?v0 T_set_set$ ))(! (= (fun_app$a (minus$a ?v0 )?v0 )bot$a ):pattern ((minus$a ?v0 )))):named a23 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(! (= (fun_app$b (minus$b ?v0 )?v0 )bot$b ):pattern ((minus$b ?v0 )))):named a24 ))
(assert (! (forall ((?v0 N_set$ ))(! (= (fun_app$ (minus$ ?v0 )?v0 )bot$ ):pattern ((minus$ ?v0 )))):named a25 ))
(assert (! (forall ((?v0 T_set_set$ ))(= (fun_app$a (minus$a bot$a )?v0 )bot$a )):named a26 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(= (fun_app$b (minus$b bot$b )?v0 )bot$b )):named a27 ))
(assert (! (forall ((?v0 N_set$ ))(= (fun_app$ (minus$ bot$ )?v0 )bot$ )):named a28 ))
(assert (! (forall ((?v0 T_N_sum$ ))(member$ ?v0 (insert$b ?v0 bot$b ))):named a29 ))
(assert (! (forall ((?v0 T_set$ ))(member$b ?v0 (insert$a ?v0 bot$a ))):named a30 ))
(assert (! (forall ((?v0 N$ ))(member$a ?v0 (insert$ ?v0 bot$ ))):named a31 ))
(assert (! (forall ((?v0 T_set_set$ )(?v1 T_set$ )(?v2 T_set_set$ ))(= (fun_app$a (minus$a ?v0 )(insert$a ?v1 ?v2 ))(fun_app$a (minus$a (fun_app$a (minus$a ?v0 )(insert$a ?v1 bot$a )))?v2 ))):named a32 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum$ )(?v2 T_N_sum_set$ ))(= (fun_app$b (minus$b ?v0 )(insert$b ?v1 ?v2 ))(fun_app$b (minus$b (fun_app$b (minus$b ?v0 )(insert$b ?v1 bot$b )))?v2 ))):named a33 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ )(?v2 N_set$ ))(= (fun_app$ (minus$ ?v0 )(insert$ ?v1 ?v2 ))(fun_app$ (minus$ (fun_app$ (minus$ ?v0 )(insert$ ?v1 bot$ )))?v2 ))):named a34 ))
(check-sat )
;(get-unsat-core )
