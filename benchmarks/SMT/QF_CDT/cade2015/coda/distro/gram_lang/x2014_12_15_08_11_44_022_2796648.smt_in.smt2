;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_list_N_list_fun$ 0 )
(declare-sort N_list$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-fun nil$ ()N_list$)
(declare-fun hd$ (N_list$)N$)
(declare-fun tl$ (N_list$)N_list$)
(declare-fun cons$ (N$ N_list$ )N_list$)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun n1$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun nl1$ ()N_list$ )
(declare-fun nl2$ ()N_list$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun append$ (N_list$ )N_list_N_list_fun$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$ (N_list_N_list_fun$ N_list$ )N_list$ )
(declare-fun fun_app$a (N_dtree_fun$ N$ )Dtree$ )
(assert (! (not (path$ f$ (fun_app$ (append$ (cons$ n$ (cons$ n1$ nl$ )))nl2$ ))):named a0 ))
(assert (! (path$ f$ (cons$ n1$ nl$ )):named a1 ))
(assert (! (=> (path$ f$ (cons$ (last$ (cons$ n1$ nl$ ))nl2$ ))(path$ f$ (fun_app$ (append$ (cons$ n1$ nl$ ))nl2$ ))):named a2 ))
(assert (! (member$ (inr$ (fun_app$a f$ n1$ ))(cont$ (fun_app$a f$ n$ ))):named a3 ))
(assert (! (path$ f$ (cons$ (last$ (cons$ n$ (cons$ n1$ nl$ )))nl2$ )):named a4 ))
(assert (! (path$ f$ nl1$ ):named a5 ))
(assert (! (path$ f$ (cons$ (last$ nl1$ )nl2$ )):named a6 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ )(?v2 N_list$ )(?v3 N$ ))(=> (and (path$ ?v0 (cons$ ?v1 ?v2 ))(member$ (inr$ (fun_app$a ?v0 ?v1 ))(cont$ (fun_app$a ?v0 ?v3 ))))(path$ ?v0 (cons$ ?v3 (cons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ )(?v2 N_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )(fun_app$ (append$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ )(?v2 N_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )(fun_app$ (append$ ?v2 )?v1 ))(= ?v0 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ )(?v2 N_list$ ))(= (fun_app$ (append$ (fun_app$ (append$ ?v0 )?v1 ))?v2 )(fun_app$ (append$ ?v0 )(fun_app$ (append$ ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ )(?v3 N_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N_list$ ))(! (= (fun_app$ (append$ (cons$ ?v0 ?v1 ))?v2 )(cons$ ?v0 (fun_app$ (append$ ?v1 )?v2 ))):pattern ((fun_app$ (append$ (cons$ ?v0 ?v1 ))?v2 )))):named a14 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N_list$ )(?v3 N_list$ )(?v4 N_list$ ))(=> (and (= (cons$ ?v0 ?v1 )?v2 )(= ?v3 (fun_app$ (append$ ?v1 )?v4 )))(= (cons$ ?v0 ?v3 )(fun_app$ (append$ ?v2 )?v4 )))):named a15 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(= (path$ ?v0 ?v1 )(or (exists ((?v2 N$ ))(= ?v1 (cons$ ?v2 nil$ )))(exists ((?v2 N$ )(?v3 N_list$ )(?v4 N$ ))(and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3 )))(and (path$ ?v0 (cons$ ?v2 ?v3 ))(member$ (inr$ (fun_app$a ?v0 ?v2 ))(cont$ (fun_app$a ?v0 ?v4 ))))))))):named a16 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(=> (and (path$ ?v0 ?v1 )(and (forall ((?v2 N$ ))(=> (= ?v1 (cons$ ?v2 nil$ ))false ))(forall ((?v2 N$ )(?v3 N_list$ )(?v4 N$ ))(=> (and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3 )))(and (path$ ?v0 (cons$ ?v2 ?v3 ))(member$ (inr$ (fun_app$a ?v0 ?v2 ))(cont$ (fun_app$a ?v0 ?v4 )))))false ))))false )):named a17 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ )(?v2 N_list$ ))(=> (and (path$ ?v0 (fun_app$ (append$ ?v1 )?v2 ))(not (= ?v2 nil$ )))(path$ ?v0 ?v2 ))):named a18 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (reg$ ?v0 ?v1 )(member$ (inr$ ?v2 )(cont$ ?v1 )))(reg$ ?v0 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 N_list$ ))(! (= (fun_app$ (append$ ?v0 )nil$ )?v0 ):pattern ((append$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )nil$ )(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a21 ))
(check-sat )
;(get-unsat-core )
