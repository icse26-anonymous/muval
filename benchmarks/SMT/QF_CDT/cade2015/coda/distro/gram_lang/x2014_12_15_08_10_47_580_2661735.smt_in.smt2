;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_N_sum_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort N_option_set$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort N_N_sum_bool_fun$ 0 )
(declare-sort N_N_N_sum_sum_set$ 0 )
(declare-sort N_N_sum_N_sum_set$ 0 )
(declare-sort N_option_bool_fun$ 0 )
(declare-sort N_N_option_sum_set$ 0 )
(declare-sort N_N_sum_option_set$ 0 )
(declare-sort N_option_N_sum_set$ 0 )
(declare-sort N_option_option_set$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort N_N_N_sum_sum_bool_fun$ 0 )
(declare-sort N_N_sum_N_sum_bool_fun$ 0 )
(declare-sort N_N_option_sum_bool_fun$ 0 )
(declare-sort N_N_sum_N_N_sum_sum_set$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_N_N_option_sum_sum_set$ 0 )
(declare-sort N_N_N_sum_sum_option_set$ 0 )
(declare-sort N_N_sum_N_option_sum_set$ 0 )
(declare-sort N_N_sum_N_sum_option_set$ 0 )
(declare-sort N_option_N_N_sum_sum_set$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-sort N_N_option_sum_option_set$ 0 )
(declare-sort N_option_N_option_sum_set$ 0 )
(declare-sort N_N_sum_N_N_sum_sum_option_set$ 0 )
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_N_sum_N_option_sum_option_set$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort N_N_sum$ 0)
(declare-sort N_N_sum_N_sum$ 0)
(declare-sort N_option$ 0)
(declare-sort N_N_option_sum$ 0)
(declare-sort N_N_N_sum_sum$ 0)
(declare-fun projl$ (N_N_sum$)N$)
(declare-fun inl$ (N$ )N_N_sum$)
(declare-fun projr$ (N_N_sum$)N$)
(declare-fun inr$ (N$ )N_N_sum$)
(declare-fun projl$a (N_N_sum_N_sum$)N_N_sum$)
(declare-fun inl$a (N_N_sum$ )N_N_sum_N_sum$)
(declare-fun projr$a (N_N_sum_N_sum$)N$)
(declare-fun inr$a (N$ )N_N_sum_N_sum$)
(declare-fun none$ ()N_option$)
(declare-fun the$ (N_option$)N$)
(declare-fun some$ (N$ )N_option$)
(declare-fun projl$b (N_N_option_sum$)N$)
(declare-fun inl$b (N$ )N_N_option_sum$)
(declare-fun projr$b (N_N_option_sum$)N_option$)
(declare-fun inr$b (N_option$ )N_N_option_sum$)
(declare-fun projl$c (N_N_N_sum_sum$)N$)
(declare-fun inl$c (N$ )N_N_N_sum_sum$)
(declare-fun projr$c (N_N_N_sum_sum$)N_N_sum$)
(declare-fun inr$c (N_N_sum$ )N_N_N_sum_sum$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ (N_option_set$ )N_option_bool_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun top$ ()N_set$ )
(declare-fun tr$a ()Dtree$ )
(declare-fun uua$ (N_N_sum_set$ )N_N_sum_bool_fun$ )
(declare-fun uub$ (N_set$ )N_bool_fun$ )
(declare-fun comp$ (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun inFr$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun top$a ()N_N_sum_N_sum_set$ )
(declare-fun top$b ()N_N_option_sum_set$ )
(declare-fun top$c ()N_N_N_sum_sum_set$ )
(declare-fun top$d ()N_N_sum_set$ )
(declare-fun top$e ()N_option_set$ )
(declare-fun top$f ()N_option_bool_fun$ )
(declare-fun top$g ()Bool )
(declare-fun top$h ()N_N_sum_bool_fun$ )
(declare-fun top$i ()N_bool_fun$ )
(declare-fun top$j ()N_N_sum_N_sum_bool_fun$ )
(declare-fun top$k ()N_N_option_sum_bool_fun$ )
(declare-fun top$l ()N_N_N_sum_sum_bool_fun$ )
(declare-fun top$m ()N_option_N_sum_set$ )
(declare-fun top$n ()N_option_N_option_sum_set$ )
(declare-fun top$o ()N_N_sum_N_option_sum_set$ )
(declare-fun top$p ()N_option_N_N_sum_sum_set$ )
(declare-fun top$q ()N_N_sum_N_N_sum_sum_set$ )
(declare-fun top$r ()N_N_N_option_sum_sum_set$ )
(declare-fun top$s ()N_N_sum_N_option_sum_option_set$ )
(declare-fun top$t ()N_N_sum_N_N_sum_sum_option_set$ )
(declare-fun top$u ()N_N_sum_N_sum_option_set$ )
(declare-fun top$v ()N_N_option_sum_option_set$ )
(declare-fun top$w ()N_N_N_sum_sum_option_set$ )
(declare-fun top$x ()N_N_sum_option_set$ )
(declare-fun top$y ()N_option_option_set$ )
(declare-fun deftr$ (N$ )Dtree$ )
(declare-fun inFr2$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun subtr$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun finite$ (N_set$ )Bool )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun member$ (N_option$ N_option_set$ )Bool )
(declare-fun subtr2$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun unfold$ (Dtree_N_fun$ )Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ )
(declare-fun collect$ (N_N_sum_N_sum_bool_fun$ )N_N_sum_N_sum_set$ )
(declare-fun finite$a (N_N_sum_set$ )Bool )
(declare-fun finite$b (N_N_option_sum_set$ )Bool )
(declare-fun finite$c (N_option_set$ )Bool )
(declare-fun finite$d (N_option_N_sum_set$ )Bool )
(declare-fun finite$e (N_N_N_sum_sum_set$ )Bool )
(declare-fun finite$f (N_N_sum_N_sum_set$ )Bool )
(declare-fun finite$g (N_option_N_option_sum_set$ )Bool )
(declare-fun finite$h (N_N_sum_N_option_sum_set$ )Bool )
(declare-fun finite$i (N_option_N_N_sum_sum_set$ )Bool )
(declare-fun finite$j (N_N_sum_N_N_sum_sum_set$ )Bool )
(declare-fun finite$k (N_N_N_option_sum_sum_set$ )Bool )
(declare-fun finite$l (N_N_sum_N_option_sum_option_set$ )Bool )
(declare-fun finite$m (N_N_sum_N_N_sum_sum_option_set$ )Bool )
(declare-fun finite$n (N_N_sum_N_sum_option_set$ )Bool )
(declare-fun finite$o (N_N_option_sum_option_set$ )Bool )
(declare-fun finite$p (N_N_N_sum_sum_option_set$ )Bool )
(declare-fun finite$q (N_N_sum_option_set$ )Bool )
(declare-fun finite$r (N_option_option_set$ )Bool )
(declare-fun fun_app$ (N_option_bool_fun$ N_option$ )Bool )
(declare-fun member$a (N_N_sum$ N_N_sum_set$ )Bool )
(declare-fun member$b (N$ N_set$ )Bool )
(declare-fun member$c (N_N_sum_N_sum$ N_N_sum_N_sum_set$ )Bool )
(declare-fun member$d (N_N_option_sum$ N_N_option_sum_set$ )Bool )
(declare-fun member$e (N_N_N_sum_sum$ N_N_N_sum_sum_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun collect$a (N_N_option_sum_bool_fun$ )N_N_option_sum_set$ )
(declare-fun collect$b (N_N_N_sum_sum_bool_fun$ )N_N_N_sum_sum_set$ )
(declare-fun collect$c (N_N_sum_bool_fun$ )N_N_sum_set$ )
(declare-fun collect$d (N_option_bool_fun$ )N_option_set$ )
(declare-fun collect$e (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (N_N_sum_bool_fun$ N_N_sum$ )Bool )
(declare-fun fun_app$b (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$c (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$d (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$e (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(declare-fun fun_app$f (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$g (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$h (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(declare-fun fun_app$i (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$j (Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$k (N_N_sum_N_sum_bool_fun$ N_N_sum_N_sum$ )Bool )
(declare-fun fun_app$l (N_N_option_sum_bool_fun$ N_N_option_sum$ )Bool )
(declare-fun fun_app$m (N_N_N_sum_sum_bool_fun$ N_N_N_sum_sum$ )Bool )
(declare-fun fun_app$n (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$o (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun fun_app$p (N_set_dtree_T_bool_fun_fun_fun$ N_set$ )Dtree_T_bool_fun_fun$ )
(declare-fun fun_app$q (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(assert (! (forall ((?v0 N_option_set$ )(?v1 N_option$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 N_N_sum_set$ )(?v1 N_N_sum$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$b (uub$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$b (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (not (forall ((?v0 Dtree$ ))(=> (fun_app$c (fun_app$d (fun_app$e subtr$ top$ )?v0 )tr$ )(= ?v0 (fun_app$f f$ (fun_app$g root$ ?v0 )))))):named a3 ))
(assert (! (fun_app$c (fun_app$d (fun_app$e subtr$ ns$ )tr$ )tr$a ):named a4 ))
(assert (! (reg$ f$ tr$a ):named a5 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$c (fun_app$d (fun_app$e subtr$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d (fun_app$e subtr$ ?v0 )?v2 )?v3 ))(fun_app$c (fun_app$d (fun_app$e subtr$ ?v0 )?v1 )?v3 ))):named a6 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$c (fun_app$d (fun_app$e subtr$ ?v0 )?v1 )?v2 )(member$b (fun_app$g root$ ?v2 )?v0 ))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$c (fun_app$d (fun_app$e subtr$ ?v0 )?v1 )?v2 )(member$b (fun_app$g root$ ?v1 )?v0 ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (fun_app$g root$ ?v0 )?v1 )(fun_app$c (fun_app$d (fun_app$e subtr$ ?v1 )?v0 )?v0 ))):named a9 ))
(assert (! (forall ((?v0 N_N_sum_N_sum$ ))(= (member$c ?v0 top$a )true )):named a10 ))
(assert (! (forall ((?v0 N_N_option_sum$ ))(= (member$d ?v0 top$b )true )):named a11 ))
(assert (! (forall ((?v0 N_N_N_sum_sum$ ))(= (member$e ?v0 top$c )true )):named a12 ))
(assert (! (forall ((?v0 N_N_sum$ ))(= (member$a ?v0 top$d )true )):named a13 ))
(assert (! (forall ((?v0 N_option$ ))(= (member$ ?v0 top$e )true )):named a14 ))
(assert (! (forall ((?v0 N$ ))(= (member$b ?v0 top$ )true )):named a15 ))
(assert (! (forall ((?v0 N_N_sum_N_sum$ ))(member$c ?v0 top$a )):named a16 ))
(assert (! (forall ((?v0 N_N_option_sum$ ))(member$d ?v0 top$b )):named a17 ))
(assert (! (forall ((?v0 N_N_N_sum_sum$ ))(member$e ?v0 top$c )):named a18 ))
(assert (! (forall ((?v0 N_N_sum$ ))(member$a ?v0 top$d )):named a19 ))
(assert (! (forall ((?v0 N_option$ ))(member$ ?v0 top$e )):named a20 ))
(assert (! (forall ((?v0 N$ ))(member$b ?v0 top$ )):named a21 ))
(assert (! (forall ((?v0 N_option$ ))(! (= (fun_app$ top$f ?v0 )top$g ):pattern ((fun_app$ top$f ?v0 )))):named a22 ))
(assert (! (forall ((?v0 N_N_sum$ ))(! (= (fun_app$a top$h ?v0 )top$g ):pattern ((fun_app$a top$h ?v0 )))):named a23 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$b top$i ?v0 )top$g ):pattern ((fun_app$b top$i ?v0 )))):named a24 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(= (reg$ ?v0 ?v1 )(forall ((?v2 Dtree$ ))(=> (fun_app$c (fun_app$d (fun_app$e subtr$ top$ )?v2 )?v1 )(= ?v2 (fun_app$f ?v0 (fun_app$g root$ ?v2 ))))))):named a25 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$g hsubst_r$ ?v0 )(fun_app$g root$ ?v0 )):pattern ((fun_app$g hsubst_r$ ?v0 )))):named a26 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$g root$ (deftr$ ?v0 ))?v0 )):named a27 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(= (reg$ ?v0 ?v1 )(forall ((?v2 N_set$ )(?v3 Dtree$ ))(=> (fun_app$c (fun_app$d (fun_app$e subtr$ ?v2 )?v3 )?v1 )(= ?v3 (fun_app$f ?v0 (fun_app$g root$ ?v3 ))))))):named a28 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$b (fun_app$h (inItr$ ?v0 )?v1 )?v2 )(exists ((?v3 Dtree$ ))(and (fun_app$c (fun_app$d (fun_app$e subtr$ ?v0 )?v3 )?v1 )(= (fun_app$g root$ ?v3 )?v2 ))))):named a29 ))
(assert (! (forall ((?v0 N_N_sum_N_sum_set$ ))(=> (forall ((?v1 N_N_sum_N_sum$ ))(member$c ?v1 ?v0 ))(= top$a ?v0 ))):named a30 ))
(assert (! (forall ((?v0 N_N_option_sum_set$ ))(=> (forall ((?v1 N_N_option_sum$ ))(member$d ?v1 ?v0 ))(= top$b ?v0 ))):named a31 ))
(assert (! (forall ((?v0 N_N_N_sum_sum_set$ ))(=> (forall ((?v1 N_N_N_sum_sum$ ))(member$e ?v1 ?v0 ))(= top$c ?v0 ))):named a32 ))
(assert (! (forall ((?v0 N_N_sum_set$ ))(=> (forall ((?v1 N_N_sum$ ))(member$a ?v1 ?v0 ))(= top$d ?v0 ))):named a33 ))
(assert (! (forall ((?v0 N_option_set$ ))(=> (forall ((?v1 N_option$ ))(member$ ?v1 ?v0 ))(= top$e ?v0 ))):named a34 ))
(assert (! (forall ((?v0 N_set$ ))(=> (forall ((?v1 N$ ))(member$b ?v1 ?v0 ))(= top$ ?v0 ))):named a35 ))
(assert (! (exists ((?v0 N_N_sum_N_sum$ ))(member$c ?v0 top$a )):named a36 ))
(assert (! (exists ((?v0 N_N_option_sum$ ))(member$d ?v0 top$b )):named a37 ))
(assert (! (exists ((?v0 N_N_N_sum_sum$ ))(member$e ?v0 top$c )):named a38 ))
(assert (! (exists ((?v0 N_N_sum$ ))(member$a ?v0 top$d )):named a39 ))
(assert (! (exists ((?v0 N_option$ ))(member$ ?v0 top$e )):named a40 ))
(assert (! (exists ((?v0 N$ ))(member$b ?v0 top$ )):named a41 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(=> (reg$ ?v0 ?v1 )(= (fun_app$f ?v0 (fun_app$g root$ ?v1 ))?v1 ))):named a42 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$g root$ (fun_app$i (hsubst$ ?v0 )?v1 ))(fun_app$g root$ ?v1 ))):named a43 ))
(assert (! (= top$a (collect$ top$j )):named a44 ))
(assert (! (= top$b (collect$a top$k )):named a45 ))
(assert (! (= top$c (collect$b top$l )):named a46 ))
(assert (! (= top$d (collect$c top$h )):named a47 ))
(assert (! (= top$e (collect$d top$f )):named a48 ))
(assert (! (= top$ (collect$e top$i )):named a49 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 ))(= (fun_app$i (hsubst$ ?v1 )?v0 )(fun_app$i (hsubst$ ?v1 )?v1 )))):named a50 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (fun_app$g root$ ?v0 )?v1 )(fun_app$b (fun_app$h (inItr$ ?v1 )?v0 )(fun_app$g root$ ?v0 )))):named a51 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$b (fun_app$h (inItr$ ?v0 )?v1 )?v2 )(member$b (fun_app$g root$ ?v1 )?v0 ))):named a52 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (fun_app$b (fun_app$h (inItr$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d (fun_app$e subtr$ ?v0 )?v1 )?v3 ))(fun_app$b (fun_app$h (inItr$ ?v0 )?v3 )?v2 ))):named a53 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(and (reg$ ?v1 ?v0 )(forall ((?v2 N$ ))(= (fun_app$g root$ (fun_app$f ?v1 ?v2 ))?v2 )))))):named a54 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(reg$ ?v1 ?v0 )))):named a55 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst$ ?v0 )(fun_app$j (unfold$ hsubst_r$ )(hsubst_c$ ?v0 ))):pattern ((hsubst$ ?v0 )))):named a56 ))
(assert (! (forall ((?v0 N_N_sum_N_sum$ ))(! (= (fun_app$k top$j ?v0 )(member$c ?v0 top$a )):pattern ((fun_app$k top$j ?v0 )))):named a57 ))
(assert (! (forall ((?v0 N_N_option_sum$ ))(! (= (fun_app$l top$k ?v0 )(member$d ?v0 top$b )):pattern ((fun_app$l top$k ?v0 )))):named a58 ))
(assert (! (forall ((?v0 N_N_N_sum_sum$ ))(! (= (fun_app$m top$l ?v0 )(member$e ?v0 top$c )):pattern ((fun_app$m top$l ?v0 )))):named a59 ))
(assert (! (forall ((?v0 N_N_sum$ ))(! (= (fun_app$a top$h ?v0 )(member$a ?v0 top$d )):pattern ((fun_app$a top$h ?v0 )))):named a60 ))
(assert (! (forall ((?v0 N_option$ ))(! (= (fun_app$ top$f ?v0 )(member$ ?v0 top$e )):pattern ((fun_app$ top$f ?v0 )))):named a61 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$b top$i ?v0 )(member$b ?v0 top$ )):pattern ((fun_app$b top$i ?v0 )))):named a62 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$n (fun_app$o (fun_app$p inFr$ ?v0 )?v1 )?v2 )(not (member$b (fun_app$g root$ ?v3 )?v0 )))(fun_app$n (fun_app$o (fun_app$p inFr$ ?v0 )(fun_app$i (hsubst$ ?v3 )?v1 ))?v2 ))):named a63 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$q (comp$ root$ )(hsubst$ ?v0 ))root$ )):named a64 ))
(assert (! (forall ((?v0 N$ ))(wf$ (deftr$ ?v0 ))):named a65 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$n (fun_app$o (fun_app$p inFr2$ ?v0 )?v1 )?v2 )(member$b (fun_app$g root$ ?v1 )?v0 ))):named a66 ))
(assert (! (= subtr$ subtr2$ ):named a67 ))
(assert (! (finite$ top$ ):named a68 ))
(assert (! (forall ((?v0 N_option$ ))(fun_app$ top$f ?v0 )):named a69 ))
(assert (! (forall ((?v0 N_N_sum$ ))(fun_app$a top$h ?v0 )):named a70 ))
(assert (! (forall ((?v0 N$ ))(fun_app$b top$i ?v0 )):named a71 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$c (fun_app$d (fun_app$e subtr2$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d (fun_app$e subtr2$ ?v0 )?v2 )?v3 ))(fun_app$c (fun_app$d (fun_app$e subtr2$ ?v0 )?v1 )?v3 ))):named a72 ))
(assert (! (= inFr$ inFr2$ ):named a73 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$n (fun_app$o (fun_app$p inFr$ ?v0 )?v1 )?v2 )(member$b (fun_app$g root$ ?v1 )?v0 ))):named a74 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$b (fun_app$g root$ ?v0 )?v1 ))(not (fun_app$n (fun_app$o (fun_app$p inFr$ ?v1 )?v0 )?v2 )))):named a75 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$n (fun_app$o (fun_app$p inFr$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d (fun_app$e subtr$ ?v0 )?v1 )?v3 ))(fun_app$n (fun_app$o (fun_app$p inFr$ ?v0 )?v3 )?v2 ))):named a76 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(fun_app$c (fun_app$d (fun_app$e subtr$ ?v1 )?v2 )?v0 ))(wf$ ?v2 ))):named a77 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$c (fun_app$d (fun_app$e subtr2$ ?v0 )?v1 )?v2 )(member$b (fun_app$g root$ ?v2 )?v0 ))):named a78 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$c (fun_app$d (fun_app$e subtr2$ ?v0 )?v1 )?v2 )(member$b (fun_app$g root$ ?v1 )?v0 ))):named a79 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (fun_app$g root$ ?v0 )?v1 )(fun_app$c (fun_app$d (fun_app$e subtr2$ ?v1 )?v0 )?v0 ))):named a80 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(wf$ ?v1 ))(wf$ (fun_app$i (hsubst$ ?v0 )?v1 )))):named a81 ))
(assert (! (= (finite$a top$d )(and (finite$ top$ )(finite$ top$ ))):named a82 ))
(assert (! (= (finite$b top$b )(and (finite$ top$ )(finite$c top$e ))):named a83 ))
(assert (! (= (finite$d top$m )(and (finite$c top$e )(finite$ top$ ))):named a84 ))
(assert (! (= (finite$e top$c )(and (finite$ top$ )(finite$a top$d ))):named a85 ))
(assert (! (= (finite$f top$a )(and (finite$a top$d )(finite$ top$ ))):named a86 ))
(assert (! (= (finite$g top$n )(and (finite$c top$e )(finite$c top$e ))):named a87 ))
(assert (! (= (finite$h top$o )(and (finite$a top$d )(finite$c top$e ))):named a88 ))
(assert (! (= (finite$i top$p )(and (finite$c top$e )(finite$a top$d ))):named a89 ))
(assert (! (= (finite$j top$q )(and (finite$a top$d )(finite$a top$d ))):named a90 ))
(assert (! (= (finite$k top$r )(and (finite$ top$ )(finite$b top$b ))):named a91 ))
(assert (! (forall ((?v0 N_option_bool_fun$ )(?v1 N_option_bool_fun$ ))(=> (forall ((?v2 N_option$ ))(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(= (collect$d ?v0 )(collect$d ?v1 )))):named a92 ))
(assert (! (forall ((?v0 N_N_sum_bool_fun$ )(?v1 N_N_sum_bool_fun$ ))(=> (forall ((?v2 N_N_sum$ ))(= (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 )))(= (collect$c ?v0 )(collect$c ?v1 )))):named a93 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_bool_fun$ ))(=> (forall ((?v2 N$ ))(= (fun_app$b ?v0 ?v2 )(fun_app$b ?v1 ?v2 )))(= (collect$e ?v0 )(collect$e ?v1 )))):named a94 ))
(assert (! (forall ((?v0 N_option_set$ ))(= (collect$d (uu$ ?v0 ))?v0 )):named a95 ))
(assert (! (forall ((?v0 N_N_sum_set$ ))(= (collect$c (uua$ ?v0 ))?v0 )):named a96 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$e (uub$ ?v0 ))?v0 )):named a97 ))
(assert (! (forall ((?v0 N_option$ )(?v1 N_option_bool_fun$ ))(= (member$ ?v0 (collect$d ?v1 ))(fun_app$ ?v1 ?v0 ))):named a98 ))
(assert (! (forall ((?v0 N_N_sum$ )(?v1 N_N_sum_bool_fun$ ))(= (member$a ?v0 (collect$c ?v1 ))(fun_app$a ?v1 ?v0 ))):named a99 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$b ?v0 (collect$e ?v1 ))(fun_app$b ?v1 ?v0 ))):named a100 ))
(assert (! (= (finite$l top$s )(finite$h top$o )):named a101 ))
(assert (! (= (finite$m top$t )(finite$j top$q )):named a102 ))
(assert (! (= (finite$n top$u )(finite$f top$a )):named a103 ))
(assert (! (= (finite$o top$v )(finite$b top$b )):named a104 ))
(assert (! (= (finite$p top$w )(finite$e top$c )):named a105 ))
(assert (! (= (finite$q top$x )(finite$a top$d )):named a106 ))
(assert (! (= (finite$r top$y )(finite$c top$e )):named a107 ))
(assert (! (= (finite$c top$e )(finite$ top$ )):named a108 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_T_dtree_sum_set_fun$ )(?v2 Dtree$ ))(= (fun_app$g root$ (fun_app$i (fun_app$j (unfold$ ?v0 )?v1 )?v2 ))(fun_app$g ?v0 ?v2 ))):named a109 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$g (fun_app$q (comp$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$q (comp$ ?v0 )?v1 )?v2 )))):named a110 ))
(check-sat )
;(get-unsat-core )
