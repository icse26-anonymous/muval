;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_list$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-sort T_dtree_sum_list$ 0)
(declare-fun nil$ ()N_list$)
(declare-fun hd$ (N_list$)N$)
(declare-fun tl$ (N_list$)N_list$)
(declare-fun cons$ (N$ N_list$ )N_list$)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun nil$a ()T_dtree_sum_list$)
(declare-fun hd$a (T_dtree_sum_list$)T_dtree_sum$)
(declare-fun tl$a (T_dtree_sum_list$)T_dtree_sum_list$)
(declare-fun cons$a (T_dtree_sum$ T_dtree_sum_list$ )T_dtree_sum_list$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun t$ ()T$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun last$ (N_list$ )N$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun set$a (T_dtree_sum_list$ )T_dtree_sum_set$ )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun distinct$ (N_list$ )Bool )
(declare-fun less_eq$a (T_dtree_sum_set$ T_dtree_sum_set$ )Bool )
(assert (! (not (exists ((?v0 N_list$ )(?v1 Dtree$ ))(and (distinct$ ?v0 )(and (path$ f$ ?v0 )(and (= (fun_app$ f$ (hd$ ?v0 ))tr$ )(and (= (fun_app$ f$ (last$ ?v0 ))?v1 )(and (less_eq$ (set$ ?v0 )ns$ )(member$ (inl$ t$ )(cont$ ?v1 ))))))))):named a0 ))
(assert (! (inFr$ ns$ tr$ t$ ):named a1 ))
(assert (! (reg$ f$ tr$ ):named a2 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 N_set$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(less_eq$ ?v0 ?v3 ))(inFr$ ?v3 ?v1 ?v2 ))):named a3 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(=> (path$ ?v0 ?v1 )(exists ((?v2 N_list$ ))(and (path$ ?v0 ?v2 )(and (= (hd$ ?v2 )(hd$ ?v1 ))(and (= (last$ ?v2 )(last$ ?v1 ))(and (less_eq$ (set$ ?v2 )(set$ ?v1 ))(distinct$ ?v2 )))))))):named a4 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ ))(=> (forall ((?v2 T_dtree_sum$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$a ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (forall ((?v2 N$ ))(=> (member$a ?v2 ?v0 )(member$a ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ ))(=> (and (less_eq$a ?v0 ?v1 )(less_eq$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(less_eq$a ?v0 ?v0 )):named a11 ))
(assert (! (forall ((?v0 N_set$ ))(less_eq$ ?v0 ?v0 )):named a12 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (fun_app$ f$ ?v0 ))?v0 )):named a13 ))
(assert (! (forall ((?v0 T_dtree_sum_list$ )(?v1 T_dtree_sum_set$ ))(= (less_eq$a (set$a ?v0 )?v1 )(forall ((?v2 T_dtree_sum$ ))(=> (member$ ?v2 (set$a ?v0 ))(member$ ?v2 ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_set$ ))(= (less_eq$ (set$ ?v0 )?v1 )(forall ((?v2 N$ ))(=> (member$a ?v2 (set$ ?v0 ))(member$a ?v2 ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ )(?v2 N_set$ )(?v3 Dtree$ ))(=> (and (reg$ ?v0 ?v1 )(subtr$ ?v2 ?v3 ?v1 ))(exists ((?v4 N_list$ ))(and (distinct$ ?v4 )(and (path$ ?v0 ?v4 )(and (= (fun_app$ ?v0 (hd$ ?v4 ))?v1 )(and (= (fun_app$ ?v0 (last$ ?v4 ))?v3 )(less_eq$ (set$ ?v4 )?v2 )))))))):named a16 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ )(?v2 N_set$ )(?v3 Dtree$ ))(=> (and (reg$ ?v0 ?v1 )(subtr$ ?v2 ?v3 ?v1 ))(exists ((?v4 N_list$ ))(and (path$ ?v0 ?v4 )(and (= (fun_app$ ?v0 (hd$ ?v4 ))?v1 )(and (= (fun_app$ ?v0 (last$ ?v4 ))?v3 )(less_eq$ (set$ ?v4 )?v2 ))))))):named a17 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr$ ?v0 ?v1 ?v2 )(exists ((?v3 Dtree$ ))(and (subtr$ ?v0 ?v3 ?v1 )(member$ (inl$ ?v2 )(cont$ ?v3 )))))):named a18 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(=> (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$a (root$ ?v0 )?v1 )(member$ (inl$ ?v2 )(cont$ ?v0 )))(inFr$ ?v1 ?v0 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(= (reg$ ?v0 ?v1 )(forall ((?v2 N_set$ )(?v3 Dtree$ ))(=> (subtr$ ?v2 ?v3 ?v1 )(= ?v3 (fun_app$ ?v0 (root$ ?v3 ))))))):named a21 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v2 ?v3 ))(subtr$ ?v0 ?v1 ?v3 ))):named a22 ))
(check-sat )
;(get-unsat-core )
