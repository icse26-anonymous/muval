;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_list$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-fun nil$ ()N_list$)
(declare-fun hd$ (N_list$)N$)
(declare-fun tl$ (N_list$)N_list$)
(declare-fun cons$ (N$ N_list$ )N_list$)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun n1$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun nla$ ()N_list$ )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun append$ (N_list$ N_list$ )N_list$ )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(assert (! (not (= (last$ (cons$ n$ (cons$ n1$ nla$ )))(last$ (cons$ n1$ nla$ )))):named a0 ))
(assert (! (path$ f$ (cons$ n1$ nla$ )):named a1 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ )(?v3 N_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a3 ))
(assert (! (subtr$ (insert$ n$ (insert$ n1$ (set$ nla$ )))(fun_app$ f$ (last$ (cons$ n1$ nla$ )))(fun_app$ f$ n1$ )):named a4 ))
(assert (! (member$ (inr$ (fun_app$ f$ n1$ ))(cont$ (fun_app$ f$ n$ ))):named a5 ))
(assert (! (subtr$ (set$ (cons$ n1$ nla$ ))(fun_app$ f$ (last$ (cons$ n1$ nla$ )))(fun_app$ f$ (hd$ (cons$ n1$ nla$ )))):named a6 ))
(assert (! (subtr$ (insert$ n1$ (set$ nla$ ))(fun_app$ f$ (last$ (cons$ n1$ nla$ )))(fun_app$ f$ n1$ )):named a7 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ )(?v2 N_list$ ))(=> (and (path$ ?v0 ?v1 )(path$ ?v0 (cons$ (last$ ?v1 )?v2 )))(path$ ?v0 (append$ ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (= (last$ (cons$ ?v0 ?v1 ))(ite (= ?v1 nil$ )?v0 (last$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N$ ))(! (=> (= ?v0 nil$ )(= (last$ (cons$ ?v1 ?v0 ))?v1 )):pattern ((cons$ ?v1 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N$ ))(! (=> (not (= ?v0 nil$ ))(= (last$ (cons$ ?v1 ?v0 ))(last$ ?v0 ))):pattern ((cons$ ?v1 ?v0 )))):named a11 ))
(assert (! (path$ f$ nl$ ):named a12 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ )(?v2 N_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ )(?v2 N_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ )(?v2 N_list$ ))(= (append$ (append$ ?v0 ?v1 )?v2 )(append$ ?v0 (append$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ ))(= (= (append$ ?v0 ?v1 )?v1 )(= ?v0 nil$ ))):named a16 ))
(check-sat )
;(get-unsat-core )
