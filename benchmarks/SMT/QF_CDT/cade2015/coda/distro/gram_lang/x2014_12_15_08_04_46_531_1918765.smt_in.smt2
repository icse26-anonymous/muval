;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun ns$ ()N_set$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tr2$ ()Dtree$ )
(declare-fun tr3$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun inFr2$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun fun_app$ (T_bool_fun$ T$ )Bool )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$a (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun fun_app$b (N_set_dtree_T_bool_fun_fun_fun$ N_set$ )Dtree_T_bool_fun_fun$ )
(assert (! (not (member$ (root$ tr2$ )ns$ )):named a0 ))
(assert (! (member$ (root$ tr1$ )ns$ ):named a1 ))
(assert (! (subtr$ ns$ tr2$ tr3$ ):named a2 ))
(assert (! (member$a (inr$ tr1$ )(cont$ tr2$ )):named a3 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (inItr$ ?v0 ?v1 ?v2 )(member$ (root$ ?v1 )?v0 ))):named a4 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (root$ ?v0 )?v1 )(inItr$ ?v1 ?v0 (root$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$ (fun_app$a (fun_app$b inFr2$ ?v0 )?v1 )?v2 )(member$ (root$ ?v1 )?v0 ))):named a6 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$ (fun_app$a (fun_app$b inFr$ ?v0 )?v1 )?v2 )(member$ (root$ ?v1 )?v0 ))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$ (root$ ?v0 )?v1 ))(not (fun_app$ (fun_app$a (fun_app$b inFr$ ?v1 )?v0 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$ (root$ ?v2 )?v0 ))):named a9 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$ (root$ ?v1 )?v0 ))):named a10 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (root$ ?v0 )?v1 )(subtr$ ?v1 ?v0 ?v0 ))):named a11 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (root$ (node$ ?v0 ?v1 ))?v0 )):named a12 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (root$ ?v0 )(cont$ ?v0 ))?v0 )):named a13 ))
(assert (! (= inFr$ inFr2$ ):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v2 ?v3 ))(subtr$ ?v0 ?v1 ?v3 ))):named a15 ))
(check-sat )
;(get-unsat-core )
