;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort N_list$ 0)
(declare-fun nil$ ()N_list$)
(declare-fun hd$ (N_list$)N$)
(declare-fun tl$ (N_list$)N_list$)
(declare-fun cons$ (N$ N_list$ )N_list$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun n1$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun nl1$ ()N_list$ )
(declare-fun nl2$ ()N_list$ )
(declare-fun nla$ ()N_list$ )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun nl1$a ()N_list$ )
(declare-fun nl2$a ()N_list$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun member$ (N$ N_set$ )Bool )
(assert (! (not (path$ f$ (cons$ n$ (cons$ n1$ nl2$ )))):named a0 ))
(assert (! (path$ f$ nl$ ):named a1 ))
(assert (! (path$ f$ nl1$ ):named a2 ))
(assert (! (= nl1$ (cons$ n1$ nl2$ )):named a3 ))
(assert (! (= nl1$a (cons$ n1$ nl2$a )):named a4 ))
(assert (! (path$ f$ nla$ ):named a5 ))
(assert (! (=> (forall ((?v0 N$ )(?v1 N_list$ ))(=> (= nla$ (cons$ ?v0 ?v1 ))false ))false ):named a6 ))
(assert (! (=> (forall ((?v0 N_list$ ))(=> (= nl1$ (cons$ n1$ ?v0 ))false ))false ):named a7 ))
(assert (! (path$ f$ nl1$a ):named a8 ))
(assert (! (= nla$ (cons$ n$ nl1$a )):named a9 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ )(?v3 N_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (not (member$ n$ (set$ nl1$a ))):named a11 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ )(?v2 N_list$ ))(=> (and (path$ ?v0 (cons$ ?v1 ?v2 ))(not (= ?v2 nil$ )))(path$ ?v0 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ ))(path$ ?v0 (cons$ ?v1 nil$ ))):named a14 ))
(assert (! (path$ f$ nla$ ):named a15 ))
(assert (! (= (last$ nl1$ )(last$ nl1$a )):named a16 ))
(check-sat )
;(get-unsat-core )
