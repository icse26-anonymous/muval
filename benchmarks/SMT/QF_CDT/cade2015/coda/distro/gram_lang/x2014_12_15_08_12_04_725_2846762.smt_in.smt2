;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort N_list$ 0)
(declare-fun nil$ ()N_list$)
(declare-fun hd$ (N_list$)N$)
(declare-fun tl$ (N_list$)N_list$)
(declare-fun cons$ (N$ N_list$ )N_list$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun n1$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun nl1$ ()N_list$ )
(declare-fun nl2$ ()N_list$ )
(declare-fun nla$ ()N_list$ )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun nl1$a ()N_list$ )
(declare-fun nl2$a ()N_list$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun distinct$ (N_list$ )Bool )
(assert (! (not (and (path$ f$ (cons$ n$ nl1$ ))(and (= (hd$ (cons$ n$ nl1$ ))(hd$ (cons$ n$ nl1$a )))(and (= (last$ (cons$ n$ nl1$ ))(last$ (cons$ n$ nl1$a )))(and (less_eq$ (set$ (cons$ n$ nl1$ ))(set$ (cons$ n$ nl1$a )))(distinct$ (cons$ n$ nl1$ ))))))):named a0 ))
(assert (! (distinct$ nl1$ ):named a1 ))
(assert (! (path$ f$ nl$ ):named a2 ))
(assert (! (path$ f$ nl1$ ):named a3 ))
(assert (! (= (last$ nl1$ )(last$ nl1$a )):named a4 ))
(assert (! (= (hd$ nl1$ )(hd$ nl1$a )):named a5 ))
(assert (! (not (member$ n$ (set$ nl1$a ))):named a6 ))
(assert (! (less_eq$ (set$ nl1$ )(set$ nl1$a )):named a7 ))
(assert (! (path$ f$ nla$ ):named a8 ))
(assert (! (= nl1$a (cons$ n1$ nl2$ )):named a9 ))
(assert (! (= nl1$ (cons$ n1$ nl2$a )):named a10 ))
(assert (! (path$ f$ nl1$a ):named a11 ))
(assert (! (= nla$ (cons$ n$ nl1$a )):named a12 ))
(assert (! (=> (forall ((?v0 N_list$ ))(=> (and (path$ f$ ?v0 )(and (= (hd$ ?v0 )(hd$ nl1$a ))(and (= (last$ ?v0 )(last$ nl1$a ))(and (distinct$ ?v0 )(less_eq$ (set$ ?v0 )(set$ nl1$a ))))))false ))false ):named a13 ))
(assert (! (=> (forall ((?v0 N_list$ ))(=> (= nl1$ (cons$ n1$ ?v0 ))false ))false ):named a14 ))
(assert (! (path$ f$ nla$ ):named a15 ))
(assert (! (=> (forall ((?v0 N$ )(?v1 N_list$ ))(=> (= nla$ (cons$ ?v0 ?v1 ))false ))false ):named a16 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (= (distinct$ (cons$ ?v0 ?v1 ))(and (not (member$ ?v0 (set$ ?v1 )))(distinct$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
