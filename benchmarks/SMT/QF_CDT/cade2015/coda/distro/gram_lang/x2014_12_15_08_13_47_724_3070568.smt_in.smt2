;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort N_T_N_sum_fun$ 0 )
(declare-sort T_N_sum_N_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_fun$ 0 )
(declare-sort N_N_sum_N_N_sum_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_fun_T_T_fun_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_N_sum_N_N_sum_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_N_sum_N_dtree_sum_fun$ 0 )
(declare-sort N_N_sum_dtree_N_sum_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort N_dtree_sum_N_N_sum_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_N_sum_N_dtree_sum_fun$ 0 )
(declare-sort Dtree_N_sum_dtree_N_sum_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_N_sum_fun$ 0 )
(declare-sort N_N_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_sum_N_dtree_sum_fun$ 0 )
(declare-sort N_dtree_sum_dtree_N_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_dtree_sum_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_N_sum_fun$ 0 )
(declare-sort N_N_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort N_T_dtree_sum_fun_N_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_T_dtree_sum_fun_N_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_N_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_N_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_N_sum$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-sort T_T_sum$ 0)
(declare-sort Dtree_dtree_sum$ 0)
(declare-sort N_N_sum$ 0)
(declare-sort Dtree_N_sum$ 0)
(declare-sort N_dtree_sum$ 0)
(declare-fun projl$ (T_N_sum$)T$)
(declare-fun inl$ (T$ )T_N_sum$)
(declare-fun projr$ (T_N_sum$)N$)
(declare-fun inr$ (N$ )T_N_sum$)
(declare-fun projl$a (T_dtree_sum$)T$)
(declare-fun inl$a (T$ )T_dtree_sum$)
(declare-fun projr$a (T_dtree_sum$)Dtree$)
(declare-fun inr$a (Dtree$ )T_dtree_sum$)
(declare-fun projl$b (T_T_sum$)T$)
(declare-fun inl$b (T$ )T_T_sum$)
(declare-fun projr$b (T_T_sum$)T$)
(declare-fun inr$b (T$ )T_T_sum$)
(declare-fun projl$c (Dtree_dtree_sum$)Dtree$)
(declare-fun inl$c (Dtree$ )Dtree_dtree_sum$)
(declare-fun projr$c (Dtree_dtree_sum$)Dtree$)
(declare-fun inr$c (Dtree$ )Dtree_dtree_sum$)
(declare-fun projl$d (N_N_sum$)N$)
(declare-fun inl$d (N$ )N_N_sum$)
(declare-fun projr$d (N_N_sum$)N$)
(declare-fun inr$d (N$ )N_N_sum$)
(declare-fun projl$e (Dtree_N_sum$)Dtree$)
(declare-fun inl$e (Dtree$ )Dtree_N_sum$)
(declare-fun projr$e (Dtree_N_sum$)N$)
(declare-fun inr$e (N$ )Dtree_N_sum$)
(declare-fun projl$f (N_dtree_sum$)N$)
(declare-fun inl$f (N$ )N_dtree_sum$)
(declare-fun projr$f (N_dtree_sum$)Dtree$)
(declare-fun inr$f (Dtree$ )N_dtree_sum$)
(declare-fun h$ (Dtree$ )N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun x$ ()T_dtree_sum$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun uu$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun h_c$ (Dtree$ )N_T_N_sum_set_fun$ )
(declare-fun h_r$ (Dtree$ )N_N_fun$ )
(declare-fun id$a ()N_N_fun$ )
(declare-fun id$b ()Dtree_dtree_fun$ )
(declare-fun id$c ()T_T_sum_T_T_sum_fun$ )
(declare-fun id$d ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun id$e ()T_set_T_set_fun$ )
(declare-fun id$f ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$g ()Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun uua$ (N_set$ )N_bool_fun$ )
(declare-fun comp$ (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ )N_dtree_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun top$a ()Dtree_set$ )
(declare-fun top$b ()T_dtree_sum_set$ )
(declare-fun top$c ()T_N_sum_set$ )
(declare-fun top$d ()T_set$ )
(declare-fun comp$a (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$b (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$c (T_T_fun$ )T_T_fun_T_T_fun_fun$ )
(declare-fun comp$d (T_N_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$e (T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$f (T_N_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$g (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$h (T_dtree_sum_T_N_sum_fun$ )N_T_dtree_sum_fun_N_T_N_sum_fun_fun$ )
(declare-fun comp$i (T_dtree_sum_T_dtree_sum_fun$ )N_T_dtree_sum_fun_N_T_dtree_sum_fun_fun$ )
(declare-fun comp$j (N_N_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun comp$k (T_N_sum_N_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_N_fun_fun$ )
(declare-fun comp$l (T_dtree_sum_N_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_N_fun_fun$ )
(declare-fun comp$m (N_T_N_sum_fun$ )T_dtree_sum_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$n (N_T_dtree_sum_fun$ )T_dtree_sum_N_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$o (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun comp$p (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$q (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$r (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$s (N_N_sum_N_N_sum_fun$ Dtree_dtree_sum_N_N_sum_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun comp$t (N_dtree_sum_N_N_sum_fun$ Dtree_N_sum_N_dtree_sum_fun$ )Dtree_N_sum_N_N_sum_fun$ )
(declare-fun comp$u (N_N_sum_N_dtree_sum_fun$ Dtree_dtree_sum_N_N_sum_fun$ )Dtree_dtree_sum_N_dtree_sum_fun$ )
(declare-fun comp$v (Dtree_N_sum_N_N_sum_fun$ N_dtree_sum_dtree_N_sum_fun$ )N_dtree_sum_N_N_sum_fun$ )
(declare-fun comp$w (Dtree_dtree_sum_N_N_sum_fun$ N_N_sum_dtree_dtree_sum_fun$ )N_N_sum_N_N_sum_fun$ )
(declare-fun comp$x (Dtree_N_sum_N_dtree_sum_fun$ N_dtree_sum_dtree_N_sum_fun$ )N_dtree_sum_N_dtree_sum_fun$ )
(declare-fun comp$y (N_N_sum_dtree_N_sum_fun$ Dtree_dtree_sum_N_N_sum_fun$ )Dtree_dtree_sum_dtree_N_sum_fun$ )
(declare-fun comp$z (N_dtree_sum_dtree_N_sum_fun$ Dtree_N_sum_N_dtree_sum_fun$ )Dtree_N_sum_dtree_N_sum_fun$ )
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun comp$aa (N_N_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum_N_N_sum_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun finite$ (T_N_sum_set$ )Bool )
(declare-fun image$a (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$b (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun image$c (Dtree_N_fun$ Dtree_set$ )N_set$ )
(declare-fun image$d (N_N_fun$ N_set$ )N_set$ )
(declare-fun image$e (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun image$f (N_dtree_fun$ N_set$ )Dtree_set$ )
(declare-fun image$g (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun image$h (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$i (N_T_N_sum_fun$ N_set$ )T_N_sum_set$ )
(declare-fun image$j (N_T_dtree_sum_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun image$k (T_N_sum_N_fun$ T_N_sum_set$ )N_set$ )
(declare-fun image$l (T_dtree_sum_N_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun collect$ (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun map_sum$ (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun member$b (Dtree$ Dtree_set$ )Bool )
(declare-fun collect$a (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$b (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$c (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$d (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$e (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$f (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$g (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$h (N_N_fun$ N$ )N$ )
(declare-fun fun_app$i (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(declare-fun fun_app$j (T_T_fun$ T$ )T$ )
(declare-fun fun_app$k (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$l (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$m (N_T_N_sum_set_fun$ N$ )T_N_sum_set$ )
(declare-fun fun_app$n (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$o (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$p (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$q (N_N_sum_N_N_sum_fun$ N_N_sum$ )N_N_sum$ )
(declare-fun fun_app$r (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum$ )N_N_sum$ )
(declare-fun fun_app$s (N_dtree_sum_N_N_sum_fun$ N_dtree_sum$ )N_N_sum$ )
(declare-fun fun_app$t (Dtree_N_sum_N_dtree_sum_fun$ Dtree_N_sum$ )N_dtree_sum$ )
(declare-fun fun_app$u (Dtree_N_sum_N_N_sum_fun$ Dtree_N_sum$ )N_N_sum$ )
(declare-fun fun_app$v (N_N_sum_N_dtree_sum_fun$ N_N_sum$ )N_dtree_sum$ )
(declare-fun fun_app$w (Dtree_dtree_sum_N_dtree_sum_fun$ Dtree_dtree_sum$ )N_dtree_sum$ )
(declare-fun fun_app$x (N_dtree_sum_dtree_N_sum_fun$ N_dtree_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$y (N_N_sum_dtree_dtree_sum_fun$ N_N_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$z (N_dtree_sum_N_dtree_sum_fun$ N_dtree_sum$ )N_dtree_sum$ )
(declare-fun map_sum$a (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun map_sum$b (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$c (N_N_fun$ N_N_fun$ )N_N_sum_N_N_sum_fun$ )
(declare-fun map_sum$d (Dtree_N_fun$ Dtree_N_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun map_sum$e (N_N_fun$ Dtree_N_fun$ )N_dtree_sum_N_N_sum_fun$ )
(declare-fun map_sum$f (Dtree_N_fun$ N_dtree_fun$ )Dtree_N_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$g (Dtree_N_fun$ N_N_fun$ )Dtree_N_sum_N_N_sum_fun$ )
(declare-fun map_sum$h (N_N_fun$ N_dtree_fun$ )N_N_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$i (Dtree_N_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$j (N_dtree_fun$ Dtree_N_fun$ )N_dtree_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$k (N_dtree_fun$ N_dtree_fun$ )N_N_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$l (N_N_fun$ Dtree_dtree_fun$ )N_dtree_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$m (N_dtree_fun$ N_N_fun$ )N_N_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$n (Dtree_dtree_fun$ Dtree_N_fun$ )Dtree_dtree_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$o (Dtree_dtree_fun$ N_N_fun$ )Dtree_N_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$p (Dtree_dtree_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$q (T_T_fun$ )N_N_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun fun_app$aa (N_N_sum_dtree_N_sum_fun$ N_N_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$ab (Dtree_dtree_sum_dtree_N_sum_fun$ Dtree_dtree_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$ac (Dtree_N_sum_dtree_N_sum_fun$ Dtree_N_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$ad (Dtree_dtree_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$ae (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$af (N_N_fun_T_N_sum_T_N_sum_fun_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$ag (T_T_fun_T_T_fun_fun$ T_T_fun$ )T_T_fun$ )
(declare-fun fun_app$ah (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$ai (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$aj (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$ak (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$al (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$am (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$an (N_T_dtree_sum_fun_N_T_N_sum_fun_fun$ N_T_dtree_sum_fun$ )N_T_N_sum_fun$ )
(declare-fun fun_app$ao (N_T_dtree_sum_fun_N_T_dtree_sum_fun_fun$ N_T_dtree_sum_fun$ )N_T_dtree_sum_fun$ )
(declare-fun fun_app$ap (T_set_T_set_fun$ T_set$ )T_set$ )
(declare-fun fun_app$aq (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$ar (N_N_fun_N_N_fun_fun$ N_N_fun$ )N_N_fun$ )
(declare-fun fun_app$as (T_dtree_sum_T_N_sum_fun_T_dtree_sum_N_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_N_fun$ )
(declare-fun fun_app$at (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_N_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_N_fun$ )
(declare-fun fun_app$au (T_dtree_sum_N_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$av (T_dtree_sum_N_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_N_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$aw (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$ax (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$ay (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$az (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$ba (N_T_dtree_sum_fun$ N$ )T_dtree_sum$ )
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (= (fun_app$b (fun_app$c (map_sum$ id$ )(fun_app$d (comp$ (fun_app$e (comp$a root$ )(h$ tr0$ )))root$ ))x$ )(fun_app$b (fun_app$c (map_sum$ id$ )root$ )x$ ))):named a2 ))
(assert (! (member$ x$ (cont$ (fun_app$f (pick$ tr0$ )n$ ))):named a3 ))
(assert (! (wf$ tr0$ ):named a4 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$g root$ (fun_app$f (h$ tr0$ )?v0 ))(fun_app$g root$ (fun_app$f (pick$ tr0$ )?v0 )))):named a5 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$h (h_r$ tr0$ )?v0 )(fun_app$g root$ (fun_app$f (pick$ tr0$ )?v0 ))):pattern ((fun_app$h (h_r$ tr0$ )?v0 )))):named a6 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (fun_app$g root$ (fun_app$f (h$ ?v0 )?v1 ))(fun_app$g root$ (fun_app$f (pick$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$d (comp$ id$a )?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$d (comp$ id$a )?v0 )?v0 )):named a9 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum$ ))(=> (and (fun_app$a (fun_app$i (inItr$ top$ )tr0$ )?v0 )(member$ ?v1 (cont$ (fun_app$f (pick$ tr0$ )?v0 ))))(= (fun_app$b (fun_app$c (map_sum$ id$ )(fun_app$d (comp$ (fun_app$e (comp$a root$ )(h$ tr0$ )))root$ ))?v1 )(fun_app$b (fun_app$c (map_sum$ id$ )root$ )?v1 )))):named a10 ))
(assert (! (fun_app$a (fun_app$i (inItr$ top$ )tr0$ )n$ ):named a11 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$j id$ ?v0 )?v0 ):pattern ((fun_app$j id$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$g (fun_app$d (comp$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$d (comp$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$h (fun_app$e (comp$a ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$e (comp$a ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$k (fun_app$l (comp$b ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$l (comp$b ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$m (h_c$ tr0$ )?v0 )(image$ (fun_app$c (map_sum$ id$ )root$ )(cont$ (fun_app$f (pick$ tr0$ )?v0 )))):pattern ((fun_app$m (h_c$ tr0$ )?v0 )))):named a16 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$n (map_sum$a id$ id$ )?v0 )?v0 )):named a17 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (fun_app$o (fun_app$p (map_sum$b id$ )id$b )?v0 )?v0 )):named a18 ))
(assert (! (= (map_sum$a id$ id$ )id$c ):named a19 ))
(assert (! (= (fun_app$p (map_sum$b id$ )id$b )id$d ):named a20 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$q (map_sum$c ?v0 ?v1 )(fun_app$r (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$r (map_sum$d (fun_app$d (comp$ ?v0 )?v2 )(fun_app$d (comp$ ?v1 )?v3 ))?v4 ))):named a22 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$s (map_sum$e ?v0 ?v1 )(fun_app$t (map_sum$f ?v2 ?v3 )?v4 ))(fun_app$u (map_sum$g (fun_app$d (comp$ ?v0 )?v2 )(fun_app$e (comp$a ?v1 )?v3 ))?v4 ))):named a23 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$v (map_sum$h ?v0 ?v1 )(fun_app$r (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$w (map_sum$i (fun_app$d (comp$ ?v0 )?v2 )(fun_app$l (comp$b ?v1 )?v3 ))?v4 ))):named a24 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$u (map_sum$g ?v0 ?v1 )(fun_app$x (map_sum$j ?v2 ?v3 )?v4 ))(fun_app$s (map_sum$e (fun_app$e (comp$a ?v0 )?v2 )(fun_app$d (comp$ ?v1 )?v3 ))?v4 ))):named a25 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_sum$ ))(= (fun_app$r (map_sum$d ?v0 ?v1 )(fun_app$y (map_sum$k ?v2 ?v3 )?v4 ))(fun_app$q (map_sum$c (fun_app$e (comp$a ?v0 )?v2 )(fun_app$e (comp$a ?v1 )?v3 ))?v4 ))):named a26 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$t (map_sum$f ?v0 ?v1 )(fun_app$x (map_sum$j ?v2 ?v3 )?v4 ))(fun_app$z (map_sum$l (fun_app$e (comp$a ?v0 )?v2 )(fun_app$l (comp$b ?v1 )?v3 ))?v4 ))):named a27 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$aa (map_sum$m ?v0 ?v1 )(fun_app$r (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$ab (map_sum$n (fun_app$l (comp$b ?v0 )?v2 )(fun_app$d (comp$ ?v1 )?v3 ))?v4 ))):named a28 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$x (map_sum$j ?v0 ?v1 )(fun_app$t (map_sum$f ?v2 ?v3 )?v4 ))(fun_app$ac (map_sum$o (fun_app$l (comp$b ?v0 )?v2 )(fun_app$e (comp$a ?v1 )?v3 ))?v4 ))):named a29 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$y (map_sum$k ?v0 ?v1 )(fun_app$r (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$ad (map_sum$p (fun_app$l (comp$b ?v0 )?v2 )(fun_app$l (comp$b ?v1 )?v3 ))?v4 ))):named a30 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$ae (fun_app$af (map_sum$q ?v0 )?v1 )(fun_app$b (fun_app$c (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$b (fun_app$c (map_sum$ (fun_app$ag (comp$c ?v0 )?v2 ))(fun_app$d (comp$ ?v1 )?v3 ))?v4 ))):named a31 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$i (inItr$ top$ )tr0$ )?v0 )(= (fun_app$g root$ (fun_app$f (pick$ tr0$ )?v0 ))?v0 ))):named a32 ))
(assert (! (forall ((?v0 N$ ))(=> (and (wf$ tr0$ )(fun_app$a (fun_app$i (inItr$ top$ )tr0$ )?v0 ))(wf$ (fun_app$f (pick$ tr0$ )?v0 )))):named a33 ))
(assert (! (= (image$a id$ )id$e ):named a34 ))
(assert (! (= (image$b id$d )id$f ):named a35 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$i (inItr$ top$ )tr0$ )?v0 )(= (fun_app$g root$ (fun_app$f (h$ tr0$ )?v0 ))?v0 ))):named a36 ))
(assert (! (= (h$ tr0$ )(fun_app$ah (unfold$ (h_r$ tr0$ ))(h_c$ tr0$ ))):named a37 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ ))(= (image$c (fun_app$d (comp$ ?v0 )?v1 )top$a )(image$d ?v0 (image$c ?v1 top$a )))):named a38 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ ))(= (image$e (fun_app$l (comp$b ?v0 )?v1 )top$a )(image$f ?v0 (image$c ?v1 top$a )))):named a39 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ ))(= (image$ (fun_app$ai (comp$d ?v0 )?v1 )top$b )(image$g ?v0 (image$ ?v1 top$b )))):named a40 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ ))(= (image$ (fun_app$aj (comp$e ?v0 )?v1 )top$b )(image$ ?v0 (fun_app$ak (image$b ?v1 )top$b )))):named a41 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ ))(= (fun_app$ak (image$b (fun_app$al (comp$f ?v0 )?v1 ))top$b )(image$h ?v0 (image$ ?v1 top$b )))):named a42 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ ))(= (fun_app$ak (image$b (fun_app$am (comp$g ?v0 )?v1 ))top$b )(fun_app$ak (image$b ?v0 )(fun_app$ak (image$b ?v1 )top$b )))):named a43 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ ))(= (image$d (fun_app$e (comp$a ?v0 )?v1 )top$ )(image$c ?v0 (image$f ?v1 top$ )))):named a44 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 N_T_dtree_sum_fun$ ))(= (image$i (fun_app$an (comp$h ?v0 )?v1 )top$ )(image$ ?v0 (image$j ?v1 top$ )))):named a45 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 N_T_dtree_sum_fun$ ))(= (image$j (fun_app$ao (comp$i ?v0 )?v1 )top$ )(fun_app$ak (image$b ?v0 )(image$j ?v1 top$ )))):named a46 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ ))(= (= (image$ ?v0 top$b )top$c )(forall ((?v1 T_N_sum$ ))(exists ((?v2 T_dtree_sum$ ))(= ?v1 (fun_app$b ?v0 ?v2 )))))):named a47 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ ))(= (= (fun_app$ak (image$b ?v0 )top$b )top$b )(forall ((?v1 T_dtree_sum$ ))(exists ((?v2 T_dtree_sum$ ))(= ?v1 (fun_app$o ?v0 ?v2 )))))):named a48 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (= (image$d ?v0 top$ )top$ )(forall ((?v1 N$ ))(exists ((?v2 N$ ))(= ?v1 (fun_app$h ?v0 ?v2 )))))):named a49 ))
(assert (! (= (fun_app$ap (image$a id$ )top$d )top$d ):named a50 ))
(assert (! (= (fun_app$ak (image$b id$d )top$b )top$b ):named a51 ))
(assert (! (= (image$d id$a top$ )top$ ):named a52 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (forall ((?v4 N$ )(?v5 N$ ))(=> (and (member$a ?v4 (image$c ?v0 top$a ))(and (member$a ?v5 (image$c ?v1 top$a ))(= (fun_app$h ?v2 ?v4 )(fun_app$h ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$d (comp$ ?v2 )?v0 )(fun_app$d (comp$ ?v3 )?v1 )))(= ?v0 ?v1 ))):named a53 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ ))(=> (and (forall ((?v4 N$ )(?v5 N$ ))(=> (and (member$a ?v4 (image$c ?v0 top$a ))(and (member$a ?v5 (image$c ?v1 top$a ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$l (comp$b ?v2 )?v0 )(fun_app$l (comp$b ?v3 )?v1 )))(= ?v0 ?v1 ))):named a54 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (forall ((?v4 Dtree$ )(?v5 Dtree$ ))(=> (and (member$b ?v4 (image$f ?v0 top$ ))(and (member$b ?v5 (image$f ?v1 top$ ))(= (fun_app$g ?v2 ?v4 )(fun_app$g ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$e (comp$a ?v2 )?v0 )(fun_app$e (comp$a ?v3 )?v1 )))(= ?v0 ?v1 ))):named a55 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$a ?v3 (image$c ?v0 top$a ))(= (fun_app$h ?v1 ?v3 )(fun_app$h ?v2 ?v3 ))))(= (fun_app$d (comp$ ?v1 )?v0 )(fun_app$d (comp$ ?v2 )?v0 )))):named a56 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$a ?v3 (image$c ?v0 top$a ))(= (fun_app$f ?v1 ?v3 )(fun_app$f ?v2 ?v3 ))))(= (fun_app$l (comp$b ?v1 )?v0 )(fun_app$l (comp$b ?v2 )?v0 )))):named a57 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ ))(=> (forall ((?v3 Dtree$ ))(=> (member$b ?v3 (image$f ?v0 top$ ))(= (fun_app$g ?v1 ?v3 )(fun_app$g ?v2 ?v3 ))))(= (fun_app$e (comp$a ?v1 )?v0 )(fun_app$e (comp$a ?v2 )?v0 )))):named a58 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_N_sum_T_dtree_sum_fun$ ))(=> (forall ((?v2 T_N_sum$ ))(= (fun_app$b ?v0 (fun_app$aq ?v1 ?v2 ))?v2 ))(= (image$ ?v0 top$b )top$c ))):named a59 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ ))(=> (forall ((?v2 T_dtree_sum$ ))(= (fun_app$o ?v0 (fun_app$o ?v1 ?v2 ))?v2 ))(= (fun_app$ak (image$b ?v0 )top$b )top$b ))):named a60 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ ))(=> (forall ((?v2 N$ ))(= (fun_app$h ?v0 (fun_app$h ?v1 ?v2 ))?v2 ))(= (image$d ?v0 top$ )top$ ))):named a61 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_N_sum$ ))(=> (and (= (image$ ?v0 top$b )top$c )(forall ((?v2 T_dtree_sum$ ))(=> (= ?v1 (fun_app$b ?v0 ?v2 ))false )))false )):named a62 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum$ ))(=> (and (= (fun_app$ak (image$b ?v0 )top$b )top$b )(forall ((?v2 T_dtree_sum$ ))(=> (= ?v1 (fun_app$o ?v0 ?v2 ))false )))false )):named a63 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ ))(=> (and (= (image$d ?v0 top$ )top$ )(forall ((?v2 N$ ))(=> (= ?v1 (fun_app$h ?v0 ?v2 ))false )))false )):named a64 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ ))(=> (and (= (image$c ?v0 top$a )top$ )(= (image$f ?v1 top$ )top$a ))(= (image$e (fun_app$l (comp$b ?v1 )?v0 )top$a )top$a ))):named a65 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_N_fun$ ))(=> (and (= (image$c ?v0 top$a )top$ )(= (image$d ?v1 top$ )top$ ))(= (image$c (fun_app$d (comp$ ?v1 )?v0 )top$a )top$ ))):named a66 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ ))(=> (and (= (image$f ?v0 top$ )top$a )(= (image$c ?v1 top$a )top$ ))(= (image$d (fun_app$e (comp$a ?v1 )?v0 )top$ )top$ ))):named a67 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ ))(=> (and (= (image$d ?v0 top$ )top$ )(= (image$d ?v1 top$ )top$ ))(= (image$d (fun_app$ar (comp$j ?v1 )?v0 )top$ )top$ ))):named a68 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_N_sum_N_fun$ ))(=> (and (= (image$ ?v0 top$b )top$c )(= (image$k ?v1 top$c )top$ ))(= (image$l (fun_app$as (comp$k ?v1 )?v0 )top$b )top$ ))):named a69 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_N_fun$ ))(=> (and (= (fun_app$ak (image$b ?v0 )top$b )top$b )(= (image$l ?v1 top$b )top$ ))(= (image$l (fun_app$at (comp$l ?v1 )?v0 )top$b )top$ ))):named a70 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 N_T_N_sum_fun$ ))(=> (and (= (image$l ?v0 top$b )top$ )(= (image$i ?v1 top$ )top$c ))(= (image$ (fun_app$au (comp$m ?v1 )?v0 )top$b )top$c ))):named a71 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 N_T_dtree_sum_fun$ ))(=> (and (= (image$l ?v0 top$b )top$ )(= (image$j ?v1 top$ )top$b ))(= (fun_app$ak (image$b (fun_app$av (comp$n ?v1 )?v0 ))top$b )top$b ))):named a72 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ ))(=> (and (= (image$j ?v0 top$ )top$b )(= (image$ ?v1 top$b )top$c ))(= (image$i (fun_app$an (comp$h ?v1 )?v0 )top$ )top$c ))):named a73 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (= (image$j ?v0 top$ )top$b )(= (fun_app$ak (image$b ?v1 )top$b )top$b ))(= (image$j (fun_app$ao (comp$i ?v1 )?v0 )top$ )top$b ))):named a74 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_N_sum$ ))(=> (= (image$ ?v0 top$b )top$c )(exists ((?v2 T_dtree_sum$ ))(= ?v1 (fun_app$b ?v0 ?v2 ))))):named a75 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum$ ))(=> (= (fun_app$ak (image$b ?v0 )top$b )top$b )(exists ((?v2 T_dtree_sum$ ))(= ?v1 (fun_app$o ?v0 ?v2 ))))):named a76 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ ))(=> (= (image$d ?v0 top$ )top$ )(exists ((?v2 N$ ))(= ?v1 (fun_app$h ?v0 ?v2 ))))):named a77 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 N$ ))(=> (member$a ?v4 (image$c ?v1 top$a ))(= (fun_app$h ?v2 ?v4 )(fun_app$h ?v3 ?v4 )))))(= (fun_app$d (comp$ ?v2 )?v0 )(fun_app$d (comp$ ?v3 )?v1 )))):named a78 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 N$ ))(=> (member$a ?v4 (image$c ?v1 top$a ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v4 )))))(= (fun_app$l (comp$b ?v2 )?v0 )(fun_app$l (comp$b ?v3 )?v1 )))):named a79 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Dtree$ ))(=> (member$b ?v4 (image$f ?v1 top$ ))(= (fun_app$g ?v2 ?v4 )(fun_app$g ?v3 ?v4 )))))(= (fun_app$e (comp$a ?v2 )?v0 )(fun_app$e (comp$a ?v3 )?v1 )))):named a80 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (and (wf$ ?v0 )(fun_app$a (fun_app$i (inItr$ top$ )?v0 )?v1 ))(wf$ (fun_app$f (pick$ ?v0 )?v1 )))):named a81 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_set$ ))(= (image$d ?v0 (image$c ?v1 ?v2 ))(image$c (fun_app$d (comp$ ?v0 )?v1 )?v2 ))):named a82 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_set$ ))(= (image$c ?v0 (image$f ?v1 ?v2 ))(image$d (fun_app$e (comp$a ?v0 )?v1 )?v2 ))):named a83 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_set$ ))(= (image$f ?v0 (image$c ?v1 ?v2 ))(image$e (fun_app$l (comp$b ?v0 )?v1 )?v2 ))):named a84 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$g ?v0 (image$ ?v1 ?v2 ))(image$ (fun_app$ai (comp$d ?v0 )?v1 )?v2 ))):named a85 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$h ?v0 (image$ ?v1 ?v2 ))(fun_app$ak (image$b (fun_app$al (comp$f ?v0 )?v1 ))?v2 ))):named a86 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$ ?v0 (fun_app$ak (image$b ?v1 )?v2 ))(image$ (fun_app$aj (comp$e ?v0 )?v1 )?v2 ))):named a87 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$ak (image$b ?v0 )(fun_app$ak (image$b ?v1 )?v2 ))(fun_app$ak (image$b (fun_app$am (comp$g ?v0 )?v1 ))?v2 ))):named a88 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (fun_app$a (fun_app$i (inItr$ top$ )?v0 )?v1 )(= (fun_app$g root$ (fun_app$f (pick$ ?v0 )?v1 ))?v1 ))):named a89 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (fun_app$a (fun_app$i (inItr$ top$ )?v0 )?v1 )(= (fun_app$g root$ (fun_app$f (h$ ?v0 )?v1 ))?v1 ))):named a90 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$g root$ ?v0 )?v1 )(fun_app$a (fun_app$i (inItr$ ?v1 )?v0 )(fun_app$g root$ ?v0 )))):named a91 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$a (fun_app$i (inItr$ ?v0 )?v1 )?v2 )(member$a (fun_app$g root$ ?v1 )?v0 ))):named a92 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$d (comp$ ?v0 )?v1 )?v2 )(= (fun_app$h ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$g ?v2 ?v3 )))):named a93 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$e (comp$a ?v0 )?v1 )?v2 )(= (fun_app$g ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$h ?v2 ?v3 )))):named a94 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$l (comp$b ?v0 )?v1 )?v2 )(= (fun_app$f ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$k ?v2 ?v3 )))):named a95 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$d (comp$ ?v0 )?v1 )(fun_app$d (comp$ ?v2 )?v3 ))(= (fun_app$h ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$g ?v3 ?v4 ))))):named a96 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$e (comp$a ?v0 )?v1 )(fun_app$e (comp$a ?v2 )?v3 ))(= (fun_app$g ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$g ?v2 (fun_app$f ?v3 ?v4 ))))):named a97 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$l (comp$b ?v0 )?v1 )(fun_app$l (comp$b ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$g ?v3 ?v4 ))))):named a98 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$d (comp$ ?v0 )?v1 )(fun_app$d (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$h ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$g ?v3 ?v4 ))))false ))false )):named a99 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$e (comp$a ?v0 )?v1 )(fun_app$e (comp$a ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$g ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$g ?v2 (fun_app$f ?v3 ?v4 ))))false ))false )):named a100 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$l (comp$b ?v0 )?v1 )(fun_app$l (comp$b ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$f ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$g ?v3 ?v4 ))))false ))false )):named a101 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$g (fun_app$d (comp$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$d (comp$ ?v0 )?v1 )?v2 )))):named a102 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$h (fun_app$e (comp$a ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$e (comp$a ?v0 )?v1 )?v2 )))):named a103 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$k (fun_app$l (comp$b ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$l (comp$b ?v0 )?v1 )?v2 )))):named a104 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$aw (comp$o (fun_app$d (comp$ ?v0 )?v1 ))?v2 )(fun_app$d (comp$ ?v0 )(fun_app$aw (comp$o ?v1 )?v2 )))):named a105 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$ar (comp$j (fun_app$e (comp$a ?v0 )?v1 ))?v2 )(fun_app$e (comp$a ?v0 )(fun_app$ax (comp$p ?v1 )?v2 )))):named a106 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$ay (comp$q (fun_app$l (comp$b ?v0 )?v1 ))?v2 )(fun_app$ax (comp$p ?v0 )(fun_app$e (comp$a ?v1 )?v2 )))):named a107 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$az (comp$r (fun_app$l (comp$b ?v0 )?v1 ))?v2 )(fun_app$l (comp$b ?v0 )(fun_app$aw (comp$o ?v1 )?v2 )))):named a108 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$d (comp$ (fun_app$ar (comp$j ?v0 )?v1 ))?v2 )(fun_app$d (comp$ ?v0 )(fun_app$d (comp$ ?v1 )?v2 )))):named a109 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$d (comp$ (fun_app$e (comp$a ?v0 )?v1 ))?v2 )(fun_app$aw (comp$o ?v0 )(fun_app$l (comp$b ?v1 )?v2 )))):named a110 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$e (comp$a (fun_app$aw (comp$o ?v0 )?v1 ))?v2 )(fun_app$e (comp$a ?v0 )(fun_app$ay (comp$q ?v1 )?v2 )))):named a111 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$e (comp$a (fun_app$d (comp$ ?v0 )?v1 ))?v2 )(fun_app$ar (comp$j ?v0 )(fun_app$e (comp$a ?v1 )?v2 )))):named a112 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$l (comp$b (fun_app$ay (comp$q ?v0 )?v1 ))?v2 )(fun_app$az (comp$r ?v0 )(fun_app$l (comp$b ?v1 )?v2 )))):named a113 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$l (comp$b (fun_app$ax (comp$p ?v0 )?v1 ))?v2 )(fun_app$l (comp$b ?v0 )(fun_app$d (comp$ ?v1 )?v2 )))):named a114 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$ax (comp$p ?v0 )(fun_app$e (comp$a ?v1 )?v2 ))(fun_app$ay (comp$q (fun_app$l (comp$b ?v0 )?v1 ))?v2 ))):named a115 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$ar (comp$j ?v0 )(fun_app$e (comp$a ?v1 )?v2 ))(fun_app$e (comp$a (fun_app$d (comp$ ?v0 )?v1 ))?v2 ))):named a116 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$aw (comp$o ?v0 )(fun_app$l (comp$b ?v1 )?v2 ))(fun_app$d (comp$ (fun_app$e (comp$a ?v0 )?v1 ))?v2 ))):named a117 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$az (comp$r ?v0 )(fun_app$l (comp$b ?v1 )?v2 ))(fun_app$l (comp$b (fun_app$ay (comp$q ?v0 )?v1 ))?v2 ))):named a118 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$d (comp$ ?v0 )(fun_app$aw (comp$o ?v1 )?v2 ))(fun_app$aw (comp$o (fun_app$d (comp$ ?v0 )?v1 ))?v2 ))):named a119 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$d (comp$ ?v0 )(fun_app$d (comp$ ?v1 )?v2 ))(fun_app$d (comp$ (fun_app$ar (comp$j ?v0 )?v1 ))?v2 ))):named a120 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$e (comp$a ?v0 )(fun_app$ax (comp$p ?v1 )?v2 ))(fun_app$ar (comp$j (fun_app$e (comp$a ?v0 )?v1 ))?v2 ))):named a121 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$e (comp$a ?v0 )(fun_app$ay (comp$q ?v1 )?v2 ))(fun_app$e (comp$a (fun_app$aw (comp$o ?v0 )?v1 ))?v2 ))):named a122 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$l (comp$b ?v0 )(fun_app$aw (comp$o ?v1 )?v2 ))(fun_app$az (comp$r (fun_app$l (comp$b ?v0 )?v1 ))?v2 ))):named a123 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$l (comp$b ?v0 )(fun_app$d (comp$ ?v1 )?v2 ))(fun_app$l (comp$b (fun_app$ax (comp$p ?v0 )?v1 ))?v2 ))):named a124 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$j id$ ?v0 )?v0 ):pattern ((fun_app$j id$ ?v0 )))):named a125 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (fun_app$m (h_c$ ?v0 )?v1 )(image$ (fun_app$c (map_sum$ id$ )root$ )(cont$ (fun_app$f (pick$ ?v0 )?v1 )))):pattern ((fun_app$m (h_c$ ?v0 )?v1 )))):named a126 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$ (uu$ ?v0 ))?v0 )):named a127 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$a (uua$ ?v0 ))?v0 )):named a128 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$ ?v1 ?v0 ))):named a129 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$a ?v0 (collect$a ?v1 ))(fun_app$a ?v1 ?v0 ))):named a130 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ )(?v2 T_dtree_sum$ ))(=> (and (fun_app$a (fun_app$i (inItr$ top$ )?v0 )?v1 )(member$ ?v2 (cont$ (fun_app$f (pick$ ?v0 )?v1 ))))(= (fun_app$b (fun_app$c (map_sum$ id$ )(fun_app$d (comp$ (fun_app$e (comp$a root$ )(h$ ?v0 )))root$ ))?v2 )(fun_app$b (fun_app$c (map_sum$ id$ )root$ )?v2 )))):named a131 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (fun_app$h (h_r$ ?v0 )?v1 )(fun_app$g root$ (fun_app$f (pick$ ?v0 )?v1 ))):pattern ((fun_app$h (h_r$ ?v0 )?v1 )))):named a132 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$d (comp$ ?v0 )?v1 )(fun_app$d (comp$ id$a )?v2 ))(= (fun_app$h ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$g ?v2 ?v3 )))):named a133 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$e (comp$a ?v0 )?v1 )(fun_app$ar (comp$j id$a )?v2 ))(= (fun_app$g ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$h ?v2 ?v3 )))):named a134 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$l (comp$b ?v0 )?v1 )(fun_app$az (comp$r id$b )?v2 ))(= (fun_app$f ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$k ?v2 ?v3 )))):named a135 ))
(assert (! (= (comp$ id$a )id$g ):named a136 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$s (map_sum$c ?v0 ?v1 )(map_sum$d ?v2 ?v3 ))(map_sum$d (fun_app$d (comp$ ?v0 )?v2 )(fun_app$d (comp$ ?v1 )?v3 )))):named a137 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(= (comp$t (map_sum$e ?v0 ?v1 )(map_sum$f ?v2 ?v3 ))(map_sum$g (fun_app$d (comp$ ?v0 )?v2 )(fun_app$e (comp$a ?v1 )?v3 )))):named a138 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$u (map_sum$h ?v0 ?v1 )(map_sum$d ?v2 ?v3 ))(map_sum$i (fun_app$d (comp$ ?v0 )?v2 )(fun_app$l (comp$b ?v1 )?v3 )))):named a139 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$v (map_sum$g ?v0 ?v1 )(map_sum$j ?v2 ?v3 ))(map_sum$e (fun_app$e (comp$a ?v0 )?v2 )(fun_app$d (comp$ ?v1 )?v3 )))):named a140 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ ))(= (comp$w (map_sum$d ?v0 ?v1 )(map_sum$k ?v2 ?v3 ))(map_sum$c (fun_app$e (comp$a ?v0 )?v2 )(fun_app$e (comp$a ?v1 )?v3 )))):named a141 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$x (map_sum$f ?v0 ?v1 )(map_sum$j ?v2 ?v3 ))(map_sum$l (fun_app$e (comp$a ?v0 )?v2 )(fun_app$l (comp$b ?v1 )?v3 )))):named a142 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$y (map_sum$m ?v0 ?v1 )(map_sum$d ?v2 ?v3 ))(map_sum$n (fun_app$l (comp$b ?v0 )?v2 )(fun_app$d (comp$ ?v1 )?v3 )))):named a143 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(= (comp$z (map_sum$j ?v0 ?v1 )(map_sum$f ?v2 ?v3 ))(map_sum$o (fun_app$l (comp$b ?v0 )?v2 )(fun_app$e (comp$a ?v1 )?v3 )))):named a144 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$aa (map_sum$k ?v0 ?v1 )(map_sum$d ?v2 ?v3 ))(map_sum$p (fun_app$l (comp$b ?v0 )?v2 )(fun_app$l (comp$b ?v1 )?v3 )))):named a145 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (fun_app$ai (comp$d (fun_app$af (map_sum$q ?v0 )?v1 ))(fun_app$c (map_sum$ ?v2 )?v3 ))(fun_app$c (map_sum$ (fun_app$ag (comp$c ?v0 )?v2 ))(fun_app$d (comp$ ?v1 )?v3 )))):named a146 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$q (map_sum$c ?v0 ?v1 )(fun_app$r (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$r (map_sum$d (fun_app$d (comp$ ?v0 )?v2 )(fun_app$d (comp$ ?v1 )?v3 ))?v4 ))):named a147 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$s (map_sum$e ?v0 ?v1 )(fun_app$t (map_sum$f ?v2 ?v3 )?v4 ))(fun_app$u (map_sum$g (fun_app$d (comp$ ?v0 )?v2 )(fun_app$e (comp$a ?v1 )?v3 ))?v4 ))):named a148 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$v (map_sum$h ?v0 ?v1 )(fun_app$r (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$w (map_sum$i (fun_app$d (comp$ ?v0 )?v2 )(fun_app$l (comp$b ?v1 )?v3 ))?v4 ))):named a149 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$u (map_sum$g ?v0 ?v1 )(fun_app$x (map_sum$j ?v2 ?v3 )?v4 ))(fun_app$s (map_sum$e (fun_app$e (comp$a ?v0 )?v2 )(fun_app$d (comp$ ?v1 )?v3 ))?v4 ))):named a150 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_sum$ ))(= (fun_app$r (map_sum$d ?v0 ?v1 )(fun_app$y (map_sum$k ?v2 ?v3 )?v4 ))(fun_app$q (map_sum$c (fun_app$e (comp$a ?v0 )?v2 )(fun_app$e (comp$a ?v1 )?v3 ))?v4 ))):named a151 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$t (map_sum$f ?v0 ?v1 )(fun_app$x (map_sum$j ?v2 ?v3 )?v4 ))(fun_app$z (map_sum$l (fun_app$e (comp$a ?v0 )?v2 )(fun_app$l (comp$b ?v1 )?v3 ))?v4 ))):named a152 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$aa (map_sum$m ?v0 ?v1 )(fun_app$r (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$ab (map_sum$n (fun_app$l (comp$b ?v0 )?v2 )(fun_app$d (comp$ ?v1 )?v3 ))?v4 ))):named a153 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$x (map_sum$j ?v0 ?v1 )(fun_app$t (map_sum$f ?v2 ?v3 )?v4 ))(fun_app$ac (map_sum$o (fun_app$l (comp$b ?v0 )?v2 )(fun_app$e (comp$a ?v1 )?v3 ))?v4 ))):named a154 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$y (map_sum$k ?v0 ?v1 )(fun_app$r (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$ad (map_sum$p (fun_app$l (comp$b ?v0 )?v2 )(fun_app$l (comp$b ?v1 )?v3 ))?v4 ))):named a155 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$ae (fun_app$af (map_sum$q ?v0 )?v1 )(fun_app$b (fun_app$c (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$b (fun_app$c (map_sum$ (fun_app$ag (comp$c ?v0 )?v2 ))(fun_app$d (comp$ ?v1 )?v3 ))?v4 ))):named a156 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$i (inItr$ top$ )tr0$ )?v0 )(and (subtr$ top$ (fun_app$f (pick$ tr0$ )?v0 )tr0$ )(= (fun_app$g root$ (fun_app$f (pick$ tr0$ )?v0 ))?v0 )))):named a157 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (and (fun_app$a (fun_app$i (inItr$ top$ )tr0$ )?v0 )(subtr$ top$ ?v1 (fun_app$f (h$ tr0$ )?v0 )))(exists ((?v2 N$ ))(and (fun_app$a (fun_app$i (inItr$ top$ )tr0$ )?v2 )(= ?v1 (fun_app$f (h$ tr0$ )?v2 )))))):named a158 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$i (inItr$ top$ )tr0$ )?v0 )(subtr$ top$ (fun_app$f (pick$ tr0$ )?v0 )tr0$ ))):named a159 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_set$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (image$f ?v0 ?v1 )top$a )(forall ((?v4 N$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$h (fun_app$e (comp$a ?v2 )?v0 )?v4 )(fun_app$h (fun_app$e (comp$a ?v3 )?v0 )?v4 )))))(= ?v2 ?v3 ))):named a160 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_set$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= (image$c ?v0 ?v1 )top$ )(forall ((?v4 Dtree$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$g (fun_app$d (comp$ ?v2 )?v0 )?v4 )(fun_app$g (fun_app$d (comp$ ?v3 )?v0 )?v4 )))))(= ?v2 ?v3 ))):named a161 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_set$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (image$c ?v0 ?v1 )top$ )(forall ((?v4 Dtree$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$k (fun_app$l (comp$b ?v2 )?v0 )?v4 )(fun_app$k (fun_app$l (comp$b ?v3 )?v0 )?v4 )))))(= ?v2 ?v3 ))):named a162 ))
(assert (! (forall ((?v0 N$ ))(finite$ (fun_app$m (h_c$ tr0$ )?v0 ))):named a163 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (h$ ?v0 )(fun_app$ah (unfold$ (h_r$ ?v0 ))(h_c$ ?v0 ))):pattern ((h$ ?v0 )))):named a164 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (member$ ?v0 top$b )true )):named a165 ))
(assert (! (forall ((?v0 N$ ))(= (member$a ?v0 top$ )true )):named a166 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(member$ ?v0 top$b )):named a167 ))
(assert (! (forall ((?v0 N$ ))(member$a ?v0 top$ )):named a168 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 N_T_dtree_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$ba ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$j ?v1 ?v3 )))):named a169 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$h ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$d ?v1 ?v3 )))):named a170 ))
(assert (! (forall ((?v0 N$ ))(= (cont$ (fun_app$f (h$ tr0$ )?v0 ))(fun_app$ak (image$b (fun_app$p (map_sum$b id$ )(fun_app$l (comp$b (h$ tr0$ ))root$ )))(cont$ (fun_app$f (pick$ tr0$ )?v0 ))))):named a171 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v2 ?v3 ))(subtr$ ?v0 ?v1 ?v3 ))):named a172 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$a (fun_app$g root$ ?v2 )?v0 ))):named a173 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$a (fun_app$g root$ ?v1 )?v0 ))):named a174 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$g root$ ?v0 )?v1 )(subtr$ ?v1 ?v0 ?v0 ))):named a175 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(subtr$ ?v1 ?v2 ?v0 ))(wf$ ?v2 ))):named a176 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (fun_app$a (fun_app$i (inItr$ ?v0 )?v1 )?v2 )(subtr$ ?v0 ?v1 ?v3 ))(fun_app$a (fun_app$i (inItr$ ?v0 )?v3 )?v2 ))):named a177 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(finite$ (fun_app$m (h_c$ ?v0 )?v1 ))):named a178 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$a (fun_app$i (inItr$ ?v0 )?v1 )?v2 )(exists ((?v3 Dtree$ ))(and (subtr$ ?v0 ?v3 ?v1 )(= (fun_app$g root$ ?v3 )?v2 ))))):named a179 ))
(check-sat )
;(get-unsat-core )
