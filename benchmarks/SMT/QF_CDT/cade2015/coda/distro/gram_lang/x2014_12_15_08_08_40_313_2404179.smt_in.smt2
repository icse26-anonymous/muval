;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort N_T_N_sum_fun$ 0 )
(declare-sort T_N_sum_N_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort T_N_sum_bool_fun$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_fun$ 0 )
(declare-sort N_N_sum_N_N_sum_fun$ 0 )
(declare-sort N_T_sum_N_T_sum_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_fun_T_T_fun_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_N_sum_N_N_sum_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort N_dtree_sum_N_N_sum_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_N_sum_fun$ 0 )
(declare-sort N_N_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_N_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_N_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_dtree_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-sort T_N_sum$ 0)
(declare-sort Dtree_dtree_sum$ 0)
(declare-sort N_N_sum$ 0)
(declare-sort Dtree_N_sum$ 0)
(declare-sort N_dtree_sum$ 0)
(declare-sort T_T_sum$ 0)
(declare-sort N_T_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun projl$a (T_N_sum$)T$)
(declare-fun inl$a (T$ )T_N_sum$)
(declare-fun projr$a (T_N_sum$)N$)
(declare-fun inr$a (N$ )T_N_sum$)
(declare-fun projl$b (Dtree_dtree_sum$)Dtree$)
(declare-fun inl$b (Dtree$ )Dtree_dtree_sum$)
(declare-fun projr$b (Dtree_dtree_sum$)Dtree$)
(declare-fun inr$b (Dtree$ )Dtree_dtree_sum$)
(declare-fun projl$c (N_N_sum$)N$)
(declare-fun inl$c (N$ )N_N_sum$)
(declare-fun projr$c (N_N_sum$)N$)
(declare-fun inr$c (N$ )N_N_sum$)
(declare-fun projl$d (Dtree_N_sum$)Dtree$)
(declare-fun inl$d (Dtree$ )Dtree_N_sum$)
(declare-fun projr$d (Dtree_N_sum$)N$)
(declare-fun inr$d (N$ )Dtree_N_sum$)
(declare-fun projl$e (N_dtree_sum$)N$)
(declare-fun inl$e (N$ )N_dtree_sum$)
(declare-fun projr$e (N_dtree_sum$)Dtree$)
(declare-fun inr$e (Dtree$ )N_dtree_sum$)
(declare-fun projl$f (T_T_sum$)T$)
(declare-fun inl$f (T$ )T_T_sum$)
(declare-fun projr$f (T_T_sum$)T$)
(declare-fun inr$f (T$ )T_T_sum$)
(declare-fun projl$g (N_T_sum$)N$)
(declare-fun inl$g (N$ )N_T_sum$)
(declare-fun projr$g (N_T_sum$)T$)
(declare-fun inr$g (T$ )N_T_sum$)
(declare-fun s$ ()N_T_N_sum_set_fun$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ (N_set$ )N_bool_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun id$a ()Dtree_dtree_fun$ )
(declare-fun id$b ()T_set_T_set_fun$ )
(declare-fun id$c ()N_N_fun$ )
(declare-fun id$d ()N_set_N_set_fun$ )
(declare-fun id$e ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun id$f ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$g ()T_T_sum_T_T_sum_fun$ )
(declare-fun id$h ()T_N_sum_T_N_sum_fun$ )
(declare-fun id$i ()N_T_sum_N_T_sum_fun$ )
(declare-fun id$j ()N_N_sum_N_N_sum_fun$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun uua$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun uub$ (T_N_sum_set$ )T_N_sum_bool_fun$ )
(declare-fun comp$ (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun comp$a (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$b (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun comp$c (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$d (N_N_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun comp$e (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$f (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$g (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$h (T_N_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$i (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$j (T_dtree_sum_T_dtree_sum_fun$ )T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$k (T_N_sum_T_dtree_sum_fun$ )T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$l (T_N_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$m (T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$n (T_dtree_sum_T_N_sum_fun$ )T_N_sum_T_dtree_sum_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun comp$o (T_T_fun$ )T_T_fun_T_T_fun_fun$ )
(declare-fun comp$p (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum_dtree_dtree_sum_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun comp$q (Dtree_dtree_sum_N_N_sum_fun$ Dtree_N_sum_dtree_dtree_sum_fun$ )Dtree_N_sum_N_N_sum_fun$ )
(declare-fun comp$r (Dtree_dtree_sum_N_N_sum_fun$ N_dtree_sum_dtree_dtree_sum_fun$ )N_dtree_sum_N_N_sum_fun$ )
(declare-fun comp$s (Dtree_dtree_sum_N_N_sum_fun$ N_N_sum_dtree_dtree_sum_fun$ )N_N_sum_N_N_sum_fun$ )
(declare-fun deftr$ ()N_dtree_fun$ )
(declare-fun image$ (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun inFr2$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun inFrr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun finite$ (T_dtree_sum_set$ )Bool )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun image$a (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$b (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$c (N_N_fun$ )N_set_N_set_fun$ )
(declare-fun image$d (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun image$e (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun image$f (Dtree_N_fun$ Dtree_set$ )N_set$ )
(declare-fun image$g (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun image$h (N_dtree_fun$ N_set$ )Dtree_set$ )
(declare-fun image$i (N_T_dtree_sum_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun image$j (N_T_N_sum_fun$ N_set$ )T_N_sum_set$ )
(declare-fun image$k (T_dtree_sum_N_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun image$l (T_N_sum_N_fun$ T_N_sum_set$ )N_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (Dtree_N_fun$ )Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ )
(declare-fun collect$ (N_bool_fun$ )N_set$ )
(declare-fun finite$a (T_N_sum_set$ )Bool )
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun map_sum$ (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun member$a (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun member$b (N$ N_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ )N_dtree_fun$ )
(declare-fun unfold$a (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun collect$a (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun collect$b (T_N_sum_bool_fun$ )T_N_sum_set$ )
(declare-fun fun_app$a (T_N_sum_bool_fun$ T_N_sum$ )Bool )
(declare-fun fun_app$b (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$c (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$d (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$e (Dtree_T_dtree_sum_set_fun$ Dtree$ )T_dtree_sum_set$ )
(declare-fun fun_app$f (Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$g (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$h (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$i (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$j (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$k (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$l (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun fun_app$m (N_set_dtree_T_bool_fun_fun_fun$ N_set$ )Dtree_T_bool_fun_fun$ )
(declare-fun fun_app$n (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(declare-fun fun_app$o (N_T_N_sum_set_fun$ N$ )T_N_sum_set$ )
(declare-fun fun_app$p (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$q (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$r (T_T_fun$ T$ )T$ )
(declare-fun fun_app$s (N_N_fun$ N$ )N$ )
(declare-fun fun_app$t (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$u (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$v (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$w (N_N_fun_N_N_fun_fun$ N_N_fun$ )N_N_fun$ )
(declare-fun fun_app$x (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$y (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$z (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(declare-fun map_sum$a (T_T_fun$ )N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$b (Dtree_N_fun$ Dtree_N_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun map_sum$c (Dtree_dtree_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$d (Dtree_dtree_fun$ N_dtree_fun$ )Dtree_N_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$e (Dtree_N_fun$ N_N_fun$ )Dtree_N_sum_N_N_sum_fun$ )
(declare-fun map_sum$f (N_dtree_fun$ Dtree_dtree_fun$ )N_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$g (N_N_fun$ Dtree_N_fun$ )N_dtree_sum_N_N_sum_fun$ )
(declare-fun map_sum$h (N_dtree_fun$ N_dtree_fun$ )N_N_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$i (N_N_fun$ N_N_fun$ )N_N_sum_N_N_sum_fun$ )
(declare-fun map_sum$j (T_T_fun$ )N_N_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$k (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$l (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun map_sum$m (N_N_fun$ T_T_fun$ )N_T_sum_N_T_sum_fun$ )
(declare-fun fun_app$aa (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun fun_app$ab (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$ac (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$ad (T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ T_N_sum_T_dtree_sum_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$ae (T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ T_N_sum_T_N_sum_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$af (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$ag (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$ah (T_N_sum_T_dtree_sum_fun_T_N_sum_T_N_sum_fun_fun$ T_N_sum_T_dtree_sum_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$ai (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum$ )N_N_sum$ )
(declare-fun fun_app$aj (Dtree_dtree_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$ak (Dtree_N_sum_dtree_dtree_sum_fun$ Dtree_N_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$al (Dtree_N_sum_N_N_sum_fun$ Dtree_N_sum$ )N_N_sum$ )
(declare-fun fun_app$am (N_dtree_sum_dtree_dtree_sum_fun$ N_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$an (N_dtree_sum_N_N_sum_fun$ N_dtree_sum$ )N_N_sum$ )
(declare-fun fun_app$ao (N_N_sum_dtree_dtree_sum_fun$ N_N_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$ap (N_N_sum_N_N_sum_fun$ N_N_sum$ )N_N_sum$ )
(declare-fun fun_app$aq (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$ar (N_N_fun_T_N_sum_T_N_sum_fun_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$as (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$at (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$au (T_T_fun_T_T_fun_fun$ T_T_fun$ )T_T_fun$ )
(declare-fun fun_app$av (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$aw (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$ax (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$ay (N_T_sum_N_T_sum_fun$ N_T_sum$ )N_T_sum$ )
(declare-fun fun_app$az (N_T_dtree_sum_fun$ N$ )T_dtree_sum$ )
(declare-fun fun_app$ba (N_T_N_sum_fun$ N$ )T_N_sum$ )
(declare-fun fun_app$bb (T_dtree_sum_N_fun$ T_dtree_sum$ )N$ )
(declare-fun fun_app$bc (T_N_sum_N_fun$ T_N_sum$ )N$ )
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum$ ))(! (= (fun_app$a (uub$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uub$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$b (uu$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$b (uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (not (= (fun_app$c root$ (fun_app$d (hsubst$ tr0$ )tr$ ))(fun_app$c root$ (fun_app$d (hsubst$ tr0$ )tr0$ )))):named a3 ))
(assert (! (= (fun_app$c root$ tr$ )(fun_app$c root$ tr0$ )):named a4 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$c root$ (fun_app$d (hsubst$ tr0$ )?v0 ))(fun_app$c root$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$c root$ (fun_app$d (hsubst$ ?v0 )?v1 ))(fun_app$c root$ ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$e (hsubst_c$ tr0$ )?v0 )(ite (= (fun_app$c root$ ?v0 )(fun_app$c root$ tr0$ ))(cont$ tr0$ )(cont$ ?v0 ))):pattern ((fun_app$e (hsubst_c$ tr0$ )?v0 )))):named a7 ))
(assert (! (= (hsubst$ tr0$ )(fun_app$f (unfold$ hsubst_r$ )(hsubst_c$ tr0$ ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (fun_app$c root$ ?v0 )(fun_app$c root$ tr0$ ))(= (cont$ (fun_app$d (hsubst$ tr0$ )?v0 ))(fun_app$g (image$ (fun_app$h (map_sum$ id$ )(hsubst$ tr0$ )))(cont$ tr0$ ))))):named a9 ))
(assert (! (= (fun_app$i (comp$ root$ )(hsubst$ tr0$ ))root$ ):named a10 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$c root$ (fun_app$j deftr$ ?v0 ))?v0 )):named a11 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$c hsubst_r$ ?v0 )(fun_app$c root$ ?v0 )):pattern ((fun_app$c hsubst_r$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Dtree$ ))(finite$ (fun_app$e (hsubst_c$ tr0$ )?v0 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$c root$ ?v0 )(fun_app$c root$ ?v1 ))(= (cont$ (fun_app$d (hsubst$ ?v1 )?v0 ))(fun_app$g (image$ (fun_app$h (map_sum$ id$ )(hsubst$ ?v1 )))(cont$ ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$i (comp$ root$ )(hsubst$ ?v0 ))root$ )):named a15 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$k (fun_app$l (fun_app$m inFr2$ ?v0 )?v1 )?v2 )(member$b (fun_app$c root$ ?v1 )?v0 ))):named a16 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$b (fun_app$n (inItr$ ?v0 )?v1 )?v2 )(member$b (fun_app$c root$ ?v1 )?v0 ))):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (fun_app$c root$ ?v0 )?v1 )(fun_app$b (fun_app$n (inItr$ ?v1 )?v0 )(fun_app$c root$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(finite$ (fun_app$e (hsubst_c$ ?v0 )?v1 ))):named a19 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst$ ?v0 )(fun_app$f (unfold$ hsubst_r$ )(hsubst_c$ ?v0 ))):pattern ((hsubst$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (fun_app$e (hsubst_c$ ?v0 )?v1 )(ite (= (fun_app$c root$ ?v1 )(fun_app$c root$ ?v0 ))(cont$ ?v0 )(cont$ ?v1 ))):pattern ((fun_app$e (hsubst_c$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_set_fun$ )(?v1 Dtree$ )(?v2 Dtree_N_fun$ ))(=> (finite$ (fun_app$e ?v0 ?v1 ))(= (cont$ (fun_app$d (fun_app$f (unfold$ ?v2 )?v0 )?v1 ))(fun_app$g (image$ (fun_app$h (map_sum$ id$ )(fun_app$f (unfold$ ?v2 )?v0 )))(fun_app$e ?v0 ?v1 ))))):named a22 ))
(assert (! (forall ((?v0 N_T_N_sum_set_fun$ )(?v1 N$ )(?v2 N_N_fun$ ))(=> (finite$a (fun_app$o ?v0 ?v1 ))(= (cont$ (fun_app$j (fun_app$p (unfold$a ?v2 )?v0 )?v1 ))(image$a (fun_app$q (map_sum$a id$ )(fun_app$p (unfold$a ?v2 )?v0 ))(fun_app$o ?v0 ?v1 ))))):named a23 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$i (comp$ ?v0 )id$a )?v0 )):named a24 ))
(assert (! (= (image$b id$ )id$b ):named a25 ))
(assert (! (= (image$c id$c )id$d ):named a26 ))
(assert (! (= (image$ id$e )id$f ):named a27 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ ))(=> (finite$ ?v0 )(finite$ (fun_app$g (image$ ?v1 )?v0 )))):named a28 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_T_N_sum_fun$ ))(=> (finite$ ?v0 )(finite$a (image$d ?v1 ?v0 )))):named a29 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_T_dtree_sum_fun$ ))(=> (finite$a ?v0 )(finite$ (image$a ?v1 ?v0 )))):named a30 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_T_N_sum_fun$ ))(=> (finite$a ?v0 )(finite$a (image$e ?v1 ?v0 )))):named a31 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$r id$ ?v0 )?v0 ):pattern ((fun_app$r id$ ?v0 )))):named a32 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$s id$c ?v0 )?v0 ):pattern ((fun_app$s id$c ?v0 )))):named a33 ))
(assert (! (forall ((?v0 Dtree$ ))(finite$ (cont$ ?v0 ))):named a34 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_T_dtree_sum_set_fun$ )(?v2 Dtree$ ))(= (fun_app$c root$ (fun_app$d (fun_app$f (unfold$ ?v0 )?v1 )?v2 ))(fun_app$c ?v0 ?v2 ))):named a35 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_T_N_sum_set_fun$ )(?v2 N$ ))(= (fun_app$c root$ (fun_app$j (fun_app$p (unfold$a ?v0 )?v1 )?v2 ))(fun_app$s ?v0 ?v2 ))):named a36 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$i (comp$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$i (comp$ ?v0 )?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$s (fun_app$t (comp$a ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$s (fun_app$t (comp$a ?v0 )?v1 )?v2 )))):named a38 ))
(assert (! (= (fun_app$t (comp$a root$ )deftr$ )id$c ):named a39 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$i (comp$ ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$d ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$t (comp$a ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$j ?v1 ?v3 ))(fun_app$s ?v2 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$i (comp$ ?v0 )?v1 )(fun_app$i (comp$ ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$d ?v3 ?v4 ))))):named a42 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$t (comp$a ?v0 )?v1 )(fun_app$t (comp$a ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$j ?v3 ?v4 ))))):named a43 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$i (comp$ ?v0 )?v1 )(fun_app$i (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$c ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$d ?v3 ?v4 ))))false ))false )):named a44 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$t (comp$a ?v0 )?v1 )(fun_app$t (comp$a ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$c ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$j ?v3 ?v4 ))))false ))false )):named a45 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$i (comp$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$i (comp$ ?v0 )?v1 )?v2 )))):named a46 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$s (fun_app$t (comp$a ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$s (fun_app$t (comp$a ?v0 )?v1 )?v2 )))):named a47 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$u (comp$b (fun_app$t (comp$a ?v0 )?v1 ))?v2 )(fun_app$i (comp$ ?v0 )(fun_app$v (comp$c ?v1 )?v2 )))):named a48 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$w (comp$d (fun_app$t (comp$a ?v0 )?v1 ))?v2 )(fun_app$t (comp$a ?v0 )(fun_app$x (comp$e ?v1 )?v2 )))):named a49 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$i (comp$ (fun_app$u (comp$b ?v0 )?v1 ))?v2 )(fun_app$u (comp$b ?v0 )(fun_app$i (comp$ ?v1 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$i (comp$ (fun_app$i (comp$ ?v0 )?v1 ))?v2 )(fun_app$i (comp$ ?v0 )(fun_app$y (comp$f ?v1 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$t (comp$a (fun_app$u (comp$b ?v0 )?v1 ))?v2 )(fun_app$w (comp$d ?v0 )(fun_app$t (comp$a ?v1 )?v2 )))):named a52 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$t (comp$a (fun_app$i (comp$ ?v0 )?v1 ))?v2 )(fun_app$t (comp$a ?v0 )(fun_app$z (comp$g ?v1 )?v2 )))):named a53 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$u (comp$b ?v0 )(fun_app$i (comp$ ?v1 )?v2 ))(fun_app$i (comp$ (fun_app$u (comp$b ?v0 )?v1 ))?v2 ))):named a54 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$w (comp$d ?v0 )(fun_app$t (comp$a ?v1 )?v2 ))(fun_app$t (comp$a (fun_app$u (comp$b ?v0 )?v1 ))?v2 ))):named a55 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$i (comp$ ?v0 )(fun_app$v (comp$c ?v1 )?v2 ))(fun_app$u (comp$b (fun_app$t (comp$a ?v0 )?v1 ))?v2 ))):named a56 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$i (comp$ ?v0 )(fun_app$y (comp$f ?v1 )?v2 ))(fun_app$i (comp$ (fun_app$i (comp$ ?v0 )?v1 ))?v2 ))):named a57 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$t (comp$a ?v0 )(fun_app$x (comp$e ?v1 )?v2 ))(fun_app$w (comp$d (fun_app$t (comp$a ?v0 )?v1 ))?v2 ))):named a58 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$t (comp$a ?v0 )(fun_app$z (comp$g ?v1 )?v2 ))(fun_app$t (comp$a (fun_app$i (comp$ ?v0 )?v1 ))?v2 ))):named a59 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$r id$ ?v0 )?v0 ):pattern ((fun_app$r id$ ?v0 )))):named a60 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$s id$c ?v0 )?v0 ):pattern ((fun_app$s id$c ?v0 )))):named a61 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (image$f ?v0 (image$g ?v1 ?v2 ))(image$f (fun_app$i (comp$ ?v0 )?v1 )?v2 ))):named a62 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_set$ ))(= (image$f ?v0 (image$h ?v1 ?v2 ))(fun_app$aa (image$c (fun_app$t (comp$a ?v0 )?v1 ))?v2 ))):named a63 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$e ?v0 (image$d ?v1 ?v2 ))(image$d (fun_app$ab (comp$h ?v0 )?v1 )?v2 ))):named a64 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$g (image$ ?v0 )(fun_app$g (image$ ?v1 )?v2 ))(fun_app$g (image$ (fun_app$ac (comp$i ?v0 )?v1 ))?v2 ))):named a65 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum_set$ ))(= (fun_app$g (image$ ?v0 )(image$a ?v1 ?v2 ))(image$a (fun_app$ad (comp$j ?v0 )?v1 )?v2 ))):named a66 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (image$a ?v0 (image$e ?v1 ?v2 ))(image$a (fun_app$ae (comp$k ?v0 )?v1 )?v2 ))):named a67 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$a ?v0 (image$d ?v1 ?v2 ))(fun_app$g (image$ (fun_app$af (comp$l ?v0 )?v1 ))?v2 ))):named a68 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$d ?v0 (fun_app$g (image$ ?v1 )?v2 ))(image$d (fun_app$ag (comp$m ?v0 )?v1 )?v2 ))):named a69 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum_set$ ))(= (image$d ?v0 (image$a ?v1 ?v2 ))(image$e (fun_app$ah (comp$n ?v0 )?v1 )?v2 ))):named a70 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$i (comp$ ?v0 )?v1 )(fun_app$u (comp$b id$c )?v2 ))(= (fun_app$c ?v0 (fun_app$d ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a71 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$t (comp$a ?v0 )?v1 )(fun_app$w (comp$d id$c )?v2 ))(= (fun_app$c ?v0 (fun_app$j ?v1 ?v3 ))(fun_app$s ?v2 ?v3 )))):named a72 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ai (map_sum$b ?v0 ?v1 )(fun_app$aj (map_sum$c ?v2 ?v3 )?v4 ))(fun_app$ai (map_sum$b (fun_app$i (comp$ ?v0 )?v2 )(fun_app$i (comp$ ?v1 )?v3 ))?v4 ))):named a73 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$ai (map_sum$b ?v0 ?v1 )(fun_app$ak (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$al (map_sum$e (fun_app$i (comp$ ?v0 )?v2 )(fun_app$t (comp$a ?v1 )?v3 ))?v4 ))):named a74 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$ai (map_sum$b ?v0 ?v1 )(fun_app$am (map_sum$f ?v2 ?v3 )?v4 ))(fun_app$an (map_sum$g (fun_app$t (comp$a ?v0 )?v2 )(fun_app$i (comp$ ?v1 )?v3 ))?v4 ))):named a75 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_sum$ ))(= (fun_app$ai (map_sum$b ?v0 ?v1 )(fun_app$ao (map_sum$h ?v2 ?v3 )?v4 ))(fun_app$ap (map_sum$i (fun_app$t (comp$a ?v0 )?v2 )(fun_app$t (comp$a ?v1 )?v3 ))?v4 ))):named a76 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$aq (fun_app$ar (map_sum$j ?v0 )?v1 )(fun_app$as (fun_app$at (map_sum$k ?v2 )?v3 )?v4 ))(fun_app$as (fun_app$at (map_sum$k (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$u (comp$b ?v1 )?v3 ))?v4 ))):named a77 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$av (fun_app$h (map_sum$ ?v0 )?v1 )(fun_app$av (fun_app$h (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$av (fun_app$h (map_sum$ (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$y (comp$f ?v1 )?v3 ))?v4 ))):named a78 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_dtree_fun$ )(?v4 T_N_sum$ ))(= (fun_app$av (fun_app$h (map_sum$ ?v0 )?v1 )(fun_app$aw (fun_app$q (map_sum$a ?v2 )?v3 )?v4 ))(fun_app$aw (fun_app$q (map_sum$a (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$z (comp$g ?v1 )?v3 ))?v4 ))):named a79 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_N_fun$ )(?v4 T_N_sum$ ))(= (fun_app$aw (fun_app$q (map_sum$a ?v0 )?v1 )(fun_app$aq (fun_app$ar (map_sum$j ?v2 )?v3 )?v4 ))(fun_app$aw (fun_app$q (map_sum$a (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$x (comp$e ?v1 )?v3 ))?v4 ))):named a80 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$aw (fun_app$q (map_sum$a ?v0 )?v1 )(fun_app$as (fun_app$at (map_sum$k ?v2 )?v3 )?v4 ))(fun_app$av (fun_app$h (map_sum$ (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$v (comp$c ?v1 )?v3 ))?v4 ))):named a81 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$as (fun_app$at (map_sum$k ?v0 )?v1 )(fun_app$av (fun_app$h (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$as (fun_app$at (map_sum$k (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$i (comp$ ?v1 )?v3 ))?v4 ))):named a82 ))
(assert (! (= (map_sum$l id$ id$ )id$g ):named a83 ))
(assert (! (= (fun_app$ar (map_sum$j id$ )id$c )id$h ):named a84 ))
(assert (! (= (map_sum$m id$c id$ )id$i ):named a85 ))
(assert (! (= (map_sum$i id$c id$c )id$j ):named a86 ))
(assert (! (= (fun_app$h (map_sum$ id$ )id$a )id$e ):named a87 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$ax (map_sum$l id$ id$ )?v0 )?v0 )):named a88 ))
(assert (! (forall ((?v0 T_N_sum$ ))(= (fun_app$aq (fun_app$ar (map_sum$j id$ )id$c )?v0 )?v0 )):named a89 ))
(assert (! (forall ((?v0 N_T_sum$ ))(= (fun_app$ay (map_sum$m id$c id$ )?v0 )?v0 )):named a90 ))
(assert (! (forall ((?v0 N_N_sum$ ))(= (fun_app$ap (map_sum$i id$c id$c )?v0 )?v0 )):named a91 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (fun_app$av (fun_app$h (map_sum$ id$ )id$a )?v0 )?v0 )):named a92 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$ (uu$ ?v0 ))?v0 )):named a93 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$a (uua$ ?v0 ))?v0 )):named a94 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(= (collect$b (uub$ ?v0 ))?v0 )):named a95 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$b ?v0 (collect$ ?v1 ))(fun_app$b ?v1 ?v0 ))):named a96 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$ ?v0 (collect$a ?v1 ))(fun_app$ ?v1 ?v0 ))):named a97 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_bool_fun$ ))(= (member$a ?v0 (collect$b ?v1 ))(fun_app$a ?v1 ?v0 ))):named a98 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$c root$ ?v0 )(fun_app$c root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a99 ))
(assert (! (forall ((?v0 N$ ))(= (cont$ (fun_app$j deftr$ ?v0 ))(image$a (fun_app$q (map_sum$a id$ )deftr$ )(fun_app$o s$ ?v0 )))):named a100 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$s ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (fun_app$aa (image$c ?v1 )?v3 )))):named a101 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 N_T_dtree_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$az ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$ ?v0 (image$i ?v1 ?v3 )))):named a102 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 N_T_N_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$ba ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$a ?v0 (image$j ?v1 ?v3 )))):named a103 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_N_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$bb ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$b ?v0 (image$k ?v1 ?v3 )))):named a104 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$av ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (fun_app$g (image$ ?v1 )?v3 )))):named a105 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$as ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$d ?v1 ?v3 )))):named a106 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_N_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$bc ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$b ?v0 (image$l ?v1 ?v3 )))):named a107 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$aw ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$a ?v1 ?v3 )))):named a108 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$aq ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$e ?v1 ?v3 )))):named a109 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 N$ ))(=> (finite$ ?v0 )(= (cont$ (node$ ?v1 ?v0 ))?v0 ))):named a110 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (fun_app$c root$ ?v0 )(cont$ ?v0 ))?v0 )):named a111 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$p (map_sum$b ?v0 ?v1 )(map_sum$c ?v2 ?v3 ))(map_sum$b (fun_app$i (comp$ ?v0 )?v2 )(fun_app$i (comp$ ?v1 )?v3 )))):named a112 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ ))(= (comp$q (map_sum$b ?v0 ?v1 )(map_sum$d ?v2 ?v3 ))(map_sum$e (fun_app$i (comp$ ?v0 )?v2 )(fun_app$t (comp$a ?v1 )?v3 )))):named a113 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$r (map_sum$b ?v0 ?v1 )(map_sum$f ?v2 ?v3 ))(map_sum$g (fun_app$t (comp$a ?v0 )?v2 )(fun_app$i (comp$ ?v1 )?v3 )))):named a114 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ ))(= (comp$s (map_sum$b ?v0 ?v1 )(map_sum$h ?v2 ?v3 ))(map_sum$i (fun_app$t (comp$a ?v0 )?v2 )(fun_app$t (comp$a ?v1 )?v3 )))):named a115 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (fun_app$ab (comp$h (fun_app$ar (map_sum$j ?v0 )?v1 ))(fun_app$at (map_sum$k ?v2 )?v3 ))(fun_app$at (map_sum$k (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$u (comp$b ?v1 )?v3 )))):named a116 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ ))(= (fun_app$ac (comp$i (fun_app$h (map_sum$ ?v0 )?v1 ))(fun_app$h (map_sum$ ?v2 )?v3 ))(fun_app$h (map_sum$ (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$y (comp$f ?v1 )?v3 )))):named a117 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_dtree_fun$ ))(= (fun_app$ad (comp$j (fun_app$h (map_sum$ ?v0 )?v1 ))(fun_app$q (map_sum$a ?v2 )?v3 ))(fun_app$q (map_sum$a (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$z (comp$g ?v1 )?v3 )))):named a118 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_N_fun$ ))(= (fun_app$ae (comp$k (fun_app$q (map_sum$a ?v0 )?v1 ))(fun_app$ar (map_sum$j ?v2 )?v3 ))(fun_app$q (map_sum$a (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$x (comp$e ?v1 )?v3 )))):named a119 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (fun_app$af (comp$l (fun_app$q (map_sum$a ?v0 )?v1 ))(fun_app$at (map_sum$k ?v2 )?v3 ))(fun_app$h (map_sum$ (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$v (comp$c ?v1 )?v3 )))):named a120 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ ))(= (fun_app$ag (comp$m (fun_app$at (map_sum$k ?v0 )?v1 ))(fun_app$h (map_sum$ ?v2 )?v3 ))(fun_app$at (map_sum$k (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$i (comp$ ?v1 )?v3 )))):named a121 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ai (map_sum$b ?v0 ?v1 )(fun_app$aj (map_sum$c ?v2 ?v3 )?v4 ))(fun_app$ai (map_sum$b (fun_app$i (comp$ ?v0 )?v2 )(fun_app$i (comp$ ?v1 )?v3 ))?v4 ))):named a122 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$ai (map_sum$b ?v0 ?v1 )(fun_app$ak (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$al (map_sum$e (fun_app$i (comp$ ?v0 )?v2 )(fun_app$t (comp$a ?v1 )?v3 ))?v4 ))):named a123 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$ai (map_sum$b ?v0 ?v1 )(fun_app$am (map_sum$f ?v2 ?v3 )?v4 ))(fun_app$an (map_sum$g (fun_app$t (comp$a ?v0 )?v2 )(fun_app$i (comp$ ?v1 )?v3 ))?v4 ))):named a124 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_sum$ ))(= (fun_app$ai (map_sum$b ?v0 ?v1 )(fun_app$ao (map_sum$h ?v2 ?v3 )?v4 ))(fun_app$ap (map_sum$i (fun_app$t (comp$a ?v0 )?v2 )(fun_app$t (comp$a ?v1 )?v3 ))?v4 ))):named a125 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$aq (fun_app$ar (map_sum$j ?v0 )?v1 )(fun_app$as (fun_app$at (map_sum$k ?v2 )?v3 )?v4 ))(fun_app$as (fun_app$at (map_sum$k (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$u (comp$b ?v1 )?v3 ))?v4 ))):named a126 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$av (fun_app$h (map_sum$ ?v0 )?v1 )(fun_app$av (fun_app$h (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$av (fun_app$h (map_sum$ (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$y (comp$f ?v1 )?v3 ))?v4 ))):named a127 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_dtree_fun$ )(?v4 T_N_sum$ ))(= (fun_app$av (fun_app$h (map_sum$ ?v0 )?v1 )(fun_app$aw (fun_app$q (map_sum$a ?v2 )?v3 )?v4 ))(fun_app$aw (fun_app$q (map_sum$a (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$z (comp$g ?v1 )?v3 ))?v4 ))):named a128 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_N_fun$ )(?v4 T_N_sum$ ))(= (fun_app$aw (fun_app$q (map_sum$a ?v0 )?v1 )(fun_app$aq (fun_app$ar (map_sum$j ?v2 )?v3 )?v4 ))(fun_app$aw (fun_app$q (map_sum$a (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$x (comp$e ?v1 )?v3 ))?v4 ))):named a129 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$aw (fun_app$q (map_sum$a ?v0 )?v1 )(fun_app$as (fun_app$at (map_sum$k ?v2 )?v3 )?v4 ))(fun_app$av (fun_app$h (map_sum$ (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$v (comp$c ?v1 )?v3 ))?v4 ))):named a130 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$as (fun_app$at (map_sum$k ?v0 )?v1 )(fun_app$av (fun_app$h (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$as (fun_app$at (map_sum$k (fun_app$au (comp$o ?v0 )?v2 ))(fun_app$i (comp$ ?v1 )?v3 ))?v4 ))):named a131 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(=> (= (fun_app$t (comp$a ?v0 )?v1 )id$c )(= (fun_app$c ?v0 (fun_app$j ?v1 ?v2 ))?v2 ))):named a132 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 N$ )(?v3 N$ ))(=> (and (finite$ ?v0 )(finite$ ?v1 ))(= (= (node$ ?v2 ?v0 )(node$ ?v3 ?v1 ))(and (= ?v2 ?v3 )(= ?v0 ?v1 ))))):named a133 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$c root$ (node$ ?v0 ?v1 ))?v0 )):named a134 ))
(assert (! (forall ((?v0 N$ ))(finite$a (fun_app$o s$ ?v0 ))):named a135 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (member$b ?v0 (fun_app$aa (image$c ?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$s ?v1 ?v3 )))))):named a136 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_N_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b ?v0 (image$k ?v1 ?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$bb ?v1 ?v3 )))))):named a137 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_N_fun$ )(?v2 T_N_sum_set$ ))(= (member$b ?v0 (image$l ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$bc ?v1 ?v3 )))))):named a138 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 N_T_dtree_sum_fun$ )(?v2 N_set$ ))(= (member$ ?v0 (image$i ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$az ?v1 ?v3 )))))):named a139 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (fun_app$g (image$ ?v1 )?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$av ?v1 ?v3 )))))):named a140 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$ ?v0 (image$a ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$aw ?v1 ?v3 )))))):named a141 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 N_T_N_sum_fun$ )(?v2 N_set$ ))(= (member$a ?v0 (image$j ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$ba ?v1 ?v3 )))))):named a142 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (image$d ?v1 ?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$as ?v1 ?v3 )))))):named a143 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$a ?v0 (image$e ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$aq ?v1 ?v3 )))))):named a144 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$av ?v2 ?v4 )(fun_app$av ?v3 ?v4 )))))(= (fun_app$g (image$ ?v2 )?v0 )(fun_app$g (image$ ?v3 )?v1 )))):named a145 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$as ?v2 ?v4 )(fun_app$as ?v3 ?v4 )))))(= (image$d ?v2 ?v0 )(image$d ?v3 ?v1 )))):named a146 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_dtree_sum_fun$ )(?v3 T_N_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_N_sum$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$aw ?v2 ?v4 )(fun_app$aw ?v3 ?v4 )))))(= (image$a ?v2 ?v0 )(image$a ?v3 ?v1 )))):named a147 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$b ?v3 (fun_app$aa (image$c ?v0 )?v1 ))(fun_app$b ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$b ?v3 ?v1 )(fun_app$b ?v2 (fun_app$s ?v0 ?v3 )))))):named a148 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 T_dtree_sum_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$b ?v3 (image$k ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$b ?v2 (fun_app$bb ?v0 ?v3 )))))):named a149 ))
(assert (! (forall ((?v0 T_N_sum_N_fun$ )(?v1 T_N_sum_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$b ?v3 (image$l ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$b ?v2 (fun_app$bc ?v0 ?v3 )))))):named a150 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 N_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (image$i ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$b ?v3 ?v1 )(fun_app$ ?v2 (fun_app$az ?v0 ?v3 )))))):named a151 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (fun_app$g (image$ ?v0 )?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$ ?v2 (fun_app$av ?v0 ?v3 )))))):named a152 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (image$a ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$ ?v2 (fun_app$aw ?v0 ?v3 )))))):named a153 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$a ?v3 (image$j ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$b ?v3 ?v1 )(fun_app$a ?v2 (fun_app$ba ?v0 ?v3 )))))):named a154 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$a ?v3 (image$d ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$a ?v2 (fun_app$as ?v0 ?v3 )))))):named a155 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$a ?v3 (image$e ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$a ?v2 (fun_app$aq ?v0 ?v3 )))))):named a156 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$b ?v3 (fun_app$aa (image$c ?v0 )?v1 ))(fun_app$b ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$b ?v3 ?v1 )(fun_app$b ?v2 (fun_app$s ?v0 ?v3 )))))):named a157 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 T_dtree_sum_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$b ?v3 (image$k ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$b ?v2 (fun_app$bb ?v0 ?v3 )))))):named a158 ))
(assert (! (forall ((?v0 T_N_sum_N_fun$ )(?v1 T_N_sum_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$b ?v3 (image$l ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$b ?v2 (fun_app$bc ?v0 ?v3 )))))):named a159 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 N_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (image$i ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$b ?v3 ?v1 )(fun_app$ ?v2 (fun_app$az ?v0 ?v3 )))))):named a160 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (fun_app$g (image$ ?v0 )?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$ ?v2 (fun_app$av ?v0 ?v3 )))))):named a161 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (image$a ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$ ?v2 (fun_app$aw ?v0 ?v3 )))))):named a162 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 (image$j ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$b ?v3 ?v1 )(fun_app$a ?v2 (fun_app$ba ?v0 ?v3 )))))):named a163 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 (image$d ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$a ?v2 (fun_app$as ?v0 ?v3 )))))):named a164 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 (image$e ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$a ?v2 (fun_app$aq ?v0 ?v3 )))))):named a165 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ )(?v3 N_N_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$s ?v3 ?v0 )))(member$b ?v2 (fun_app$aa (image$c ?v3 )?v1 )))):named a166 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 T_dtree_sum$ )(?v3 N_T_dtree_sum_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$az ?v3 ?v0 )))(member$ ?v2 (image$i ?v3 ?v1 )))):named a167 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 T_N_sum$ )(?v3 N_T_N_sum_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$ba ?v3 ?v0 )))(member$a ?v2 (image$j ?v3 ?v1 )))):named a168 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 N$ )(?v3 T_dtree_sum_N_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$bb ?v3 ?v0 )))(member$b ?v2 (image$k ?v3 ?v1 )))):named a169 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$av ?v3 ?v0 )))(member$ ?v2 (fun_app$g (image$ ?v3 )?v1 )))):named a170 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$as ?v3 ?v0 )))(member$a ?v2 (image$d ?v3 ?v1 )))):named a171 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 N$ )(?v3 T_N_sum_N_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$bc ?v3 ?v0 )))(member$b ?v2 (image$l ?v3 ?v1 )))):named a172 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_N_sum_T_dtree_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$aw ?v3 ?v0 )))(member$ ?v2 (image$a ?v3 ?v1 )))):named a173 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum$ )(?v3 T_N_sum_T_N_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$aq ?v3 ?v0 )))(member$a ?v2 (image$e ?v3 ?v1 )))):named a174 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_N_fun$ ))(=> (member$b ?v0 ?v1 )(member$b (fun_app$s ?v2 ?v0 )(fun_app$aa (image$c ?v2 )?v1 )))):named a175 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_T_dtree_sum_fun$ ))(=> (member$b ?v0 ?v1 )(member$ (fun_app$az ?v2 ?v0 )(image$i ?v2 ?v1 )))):named a176 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_T_N_sum_fun$ ))(=> (member$b ?v0 ?v1 )(member$a (fun_app$ba ?v2 ?v0 )(image$j ?v2 ?v1 )))):named a177 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_N_fun$ ))(=> (member$ ?v0 ?v1 )(member$b (fun_app$bb ?v2 ?v0 )(image$k ?v2 ?v1 )))):named a178 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$ (fun_app$av ?v2 ?v0 )(fun_app$g (image$ ?v2 )?v1 )))):named a179 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$a (fun_app$as ?v2 ?v0 )(image$d ?v2 ?v1 )))):named a180 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_N_fun$ ))(=> (member$a ?v0 ?v1 )(member$b (fun_app$bc ?v2 ?v0 )(image$l ?v2 ?v1 )))):named a181 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_dtree_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$ (fun_app$aw ?v2 ?v0 )(image$a ?v2 ?v1 )))):named a182 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_N_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$a (fun_app$aq ?v2 ?v0 )(image$e ?v2 ?v1 )))):named a183 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$v (comp$c ?v0 )?v1 )(fun_app$y (comp$f ?v2 )?v3 ))(= (fun_app$i (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$u (comp$b (fun_app$t (comp$a ?v4 )?v0 ))?v1 )(fun_app$i (comp$ ?v5 )?v3 )))):named a184 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$x (comp$e ?v0 )?v1 )(fun_app$z (comp$g ?v2 )?v3 ))(= (fun_app$i (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$w (comp$d (fun_app$t (comp$a ?v4 )?v0 ))?v1 )(fun_app$t (comp$a ?v5 )?v3 )))):named a185 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$y (comp$f ?v0 )?v1 )(fun_app$y (comp$f ?v2 )?v3 ))(= (fun_app$i (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$i (comp$ (fun_app$i (comp$ ?v4 )?v0 ))?v1 )(fun_app$i (comp$ ?v5 )?v3 )))):named a186 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$z (comp$g ?v0 )?v1 )(fun_app$z (comp$g ?v2 )?v3 ))(= (fun_app$i (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$t (comp$a (fun_app$i (comp$ ?v4 )?v0 ))?v1 )(fun_app$t (comp$a ?v5 )?v3 )))):named a187 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$y (comp$f ?v0 )?v1 )(fun_app$v (comp$c ?v2 )?v3 ))(= (fun_app$t (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$i (comp$ (fun_app$i (comp$ ?v4 )?v0 ))?v1 )(fun_app$u (comp$b ?v5 )?v3 )))):named a188 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$z (comp$g ?v0 )?v1 )(fun_app$x (comp$e ?v2 )?v3 ))(= (fun_app$t (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$t (comp$a (fun_app$i (comp$ ?v4 )?v0 ))?v1 )(fun_app$w (comp$d ?v5 )?v3 )))):named a189 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$i (comp$ ?v0 )?v1 )(fun_app$i (comp$ ?v2 )?v3 ))(= (fun_app$u (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$i (comp$ (fun_app$u (comp$b ?v4 )?v0 ))?v1 )(fun_app$i (comp$ ?v5 )?v3 )))):named a190 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$t (comp$a ?v0 )?v1 )(fun_app$t (comp$a ?v2 )?v3 ))(= (fun_app$u (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$t (comp$a (fun_app$u (comp$b ?v4 )?v0 ))?v1 )(fun_app$t (comp$a ?v5 )?v3 )))):named a191 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$i (comp$ ?v0 )?v1 )(fun_app$u (comp$b ?v2 )?v3 ))(= (fun_app$t (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$t (comp$a ?v0 )(fun_app$z (comp$g ?v1 )?v4 ))(fun_app$w (comp$d ?v2 )?v5 )))):named a192 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$i (comp$ ?v0 )?v1 )(fun_app$i (comp$ ?v2 )?v3 ))(= (fun_app$y (comp$f ?v3 )?v4 )?v5 ))(= (fun_app$i (comp$ ?v0 )(fun_app$y (comp$f ?v1 )?v4 ))(fun_app$i (comp$ ?v2 )?v5 )))):named a193 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$i (comp$ ?v0 )?v1 )(fun_app$i (comp$ ?v2 )?v3 ))(= (fun_app$z (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$t (comp$a ?v0 )(fun_app$z (comp$g ?v1 )?v4 ))(fun_app$t (comp$a ?v2 )?v5 )))):named a194 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$t (comp$a ?v0 )?v1 )(fun_app$t (comp$a ?v2 )?v3 ))(= (fun_app$v (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$i (comp$ ?v0 )(fun_app$v (comp$c ?v1 )?v4 ))(fun_app$i (comp$ ?v2 )?v5 )))):named a195 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$t (comp$a ?v0 )?v1 )(fun_app$t (comp$a ?v2 )?v3 ))(= (fun_app$x (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$t (comp$a ?v0 )(fun_app$x (comp$e ?v1 )?v4 ))(fun_app$t (comp$a ?v2 )?v5 )))):named a196 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (forall ((?v1 N$ )(?v2 T_dtree_sum_set$ ))(=> (and (finite$ ?v2 )(= ?v0 (node$ ?v1 ?v2 )))false ))false )):named a197 ))
(assert (! (= deftr$ (fun_app$p (unfold$a id$c )s$ )):named a198 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$k (fun_app$l (fun_app$m inFr2$ ?v0 )?v1 )?v2 )(and (member$b (fun_app$c root$ ?v3 )?v0 )(member$ (inr$ ?v1 )(cont$ ?v3 ))))(fun_app$k (fun_app$l (fun_app$m inFr2$ ?v0 )?v3 )?v2 ))):named a199 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(= (fun_app$b (fun_app$n (inItr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$c root$ ?v3 ))(member$b (fun_app$c root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$c root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$b (fun_app$n (inItr$ ?v4 )?v5 )?v6 )))))))))):named a200 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (and (fun_app$b (fun_app$n (inItr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$c root$ ?v3 ))(member$b (fun_app$c root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$c root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$b (fun_app$n (inItr$ ?v4 )?v5 )?v6 ))))))false ))))false )):named a201 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N$ ))(=> (and (member$b (fun_app$c root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(fun_app$b (fun_app$n (inItr$ ?v1 )?v2 )?v3 )))(fun_app$b (fun_app$n (inItr$ ?v1 )?v0 )?v3 ))):named a202 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$ (inr$ ?v1 )(cont$ ?v0 ))(member$ (inr$ ?v2 )(cont$ ?v0 ))))(= (= (fun_app$c root$ ?v1 )(fun_app$c root$ ?v2 ))(= ?v1 ?v2 )))):named a203 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$b (fun_app$c root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(fun_app$k (fun_app$l (fun_app$m inFr$ ?v1 )?v2 )?v3 )))(fun_app$k (fun_app$l (fun_app$m inFr$ ?v1 )?v0 )?v3 ))):named a204 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$b (fun_app$c root$ ?v0 )?v1 ))(not (fun_app$k (fun_app$l (fun_app$m inFr$ ?v1 )?v0 )?v2 )))):named a205 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$k (fun_app$l (fun_app$m inFr$ ?v0 )?v1 )?v2 )(member$b (fun_app$c root$ ?v1 )?v0 ))):named a206 ))
(assert (! (= inFr$ inFr2$ ):named a207 ))
(assert (! (forall ((?v0 N$ ))(wf$ (fun_app$j deftr$ ?v0 ))):named a208 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a209 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (member$ (inr$ ?v0 )(cont$ ?v1 ))(member$a (inr$a (fun_app$c root$ ?v0 ))(image$d (fun_app$at (map_sum$k id$ )root$ )(cont$ ?v1 ))))):named a210 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(= (inFrr$ ?v0 ?v1 ?v2 )(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )(cont$ ?v1 ))(fun_app$k (fun_app$l (fun_app$m inFr$ ?v0 )?v3 )?v2 ))))):named a211 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(= (fun_app$j (subtrOf$ ?v0 )(fun_app$c root$ ?v1 ))?v1 ))):named a212 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(exists ((?v2 N$ ))(and (member$a (inr$a ?v2 )(image$d (fun_app$at (map_sum$k id$ )root$ )(cont$ ?v0 )))(= (fun_app$j (subtrOf$ ?v0 )?v2 )?v1 ))))):named a213 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$a (inr$a ?v0 )(image$d (fun_app$at (map_sum$k id$ )root$ )(cont$ ?v1 )))(= (fun_app$c root$ (fun_app$j (subtrOf$ ?v1 )?v0 ))?v0 ))):named a214 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$a (inr$a ?v0 )(image$d (fun_app$at (map_sum$k id$ )root$ )(cont$ ?v1 )))(and (member$ (inr$ (fun_app$j (subtrOf$ ?v1 )?v0 ))(cont$ ?v1 ))(= (fun_app$c root$ (fun_app$j (subtrOf$ ?v1 )?v0 ))?v0 )))):named a215 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$a (inr$a ?v0 )(image$d (fun_app$at (map_sum$k id$ )root$ )(cont$ ?v1 )))(member$ (inr$ (fun_app$j (subtrOf$ ?v1 )?v0 ))(cont$ ?v1 )))):named a216 ))
(check-sat )
;(get-unsat-core )
