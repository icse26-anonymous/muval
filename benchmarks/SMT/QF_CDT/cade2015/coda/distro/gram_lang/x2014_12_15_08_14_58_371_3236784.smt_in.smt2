;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort N_T_fun$ 0 )
(declare-sort T_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort T_dtree_sum_T_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun x$ ()T$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ ()T_T_dtree_sum_fun$ )
(declare-fun bot$ ()N_set$ )
(declare-fun tr$a ()Dtree$ )
(declare-fun bot$a ()T_set$ )
(declare-fun bot$b ()T_dtree_sum_set$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun minus$ (N_set$ N_set$ )N_set$ )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun minus$a (T_set$ T_set$ )T_set$ )
(declare-fun minus$b (T_dtree_sum_set$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$ )T_set$ )
(declare-fun fun_app$ (T_T_dtree_sum_fun$ T$ )T_dtree_sum$ )
(declare-fun insert$a (T$ T_set$ )T_set$ )
(declare-fun insert$b (T_dtree_sum$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun member$b (T$ T_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun vimage$a (T_dtree_sum_N_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun vimage$b (T_N_fun$ N_set$ )T_set$ )
(declare-fun vimage$c (N_T_dtree_sum_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun vimage$d (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun vimage$e (N_T_fun$ T_set$ )N_set$ )
(declare-fun vimage$f (T_dtree_sum_T_fun$ T_set$ )T_dtree_sum_set$ )
(declare-fun vimage$g (T_T_fun$ T_set$ )T_set$ )
(declare-fun vimage$h (N_N_fun$ N_set$ )N_set$ )
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$ uu$ ?v0 )(inl$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (inFr$ ns$ tr$ x$ )):named a1 ))
(assert (! (member$ (root$ tr$ )ns$ ):named a2 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$ (root$ ?v0 )?v1 )(member$a (inl$ ?v2 )(cont$ ?v0 )))(inFr$ ?v1 ?v0 ?v2 ))):named a3 ))
(assert (! (forall ((?v0 T$ ))(=> (inFr$ ns$ tr$ ?v0 )(or (member$b ?v0 (vimage$ uu$ (cont$ tr$ )))(exists ((?v1 Dtree$ ))(and (member$a (inr$ ?v1 )(cont$ tr$ ))(inFr$ (minus$ ns$ (insert$ (root$ tr$ )bot$ ))?v1 ?v0 )))))):named a4 ))
(assert (! (member$a (inr$ tr$a )(cont$ tr$ )):named a5 ))
(assert (! (inFr$ (minus$ ns$ (insert$ (root$ tr$ )bot$ ))tr$a x$ ):named a6 ))
(assert (! (regular$ tr$ ):named a7 ))
(assert (! (member$ (root$ tr$ )ns$ ):named a8 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(= (inFr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$ (root$ ?v3 )?v4 )(member$a (inl$ ?v5 )(cont$ ?v3 )))))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$ (root$ ?v3 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v3 ))(inFr$ ?v4 ?v5 ?v6 )))))))))):named a9 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$ (root$ ?v3 )?v4 )(member$a (inl$ ?v5 )(cont$ ?v3 ))))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 T$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$ (root$ ?v3 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v3 ))(inFr$ ?v4 ?v5 ?v6 ))))))false ))))false )):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(member$a (inr$ ?v1 )(cont$ ?v3 )))(inFr$ (insert$ (root$ ?v3 )?v0 )?v3 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr$ ?v0 ?v1 ?v2 )(member$ (root$ ?v1 )?v0 ))):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$ (root$ ?v0 )?v1 )(member$a (inl$ ?v2 )(cont$ ?v0 )))(inFr$ ?v1 ?v0 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$ (root$ ?v0 )?v1 )(and (member$a (inr$ ?v2 )(cont$ ?v0 ))(inFr$ ?v1 ?v2 ?v3 )))(inFr$ ?v1 ?v0 ?v3 ))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$ (root$ ?v0 )?v1 ))(not (inFr$ ?v1 ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ ))(= (insert$a ?v0 (minus$a ?v1 (insert$a ?v0 bot$a )))(insert$a ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ ))(= (insert$b ?v0 (minus$b ?v1 (insert$b ?v0 bot$b )))(insert$b ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ ))(= (insert$ ?v0 (minus$ ?v1 (insert$ ?v0 bot$ )))(insert$ ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (regular$ ?v0 )(and (member$ (root$ ?v0 )?v1 )(inFr$ ?v1 ?v0 ?v2 )))(or (member$b ?v2 (vimage$ uu$ (cont$ ?v0 )))(exists ((?v3 Dtree$ ))(and (member$a (inr$ ?v3 )(cont$ ?v0 ))(inFr$ (minus$ ?v1 (insert$ (root$ ?v0 )bot$ ))?v3 ?v2 )))))):named a19 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree$ ))(= (= (inl$ ?v0 )(inr$ ?v1 ))false )):named a20 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T$ ))(= (= (inr$ ?v0 )(inl$ ?v1 ))false )):named a21 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ ))(= (vimage$a ?v0 bot$ )bot$b )):named a22 ))
(assert (! (forall ((?v0 T_N_fun$ ))(= (vimage$b ?v0 bot$ )bot$a )):named a23 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ ))(= (vimage$c ?v0 bot$b )bot$ )):named a24 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ ))(= (vimage$d ?v0 bot$b )bot$b )):named a25 ))
(assert (! (forall ((?v0 N_T_fun$ ))(= (vimage$e ?v0 bot$a )bot$ )):named a26 ))
(assert (! (forall ((?v0 T_dtree_sum_T_fun$ ))(= (vimage$f ?v0 bot$a )bot$b )):named a27 ))
(assert (! (forall ((?v0 T_T_fun$ ))(= (vimage$g ?v0 bot$a )bot$a )):named a28 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ ))(= (vimage$ ?v0 bot$b )bot$a )):named a29 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (vimage$h ?v0 bot$ )bot$ )):named a30 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_set$ ))(=> (member$a ?v0 ?v1 )(= (minus$b (insert$b ?v0 ?v2 )?v1 )(minus$b ?v2 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T_set$ ))(=> (member$b ?v0 ?v1 )(= (minus$a (insert$a ?v0 ?v2 )?v1 )(minus$a ?v2 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (member$ ?v0 ?v1 )(= (minus$ (insert$ ?v0 ?v2 )?v1 )(minus$ ?v2 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_set$ ))(=> (not (member$a ?v0 ?v1 ))(= (minus$b ?v1 (insert$b ?v0 ?v2 ))(minus$b ?v1 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T_set$ ))(=> (not (member$b ?v0 ?v1 ))(= (minus$a ?v1 (insert$a ?v0 ?v2 ))(minus$a ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (not (member$ ?v0 ?v1 ))(= (minus$ ?v1 (insert$ ?v0 ?v2 ))(minus$ ?v1 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 T_set$ ))(= (minus$a ?v0 bot$a )?v0 )):named a37 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (minus$b ?v0 bot$b )?v0 )):named a38 ))
(assert (! (forall ((?v0 N_set$ ))(= (minus$ ?v0 bot$ )?v0 )):named a39 ))
(check-sat )
;(get-unsat-core )
