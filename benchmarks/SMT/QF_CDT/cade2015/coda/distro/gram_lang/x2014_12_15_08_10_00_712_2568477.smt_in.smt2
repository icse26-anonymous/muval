;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_T_dtree_sum_fun$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun t$ ()T$ )
(declare-fun ns$ ()N_set$ )
(declare-fun ta$ ()T$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ ()T_T_dtree_sum_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun nsa$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun uua$ (N_set$ )N_bool_fun$ )
(declare-fun uub$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun comp$ (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun deftr$ (N$ )Dtree$ )
(declare-fun inFr2$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (Dtree_N_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$ )T_set$ )
(declare-fun collect$ (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$ (T_T_dtree_sum_fun$ T$ )T_dtree_sum$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun collect$a (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun fun_app$b (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$c (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$d (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun fun_app$e (N_set_dtree_T_bool_fun_fun_fun$ N_set$ )Dtree_T_bool_fun_fun$ )
(declare-fun fun_app$f (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$g (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$h (Dtree_T_dtree_sum_set_fun$ Dtree$ )T_dtree_sum_set$ )
(declare-fun fun_app$i (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$ uu$ ?v0 )(inl$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$a (uub$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$a (uub$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$b (uua$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$b (uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (not (fun_app$c (fun_app$d (fun_app$e inFr$ nsa$ )(fun_app$f (hsubst$ tr0$ )tra$ ))ta$ )):named a3 ))
(assert (! (member$a (fun_app$g root$ tra$ )nsa$ ):named a4 ))
(assert (! (member$ (inl$ ta$ )(cont$ tra$ )):named a5 ))
(assert (! (not (member$a (fun_app$g root$ tr0$ )nsa$ )):named a6 ))
(assert (! (not (member$a (fun_app$g root$ tr0$ )ns$ )):named a7 ))
(assert (! (fun_app$c (fun_app$d (fun_app$e inFr$ ns$ )tr$ )t$ ):named a8 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (fun_app$g root$ ?v0 )(fun_app$g root$ tr0$ ))(= (fun_app$f (hsubst$ tr0$ )?v0 )(fun_app$f (hsubst$ tr0$ )tr0$ )))):named a9 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$g root$ (fun_app$f (hsubst$ tr0$ )?v0 ))(fun_app$g root$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$h (hsubst_c$ tr0$ )?v0 )(ite (= (fun_app$g root$ ?v0 )(fun_app$g root$ tr0$ ))(cont$ tr0$ )(cont$ ?v0 ))):pattern ((fun_app$h (hsubst_c$ tr0$ )?v0 )))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$g root$ (fun_app$f (hsubst$ ?v0 )?v1 ))(fun_app$g root$ ?v1 ))):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$c (fun_app$d (fun_app$e inFr$ ?v0 )?v1 )?v2 )(member$a (fun_app$g root$ ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 ))(= (fun_app$f (hsubst$ ?v1 )?v0 )(fun_app$f (hsubst$ ?v1 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$a (fun_app$g root$ ?v0 )?v1 )(member$ (inl$ ?v2 )(cont$ ?v0 )))(fun_app$c (fun_app$d (fun_app$e inFr$ ?v1 )?v0 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$a (fun_app$g root$ ?v0 )?v1 ))(not (fun_app$c (fun_app$d (fun_app$e inFr$ ?v1 )?v0 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (and (wf$ tr0$ )(wf$ ?v0 ))(wf$ (fun_app$f (hsubst$ tr0$ )?v0 )))):named a17 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (fun_app$g root$ ?v0 )(fun_app$g root$ tr0$ ))(= (vimage$ uu$ (cont$ (fun_app$f (hsubst$ tr0$ )?v0 )))(vimage$ uu$ (cont$ tr0$ ))))):named a21 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (not (= (fun_app$g root$ ?v0 )(fun_app$g root$ tr0$ )))(= (vimage$ uu$ (cont$ (fun_app$f (hsubst$ tr0$ )?v0 )))(vimage$ uu$ (cont$ ?v0 ))))):named a22 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$a (fun_app$g root$ ?v0 )?v1 )(member$ (inl$ ?v2 )(cont$ ?v0 )))(fun_app$c (fun_app$d (fun_app$e inFr2$ ?v1 )?v0 )?v2 ))):named a23 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (fun_app$h (hsubst_c$ ?v0 )?v1 )(ite (= (fun_app$g root$ ?v1 )(fun_app$g root$ ?v0 ))(cont$ ?v0 )(cont$ ?v1 ))):pattern ((fun_app$h (hsubst_c$ ?v0 )?v1 )))):named a24 ))
(assert (! (= (hsubst$ tr0$ )(unfold$ hsubst_r$ (hsubst_c$ tr0$ ))):named a25 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$g root$ (deftr$ ?v0 ))?v0 )):named a26 ))
(assert (! (= (fun_app$i (comp$ root$ )(hsubst$ tr0$ ))root$ ):named a27 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(= (fun_app$c (fun_app$d (fun_app$e inFr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$a (fun_app$g root$ ?v3 )?v4 )(member$ (inl$ ?v5 )(cont$ ?v3 )))))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$g root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$c (fun_app$d (fun_app$e inFr$ ?v4 )?v5 )?v6 )))))))))):named a28 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$ (inr$ ?v1 )(cont$ ?v0 ))(member$ (inr$ ?v2 )(cont$ ?v0 ))))(= (= (fun_app$g root$ ?v1 )(fun_app$g root$ ?v2 ))(= ?v1 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 N$ ))(wf$ (deftr$ ?v0 ))):named a33 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a34 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree$ ))(not (= (inl$ ?v0 )(inr$ ?v1 )))):named a35 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T$ ))(not (= (inr$ ?v0 )(inl$ ?v1 )))):named a36 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree$ ))(not (= (inl$ ?v0 )(inr$ ?v1 )))):named a37 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T$ ))(not (= (inr$ ?v0 )(inl$ ?v1 )))):named a38 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(=> (and (forall ((?v1 T$ ))(=> (= ?v0 (inl$ ?v1 ))false ))(forall ((?v1 Dtree$ ))(=> (= ?v0 (inr$ ?v1 ))false )))false )):named a39 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(=> (and (forall ((?v1 T$ ))(=> (= ?v0 (inl$ ?v1 ))false ))(forall ((?v1 Dtree$ ))(=> (= ?v0 (inr$ ?v1 ))false )))false )):named a40 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ ))(= (forall ((?v1 T_dtree_sum$ ))(fun_app$a ?v0 ?v1 ))(and (forall ((?v1 T$ ))(fun_app$a ?v0 (inl$ ?v1 )))(forall ((?v1 Dtree$ ))(fun_app$a ?v0 (inr$ ?v1 )))))):named a41 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ ))(= (exists ((?v1 T_dtree_sum$ ))(fun_app$a ?v0 ?v1 ))(or (exists ((?v1 T$ ))(fun_app$a ?v0 (inl$ ?v1 )))(exists ((?v1 Dtree$ ))(fun_app$a ?v0 (inr$ ?v1 )))))):named a42 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst$ ?v0 )(unfold$ hsubst_r$ (hsubst_c$ ?v0 ))):pattern ((hsubst$ ?v0 )))):named a43 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$c (fun_app$d (fun_app$e inFr2$ ?v0 )?v1 )?v2 )(and (member$a (fun_app$g root$ ?v3 )?v0 )(member$ (inr$ ?v1 )(cont$ ?v3 ))))(fun_app$c (fun_app$d (fun_app$e inFr2$ ?v0 )?v3 )?v2 ))):named a44 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_T_dtree_sum_set_fun$ )(?v2 Dtree$ ))(= (fun_app$g root$ (fun_app$f (unfold$ ?v0 ?v1 )?v2 ))(fun_app$g ?v0 ?v2 ))):named a45 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(wf$ ?v1 ))(wf$ (fun_app$f (hsubst$ ?v0 )?v1 )))):named a46 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$c (fun_app$d (fun_app$e inFr2$ ?v0 )?v1 )?v2 )(member$a (fun_app$g root$ ?v1 )?v0 ))):named a47 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$i (comp$ root$ )(hsubst$ ?v0 ))root$ )):named a48 ))
(assert (! (= inFr$ inFr2$ ):named a49 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$a (fun_app$g root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(fun_app$c (fun_app$d (fun_app$e inFr$ ?v1 )?v2 )?v3 )))(fun_app$c (fun_app$d (fun_app$e inFr$ ?v1 )?v0 )?v3 ))):named a50 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(=> (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a51 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ )(?v1 T_dtree_sum_bool_fun$ ))(=> (forall ((?v2 T_dtree_sum$ ))(= (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a52 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_bool_fun$ ))(=> (forall ((?v2 N$ ))(= (fun_app$b ?v0 ?v2 )(fun_app$b ?v1 ?v2 )))(= (collect$a ?v0 )(collect$a ?v1 )))):named a53 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$a (uua$ ?v0 ))?v0 )):named a54 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$ (uub$ ?v0 ))?v0 )):named a55 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$a ?v0 (collect$a ?v1 ))(fun_app$b ?v1 ?v0 ))):named a56 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$a ?v1 ?v0 ))):named a57 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 )))(= (vimage$ uu$ (cont$ (fun_app$f (hsubst$ ?v1 )?v0 )))(vimage$ uu$ (cont$ ?v0 ))))):named a58 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 ))(= (vimage$ uu$ (cont$ (fun_app$f (hsubst$ ?v1 )?v0 )))(vimage$ uu$ (cont$ ?v1 ))))):named a59 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$g hsubst_r$ ?v0 )(fun_app$g root$ ?v0 )):pattern ((fun_app$g hsubst_r$ ?v0 )))):named a60 ))
(check-sat )
;(get-unsat-core )
