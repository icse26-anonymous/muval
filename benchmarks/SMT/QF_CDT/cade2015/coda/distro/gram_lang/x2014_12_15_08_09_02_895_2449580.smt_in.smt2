;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort N_T_N_sum_fun$ 0 )
(declare-sort T_N_sum_N_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort T_N_sum_bool_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort N_T_N_sum_set_prod_set$ 0 )
(declare-sort Dtree_set_dtree_set_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort T_set_set_T_set_set_fun$ 0 )
(declare-sort N_N_T_N_sum_set_prod_fun$ 0 )
(declare-sort N_T_N_sum_set_prod_N_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_T_sum_dtree_T_sum_fun$ 0 )
(declare-sort N_T_N_sum_set_prod_bool_fun$ 0 )
(declare-sort T_T_set_sum_T_T_set_sum_fun$ 0 )
(declare-sort T_T_sum_set_T_T_sum_set_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_set_T_sum_T_set_T_sum_fun$ 0 )
(declare-sort N_T_N_sum_set_prod_T_N_sum_fun$ 0 )
(declare-sort T_N_sum_N_T_N_sum_set_prod_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort T_T_T_sum_sum_T_T_T_sum_sum_fun$ 0 )
(declare-sort Dtree_T_set_sum_dtree_T_set_sum_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort T_set_dtree_sum_T_set_dtree_sum_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ 0 )
(declare-sort T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_prod$ 0)
(declare-sort T_N_sum$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-sort T_T_sum$ 0)
(declare-sort Dtree_T_sum$ 0)
(declare-sort Dtree_dtree_sum$ 0)
(declare-sort T_T_set_sum$ 0)
(declare-sort T_set_T_sum$ 0)
(declare-sort T_set_dtree_sum$ 0)
(declare-sort Dtree_T_set_sum$ 0)
(declare-sort T_T_dtree_sum_sum$ 0)
(declare-sort T_T_T_sum_sum$ 0)
(declare-fun fst$ (N_T_N_sum_set_prod$)N$)
(declare-fun snd$ (N_T_N_sum_set_prod$)T_N_sum_set$)
(declare-fun pair$ (N$ T_N_sum_set$ )N_T_N_sum_set_prod$)
(declare-fun projl$ (T_N_sum$)T$)
(declare-fun inl$ (T$ )T_N_sum$)
(declare-fun projr$ (T_N_sum$)N$)
(declare-fun inr$ (N$ )T_N_sum$)
(declare-fun projl$a (T_dtree_sum$)T$)
(declare-fun inl$a (T$ )T_dtree_sum$)
(declare-fun projr$a (T_dtree_sum$)Dtree$)
(declare-fun inr$a (Dtree$ )T_dtree_sum$)
(declare-fun projl$b (T_T_sum$)T$)
(declare-fun inl$b (T$ )T_T_sum$)
(declare-fun projr$b (T_T_sum$)T$)
(declare-fun inr$b (T$ )T_T_sum$)
(declare-fun projl$c (Dtree_T_sum$)Dtree$)
(declare-fun inl$c (Dtree$ )Dtree_T_sum$)
(declare-fun projr$c (Dtree_T_sum$)T$)
(declare-fun inr$c (T$ )Dtree_T_sum$)
(declare-fun projl$d (Dtree_dtree_sum$)Dtree$)
(declare-fun inl$d (Dtree$ )Dtree_dtree_sum$)
(declare-fun projr$d (Dtree_dtree_sum$)Dtree$)
(declare-fun inr$d (Dtree$ )Dtree_dtree_sum$)
(declare-fun projl$e (T_T_set_sum$)T$)
(declare-fun inl$e (T$ )T_T_set_sum$)
(declare-fun projr$e (T_T_set_sum$)T_set$)
(declare-fun inr$e (T_set$ )T_T_set_sum$)
(declare-fun projl$f (T_set_T_sum$)T_set$)
(declare-fun inl$f (T_set$ )T_set_T_sum$)
(declare-fun projr$f (T_set_T_sum$)T$)
(declare-fun inr$f (T$ )T_set_T_sum$)
(declare-fun projl$g (T_set_dtree_sum$)T_set$)
(declare-fun inl$g (T_set$ )T_set_dtree_sum$)
(declare-fun projr$g (T_set_dtree_sum$)Dtree$)
(declare-fun inr$g (Dtree$ )T_set_dtree_sum$)
(declare-fun projl$h (Dtree_T_set_sum$)Dtree$)
(declare-fun inl$h (Dtree$ )Dtree_T_set_sum$)
(declare-fun projr$h (Dtree_T_set_sum$)T_set$)
(declare-fun inr$h (T_set$ )Dtree_T_set_sum$)
(declare-fun projl$i (T_T_dtree_sum_sum$)T$)
(declare-fun inl$i (T$ )T_T_dtree_sum_sum$)
(declare-fun projr$i (T_T_dtree_sum_sum$)T_dtree_sum$)
(declare-fun inr$i (T_dtree_sum$ )T_T_dtree_sum_sum$)
(declare-fun projl$j (T_T_T_sum_sum$)T$)
(declare-fun inl$j (T$ )T_T_T_sum_sum$)
(declare-fun projr$j (T_T_T_sum_sum$)T_T_sum$)
(declare-fun inr$j (T_T_sum$ )T_T_T_sum_sum$)
(declare-fun p$ ()N_T_N_sum_set_prod_set$ )
(declare-fun s$ (N$ )T_N_sum_set$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun id$a ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$b ()T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ )
(declare-fun id$c ()T_set_T_set_fun$ )
(declare-fun id$d ()T_set_set_T_set_set_fun$ )
(declare-fun id$e ()Dtree_dtree_fun$ )
(declare-fun id$f ()Dtree_set_dtree_set_fun$ )
(declare-fun id$g ()T_T_sum_T_T_sum_fun$ )
(declare-fun id$h ()T_T_sum_set_T_T_sum_set_fun$ )
(declare-fun id$i ()N_N_fun$ )
(declare-fun id$j ()N_set_N_set_fun$ )
(declare-fun id$k ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun id$l ()Dtree_T_sum_dtree_T_sum_fun$ )
(declare-fun id$m ()Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun id$n ()T_T_set_sum_T_T_set_sum_fun$ )
(declare-fun id$o ()T_set_T_sum_T_set_T_sum_fun$ )
(declare-fun id$p ()T_set_dtree_sum_T_set_dtree_sum_fun$ )
(declare-fun id$q ()Dtree_T_set_sum_dtree_T_set_sum_fun$ )
(declare-fun id$r ()T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ )
(declare-fun id$s ()T_T_T_sum_sum_T_T_T_sum_sum_fun$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun uua$ (N_T_N_sum_set_prod_set$ )N_T_N_sum_set_prod_bool_fun$ )
(declare-fun uub$ (N_set$ )N_bool_fun$ )
(declare-fun uuc$ (T_N_sum_set$ )T_N_sum_bool_fun$ )
(declare-fun comp$ (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun comp$a (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$b (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun comp$c (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$d (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$e (N_N_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun deftr$ ()N_dtree_fun$ )
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun finite$ (T_dtree_sum_set$ )Bool )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun image$a (T_dtree_sum_set_T_dtree_sum_set_fun$ )T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ )
(declare-fun image$b (T_set_T_set_fun$ )T_set_set_T_set_set_fun$ )
(declare-fun image$c (Dtree_dtree_fun$ )Dtree_set_dtree_set_fun$ )
(declare-fun image$d (T_T_sum_T_T_sum_fun$ )T_T_sum_set_T_T_sum_set_fun$ )
(declare-fun image$e (N_N_fun$ )N_set_N_set_fun$ )
(declare-fun image$f (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$g (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun image$h (N_T_N_sum_fun$ N_set$ )T_N_sum_set$ )
(declare-fun image$i (T_N_sum_N_fun$ T_N_sum_set$ )N_set$ )
(declare-fun image$j (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$k (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun image$l (N_T_N_sum_set_prod_N_fun$ N_T_N_sum_set_prod_set$ )N_set$ )
(declare-fun image$m (N_N_T_N_sum_set_prod_fun$ N_set$ )N_T_N_sum_set_prod_set$ )
(declare-fun image$n (N_T_N_sum_set_prod_T_N_sum_fun$ N_T_N_sum_set_prod_set$ )T_N_sum_set$ )
(declare-fun image$o (T_N_sum_N_T_N_sum_set_prod_fun$ T_N_sum_set$ )N_T_N_sum_set_prod_set$ )
(declare-fun member$ (N_T_N_sum_set_prod$ N_T_N_sum_set_prod_set$ )Bool )
(declare-fun unfold$ (Dtree_N_fun$ )Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ )
(declare-fun collect$ (T_N_sum_bool_fun$ )T_N_sum_set$ )
(declare-fun fun_app$ (N_T_N_sum_set_prod_bool_fun$ N_T_N_sum_set_prod$ )Bool )
(declare-fun map_sum$ (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun member$b (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun member$c (N$ N_set$ )Bool )
(declare-fun member$d (T$ T_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ )N_dtree_fun$ )
(declare-fun collect$a (N_bool_fun$ )N_set$ )
(declare-fun collect$b (N_T_N_sum_set_prod_bool_fun$ )N_T_N_sum_set_prod_set$ )
(declare-fun collect$c (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$a (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun fun_app$b (T_N_sum_bool_fun$ T_N_sum$ )Bool )
(declare-fun fun_app$c (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$d (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$e (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$f (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$g (Dtree_T_dtree_sum_set_fun$ Dtree$ )T_dtree_sum_set$ )
(declare-fun fun_app$h (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$i (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$j (T_set_T_set_fun$ T_set$ )T_set$ )
(declare-fun fun_app$k (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$l (T_T_fun$ T$ )T$ )
(declare-fun fun_app$m (N_N_fun$ N$ )N$ )
(declare-fun fun_app$n (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun fun_app$o (N_T_N_sum_fun$ N$ )T_N_sum$ )
(declare-fun fun_app$p (T_N_sum_N_fun$ T_N_sum$ )N$ )
(declare-fun fun_app$q (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$r (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$s (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$t (N_T_N_sum_set_prod_N_fun$ N_T_N_sum_set_prod$ )N$ )
(declare-fun fun_app$u (N_N_T_N_sum_set_prod_fun$ N$ )N_T_N_sum_set_prod$ )
(declare-fun fun_app$v (N_T_N_sum_set_prod_T_N_sum_fun$ N_T_N_sum_set_prod$ )T_N_sum$ )
(declare-fun fun_app$w (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$x (Dtree_T_sum_dtree_T_sum_fun$ Dtree_T_sum$ )Dtree_T_sum$ )
(declare-fun fun_app$y (Dtree_dtree_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$z (T_T_set_sum_T_T_set_sum_fun$ T_T_set_sum$ )T_T_set_sum$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(declare-fun map_sum$a (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun map_sum$b (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$c (Dtree_dtree_fun$ T_T_fun$ )Dtree_T_sum_dtree_T_sum_fun$ )
(declare-fun map_sum$d (Dtree_dtree_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$e (T_T_fun$ T_set_T_set_fun$ )T_T_set_sum_T_T_set_sum_fun$ )
(declare-fun map_sum$f (T_set_T_set_fun$ T_T_fun$ )T_set_T_sum_T_set_T_sum_fun$ )
(declare-fun map_sum$g (T_set_T_set_fun$ Dtree_dtree_fun$ )T_set_dtree_sum_T_set_dtree_sum_fun$ )
(declare-fun map_sum$h (Dtree_dtree_fun$ T_set_T_set_fun$ )Dtree_T_set_sum_dtree_T_set_sum_fun$ )
(declare-fun map_sum$i (T_T_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ )
(declare-fun map_sum$j (T_T_fun$ T_T_sum_T_T_sum_fun$ )T_T_T_sum_sum_T_T_T_sum_sum_fun$ )
(declare-fun map_sum$k (T_T_fun$ )N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun fun_app$aa (T_set_T_sum_T_set_T_sum_fun$ T_set_T_sum$ )T_set_T_sum$ )
(declare-fun fun_app$ab (T_set_dtree_sum_T_set_dtree_sum_fun$ T_set_dtree_sum$ )T_set_dtree_sum$ )
(declare-fun fun_app$ac (Dtree_T_set_sum_dtree_T_set_sum_fun$ Dtree_T_set_sum$ )Dtree_T_set_sum$ )
(declare-fun fun_app$ad (T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ T_T_dtree_sum_sum$ )T_T_dtree_sum_sum$ )
(declare-fun fun_app$ae (T_T_T_sum_sum_T_T_T_sum_sum_fun$ T_T_T_sum_sum$ )T_T_T_sum_sum$ )
(declare-fun fun_app$af (T_N_sum_N_T_N_sum_set_prod_fun$ T_N_sum$ )N_T_N_sum_set_prod$ )
(declare-fun fun_app$ag (Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$ah (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$ai (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$aj (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$ak (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$al (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$am (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$an (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$ao (N_N_fun_N_N_fun_fun$ N_N_fun$ )N_N_fun$ )
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$ )(?v1 N_T_N_sum_set_prod$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$a (uu$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uu$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum$ ))(! (= (fun_app$b (uuc$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$b (uuc$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$c (uub$ ?v0 )?v1 )(member$c ?v1 ?v0 )):pattern ((fun_app$c (uub$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (member$ (pair$ (fun_app$d root$ (fun_app$e (hsubst$ tr0$ )tra$ ))(image$ (fun_app$f (map_sum$ id$ )root$ )(cont$ (fun_app$e (hsubst$ tr0$ )tra$ ))))p$ )):named a4 ))
(assert (! (wf$ tr$ ):named a5 ))
(assert (! (wf$ tr0$ ):named a6 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (fun_app$d root$ ?v0 )(fun_app$d root$ tr0$ ))(= (fun_app$e (hsubst$ tr0$ )?v0 )(fun_app$e (hsubst$ tr0$ )tr0$ )))):named a7 ))
(assert (! (= tr1a$ (fun_app$e (hsubst$ tr0$ )tra$ )):named a8 ))
(assert (! (wf$ tra$ ):named a9 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$d root$ (fun_app$e (hsubst$ tr0$ )?v0 ))(fun_app$d root$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$g (hsubst_c$ tr0$ )?v0 )(ite (= (fun_app$d root$ ?v0 )(fun_app$d root$ tr0$ ))(cont$ tr0$ )(cont$ ?v0 ))):pattern ((fun_app$g (hsubst_c$ tr0$ )?v0 )))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$d root$ (fun_app$e (hsubst$ ?v0 )?v1 ))(fun_app$d root$ ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$d root$ ?v0 )(fun_app$d root$ ?v1 ))(= (fun_app$e (hsubst$ ?v1 )?v0 )(fun_app$e (hsubst$ ?v1 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 N$ ))(exists ((?v1 T_N_sum_set$ ))(member$ (pair$ ?v0 ?v1 )p$ ))):named a14 ))
(assert (! (exists ((?v0 Dtree$ ))(and (wf$ ?v0 )(= tr1a$ (fun_app$e (hsubst$ tr0$ )?v0 )))):named a15 ))
(assert (! (= (image$a id$a )id$b ):named a16 ))
(assert (! (= (image$b id$c )id$d ):named a17 ))
(assert (! (= (image$c id$e )id$f ):named a18 ))
(assert (! (= (image$d id$g )id$h ):named a19 ))
(assert (! (= (image$e id$i )id$j ):named a20 ))
(assert (! (= (image$f id$ )id$c ):named a21 ))
(assert (! (= (image$g id$k )id$a ):named a22 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (wf$ ?v0 )(member$ (pair$ (fun_app$d root$ ?v0 )(image$ (fun_app$f (map_sum$ id$ )root$ )(cont$ ?v0 )))p$ ))):named a23 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(! (= (fun_app$h id$k ?v0 )?v0 ):pattern ((fun_app$h id$k ?v0 )))):named a24 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(! (= (fun_app$i id$a ?v0 )?v0 ):pattern ((fun_app$i id$a ?v0 )))):named a25 ))
(assert (! (forall ((?v0 T_set$ ))(! (= (fun_app$j id$c ?v0 )?v0 ):pattern ((fun_app$j id$c ?v0 )))):named a26 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$e id$e ?v0 )?v0 ):pattern ((fun_app$e id$e ?v0 )))):named a27 ))
(assert (! (forall ((?v0 T_T_sum$ ))(! (= (fun_app$k id$g ?v0 )?v0 ):pattern ((fun_app$k id$g ?v0 )))):named a28 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$l id$ ?v0 )?v0 ):pattern ((fun_app$l id$ ?v0 )))):named a29 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$m ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$c ?v0 (fun_app$n (image$e ?v1 )?v3 )))):named a30 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 N_T_N_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$o ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$b ?v0 (image$h ?v1 ?v3 )))):named a31 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_N_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$p ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$c ?v0 (image$i ?v1 ?v3 )))):named a32 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$h ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (fun_app$i (image$g ?v1 )?v3 )))):named a33 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$q ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$b ?v0 (image$ ?v1 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$r ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$a ?v0 (image$j ?v1 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$s ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (image$k ?v1 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_N_sum_set_prod_N_fun$ )(?v2 N_T_N_sum_set_prod$ )(?v3 N_T_N_sum_set_prod_set$ ))(=> (and (= ?v0 (fun_app$t ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$c ?v0 (image$l ?v1 ?v3 )))):named a37 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ )(?v1 N_N_T_N_sum_set_prod_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$u ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$ ?v0 (image$m ?v1 ?v3 )))):named a38 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 N_T_N_sum_set_prod_T_N_sum_fun$ )(?v2 N_T_N_sum_set_prod$ )(?v3 N_T_N_sum_set_prod_set$ ))(=> (and (= ?v0 (fun_app$v ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$b ?v0 (image$n ?v1 ?v3 )))):named a39 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_set$ )(?v2 N$ )(?v3 T_N_sum_set$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_set$ )(?v2 N$ )(?v3 T_N_sum_set$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$d root$ ?v0 )(fun_app$d root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a42 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$k (map_sum$a id$ id$ )?v0 )?v0 )):named a43 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (fun_app$h (fun_app$w (map_sum$b id$ )id$e )?v0 )?v0 )):named a44 ))
(assert (! (forall ((?v0 Dtree_T_sum$ ))(= (fun_app$x (map_sum$c id$e id$ )?v0 )?v0 )):named a45 ))
(assert (! (forall ((?v0 Dtree_dtree_sum$ ))(= (fun_app$y (map_sum$d id$e id$e )?v0 )?v0 )):named a46 ))
(assert (! (forall ((?v0 T_T_set_sum$ ))(= (fun_app$z (map_sum$e id$ id$c )?v0 )?v0 )):named a47 ))
(assert (! (forall ((?v0 T_set_T_sum$ ))(= (fun_app$aa (map_sum$f id$c id$ )?v0 )?v0 )):named a48 ))
(assert (! (forall ((?v0 T_set_dtree_sum$ ))(= (fun_app$ab (map_sum$g id$c id$e )?v0 )?v0 )):named a49 ))
(assert (! (forall ((?v0 Dtree_T_set_sum$ ))(= (fun_app$ac (map_sum$h id$e id$c )?v0 )?v0 )):named a50 ))
(assert (! (forall ((?v0 T_T_dtree_sum_sum$ ))(= (fun_app$ad (map_sum$i id$ id$k )?v0 )?v0 )):named a51 ))
(assert (! (forall ((?v0 T_T_T_sum_sum$ ))(= (fun_app$ae (map_sum$j id$ id$g )?v0 )?v0 )):named a52 ))
(assert (! (= (map_sum$a id$ id$ )id$g ):named a53 ))
(assert (! (= (fun_app$w (map_sum$b id$ )id$e )id$k ):named a54 ))
(assert (! (= (map_sum$c id$e id$ )id$l ):named a55 ))
(assert (! (= (map_sum$d id$e id$e )id$m ):named a56 ))
(assert (! (= (map_sum$e id$ id$c )id$n ):named a57 ))
(assert (! (= (map_sum$f id$c id$ )id$o ):named a58 ))
(assert (! (= (map_sum$g id$c id$e )id$p ):named a59 ))
(assert (! (= (map_sum$h id$e id$c )id$q ):named a60 ))
(assert (! (= (map_sum$i id$ id$k )id$r ):named a61 ))
(assert (! (= (map_sum$j id$ id$g )id$s ):named a62 ))
(assert (! (forall ((?v0 N$ ))(member$ (pair$ ?v0 (s$ ?v0 ))p$ )):named a63 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(subtr$ ?v1 ?v2 ?v0 ))(member$ (pair$ (fun_app$d root$ ?v2 )(image$ (fun_app$f (map_sum$ id$ )root$ )(cont$ ?v2 )))p$ ))):named a64 ))
(assert (! (=> (forall ((?v0 Dtree$ ))(=> (and (wf$ ?v0 )(= tr1a$ (fun_app$e (hsubst$ tr0$ )?v0 )))false ))false ):named a65 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (not (= (fun_app$d root$ ?v0 )(fun_app$d root$ tr0$ )))(= (cont$ (fun_app$e (hsubst$ tr0$ )?v0 ))(fun_app$i (image$g (fun_app$w (map_sum$b id$ )(hsubst$ tr0$ )))(cont$ ?v0 ))))):named a66 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (fun_app$d root$ ?v0 )(fun_app$d root$ tr0$ ))(= (cont$ (fun_app$e (hsubst$ tr0$ )?v0 ))(fun_app$i (image$g (fun_app$w (map_sum$b id$ )(hsubst$ tr0$ )))(cont$ tr0$ ))))):named a67 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v2 ?v3 ))(subtr$ ?v0 ?v1 ?v3 ))):named a68 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(subtr$ ?v1 ?v2 ?v0 ))(wf$ ?v2 ))):named a69 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$c (fun_app$d root$ ?v0 )?v1 )(subtr$ ?v1 ?v0 ?v0 ))):named a70 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$c (fun_app$d root$ ?v1 )?v0 ))):named a71 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$c (fun_app$d root$ ?v2 )?v0 ))):named a72 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= (fun_app$d root$ ?v0 )(fun_app$d root$ ?v1 )))(= (cont$ (fun_app$e (hsubst$ ?v1 )?v0 ))(fun_app$i (image$g (fun_app$w (map_sum$b id$ )(hsubst$ ?v1 )))(cont$ ?v0 ))))):named a73 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$d root$ ?v0 )(fun_app$d root$ ?v1 ))(= (cont$ (fun_app$e (hsubst$ ?v1 )?v0 ))(fun_app$i (image$g (fun_app$w (map_sum$b id$ )(hsubst$ ?v1 )))(cont$ ?v1 ))))):named a74 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ ))(exists ((?v1 N$ )(?v2 T_N_sum_set$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a75 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_set$ )(?v2 N$ )(?v3 T_N_sum_set$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a76 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ ))(=> (forall ((?v1 N$ )(?v2 T_N_sum_set$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a77 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_bool_fun$ )(?v1 N_T_N_sum_set_prod$ ))(=> (forall ((?v2 N$ )(?v3 T_N_sum_set$ ))(fun_app$ ?v0 (pair$ ?v2 ?v3 )))(fun_app$ ?v0 ?v1 ))):named a78 ))
(assert (! (forall ((?v0 T_N_sum_bool_fun$ )(?v1 T_N_sum_bool_fun$ ))(=> (forall ((?v2 T_N_sum$ ))(= (fun_app$b ?v0 ?v2 )(fun_app$b ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a79 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_bool_fun$ ))(=> (forall ((?v2 N$ ))(= (fun_app$c ?v0 ?v2 )(fun_app$c ?v1 ?v2 )))(= (collect$a ?v0 )(collect$a ?v1 )))):named a80 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_bool_fun$ )(?v1 N_T_N_sum_set_prod_bool_fun$ ))(=> (forall ((?v2 N_T_N_sum_set_prod$ ))(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(= (collect$b ?v0 )(collect$b ?v1 )))):named a81 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$c (uu$ ?v0 ))?v0 )):named a82 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$ ))(= (collect$b (uua$ ?v0 ))?v0 )):named a83 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$a (uub$ ?v0 ))?v0 )):named a84 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(= (collect$ (uuc$ ?v0 ))?v0 )):named a85 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$a ?v0 (collect$c ?v1 ))(fun_app$a ?v1 ?v0 ))):named a86 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ )(?v1 N_T_N_sum_set_prod_bool_fun$ ))(= (member$ ?v0 (collect$b ?v1 ))(fun_app$ ?v1 ?v0 ))):named a87 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$c ?v0 (collect$a ?v1 ))(fun_app$c ?v1 ?v0 ))):named a88 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_bool_fun$ ))(= (member$b ?v0 (collect$ ?v1 ))(fun_app$b ?v1 ?v0 ))):named a89 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ ))(=> (forall ((?v1 N$ )(?v2 T_N_sum_set$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a90 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_N_fun$ ))(=> (member$c ?v0 ?v1 )(member$c (fun_app$m ?v2 ?v0 )(fun_app$n (image$e ?v2 )?v1 )))):named a91 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_T_N_sum_fun$ ))(=> (member$c ?v0 ?v1 )(member$b (fun_app$o ?v2 ?v0 )(image$h ?v2 ?v1 )))):named a92 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_N_fun$ ))(=> (member$b ?v0 ?v1 )(member$c (fun_app$p ?v2 ?v0 )(image$i ?v2 ?v1 )))):named a93 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$a (fun_app$h ?v2 ?v0 )(fun_app$i (image$g ?v2 )?v1 )))):named a94 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$b (fun_app$q ?v2 ?v0 )(image$ ?v2 ?v1 )))):named a95 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_dtree_sum_fun$ ))(=> (member$b ?v0 ?v1 )(member$a (fun_app$r ?v2 ?v0 )(image$j ?v2 ?v1 )))):named a96 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_N_sum_fun$ ))(=> (member$b ?v0 ?v1 )(member$b (fun_app$s ?v2 ?v0 )(image$k ?v2 ?v1 )))):named a97 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ )(?v1 N_T_N_sum_set_prod_set$ )(?v2 N_T_N_sum_set_prod_N_fun$ ))(=> (member$ ?v0 ?v1 )(member$c (fun_app$t ?v2 ?v0 )(image$l ?v2 ?v1 )))):named a98 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_N_T_N_sum_set_prod_fun$ ))(=> (member$c ?v0 ?v1 )(member$ (fun_app$u ?v2 ?v0 )(image$m ?v2 ?v1 )))):named a99 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ )(?v1 N_T_N_sum_set_prod_set$ )(?v2 N_T_N_sum_set_prod_T_N_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$b (fun_app$v ?v2 ?v0 )(image$n ?v2 ?v1 )))):named a100 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ )(?v3 N_N_fun$ ))(=> (and (member$c ?v0 ?v1 )(= ?v2 (fun_app$m ?v3 ?v0 )))(member$c ?v2 (fun_app$n (image$e ?v3 )?v1 )))):named a101 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 T_N_sum$ )(?v3 N_T_N_sum_fun$ ))(=> (and (member$c ?v0 ?v1 )(= ?v2 (fun_app$o ?v3 ?v0 )))(member$b ?v2 (image$h ?v3 ?v1 )))):named a102 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 N$ )(?v3 T_N_sum_N_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$p ?v3 ?v0 )))(member$c ?v2 (image$i ?v3 ?v1 )))):named a103 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$h ?v3 ?v0 )))(member$a ?v2 (fun_app$i (image$g ?v3 )?v1 )))):named a104 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$q ?v3 ?v0 )))(member$b ?v2 (image$ ?v3 ?v1 )))):named a105 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_N_sum_T_dtree_sum_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$r ?v3 ?v0 )))(member$a ?v2 (image$j ?v3 ?v1 )))):named a106 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum$ )(?v3 T_N_sum_T_N_sum_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$s ?v3 ?v0 )))(member$b ?v2 (image$k ?v3 ?v1 )))):named a107 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ )(?v1 N_T_N_sum_set_prod_set$ )(?v2 N$ )(?v3 N_T_N_sum_set_prod_N_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$t ?v3 ?v0 )))(member$c ?v2 (image$l ?v3 ?v1 )))):named a108 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_T_N_sum_set_prod$ )(?v3 N_N_T_N_sum_set_prod_fun$ ))(=> (and (member$c ?v0 ?v1 )(= ?v2 (fun_app$u ?v3 ?v0 )))(member$ ?v2 (image$m ?v3 ?v1 )))):named a109 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ )(?v1 N_T_N_sum_set_prod_set$ )(?v2 T_N_sum$ )(?v3 N_T_N_sum_set_prod_T_N_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$v ?v3 ?v0 )))(member$b ?v2 (image$n ?v3 ?v1 )))):named a110 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$c ?v3 (fun_app$n (image$e ?v0 )?v1 ))(fun_app$c ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$c ?v3 ?v1 )(fun_app$c ?v2 (fun_app$m ?v0 ?v3 )))))):named a111 ))
(assert (! (forall ((?v0 T_N_sum_N_fun$ )(?v1 T_N_sum_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$c ?v3 (image$i ?v0 ?v1 ))(fun_app$c ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$b ?v3 ?v1 )(fun_app$c ?v2 (fun_app$p ?v0 ?v3 )))))):named a112 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$b ?v3 (image$h ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$c ?v3 ?v1 )(fun_app$b ?v2 (fun_app$o ?v0 ?v3 )))))):named a113 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$a ?v3 (fun_app$i (image$g ?v0 )?v1 ))(fun_app$a ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$a ?v2 (fun_app$h ?v0 ?v3 )))))):named a114 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$a ?v3 (image$j ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$b ?v3 ?v1 )(fun_app$a ?v2 (fun_app$r ?v0 ?v3 )))))):named a115 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$b ?v3 (image$ ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$b ?v2 (fun_app$q ?v0 ?v3 )))))):named a116 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$b ?v3 (image$k ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$b ?v3 ?v1 )(fun_app$b ?v2 (fun_app$s ?v0 ?v3 )))))):named a117 ))
(assert (! (forall ((?v0 N_N_T_N_sum_set_prod_fun$ )(?v1 N_set$ )(?v2 N_T_N_sum_set_prod_bool_fun$ ))(=> (forall ((?v3 N_T_N_sum_set_prod$ ))(=> (member$ ?v3 (image$m ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$c ?v3 ?v1 )(fun_app$ ?v2 (fun_app$u ?v0 ?v3 )))))):named a118 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_N_fun$ )(?v1 N_T_N_sum_set_prod_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$c ?v3 (image$l ?v0 ?v1 ))(fun_app$c ?v2 ?v3 )))(forall ((?v3 N_T_N_sum_set_prod$ ))(=> (member$ ?v3 ?v1 )(fun_app$c ?v2 (fun_app$t ?v0 ?v3 )))))):named a119 ))
(assert (! (forall ((?v0 T_N_sum_N_T_N_sum_set_prod_fun$ )(?v1 T_N_sum_set$ )(?v2 N_T_N_sum_set_prod_bool_fun$ ))(=> (forall ((?v3 N_T_N_sum_set_prod$ ))(=> (member$ ?v3 (image$o ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$b ?v3 ?v1 )(fun_app$ ?v2 (fun_app$af ?v0 ?v3 )))))):named a120 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$c ?v3 (fun_app$n (image$e ?v0 )?v1 ))(fun_app$c ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$c ?v3 ?v1 )(fun_app$c ?v2 (fun_app$m ?v0 ?v3 )))))):named a121 ))
(assert (! (forall ((?v0 T_N_sum_N_fun$ )(?v1 T_N_sum_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$c ?v3 (image$i ?v0 ?v1 ))(fun_app$c ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$b ?v3 ?v1 )(fun_app$c ?v2 (fun_app$p ?v0 ?v3 )))))):named a122 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$b ?v3 (image$h ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$c ?v3 ?v1 )(fun_app$b ?v2 (fun_app$o ?v0 ?v3 )))))):named a123 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$a ?v3 (fun_app$i (image$g ?v0 )?v1 ))(fun_app$a ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$a ?v2 (fun_app$h ?v0 ?v3 )))))):named a124 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$a ?v3 (image$j ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$b ?v3 ?v1 )(fun_app$a ?v2 (fun_app$r ?v0 ?v3 )))))):named a125 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$b ?v3 (image$ ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$b ?v2 (fun_app$q ?v0 ?v3 )))))):named a126 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$b ?v3 (image$k ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$b ?v3 ?v1 )(fun_app$b ?v2 (fun_app$s ?v0 ?v3 )))))):named a127 ))
(assert (! (forall ((?v0 N_N_T_N_sum_set_prod_fun$ )(?v1 N_set$ )(?v2 N_T_N_sum_set_prod_bool_fun$ ))(=> (exists ((?v3 N_T_N_sum_set_prod$ ))(and (member$ ?v3 (image$m ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$c ?v3 ?v1 )(fun_app$ ?v2 (fun_app$u ?v0 ?v3 )))))):named a128 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_N_fun$ )(?v1 N_T_N_sum_set_prod_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$c ?v3 (image$l ?v0 ?v1 ))(fun_app$c ?v2 ?v3 )))(exists ((?v3 N_T_N_sum_set_prod$ ))(and (member$ ?v3 ?v1 )(fun_app$c ?v2 (fun_app$t ?v0 ?v3 )))))):named a129 ))
(assert (! (forall ((?v0 T_N_sum_N_T_N_sum_set_prod_fun$ )(?v1 T_N_sum_set$ )(?v2 N_T_N_sum_set_prod_bool_fun$ ))(=> (exists ((?v3 N_T_N_sum_set_prod$ ))(and (member$ ?v3 (image$o ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$b ?v3 ?v1 )(fun_app$ ?v2 (fun_app$af ?v0 ?v3 )))))):named a130 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set$ )(?v2 T_T_fun$ )(?v3 T_T_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T$ ))(=> (member$d ?v4 ?v1 )(= (fun_app$l ?v2 ?v4 )(fun_app$l ?v3 ?v4 )))))(= (fun_app$j (image$f ?v2 )?v0 )(fun_app$j (image$f ?v3 )?v1 )))):named a131 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ )(?v2 N_N_T_N_sum_set_prod_fun$ )(?v3 N_N_T_N_sum_set_prod_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 N$ ))(=> (member$c ?v4 ?v1 )(= (fun_app$u ?v2 ?v4 )(fun_app$u ?v3 ?v4 )))))(= (image$m ?v2 ?v0 )(image$m ?v3 ?v1 )))):named a132 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ )(?v2 N_T_N_sum_fun$ )(?v3 N_T_N_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 N$ ))(=> (member$c ?v4 ?v1 )(= (fun_app$o ?v2 ?v4 )(fun_app$o ?v3 ?v4 )))))(= (image$h ?v2 ?v0 )(image$h ?v3 ?v1 )))):named a133 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 N$ ))(=> (member$c ?v4 ?v1 )(= (fun_app$m ?v2 ?v4 )(fun_app$m ?v3 ?v4 )))))(= (fun_app$n (image$e ?v2 )?v0 )(fun_app$n (image$e ?v3 )?v1 )))):named a134 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_N_fun$ )(?v3 T_N_sum_N_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_N_sum$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$p ?v2 ?v4 )(fun_app$p ?v3 ?v4 )))))(= (image$i ?v2 ?v0 )(image$i ?v3 ?v1 )))):named a135 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$q ?v2 ?v4 )(fun_app$q ?v3 ?v4 )))))(= (image$ ?v2 ?v0 )(image$ ?v3 ?v1 )))):named a136 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$h ?v2 ?v4 )(fun_app$h ?v3 ?v4 )))))(= (fun_app$i (image$g ?v2 )?v0 )(fun_app$i (image$g ?v3 )?v1 )))):named a137 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_dtree_sum_fun$ )(?v3 T_N_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_N_sum$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$r ?v2 ?v4 )(fun_app$r ?v3 ?v4 )))))(= (image$j ?v2 ?v0 )(image$j ?v3 ?v1 )))):named a138 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (member$c ?v0 (fun_app$n (image$e ?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$c ?v3 ?v2 )(= ?v0 (fun_app$m ?v1 ?v3 )))))):named a139 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_N_fun$ )(?v2 T_N_sum_set$ ))(= (member$c ?v0 (image$i ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$p ?v1 ?v3 )))))):named a140 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 N_T_N_sum_fun$ )(?v2 N_set$ ))(= (member$b ?v0 (image$h ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$c ?v3 ?v2 )(= ?v0 (fun_app$o ?v1 ?v3 )))))):named a141 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (fun_app$i (image$g ?v1 )?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$h ?v1 ?v3 )))))):named a142 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$a ?v0 (image$j ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$r ?v1 ?v3 )))))):named a143 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b ?v0 (image$ ?v1 ?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$q ?v1 ?v3 )))))):named a144 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$b ?v0 (image$k ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$s ?v1 ?v3 )))))):named a145 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ )(?v1 N_N_T_N_sum_set_prod_fun$ )(?v2 N_set$ ))(= (member$ ?v0 (image$m ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$c ?v3 ?v2 )(= ?v0 (fun_app$u ?v1 ?v3 )))))):named a146 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_N_sum_set_prod_N_fun$ )(?v2 N_T_N_sum_set_prod_set$ ))(= (member$c ?v0 (image$l ?v1 ?v2 ))(exists ((?v3 N_T_N_sum_set_prod$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$t ?v1 ?v3 )))))):named a147 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ )(?v1 T_N_sum_N_T_N_sum_set_prod_fun$ )(?v2 T_N_sum_set$ ))(= (member$ ?v0 (image$o ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$af ?v1 ?v3 )))))):named a148 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(! (= (fun_app$h id$k ?v0 )?v0 ):pattern ((fun_app$h id$k ?v0 )))):named a149 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(! (= (fun_app$i id$a ?v0 )?v0 ):pattern ((fun_app$i id$a ?v0 )))):named a150 ))
(assert (! (forall ((?v0 T_set$ ))(! (= (fun_app$j id$c ?v0 )?v0 ):pattern ((fun_app$j id$c ?v0 )))):named a151 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$e id$e ?v0 )?v0 ):pattern ((fun_app$e id$e ?v0 )))):named a152 ))
(assert (! (forall ((?v0 T_T_sum$ ))(! (= (fun_app$k id$g ?v0 )?v0 ):pattern ((fun_app$k id$g ?v0 )))):named a153 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$l id$ ?v0 )?v0 ):pattern ((fun_app$l id$ ?v0 )))):named a154 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (fun_app$g (hsubst_c$ ?v0 )?v1 )(ite (= (fun_app$d root$ ?v1 )(fun_app$d root$ ?v0 ))(cont$ ?v0 )(cont$ ?v1 ))):pattern ((fun_app$g (hsubst_c$ ?v0 )?v1 )))):named a155 ))
(assert (! (= (hsubst$ tr0$ )(fun_app$ag (unfold$ hsubst_r$ )(hsubst_c$ tr0$ ))):named a156 ))
(assert (! (forall ((?v0 N$ ))(= (cont$ (fun_app$ah deftr$ ?v0 ))(image$j (fun_app$ai (map_sum$k id$ )deftr$ )(s$ ?v0 )))):named a157 ))
(assert (! (forall ((?v0 Dtree$ ))(finite$ (fun_app$g (hsubst_c$ tr0$ )?v0 ))):named a158 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (fun_app$d root$ ?v0 )(cont$ ?v0 ))?v0 )):named a159 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$d root$ (fun_app$ah deftr$ ?v0 ))?v0 )):named a160 ))
(assert (! (= (fun_app$aj (comp$ root$ )(hsubst$ tr0$ ))root$ ):named a161 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$b (inr$ ?v0 )(image$ (fun_app$f (map_sum$ id$ )root$ )(cont$ ?v1 )))(= (fun_app$d root$ (fun_app$ah (subtrOf$ ?v1 )?v0 ))?v0 ))):named a162 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$d hsubst_r$ ?v0 )(fun_app$d root$ ?v0 )):pattern ((fun_app$d hsubst_r$ ?v0 )))):named a163 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$e (fun_app$ak (comp$a ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$ak (comp$a ?v0 )?v1 )?v2 )))):named a164 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$d (fun_app$al (comp$b ?v0 )?v1 )?v2 )(fun_app$m ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$al (comp$b ?v0 )?v1 )?v2 )))):named a165 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$d (fun_app$aj (comp$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$aj (comp$ ?v0 )?v1 )?v2 )))):named a166 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ ))(= (fun_app$ak (comp$a ?v0 )id$e )?v0 )):named a167 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$aj (comp$ ?v0 )id$e )?v0 )):named a168 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ ))(= (fun_app$ak (comp$a id$e )?v0 )?v0 )):named a169 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$al (comp$b id$i )?v0 )?v0 )):named a170 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ ))(= (fun_app$ak (comp$a id$e )?v0 )?v0 )):named a171 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$al (comp$b id$i )?v0 )?v0 )):named a172 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$d root$ (node$ ?v0 ?v1 ))?v0 )):named a173 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 N$ )(?v3 N$ ))(=> (and (finite$ ?v0 )(finite$ ?v1 ))(= (= (node$ ?v2 ?v0 )(node$ ?v3 ?v1 ))(and (= ?v2 ?v3 )(= ?v0 ?v1 ))))):named a174 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 N$ ))(=> (finite$ ?v0 )(= (cont$ (node$ ?v1 ?v0 ))?v0 ))):named a175 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$aj (comp$ ?v0 )(fun_app$am (comp$c ?v1 )?v2 ))(fun_app$al (comp$b (fun_app$an (comp$d ?v0 )?v1 ))?v2 ))):named a176 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$ak (comp$a ?v0 )(fun_app$ak (comp$a ?v1 )?v2 ))(fun_app$ak (comp$a (fun_app$ak (comp$a ?v0 )?v1 ))?v2 ))):named a177 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$al (comp$b ?v0 )(fun_app$al (comp$b ?v1 )?v2 ))(fun_app$al (comp$b (fun_app$ao (comp$e ?v0 )?v1 ))?v2 ))):named a178 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$al (comp$b ?v0 )(fun_app$aj (comp$ ?v1 )?v2 ))(fun_app$aj (comp$ (fun_app$al (comp$b ?v0 )?v1 ))?v2 ))):named a179 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$aj (comp$ ?v0 )(fun_app$ak (comp$a ?v1 )?v2 ))(fun_app$aj (comp$ (fun_app$aj (comp$ ?v0 )?v1 ))?v2 ))):named a180 ))
(check-sat )
;(get-unsat-core )
