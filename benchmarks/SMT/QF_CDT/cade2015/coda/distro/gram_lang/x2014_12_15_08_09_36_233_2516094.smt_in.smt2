;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun ta$ ()T$ )
(declare-fun bot$ ()N_set$ )
(declare-fun nsa$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun bot$a ()T_dtree_sum_set$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun minus$ (N_set$ )N_set_N_set_fun$ )
(declare-fun hsubst$ (Dtree$ Dtree$ )Dtree$ )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun minus$a (T_dtree_sum_set$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun fun_app$ (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun insert$a (T_dtree_sum$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun fun_app$a (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun hsubst_c$ (Dtree$ Dtree$ )T_dtree_sum_set$ )
(assert (! (not (inFr$ (fun_app$ (minus$ nsa$ )(insert$ (root$ tr0$ )bot$ ))tra$ ta$ )):named a0 ))
(assert (! (not (= (root$ tra$ )(root$ tr0$ ))):named a1 ))
(assert (! (member$ (inl$ ta$ )(cont$ tra$ )):named a2 ))
(assert (! (not (= (root$ tr1a$ )(root$ tr0$ ))):named a3 ))
(assert (! (member$a (root$ tr1a$ )nsa$ ):named a4 ))
(assert (! (member$ (inl$ ta$ )(cont$ tr1a$ )):named a5 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst_c$ tr0$ ?v0 )(ite (= (root$ ?v0 )(root$ tr0$ ))(cont$ tr0$ )(cont$ ?v0 ))):pattern ((hsubst_c$ tr0$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr$ ?v0 ?v1 ?v2 )(member$a (root$ ?v1 )?v0 ))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$a (root$ ?v0 )?v1 )(member$ (inl$ ?v2 )(cont$ ?v0 )))(inFr$ ?v1 ?v0 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$a (root$ ?v0 )?v1 ))(not (inFr$ ?v1 ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ ))(= (insert$a ?v0 (fun_app$a (minus$a ?v1 )(insert$a ?v0 bot$a )))(insert$a ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ ))(= (insert$ ?v0 (fun_app$ (minus$ ?v1 )(insert$ ?v0 bot$ )))(insert$ ?v0 ?v1 ))):named a11 ))
(assert (! (= tr1a$ (hsubst$ tr0$ tra$ )):named a12 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_set$ ))(=> (member$ ?v0 ?v1 )(= (fun_app$a (minus$a (insert$a ?v0 ?v2 ))?v1 )(fun_app$a (minus$a ?v2 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (member$a ?v0 ?v1 )(= (fun_app$ (minus$ (insert$ ?v0 ?v2 ))?v1 )(fun_app$ (minus$ ?v2 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_set$ ))(=> (not (member$ ?v0 ?v1 ))(= (fun_app$a (minus$a ?v1 )(insert$a ?v0 ?v2 ))(fun_app$a (minus$a ?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (not (member$a ?v0 ?v1 ))(= (fun_app$ (minus$ ?v1 )(insert$ ?v0 ?v2 ))(fun_app$ (minus$ ?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (fun_app$a (minus$a ?v0 )bot$a )?v0 )):named a17 ))
(assert (! (forall ((?v0 N_set$ ))(= (fun_app$ (minus$ ?v0 )bot$ )?v0 )):named a18 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(! (= (fun_app$a (minus$a ?v0 )?v0 )bot$a ):pattern ((minus$a ?v0 )))):named a19 ))
(assert (! (forall ((?v0 N_set$ ))(! (= (fun_app$ (minus$ ?v0 )?v0 )bot$ ):pattern ((minus$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (fun_app$a (minus$a bot$a )?v0 )bot$a )):named a21 ))
(assert (! (forall ((?v0 N_set$ ))(= (fun_app$ (minus$ bot$ )?v0 )bot$ )):named a22 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(member$ ?v0 (insert$a ?v0 bot$a ))):named a23 ))
(assert (! (forall ((?v0 N$ ))(member$a ?v0 (insert$ ?v0 bot$ ))):named a24 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (root$ ?v0 )(root$ tr0$ ))(= (hsubst$ tr0$ ?v0 )(hsubst$ tr0$ tr0$ )))):named a25 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$a (minus$a ?v0 )(insert$a ?v1 ?v2 ))(fun_app$a (minus$a (fun_app$a (minus$a ?v0 )(insert$a ?v1 bot$a )))?v2 ))):named a26 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ )(?v2 N_set$ ))(= (fun_app$ (minus$ ?v0 )(insert$ ?v1 ?v2 ))(fun_app$ (minus$ (fun_app$ (minus$ ?v0 )(insert$ ?v1 bot$ )))?v2 ))):named a27 ))
(check-sat )
;(get-unsat-core )
