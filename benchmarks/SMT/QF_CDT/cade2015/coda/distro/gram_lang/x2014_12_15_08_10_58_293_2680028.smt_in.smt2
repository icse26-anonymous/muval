;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun n$ ()N$ )
(declare-fun na$ ()N$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ ()Dtree_bool_fun$ )
(declare-fun nsa$ ()N_set$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tr2$ ()Dtree$ )
(declare-fun uua$ ()T_dtree_sum_bool_fun$ )
(declare-fun uub$ ()Dtree_bool_fun$ )
(declare-fun uuc$ ()N_bool_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun top$a ()Dtree_set$ )
(declare-fun top$b ()T_dtree_sum_set$ )
(declare-fun deftr$ (N$ )Dtree$ )
(declare-fun subtr$ (N_set$ )Dtree_dtree_bool_fun_fun$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun collect$ (Dtree_bool_fun$ )Dtree_set$ )
(declare-fun fun_app$ (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun member$a (Dtree$ Dtree_set$ )Bool )
(declare-fun member$b (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun collect$a (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun collect$b (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun fun_app$b (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$c (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$d (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$ uu$ ?v0 )(exists ((?v1 N$ ))(and (member$ ?v1 top$ )(= ?v0 (deftr$ ?v1 ))))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(! (= (fun_app$a uua$ ?v0 )true ):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$ uub$ ?v0 )true ):pattern ((fun_app$ uub$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$b uuc$ ?v0 )true ):pattern ((fun_app$b uuc$ ?v0 )))):named a3 ))
(assert (! (not (member$a tr2$ (collect$ uu$ ))):named a4 ))
(assert (! (forall ((?v0 N$ ))(=> (= tr2$ (deftr$ ?v0 ))(= tr1$ (deftr$ (root$ tr1$ ))))):named a5 ))
(assert (! (forall ((?v0 Dtree$ ))(= (member$a ?v0 top$a )true )):named a6 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (member$b ?v0 top$b )true )):named a7 ))
(assert (! (forall ((?v0 N$ ))(= (member$ ?v0 top$ )true )):named a8 ))
(assert (! (forall ((?v0 Dtree$ ))(member$a ?v0 top$a )):named a9 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(member$b ?v0 top$b )):named a10 ))
(assert (! (forall ((?v0 N$ ))(member$ ?v0 top$ )):named a11 ))
(assert (! (fun_app$ (fun_app$c (subtr$ nsa$ )tr1$ )tr2$ ):named a12 ))
(assert (! (= top$b (collect$a uua$ )):named a13 ))
(assert (! (= top$a (collect$ uub$ )):named a14 ))
(assert (! (= top$ (collect$b uuc$ )):named a15 ))
(assert (! (fun_app$ (fun_app$c (subtr$ ns$ )tr$ )(deftr$ n$ )):named a16 ))
(assert (! (forall ((?v0 Dtree_set$ )(?v1 Dtree_bool_fun$ ))(= (exists ((?v2 Dtree$ ))(and (member$a ?v2 ?v0 )(fun_app$ ?v1 ?v2 )))(exists ((?v2 Dtree$ ))(and (member$a ?v2 ?v0 )(fun_app$ ?v1 ?v2 ))))):named a17 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_bool_fun$ ))(= (exists ((?v2 N$ ))(and (member$ ?v2 ?v0 )(fun_app$b ?v1 ?v2 )))(exists ((?v2 N$ ))(and (member$ ?v2 ?v0 )(fun_app$b ?v1 ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_bool_fun$ ))(= (exists ((?v2 T_dtree_sum$ ))(and (member$b ?v2 ?v0 )(fun_app$a ?v1 ?v2 )))(exists ((?v2 T_dtree_sum$ ))(and (member$b ?v2 ?v0 )(fun_app$a ?v1 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 Dtree_set$ )(?v1 Dtree_bool_fun$ )(?v2 Dtree_bool_fun$ ))(=> (and (forall ((?v3 Dtree$ ))(=> (and (member$a ?v3 ?v0 )(fun_app$ ?v1 ?v3 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 Dtree$ ))(and (member$a ?v3 ?v0 )(fun_app$ ?v1 ?v3 ))))(exists ((?v3 Dtree$ ))(and (member$a ?v3 ?v0 )(fun_app$ ?v2 ?v3 ))))):named a20 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_bool_fun$ )(?v2 N_bool_fun$ ))(=> (and (forall ((?v3 N$ ))(=> (and (member$ ?v3 ?v0 )(fun_app$b ?v1 ?v3 ))(fun_app$b ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$ ?v3 ?v0 )(fun_app$b ?v1 ?v3 ))))(exists ((?v3 N$ ))(and (member$ ?v3 ?v0 )(fun_app$b ?v2 ?v3 ))))):named a21 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_bool_fun$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (and (forall ((?v3 T_dtree_sum$ ))(=> (and (member$b ?v3 ?v0 )(fun_app$a ?v1 ?v3 ))(fun_app$a ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$b ?v3 ?v0 )(fun_app$a ?v1 ?v3 ))))(exists ((?v3 T_dtree_sum$ ))(and (member$b ?v3 ?v0 )(fun_app$a ?v2 ?v3 ))))):named a22 ))
(assert (! (forall ((?v0 Dtree_set$ ))(=> (forall ((?v1 Dtree$ ))(member$a ?v1 ?v0 ))(= top$a ?v0 ))):named a23 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(=> (forall ((?v1 T_dtree_sum$ ))(member$b ?v1 ?v0 ))(= top$b ?v0 ))):named a24 ))
(assert (! (forall ((?v0 N_set$ ))(=> (forall ((?v1 N$ ))(member$ ?v1 ?v0 ))(= top$ ?v0 ))):named a25 ))
(assert (! (exists ((?v0 Dtree$ ))(member$a ?v0 top$a )):named a26 ))
(assert (! (exists ((?v0 T_dtree_sum$ ))(member$b ?v0 top$b )):named a27 ))
(assert (! (exists ((?v0 N$ ))(member$ ?v0 top$ )):named a28 ))
(assert (! (member$b (inr$ tr2$ )(cont$ (deftr$ na$ ))):named a29 ))
(assert (! (member$ (root$ (deftr$ na$ ))nsa$ ):named a30 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (deftr$ ?v0 ))?v0 )):named a31 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (fun_app$ (fun_app$c (subtr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$ (root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$ (root$ ?v3 )?v4 )(and (fun_app$ (fun_app$c (subtr$ ?v4 )?v5 )?v6 )(member$b (inr$ ?v6 )(cont$ ?v3 ))))))))))):named a32 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set_dtree_dtree_bool_fun_fun_fun$ ))(=> (and (fun_app$ (fun_app$c (subtr$ ?v0 )?v1 )?v2 )(and (forall ((?v4 N_set$ )(?v5 Dtree$ ))(fun_app$ (fun_app$c (fun_app$d ?v3 ?v4 )?v5 )?v5 ))(forall ((?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$ (root$ ?v5 )?v4 )(and (member$b (inr$ ?v5 )(cont$ ?v6 ))(and (fun_app$ (fun_app$c (subtr$ ?v4 )?v6 )?v7 )(fun_app$ (fun_app$c (fun_app$d ?v3 ?v4 )?v6 )?v7 ))))(fun_app$ (fun_app$c (fun_app$d ?v3 ?v4 )?v5 )?v7 )))))(fun_app$ (fun_app$c (fun_app$d ?v3 ?v0 )?v1 )?v2 ))):named a33 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (fun_app$ (fun_app$c (subtr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$ (root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$ (root$ ?v3 )?v4 )(and (fun_app$ (fun_app$c (subtr$ ?v4 )?v5 )?v6 )(member$b (inr$ ?v6 )(cont$ ?v3 )))))))false ))))false )):named a34 ))
(check-sat )
;(get-unsat-core )
