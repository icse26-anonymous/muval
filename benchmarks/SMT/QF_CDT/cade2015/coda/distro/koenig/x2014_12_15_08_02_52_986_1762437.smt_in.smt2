;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_treeFI$ 0 )
(declare-sort A_treeFI_set$ 0 )
(declare-sort A_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_list$ 0)
(declare-fun nil$ ()A_treeFI_list$)
(declare-fun hd$ (A_treeFI_list$)A_treeFI$)
(declare-fun tl$ (A_treeFI_list$)A_treeFI_list$)
(declare-fun cons$ (A_treeFI$ A_treeFI_list$ )A_treeFI_list$)
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun uu$ ()A_treeFI_bool_fun$ )
(declare-fun asa$ ()A_stream$ )
(declare-fun eps$ (A_treeFI_bool_fun$ )A_treeFI$ )
(declare-fun set$ (A_treeFI_list$ )A_treeFI_set$ )
(declare-fun sub$ (A_treeFI$ )A_treeFI_list$ )
(declare-fun tra$ ()A_treeFI$ )
(declare-fun member$ (A_treeFI$ A_treeFI_set$ )Bool )
(declare-fun fun_app$ (A_treeFI_bool_fun$ A_treeFI$ )Bool )
(declare-fun konigPath$ (A_treeFI$ )A_stream$ )
(declare-fun infiniteTr$ (A_treeFI$ )Bool )
(assert (! (forall ((?v0 A_treeFI$ ))(! (= (fun_app$ uu$ ?v0 )(and (member$ ?v0 (set$ (sub$ tra$ )))(infiniteTr$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (exists ((?v0 A_treeFI$ ))(and (member$ ?v0 (set$ (sub$ tra$ )))(exists ((?v1 A_treeFI$ )(?v2 A_stream$ ))(and (= (stl$ asa$ )?v2 )(and (= ?v0 ?v1 )(and (infiniteTr$ ?v1 )(= ?v2 (konigPath$ ?v1 ))))))))):named a1 ))
(assert (! (= (stl$ (konigPath$ tra$ ))(konigPath$ (eps$ uu$ ))):named a2 ))
(assert (! (and (infiniteTr$ tra$ )(= asa$ (konigPath$ tra$ ))):named a3 ))
(check-sat )
;(get-unsat-core )
