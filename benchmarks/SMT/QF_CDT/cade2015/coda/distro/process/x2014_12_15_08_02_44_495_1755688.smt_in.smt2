;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-sort Char_list$ 0)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun select$ (Char$)Nibble$)
(declare-fun selecta$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun nil$ ()Char_list$)
(declare-fun hd$ (Char_list$)Char$)
(declare-fun tl$ (Char_list$)Char_list$)
(declare-fun cons$ (Char$ Char_list$ )Char_list$)
(declare-codatatypes ()((Char_list_process$ (action$ (prefOf$ Char_list$ )(contOf$ Char_list_process$ ))(choice$ (ch1Of$ Char_list_process$ )(ch2Of$ Char_list_process$ )))))
(declare-fun x$ ()Char_list_process$ )
(declare-fun y$ ()Char_list_process$ )
(declare-fun ax$ ()Char_list_process$ )
(assert (! (not (= x$ (choice$ ax$ (action$ (cons$ (char$ nibble6$ nibble2$ )nil$ )x$ )))):named a0 ))
(assert (! (= y$ (action$ (cons$ (char$ nibble6$ nibble2$ )nil$ )x$ )):named a1 ))
(assert (! (= x$ (choice$ ax$ y$ )):named a2 ))
(check-sat )
;(get-unsat-core )
