;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_process_bool_fun$ 0 )
(declare-sort A_b_a_process_term_fun$ 0 )
(declare-sort B_a_process_term_bool_fun$ 0 )
(declare-sort B_b_a_process_term_bool_fun_fun$ 0 )
(declare-sort B_a_process_term_b_a_process_term_bool_fun_fun$ 0 )
(declare-codatatypes ()((B_process$ (action$ (prefOf$ B$ )(contOf$ B_process$ ))(choice$ (ch1Of$ B_process$ )(ch2Of$ B_process$ )))))
(declare-sort B_a_process_term$ 0)
(declare-fun select$ (B_a_process_term$)A$)
(declare-fun var$ (A$ )B_a_process_term$)
(declare-fun selecta$ (B_a_process_term$)B_process$)
(declare-fun proc$ (B_process$ )B_a_process_term$)
(declare-fun selectb$ (B_a_process_term$)B$)
(declare-fun selectc$ (B_a_process_term$)B_a_process_term$)
(declare-fun act$ (B$ B_a_process_term$ )B_a_process_term$)
(declare-fun selectd$ (B_a_process_term$)B_a_process_term$)
(declare-fun selecte$ (B_a_process_term$)B_a_process_term$)
(declare-fun ch$ (B_a_process_term$ B_a_process_term$ )B_a_process_term$)
(declare-codatatypes ()((C_process$ (action$a (prefOf$a C$ )(contOf$a C_process$ ))(choice$a (ch1Of$a C_process$ )(ch2Of$a C_process$ )))))
(declare-sort C_a_process_term$ 0)
(declare-fun selectf$ (C_a_process_term$)A$)
(declare-fun var$a (A$ )C_a_process_term$)
(declare-fun selectg$ (C_a_process_term$)C_process$)
(declare-fun proc$a (C_process$ )C_a_process_term$)
(declare-fun selecth$ (C_a_process_term$)C$)
(declare-fun selecti$ (C_a_process_term$)C_a_process_term$)
(declare-fun act$a (C$ C_a_process_term$ )C_a_process_term$)
(declare-fun selectj$ (C_a_process_term$)C_a_process_term$)
(declare-fun selectk$ (C_a_process_term$)C_a_process_term$)
(declare-fun ch$a (C_a_process_term$ C_a_process_term$ )C_a_process_term$)
(declare-fun x$ ()A$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun sys$ ()A_b_a_process_term_fun$ )
(declare-fun uua$ ()B_b_a_process_term_bool_fun_fun$ )
(declare-fun uub$ ()B_a_process_term_b_a_process_term_bool_fun_fun$ )
(declare-fun isACT$ (A_b_a_process_term_fun$ C_a_process_term$ )Bool )
(declare-fun isACT$a (A_b_a_process_term_fun$ B_a_process_term$ )Bool )
(declare-fun fun_app$ (B_a_process_term_bool_fun$ B_a_process_term$ )Bool )
(declare-fun guarded$ (A_b_a_process_term_fun$ )Bool )
(declare-fun fun_app$a (B_a_process_term_b_a_process_term_bool_fun_fun$ B_a_process_term$ )B_a_process_term_bool_fun$ )
(declare-fun fun_app$b (B_b_a_process_term_bool_fun_fun$ B$ )B_a_process_term_bool_fun$ )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_b_a_process_term_fun$ A$ )B_a_process_term$ )
(declare-fun fun_app$e (B_process_bool_fun$ B_process$ )Bool )
(declare-fun isAction$ ()B_process_bool_fun$ )
(declare-fun isAction$a (C_process$ )Bool )
(declare-fun case_process_term$ (A_bool_fun$ B_process_bool_fun$ B_b_a_process_term_bool_fun_fun$ B_a_process_term_b_a_process_term_bool_fun_fun$ B_a_process_term$ )Bool )
(assert (! (forall ((?v0 B_a_process_term$ )(?v1 B_a_process_term$ ))(! (= (fun_app$ (fun_app$a uub$ ?v0 )?v1 )false ):pattern ((fun_app$ (fun_app$a uub$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_process_term$ ))(! (= (fun_app$ (fun_app$b uua$ ?v0 )?v1 )true ):pattern ((fun_app$ (fun_app$b uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$c uu$ ?v0 )false ):pattern ((fun_app$c uu$ ?v0 )))):named a2 ))
(assert (! (not (= (isACT$ sys$ (var$a x$ ))(isACT$a sys$ (fun_app$d sys$ x$ )))):named a3 ))
(assert (! (forall ((?v0 A_b_a_process_term_fun$ )(?v1 B_a_process_term$ ))(=> (and (not (isACT$a ?v0 ?v1 ))(and (forall ((?v2 A_b_a_process_term_fun$ )(?v3 A$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 (var$ ?v3 ))(not (case_process_term$ uu$ isAction$ uua$ uub$ (fun_app$d ?v2 ?v3 )))))false ))(and (forall ((?v2 A_b_a_process_term_fun$ )(?v3 B_process$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 (proc$ ?v3 ))(not (fun_app$e isAction$ ?v3 ))))false ))(forall ((?v2 A_b_a_process_term_fun$ )(?v3 B_a_process_term$ )(?v4 B_a_process_term$ ))(=> (and (= ?v0 ?v2 )(= ?v1 (ch$ ?v3 ?v4 )))false )))))false )):named a4 ))
(assert (! (forall ((?v0 A_b_a_process_term_fun$ )(?v1 C_a_process_term$ ))(=> (and (not (isACT$ ?v0 ?v1 ))(and (forall ((?v2 A_b_a_process_term_fun$ )(?v3 A$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 (var$a ?v3 ))(not (case_process_term$ uu$ isAction$ uua$ uub$ (fun_app$d ?v2 ?v3 )))))false ))(and (forall ((?v2 A_b_a_process_term_fun$ )(?v3 C_process$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 (proc$a ?v3 ))(not (isAction$a ?v3 ))))false ))(forall ((?v2 A_b_a_process_term_fun$ )(?v3 C_a_process_term$ )(?v4 C_a_process_term$ ))(=> (and (= ?v0 ?v2 )(= ?v1 (ch$a ?v3 ?v4 )))false )))))false )):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_process_bool_fun$ )(?v2 B_b_a_process_term_bool_fun_fun$ )(?v3 B_a_process_term_b_a_process_term_bool_fun_fun$ )(?v4 B_process$ ))(! (= (case_process_term$ ?v0 ?v1 ?v2 ?v3 (proc$ ?v4 ))(fun_app$e ?v1 ?v4 )):pattern ((case_process_term$ ?v0 ?v1 ?v2 ?v3 (proc$ ?v4 ))))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_process_bool_fun$ )(?v2 B_b_a_process_term_bool_fun_fun$ )(?v3 B_a_process_term_b_a_process_term_bool_fun_fun$ )(?v4 B$ )(?v5 B_a_process_term$ ))(! (= (case_process_term$ ?v0 ?v1 ?v2 ?v3 (act$ ?v4 ?v5 ))(fun_app$ (fun_app$b ?v2 ?v4 )?v5 )):pattern ((case_process_term$ ?v0 ?v1 ?v2 ?v3 (act$ ?v4 ?v5 ))))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_process_bool_fun$ )(?v2 B_b_a_process_term_bool_fun_fun$ )(?v3 B_a_process_term_b_a_process_term_bool_fun_fun$ )(?v4 B_a_process_term$ )(?v5 B_a_process_term$ ))(! (= (case_process_term$ ?v0 ?v1 ?v2 ?v3 (ch$ ?v4 ?v5 ))(fun_app$ (fun_app$a ?v3 ?v4 )?v5 )):pattern ((case_process_term$ ?v0 ?v1 ?v2 ?v3 (ch$ ?v4 ?v5 ))))):named a8 ))
(assert (! (forall ((?v0 A_b_a_process_term_fun$ ))(= (guarded$ ?v0 )(forall ((?v1 A$ )(?v2 A$ ))(not (= (fun_app$d ?v0 ?v1 )(var$ ?v2 )))))):named a9 ))
(assert (! (guarded$ sys$ ):named a10 ))
(check-sat )
;(get-unsat-core )
