;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_char_list_nat_process_term_fun$ 0 )
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-sort Char_list$ 0)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun select$ (Char$)Nibble$)
(declare-fun selecta$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun nil$ ()Char_list$)
(declare-fun hd$ (Char_list$)Char$)
(declare-fun tl$ (Char_list$)Char_list$)
(declare-fun cons$ (Char$ Char_list$ )Char_list$)
(declare-codatatypes ()((Char_list_process$ (action$ (prefOf$ Char_list$ )(contOf$ Char_list_process$ ))(choice$ (ch1Of$ Char_list_process$ )(ch2Of$ Char_list_process$ )))))
(declare-sort Char_list_nat_process_term$ 0)
(declare-fun selectb$ (Char_list_nat_process_term$)Nat$)
(declare-fun var$ (Nat$ )Char_list_nat_process_term$)
(declare-fun selectc$ (Char_list_nat_process_term$)Char_list_process$)
(declare-fun proc$ (Char_list_process$ )Char_list_nat_process_term$)
(declare-fun selectd$ (Char_list_nat_process_term$)Char_list$)
(declare-fun selecte$ (Char_list_nat_process_term$)Char_list_nat_process_term$)
(declare-fun act$ (Char_list$ Char_list_nat_process_term$ )Char_list_nat_process_term$)
(declare-fun selectf$ (Char_list_nat_process_term$)Char_list_nat_process_term$)
(declare-fun selectg$ (Char_list_nat_process_term$)Char_list_nat_process_term$)
(declare-fun ch$ (Char_list_nat_process_term$ Char_list_nat_process_term$ )Char_list_nat_process_term$)
(declare-fun x$ ()Char_list_process$ )
(declare-fun y$ ()Char_list_process$ )
(declare-fun ax$ ()Char_list_process$ )
(declare-fun x$a ()Char_list_process$ )
(declare-fun ax$a ()Char_list_process$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun sys$ ()Nat_char_list_nat_process_term_fun$ )
(declare-fun size$ (Char_list_nat_process_term$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun solution$ (Nat_char_list_nat_process_term_fun$ Char_list_nat_process_term$ )Char_list_process$ )
(assert (! (not (= (solution$ sys$ (var$ zero$ ))(choice$ (solution$ sys$ (var$ (suc$ zero$ )))(action$ (cons$ (char$ nibble6$ nibble2$ )nil$ )(solution$ sys$ (var$ zero$ )))))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (var$ ?v0 )(var$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 Char_list$ )(?v1 Char_list_process$ )(?v2 Char_list$ )(?v3 Char_list_process$ ))(= (= (action$ ?v0 ?v1 )(action$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 Char_list_process$ )(?v1 Char_list_process$ )(?v2 Char_list_process$ )(?v3 Char_list_process$ ))(= (= (choice$ ?v0 ?v1 )(choice$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(and (=> (= ?v0 (suc$ zero$ ))false )(forall ((?v1 Nat$ ))(=> (= ?v0 (suc$ (suc$ ?v1 )))false ))))false )):named a4 ))
(assert (! (forall ((?v0 Char_list_process$ ))(=> (and (forall ((?v1 Char_list$ )(?v2 Char_list_process$ ))(=> (= ?v0 (action$ ?v1 ?v2 ))false ))(forall ((?v1 Char_list_process$ )(?v2 Char_list_process$ ))(=> (= ?v0 (choice$ ?v1 ?v2 ))false )))false )):named a5 ))
(assert (! (forall ((?v0 Char_list$ )(?v1 Char_list_process$ )(?v2 Char_list_process$ )(?v3 Char_list_process$ ))(not (= (action$ ?v0 ?v1 )(choice$ ?v2 ?v3 )))):named a6 ))
(assert (! (= ax$ (solution$ sys$ (var$ (suc$ zero$ )))):named a7 ))
(assert (! (= x$ (solution$ sys$ (var$ zero$ ))):named a8 ))
(assert (! (= x$a (choice$ ax$a (action$ (cons$ (char$ nibble6$ nibble2$ )nil$ )x$a ))):named a9 ))
(assert (! (= y$ (action$ (cons$ (char$ nibble6$ nibble2$ )nil$ )x$a )):named a10 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ )(?v2 Nibble$ )(?v3 Nibble$ ))(= (= (char$ ?v0 ?v1 )(char$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Char$ )(?v1 Char_list$ )(?v2 Char$ )(?v3 Char_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (size$ (var$ ?v0 ))(suc$ zero$ )):pattern ((var$ ?v0 )))):named a15 ))
(check-sat )
;(get-unsat-core )
