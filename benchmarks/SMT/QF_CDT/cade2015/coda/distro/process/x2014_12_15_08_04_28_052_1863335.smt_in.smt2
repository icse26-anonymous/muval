;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort B_set_b_set_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_process_bool_fun$ 0 )
(declare-sort B_a_b_process_term_fun$ 0 )
(declare-sort A_process_a_process_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_process$ (action$ (prefOf$ A$ )(contOf$ A_process$ ))(choice$ (ch1Of$ A_process$ )(ch2Of$ A_process$ )))))
(declare-sort A_b_process_term$ 0)
(declare-fun select$ (A_b_process_term$)B$)
(declare-fun var$ (B$ )A_b_process_term$)
(declare-fun selecta$ (A_b_process_term$)A_process$)
(declare-fun proc$ (A_process$ )A_b_process_term$)
(declare-fun selectb$ (A_b_process_term$)A$)
(declare-fun selectc$ (A_b_process_term$)A_b_process_term$)
(declare-fun act$ (A$ A_b_process_term$ )A_b_process_term$)
(declare-fun selectd$ (A_b_process_term$)A_b_process_term$)
(declare-fun selecte$ (A_b_process_term$)A_b_process_term$)
(declare-fun ch$ (A_b_process_term$ A_b_process_term$ )A_b_process_term$)
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun t1$ ()A_b_process_term$ )
(declare-fun t2$ ()A_b_process_term$ )
(declare-fun uu$ (B_set$ )B_bool_fun$ )
(declare-fun cH1$ (B_a_b_process_term_fun$ A_b_process_term$ )A_b_process_term$ )
(declare-fun cH2$ (B_a_b_process_term_fun$ A_b_process_term$ )A_b_process_term$ )
(declare-fun sup$ (B_set$ )B_set_b_set_fun$ )
(declare-fun sys$ ()B_a_b_process_term_fun$ )
(declare-fun cont$ (B_a_b_process_term_fun$ A_b_process_term$ )A_b_process_term$ )
(declare-fun pref$ (B_a_b_process_term_fun$ A_b_process_term$ )A$ )
(declare-fun isACT$ (B_a_b_process_term_fun$ A_b_process_term$ )Bool )
(declare-fun trace$ (A_process$ A_stream$ )Bool )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun collect$ (B_bool_fun$ )B_set$ )
(declare-fun fun_app$ (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$a (B_set_b_set_fun$ B_set$ )B_set$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_process_bool_fun$ A_process$ )Bool )
(declare-fun fun_app$d (A_process_a_process_bool_fun_fun$ A_process$ )A_process_bool_fun$ )
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun isAction$ (A_process$ )Bool )
(declare-fun isChoice$ (A_process$ )Bool )
(declare-fun solution$ (B_a_b_process_term_fun$ A_b_process_term$ )A_process$ )
(declare-fun rel_process$ (A_a_bool_fun_fun$ A_process$ )A_process_bool_fun$ )
(declare-fun pred_process$ (A_bool_fun$ A_process$ )Bool )
(declare-fun pred_process_term$ (A_bool_fun$ B_bool_fun$ A_b_process_term$ )Bool )
(declare-fun set2_process_term$ (A_b_process_term$ )B_set$ )
(assert (! (forall ((?v0 B_set$ )(?v1 B$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (= (solution$ sys$ (ch$ t1$ t2$ ))(choice$ (solution$ sys$ t1$ )(solution$ sys$ t2$ )))):named a1 ))
(assert (! (forall ((?v0 A_b_process_term$ )(?v1 A_b_process_term$ )(?v2 A_b_process_term$ )(?v3 A_b_process_term$ ))(= (= (ch$ ?v0 ?v1 )(ch$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_process$ )(?v1 A_process$ )(?v2 A_process$ )(?v3 A_process$ ))(= (= (choice$ ?v0 ?v1 )(choice$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_process$ )(?v2 A_process$ ))(! (= (pred_process$ ?v0 (choice$ ?v1 ?v2 ))(and (pred_process$ ?v0 ?v1 )(pred_process$ ?v0 ?v2 ))):pattern ((pred_process$ ?v0 (choice$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 A_b_process_term$ )(?v3 A_b_process_term$ ))(! (= (pred_process_term$ ?v0 ?v1 (ch$ ?v2 ?v3 ))(and (pred_process_term$ ?v0 ?v1 ?v2 )(pred_process_term$ ?v0 ?v1 ?v3 ))):pattern ((pred_process_term$ ?v0 ?v1 (ch$ ?v2 ?v3 ))))):named a5 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ )(?v2 A_b_process_term$ ))(! (= (cH1$ ?v0 (ch$ ?v1 ?v2 ))?v1 ):pattern ((cH1$ ?v0 (ch$ ?v1 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ )(?v2 A_b_process_term$ ))(! (= (cH2$ ?v0 (ch$ ?v1 ?v2 ))?v2 ):pattern ((cH2$ ?v0 (ch$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_process$ )(?v1 A_stream$ )(?v2 A_process$ ))(=> (or (trace$ ?v0 ?v1 )(trace$ ?v2 ?v1 ))(trace$ (choice$ ?v0 ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ )(?v2 A_b_process_term$ ))(! (= (isACT$ ?v0 (ch$ ?v1 ?v2 ))false ):pattern ((isACT$ ?v0 (ch$ ?v1 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_process_term$ )(?v2 A_b_process_term$ ))(=> (member$ ?v0 (set2_process_term$ ?v1 ))(member$ ?v0 (set2_process_term$ (ch$ ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_process_term$ )(?v2 A_b_process_term$ ))(=> (member$ ?v0 (set2_process_term$ ?v1 ))(member$ ?v0 (set2_process_term$ (ch$ ?v2 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(=> (and (=> (isACT$ ?v0 ?v1 )false )(=> (not (isACT$ ?v0 ?v1 ))false ))false )):named a12 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(=> (not (isACT$ ?v0 ?v1 ))(= (solution$ ?v0 ?v1 )(choice$ (solution$ ?v0 (cH1$ ?v0 ?v1 ))(solution$ ?v0 (cH2$ ?v0 ?v1 )))))):named a13 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(=> (not (isACT$ ?v0 ?v1 ))(= (ch2Of$ (solution$ ?v0 ?v1 ))(solution$ ?v0 (cH2$ ?v0 ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(=> (not (isACT$ ?v0 ?v1 ))(= (ch1Of$ (solution$ ?v0 ?v1 ))(solution$ ?v0 (cH1$ ?v0 ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(= (isChoice$ (solution$ ?v0 ?v1 ))(not (isACT$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 A_process$ ))(! (= (pred_process_term$ ?v0 ?v1 (proc$ ?v2 ))(pred_process$ ?v0 ?v2 )):pattern ((pred_process_term$ ?v0 ?v1 (proc$ ?v2 ))))):named a17 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(= (isAction$ (solution$ ?v0 ?v1 ))(isACT$ ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(= (solution$ ?v0 ?v1 )(ite (isACT$ ?v0 ?v1 )(action$ (pref$ ?v0 ?v1 )(solution$ ?v0 (cont$ ?v0 ?v1 )))(choice$ (solution$ ?v0 (cH1$ ?v0 ?v1 ))(solution$ ?v0 (cH2$ ?v0 ?v1 )))))):named a19 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(=> (not (isACT$ ?v0 ?v1 ))(isChoice$ (solution$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(=> (isACT$ ?v0 ?v1 )(isAction$ (solution$ ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_b_process_term$ )(?v1 A_b_process_term$ ))(! (= (set2_process_term$ (ch$ ?v0 ?v1 ))(fun_app$a (sup$ (set2_process_term$ ?v0 ))(set2_process_term$ ?v1 ))):pattern ((ch$ ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_process$ ))(! (= (pred_process$ ?v0 (action$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(pred_process$ ?v0 ?v2 ))):pattern ((pred_process$ ?v0 (action$ ?v1 ?v2 ))))):named a23 ))
(assert (! (forall ((?v0 A_process$ )(?v1 A_process$ ))(= (= (proc$ ?v0 )(proc$ ?v1 ))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A_process$ )(?v2 A$ )(?v3 A_process$ ))(= (= (action$ ?v0 ?v1 )(action$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_process$ ))(! (= (solution$ ?v0 (proc$ ?v1 ))?v1 ):pattern ((solution$ ?v0 (proc$ ?v1 ))))):named a26 ))
(assert (! (forall ((?v0 A_process$ ))(=> (isChoice$ ?v0 )(= (choice$ (ch1Of$ ?v0 )(ch2Of$ ?v0 ))?v0 ))):named a27 ))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$ )(?v1 A_process$ )(?v2 A_process$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(and (forall ((?v3 A_process$ )(?v4 A_process$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (isAction$ ?v3 )(isAction$ ?v4 ))(= (isChoice$ ?v3 )(isChoice$ ?v4 )))))(and (forall ((?v3 A$ )(?v4 A$ )(?v5 A_process$ )(?v6 A_process$ ))(=> (fun_app$c (fun_app$d ?v0 (action$ ?v3 ?v5 ))(action$ ?v4 ?v6 ))(and (= ?v3 ?v4 )(or (fun_app$c (fun_app$d ?v0 ?v5 )?v6 )(= ?v5 ?v6 )))))(forall ((?v3 A_process$ )(?v4 A_process$ )(?v5 A_process$ )(?v6 A_process$ ))(=> (fun_app$c (fun_app$d ?v0 (choice$ ?v3 ?v4 ))(choice$ ?v5 ?v6 ))(and (or (fun_app$c (fun_app$d ?v0 ?v3 )?v5 )(= ?v3 ?v5 ))(or (fun_app$c (fun_app$d ?v0 ?v4 )?v6 )(= ?v4 ?v6 ))))))))(= ?v1 ?v2 ))):named a28 ))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$ )(?v1 A_process$ )(?v2 A_process$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(and (forall ((?v3 A_process$ )(?v4 A_process$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (isAction$ ?v3 )(isAction$ ?v4 ))(= (isChoice$ ?v3 )(isChoice$ ?v4 )))))(and (forall ((?v3 A$ )(?v4 A$ )(?v5 A_process$ )(?v6 A_process$ ))(=> (fun_app$c (fun_app$d ?v0 (action$ ?v3 ?v5 ))(action$ ?v4 ?v6 ))(and (= ?v3 ?v4 )(fun_app$c (fun_app$d ?v0 ?v5 )?v6 ))))(forall ((?v3 A_process$ )(?v4 A_process$ )(?v5 A_process$ )(?v6 A_process$ ))(=> (fun_app$c (fun_app$d ?v0 (choice$ ?v3 ?v4 ))(choice$ ?v5 ?v6 ))(and (fun_app$c (fun_app$d ?v0 ?v3 )?v5 )(fun_app$c (fun_app$d ?v0 ?v4 )?v6 )))))))(= ?v1 ?v2 ))):named a29 ))
(assert (! (forall ((?v0 A$ )(?v1 A_process$ ))(isAction$ (action$ ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 A_process$ ))(not (isChoice$ (action$ ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_process$ ))(not (and (isAction$ ?v0 )(isChoice$ ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_process$ ))(or (isAction$ ?v0 )(isChoice$ ?v0 ))):named a33 ))
(assert (! (forall ((?v0 A_process$ ))(=> (isChoice$ ?v0 )(not (isAction$ ?v0 )))):named a34 ))
(assert (! (forall ((?v0 A_process$ ))(=> (isAction$ ?v0 )(not (isChoice$ ?v0 )))):named a35 ))
(assert (! (forall ((?v0 A_process$ )(?v1 A$ )(?v2 A_process$ ))(=> (= ?v0 (action$ ?v1 ?v2 ))(isAction$ ?v0 ))):named a36 ))
(assert (! (forall ((?v0 A_process$ ))(=> (and (=> (isAction$ ?v0 )false )(=> (isChoice$ ?v0 )false ))false )):named a37 ))
(assert (! (forall ((?v0 A_process$ ))(= (isAction$ ?v0 )(exists ((?v1 A$ )(?v2 A_process$ ))(= ?v0 (action$ ?v1 ?v2 ))))):named a38 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_process$ ))(! (= (isACT$ ?v0 (proc$ ?v1 ))(isAction$ ?v1 )):pattern ((isACT$ ?v0 (proc$ ?v1 ))))):named a39 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_process$ ))(! (= (cH2$ ?v0 (proc$ ?v1 ))(proc$ (ch2Of$ ?v1 ))):pattern ((cH2$ ?v0 (proc$ ?v1 ))))):named a40 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_bool_fun$ ))(=> (forall ((?v2 B$ ))(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a41 ))
(assert (! (forall ((?v0 B_set$ ))(= (collect$ (uu$ ?v0 ))?v0 )):named a42 ))
(assert (! (forall ((?v0 B$ )(?v1 B_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$ ?v1 ?v0 ))):named a43 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_process$ ))(! (= (cH1$ ?v0 (proc$ ?v1 ))(proc$ (ch1Of$ ?v1 ))):pattern ((cH1$ ?v0 (proc$ ?v1 ))))):named a44 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(=> (isACT$ ?v0 ?v1 )(= (solution$ ?v0 ?v1 )(action$ (pref$ ?v0 ?v1 )(solution$ ?v0 (cont$ ?v0 ?v1 )))))):named a45 ))
(assert (! (forall ((?v0 A_process$ )(?v1 A_b_process_term$ )(?v2 A_b_process_term$ ))(not (= (proc$ ?v0 )(ch$ ?v1 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 A_process$ )(?v1 A_process$ ))(not (isAction$ (choice$ ?v0 ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_process$ ))(=> (and (forall ((?v1 A$ )(?v2 A_process$ ))(=> (= ?v0 (action$ ?v1 ?v2 ))false ))(forall ((?v1 A_process$ )(?v2 A_process$ ))(=> (= ?v0 (choice$ ?v1 ?v2 ))false )))false )):named a48 ))
(assert (! (forall ((?v0 A$ )(?v1 A_process$ )(?v2 A_process$ )(?v3 A_process$ ))(not (= (action$ ?v0 ?v1 )(choice$ ?v2 ?v3 )))):named a49 ))
(assert (! (forall ((?v0 A_process$ ))(= (isChoice$ ?v0 )(exists ((?v1 A_process$ )(?v2 A_process$ ))(= ?v0 (choice$ ?v1 ?v2 ))))):named a50 ))
(assert (! (forall ((?v0 A_process$ )(?v1 A_process$ )(?v2 A_process$ ))(=> (= ?v0 (choice$ ?v1 ?v2 ))(isChoice$ ?v0 ))):named a51 ))
(assert (! (forall ((?v0 A_process$ )(?v1 A_process$ ))(isChoice$ (choice$ ?v0 ?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_process$ )(?v1 A_process$ ))(! (= (ch1Of$ (choice$ ?v0 ?v1 ))?v0 ):pattern ((choice$ ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_process$ )(?v1 A_process$ ))(! (= (ch2Of$ (choice$ ?v0 ?v1 ))?v1 ):pattern ((choice$ ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 B_set$ ))(=> (=> (not (member$ ?v0 ?v1 ))(member$ ?v0 ?v2 ))(member$ ?v0 (fun_app$a (sup$ ?v2 )?v1 )))):named a55 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 B_set$ ))(= (member$ ?v0 (fun_app$a (sup$ ?v1 )?v2 ))(or (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a56 ))
(assert (! (forall ((?v0 B_set$ ))(! (= (fun_app$a (sup$ ?v0 )?v0 )?v0 ):pattern ((sup$ ?v0 )))):named a57 ))
(assert (! (forall ((?v0 B_set$ ))(! (= (fun_app$a (sup$ ?v0 )?v0 )?v0 ):pattern ((sup$ ?v0 )))):named a58 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ ))(= (fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v0 )?v1 ))(fun_app$a (sup$ ?v0 )?v1 ))):named a59 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ ))(= (fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v0 )?v1 ))(fun_app$a (sup$ ?v0 )?v1 ))):named a60 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ ))(= (fun_app$a (sup$ (fun_app$a (sup$ ?v0 )?v1 ))?v1 )(fun_app$a (sup$ ?v0 )?v1 ))):named a61 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(=> (isACT$ ?v0 ?v1 )(= (prefOf$ (solution$ ?v0 ?v1 ))(pref$ ?v0 ?v1 )))):named a62 ))
(assert (! (forall ((?v0 A$ )(?v1 A_process$ ))(! (= (prefOf$ (action$ ?v0 ?v1 ))?v0 ):pattern ((action$ ?v0 ?v1 )))):named a63 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_process$ ))(! (= (pref$ ?v0 (proc$ ?v1 ))(prefOf$ ?v1 )):pattern ((pref$ ?v0 (proc$ ?v1 ))))):named a64 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ )(?v2 B_set$ ))(= (fun_app$a (sup$ (fun_app$a (sup$ ?v0 )?v1 ))?v2 )(fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v1 )?v2 )))):named a65 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ )(?v2 B_set$ ))(= (fun_app$a (sup$ (fun_app$a (sup$ ?v0 )?v1 ))?v2 )(fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v1 )?v2 )))):named a66 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ )(?v2 B_set$ ))(= (fun_app$a (sup$ (fun_app$a (sup$ ?v0 )?v1 ))?v2 )(fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v1 )?v2 )))):named a67 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ )(?v2 B_set$ ))(= (fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v1 )?v2 ))(fun_app$a (sup$ ?v1 )(fun_app$a (sup$ ?v0 )?v2 )))):named a68 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ )(?v2 B_set$ ))(= (fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v1 )?v2 ))(fun_app$a (sup$ ?v1 )(fun_app$a (sup$ ?v0 )?v2 )))):named a69 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ )(?v2 B_set$ ))(= (fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v1 )?v2 ))(fun_app$a (sup$ ?v1 )(fun_app$a (sup$ ?v0 )?v2 )))):named a70 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ ))(= (fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v0 )?v1 ))(fun_app$a (sup$ ?v0 )?v1 ))):named a71 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ ))(= (fun_app$a (sup$ ?v0 )?v1 )(fun_app$a (sup$ ?v1 )?v0 ))):named a72 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ ))(= (fun_app$a (sup$ ?v0 )?v1 )(fun_app$a (sup$ ?v1 )?v0 ))):named a73 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ ))(= (fun_app$a (sup$ ?v0 )?v1 )(fun_app$a (sup$ ?v1 )?v0 ))):named a74 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ )(?v2 B_bool_fun$ ))(= (exists ((?v3 B$ ))(and (member$ ?v3 (fun_app$a (sup$ ?v0 )?v1 ))(fun_app$ ?v2 ?v3 )))(or (exists ((?v3 B$ ))(and (member$ ?v3 ?v0 )(fun_app$ ?v2 ?v3 )))(exists ((?v3 B$ ))(and (member$ ?v3 ?v1 )(fun_app$ ?v2 ?v3 )))))):named a75 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ )(?v2 B_bool_fun$ ))(= (forall ((?v3 B$ ))(=> (member$ ?v3 (fun_app$a (sup$ ?v0 )?v1 ))(fun_app$ ?v2 ?v3 )))(and (forall ((?v3 B$ ))(=> (member$ ?v3 ?v0 )(fun_app$ ?v2 ?v3 )))(forall ((?v3 B$ ))(=> (member$ ?v3 ?v1 )(fun_app$ ?v2 ?v3 )))))):named a76 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ )(?v2 B_set$ ))(= (fun_app$a (sup$ (fun_app$a (sup$ ?v0 )?v1 ))?v2 )(fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v1 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ )(?v2 B_set$ ))(= (fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v1 )?v2 ))(fun_app$a (sup$ ?v1 )(fun_app$a (sup$ ?v0 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ ))(= (fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v0 )?v1 ))(fun_app$a (sup$ ?v0 )?v1 ))):named a79 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_set$ ))(= (fun_app$a (sup$ ?v0 )?v1 )(fun_app$a (sup$ ?v1 )?v0 ))):named a80 ))
(assert (! (forall ((?v0 B_set$ ))(! (= (fun_app$a (sup$ ?v0 )?v0 )?v0 ):pattern ((sup$ ?v0 )))):named a81 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 B_set$ ))(=> (and (member$ ?v0 (fun_app$a (sup$ ?v1 )?v2 ))(and (=> (member$ ?v0 ?v1 )false )(=> (member$ ?v0 ?v2 )false )))false )):named a82 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 B_set$ ))(=> (member$ ?v0 ?v1 )(member$ ?v0 (fun_app$a (sup$ ?v2 )?v1 )))):named a83 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 B_set$ ))(=> (member$ ?v0 ?v1 )(member$ ?v0 (fun_app$a (sup$ ?v1 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 A_process$ )(?v1 A_process$ ))(=> (and (= (isAction$ ?v0 )(isAction$ ?v1 ))(and (=> (and (isAction$ ?v0 )(isAction$ ?v1 ))(and (= (prefOf$ ?v0 )(prefOf$ ?v1 ))(= (contOf$ ?v0 )(contOf$ ?v1 ))))(=> (and (isChoice$ ?v0 )(isChoice$ ?v1 ))(and (= (ch1Of$ ?v0 )(ch1Of$ ?v1 ))(= (ch2Of$ ?v0 )(ch2Of$ ?v1 ))))))(= ?v0 ?v1 ))):named a85 ))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$ )(?v1 A_process$ )(?v2 A_process$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v3 A_process$ )(?v4 A_process$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (isAction$ ?v3 )(isAction$ ?v4 ))(and (=> (and (isAction$ ?v3 )(isAction$ ?v4 ))(and (= (prefOf$ ?v3 )(prefOf$ ?v4 ))(or (fun_app$c (fun_app$d ?v0 (contOf$ ?v3 ))(contOf$ ?v4 ))(= (contOf$ ?v3 )(contOf$ ?v4 )))))(=> (and (isChoice$ ?v3 )(isChoice$ ?v4 ))(and (or (fun_app$c (fun_app$d ?v0 (ch1Of$ ?v3 ))(ch1Of$ ?v4 ))(= (ch1Of$ ?v3 )(ch1Of$ ?v4 )))(or (fun_app$c (fun_app$d ?v0 (ch2Of$ ?v3 ))(ch2Of$ ?v4 ))(= (ch2Of$ ?v3 )(ch2Of$ ?v4 ))))))))))(= ?v1 ?v2 ))):named a86 ))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$ )(?v1 A_process$ )(?v2 A_process$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v3 A_process$ )(?v4 A_process$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (isAction$ ?v3 )(isAction$ ?v4 ))(and (=> (and (isAction$ ?v3 )(isAction$ ?v4 ))(and (= (prefOf$ ?v3 )(prefOf$ ?v4 ))(fun_app$c (fun_app$d ?v0 (contOf$ ?v3 ))(contOf$ ?v4 ))))(=> (and (isChoice$ ?v3 )(isChoice$ ?v4 ))(and (fun_app$c (fun_app$d ?v0 (ch1Of$ ?v3 ))(ch1Of$ ?v4 ))(fun_app$c (fun_app$d ?v0 (ch2Of$ ?v3 ))(ch2Of$ ?v4 )))))))))(= ?v1 ?v2 ))):named a87 ))
(assert (! (forall ((?v0 A_process$ ))(=> (isAction$ ?v0 )(= (action$ (prefOf$ ?v0 )(contOf$ ?v0 ))?v0 ))):named a88 ))
(assert (! (forall ((?v0 A$ )(?v1 A_process$ ))(! (= (contOf$ (action$ ?v0 ?v1 ))?v1 ):pattern ((action$ ?v0 ?v1 )))):named a89 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_process$ ))(! (= (cont$ ?v0 (proc$ ?v1 ))(proc$ (contOf$ ?v1 ))):pattern ((cont$ ?v0 (proc$ ?v1 ))))):named a90 ))
(assert (! (forall ((?v0 B_a_b_process_term_fun$ )(?v1 A_b_process_term$ ))(=> (isACT$ ?v0 ?v1 )(= (contOf$ (solution$ ?v0 ?v1 ))(solution$ ?v0 (cont$ ?v0 ?v1 ))))):named a91 ))
(assert (! (forall ((?v0 A_process$ ))(=> (and (=> (= ?v0 (action$ (prefOf$ ?v0 )(contOf$ ?v0 )))false )(=> (= ?v0 (choice$ (ch1Of$ ?v0 )(ch2Of$ ?v0 )))false ))false )):named a92 ))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$ )(?v1 A_process$ )(?v2 A_process$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v4 A_process$ )(?v5 A_process$ ))(=> (fun_app$c (fun_app$d ?v0 ?v4 )?v5 )(and (= (isAction$ ?v4 )(isAction$ ?v5 ))(and (=> (and (isAction$ ?v4 )(isAction$ ?v5 ))(and (fun_app$b (fun_app$e ?v3 (prefOf$ ?v4 ))(prefOf$ ?v5 ))(fun_app$c (fun_app$d ?v0 (contOf$ ?v4 ))(contOf$ ?v5 ))))(=> (and (isChoice$ ?v4 )(isChoice$ ?v5 ))(and (fun_app$c (fun_app$d ?v0 (ch1Of$ ?v4 ))(ch1Of$ ?v5 ))(fun_app$c (fun_app$d ?v0 (ch2Of$ ?v4 ))(ch2Of$ ?v5 )))))))))(fun_app$c (rel_process$ ?v3 ?v1 )?v2 ))):named a93 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_process$ )(?v2 A_process$ ))(= (fun_app$c (rel_process$ ?v0 ?v1 )?v2 )(and (= (isAction$ ?v1 )(isAction$ ?v2 ))(and (=> (and (isAction$ ?v1 )(isAction$ ?v2 ))(and (fun_app$b (fun_app$e ?v0 (prefOf$ ?v1 ))(prefOf$ ?v2 ))(fun_app$c (rel_process$ ?v0 (contOf$ ?v1 ))(contOf$ ?v2 ))))(=> (and (isChoice$ ?v1 )(isChoice$ ?v2 ))(and (fun_app$c (rel_process$ ?v0 (ch1Of$ ?v1 ))(ch1Of$ ?v2 ))(fun_app$c (rel_process$ ?v0 (ch2Of$ ?v1 ))(ch2Of$ ?v2 )))))))):named a94 ))
(check-sat )
;(get-unsat-core )
