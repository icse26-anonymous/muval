;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort Dtree_dtree_prod_N_fun$ 0 )
(declare-sort Dtree_dtree_prod_dtree_fun$ 0 )
(declare-sort Dtree_dtree_prod_dtree_dtree_prod_bool_fun_fun$ 0 )
(declare-sort Dtree_dtree_prod_T_dtree_dtree_prod_sum_set_fun$ 0 )
(declare-sort Dtree_dtree_prod$ 0)
(declare-fun fst$ (Dtree_dtree_prod$)Dtree$)
(declare-fun snd$ (Dtree_dtree_prod$)Dtree$)
(declare-fun pair$ (Dtree$ Dtree$ )Dtree_dtree_prod$)
(declare-fun par$ ()Dtree_dtree_prod_dtree_fun$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tr2$ ()Dtree$ )
(declare-fun accp$ (Dtree_dtree_prod_dtree_dtree_prod_bool_fun_fun$ Dtree_dtree_prod$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun nplus$ (N$ N$ )N$ )
(declare-fun par_c$ ()Dtree_dtree_prod_T_dtree_dtree_prod_sum_set_fun$ )
(declare-fun par_r$ ()Dtree_dtree_prod_N_fun$ )
(declare-fun unfold$ (Dtree_dtree_prod_N_fun$ Dtree_dtree_prod_T_dtree_dtree_prod_sum_set_fun$ )Dtree_dtree_prod_dtree_fun$ )
(declare-fun fun_app$ (Dtree_dtree_prod_dtree_fun$ Dtree_dtree_prod$ )Dtree$ )
(declare-fun fun_app$a (Dtree_dtree_prod_N_fun$ Dtree_dtree_prod$ )N$ )
(declare-fun par_r_rel$ ()Dtree_dtree_prod_dtree_dtree_prod_bool_fun_fun$ )
(assert (! (not (= (root$ (fun_app$ (unfold$ par_r$ par_c$ )(pair$ tr1$ tr2$ )))(nplus$ (root$ tr1$ )(root$ tr2$ )))):named a0 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N$ ))(= (nplus$ (nplus$ ?v0 ?v1 )?v2 )(nplus$ ?v0 (nplus$ ?v1 ?v2 )))):named a1 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (nplus$ ?v0 ?v1 )(nplus$ ?v1 ?v0 ))):named a2 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (fun_app$a par_r$ (pair$ ?v0 ?v1 ))(nplus$ (root$ ?v0 )(root$ ?v1 ))):pattern ((pair$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ ))(=> (forall ((?v1 Dtree$ )(?v2 Dtree$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a4 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ )(?v1 N$ ))(=> (and (= (fun_app$a par_r$ ?v0 )?v1 )(forall ((?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (= ?v0 (pair$ ?v2 ?v3 ))(= ?v1 (nplus$ (root$ ?v2 )(root$ ?v3 ))))false )))false )):named a5 ))
(assert (! (= par$ (unfold$ par_r$ par_c$ )):named a6 ))
(assert (! (forall ((?v0 Dtree_dtree_prod_N_fun$ )(?v1 Dtree_dtree_prod_T_dtree_dtree_prod_sum_set_fun$ )(?v2 Dtree_dtree_prod$ ))(= (root$ (fun_app$ (unfold$ ?v0 ?v1 )?v2 ))(fun_app$a ?v0 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ )(?v1 N$ ))(=> (and (= (fun_app$a par_r$ ?v0 )?v1 )(and (accp$ par_r_rel$ ?v0 )(forall ((?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (= ?v0 (pair$ ?v2 ?v3 ))(and (= ?v1 (nplus$ (root$ ?v2 )(root$ ?v3 )))(accp$ par_r_rel$ (pair$ ?v2 ?v3 ))))false ))))false )):named a10 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ ))(=> (forall ((?v1 Dtree$ )(?v2 Dtree$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a11 ))
(check-sat )
;(get-unsat-core )
