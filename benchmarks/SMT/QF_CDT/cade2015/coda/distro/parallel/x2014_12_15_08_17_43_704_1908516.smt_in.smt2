;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_dtree_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-sort Dtree_dtree_prod$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun fst$ (Dtree_dtree_prod$)Dtree$)
(declare-fun snd$ (Dtree_dtree_prod$)Dtree$)
(declare-fun pair$ (Dtree$ Dtree$ )Dtree_dtree_prod$)
(declare-fun uu$ ()Dtree_T_dtree_sum_fun$ )
(declare-fun par$ (Dtree_dtree_prod$ )Dtree$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tr2$ ()Dtree$ )
(declare-fun tr3$ ()Dtree$ )
(declare-fun trA$ ()Dtree$ )
(declare-fun trB$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun tr2a$ ()Dtree$ )
(declare-fun tr3a$ ()Dtree$ )
(declare-fun trB$a ()Dtree$ )
(declare-fun member$ (Dtree$ Dtree_set$ )Bool )
(declare-fun vimage$ (Dtree_T_dtree_sum_fun$ T_dtree_sum_set$ )Dtree_set$ )
(declare-fun collect$ (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$ (Dtree_T_dtree_sum_fun$ Dtree$ )T_dtree_sum$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun vimage$a (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun vimage$b (T_dtree_sum_dtree_fun$ Dtree_set$ )T_dtree_sum_set$ )
(declare-fun vimage$c (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun collect$a (Dtree_bool_fun$ )Dtree_set$ )
(declare-fun fun_app$a (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$b (T_dtree_sum_dtree_fun$ T_dtree_sum$ )Dtree$ )
(declare-fun fun_app$c (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$d (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun fun_app$e (Dtree_bool_fun$ Dtree$ )Bool )
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$ uu$ ?v0 )(inr$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (exists ((?v0 Dtree$ ))(and (member$ ?v0 (vimage$ uu$ (cont$ (par$ (pair$ (par$ (pair$ tr1a$ tr2a$ ))tr3a$ )))))(exists ((?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(and (= ?v0 (par$ (pair$ (par$ (pair$ ?v1 ?v2 ))?v3 )))(= trB$ (par$ (pair$ ?v1 (par$ (pair$ ?v2 ?v3 )))))))))):named a1 ))
(assert (! (member$a (inr$ tr1$ )(cont$ tr1a$ )):named a2 ))
(assert (! (member$a (inr$ tr2$ )(cont$ tr2a$ )):named a3 ))
(assert (! (member$a (inr$ tr3$ )(cont$ tr3a$ )):named a4 ))
(assert (! (= trB$ (par$ (pair$ tr1$ (par$ (pair$ tr2$ tr3$ ))))):named a5 ))
(assert (! (exists ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(and (= trA$ (par$ (pair$ (par$ (pair$ ?v0 ?v1 ))?v2 )))(= trB$a (par$ (pair$ ?v0 (par$ (pair$ ?v1 ?v2 ))))))):named a6 ))
(assert (! (member$a (inr$ trB$ )(cont$ (par$ (pair$ tr1a$ (par$ (pair$ tr2a$ tr3a$ )))))):named a7 ))
(assert (! (=> (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (= trB$ (par$ (pair$ ?v0 (par$ (pair$ ?v1 ?v2 )))))(and (member$a (inr$ ?v0 )(cont$ tr1a$ ))(and (member$a (inr$ ?v1 )(cont$ tr2a$ ))(member$a (inr$ ?v2 )(cont$ tr3a$ )))))false ))false ):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (par$ (pair$ ?v0 ?v1 ))(par$ (pair$ ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ ))(=> (forall ((?v1 Dtree$ )(?v2 Dtree$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a10 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$ ?v0 (vimage$a ?v1 ?v2 ))(member$ (fun_app$a ?v1 ?v0 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$a ?v0 (vimage$b ?v1 ?v2 ))(member$ (fun_app$b ?v1 ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (vimage$c ?v1 ?v2 ))(member$a (fun_app$c ?v1 ?v0 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (vimage$ ?v1 ?v2 ))(member$a (fun_app$ ?v1 ?v0 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$a ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$ ?v1 (vimage$a ?v0 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$ )(?v1 T_dtree_sum$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$b ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$a ?v1 (vimage$b ?v0 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$c ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$a ?v1 (vimage$c ?v0 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 Dtree$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$ ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$ ?v1 (vimage$ ?v0 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(= (fun_app$d ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$d ?v2 ?v3 )))(= (vimage$c ?v1 (collect$ ?v0 ))(collect$ ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Dtree_bool_fun$ )(?v1 T_dtree_sum_dtree_fun$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(= (fun_app$e ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$d ?v2 ?v3 )))(= (vimage$b ?v1 (collect$a ?v0 ))(collect$ ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Dtree_bool_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_bool_fun$ ))(=> (forall ((?v3 Dtree$ ))(= (fun_app$e ?v0 (fun_app$a ?v1 ?v3 ))(fun_app$e ?v2 ?v3 )))(= (vimage$a ?v1 (collect$a ?v0 ))(collect$a ?v2 )))):named a25 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 Dtree_bool_fun$ ))(=> (forall ((?v3 Dtree$ ))(= (fun_app$d ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$e ?v2 ?v3 )))(= (vimage$ ?v1 (collect$ ?v0 ))(collect$a ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(=> (and (member$ ?v0 (vimage$a ?v1 ?v2 ))(forall ((?v3 Dtree$ ))(=> (and (= (fun_app$a ?v1 ?v0 )?v3 )(member$ ?v3 ?v2 ))false )))false )):named a27 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_dtree_fun$ )(?v2 Dtree_set$ ))(=> (and (member$a ?v0 (vimage$b ?v1 ?v2 ))(forall ((?v3 Dtree$ ))(=> (and (= (fun_app$b ?v1 ?v0 )?v3 )(member$ ?v3 ?v2 ))false )))false )):named a28 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (and (member$a ?v0 (vimage$c ?v1 ?v2 ))(forall ((?v3 T_dtree_sum$ ))(=> (and (= (fun_app$c ?v1 ?v0 )?v3 )(member$a ?v3 ?v2 ))false )))false )):named a29 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (and (member$ ?v0 (vimage$ ?v1 ?v2 ))(forall ((?v3 T_dtree_sum$ ))(=> (and (= (fun_app$ ?v1 ?v0 )?v3 )(member$a ?v3 ?v2 ))false )))false )):named a30 ))
(check-sat )
;(get-unsat-core )
