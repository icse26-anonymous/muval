;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun i$ ()Nat$ )
(declare-fun s$ ()A_stream$ )
(declare-fun w$ ()A_list$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun take$ (Nat$ A_list$ )A_list$ )
(declare-fun minus$ (Nat$ Nat$ )Nat$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(assert (! (not (= (stake$ i$ (shift$ w$ s$ ))(append$ (take$ i$ w$ )(stake$ (minus$ i$ (size$ w$ ))s$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_stream$ ))(= (shift$ (append$ ?v0 ?v1 )?v2 )(shift$ ?v0 (shift$ ?v1 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (size$ (stake$ ?v0 ?v1 ))?v0 )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ )(?v2 A_list$ ))(= (take$ ?v0 (append$ ?v1 ?v2 ))(append$ (take$ ?v0 ?v1 )(take$ (minus$ ?v0 (size$ ?v1 ))?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(=> (or (= (size$ ?v0 )(size$ ?v1 ))(= (size$ ?v2 )(size$ ?v3 )))(= (= (append$ ?v0 ?v2 )(append$ ?v1 ?v3 ))(and (= ?v0 ?v1 )(= ?v2 ?v3 ))))):named a5 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (append$ (append$ ?v0 ?v1 )?v2 )(append$ ?v0 (append$ ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shift$ (stake$ ?v0 ?v1 )(sdrop$ ?v0 ?v1 ))?v1 )):named a9 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (forall ((?v2 Nat$ ))(= (take$ ?v2 ?v0 )(take$ ?v2 ?v1 )))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (minus$ (minus$ ?v0 ?v1 )?v2 )(minus$ (minus$ ?v0 ?v2 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v3 ))(exists ((?v4 A_list$ ))(or (and (= ?v0 (append$ ?v2 ?v4 ))(= (append$ ?v4 ?v1 )?v3 ))(and (= (append$ ?v0 ?v4 )?v2 )(= ?v1 (append$ ?v4 ?v3 ))))))):named a12 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (and (= (append$ ?v0 ?v1 )?v2 )(= ?v3 (append$ ?v1 ?v4 )))(= (append$ ?v0 ?v3 )(append$ ?v2 ?v4 )))):named a13 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_list$ ))(= (size$ ?v1 )?v0 ))):named a15 ))
(check-sat )
;(get-unsat-core )
