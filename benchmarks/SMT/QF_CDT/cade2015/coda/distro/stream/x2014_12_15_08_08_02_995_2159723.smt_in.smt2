;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-codatatypes ()((Nat_stream$ (sCons$ (shd$ Nat$ )(stl$ Nat_stream$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun smap$ (Nat_nat_fun$ Nat_stream$ )Nat_stream$ )
(declare-fun snth$ (Nat_stream$ )Nat_nat_fun$ )
(declare-fun sset$ (Nat_stream$ )Nat_set$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun atLeast$ (Nat$ )Nat_set$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun smember$ (Nat$ Nat_stream$ )Bool )
(declare-fun siterate$ (Nat_nat_fun$ Nat$ )Nat_stream$ )
(declare-fun greaterThan$ (Nat$ )Nat_set$ )
(assert (! (not (= (sset$ (siterate$ suc$ n$ ))(atLeast$ n$ ))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (atLeast$ ?v0 )(atLeast$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_stream$ ))(! (= (smember$ ?v0 ?v1 )(member$ ?v0 (sset$ ?v1 ))):pattern ((smember$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (fun_app$ suc$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (atLeast$ (fun_app$ suc$ ?v0 ))(greaterThan$ ?v0 )):pattern ((fun_app$ suc$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat$ ))(member$ (fun_app$ (snth$ ?v0 )?v1 )(sset$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (shd$ (siterate$ ?v0 ?v1 ))?v1 )):named a9 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (smap$ ?v0 (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (stl$ (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (greaterThan$ ?v0 )(greaterThan$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$ ?v0 (shd$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ )(?v2 Nat$ ))(= (fun_app$ (snth$ (smap$ ?v0 ?v1 ))?v2 )(fun_app$ ?v0 (fun_app$ (snth$ ?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ )(?v2 Nat_stream$ ))(= (= (smap$ ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$ ?v0 (fun_app$ (snth$ ?v1 )?v3 ))(fun_app$ (snth$ ?v2 )?v3 ))))):named a16 ))
(check-sat )
;(get-unsat-core )
