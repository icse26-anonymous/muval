;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_a_stream_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort A_a_stream_stream_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_stream_stream_a_fun$ 0 )
(declare-sort A_stream_stream_stream_set$ 0 )
(declare-sort A_stream_a_stream_stream_fun$ 0 )
(declare-sort A_stream_stream_a_stream_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(A_stream_stream$ (sCons$a (shd$a A_stream$ )(stl$a A_stream_stream$ )))(A_stream_stream_stream$ (sCons$b (shd$b A_stream_stream$ )(stl$b A_stream_stream_stream$ )))))
(declare-fun f$ ()A_a_fun$ )
(declare-fun x$ ()A$ )
(declare-fun smap$ (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun snth$ (A_stream_stream$ Nat$ )A_stream$ )
(declare-fun sset$ (A_stream_stream$ )A_stream_set$ )
(declare-fun sdrop$ (Nat$ )A_stream_stream_a_stream_stream_fun$ )
(declare-fun smap$a (A_a_stream_fun$ )A_stream_a_stream_stream_fun$ )
(declare-fun smap$b (A_stream_a_fun$ )A_stream_stream_a_stream_fun$ )
(declare-fun smap$c (A_stream_a_stream_fun$ )A_stream_stream_a_stream_stream_fun$ )
(declare-fun smap$d (A_stream_stream_a_stream_stream_fun$ A_stream_stream_stream$ )A_stream_stream_stream$ )
(declare-fun smap$e (A_stream_stream_a_fun$ A_stream_stream_stream$ )A_stream$ )
(declare-fun smap$f (A_stream_stream_a_stream_fun$ A_stream_stream_stream$ )A_stream_stream$ )
(declare-fun smap$g (A_a_stream_stream_fun$ A_stream$ )A_stream_stream_stream$ )
(declare-fun smap$h (A_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream_stream$ )
(declare-fun snth$a (A_stream$ Nat$ )A$ )
(declare-fun sset$a (A_stream$ )A_set$ )
(declare-fun member$ (A_stream_stream_stream$ A_stream_stream_stream_set$ )Bool )
(declare-fun sdrop$a (Nat$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$ (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun member$a (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$b (A$ A_set$ )Bool )
(declare-fun member$c (A_stream$ A_stream_set$ )Bool )
(declare-fun streams$ (A_stream_stream_set$ )A_stream_stream_stream_set$ )
(declare-fun fun_app$a (A_a_stream_fun$ A$ )A_stream$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_stream_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream$ )
(declare-fun fun_app$d (A_stream_a_stream_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun fun_app$e (A_stream_stream_a_stream_fun$ A_stream_stream$ )A_stream$ )
(declare-fun fun_app$f (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$g (A_stream_stream_a_fun$ A_stream_stream$ )A$ )
(declare-fun fun_app$h (A_a_stream_stream_fun$ A$ )A_stream_stream$ )
(declare-fun siterate$ (A_a_fun$ )A_a_stream_fun$ )
(declare-fun streams$a (A_set$ )A_stream_set$ )
(declare-fun streams$b (A_stream_set$ )A_stream_stream_set$ )
(declare-fun siterate$a (A_stream_a_stream_fun$ )A_stream_a_stream_stream_fun$ )
(assert (! (not (= (fun_app$ (smap$ f$ )(fun_app$a (siterate$ f$ )x$ ))(fun_app$a (siterate$ f$ )(fun_app$b f$ x$ )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_stream_fun$ )(?v2 A_stream$ ))(= (fun_app$c (sdrop$ ?v0 )(fun_app$d (smap$a ?v1 )?v2 ))(fun_app$d (smap$a ?v1 )(fun_app$ (sdrop$a ?v0 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_a_fun$ )(?v2 A_stream_stream$ ))(= (fun_app$ (sdrop$a ?v0 )(fun_app$e (smap$b ?v1 )?v2 ))(fun_app$e (smap$b ?v1 )(fun_app$c (sdrop$ ?v0 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream_stream$ ))(= (fun_app$c (sdrop$ ?v0 )(fun_app$c (smap$c ?v1 )?v2 ))(fun_app$c (smap$c ?v1 )(fun_app$c (sdrop$ ?v0 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (fun_app$ (sdrop$a ?v0 )(fun_app$ (smap$ ?v1 )?v2 ))(fun_app$ (smap$ ?v1 )(fun_app$ (sdrop$a ?v0 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$ (fun_app$d (smap$a ?v0 )?v1 )?v2 )(fun_app$a ?v0 (snth$a ?v1 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (snth$a (fun_app$e (smap$b ?v0 )?v1 )?v2 )(fun_app$f ?v0 (snth$ ?v1 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (snth$ (fun_app$c (smap$c ?v0 )?v1 )?v2 )(fun_app$ ?v0 (snth$ ?v1 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$a (fun_app$ (smap$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (snth$a ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ ))(= (shd$a (fun_app$d (smap$a ?v0 )?v1 ))(fun_app$a ?v0 (shd$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ ))(= (shd$ (fun_app$e (smap$b ?v0 )?v1 ))(fun_app$f ?v0 (shd$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ ))(= (shd$a (fun_app$c (smap$c ?v0 )?v1 ))(fun_app$ ?v0 (shd$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (fun_app$ (smap$ ?v0 )?v1 ))(fun_app$b ?v0 (shd$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ ))(= (stl$a (fun_app$d (smap$a ?v0 )?v1 ))(fun_app$d (smap$a ?v0 )(stl$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ ))(= (stl$ (fun_app$e (smap$b ?v0 )?v1 ))(fun_app$e (smap$b ?v0 )(stl$a ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ ))(= (stl$a (fun_app$c (smap$c ?v0 )?v1 ))(fun_app$c (smap$c ?v0 )(stl$a ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (fun_app$ (smap$ ?v0 )?v1 ))(fun_app$ (smap$ ?v0 )(stl$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (shd$ (fun_app$a (siterate$ ?v0 )?v1 ))?v1 )):named a17 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ ))(= (= (fun_app$d (smap$a ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$a ?v0 (snth$a ?v1 ?v3 ))(snth$ ?v2 ?v3 ))))):named a18 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ ))(= (= (fun_app$e (smap$b ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$f ?v0 (snth$ ?v1 ?v3 ))(snth$a ?v2 ?v3 ))))):named a19 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream$ ))(= (= (fun_app$c (smap$c ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$ ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 ))))):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (fun_app$ (smap$ ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$b ?v0 (snth$a ?v1 ?v3 ))(snth$a ?v2 ?v3 ))))):named a21 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (stl$ (fun_app$a (siterate$ ?v0 )?v1 ))(fun_app$a (siterate$ ?v0 )(fun_app$b ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ ))(= (fun_app$d (siterate$a ?v0 )?v1 )(sCons$a ?v1 (fun_app$d (siterate$a ?v0 )(fun_app$ ?v0 ?v1 ))))):named a23 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$a (siterate$ ?v0 )?v1 )(sCons$ ?v1 (fun_app$a (siterate$ ?v0 )(fun_app$b ?v0 ?v1 ))))):named a24 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ )(?v2 A_stream_stream_a_stream_stream_fun$ )(?v3 A_stream_stream_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 A_stream_stream$ ))(=> (member$a ?v4 ?v1 )(member$a (fun_app$c ?v2 ?v4 )?v3 ))))(member$ (smap$d ?v2 ?v0 )(streams$ ?v3 )))):named a25 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ )(?v2 A_stream_stream_a_fun$ )(?v3 A_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 A_stream_stream$ ))(=> (member$a ?v4 ?v1 )(member$b (fun_app$g ?v2 ?v4 )?v3 ))))(member$c (smap$e ?v2 ?v0 )(streams$a ?v3 )))):named a26 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ )(?v2 A_stream_stream_a_stream_fun$ )(?v3 A_stream_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 A_stream_stream$ ))(=> (member$a ?v4 ?v1 )(member$c (fun_app$e ?v2 ?v4 )?v3 ))))(member$a (smap$f ?v2 ?v0 )(streams$b ?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 A_a_stream_stream_fun$ )(?v3 A_stream_stream_set$ ))(=> (and (member$c ?v0 (streams$a ?v1 ))(forall ((?v4 A$ ))(=> (member$b ?v4 ?v1 )(member$a (fun_app$h ?v2 ?v4 )?v3 ))))(member$ (smap$g ?v2 ?v0 )(streams$ ?v3 )))):named a28 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 A_stream_a_stream_stream_fun$ )(?v3 A_stream_stream_set$ ))(=> (and (member$a ?v0 (streams$b ?v1 ))(forall ((?v4 A_stream$ ))(=> (member$c ?v4 ?v1 )(member$a (fun_app$d ?v2 ?v4 )?v3 ))))(member$ (smap$h ?v2 ?v0 )(streams$ ?v3 )))):named a29 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 A_stream_a_stream_fun$ )(?v3 A_stream_set$ ))(=> (and (member$a ?v0 (streams$b ?v1 ))(forall ((?v4 A_stream$ ))(=> (member$c ?v4 ?v1 )(member$c (fun_app$ ?v2 ?v4 )?v3 ))))(member$a (fun_app$c (smap$c ?v2 )?v0 )(streams$b ?v3 )))):named a30 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 A_stream_a_fun$ )(?v3 A_set$ ))(=> (and (member$a ?v0 (streams$b ?v1 ))(forall ((?v4 A_stream$ ))(=> (member$c ?v4 ?v1 )(member$b (fun_app$f ?v2 ?v4 )?v3 ))))(member$c (fun_app$e (smap$b ?v2 )?v0 )(streams$a ?v3 )))):named a31 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 A_a_stream_fun$ )(?v3 A_stream_set$ ))(=> (and (member$c ?v0 (streams$a ?v1 ))(forall ((?v4 A$ ))(=> (member$b ?v4 ?v1 )(member$c (fun_app$a ?v2 ?v4 )?v3 ))))(member$a (fun_app$d (smap$a ?v2 )?v0 )(streams$b ?v3 )))):named a32 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 A_a_fun$ )(?v3 A_set$ ))(=> (and (member$c ?v0 (streams$a ?v1 ))(forall ((?v4 A$ ))(=> (member$b ?v4 ?v1 )(member$b (fun_app$b ?v2 ?v4 )?v3 ))))(member$c (fun_app$ (smap$ ?v2 )?v0 )(streams$a ?v3 )))):named a33 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_a_fun$ )(?v3 A_stream_a_fun$ ))(=> (and (forall ((?v4 A_stream$ )(?v5 A_stream$ ))(=> (and (member$c ?v4 (sset$ ?v0 ))(and (member$c ?v5 (sset$ ?v1 ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$e (smap$b ?v2 )?v0 )(fun_app$e (smap$b ?v3 )?v1 )))(= ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_a_stream_fun$ )(?v3 A_stream_a_stream_fun$ ))(=> (and (forall ((?v4 A_stream$ )(?v5 A_stream$ ))(=> (and (member$c ?v4 (sset$ ?v0 ))(and (member$c ?v5 (sset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$c (smap$c ?v2 )?v0 )(fun_app$c (smap$c ?v3 )?v1 )))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_stream_fun$ )(?v3 A_a_stream_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$b ?v4 (sset$a ?v0 ))(and (member$b ?v5 (sset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$d (smap$a ?v2 )?v0 )(fun_app$d (smap$a ?v3 )?v1 )))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$b ?v4 (sset$a ?v0 ))(and (member$b ?v5 (sset$a ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$ (smap$ ?v2 )?v0 )(fun_app$ (smap$ ?v3 )?v1 )))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_a_fun$ )(?v2 A_stream_a_fun$ ))(=> (forall ((?v3 A_stream$ ))(=> (member$c ?v3 (sset$ ?v0 ))(= (fun_app$f ?v1 ?v3 )(fun_app$f ?v2 ?v3 ))))(= (fun_app$e (smap$b ?v1 )?v0 )(fun_app$e (smap$b ?v2 )?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream_a_stream_fun$ ))(=> (forall ((?v3 A_stream$ ))(=> (member$c ?v3 (sset$ ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (fun_app$c (smap$c ?v1 )?v0 )(fun_app$c (smap$c ?v2 )?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_stream_fun$ )(?v2 A_a_stream_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$b ?v3 (sset$a ?v0 ))(= (fun_app$a ?v1 ?v3 )(fun_app$a ?v2 ?v3 ))))(= (fun_app$d (smap$a ?v1 )?v0 )(fun_app$d (smap$a ?v2 )?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$b ?v3 (sset$a ?v0 ))(= (fun_app$b ?v1 ?v3 )(fun_app$b ?v2 ?v3 ))))(= (fun_app$ (smap$ ?v1 )?v0 )(fun_app$ (smap$ ?v2 )?v0 )))):named a41 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_a_fun$ )(?v3 A_stream_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_stream$ ))(=> (member$c ?v4 (sset$ ?v1 ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v4 )))))(= (fun_app$e (smap$b ?v2 )?v0 )(fun_app$e (smap$b ?v3 )?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_a_stream_fun$ )(?v3 A_stream_a_stream_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_stream$ ))(=> (member$c ?v4 (sset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (fun_app$c (smap$c ?v2 )?v0 )(fun_app$c (smap$c ?v3 )?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_stream_fun$ )(?v3 A_a_stream_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$b ?v4 (sset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (fun_app$d (smap$a ?v2 )?v0 )(fun_app$d (smap$a ?v3 )?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$b ?v4 (sset$a ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v4 )))))(= (fun_app$ (smap$ ?v2 )?v0 )(fun_app$ (smap$ ?v3 )?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream$ )(?v3 A_stream_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a46 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= (sCons$a (shd$a ?v0 )(stl$a ?v0 ))?v0 )):named a48 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a49 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$ (fun_app$ (sdrop$a ?v0 )?v1 ))(snth$a ?v1 ?v0 ))):named a50 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (fun_app$e (smap$b ?v0 )?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$f ?v0 (shd$a ?v1 ))?v2 )(= (fun_app$e (smap$b ?v0 )(stl$a ?v1 ))?v3 )))):named a51 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_stream_stream$ ))(= (= (fun_app$d (smap$a ?v0 )?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$a ?v0 (shd$ ?v1 ))?v2 )(= (fun_app$d (smap$a ?v0 )(stl$ ?v1 ))?v3 )))):named a52 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ )(?v3 A_stream_stream$ ))(= (= (fun_app$c (smap$c ?v0 )?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$ ?v0 (shd$a ?v1 ))?v2 )(= (fun_app$c (smap$c ?v0 )(stl$a ?v1 ))?v3 )))):named a53 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (fun_app$ (smap$ ?v0 )?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$b ?v0 (shd$ ?v1 ))?v2 )(= (fun_app$ (smap$ ?v0 )(stl$ ?v1 ))?v3 )))):named a54 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream_stream$ )(?v2 A_stream_stream_set$ ))(= (member$ (sCons$b ?v0 ?v1 )(streams$ ?v2 ))(and (member$a ?v0 ?v2 )(member$ ?v1 (streams$ ?v2 ))))):named a55 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_set$ ))(= (member$a (sCons$a ?v0 ?v1 )(streams$b ?v2 ))(and (member$c ?v0 ?v2 )(member$a ?v1 (streams$b ?v2 ))))):named a56 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_set$ ))(= (member$c (sCons$ ?v0 ?v1 )(streams$a ?v2 ))(and (member$b ?v0 ?v2 )(member$c ?v1 (streams$a ?v2 ))))):named a57 ))
(check-sat )
;(get-unsat-core )
