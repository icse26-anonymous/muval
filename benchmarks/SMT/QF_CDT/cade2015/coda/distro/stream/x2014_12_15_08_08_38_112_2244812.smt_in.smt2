;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_a_list_bool_fun_fun$ 0 )
(declare-sort A_list_a_bool_fun_fun$ 0 )
(declare-sort A_list_stream_bool_fun$ 0 )
(declare-sort A_a_stream_bool_fun_fun$ 0 )
(declare-sort A_list_a_list_bool_fun_fun$ 0 )
(declare-sort A_list_a_list_stream_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_list_stream$ (sCons$a (shd$a A_list$ )(stl$a A_list_stream$ )))))
(declare-fun s$ ()A_list_stream$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_list$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun flat$ (A_list_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun snth$a (A_list_stream$ Nat$ )A_list$ )
(declare-fun sset$a (A_list_stream$ )A_list_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun member$a (A_list$ A_list_set$ )Bool )
(declare-fun smember$ (A$ A_stream$ )Bool )
(declare-fun fun_app$a (A_a_stream_bool_fun_fun$ A$ )A_stream_bool_fun$ )
(declare-fun fun_app$b (A_list_stream_bool_fun$ A_list_stream$ )Bool )
(declare-fun fun_app$c (A_list_a_list_stream_bool_fun_fun$ A_list$ )A_list_stream_bool_fun$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$f (A_list_bool_fun$ A_list$ )Bool )
(declare-fun fun_app$g (A_a_list_bool_fun_fun$ A$ )A_list_bool_fun$ )
(declare-fun fun_app$h (A_list_a_bool_fun_fun$ A_list$ )A_bool_fun$ )
(declare-fun fun_app$i (A_list_a_list_bool_fun_fun$ A_list$ )A_list_bool_fun$ )
(declare-fun smember$a (A_list$ A_list_stream$ )Bool )
(declare-fun stream_all2$ (A_a_bool_fun_fun$ A_stream$ A_stream$ )Bool )
(declare-fun stream_all2$a (A_a_list_bool_fun_fun$ A_stream$ A_list_stream$ )Bool )
(declare-fun stream_all2$b (A_list_a_bool_fun_fun$ A_list_stream$ A_stream$ )Bool )
(declare-fun stream_all2$c (A_list_a_list_bool_fun_fun$ A_list_stream$ A_list_stream$ )Bool )
(assert (! (not (member$ x$ (sset$ (flat$ s$ )))):named a0 ))
(assert (! (member$a xs$ (sset$a s$ )):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(=> (member$a ?v0 (sset$a s$ ))(not (= ?v0 nil$ )))):named a2 ))
(assert (! (member$ x$ (set$ xs$ )):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (smember$ ?v0 ?v1 )(member$ ?v0 (sset$ ?v1 ))):pattern ((smember$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ ))(! (= (smember$a ?v0 ?v1 )(member$a ?v0 (sset$a ?v1 ))):pattern ((smember$a ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(member$ (snth$ ?v0 ?v1 )(sset$ ?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 Nat$ ))(member$a (snth$a ?v0 ?v1 )(sset$a ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_stream$ ))(member$ (shd$ ?v0 )(sset$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_list_stream$ ))(member$a (shd$a ?v0 )(sset$a ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(=> (member$ ?v0 (sset$ (stl$ ?v1 )))(member$ ?v0 (sset$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ ))(=> (member$a ?v0 (sset$a (stl$a ?v1 )))(member$a ?v0 (sset$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_a_stream_bool_fun_fun$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v3 A$ )(?v4 A_stream$ ))(fun_app$ (fun_app$a ?v2 ?v3 )(sCons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_stream$ )(?v5 A$ ))(=> (and (member$ ?v5 (sset$ ?v4 ))(fun_app$ (fun_app$a ?v2 ?v5 )?v4 ))(fun_app$ (fun_app$a ?v2 ?v5 )(sCons$ ?v3 ?v4 ))))))(fun_app$ (fun_app$a ?v2 ?v0 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ )(?v2 A_list_a_list_stream_bool_fun_fun$ ))(=> (and (member$a ?v0 (sset$a ?v1 ))(and (forall ((?v3 A_list$ )(?v4 A_list_stream$ ))(fun_app$b (fun_app$c ?v2 ?v3 )(sCons$a ?v3 ?v4 )))(forall ((?v3 A_list$ )(?v4 A_list_stream$ )(?v5 A_list$ ))(=> (and (member$a ?v5 (sset$a ?v4 ))(fun_app$b (fun_app$c ?v2 ?v5 )?v4 ))(fun_app$b (fun_app$c ?v2 ?v5 )(sCons$a ?v3 ?v4 ))))))(fun_app$b (fun_app$c ?v2 ?v0 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v2 A_stream$ ))(=> (= ?v1 (sCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v1 (sCons$ ?v2 ?v3 ))(member$ ?v0 (sset$ ?v3 )))false ))))false )):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ ))(=> (and (member$a ?v0 (sset$a ?v1 ))(and (forall ((?v2 A_list_stream$ ))(=> (= ?v1 (sCons$a ?v0 ?v2 ))false ))(forall ((?v2 A_list$ )(?v3 A_list_stream$ ))(=> (and (= ?v1 (sCons$a ?v2 ?v3 ))(member$a ?v0 (sset$a ?v3 )))false ))))false )):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ ))(=> (member$ ?v0 (sset$ ?v1 ))(member$ ?v0 (sset$ (sCons$ ?v2 ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ )(?v2 A_list$ ))(=> (member$a ?v0 (sset$a ?v1 ))(member$a ?v0 (sset$a (sCons$a ?v2 ?v1 ))))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(member$ ?v0 (sset$ (sCons$ ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ ))(member$a ?v0 (sset$a (sCons$a ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (stream_all2$ ?v0 ?v1 ?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (sset$ ?v1 ))(and (member$ ?v5 (sset$ ?v2 ))(fun_app$d (fun_app$e ?v0 ?v4 )?v5 )))(fun_app$d (fun_app$e ?v3 ?v4 )?v5 ))))(stream_all2$ ?v3 ?v1 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_a_list_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_list_stream$ )(?v3 A_a_list_bool_fun_fun$ ))(=> (and (stream_all2$a ?v0 ?v1 ?v2 )(forall ((?v4 A$ )(?v5 A_list$ ))(=> (and (member$ ?v4 (sset$ ?v1 ))(and (member$a ?v5 (sset$a ?v2 ))(fun_app$f (fun_app$g ?v0 ?v4 )?v5 )))(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(stream_all2$a ?v3 ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 A_list_a_bool_fun_fun$ )(?v1 A_list_stream$ )(?v2 A_stream$ )(?v3 A_list_a_bool_fun_fun$ ))(=> (and (stream_all2$b ?v0 ?v1 ?v2 )(forall ((?v4 A_list$ )(?v5 A$ ))(=> (and (member$a ?v4 (sset$a ?v1 ))(and (member$ ?v5 (sset$ ?v2 ))(fun_app$d (fun_app$h ?v0 ?v4 )?v5 )))(fun_app$d (fun_app$h ?v3 ?v4 )?v5 ))))(stream_all2$b ?v3 ?v1 ?v2 ))):named a22 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_stream$ )(?v2 A_list_stream$ )(?v3 A_list_a_list_bool_fun_fun$ ))(=> (and (stream_all2$c ?v0 ?v1 ?v2 )(forall ((?v4 A_list$ )(?v5 A_list$ ))(=> (and (member$a ?v4 (sset$a ?v1 ))(and (member$a ?v5 (sset$a ?v2 ))(fun_app$f (fun_app$i ?v0 ?v4 )?v5 )))(fun_app$f (fun_app$i ?v3 ?v4 )?v5 ))))(stream_all2$c ?v3 ?v1 ?v2 ))):named a23 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ )(?v2 A_list$ )(?v3 A_list_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list_stream$ )(?v3 A_list$ )(?v4 A_list_stream$ ))(! (= (stream_all2$c ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(and (fun_app$f (fun_app$i ?v0 ?v1 )?v3 )(stream_all2$c ?v0 ?v2 ?v4 ))):pattern ((stream_all2$c ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a26 ))
(assert (! (forall ((?v0 A_list_a_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (stream_all2$b ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(and (fun_app$d (fun_app$h ?v0 ?v1 )?v3 )(stream_all2$b ?v0 ?v2 ?v4 ))):pattern ((stream_all2$b ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a27 ))
(assert (! (forall ((?v0 A_a_list_bool_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A_list$ )(?v4 A_list_stream$ ))(! (= (stream_all2$a ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(and (fun_app$f (fun_app$g ?v0 ?v1 )?v3 )(stream_all2$a ?v0 ?v2 ?v4 ))):pattern ((stream_all2$a ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a28 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (stream_all2$ ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(and (fun_app$d (fun_app$e ?v0 ?v1 )?v3 )(stream_all2$ ?v0 ?v2 ?v4 ))):pattern ((stream_all2$ ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a29 ))
(check-sat )
;(get-unsat-core )
