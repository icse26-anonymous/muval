;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_list_stream$ (sCons$ (shd$ A_list$ )(stl$ A_list_stream$ )))(A_stream$ (sCons$a (shd$a A$ )(stl$a A_stream$ )))))
(declare-fun x$ ()A$ )
(declare-fun y$ ()Nat$ )
(declare-fun sa$ ()A_list_stream$ )
(declare-fun flat$ (A_list_stream$ )A_stream$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun minus$ (Nat$ Nat$ )Nat$ )
(declare-fun fun_app$ (A_list_bool_fun$ A_list$ )Bool )
(assert (! (not (less$ (minus$ y$ (size$ (shd$ sa$ )))y$ )):named a0 ))
(assert (! (less$ zero$ y$ ):named a1 ))
(assert (! (less$ zero$ (size$ (shd$ sa$ ))):named a2 ))
(assert (! (not (less$ y$ (size$ (shd$ sa$ )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ ?v0 ?v1 )(less$ ?v0 ?v2 ))(less$ (minus$ ?v2 ?v1 )(minus$ ?v2 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (less$ ?v0 ?v1 )(less$ (minus$ ?v0 ?v2 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list$ ))(=> (forall ((?v2 A_list$ ))(=> (forall ((?v3 A_list$ ))(=> (less$ (size$ ?v3 )(size$ ?v2 ))(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (less$ zero$ (minus$ ?v0 ?v1 ))(less$ ?v1 ?v0 ))):named a7 ))
(assert (! (= x$ (snth$ (flat$ sa$ )y$ )):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less$ zero$ ?v0 )(less$ zero$ ?v1 ))(less$ (minus$ ?v1 ?v0 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(= (minus$ zero$ ?v0 )zero$ )):named a10 ))
(check-sat )
;(get-unsat-core )
