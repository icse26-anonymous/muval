;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun n$ ()Nat$ )
(declare-fun u$ ()A_list$ )
(declare-fun mod$ (Nat$ )Nat_nat_fun$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun cycle$ (A_list$ )A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(assert (! (not (= (sdrop$ n$ (cycle$ u$ ))(cycle$ u$ ))):named a0 ))
(assert (! (not (= u$ nil$ )):named a1 ))
(assert (! (= (fun_app$ (mod$ n$ )(size$ u$ ))zero$ ):named a2 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$ ))(= (sdrop$ (size$ ?v0 )(cycle$ ?v0 ))(cycle$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (sdrop$ zero$ ?v0 )?v0 ):pattern ((sdrop$ zero$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (size$ ?v0 )zero$ )(= ?v0 nil$ ))):named a5 ))
(assert (! (= (size$ nil$ )zero$ ):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (mod$ ?v0 )zero$ )?v0 )):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (mod$ ?v0 )?v0 )zero$ ):pattern ((mod$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (mod$ zero$ )?v0 )zero$ )):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$ (mod$ (fun_app$ (mod$ ?v0 )?v1 ))?v1 )(fun_app$ (mod$ ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$ ))(= (stake$ (size$ ?v0 )(cycle$ ?v0 ))?v0 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (= (stake$ ?v0 ?v1 )nil$ )(= ?v0 zero$ ))):named a12 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_list$ ))(= (size$ ?v1 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(not (= ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (size$ (stake$ ?v0 ?v1 ))?v0 )):named a16 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (stake$ zero$ ?v0 )nil$ ):pattern ((stake$ zero$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a18 ))
(check-sat )
;(get-unsat-core )
