;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort A_stream_stream_stream_set$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(A_stream_stream$ (sCons$a (shd$a A_stream$ )(stl$a A_stream_stream$ )))(A_stream_stream_stream$ (sCons$b (shd$b A_stream_stream$ )(stl$b A_stream_stream_stream$ )))))
(declare-fun bot$ ()A_set$ )
(declare-fun bot$a ()A_stream_set$ )
(declare-fun bot$b ()A_stream_stream_set$ )
(declare-fun bot$c ()A_stream_bool_fun$ )
(declare-fun bot$d ()Bool )
(declare-fun bot$e ()A_bool_fun$ )
(declare-fun member$ (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (A_stream$ A_stream_set$ )Bool )
(declare-fun member$c (A_stream_stream_stream$ A_stream_stream_stream_set$ )Bool )
(declare-fun streams$ (A_set$ )A_stream_set$ )
(declare-fun collect$a (A_stream_bool_fun$ )A_stream_set$ )
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun is_empty$ (A_set$ )Bool )
(declare-fun streams$a (A_stream_stream_set$ )A_stream_stream_stream_set$ )
(declare-fun streams$b (A_stream_set$ )A_stream_stream_set$ )
(declare-fun is_empty$a (A_stream_set$ )Bool )
(assert (! (not (= (streams$ bot$ )bot$a )):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a1 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (= (collect$a ?v0 )bot$a )(forall ((?v1 A_stream$ ))(not (fun_app$a ?v0 ?v1 ))))):named a2 ))
(assert (! (forall ((?v0 A_stream_stream_set$ ))(= (forall ((?v1 A_stream_stream$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$b ))):named a3 ))
(assert (! (forall ((?v0 A_set$ ))(= (forall ((?v1 A$ ))(not (member$a ?v1 ?v0 )))(= ?v0 bot$ ))):named a4 ))
(assert (! (forall ((?v0 A_stream_set$ ))(= (forall ((?v1 A_stream$ ))(not (member$b ?v1 ?v0 )))(= ?v0 bot$a ))):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (= bot$a (collect$a ?v0 ))(forall ((?v1 A_stream$ ))(not (fun_app$a ?v0 ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= (member$ ?v0 bot$b )false )):named a8 ))
(assert (! (forall ((?v0 A$ ))(= (member$a ?v0 bot$ )false )):named a9 ))
(assert (! (forall ((?v0 A_stream$ ))(= (member$b ?v0 bot$a )false )):named a10 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$a bot$c ?v0 )bot$d ):pattern ((fun_app$a bot$c ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ bot$e ?v0 )bot$d ):pattern ((fun_app$ bot$e ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_stream_stream_set$ ))(= (exists ((?v1 A_stream_stream$ ))(member$ ?v1 ?v0 ))(not (= ?v0 bot$b )))):named a13 ))
(assert (! (forall ((?v0 A_set$ ))(= (exists ((?v1 A$ ))(member$a ?v1 ?v0 ))(not (= ?v0 bot$ )))):named a14 ))
(assert (! (forall ((?v0 A_stream_set$ ))(= (exists ((?v1 A_stream$ ))(member$b ?v1 ?v0 ))(not (= ?v0 bot$a )))):named a15 ))
(assert (! (forall ((?v0 A_stream_stream_set$ ))(=> (forall ((?v1 A_stream_stream$ ))(=> (member$ ?v1 ?v0 )false ))(= ?v0 bot$b ))):named a16 ))
(assert (! (forall ((?v0 A_set$ ))(=> (forall ((?v1 A$ ))(=> (member$a ?v1 ?v0 )false ))(= ?v0 bot$ ))):named a17 ))
(assert (! (forall ((?v0 A_stream_set$ ))(=> (forall ((?v1 A_stream$ ))(=> (member$b ?v1 ?v0 )false ))(= ?v0 bot$a ))):named a18 ))
(assert (! (forall ((?v0 A_stream_stream_set$ )(?v1 A_stream_stream$ ))(=> (= ?v0 bot$b )(not (member$ ?v1 ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(=> (= ?v0 bot$ )(not (member$a ?v1 ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_stream_set$ )(?v1 A_stream$ ))(=> (= ?v0 bot$a )(not (member$b ?v1 ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(=> (member$ ?v0 bot$b )false )):named a22 ))
(assert (! (forall ((?v0 A$ ))(=> (member$a ?v0 bot$ )false )):named a23 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (member$b ?v0 bot$a )false )):named a24 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$a bot$c ?v0 )bot$d ):pattern ((fun_app$a bot$c ?v0 )))):named a25 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ bot$e ?v0 )bot$d ):pattern ((fun_app$ bot$e ?v0 )))):named a26 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ ))(=> (member$c ?v0 (streams$a ?v1 ))(member$ (shd$b ?v0 )?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (member$ ?v0 (streams$b ?v1 ))(member$b (shd$a ?v0 )?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (member$b ?v0 (streams$ ?v1 ))(member$a (shd$ ?v0 )?v1 ))):named a29 ))
(assert (! (= bot$ (collect$ bot$e )):named a30 ))
(assert (! (= bot$a (collect$a bot$c )):named a31 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (is_empty$ ?v0 )(= ?v0 bot$ )):pattern ((is_empty$ ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_stream_set$ ))(! (= (is_empty$a ?v0 )(= ?v0 bot$a )):pattern ((is_empty$a ?v0 )))):named a33 ))
(check-sat )
;(get-unsat-core )
