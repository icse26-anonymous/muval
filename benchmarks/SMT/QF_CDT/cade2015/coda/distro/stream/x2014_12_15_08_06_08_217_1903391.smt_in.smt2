;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()A_stream$ )
(declare-fun min$ (Nat$ Nat$ )Nat$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun take$ (Nat$ A_list$ )A_list$ )
(declare-fun zero$ ()Nat$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun replicate$ (Nat$ A$ )A_list$ )
(assert (! (not (= (take$ n$ (stake$ m$ s$ ))(stake$ (min$ n$ m$ )s$ ))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_list$ ))(= (take$ ?v0 (take$ ?v1 ?v2 ))(take$ (min$ ?v0 ?v1 )?v2 ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (min$ (min$ ?v0 ?v1 )?v1 )(min$ ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (min$ ?v0 (min$ ?v0 ?v1 ))(min$ ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(= (min$ ?v0 ?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (forall ((?v2 Nat$ ))(= (take$ ?v2 ?v0 )(take$ ?v2 ?v1 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (min$ (min$ ?v0 ?v1 )?v2 )(min$ ?v0 (min$ ?v1 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (min$ ?v0 (min$ ?v1 ?v2 ))(min$ ?v1 (min$ ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (min$ ?v0 ?v1 )(min$ ?v1 ?v0 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (size$ (stake$ ?v0 ?v1 ))?v0 )):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A$ ))(= (take$ ?v0 (replicate$ ?v1 ?v2 ))(replicate$ (min$ ?v0 ?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (size$ (take$ ?v0 ?v1 ))(min$ (size$ ?v1 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(= (min$ ?v0 zero$ )zero$ )):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (replicate$ ?v0 ?v1 )(replicate$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(=> (not (= ?v0 zero$ ))(= ?v1 ?v3 ))))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(= (size$ (replicate$ ?v0 ?v1 ))?v0 )):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(= (min$ zero$ ?v0 )zero$ )):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a16 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a17 ))
(check-sat )
;(get-unsat-core )
