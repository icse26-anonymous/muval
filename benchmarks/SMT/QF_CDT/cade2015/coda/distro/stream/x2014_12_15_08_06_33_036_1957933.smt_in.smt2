;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-sort A_list$ 0)
(declare-sort Nat_a_prod$ 0)
(declare-sort Nat_nat_a_prod_prod$ 0)
(declare-sort Nat_nat_a_prod_prod_list$ 0)
(declare-sort Nat_a_prod_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun fst$ (Nat_a_prod$)Nat$)
(declare-fun snd$ (Nat_a_prod$)A$)
(declare-fun pair$ (Nat$ A$ )Nat_a_prod$)
(declare-fun fst$a (Nat_nat_a_prod_prod$)Nat$)
(declare-fun snd$a (Nat_nat_a_prod_prod$)Nat_a_prod$)
(declare-fun pair$a (Nat$ Nat_a_prod$ )Nat_nat_a_prod_prod$)
(declare-fun nil$a ()Nat_nat_a_prod_prod_list$)
(declare-fun hd$a (Nat_nat_a_prod_prod_list$)Nat_nat_a_prod_prod$)
(declare-fun tl$a (Nat_nat_a_prod_prod_list$)Nat_nat_a_prod_prod_list$)
(declare-fun cons$a (Nat_nat_a_prod_prod$ Nat_nat_a_prod_prod_list$ )Nat_nat_a_prod_prod_list$)
(declare-fun nil$b ()Nat_a_prod_list$)
(declare-fun hd$b (Nat_a_prod_list$)Nat_a_prod$)
(declare-fun tl$b (Nat_a_prod_list$)Nat_a_prod_list$)
(declare-fun cons$b (Nat_a_prod$ Nat_a_prod_list$ )Nat_a_prod_list$)
(declare-codatatypes ()((Nat_a_prod_stream$ (sCons$a (shd$a Nat_a_prod$ )(stl$a Nat_a_prod_stream$ )))(Nat_nat_a_prod_prod_stream$ (sCons$b (shd$b Nat_nat_a_prod_prod$ )(stl$b Nat_nat_a_prod_prod_stream$ )))))
(declare-sort Nat_nat_nat_a_prod_prod_prod$ 0)
(declare-sort Nat_nat_nat_a_prod_prod_prod_list$ 0)
(declare-fun fst$b (Nat_nat_nat_a_prod_prod_prod$)Nat$)
(declare-fun snd$b (Nat_nat_nat_a_prod_prod_prod$)Nat_nat_a_prod_prod$)
(declare-fun pair$b (Nat$ Nat_nat_a_prod_prod$ )Nat_nat_nat_a_prod_prod_prod$)
(declare-fun nil$c ()Nat_nat_nat_a_prod_prod_prod_list$)
(declare-fun hd$c (Nat_nat_nat_a_prod_prod_prod_list$)Nat_nat_nat_a_prod_prod_prod$)
(declare-fun tl$c (Nat_nat_nat_a_prod_prod_prod_list$)Nat_nat_nat_a_prod_prod_prod_list$)
(declare-fun cons$c (Nat_nat_nat_a_prod_prod_prod$ Nat_nat_nat_a_prod_prod_prod_list$ )Nat_nat_nat_a_prod_prod_prod_list$)
(declare-fun i$ ()Nat$ )
(declare-fun s$ ()A_stream$ )
(declare-fun w$ ()A_list$ )
(declare-fun drop$ (Nat$ A_list$ )A_list$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun drop$a (Nat$ Nat_nat_a_prod_prod_list$ )Nat_nat_a_prod_prod_list$ )
(declare-fun drop$b (Nat$ Nat_a_prod_list$ )Nat_a_prod_list$ )
(declare-fun minus$ (Nat$ Nat$ )Nat$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun size$a (Nat_nat_a_prod_prod_list$ )Nat$ )
(declare-fun size$b (Nat_a_prod_list$ )Nat$ )
(declare-fun size$c (Nat_nat_nat_a_prod_prod_prod_list$ )Nat$ )
(declare-fun stake$ (Nat$ Nat_a_prod_stream$ )Nat_a_prod_list$ )
(declare-fun append$ (Nat_nat_a_prod_prod_list$ Nat_nat_a_prod_prod_list$ )Nat_nat_a_prod_prod_list$ )
(declare-fun sdrop$a (Nat$ Nat_a_prod_stream$ )Nat_a_prod_stream$ )
(declare-fun shift$a (Nat_a_prod_list$ Nat_a_prod_stream$ )Nat_a_prod_stream$ )
(declare-fun stake$a (Nat$ A_stream$ )A_list$ )
(declare-fun stake$b (Nat$ Nat_nat_a_prod_prod_stream$ )Nat_nat_a_prod_prod_list$ )
(declare-fun append$a (Nat_a_prod_list$ Nat_a_prod_list$ )Nat_a_prod_list$ )
(declare-fun append$b (A_list$ A_list$ )A_list$ )
(declare-fun rotate1$ (Nat_nat_a_prod_prod_list$ )Nat_nat_a_prod_prod_list$ )
(declare-fun rotate1$a (Nat_a_prod_list$ )Nat_a_prod_list$ )
(declare-fun rotate1$b (A_list$ )A_list$ )
(declare-fun enumerate$ (Nat$ Nat_nat_a_prod_prod_list$ )Nat_nat_nat_a_prod_prod_prod_list$ )
(declare-fun replicate$ (Nat$ Nat_a_prod$ )Nat_a_prod_list$ )
(declare-fun enumerate$a (Nat$ Nat_a_prod_list$ )Nat_nat_a_prod_prod_list$ )
(declare-fun enumerate$b (Nat$ A_list$ )Nat_a_prod_list$ )
(declare-fun replicate$a (Nat$ A$ )A_list$ )
(assert (! (not (= (sdrop$ i$ (shift$ w$ s$ ))(shift$ (drop$ i$ w$ )(sdrop$ (minus$ i$ (size$ w$ ))s$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_a_prod_prod_list$ ))(= (size$a (drop$a ?v0 ?v1 ))(minus$ (size$a ?v1 )?v0 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_list$ ))(= (size$b (drop$b ?v0 ?v1 ))(minus$ (size$b ?v1 )?v0 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (size$ (drop$ ?v0 ?v1 ))(minus$ (size$ ?v1 )?v0 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_a_prod_stream$ ))(= (drop$b ?v0 (stake$ ?v1 ?v2 ))(stake$ (minus$ ?v1 ?v0 )(sdrop$a ?v0 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_stream$ ))(= (drop$ ?v0 (stake$a ?v1 ?v2 ))(stake$a (minus$ ?v1 ?v0 )(sdrop$ ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_stream$ ))(= (shift$a (stake$ ?v0 ?v1 )(sdrop$a ?v0 ?v1 ))?v1 )):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shift$ (stake$a ?v0 ?v1 )(sdrop$ ?v0 ?v1 ))?v1 )):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (minus$ (minus$ ?v0 ?v1 )?v2 )(minus$ (minus$ ?v0 ?v2 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_a_prod_prod_list$ )(?v1 Nat_nat_a_prod_prod_list$ ))(=> (not (= (size$a ?v0 )(size$a ?v1 )))(= (= ?v0 ?v1 )false ))):named a10 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ )(?v1 Nat_a_prod_list$ ))(=> (not (= (size$b ?v0 )(size$b ?v1 )))(= (= ?v0 ?v1 )false ))):named a11 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 Nat_nat_a_prod_prod_list$ ))(= (size$a ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 Nat_a_prod_list$ ))(= (size$b ?v1 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_list$ ))(= (size$ ?v1 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 Nat_nat_a_prod_prod_list$ )(?v1 Nat_nat_a_prod_prod_list$ ))(=> (not (= (size$a ?v0 )(size$a ?v1 )))(not (= ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ )(?v1 Nat_a_prod_list$ ))(=> (not (= (size$b ?v0 )(size$b ?v1 )))(not (= ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(not (= ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (minus$ (minus$ ?v0 ?v1 )?v2 )(minus$ (minus$ ?v0 ?v2 )?v1 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_a_prod_prod_stream$ ))(= (size$a (stake$b ?v0 ?v1 ))?v0 )):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_stream$ ))(= (size$b (stake$ ?v0 ?v1 ))?v0 )):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (size$ (stake$a ?v0 ?v1 ))?v0 )):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_a_prod_prod_list$ )(?v2 Nat_nat_a_prod_prod_list$ ))(= (drop$a ?v0 (append$ ?v1 ?v2 ))(append$ (drop$a ?v0 ?v1 )(drop$a (minus$ ?v0 (size$a ?v1 ))?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_list$ )(?v2 Nat_a_prod_list$ ))(= (drop$b ?v0 (append$a ?v1 ?v2 ))(append$a (drop$b ?v0 ?v1 )(drop$b (minus$ ?v0 (size$b ?v1 ))?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ )(?v2 A_list$ ))(= (drop$ ?v0 (append$b ?v1 ?v2 ))(append$b (drop$ ?v0 ?v1 )(drop$ (minus$ ?v0 (size$ ?v1 ))?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_a_prod$ ))(= (drop$b ?v0 (replicate$ ?v1 ?v2 ))(replicate$ (minus$ ?v1 ?v0 )?v2 ))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A$ ))(= (drop$ ?v0 (replicate$a ?v1 ?v2 ))(replicate$a (minus$ ?v1 ?v0 )?v2 ))):named a27 ))
(assert (! (forall ((?v0 Nat_nat_a_prod_prod_list$ ))(= (size$a (rotate1$ ?v0 ))(size$a ?v0 ))):named a28 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ ))(= (size$b (rotate1$a ?v0 ))(size$b ?v0 ))):named a29 ))
(assert (! (forall ((?v0 A_list$ ))(= (size$ (rotate1$b ?v0 ))(size$ ?v0 ))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_a_prod_prod_list$ ))(= (size$c (enumerate$ ?v0 ?v1 ))(size$a ?v1 ))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_list$ ))(= (size$a (enumerate$a ?v0 ?v1 ))(size$b ?v1 ))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (size$b (enumerate$b ?v0 ?v1 ))(size$ ?v1 ))):named a33 ))
(check-sat )
;(get-unsat-core )
