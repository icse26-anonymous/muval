;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun s$ ()A_stream$ )
(declare-fun u$ ()A_list$ )
(declare-fun v$ ()A_list$ )
(declare-fun cycle$ (A_list$ )A_stream$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun append$ (A_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$ (A_list_a_list_fun$ A_list$ )A_list$ )
(assert (! (not (= (cycle$ (fun_app$ (append$ (tl$ u$ ))(cons$ (hd$ u$ )nil$ )))(shift$ (tl$ v$ )s$ ))):named a0 ))
(assert (! (not (= v$ nil$ )):named a1 ))
(assert (! (= (cycle$ u$ )(shift$ v$ s$ )):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a3 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_stream$ ))(= (shift$ (fun_app$ (append$ ?v0 )?v1 )?v2 )(shift$ ?v0 (shift$ ?v1 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (shift$ nil$ ?v0 )?v0 ):pattern ((shift$ nil$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_list$ ))(! (=> (not (= ?v0 nil$ ))(= (cycle$ ?v0 )(shift$ ?v0 (cycle$ ?v0 )))):pattern ((cycle$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$ ))(= (cons$ (hd$ ?v0 )(tl$ ?v0 ))?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$ ))(= (cons$ (hd$ ?v0 )(tl$ ?v0 ))?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= ?v0 nil$ ))(= (hd$ (fun_app$ (append$ ?v0 )?v1 ))(hd$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= ?v0 nil$ ))(= (tl$ (fun_app$ (append$ ?v0 )?v1 ))(fun_app$ (append$ (tl$ ?v0 ))?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_list$ )(?v3 A$ ))(= (= (fun_app$ (append$ ?v0 )(cons$ ?v1 nil$ ))(fun_app$ (append$ ?v2 )(cons$ ?v3 nil$ )))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )?v1 )(= ?v0 nil$ ))):named a12 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )?v0 )(= ?v1 nil$ ))):named a13 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= ?v0 (fun_app$ (append$ ?v1 )?v0 ))(= ?v1 nil$ ))):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= ?v0 (fun_app$ (append$ ?v0 )?v1 ))(= ?v1 nil$ ))):named a15 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= nil$ (fun_app$ (append$ ?v0 )?v1 ))(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a16 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )nil$ )(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a17 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$ (append$ ?v0 )nil$ )?v0 ):pattern ((append$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a19 ))
(check-sat )
;(get-unsat-core )
