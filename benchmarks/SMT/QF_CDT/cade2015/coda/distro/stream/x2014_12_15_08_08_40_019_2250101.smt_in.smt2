;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()A_stream$ )
(declare-fun nth$ (A_list$ Nat$ )A$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(assert (! (not (= (nth$ (stake$ n$ s$ )m$ )(snth$ s$ m$ ))):named a0 ))
(assert (! (fun_app$ (less$ m$ )n$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (less$ ?v1 )?v0 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_nat_bool_fun_fun$ ))(=> (and (=> (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (fun_app$a ?v2 ?v1 )?v0 ))(and (=> (= ?v0 ?v1 )(fun_app$ (fun_app$a ?v2 ?v1 )?v0 ))(=> (fun_app$ (less$ ?v1 )?v0 )(fun_app$ (fun_app$a ?v2 ?v1 )?v0 ))))(fun_app$ (fun_app$a ?v2 ?v1 )?v0 ))):named a3 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (not (fun_app$ ?v0 ?v2 ))(exists ((?v3 Nat$ ))(and (fun_app$ (less$ ?v3 )?v2 )(not (fun_app$ ?v0 ?v3 ))))))(fun_app$ ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )?v1 )(not (= ?v1 ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$ (less$ ?v0 )?v0 )false )):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (not (= ?v0 ?v1 ))(and (=> (fun_app$ (less$ ?v0 )?v1 )false )(=> (fun_app$ (less$ ?v1 )?v0 )false )))false )):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$ (less$ ?v0 )?v0 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$ (less$ ?v0 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$ (less$ ?v0 )?v0 ))):named a12 ))
(check-sat )
;(get-unsat-core )
