;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort Nat_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun f$ ()A_a_fun$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun compow$ ()Nat_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun funpow$ ()Nat_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun smember$ (A$ A_stream$ )Bool )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$c (Nat_a_a_fun_a_a_fun_fun_fun$ Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun siterate$ (A_a_fun$ A$ )A_stream$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(exists ((?v1 Nat$ ))(and (= ?v0 (fun_app$a (fun_app$b (fun_app$c compow$ ?v1 )f$ )x$ ))true ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (sset$ (siterate$ f$ x$ ))(collect$ uu$ ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (sdrop$ ?v0 (siterate$ ?v1 ?v2 ))(siterate$ ?v1 (fun_app$a (fun_app$b (fun_app$c compow$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (smember$ ?v0 ?v1 )(member$ ?v0 (sset$ ?v1 ))):pattern ((smember$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 Nat$ ))(= (snth$ (siterate$ ?v0 ?v1 )?v2 )(fun_app$a (fun_app$b (fun_app$c compow$ ?v2 )?v0 )?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 Nat$ )(?v2 A$ ))(= (fun_app$a ?v0 (fun_app$a (fun_app$b (fun_app$c compow$ ?v1 )?v0 )?v2 ))(fun_app$a (fun_app$b (fun_app$c compow$ ?v1 )?v0 )(fun_app$a ?v0 ?v2 )))):named a5 ))
(assert (! (= funpow$ compow$ ):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (shd$ (siterate$ ?v0 ?v1 ))?v1 )):named a7 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(member$ (snth$ ?v0 ?v1 )(sset$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (stl$ (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$a ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (siterate$ ?v0 ?v1 )(sCons$ ?v1 (siterate$ ?v0 (fun_app$a ?v0 ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 A_stream$ ))(member$ (shd$ ?v0 )(sset$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smember$ ?v0 (sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$ ?v0 ?v2 ))):pattern ((smember$ ?v0 (sCons$ ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$ (sdrop$ ?v0 ?v1 ))(snth$ ?v1 ?v0 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a16 ))
(check-sat )
;(get-unsat-core )
