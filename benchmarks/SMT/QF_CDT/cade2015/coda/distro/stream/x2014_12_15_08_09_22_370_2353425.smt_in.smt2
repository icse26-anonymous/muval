;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_b_prod_b_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-codatatypes ()((A_b_prod_stream$ (sCons$ (shd$ A_b_prod$ )(stl$ A_b_prod_stream$ )))(A_stream$ (sCons$a (shd$a A$ )(stl$a A_stream$ )))(B_stream$ (sCons$b (shd$b B$ )(stl$b B_stream$ )))))
(declare-sort B_a_b_prod_prod$ 0)
(declare-fun fst$a (B_a_b_prod_prod$)B$)
(declare-fun snd$a (B_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$a (B$ A_b_prod$ )B_a_b_prod_prod$)
(declare-codatatypes ()((B_a_b_prod_prod_stream$ (sCons$c (shd$c B_a_b_prod_prod$ )(stl$c B_a_b_prod_prod_stream$ )))))
(declare-sort B_b_prod$ 0)
(declare-fun fst$b (B_b_prod$)B$)
(declare-fun snd$b (B_b_prod$)B$)
(declare-fun pair$b (B$ B$ )B_b_prod$)
(declare-codatatypes ()((B_b_prod_stream$ (sCons$d (shd$d B_b_prod$ )(stl$d B_b_prod_stream$ )))))
(declare-sort B_a_prod$ 0)
(declare-fun fst$c (B_a_prod$)B$)
(declare-fun snd$c (B_a_prod$)A$)
(declare-fun pair$c (B$ A$ )B_a_prod$)
(declare-codatatypes ()((B_a_prod_stream$ (sCons$e (shd$e B_a_prod$ )(stl$e B_a_prod_stream$ )))))
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$d (A_a_b_prod_prod$)A$)
(declare-fun snd$d (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$d (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-codatatypes ()((A_a_b_prod_prod_stream$ (sCons$f (shd$f A_a_b_prod_prod$ )(stl$f A_a_b_prod_prod_stream$ )))))
(declare-sort A_a_prod$ 0)
(declare-fun fst$e (A_a_prod$)A$)
(declare-fun snd$e (A_a_prod$)A$)
(declare-fun pair$e (A$ A$ )A_a_prod$)
(declare-codatatypes ()((A_a_prod_stream$ (sCons$g (shd$g A_a_prod$ )(stl$g A_a_prod_stream$ )))))
(declare-sort B_a_b_prod_prod_list$ 0)
(declare-sort B_b_prod_list$ 0)
(declare-sort B_a_prod_list$ 0)
(declare-sort A_a_b_prod_prod_list$ 0)
(declare-sort A_a_prod_list$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort A_list$ 0)
(declare-sort B_list$ 0)
(declare-sort A_b_prod_b_prod$ 0)
(declare-fun nil$ ()B_a_b_prod_prod_list$)
(declare-fun hd$ (B_a_b_prod_prod_list$)B_a_b_prod_prod$)
(declare-fun tl$ (B_a_b_prod_prod_list$)B_a_b_prod_prod_list$)
(declare-fun cons$ (B_a_b_prod_prod$ B_a_b_prod_prod_list$ )B_a_b_prod_prod_list$)
(declare-fun nil$a ()B_b_prod_list$)
(declare-fun hd$a (B_b_prod_list$)B_b_prod$)
(declare-fun tl$a (B_b_prod_list$)B_b_prod_list$)
(declare-fun cons$a (B_b_prod$ B_b_prod_list$ )B_b_prod_list$)
(declare-fun nil$b ()B_a_prod_list$)
(declare-fun hd$b (B_a_prod_list$)B_a_prod$)
(declare-fun tl$b (B_a_prod_list$)B_a_prod_list$)
(declare-fun cons$b (B_a_prod$ B_a_prod_list$ )B_a_prod_list$)
(declare-fun nil$c ()A_a_b_prod_prod_list$)
(declare-fun hd$c (A_a_b_prod_prod_list$)A_a_b_prod_prod$)
(declare-fun tl$c (A_a_b_prod_prod_list$)A_a_b_prod_prod_list$)
(declare-fun cons$c (A_a_b_prod_prod$ A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$)
(declare-fun nil$d ()A_a_prod_list$)
(declare-fun hd$d (A_a_prod_list$)A_a_prod$)
(declare-fun tl$d (A_a_prod_list$)A_a_prod_list$)
(declare-fun cons$d (A_a_prod$ A_a_prod_list$ )A_a_prod_list$)
(declare-fun nil$e ()A_b_prod_list$)
(declare-fun hd$e (A_b_prod_list$)A_b_prod$)
(declare-fun tl$e (A_b_prod_list$)A_b_prod_list$)
(declare-fun cons$e (A_b_prod$ A_b_prod_list$ )A_b_prod_list$)
(declare-fun nil$f ()A_list$)
(declare-fun hd$f (A_list$)A$)
(declare-fun tl$f (A_list$)A_list$)
(declare-fun cons$f (A$ A_list$ )A_list$)
(declare-fun nil$g ()B_list$)
(declare-fun hd$g (B_list$)B$)
(declare-fun tl$g (B_list$)B_list$)
(declare-fun cons$g (B$ B_list$ )B_list$)
(declare-fun fst$f (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$f (A_b_prod_b_prod$)B$)
(declare-fun pair$f (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-codatatypes ()((A_b_prod_b_prod_stream$ (sCons$h (shd$h A_b_prod_b_prod$ )(stl$h A_b_prod_b_prod_stream$ )))))
(declare-sort A_b_prod_a_prod$ 0)
(declare-fun fst$g (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$g (A_b_prod_a_prod$)A$)
(declare-fun pair$g (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-codatatypes ()((A_b_prod_a_prod_stream$ (sCons$i (shd$i A_b_prod_a_prod$ )(stl$i A_b_prod_a_prod_stream$ )))))
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-fun fst$h (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun snd$h (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$h (A_b_prod$ A_b_prod$ )A_b_prod_a_b_prod_prod$)
(declare-codatatypes ()((A_b_prod_a_b_prod_prod_stream$ (sCons$j (shd$j A_b_prod_a_b_prod_prod$ )(stl$j A_b_prod_a_b_prod_prod_stream$ )))))
(declare-sort B_b_b_prod_prod$ 0)
(declare-fun fst$i (B_b_b_prod_prod$)B$)
(declare-fun snd$i (B_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$i (B$ B_b_prod$ )B_b_b_prod_prod$)
(declare-codatatypes ()((B_b_b_prod_prod_stream$ (sCons$k (shd$k B_b_b_prod_prod$ )(stl$k B_b_b_prod_prod_stream$ )))))
(declare-sort A_b_prod_b_prod_list$ 0)
(declare-sort A_b_prod_a_prod_list$ 0)
(declare-sort A_b_prod_a_b_prod_prod_list$ 0)
(declare-sort B_b_b_prod_prod_list$ 0)
(declare-fun nil$h ()A_b_prod_b_prod_list$)
(declare-fun hd$h (A_b_prod_b_prod_list$)A_b_prod_b_prod$)
(declare-fun tl$h (A_b_prod_b_prod_list$)A_b_prod_b_prod_list$)
(declare-fun cons$h (A_b_prod_b_prod$ A_b_prod_b_prod_list$ )A_b_prod_b_prod_list$)
(declare-fun nil$i ()A_b_prod_a_prod_list$)
(declare-fun hd$i (A_b_prod_a_prod_list$)A_b_prod_a_prod$)
(declare-fun tl$i (A_b_prod_a_prod_list$)A_b_prod_a_prod_list$)
(declare-fun cons$i (A_b_prod_a_prod$ A_b_prod_a_prod_list$ )A_b_prod_a_prod_list$)
(declare-fun nil$j ()A_b_prod_a_b_prod_prod_list$)
(declare-fun hd$j (A_b_prod_a_b_prod_prod_list$)A_b_prod_a_b_prod_prod$)
(declare-fun tl$j (A_b_prod_a_b_prod_prod_list$)A_b_prod_a_b_prod_prod_list$)
(declare-fun cons$j (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_list$)
(declare-fun nil$k ()B_b_b_prod_prod_list$)
(declare-fun hd$k (B_b_b_prod_prod_list$)B_b_b_prod_prod$)
(declare-fun tl$k (B_b_b_prod_prod_list$)B_b_b_prod_prod_list$)
(declare-fun cons$k (B_b_b_prod_prod$ B_b_b_prod_prod_list$ )B_b_b_prod_prod_list$)
(declare-fun n$ ()Nat$ )
(declare-fun s1$ ()A_stream$ )
(declare-fun s2$ ()B_stream$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun zip$ (A_list$ B_list$ )A_b_prod_list$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun smap$ (A_b_prod_a_b_prod_fun$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun snth$ (A_b_prod_stream$ Nat$ )A_b_prod$ )
(declare-fun szip$ (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun zero$ ()Nat$ )
(declare-fun zip$a (B_list$ B_list$ )B_b_prod_list$ )
(declare-fun zip$b (B_list$ A_list$ )B_a_prod_list$ )
(declare-fun zip$c (A_list$ A_list$ )A_a_prod_list$ )
(declare-fun zip$d (B_list$ A_b_prod_list$ )B_a_b_prod_prod_list$ )
(declare-fun zip$e (A_list$ A_b_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun zip$f (A_b_prod_list$ B_list$ )A_b_prod_b_prod_list$ )
(declare-fun zip$g (A_b_prod_list$ A_list$ )A_b_prod_a_prod_list$ )
(declare-fun zip$h (A_b_prod_list$ A_b_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun zip$i (B_list$ B_b_prod_list$ )B_b_b_prod_prod_list$ )
(declare-fun sdrop$ (Nat$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun shift$ (B_a_b_prod_prod_list$ B_a_b_prod_prod_stream$ )B_a_b_prod_prod_stream$ )
(declare-fun smap$a (A_a_b_prod_fun$ A_stream$ )A_b_prod_stream$ )
(declare-fun smap$b (B_a_b_prod_fun$ B_stream$ )A_b_prod_stream$ )
(declare-fun smap$c (A_b_prod_a_fun$ A_b_prod_stream$ )A_stream$ )
(declare-fun smap$d (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$e (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$f (A_b_prod_b_fun$ A_b_prod_stream$ )B_stream$ )
(declare-fun smap$g (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$h (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$i (B_b_prod_b_fun$ B_b_prod_stream$ )B_stream$ )
(declare-fun snth$a (A_stream$ Nat$ )A$ )
(declare-fun snth$b (B_stream$ Nat$ )B$ )
(declare-fun stake$ (Nat$ B_a_b_prod_prod_stream$ )B_a_b_prod_prod_list$ )
(declare-fun szip$a (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun szip$b (B_stream$ A_stream$ )B_a_prod_stream$ )
(declare-fun szip$c (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun szip$d (B_stream$ A_b_prod_stream$ )B_a_b_prod_prod_stream$ )
(declare-fun szip$e (A_stream$ A_b_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun szip$f (A_b_prod_stream$ B_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun szip$g (A_b_prod_stream$ A_stream$ )A_b_prod_a_prod_stream$ )
(declare-fun szip$h (A_b_prod_stream$ A_b_prod_stream$ )A_b_prod_a_b_prod_prod_stream$ )
(declare-fun szip$i (B_stream$ B_b_prod_stream$ )B_b_b_prod_prod_stream$ )
(declare-fun compow$ (Nat$ )A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$ )
(declare-fun sdrop$a (Nat$ A_stream$ )A_stream$ )
(declare-fun sdrop$b (Nat$ B_stream$ )B_stream$ )
(declare-fun sdrop$c (Nat$ B_a_b_prod_prod_stream$ )B_a_b_prod_prod_stream$ )
(declare-fun sdrop$d (Nat$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun sdrop$e (Nat$ B_a_prod_stream$ )B_a_prod_stream$ )
(declare-fun sdrop$f (Nat$ A_a_b_prod_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun sdrop$g (Nat$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun shift$a (B_b_prod_list$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun shift$b (B_a_prod_list$ B_a_prod_stream$ )B_a_prod_stream$ )
(declare-fun shift$c (A_a_b_prod_prod_list$ A_a_b_prod_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun shift$d (A_a_prod_list$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun shift$e (A_b_prod_list$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun shift$f (A_list$ A_stream$ )A_stream$ )
(declare-fun shift$g (B_list$ B_stream$ )B_stream$ )
(declare-fun stake$a (Nat$ B_b_prod_stream$ )B_b_prod_list$ )
(declare-fun stake$b (Nat$ B_a_prod_stream$ )B_a_prod_list$ )
(declare-fun stake$c (Nat$ A_a_b_prod_prod_stream$ )A_a_b_prod_prod_list$ )
(declare-fun stake$d (Nat$ A_a_prod_stream$ )A_a_prod_list$ )
(declare-fun stake$e (Nat$ A_b_prod_stream$ )A_b_prod_list$ )
(declare-fun stake$f (Nat$ A_stream$ )A_list$ )
(declare-fun stake$g (Nat$ B_stream$ )B_list$ )
(declare-fun stake$h (Nat$ A_b_prod_b_prod_stream$ )A_b_prod_b_prod_list$ )
(declare-fun stake$i (Nat$ A_b_prod_a_prod_stream$ )A_b_prod_a_prod_list$ )
(declare-fun stake$j (Nat$ A_b_prod_a_b_prod_prod_stream$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun stake$k (Nat$ B_b_b_prod_prod_stream$ )B_b_b_prod_prod_list$ )
(declare-fun compow$a (Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun compow$b (Nat$ )B_b_fun_b_b_fun_fun$ )
(declare-fun fun_app$ (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$a (A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$ A_b_prod_a_b_prod_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$d (B_b_fun$ B$ )B$ )
(declare-fun fun_app$e (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$f (A_b_prod_b_fun$ A_b_prod$ )B$ )
(declare-fun fun_app$g (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$h (B_a_b_prod_fun$ B$ )A_b_prod$ )
(declare-fun fun_app$i (B_a_fun$ B$ )A$ )
(declare-fun fun_app$j (A_a_b_prod_fun$ A$ )A_b_prod$ )
(declare-fun fun_app$k (A_b_fun$ A$ )B$ )
(declare-fun siterate$ (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_stream$ )
(declare-fun siterate$a (A_a_fun$ A$ )A_stream$ )
(declare-fun siterate$b (B_b_fun$ B$ )B_stream$ )
(assert (! (not (= (sdrop$ n$ (szip$ s1$ s2$ ))(szip$ (sdrop$a n$ s1$ )(sdrop$b n$ s2$ )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_b_prod_fun$ )(?v2 A_b_prod_stream$ ))(= (sdrop$ ?v0 (smap$ ?v1 ?v2 ))(smap$ ?v1 (sdrop$ ?v0 ?v2 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_b_prod_fun$ )(?v2 A_stream$ ))(= (sdrop$ ?v0 (smap$a ?v1 ?v2 ))(smap$a ?v1 (sdrop$a ?v0 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_b_prod_fun$ )(?v2 B_stream$ ))(= (sdrop$ ?v0 (smap$b ?v1 ?v2 ))(smap$b ?v1 (sdrop$b ?v0 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_stream$ ))(= (sdrop$a ?v0 (smap$c ?v1 ?v2 ))(smap$c ?v1 (sdrop$ ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (sdrop$a ?v0 (smap$d ?v1 ?v2 ))(smap$d ?v1 (sdrop$a ?v0 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_stream$ ))(= (sdrop$a ?v0 (smap$e ?v1 ?v2 ))(smap$e ?v1 (sdrop$b ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_b_fun$ )(?v2 A_b_prod_stream$ ))(= (sdrop$b ?v0 (smap$f ?v1 ?v2 ))(smap$f ?v1 (sdrop$ ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_stream$ ))(= (sdrop$b ?v0 (smap$g ?v1 ?v2 ))(smap$g ?v1 (sdrop$a ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (sdrop$b ?v0 (smap$h ?v1 ?v2 ))(smap$h ?v1 (sdrop$b ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_b_prod_stream$ ))(= (sdrop$ ?v0 (sdrop$ ?v1 ?v2 ))(sdrop$ (plus$ ?v1 ?v0 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_stream$ ))(= (sdrop$a ?v0 (sdrop$a ?v1 ?v2 ))(sdrop$a (plus$ ?v1 ?v0 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 B_stream$ ))(= (sdrop$b ?v0 (sdrop$b ?v1 ?v2 ))(sdrop$b (plus$ ?v1 ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(! (= (sdrop$ zero$ ?v0 )?v0 ):pattern ((sdrop$ zero$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (sdrop$a zero$ ?v0 )?v0 ):pattern ((sdrop$a zero$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 B_stream$ ))(! (= (sdrop$b zero$ ?v0 )?v0 ):pattern ((sdrop$b zero$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_b_prod_prod_stream$ ))(= (sdrop$c ?v0 (stl$c ?v1 ))(stl$c (sdrop$c ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_stream$ ))(= (sdrop$d ?v0 (stl$d ?v1 ))(stl$d (sdrop$d ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_stream$ ))(= (sdrop$e ?v0 (stl$e ?v1 ))(stl$e (sdrop$e ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_b_prod_prod_stream$ ))(= (sdrop$f ?v0 (stl$f ?v1 ))(stl$f (sdrop$f ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ ))(= (sdrop$g ?v0 (stl$g ?v1 ))(stl$g (sdrop$g ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (sdrop$a ?v0 (stl$a ?v1 ))(stl$a (sdrop$a ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (sdrop$b ?v0 (stl$b ?v1 ))(stl$b (sdrop$b ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_b_prod_fun$ )(?v2 A_b_prod$ ))(= (sdrop$ ?v0 (siterate$ ?v1 ?v2 ))(siterate$ ?v1 (fun_app$ (fun_app$a (compow$ ?v0 )?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (sdrop$a ?v0 (siterate$a ?v1 ?v2 ))(siterate$a ?v1 (fun_app$b (fun_app$c (compow$a ?v0 )?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (sdrop$b ?v0 (siterate$b ?v1 ?v2 ))(siterate$b ?v1 (fun_app$d (fun_app$e (compow$b ?v0 )?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_b_prod_prod_stream$ ))(= (shift$ (stake$ ?v0 ?v1 )(sdrop$c ?v0 ?v1 ))?v1 )):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_stream$ ))(= (shift$a (stake$a ?v0 ?v1 )(sdrop$d ?v0 ?v1 ))?v1 )):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_stream$ ))(= (shift$b (stake$b ?v0 ?v1 )(sdrop$e ?v0 ?v1 ))?v1 )):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_b_prod_prod_stream$ ))(= (shift$c (stake$c ?v0 ?v1 )(sdrop$f ?v0 ?v1 ))?v1 )):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ ))(= (shift$d (stake$d ?v0 ?v1 )(sdrop$g ?v0 ?v1 ))?v1 )):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ ))(= (shift$e (stake$e ?v0 ?v1 )(sdrop$ ?v0 ?v1 ))?v1 )):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shift$f (stake$f ?v0 ?v1 )(sdrop$a ?v0 ?v1 ))?v1 )):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (shift$g (stake$g ?v0 ?v1 )(sdrop$b ?v0 ?v1 ))?v1 )):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ ))(= (shd$ (sdrop$ ?v0 ?v1 ))(snth$ ?v1 ?v0 ))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$a (sdrop$a ?v0 ?v1 ))(snth$a ?v1 ?v0 ))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (shd$b (sdrop$b ?v0 ?v1 ))(snth$b ?v1 ?v0 ))):named a37 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_stream$ ))(= (stl$ (szip$ ?v0 ?v1 ))(szip$ (stl$a ?v0 )(stl$b ?v1 )))):named a38 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (stl$d (szip$a ?v0 ?v1 ))(szip$a (stl$b ?v0 )(stl$b ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_stream$ ))(= (stl$e (szip$b ?v0 ?v1 ))(szip$b (stl$b ?v0 )(stl$a ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$g (szip$c ?v0 ?v1 ))(szip$c (stl$a ?v0 )(stl$a ?v1 )))):named a41 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_b_prod_stream$ ))(= (stl$c (szip$d ?v0 ?v1 ))(szip$d (stl$b ?v0 )(stl$ ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_b_prod_stream$ ))(= (stl$f (szip$e ?v0 ?v1 ))(szip$e (stl$a ?v0 )(stl$ ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 B_stream$ ))(= (stl$h (szip$f ?v0 ?v1 ))(szip$f (stl$ ?v0 )(stl$b ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_stream$ ))(= (stl$i (szip$g ?v0 ?v1 ))(szip$g (stl$ ?v0 )(stl$a ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_stream$ ))(= (stl$j (szip$h ?v0 ?v1 ))(szip$h (stl$ ?v0 )(stl$ ?v1 )))):named a46 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_b_prod_stream$ ))(= (stl$k (szip$i ?v0 ?v1 ))(szip$i (stl$b ?v0 )(stl$d ?v1 )))):named a47 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_b_prod_prod_stream$ ))(= (stl$c (sdrop$c ?v0 ?v1 ))(sdrop$c (suc$ ?v0 )?v1 ))):named a48 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_stream$ ))(= (stl$d (sdrop$d ?v0 ?v1 ))(sdrop$d (suc$ ?v0 )?v1 ))):named a49 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_stream$ ))(= (stl$e (sdrop$e ?v0 ?v1 ))(sdrop$e (suc$ ?v0 )?v1 ))):named a50 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_b_prod_prod_stream$ ))(= (stl$f (sdrop$f ?v0 ?v1 ))(sdrop$f (suc$ ?v0 )?v1 ))):named a51 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ ))(= (stl$g (sdrop$g ?v0 ?v1 ))(sdrop$g (suc$ ?v0 )?v1 ))):named a52 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ ))(= (stl$ (sdrop$ ?v0 ?v1 ))(sdrop$ (suc$ ?v0 )?v1 ))):named a53 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (stl$a (sdrop$a ?v0 ?v1 ))(sdrop$a (suc$ ?v0 )?v1 ))):named a54 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (stl$b (sdrop$b ?v0 ?v1 ))(sdrop$b (suc$ ?v0 )?v1 ))):named a55 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (snth$ (sdrop$ ?v0 ?v1 )?v2 )(snth$ ?v1 (plus$ ?v0 ?v2 )))):named a56 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$a (sdrop$a ?v0 ?v1 )?v2 )(snth$a ?v1 (plus$ ?v0 ?v2 )))):named a57 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$b (sdrop$b ?v0 ?v1 )?v2 )(snth$b ?v1 (plus$ ?v0 ?v2 )))):named a58 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_b_prod_prod_stream$ ))(! (= (sdrop$c (suc$ ?v0 )?v1 )(sdrop$c ?v0 (stl$c ?v1 ))):pattern ((sdrop$c (suc$ ?v0 )?v1 )))):named a59 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_stream$ ))(! (= (sdrop$d (suc$ ?v0 )?v1 )(sdrop$d ?v0 (stl$d ?v1 ))):pattern ((sdrop$d (suc$ ?v0 )?v1 )))):named a60 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_stream$ ))(! (= (sdrop$e (suc$ ?v0 )?v1 )(sdrop$e ?v0 (stl$e ?v1 ))):pattern ((sdrop$e (suc$ ?v0 )?v1 )))):named a61 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_b_prod_prod_stream$ ))(! (= (sdrop$f (suc$ ?v0 )?v1 )(sdrop$f ?v0 (stl$f ?v1 ))):pattern ((sdrop$f (suc$ ?v0 )?v1 )))):named a62 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ ))(! (= (sdrop$g (suc$ ?v0 )?v1 )(sdrop$g ?v0 (stl$g ?v1 ))):pattern ((sdrop$g (suc$ ?v0 )?v1 )))):named a63 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ ))(! (= (sdrop$ (suc$ ?v0 )?v1 )(sdrop$ ?v0 (stl$ ?v1 ))):pattern ((sdrop$ (suc$ ?v0 )?v1 )))):named a64 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(! (= (sdrop$a (suc$ ?v0 )?v1 )(sdrop$a ?v0 (stl$a ?v1 ))):pattern ((sdrop$a (suc$ ?v0 )?v1 )))):named a65 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(! (= (sdrop$b (suc$ ?v0 )?v1 )(sdrop$b ?v0 (stl$b ?v1 ))):pattern ((sdrop$b (suc$ ?v0 )?v1 )))):named a66 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (stake$e ?v0 (szip$ ?v1 ?v2 ))(zip$ (stake$f ?v0 ?v1 )(stake$g ?v0 ?v2 )))):named a67 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (stake$a ?v0 (szip$a ?v1 ?v2 ))(zip$a (stake$g ?v0 ?v1 )(stake$g ?v0 ?v2 )))):named a68 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (stake$b ?v0 (szip$b ?v1 ?v2 ))(zip$b (stake$g ?v0 ?v1 )(stake$f ?v0 ?v2 )))):named a69 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stake$d ?v0 (szip$c ?v1 ?v2 ))(zip$c (stake$f ?v0 ?v1 )(stake$f ?v0 ?v2 )))):named a70 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 A_b_prod_stream$ ))(= (stake$ ?v0 (szip$d ?v1 ?v2 ))(zip$d (stake$g ?v0 ?v1 )(stake$e ?v0 ?v2 )))):named a71 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_b_prod_stream$ ))(= (stake$c ?v0 (szip$e ?v1 ?v2 ))(zip$e (stake$f ?v0 ?v1 )(stake$e ?v0 ?v2 )))):named a72 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ )(?v2 B_stream$ ))(= (stake$h ?v0 (szip$f ?v1 ?v2 ))(zip$f (stake$e ?v0 ?v1 )(stake$g ?v0 ?v2 )))):named a73 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ )(?v2 A_stream$ ))(= (stake$i ?v0 (szip$g ?v1 ?v2 ))(zip$g (stake$e ?v0 ?v1 )(stake$f ?v0 ?v2 )))):named a74 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(= (stake$j ?v0 (szip$h ?v1 ?v2 ))(zip$h (stake$e ?v0 ?v1 )(stake$e ?v0 ?v2 )))):named a75 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 B_b_prod_stream$ ))(= (stake$k ?v0 (szip$i ?v1 ?v2 ))(zip$i (stake$g ?v0 ?v1 )(stake$a ?v0 ?v2 )))):named a76 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (= (shift$g ?v0 ?v1 )(shift$g ?v0 ?v2 ))(= ?v1 ?v2 ))):named a77 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$f ?v0 ?v1 )(shift$f ?v0 ?v2 ))(= ?v1 ?v2 ))):named a78 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(= (= (shift$e ?v0 ?v1 )(shift$e ?v0 ?v2 ))(= ?v1 ?v2 ))):named a79 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (stl$b (smap$h ?v0 ?v1 ))(smap$h ?v0 (stl$b ?v1 )))):named a80 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (stl$a (smap$e ?v0 ?v1 ))(smap$e ?v0 (stl$b ?v1 )))):named a81 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (stl$b (smap$g ?v0 ?v1 ))(smap$g ?v0 (stl$a ?v1 )))):named a82 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$a (smap$d ?v0 ?v1 ))(smap$d ?v0 (stl$a ?v1 )))):named a83 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_stream$ ))(= (stl$b (smap$f ?v0 ?v1 ))(smap$f ?v0 (stl$ ?v1 )))):named a84 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ ))(= (stl$a (smap$c ?v0 ?v1 ))(smap$c ?v0 (stl$ ?v1 )))):named a85 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ ))(= (stl$ (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$b ?v1 )))):named a86 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$a ?v1 )))):named a87 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$ ?v1 )))):named a88 ))
(assert (! (forall ((?v0 B_b_prod_b_fun$ )(?v1 B_b_prod_stream$ ))(= (stl$b (smap$i ?v0 ?v1 ))(smap$i ?v0 (stl$d ?v1 )))):named a89 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_stream$ ))(= (shd$b (smap$f ?v0 ?v1 ))(fun_app$f ?v0 (shd$ ?v1 )))):named a90 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ ))(= (shd$a (smap$c ?v0 ?v1 ))(fun_app$g ?v0 (shd$ ?v1 )))):named a91 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ ))(= (shd$ (smap$b ?v0 ?v1 ))(fun_app$h ?v0 (shd$b ?v1 )))):named a92 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$ ?v0 (shd$ ?v1 )))):named a93 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (shd$b (smap$h ?v0 ?v1 ))(fun_app$d ?v0 (shd$b ?v1 )))):named a94 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (shd$a (smap$e ?v0 ?v1 ))(fun_app$i ?v0 (shd$b ?v1 )))):named a95 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$a ?v0 ?v1 ))(fun_app$j ?v0 (shd$a ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (shd$b (smap$g ?v0 ?v1 ))(fun_app$k ?v0 (shd$a ?v1 )))):named a97 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$a (smap$d ?v0 ?v1 ))(fun_app$b ?v0 (shd$a ?v1 )))):named a98 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (snth$b (smap$f ?v0 ?v1 )?v2 )(fun_app$f ?v0 (snth$ ?v1 ?v2 )))):named a99 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (snth$a (smap$c ?v0 ?v1 )?v2 )(fun_app$g ?v0 (snth$ ?v1 ?v2 )))):named a100 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$ (smap$b ?v0 ?v1 )?v2 )(fun_app$h ?v0 (snth$b ?v1 ?v2 )))):named a101 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (snth$ (smap$ ?v0 ?v1 )?v2 )(fun_app$ ?v0 (snth$ ?v1 ?v2 )))):named a102 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$b (smap$h ?v0 ?v1 )?v2 )(fun_app$d ?v0 (snth$b ?v1 ?v2 )))):named a103 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$a (smap$e ?v0 ?v1 )?v2 )(fun_app$i ?v0 (snth$b ?v1 ?v2 )))):named a104 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$ (smap$a ?v0 ?v1 )?v2 )(fun_app$j ?v0 (snth$a ?v1 ?v2 )))):named a105 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$b (smap$g ?v0 ?v1 )?v2 )(fun_app$k ?v0 (snth$a ?v1 ?v2 )))):named a106 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$a (smap$d ?v0 ?v1 )?v2 )(fun_app$b ?v0 (snth$a ?v1 ?v2 )))):named a107 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 Nat$ ))(= (snth$b (siterate$b ?v0 ?v1 )?v2 )(fun_app$d (fun_app$e (compow$b ?v2 )?v0 )?v1 ))):named a108 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 Nat$ ))(= (snth$a (siterate$a ?v0 ?v1 )?v2 )(fun_app$b (fun_app$c (compow$a ?v2 )?v0 )?v1 ))):named a109 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ )(?v2 Nat$ ))(= (snth$ (siterate$ ?v0 ?v1 )?v2 )(fun_app$ (fun_app$a (compow$ ?v2 )?v0 )?v1 ))):named a110 ))
(check-sat )
;(get-unsat-core )
