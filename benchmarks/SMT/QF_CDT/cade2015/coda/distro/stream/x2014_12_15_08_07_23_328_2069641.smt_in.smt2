;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun u$ ()A_list$ )
(declare-fun bind$ (A_list$ A_a_list_fun$ )A_list$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun take$ (Nat$ A_list$ )A_list$ )
(declare-fun zero$ ()Nat$ )
(declare-fun cycle$ (A_list$ )A_stream$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun fun_app$ (A_list_bool_fun$ A_list$ )Bool )
(declare-fun list_ex1$ (A_bool_fun$ )A_list_bool_fun$ )
(assert (! (not (= (stake$ (size$ u$ )(cycle$ u$ ))u$ )):named a0 ))
(assert (! (not (= u$ nil$ )):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (size$ (stake$ ?v0 ?v1 ))?v0 )):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_list$ ))(= (size$ ?v1 )?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(not (= ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (= (stake$ ?v0 ?v1 )nil$ )(= ?v0 zero$ ))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(! (=> (not (= ?v0 nil$ ))(= (cycle$ ?v0 )(shift$ ?v0 (cycle$ ?v0 )))):pattern ((cycle$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (stake$ zero$ ?v0 )nil$ ):pattern ((stake$ zero$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat$ ))(=> (and (not (= ?v0 nil$ ))(less$ ?v1 (size$ ?v0 )))(= (stake$ ?v1 (cycle$ ?v0 ))(take$ ?v1 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_a_list_fun$ ))(! (= (bind$ nil$ ?v0 )nil$ ):pattern ((bind$ nil$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (size$ ?v0 )zero$ )(= ?v0 nil$ ))):named a12 ))
(assert (! (= (size$ nil$ )zero$ ):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$ (list_ex1$ ?v0 )nil$ )false ):pattern ((list_ex1$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (= (take$ ?v0 ?v1 )nil$ )(or (= ?v0 zero$ )(= ?v1 nil$ )))):named a16 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (take$ zero$ ?v0 )nil$ ):pattern ((take$ zero$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_list$ ))(= (less$ zero$ (size$ ?v0 ))(not (= ?v0 nil$ )))):named a18 ))
(check-sat )
;(get-unsat-core )
