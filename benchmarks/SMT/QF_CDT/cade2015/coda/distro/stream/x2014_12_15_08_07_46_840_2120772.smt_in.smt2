;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun x$ ()A$ )
(declare-fun id$ ()A_a_fun$ )
(declare-fun bot$ ()A_set$ )
(declare-fun bot$a ()A_bool_fun$ )
(declare-fun bot$b ()Bool )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun siterate$ (A_a_fun$ A$ )A_stream$ )
(assert (! (not (= (sset$ (siterate$ id$ x$ ))(insert$ x$ bot$ ))):named a0 ))
(assert (! (forall ((?v0 A$ ))(member$ ?v0 (insert$ ?v0 bot$ ))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ id$ ?v0 )?v0 ):pattern ((fun_app$ id$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 A$ ))(not (fun_app$a ?v0 ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 A_set$ ))(= (forall ((?v1 A$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$ ))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 A$ ))(not (fun_app$a ?v0 ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 A$ ))(= (member$ ?v0 bot$ )false )):named a9 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a bot$a ?v0 )bot$b ):pattern ((fun_app$a bot$a ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (insert$ ?v0 (insert$ ?v1 bot$ ))(insert$ ?v2 (insert$ ?v3 bot$ )))(or (and (= ?v0 ?v2 )(= ?v1 ?v3 ))(and (= ?v0 ?v3 )(= ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (insert$ ?v1 bot$ ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (= bot$ (collect$ bot$a )):named a13 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a bot$a ?v0 )bot$b ):pattern ((fun_app$a bot$a ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 bot$ )false )):named a15 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(=> (= ?v0 bot$ )(not (member$ ?v1 ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_set$ ))(=> (forall ((?v1 A$ ))(=> (member$ ?v1 ?v0 )false ))(= ?v0 bot$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
