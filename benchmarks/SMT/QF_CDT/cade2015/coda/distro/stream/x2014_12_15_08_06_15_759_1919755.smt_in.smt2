;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_a_stream_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_stream_stream_bool_fun$ 0 )
(declare-sort A_stream_stream_stream_set$ 0 )
(declare-sort A_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(A_stream_stream$ (sCons$a (shd$a A_stream$ )(stl$a A_stream_stream$ )))(A_stream_stream_stream$ (sCons$b (shd$b A_stream_stream$ )(stl$b A_stream_stream_stream$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()A_stream$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun smap$ (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun sset$ (A_stream_stream_stream$ )A_stream_stream_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun sdrop$ (Nat$ )A_stream_a_stream_fun$ )
(declare-fun smap$a (A_stream_a_fun$ A_stream_stream$ )A_stream$ )
(declare-fun smap$b (A_a_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun smap$c (A_stream_a_stream_fun$ A_stream_stream$ )A_stream_stream$ )
(declare-fun sset$a (A_stream_stream$ )A_stream_set$ )
(declare-fun sset$b (A_stream$ )A_set$ )
(declare-fun member$ (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun sdrop$a (Nat$ A_stream_stream$ )A_stream_stream$ )
(declare-fun fun_app$ (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun member$a (A_stream$ A_stream_set$ )Bool )
(declare-fun member$b (A$ A_set$ )Bool )
(declare-fun member$c (A_stream_stream_stream$ A_stream_stream_stream_set$ )Bool )
(declare-fun streams$ (A_stream_set$ )A_stream_stream_set$ )
(declare-fun fun_app$a (A_stream_stream_bool_fun$ A_stream_stream$ )Bool )
(declare-fun fun_app$b (A_stream_stream_a_stream_stream_bool_fun_fun$ A_stream_stream$ )A_stream_stream_bool_fun$ )
(declare-fun fun_app$c (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$d (A_stream_a_stream_bool_fun_fun$ A_stream$ )A_stream_bool_fun$ )
(declare-fun fun_app$e (A_a_fun$ A$ )A$ )
(declare-fun fun_app$f (A_a_stream_fun$ A$ )A_stream$ )
(declare-fun fun_app$g (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun streams$a (A_set$ )A_stream_set$ )
(declare-fun streams$b (A_stream_stream_set$ )A_stream_stream_stream_set$ )
(assert (! (not (= (fun_app$ (sdrop$ n$ )(stl$ s$ ))(stl$ (fun_app$ (sdrop$ n$ )s$ )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_stream$ ))(= (stl$a (sdrop$a ?v0 ?v1 ))(sdrop$a (suc$ ?v0 )?v1 ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (stl$ (fun_app$ (sdrop$ ?v0 )?v1 ))(fun_app$ (sdrop$ (suc$ ?v0 ))?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_stream$ ))(! (= (sdrop$a (suc$ ?v0 )?v1 )(sdrop$a ?v0 (stl$a ?v1 ))):pattern ((sdrop$a (suc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(! (= (fun_app$ (sdrop$ (suc$ ?v0 ))?v1 )(fun_app$ (sdrop$ ?v0 )(stl$ ?v1 ))):pattern ((fun_app$ (sdrop$ (suc$ ?v0 ))?v1 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (fun_app$ (sdrop$ ?v0 )(fun_app$ (smap$ ?v1 )?v2 ))(fun_app$ (smap$ ?v1 )(fun_app$ (sdrop$ ?v0 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ ))(= (stl$ (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$a ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ ))(= (stl$a (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ ))(= (stl$a (smap$c ?v0 ?v1 ))(smap$c ?v0 (stl$a ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (fun_app$ (smap$ ?v0 )?v1 ))(fun_app$ (smap$ ?v0 )(stl$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ (sdrop$ zero$ )?v0 )?v0 ):pattern ((fun_app$ (sdrop$ zero$ )?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (member$ ?v0 (streams$ ?v1 ))(member$ (stl$a ?v0 )(streams$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (member$a ?v0 (streams$a ?v1 ))(member$a (stl$ ?v0 )(streams$a ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream_stream$ ))(=> (member$ ?v0 (sset$ (stl$b ?v1 )))(member$ ?v0 (sset$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_stream$ ))(=> (member$a ?v0 (sset$a (stl$a ?v1 )))(member$a ?v0 (sset$a ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(=> (member$b ?v0 (sset$b (stl$ ?v1 )))(member$b ?v0 (sset$b ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ ))(=> (and (= (shd$a ?v0 )(shd$a ?v1 ))(= (stl$a ?v0 )(stl$a ?v1 )))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 A_stream_stream$ )(?v4 A_stream_stream$ ))(=> (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(or (fun_app$a (fun_app$b ?v0 (stl$a ?v3 ))(stl$a ?v4 ))(= (stl$a ?v3 )(stl$a ?v4 )))))))(= ?v1 ?v2 ))):named a18 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$c (fun_app$d ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 A_stream_stream$ )(?v4 A_stream_stream$ ))(=> (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(fun_app$a (fun_app$b ?v0 (stl$a ?v3 ))(stl$a ?v4 ))))))(= ?v1 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$c (fun_app$d ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_stream$ ))(! (= (stl$a (sCons$a ?v0 ?v1 ))?v1 ):pattern ((sCons$a ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (stl$ (sCons$ ?v0 ?v1 ))?v1 ):pattern ((sCons$ ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream$ )(?v3 A_stream_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (fun_app$ (smap$ ?v0 )?v1 ))(fun_app$e ?v0 (shd$ ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= (sCons$a (shd$a ?v0 )(stl$a ?v0 ))?v0 )):named a27 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a28 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream_stream$ )(?v2 A_stream_stream_set$ ))(= (member$c (sCons$b ?v0 ?v1 )(streams$b ?v2 ))(and (member$ ?v0 ?v2 )(member$c ?v1 (streams$b ?v2 ))))):named a29 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_set$ ))(= (member$ (sCons$a ?v0 ?v1 )(streams$ ?v2 ))(and (member$a ?v0 ?v2 )(member$ ?v1 (streams$ ?v2 ))))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_set$ ))(= (member$a (sCons$ ?v0 ?v1 )(streams$a ?v2 ))(and (member$b ?v0 ?v2 )(member$a ?v1 (streams$a ?v2 ))))):named a31 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smap$b ?v0 (sCons$ ?v1 ?v2 ))(sCons$a (fun_app$f ?v0 ?v1 )(smap$b ?v0 ?v2 ))):pattern ((smap$b ?v0 (sCons$ ?v1 ?v2 ))))):named a32 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ ))(! (= (smap$a ?v0 (sCons$a ?v1 ?v2 ))(sCons$ (fun_app$g ?v0 ?v1 )(smap$a ?v0 ?v2 ))):pattern ((smap$a ?v0 (sCons$a ?v1 ?v2 ))))):named a33 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ ))(! (= (smap$c ?v0 (sCons$a ?v1 ?v2 ))(sCons$a (fun_app$ ?v0 ?v1 )(smap$c ?v0 ?v2 ))):pattern ((smap$c ?v0 (sCons$a ?v1 ?v2 ))))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$ (smap$ ?v0 )(sCons$ ?v1 ?v2 ))(sCons$ (fun_app$e ?v0 ?v1 )(fun_app$ (smap$ ?v0 )?v2 ))):pattern ((fun_app$ (smap$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a35 ))
(check-sat )
;(get-unsat-core )
