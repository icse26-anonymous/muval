;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_list_nat_fun$ 0 )
(declare-sort Nat_a_prod_list_nat_fun$ 0 )
(declare-sort Nat_nat_a_prod_prod_list_nat_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-sort Nat_a_prod$ 0)
(declare-sort Nat_nat_a_prod_prod$ 0)
(declare-sort Nat_nat_a_prod_prod_list$ 0)
(declare-sort Nat_a_prod_list$ 0)
(declare-sort Nat_nat_nat_a_prod_prod_prod$ 0)
(declare-sort Nat_nat_nat_a_prod_prod_prod_list$ 0)
(declare-fun fst$ (Nat_a_prod$)Nat$)
(declare-fun snd$ (Nat_a_prod$)A$)
(declare-fun pair$ (Nat$ A$ )Nat_a_prod$)
(declare-fun fst$a (Nat_nat_a_prod_prod$)Nat$)
(declare-fun snd$a (Nat_nat_a_prod_prod$)Nat_a_prod$)
(declare-fun pair$a (Nat$ Nat_a_prod$ )Nat_nat_a_prod_prod$)
(declare-fun nil$a ()Nat_nat_a_prod_prod_list$)
(declare-fun hd$a (Nat_nat_a_prod_prod_list$)Nat_nat_a_prod_prod$)
(declare-fun tl$a (Nat_nat_a_prod_prod_list$)Nat_nat_a_prod_prod_list$)
(declare-fun cons$a (Nat_nat_a_prod_prod$ Nat_nat_a_prod_prod_list$ )Nat_nat_a_prod_prod_list$)
(declare-fun nil$b ()Nat_a_prod_list$)
(declare-fun hd$b (Nat_a_prod_list$)Nat_a_prod$)
(declare-fun tl$b (Nat_a_prod_list$)Nat_a_prod_list$)
(declare-fun cons$b (Nat_a_prod$ Nat_a_prod_list$ )Nat_a_prod_list$)
(declare-fun fst$b (Nat_nat_nat_a_prod_prod_prod$)Nat$)
(declare-fun snd$b (Nat_nat_nat_a_prod_prod_prod$)Nat_nat_a_prod_prod$)
(declare-fun pair$b (Nat$ Nat_nat_a_prod_prod$ )Nat_nat_nat_a_prod_prod_prod$)
(declare-fun nil$c ()Nat_nat_nat_a_prod_prod_prod_list$)
(declare-fun hd$c (Nat_nat_nat_a_prod_prod_prod_list$)Nat_nat_nat_a_prod_prod_prod$)
(declare-fun tl$c (Nat_nat_nat_a_prod_prod_prod_list$)Nat_nat_nat_a_prod_prod_prod_list$)
(declare-fun cons$c (Nat_nat_nat_a_prod_prod_prod$ Nat_nat_nat_a_prod_prod_prod_list$ )Nat_nat_nat_a_prod_prod_prod_list$)
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()A_stream$ )
(declare-fun size$ ()A_list_nat_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun size$a ()Nat_nat_a_prod_prod_list_nat_fun$ )
(declare-fun size$b ()Nat_a_prod_list_nat_fun$ )
(declare-fun size$c (Nat_nat_nat_a_prod_prod_prod_list$ )Nat$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun rotate$ (Nat$ Nat_nat_a_prod_prod_list$ )Nat_nat_a_prod_prod_list$ )
(declare-fun fun_app$ (A_list_nat_fun$ A_list$ )Nat$ )
(declare-fun remdups$ (Nat_nat_a_prod_prod_list$ )Nat_nat_a_prod_prod_list$ )
(declare-fun rotate$a (Nat$ Nat_a_prod_list$ )Nat_a_prod_list$ )
(declare-fun rotate$b (Nat$ A_list$ )A_list$ )
(declare-fun rotate1$ (Nat_nat_a_prod_prod_list$ )Nat_nat_a_prod_prod_list$ )
(declare-fun fun_app$a (Nat_nat_a_prod_prod_list_nat_fun$ Nat_nat_a_prod_prod_list$ )Nat$ )
(declare-fun fun_app$b (Nat_a_prod_list_nat_fun$ Nat_a_prod_list$ )Nat$ )
(declare-fun remdups$a (Nat_a_prod_list$ )Nat_a_prod_list$ )
(declare-fun remdups$b (A_list$ )A_list$ )
(declare-fun rotate1$a (Nat_a_prod_list$ )Nat_a_prod_list$ )
(declare-fun rotate1$b (A_list$ )A_list$ )
(declare-fun enumerate$ (Nat$ Nat_nat_a_prod_prod_list$ )Nat_nat_nat_a_prod_prod_prod_list$ )
(declare-fun replicate$ (Nat$ Nat_nat_a_prod_prod$ )Nat_nat_a_prod_prod_list$ )
(declare-fun enumerate$a (Nat$ Nat_a_prod_list$ )Nat_nat_a_prod_prod_list$ )
(declare-fun enumerate$b (Nat$ A_list$ )Nat_a_prod_list$ )
(declare-fun is_measure$ (Nat_nat_a_prod_prod_list_nat_fun$ )Bool )
(declare-fun replicate$a (Nat$ Nat_a_prod$ )Nat_a_prod_list$ )
(declare-fun replicate$b (Nat$ A$ )A_list$ )
(declare-fun is_measure$a (Nat_a_prod_list_nat_fun$ )Bool )
(declare-fun is_measure$b (A_list_nat_fun$ )Bool )
(declare-fun list_update$ (Nat_nat_a_prod_prod_list$ Nat$ Nat_nat_a_prod_prod$ )Nat_nat_a_prod_prod_list$ )
(declare-fun list_update$a (Nat_a_prod_list$ Nat$ Nat_a_prod$ )Nat_a_prod_list$ )
(declare-fun list_update$b (A_list$ Nat$ A$ )A_list$ )
(assert (! (not (= (fun_app$ size$ (stake$ n$ s$ ))n$ )):named a0 ))
(assert (! (forall ((?v0 Nat_nat_a_prod_prod_list$ )(?v1 Nat_nat_a_prod_prod_list$ ))(=> (not (= (fun_app$a size$a ?v0 )(fun_app$a size$a ?v1 )))(= (= ?v0 ?v1 )false ))):named a1 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ )(?v1 Nat_a_prod_list$ ))(=> (not (= (fun_app$b size$b ?v0 )(fun_app$b size$b ?v1 )))(= (= ?v0 ?v1 )false ))):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (fun_app$ size$ ?v0 )(fun_app$ size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 Nat_nat_a_prod_prod_list$ ))(= (fun_app$a size$a ?v1 )?v0 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 Nat_a_prod_list$ ))(= (fun_app$b size$b ?v1 )?v0 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_list$ ))(= (fun_app$ size$ ?v1 )?v0 ))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_a_prod_prod_list$ )(?v1 Nat_nat_a_prod_prod_list$ ))(=> (not (= (fun_app$a size$a ?v0 )(fun_app$a size$a ?v1 )))(not (= ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ )(?v1 Nat_a_prod_list$ ))(=> (not (= (fun_app$b size$b ?v0 )(fun_app$b size$b ?v1 )))(not (= ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (fun_app$ size$ ?v0 )(fun_app$ size$ ?v1 )))(not (= ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_a_prod_prod_list$ ))(= (fun_app$a size$a (rotate1$ ?v0 ))(fun_app$a size$a ?v0 ))):named a10 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ ))(= (fun_app$b size$b (rotate1$a ?v0 ))(fun_app$b size$b ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_list$ ))(= (fun_app$ size$ (rotate1$b ?v0 ))(fun_app$ size$ ?v0 ))):named a12 ))
(assert (! (is_measure$ size$a ):named a13 ))
(assert (! (is_measure$a size$b ):named a14 ))
(assert (! (is_measure$b size$ ):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_a_prod_prod_list$ ))(= (size$c (enumerate$ ?v0 ?v1 ))(fun_app$a size$a ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_list$ ))(= (fun_app$a size$a (enumerate$a ?v0 ?v1 ))(fun_app$b size$b ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (fun_app$b size$b (enumerate$b ?v0 ?v1 ))(fun_app$ size$ ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (stake$ zero$ ?v0 )nil$ ):pattern ((stake$ zero$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_a_prod_prod_list$ ))(= (fun_app$a size$a (rotate$ ?v0 ?v1 ))(fun_app$a size$a ?v1 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_list$ ))(= (fun_app$b size$b (rotate$a ?v0 ?v1 ))(fun_app$b size$b ?v1 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (fun_app$ size$ (rotate$b ?v0 ?v1 ))(fun_app$ size$ ?v1 ))):named a22 ))
(assert (! (forall ((?v0 Nat_nat_a_prod_prod_list$ ))(= (= (fun_app$a size$a (remdups$ ?v0 ))(fun_app$a size$a ?v0 ))(= (remdups$ ?v0 )?v0 ))):named a23 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ ))(= (= (fun_app$b size$b (remdups$a ?v0 ))(fun_app$b size$b ?v0 ))(= (remdups$a ?v0 )?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (fun_app$ size$ (remdups$b ?v0 ))(fun_app$ size$ ?v0 ))(= (remdups$b ?v0 )?v0 ))):named a25 ))
(assert (! (forall ((?v0 Nat_nat_a_prod_prod_list$ )(?v1 Nat$ )(?v2 Nat_nat_a_prod_prod$ ))(= (fun_app$a size$a (list_update$ ?v0 ?v1 ?v2 ))(fun_app$a size$a ?v0 ))):named a26 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ )(?v1 Nat$ )(?v2 Nat_a_prod$ ))(= (fun_app$b size$b (list_update$a ?v0 ?v1 ?v2 ))(fun_app$b size$b ?v0 ))):named a27 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat$ )(?v2 A$ ))(= (fun_app$ size$ (list_update$b ?v0 ?v1 ?v2 ))(fun_app$ size$ ?v0 ))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_a_prod_prod$ ))(= (fun_app$a size$a (replicate$ ?v0 ?v1 ))?v0 )):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod$ ))(= (fun_app$b size$b (replicate$a ?v0 ?v1 ))?v0 )):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(= (fun_app$ size$ (replicate$b ?v0 ?v1 ))?v0 )):named a31 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ )(?v1 Nat$ )(?v2 Nat_a_prod$ )(?v3 Nat_a_prod$ ))(= (list_update$a (list_update$a ?v0 ?v1 ?v2 )?v1 ?v3 )(list_update$a ?v0 ?v1 ?v3 ))):named a32 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat$ )(?v2 A$ )(?v3 A$ ))(= (list_update$b (list_update$b ?v0 ?v1 ?v2 )?v1 ?v3 )(list_update$b ?v0 ?v1 ?v3 ))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod$ )(?v2 Nat$ )(?v3 Nat_a_prod$ ))(= (= (replicate$a ?v0 ?v1 )(replicate$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(=> (not (= ?v0 zero$ ))(= ?v1 ?v3 ))))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (replicate$b ?v0 ?v1 )(replicate$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(=> (not (= ?v0 zero$ ))(= ?v1 ?v3 ))))):named a35 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ )(?v1 Nat$ )(?v2 Nat_a_prod$ ))(= (= (list_update$a ?v0 ?v1 ?v2 )nil$b )(= ?v0 nil$b ))):named a36 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat$ )(?v2 A$ ))(= (= (list_update$b ?v0 ?v1 ?v2 )nil$ )(= ?v0 nil$ ))):named a37 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ ))(= (= (remdups$a ?v0 )nil$b )(= ?v0 nil$b ))):named a38 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (remdups$b ?v0 )nil$ )(= ?v0 nil$ ))):named a39 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ ))(= (= nil$b (remdups$a ?v0 ))(= ?v0 nil$b ))):named a40 ))
(assert (! (forall ((?v0 A_list$ ))(= (= nil$ (remdups$b ?v0 ))(= ?v0 nil$ ))):named a41 ))
(check-sat )
;(get-unsat-core )
