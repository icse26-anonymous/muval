;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_list_list_bool_fun$ 0 )
(declare-sort A_list_stream_bool_fun$ 0 )
(declare-sort A_list_list_list_bool_fun$ 0 )
(declare-sort A_list_list_stream_bool_fun$ 0 )
(declare-sort A_list_list_list_stream_bool_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_list_stream$ (sCons$a (shd$a A_list$ )(stl$a A_list_stream$ )))))
(declare-sort A_list_list$ 0)
(declare-sort A_list_list_list$ 0)
(declare-fun nil$a ()A_list_list$)
(declare-fun hd$a (A_list_list$)A_list$)
(declare-fun tl$a (A_list_list$)A_list_list$)
(declare-fun cons$a (A_list$ A_list_list$ )A_list_list$)
(declare-fun nil$b ()A_list_list_list$)
(declare-fun hd$b (A_list_list_list$)A_list_list$)
(declare-fun tl$b (A_list_list_list$)A_list_list_list$)
(declare-fun cons$b (A_list_list$ A_list_list_list$ )A_list_list_list$)
(declare-codatatypes ()((A_list_list_list_stream$ (sCons$b (shd$b A_list_list_list$ )(stl$b A_list_list_list_stream$ )))(A_list_list_stream$ (sCons$c (shd$c A_list_list$ )(stl$c A_list_list_stream$ )))))
(declare-sort A_list_list_list_list$ 0)
(declare-fun nil$c ()A_list_list_list_list$)
(declare-fun hd$c (A_list_list_list_list$)A_list_list_list$)
(declare-fun tl$c (A_list_list_list_list$)A_list_list_list_list$)
(declare-fun cons$c (A_list_list_list$ A_list_list_list_list$ )A_list_list_list_list$)
(declare-codatatypes ()((A_list_list_list_list_stream$ (sCons$d (shd$d A_list_list_list_list$ )(stl$d A_list_list_list_list_stream$ )))))
(declare-fun ws$ ()A_list_stream$ )
(declare-fun xs$ ()A_list$ )
(declare-fun flat$ (A_list_stream$ )A_stream$ )
(declare-fun cycle$ (A_list_list_list$ )A_list_list_stream$ )
(declare-fun flat$a (A_list_list_list_list_stream$ )A_list_list_list_stream$ )
(declare-fun flat$b (A_list_list_list_stream$ )A_list_list_stream$ )
(declare-fun flat$c (A_list_list_stream$ )A_list_stream$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun cycle$a (A_list_list$ )A_list_stream$ )
(declare-fun cycle$b (A_list$ )A_stream$ )
(declare-fun shift$a (A_list_list_list$ A_list_list_stream$ )A_list_list_stream$ )
(declare-fun shift$b (A_list_list$ A_list_stream$ )A_list_stream$ )
(declare-fun shift$c (A_list_list_list_list$ A_list_list_list_stream$ )A_list_list_list_stream$ )
(declare-fun fun_app$ (A_list_list_list_stream_bool_fun$ A_list_list_list_stream$ )Bool )
(declare-fun sfilter$ (A_list_list_list_bool_fun$ A_list_list_list_stream$ )A_list_list_list_stream$ )
(declare-fun smember$ (A_list_list_list$ )A_list_list_list_stream_bool_fun$ )
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$b (A_list_list_stream_bool_fun$ A_list_list_stream$ )Bool )
(declare-fun fun_app$c (A_list_stream_bool_fun$ A_list_stream$ )Bool )
(declare-fun fun_app$d (A_list_list_list_bool_fun$ A_list_list_list$ )Bool )
(declare-fun fun_app$e (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$f (A_list_list_bool_fun$ A_list_list$ )Bool )
(declare-fun fun_app$g (A_list_bool_fun$ A_list$ )Bool )
(declare-fun sfilter$a (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun sfilter$b (A_list_list_bool_fun$ A_list_list_stream$ )A_list_list_stream$ )
(declare-fun sfilter$c (A_list_bool_fun$ A_list_stream$ )A_list_stream$ )
(declare-fun smember$a (A$ )A_stream_bool_fun$ )
(declare-fun smember$b (A_list_list$ )A_list_list_stream_bool_fun$ )
(declare-fun smember$c (A_list$ )A_list_stream_bool_fun$ )
(declare-fun streamsp$ (A_list_list_list_bool_fun$ )A_list_list_list_stream_bool_fun$ )
(declare-fun streamsp$a (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun streamsp$b (A_list_list_bool_fun$ )A_list_list_stream_bool_fun$ )
(declare-fun streamsp$c (A_list_bool_fun$ )A_list_stream_bool_fun$ )
(declare-fun stream_all$ (A_list_list_list_bool_fun$ )A_list_list_list_stream_bool_fun$ )
(declare-fun pred_stream$ (A_list_list_list_bool_fun$ )A_list_list_list_stream_bool_fun$ )
(declare-fun stream_all$a (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun stream_all$b (A_list_list_bool_fun$ )A_list_list_stream_bool_fun$ )
(declare-fun stream_all$c (A_list_bool_fun$ )A_list_stream_bool_fun$ )
(declare-fun pred_stream$a (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun pred_stream$b (A_list_list_bool_fun$ )A_list_list_stream_bool_fun$ )
(declare-fun pred_stream$c (A_list_bool_fun$ )A_list_stream_bool_fun$ )
(assert (! (not (= (flat$ (sCons$a xs$ ws$ ))(shift$ xs$ (flat$ ws$ )))):named a0 ))
(assert (! (not (= xs$ nil$ )):named a1 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list_stream$ )(?v2 A_list_list_list$ )(?v3 A_list_list_list_stream$ ))(= (= (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_stream$ )(?v2 A_list_list$ )(?v3 A_list_list_stream$ ))(= (= (sCons$c ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ )(?v2 A_list$ )(?v3 A_list_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_stream$ )(?v2 A_list_list_stream$ ))(= (= (shift$a ?v0 ?v1 )(shift$a ?v0 ?v2 ))(= ?v1 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_stream$ )(?v2 A_list_stream$ ))(= (= (shift$b ?v0 ?v1 )(shift$b ?v0 ?v2 ))(= ?v1 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 A_list_list_stream$ ))(! (= (shift$a nil$b ?v0 )?v0 ):pattern ((shift$a nil$b ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_list_stream$ ))(! (= (shift$b nil$a ?v0 )?v0 ):pattern ((shift$b nil$a ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (shift$ nil$ ?v0 )?v0 ):pattern ((shift$ nil$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_list_list_list_stream$ ))(=> (forall ((?v1 A_list_list_list$ )(?v2 A_list_list_list_stream$ ))(=> (= ?v0 (sCons$b ?v1 ?v2 ))false ))false )):named a12 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a13 ))
(assert (! (forall ((?v0 A_list_list_stream$ ))(=> (forall ((?v1 A_list_list$ )(?v2 A_list_list_stream$ ))(=> (= ?v0 (sCons$c ?v1 ?v2 ))false ))false )):named a14 ))
(assert (! (forall ((?v0 A_list_stream$ ))(=> (forall ((?v1 A_list$ )(?v2 A_list_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list_list_stream$ ))(! (= (fun_app$ (smember$ ?v0 )(sCons$b ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$ (smember$ ?v0 )?v2 ))):pattern ((fun_app$ (smember$ ?v0 )(sCons$b ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$a (smember$a ?v0 )(sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$a (smember$a ?v0 )?v2 ))):pattern ((fun_app$a (smember$a ?v0 )(sCons$ ?v1 ?v2 ))))):named a17 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ )(?v2 A_list_list_stream$ ))(! (= (fun_app$b (smember$b ?v0 )(sCons$c ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$b (smember$b ?v0 )?v2 ))):pattern ((fun_app$b (smember$b ?v0 )(sCons$c ?v1 ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list_stream$ ))(! (= (fun_app$c (smember$c ?v0 )(sCons$a ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$c (smember$c ?v0 )?v2 ))):pattern ((fun_app$c (smember$c ?v0 )(sCons$a ?v1 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list_list$ )(?v2 A_list_list_list_list_stream$ ))(! (= (flat$a (sCons$d (cons$c ?v0 ?v1 )?v2 ))(sCons$b ?v0 (flat$a (ite (= ?v1 nil$c )?v2 (sCons$d ?v1 ?v2 ))))):pattern ((sCons$d (cons$c ?v0 ?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list_list_stream$ ))(! (= (flat$b (sCons$b (cons$b ?v0 ?v1 )?v2 ))(sCons$c ?v0 (flat$b (ite (= ?v1 nil$b )?v2 (sCons$b ?v1 ?v2 ))))):pattern ((sCons$b (cons$b ?v0 ?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list_list_stream$ ))(! (= (flat$c (sCons$c (cons$a ?v0 ?v1 )?v2 ))(sCons$a ?v0 (flat$c (ite (= ?v1 nil$a )?v2 (sCons$c ?v1 ?v2 ))))):pattern ((sCons$c (cons$a ?v0 ?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_list_stream$ ))(! (= (flat$ (sCons$a (cons$ ?v0 ?v1 )?v2 ))(sCons$ ?v0 (flat$ (ite (= ?v1 nil$ )?v2 (sCons$a ?v1 ?v2 ))))):pattern ((sCons$a (cons$ ?v0 ?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_list_list_list_bool_fun$ )(?v1 A_list_list_list$ )(?v2 A_list_list_list_stream$ ))(! (= (fun_app$ (pred_stream$ ?v0 )(sCons$b ?v1 ?v2 ))(and (fun_app$d ?v0 ?v1 )(fun_app$ (pred_stream$ ?v0 )?v2 ))):pattern ((fun_app$ (pred_stream$ ?v0 )(sCons$b ?v1 ?v2 ))))):named a24 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$a (pred_stream$a ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$e ?v0 ?v1 )(fun_app$a (pred_stream$a ?v0 )?v2 ))):pattern ((fun_app$a (pred_stream$a ?v0 )(sCons$ ?v1 ?v2 ))))):named a25 ))
(assert (! (forall ((?v0 A_list_list_bool_fun$ )(?v1 A_list_list$ )(?v2 A_list_list_stream$ ))(! (= (fun_app$b (pred_stream$b ?v0 )(sCons$c ?v1 ?v2 ))(and (fun_app$f ?v0 ?v1 )(fun_app$b (pred_stream$b ?v0 )?v2 ))):pattern ((fun_app$b (pred_stream$b ?v0 )(sCons$c ?v1 ?v2 ))))):named a26 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list$ )(?v2 A_list_stream$ ))(! (= (fun_app$c (pred_stream$c ?v0 )(sCons$a ?v1 ?v2 ))(and (fun_app$g ?v0 ?v1 )(fun_app$c (pred_stream$c ?v0 )?v2 ))):pattern ((fun_app$c (pred_stream$c ?v0 )(sCons$a ?v1 ?v2 ))))):named a27 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(=> (not (= ?v0 nil$b ))false ))false )):named a28 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(=> (not (= ?v0 nil$a ))false ))false )):named a29 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a30 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(! (=> (not (= ?v0 nil$b ))(= (cycle$ ?v0 )(shift$a ?v0 (cycle$ ?v0 )))):pattern ((cycle$ ?v0 )))):named a31 ))
(assert (! (forall ((?v0 A_list_list$ ))(! (=> (not (= ?v0 nil$a ))(= (cycle$a ?v0 )(shift$b ?v0 (cycle$a ?v0 )))):pattern ((cycle$a ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_list$ ))(! (=> (not (= ?v0 nil$ ))(= (cycle$b ?v0 )(shift$ ?v0 (cycle$b ?v0 )))):pattern ((cycle$b ?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_list_list_list_bool_fun$ )(?v1 A_list_list_list$ )(?v2 A_list_list_list_stream$ ))(! (= (fun_app$ (stream_all$ ?v0 )(sCons$b ?v1 ?v2 ))(and (fun_app$d ?v0 ?v1 )(fun_app$ (stream_all$ ?v0 )?v2 ))):pattern ((fun_app$ (stream_all$ ?v0 )(sCons$b ?v1 ?v2 ))))):named a34 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$a (stream_all$a ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$e ?v0 ?v1 )(fun_app$a (stream_all$a ?v0 )?v2 ))):pattern ((fun_app$a (stream_all$a ?v0 )(sCons$ ?v1 ?v2 ))))):named a35 ))
(assert (! (forall ((?v0 A_list_list_bool_fun$ )(?v1 A_list_list$ )(?v2 A_list_list_stream$ ))(! (= (fun_app$b (stream_all$b ?v0 )(sCons$c ?v1 ?v2 ))(and (fun_app$f ?v0 ?v1 )(fun_app$b (stream_all$b ?v0 )?v2 ))):pattern ((fun_app$b (stream_all$b ?v0 )(sCons$c ?v1 ?v2 ))))):named a36 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list$ )(?v2 A_list_stream$ ))(! (= (fun_app$c (stream_all$c ?v0 )(sCons$a ?v1 ?v2 ))(and (fun_app$g ?v0 ?v1 )(fun_app$c (stream_all$c ?v0 )?v2 ))):pattern ((fun_app$c (stream_all$c ?v0 )(sCons$a ?v1 ?v2 ))))):named a37 ))
(assert (! (forall ((?v0 A_list_list_list_bool_fun$ )(?v1 A_list_list_list_stream$ ))(= (fun_app$ (streamsp$ ?v0 )?v1 )(exists ((?v2 A_list_list_list$ )(?v3 A_list_list_list_stream$ ))(and (= ?v1 (sCons$b ?v2 ?v3 ))(and (fun_app$d ?v0 ?v2 )(fun_app$ (streamsp$ ?v0 )?v3 )))))):named a38 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$a (streamsp$a ?v0 )?v1 )(exists ((?v2 A$ )(?v3 A_stream$ ))(and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$e ?v0 ?v2 )(fun_app$a (streamsp$a ?v0 )?v3 )))))):named a39 ))
(assert (! (forall ((?v0 A_list_list_bool_fun$ )(?v1 A_list_list_stream$ ))(= (fun_app$b (streamsp$b ?v0 )?v1 )(exists ((?v2 A_list_list$ )(?v3 A_list_list_stream$ ))(and (= ?v1 (sCons$c ?v2 ?v3 ))(and (fun_app$f ?v0 ?v2 )(fun_app$b (streamsp$b ?v0 )?v3 )))))):named a40 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list_stream$ ))(= (fun_app$c (streamsp$c ?v0 )?v1 )(exists ((?v2 A_list$ )(?v3 A_list_stream$ ))(and (= ?v1 (sCons$a ?v2 ?v3 ))(and (fun_app$g ?v0 ?v2 )(fun_app$c (streamsp$c ?v0 )?v3 )))))):named a41 ))
(assert (! (forall ((?v0 A_list_list_list_bool_fun$ )(?v1 A_list_list_list_stream$ ))(=> (and (fun_app$ (streamsp$ ?v0 )?v1 )(forall ((?v2 A_list_list_list$ )(?v3 A_list_list_list_stream$ ))(=> (and (= ?v1 (sCons$b ?v2 ?v3 ))(and (fun_app$d ?v0 ?v2 )(fun_app$ (streamsp$ ?v0 )?v3 )))false )))false )):named a42 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(=> (and (fun_app$a (streamsp$a ?v0 )?v1 )(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$e ?v0 ?v2 )(fun_app$a (streamsp$a ?v0 )?v3 )))false )))false )):named a43 ))
(assert (! (forall ((?v0 A_list_list_bool_fun$ )(?v1 A_list_list_stream$ ))(=> (and (fun_app$b (streamsp$b ?v0 )?v1 )(forall ((?v2 A_list_list$ )(?v3 A_list_list_stream$ ))(=> (and (= ?v1 (sCons$c ?v2 ?v3 ))(and (fun_app$f ?v0 ?v2 )(fun_app$b (streamsp$b ?v0 )?v3 )))false )))false )):named a44 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list_stream$ ))(=> (and (fun_app$c (streamsp$c ?v0 )?v1 )(forall ((?v2 A_list$ )(?v3 A_list_stream$ ))(=> (and (= ?v1 (sCons$a ?v2 ?v3 ))(and (fun_app$g ?v0 ?v2 )(fun_app$c (streamsp$c ?v0 )?v3 )))false )))false )):named a45 ))
(assert (! (forall ((?v0 A_list_list_list_stream_bool_fun$ )(?v1 A_list_list_list_stream$ )(?v2 A_list_list_list_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 A_list_list_list_stream$ ))(=> (fun_app$ ?v0 ?v3 )(exists ((?v4 A_list_list_list$ )(?v5 A_list_list_list_stream$ ))(and (= ?v3 (sCons$b ?v4 ?v5 ))(and (fun_app$d ?v2 ?v4 )(or (fun_app$ ?v0 ?v5 )(fun_app$ (streamsp$ ?v2 )?v5 ))))))))(fun_app$ (streamsp$ ?v2 )?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_bool_fun$ ))(=> (and (fun_app$a ?v0 ?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$a ?v0 ?v3 )(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v3 (sCons$ ?v4 ?v5 ))(and (fun_app$e ?v2 ?v4 )(or (fun_app$a ?v0 ?v5 )(fun_app$a (streamsp$a ?v2 )?v5 ))))))))(fun_app$a (streamsp$a ?v2 )?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_list_list_stream_bool_fun$ )(?v1 A_list_list_stream$ )(?v2 A_list_list_bool_fun$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v3 A_list_list_stream$ ))(=> (fun_app$b ?v0 ?v3 )(exists ((?v4 A_list_list$ )(?v5 A_list_list_stream$ ))(and (= ?v3 (sCons$c ?v4 ?v5 ))(and (fun_app$f ?v2 ?v4 )(or (fun_app$b ?v0 ?v5 )(fun_app$b (streamsp$b ?v2 )?v5 ))))))))(fun_app$b (streamsp$b ?v2 )?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_list_stream_bool_fun$ )(?v1 A_list_stream$ )(?v2 A_list_bool_fun$ ))(=> (and (fun_app$c ?v0 ?v1 )(forall ((?v3 A_list_stream$ ))(=> (fun_app$c ?v0 ?v3 )(exists ((?v4 A_list$ )(?v5 A_list_stream$ ))(and (= ?v3 (sCons$a ?v4 ?v5 ))(and (fun_app$g ?v2 ?v4 )(or (fun_app$c ?v0 ?v5 )(fun_app$c (streamsp$c ?v2 )?v5 ))))))))(fun_app$c (streamsp$c ?v2 )?v1 ))):named a49 ))
(assert (! (forall ((?v0 A_list_list_list_bool_fun$ )(?v1 A_list_list_list$ )(?v2 A_list_list_list_stream$ ))(! (= (sfilter$ ?v0 (sCons$b ?v1 ?v2 ))(ite (fun_app$d ?v0 ?v1 )(sCons$b ?v1 (sfilter$ ?v0 ?v2 ))(sfilter$ ?v0 ?v2 ))):pattern ((sfilter$ ?v0 (sCons$b ?v1 ?v2 ))))):named a50 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (sfilter$a ?v0 (sCons$ ?v1 ?v2 ))(ite (fun_app$e ?v0 ?v1 )(sCons$ ?v1 (sfilter$a ?v0 ?v2 ))(sfilter$a ?v0 ?v2 ))):pattern ((sfilter$a ?v0 (sCons$ ?v1 ?v2 ))))):named a51 ))
(assert (! (forall ((?v0 A_list_list_bool_fun$ )(?v1 A_list_list$ )(?v2 A_list_list_stream$ ))(! (= (sfilter$b ?v0 (sCons$c ?v1 ?v2 ))(ite (fun_app$f ?v0 ?v1 )(sCons$c ?v1 (sfilter$b ?v0 ?v2 ))(sfilter$b ?v0 ?v2 ))):pattern ((sfilter$b ?v0 (sCons$c ?v1 ?v2 ))))):named a52 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list$ )(?v2 A_list_stream$ ))(! (= (sfilter$c ?v0 (sCons$a ?v1 ?v2 ))(ite (fun_app$g ?v0 ?v1 )(sCons$a ?v1 (sfilter$c ?v0 ?v2 ))(sfilter$c ?v0 ?v2 ))):pattern ((sfilter$c ?v0 (sCons$a ?v1 ?v2 ))))):named a53 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list_list$ )(?v2 A_list_list_list_stream$ ))(! (= (shift$c (cons$c ?v0 ?v1 )?v2 )(sCons$b ?v0 (shift$c ?v1 ?v2 ))):pattern ((shift$c (cons$c ?v0 ?v1 )?v2 )))):named a54 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list_stream$ ))(! (= (shift$a (cons$b ?v0 ?v1 )?v2 )(sCons$c ?v0 (shift$a ?v1 ?v2 ))):pattern ((shift$a (cons$b ?v0 ?v1 )?v2 )))):named a55 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_stream$ ))(! (= (shift$ (cons$ ?v0 ?v1 )?v2 )(sCons$ ?v0 (shift$ ?v1 ?v2 ))):pattern ((shift$ (cons$ ?v0 ?v1 )?v2 )))):named a56 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list_stream$ ))(! (= (shift$b (cons$a ?v0 ?v1 )?v2 )(sCons$a ?v0 (shift$b ?v1 ?v2 ))):pattern ((shift$b (cons$a ?v0 ?v1 )?v2 )))):named a57 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(= (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a58 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a59 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(= (= (cons$a ?v0 ?v1 )(cons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a60 ))
(check-sat )
;(get-unsat-core )
