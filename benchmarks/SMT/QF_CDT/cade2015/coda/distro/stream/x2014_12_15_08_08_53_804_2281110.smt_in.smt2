;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_set_fun$ 0 )
(declare-sort A_b_set_fun$ 0 )
(declare-sort B_a_set_fun$ 0 )
(declare-sort B_b_set_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort B_a_prod_set$ 0 )
(declare-sort B_b_prod_set$ 0 )
(declare-sort B_stream_set$ 0 )
(declare-sort A_a_a_prod_fun$ 0 )
(declare-sort A_b_a_prod_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_b_b_prod_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort A_a_b_prod_set_fun$ 0 )
(declare-sort A_b_prod_a_set_fun$ 0 )
(declare-sort A_b_prod_b_set_fun$ 0 )
(declare-sort A_stream_a_set_fun$ 0 )
(declare-sort B_a_b_prod_set_fun$ 0 )
(declare-sort B_stream_b_set_fun$ 0 )
(declare-sort A_a_b_prod_prod_set$ 0 )
(declare-sort A_b_prod_a_prod_set$ 0 )
(declare-sort A_b_prod_b_prod_set$ 0 )
(declare-sort A_b_prod_stream_set$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort B_a_b_prod_prod_set$ 0 )
(declare-sort B_stream_stream_set$ 0 )
(declare-sort A_a_a_prod_stream_fun$ 0 )
(declare-sort A_a_b_prod_stream_fun$ 0 )
(declare-sort B_b_a_prod_stream_fun$ 0 )
(declare-sort B_b_b_prod_stream_fun$ 0 )
(declare-sort A_a_b_prod_stream_set_fun$ 0 )
(declare-sort B_a_b_prod_stream_set_fun$ 0 )
(declare-sort A_a_b_prod_stream_prod_set$ 0 )
(declare-sort A_b_prod_stream_stream_set$ 0 )
(declare-sort A_stream_stream_stream_set$ 0 )
(declare-sort B_a_b_prod_stream_prod_set$ 0 )
(declare-sort B_stream_stream_stream_set$ 0 )
(declare-sort A_a_a_b_prod_prod_stream_fun$ 0 )
(declare-sort A_b_prod_a_a_b_prod_prod_fun$ 0 )
(declare-sort A_b_prod_stream_a_b_prod_set_fun$ 0 )
(declare-sort A_stream_stream_a_stream_set_fun$ 0 )
(declare-sort B_stream_stream_b_stream_set_fun$ 0 )
(declare-sort A_b_prod_stream_stream_stream_set$ 0 )
(declare-sort A_a_a_b_prod_stream_prod_stream_fun$ 0 )
(declare-sort A_b_prod_stream_stream_stream_stream_set$ 0 )
(declare-sort A_b_prod_stream_a_a_b_prod_stream_prod_fun$ 0 )
(declare-sort A_b_prod_stream_stream_a_b_prod_stream_set_fun$ 0 )
(declare-sort A_stream_stream_stream_a_stream_stream_set_fun$ 0 )
(declare-sort B_stream_stream_stream_b_stream_stream_set_fun$ 0 )
(declare-sort A_b_prod_stream_stream_stream_a_b_prod_stream_stream_set_fun$ 0 )
(declare-sort A_b_prod_stream_stream_stream_stream_a_b_prod_stream_stream_stream_set_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-codatatypes ()((A_b_prod_stream$ (sCons$ (shd$ A_b_prod$ )(stl$ A_b_prod_stream$ )))(A_b_prod_stream_stream$ (sCons$a (shd$a A_b_prod_stream$ )(stl$a A_b_prod_stream_stream$ )))(A_stream$ (sCons$b (shd$b A$ )(stl$b A_stream$ )))(B_stream$ (sCons$c (shd$c B$ )(stl$c B_stream$ )))(A_b_prod_stream_stream_stream$ (sCons$d (shd$d A_b_prod_stream_stream$ )(stl$d A_b_prod_stream_stream_stream$ )))(A_b_prod_stream_stream_stream_stream$ (sCons$e (shd$e A_b_prod_stream_stream_stream$ )(stl$e A_b_prod_stream_stream_stream_stream$ )))(A_b_prod_stream_stream_stream_stream_stream$ (sCons$f (shd$f A_b_prod_stream_stream_stream_stream$ )(stl$f A_b_prod_stream_stream_stream_stream_stream$ )))(A_stream_stream$ (sCons$g (shd$g A_stream$ )(stl$g A_stream_stream$ )))(A_stream_stream_stream$ (sCons$h (shd$h A_stream_stream$ )(stl$h A_stream_stream_stream$ )))(A_stream_stream_stream_stream$ (sCons$i (shd$i A_stream_stream_stream$ )(stl$i A_stream_stream_stream_stream$ )))(B_stream_stream$ (sCons$j (shd$j B_stream$ )(stl$j B_stream_stream$ )))(B_stream_stream_stream$ (sCons$k (shd$k B_stream_stream$ )(stl$k B_stream_stream_stream$ )))(B_stream_stream_stream_stream$ (sCons$l (shd$l B_stream_stream_stream$ )(stl$l B_stream_stream_stream_stream$ )))))
(declare-sort B_b_prod$ 0)
(declare-sort B_a_prod$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort B_a_b_prod_prod$ 0)
(declare-sort A_a_b_prod_prod$ 0)
(declare-sort A_b_prod_b_prod$ 0)
(declare-sort A_b_prod_a_prod$ 0)
(declare-sort B_a_b_prod_stream_prod$ 0)
(declare-sort A_a_b_prod_stream_prod$ 0)
(declare-fun fst$a (B_b_prod$)B$)
(declare-fun snd$a (B_b_prod$)B$)
(declare-fun pair$a (B$ B$ )B_b_prod$)
(declare-fun fst$b (B_a_prod$)B$)
(declare-fun snd$b (B_a_prod$)A$)
(declare-fun pair$b (B$ A$ )B_a_prod$)
(declare-fun fst$c (A_a_prod$)A$)
(declare-fun snd$c (A_a_prod$)A$)
(declare-fun pair$c (A$ A$ )A_a_prod$)
(declare-fun fst$d (B_a_b_prod_prod$)B$)
(declare-fun snd$d (B_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$d (B$ A_b_prod$ )B_a_b_prod_prod$)
(declare-fun fst$e (A_a_b_prod_prod$)A$)
(declare-fun snd$e (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$e (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-fun fst$f (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$f (A_b_prod_b_prod$)B$)
(declare-fun pair$f (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-fun fst$g (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$g (A_b_prod_a_prod$)A$)
(declare-fun pair$g (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-fun fst$h (B_a_b_prod_stream_prod$)B$)
(declare-fun snd$h (B_a_b_prod_stream_prod$)A_b_prod_stream$)
(declare-fun pair$h (B$ A_b_prod_stream$ )B_a_b_prod_stream_prod$)
(declare-fun fst$i (A_a_b_prod_stream_prod$)A$)
(declare-fun snd$i (A_a_b_prod_stream_prod$)A_b_prod_stream$)
(declare-fun pair$i (A$ A_b_prod_stream$ )A_a_b_prod_stream_prod$)
(declare-codatatypes ()((B_b_prod_stream$ (sCons$m (shd$m B_b_prod$ )(stl$m B_b_prod_stream$ )))(B_b_prod_stream_stream$ (sCons$n (shd$n B_b_prod_stream$ )(stl$n B_b_prod_stream_stream$ )))(B_a_prod_stream$ (sCons$o (shd$o B_a_prod$ )(stl$o B_a_prod_stream$ )))(B_a_prod_stream_stream$ (sCons$p (shd$p B_a_prod_stream$ )(stl$p B_a_prod_stream_stream$ )))(A_a_b_prod_stream_prod_stream$ (sCons$q (shd$q A_a_b_prod_stream_prod$ )(stl$q A_a_b_prod_stream_prod_stream$ )))(A_a_b_prod_stream_prod_stream_stream$ (sCons$r (shd$r A_a_b_prod_stream_prod_stream$ )(stl$r A_a_b_prod_stream_prod_stream_stream$ )))(A_a_b_prod_prod_stream$ (sCons$s (shd$s A_a_b_prod_prod$ )(stl$s A_a_b_prod_prod_stream$ )))(A_a_b_prod_prod_stream_stream$ (sCons$t (shd$t A_a_b_prod_prod_stream$ )(stl$t A_a_b_prod_prod_stream_stream$ )))(A_a_prod_stream$ (sCons$u (shd$u A_a_prod$ )(stl$u A_a_prod_stream$ )))(A_a_prod_stream_stream$ (sCons$v (shd$v A_a_prod_stream$ )(stl$v A_a_prod_stream_stream$ )))))
(declare-fun s1$ ()A_stream$ )
(declare-fun s2$ ()B_stream$ )
(declare-fun uu$ (A$ )B_a_b_prod_fun$ )
(declare-fun uua$ ()A_a_b_prod_stream_fun$ )
(declare-fun uub$ ()A_b_set_fun$ )
(declare-fun uuc$ (B$ )B_b_b_prod_fun$ )
(declare-fun uud$ (B_stream$ )B_b_b_prod_stream_fun$ )
(declare-fun uue$ (B$ )A_b_a_prod_fun$ )
(declare-fun uuf$ (A_stream$ )B_b_a_prod_stream_fun$ )
(declare-fun uug$ (A$ )A_b_prod_stream_a_a_b_prod_stream_prod_fun$ )
(declare-fun uuh$ (A_b_prod_stream_stream$ )A_a_a_b_prod_stream_prod_stream_fun$ )
(declare-fun uui$ (A$ )A_b_prod_a_a_b_prod_prod_fun$ )
(declare-fun uuj$ (A_b_prod_stream$ )A_a_a_b_prod_prod_stream_fun$ )
(declare-fun uuk$ (A$ )A_a_a_prod_fun$ )
(declare-fun uul$ (A_stream$ )A_a_a_prod_stream_fun$ )
(declare-fun uum$ (B_stream$ )A_a_b_prod_stream_fun$ )
(declare-fun smap$ (B_a_b_prod_fun$ B_stream$ )A_b_prod_stream$ )
(declare-fun sset$ ()B_stream_b_set_fun$ )
(declare-fun sigma$ (A_set$ A_b_set_fun$ )A_b_prod_set$ )
(declare-fun smap$a (A_a_a_prod_fun$ A_stream$ )A_a_prod_stream$ )
(declare-fun smap$b (A_b_prod_a_a_b_prod_prod_fun$ A_b_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun smap$c (A_b_prod_stream_a_a_b_prod_stream_prod_fun$ A_b_prod_stream_stream$ )A_a_b_prod_stream_prod_stream$ )
(declare-fun smap$d (A_b_a_prod_fun$ A_stream$ )B_a_prod_stream$ )
(declare-fun smap$e (B_b_b_prod_fun$ B_stream$ )B_b_prod_stream$ )
(declare-fun smap$f (A_a_b_prod_stream_fun$ A_stream$ )A_b_prod_stream_stream$ )
(declare-fun smap$g (B_b_b_prod_stream_fun$ B_stream$ )B_b_prod_stream_stream$ )
(declare-fun smap$h (B_b_a_prod_stream_fun$ B_stream$ )B_a_prod_stream_stream$ )
(declare-fun smap$i (A_a_a_b_prod_stream_prod_stream_fun$ A_stream$ )A_a_b_prod_stream_prod_stream_stream$ )
(declare-fun smap$j (A_a_a_b_prod_prod_stream_fun$ A_stream$ )A_a_b_prod_prod_stream_stream$ )
(declare-fun smap$k (A_a_a_prod_stream_fun$ A_stream$ )A_a_prod_stream_stream$ )
(declare-fun sset$a ()A_b_prod_stream_stream_a_b_prod_stream_set_fun$ )
(declare-fun sset$b ()A_b_prod_stream_a_b_prod_set_fun$ )
(declare-fun sset$c ()A_stream_a_set_fun$ )
(declare-fun sset$d ()A_b_prod_stream_stream_stream_stream_a_b_prod_stream_stream_stream_set_fun$ )
(declare-fun sset$e (A_b_prod_stream_stream_stream_stream_stream$ )A_b_prod_stream_stream_stream_stream_set$ )
(declare-fun sset$f ()A_stream_stream_stream_a_stream_stream_set_fun$ )
(declare-fun sset$g (A_stream_stream_stream_stream$ )A_stream_stream_stream_set$ )
(declare-fun sset$h ()B_stream_stream_stream_b_stream_stream_set_fun$ )
(declare-fun sset$i (B_stream_stream_stream_stream$ )B_stream_stream_stream_set$ )
(declare-fun sset$j ()B_stream_stream_b_stream_set_fun$ )
(declare-fun sset$k ()A_stream_stream_a_stream_set_fun$ )
(declare-fun sset$l ()A_b_prod_stream_stream_stream_a_b_prod_stream_stream_set_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun sigma$a (B_set$ B_b_set_fun$ )B_b_prod_set$ )
(declare-fun sigma$b (B_set$ B_a_set_fun$ )B_a_prod_set$ )
(declare-fun sigma$c (A_set$ A_a_set_fun$ )A_a_prod_set$ )
(declare-fun sigma$d (B_set$ B_a_b_prod_set_fun$ )B_a_b_prod_prod_set$ )
(declare-fun sigma$e (A_set$ A_a_b_prod_set_fun$ )A_a_b_prod_prod_set$ )
(declare-fun sigma$f (A_b_prod_set$ A_b_prod_b_set_fun$ )A_b_prod_b_prod_set$ )
(declare-fun sigma$g (A_b_prod_set$ A_b_prod_a_set_fun$ )A_b_prod_a_prod_set$ )
(declare-fun sigma$h (B_set$ B_a_b_prod_stream_set_fun$ )B_a_b_prod_stream_prod_set$ )
(declare-fun sigma$i (A_set$ A_a_b_prod_stream_set_fun$ )A_a_b_prod_stream_prod_set$ )
(declare-fun smerge$ (A_b_prod_stream_stream_stream_stream_stream$ )A_b_prod_stream_stream_stream_stream$ )
(declare-fun fun_app$ (A_a_b_prod_stream_fun$ A$ )A_b_prod_stream$ )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun member$b (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun member$c (B_b_prod$ B_b_prod_set$ )Bool )
(declare-fun member$d (B_a_prod$ B_a_prod_set$ )Bool )
(declare-fun member$e (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun member$f (B_a_b_prod_prod$ B_a_b_prod_prod_set$ )Bool )
(declare-fun member$g (A_a_b_prod_prod$ A_a_b_prod_prod_set$ )Bool )
(declare-fun member$h (A_b_prod_b_prod$ A_b_prod_b_prod_set$ )Bool )
(declare-fun member$i (A_b_prod_a_prod$ A_b_prod_a_prod_set$ )Bool )
(declare-fun member$j (B_a_b_prod_stream_prod$ B_a_b_prod_stream_prod_set$ )Bool )
(declare-fun member$k (A_b_prod_stream$ A_b_prod_stream_set$ )Bool )
(declare-fun member$l (A_a_b_prod_stream_prod$ A_a_b_prod_stream_prod_set$ )Bool )
(declare-fun member$m (B_stream$ B_stream_set$ )Bool )
(declare-fun member$n (A_stream$ A_stream_set$ )Bool )
(declare-fun smerge$a (A_stream_stream_stream_stream$ )A_stream_stream_stream$ )
(declare-fun smerge$b (B_stream_stream_stream_stream$ )B_stream_stream_stream$ )
(declare-fun smerge$c (B_stream_stream_stream$ )B_stream_stream$ )
(declare-fun smerge$d (A_stream_stream_stream$ )A_stream_stream$ )
(declare-fun smerge$e (A_b_prod_stream_stream_stream_stream$ )A_b_prod_stream_stream_stream$ )
(declare-fun smerge$f (A_b_prod_stream_stream_stream$ )A_b_prod_stream_stream$ )
(declare-fun smerge$g (A_b_prod_stream_stream$ )A_b_prod_stream$ )
(declare-fun smerge$h (A_stream_stream$ )A_stream$ )
(declare-fun smerge$i (B_stream_stream$ )B_stream$ )
(declare-fun smerge$j (B_b_prod_stream_stream$ )B_b_prod_stream$ )
(declare-fun smerge$k (B_a_prod_stream_stream$ )B_a_prod_stream$ )
(declare-fun smerge$l (A_a_b_prod_stream_prod_stream_stream$ )A_a_b_prod_stream_prod_stream$ )
(declare-fun smerge$m (A_a_b_prod_prod_stream_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun smerge$n (A_a_prod_stream_stream$ )A_a_prod_stream$ )
(declare-fun fun_app$a (A_b_set_fun$ A$ )B_set$ )
(declare-fun fun_app$b (B_stream_b_set_fun$ B_stream$ )B_set$ )
(declare-fun fun_app$c (A_a_a_prod_stream_fun$ A$ )A_a_prod_stream$ )
(declare-fun fun_app$d (A_a_a_b_prod_prod_stream_fun$ A$ )A_a_b_prod_prod_stream$ )
(declare-fun fun_app$e (A_a_a_b_prod_stream_prod_stream_fun$ A$ )A_a_b_prod_stream_prod_stream$ )
(declare-fun fun_app$f (B_b_a_prod_stream_fun$ B$ )B_a_prod_stream$ )
(declare-fun fun_app$g (B_b_b_prod_stream_fun$ B$ )B_b_prod_stream$ )
(declare-fun fun_app$h (B_b_b_prod_fun$ B$ )B_b_prod$ )
(declare-fun fun_app$i (A_b_a_prod_fun$ A$ )B_a_prod$ )
(declare-fun fun_app$j (A_b_prod_stream_a_a_b_prod_stream_prod_fun$ A_b_prod_stream$ )A_a_b_prod_stream_prod$ )
(declare-fun fun_app$k (A_b_prod_a_a_b_prod_prod_fun$ A_b_prod$ )A_a_b_prod_prod$ )
(declare-fun fun_app$l (B_a_b_prod_fun$ B$ )A_b_prod$ )
(declare-fun fun_app$m (A_a_a_prod_fun$ A$ )A_a_prod$ )
(declare-fun fun_app$n (A_b_prod_stream_stream_a_b_prod_stream_set_fun$ A_b_prod_stream_stream$ )A_b_prod_stream_set$ )
(declare-fun fun_app$o (A_stream_a_set_fun$ A_stream$ )A_set$ )
(declare-fun fun_app$p (A_b_prod_stream_stream_stream_stream_a_b_prod_stream_stream_stream_set_fun$ A_b_prod_stream_stream_stream_stream$ )A_b_prod_stream_stream_stream_set$ )
(declare-fun fun_app$q (A_stream_stream_stream_a_stream_stream_set_fun$ A_stream_stream_stream$ )A_stream_stream_set$ )
(declare-fun fun_app$r (B_stream_stream_stream_b_stream_stream_set_fun$ B_stream_stream_stream$ )B_stream_stream_set$ )
(declare-fun fun_app$s (B_stream_stream_b_stream_set_fun$ B_stream_stream$ )B_stream_set$ )
(declare-fun fun_app$t (A_stream_stream_a_stream_set_fun$ A_stream_stream$ )A_stream_set$ )
(declare-fun fun_app$u (A_b_prod_stream_stream_stream_a_b_prod_stream_stream_set_fun$ A_b_prod_stream_stream_stream$ )A_b_prod_stream_stream_set$ )
(declare-fun fun_app$v (A_b_prod_stream_a_b_prod_set_fun$ A_b_prod_stream$ )A_b_prod_set$ )
(declare-fun fun_app$w (B_b_set_fun$ B$ )B_set$ )
(declare-fun fun_app$x (B_a_set_fun$ B$ )A_set$ )
(declare-fun fun_app$y (A_a_set_fun$ A$ )A_set$ )
(declare-fun fun_app$z (B_a_b_prod_set_fun$ B$ )A_b_prod_set$ )
(declare-fun sproduct$ (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun supremum$ (A_b_prod_stream_set$ A_b_prod_stream_a_b_prod_set_fun$ )A_b_prod_set$ )
(declare-fun fun_app$aa (A_a_b_prod_set_fun$ A$ )A_b_prod_set$ )
(declare-fun fun_app$ab (A_b_prod_b_set_fun$ A_b_prod$ )B_set$ )
(declare-fun fun_app$ac (A_b_prod_a_set_fun$ A_b_prod$ )A_set$ )
(declare-fun fun_app$ad (B_a_b_prod_stream_set_fun$ B$ )A_b_prod_stream_set$ )
(declare-fun fun_app$ae (A_a_b_prod_stream_set_fun$ A$ )A_b_prod_stream_set$ )
(declare-fun fun_app$af (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$ag (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$ah (A_bool_fun$ A$ )Bool )
(declare-fun sproduct$a (B_stream$ A_stream$ )B_a_prod_stream$ )
(declare-fun sproduct$b (A_stream$ A_b_prod_stream_stream$ )A_a_b_prod_stream_prod_stream$ )
(declare-fun sproduct$c (A_stream$ A_b_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun sproduct$d (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun sproduct$e (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun supremum$a (A_b_prod_stream_stream_stream_stream_set$ A_b_prod_stream_stream_stream_stream_a_b_prod_stream_stream_stream_set_fun$ )A_b_prod_stream_stream_stream_set$ )
(declare-fun supremum$b (A_stream_stream_stream_set$ A_stream_stream_stream_a_stream_stream_set_fun$ )A_stream_stream_set$ )
(declare-fun supremum$c (B_stream_stream_stream_set$ B_stream_stream_stream_b_stream_stream_set_fun$ )B_stream_stream_set$ )
(declare-fun supremum$d (B_stream_stream_set$ B_stream_stream_b_stream_set_fun$ )B_stream_set$ )
(declare-fun supremum$e (A_stream_stream_set$ A_stream_stream_a_stream_set_fun$ )A_stream_set$ )
(declare-fun supremum$f (A_b_prod_stream_stream_stream_set$ A_b_prod_stream_stream_stream_a_b_prod_stream_stream_set_fun$ )A_b_prod_stream_stream_set$ )
(declare-fun supremum$g (A_b_prod_stream_stream_set$ A_b_prod_stream_stream_a_b_prod_stream_set_fun$ )A_b_prod_stream_set$ )
(declare-fun supremum$h (A_stream_set$ A_stream_a_set_fun$ )A_set$ )
(declare-fun supremum$i (B_stream_set$ B_stream_b_set_fun$ )B_set$ )
(declare-fun supremum$j (B_set$ B_b_set_fun$ )B_set$ )
(declare-fun supremum$k (A_set$ A_b_set_fun$ )B_set$ )
(declare-fun supremum$l (B_set$ B_a_set_fun$ )A_set$ )
(declare-fun supremum$m (A_set$ A_a_set_fun$ )A_set$ )
(declare-fun supremum$n (A_b_prod_set$ A_b_prod_b_set_fun$ )B_set$ )
(declare-fun supremum$o (A_b_prod_set$ A_b_prod_a_set_fun$ )A_set$ )
(declare-fun supremum$p (B_set$ B_a_b_prod_set_fun$ )A_b_prod_set$ )
(declare-fun supremum$q (A_set$ A_a_b_prod_set_fun$ )A_b_prod_set$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uua$ ?v0 )(smap$ (uu$ ?v0 )s2$ )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a uub$ ?v0 )(fun_app$b sset$ s2$ )):pattern ((fun_app$a uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A$ ))(! (= (fun_app$c (uul$ ?v0 )?v1 )(smap$a (uuk$ ?v1 )?v0 )):pattern ((fun_app$c (uul$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A$ ))(! (= (fun_app$d (uuj$ ?v0 )?v1 )(smap$b (uui$ ?v1 )?v0 )):pattern ((fun_app$d (uuj$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_b_prod_stream_stream$ )(?v1 A$ ))(! (= (fun_app$e (uuh$ ?v0 )?v1 )(smap$c (uug$ ?v1 )?v0 )):pattern ((fun_app$e (uuh$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B$ ))(! (= (fun_app$f (uuf$ ?v0 )?v1 )(smap$d (uue$ ?v1 )?v0 )):pattern ((fun_app$f (uuf$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B$ ))(! (= (fun_app$g (uud$ ?v0 )?v1 )(smap$e (uuc$ ?v1 )?v0 )):pattern ((fun_app$g (uud$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A$ ))(! (= (fun_app$ (uum$ ?v0 )?v1 )(smap$ (uu$ ?v1 )?v0 )):pattern ((fun_app$ (uum$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$h (uuc$ ?v0 )?v1 )(pair$a ?v0 ?v1 )):pattern ((fun_app$h (uuc$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ ))(! (= (fun_app$i (uue$ ?v0 )?v1 )(pair$b ?v0 ?v1 )):pattern ((fun_app$i (uue$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod_stream$ ))(! (= (fun_app$j (uug$ ?v0 )?v1 )(pair$i ?v0 ?v1 )):pattern ((fun_app$j (uug$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ ))(! (= (fun_app$k (uui$ ?v0 )?v1 )(pair$e ?v0 ?v1 )):pattern ((fun_app$k (uui$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$l (uu$ ?v0 )?v1 )(pair$ ?v0 ?v1 )):pattern ((fun_app$l (uu$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$m (uuk$ ?v0 )?v1 )(pair$c ?v0 ?v1 )):pattern ((fun_app$m (uuk$ ?v0 )?v1 )))):named a13 ))
(assert (! (not (= (supremum$ (fun_app$n sset$a (smap$f uua$ s1$ ))sset$b )(sigma$ (fun_app$o sset$c s1$ )uub$ ))):named a14 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_b_prod_stream_fun$ )(?v3 A_a_b_prod_stream_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (fun_app$o sset$c ?v0 ))(and (member$ ?v5 (fun_app$o sset$c ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$f ?v2 ?v0 )(smap$f ?v3 ?v1 )))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ )(?v2 B_a_b_prod_fun$ )(?v3 B_a_b_prod_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$a ?v4 (fun_app$b sset$ ?v0 ))(and (member$a ?v5 (fun_app$b sset$ ?v1 ))(= (fun_app$l ?v2 ?v4 )(fun_app$l ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$ ?v2 ?v0 )(smap$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_b_prod_stream_fun$ )(?v2 A_a_b_prod_stream_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (fun_app$o sset$c ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (smap$f ?v1 ?v0 )(smap$f ?v2 ?v0 )))):named a17 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_a_b_prod_fun$ )(?v2 B_a_b_prod_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$a ?v3 (fun_app$b sset$ ?v0 ))(= (fun_app$l ?v1 ?v3 )(fun_app$l ?v2 ?v3 ))))(= (smap$ ?v1 ?v0 )(smap$ ?v2 ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_b_prod_stream_fun$ )(?v3 A_a_b_prod_stream_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (fun_app$o sset$c ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (smap$f ?v2 ?v0 )(smap$f ?v3 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ )(?v2 B_a_b_prod_fun$ )(?v3 B_a_b_prod_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 B$ ))(=> (member$a ?v4 (fun_app$b sset$ ?v1 ))(= (fun_app$l ?v2 ?v4 )(fun_app$l ?v3 ?v4 )))))(= (smap$ ?v2 ?v0 )(smap$ ?v3 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_b_prod_stream_stream_stream_stream_stream$ ))(= (fun_app$p sset$d (smerge$ ?v0 ))(supremum$a (sset$e ?v0 )sset$d ))):named a21 ))
(assert (! (forall ((?v0 A_stream_stream_stream_stream$ ))(= (fun_app$q sset$f (smerge$a ?v0 ))(supremum$b (sset$g ?v0 )sset$f ))):named a22 ))
(assert (! (forall ((?v0 B_stream_stream_stream_stream$ ))(= (fun_app$r sset$h (smerge$b ?v0 ))(supremum$c (sset$i ?v0 )sset$h ))):named a23 ))
(assert (! (forall ((?v0 B_stream_stream_stream$ ))(= (fun_app$s sset$j (smerge$c ?v0 ))(supremum$d (fun_app$r sset$h ?v0 )sset$j ))):named a24 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ ))(= (fun_app$t sset$k (smerge$d ?v0 ))(supremum$e (fun_app$q sset$f ?v0 )sset$k ))):named a25 ))
(assert (! (forall ((?v0 A_b_prod_stream_stream_stream_stream$ ))(= (fun_app$u sset$l (smerge$e ?v0 ))(supremum$f (fun_app$p sset$d ?v0 )sset$l ))):named a26 ))
(assert (! (forall ((?v0 A_b_prod_stream_stream_stream$ ))(= (fun_app$n sset$a (smerge$f ?v0 ))(supremum$g (fun_app$u sset$l ?v0 )sset$a ))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_stream_stream$ ))(= (fun_app$v sset$b (smerge$g ?v0 ))(supremum$ (fun_app$n sset$a ?v0 )sset$b ))):named a28 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= (fun_app$o sset$c (smerge$h ?v0 ))(supremum$h (fun_app$t sset$k ?v0 )sset$c ))):named a29 ))
(assert (! (forall ((?v0 B_stream_stream$ ))(= (fun_app$b sset$ (smerge$i ?v0 ))(supremum$i (fun_app$s sset$j ?v0 )sset$ ))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_set$ )(?v3 A_b_set_fun$ ))(= (member$b (pair$ ?v0 ?v1 )(sigma$ ?v2 ?v3 ))(and (member$ ?v0 ?v2 )(member$a ?v1 (fun_app$a ?v3 ?v0 ))))):named a31 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_set$ )(?v3 B_b_set_fun$ ))(= (member$c (pair$a ?v0 ?v1 )(sigma$a ?v2 ?v3 ))(and (member$a ?v0 ?v2 )(member$a ?v1 (fun_app$w ?v3 ?v0 ))))):named a32 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 B_set$ )(?v3 B_a_set_fun$ ))(= (member$d (pair$b ?v0 ?v1 )(sigma$b ?v2 ?v3 ))(and (member$a ?v0 ?v2 )(member$ ?v1 (fun_app$x ?v3 ?v0 ))))):named a33 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ )(?v3 A_a_set_fun$ ))(= (member$e (pair$c ?v0 ?v1 )(sigma$c ?v2 ?v3 ))(and (member$ ?v0 ?v2 )(member$ ?v1 (fun_app$y ?v3 ?v0 ))))):named a34 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_prod$ )(?v2 B_set$ )(?v3 B_a_b_prod_set_fun$ ))(= (member$f (pair$d ?v0 ?v1 )(sigma$d ?v2 ?v3 ))(and (member$a ?v0 ?v2 )(member$b ?v1 (fun_app$z ?v3 ?v0 ))))):named a35 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A_set$ )(?v3 A_a_b_prod_set_fun$ ))(= (member$g (pair$e ?v0 ?v1 )(sigma$e ?v2 ?v3 ))(and (member$ ?v0 ?v2 )(member$b ?v1 (fun_app$aa ?v3 ?v0 ))))):named a36 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 B$ )(?v2 A_b_prod_set$ )(?v3 A_b_prod_b_set_fun$ ))(= (member$h (pair$f ?v0 ?v1 )(sigma$f ?v2 ?v3 ))(and (member$b ?v0 ?v2 )(member$a ?v1 (fun_app$ab ?v3 ?v0 ))))):named a37 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A$ )(?v2 A_b_prod_set$ )(?v3 A_b_prod_a_set_fun$ ))(= (member$i (pair$g ?v0 ?v1 )(sigma$g ?v2 ?v3 ))(and (member$b ?v0 ?v2 )(member$ ?v1 (fun_app$ac ?v3 ?v0 ))))):named a38 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_prod_stream$ )(?v2 B_set$ )(?v3 B_a_b_prod_stream_set_fun$ ))(= (member$j (pair$h ?v0 ?v1 )(sigma$h ?v2 ?v3 ))(and (member$a ?v0 ?v2 )(member$k ?v1 (fun_app$ad ?v3 ?v0 ))))):named a39 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod_stream$ )(?v2 A_set$ )(?v3 A_a_b_prod_stream_set_fun$ ))(= (member$l (pair$i ?v0 ?v1 )(sigma$i ?v2 ?v3 ))(and (member$ ?v0 ?v2 )(member$k ?v1 (fun_app$ae ?v3 ?v0 ))))):named a40 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 B$ )(?v3 A_b_set_fun$ ))(=> (and (member$ ?v0 ?v1 )(member$a ?v2 (fun_app$a ?v3 ?v0 )))(member$b (pair$ ?v0 ?v2 )(sigma$ ?v1 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 B$ )(?v3 B_b_set_fun$ ))(=> (and (member$a ?v0 ?v1 )(member$a ?v2 (fun_app$w ?v3 ?v0 )))(member$c (pair$a ?v0 ?v2 )(sigma$a ?v1 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 A$ )(?v3 B_a_set_fun$ ))(=> (and (member$a ?v0 ?v1 )(member$ ?v2 (fun_app$x ?v3 ?v0 )))(member$d (pair$b ?v0 ?v2 )(sigma$b ?v1 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ )(?v3 A_a_set_fun$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v2 (fun_app$y ?v3 ?v0 )))(member$e (pair$c ?v0 ?v2 )(sigma$c ?v1 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 A_b_prod$ )(?v3 B_a_b_prod_set_fun$ ))(=> (and (member$a ?v0 ?v1 )(member$b ?v2 (fun_app$z ?v3 ?v0 )))(member$f (pair$d ?v0 ?v2 )(sigma$d ?v1 ?v3 )))):named a45 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_b_prod$ )(?v3 A_a_b_prod_set_fun$ ))(=> (and (member$ ?v0 ?v1 )(member$b ?v2 (fun_app$aa ?v3 ?v0 )))(member$g (pair$e ?v0 ?v2 )(sigma$e ?v1 ?v3 )))):named a46 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_set$ )(?v2 B$ )(?v3 A_b_prod_b_set_fun$ ))(=> (and (member$b ?v0 ?v1 )(member$a ?v2 (fun_app$ab ?v3 ?v0 )))(member$h (pair$f ?v0 ?v2 )(sigma$f ?v1 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_set$ )(?v2 A$ )(?v3 A_b_prod_a_set_fun$ ))(=> (and (member$b ?v0 ?v1 )(member$ ?v2 (fun_app$ac ?v3 ?v0 )))(member$i (pair$g ?v0 ?v2 )(sigma$g ?v1 ?v3 )))):named a48 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 A_b_prod_stream$ )(?v3 B_a_b_prod_stream_set_fun$ ))(=> (and (member$a ?v0 ?v1 )(member$k ?v2 (fun_app$ad ?v3 ?v0 )))(member$j (pair$h ?v0 ?v2 )(sigma$h ?v1 ?v3 )))):named a49 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_b_prod_stream$ )(?v3 A_a_b_prod_stream_set_fun$ ))(=> (and (member$ ?v0 ?v1 )(member$k ?v2 (fun_app$ae ?v3 ?v0 )))(member$l (pair$i ?v0 ?v2 )(sigma$i ?v1 ?v3 )))):named a50 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (sproduct$ ?v0 ?v1 )(smerge$j (smap$g (uud$ ?v1 )?v0 )))):named a51 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_stream$ ))(= (sproduct$a ?v0 ?v1 )(smerge$k (smap$h (uuf$ ?v1 )?v0 )))):named a52 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_b_prod_stream_stream$ ))(= (sproduct$b ?v0 ?v1 )(smerge$l (smap$i (uuh$ ?v1 )?v0 )))):named a53 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_b_prod_stream$ ))(= (sproduct$c ?v0 ?v1 )(smerge$m (smap$j (uuj$ ?v1 )?v0 )))):named a54 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (sproduct$d ?v0 ?v1 )(smerge$n (smap$k (uul$ ?v1 )?v0 )))):named a55 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_stream$ ))(= (sproduct$e ?v0 ?v1 )(smerge$g (smap$f (uum$ ?v1 )?v0 )))):named a56 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream_set$ )(?v2 A_b_prod_stream_a_b_prod_set_fun$ ))(= (member$b ?v0 (supremum$ ?v1 ?v2 ))(exists ((?v3 A_b_prod_stream$ ))(and (member$k ?v3 ?v1 )(member$b ?v0 (fun_app$v ?v2 ?v3 )))))):named a57 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 B_b_set_fun$ ))(= (member$a ?v0 (supremum$j ?v1 ?v2 ))(exists ((?v3 B$ ))(and (member$a ?v3 ?v1 )(member$a ?v0 (fun_app$w ?v2 ?v3 )))))):named a58 ))
(assert (! (forall ((?v0 B$ )(?v1 A_set$ )(?v2 A_b_set_fun$ ))(= (member$a ?v0 (supremum$k ?v1 ?v2 ))(exists ((?v3 A$ ))(and (member$ ?v3 ?v1 )(member$a ?v0 (fun_app$a ?v2 ?v3 )))))):named a59 ))
(assert (! (forall ((?v0 A$ )(?v1 B_set$ )(?v2 B_a_set_fun$ ))(= (member$ ?v0 (supremum$l ?v1 ?v2 ))(exists ((?v3 B$ ))(and (member$a ?v3 ?v1 )(member$ ?v0 (fun_app$x ?v2 ?v3 )))))):named a60 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_a_set_fun$ ))(= (member$ ?v0 (supremum$m ?v1 ?v2 ))(exists ((?v3 A$ ))(and (member$ ?v3 ?v1 )(member$ ?v0 (fun_app$y ?v2 ?v3 )))))):named a61 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream_set$ )(?v2 B_stream_b_set_fun$ ))(= (member$a ?v0 (supremum$i ?v1 ?v2 ))(exists ((?v3 B_stream$ ))(and (member$m ?v3 ?v1 )(member$a ?v0 (fun_app$b ?v2 ?v3 )))))):named a62 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream_set$ )(?v2 A_stream_a_set_fun$ ))(= (member$ ?v0 (supremum$h ?v1 ?v2 ))(exists ((?v3 A_stream$ ))(and (member$n ?v3 ?v1 )(member$ ?v0 (fun_app$o ?v2 ?v3 )))))):named a63 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_prod_set$ )(?v2 A_b_prod_b_set_fun$ ))(= (member$a ?v0 (supremum$n ?v1 ?v2 ))(exists ((?v3 A_b_prod$ ))(and (member$b ?v3 ?v1 )(member$a ?v0 (fun_app$ab ?v2 ?v3 )))))):named a64 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod_set$ )(?v2 A_b_prod_a_set_fun$ ))(= (member$ ?v0 (supremum$o ?v1 ?v2 ))(exists ((?v3 A_b_prod$ ))(and (member$b ?v3 ?v1 )(member$ ?v0 (fun_app$ac ?v2 ?v3 )))))):named a65 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 B_set$ )(?v2 B_a_b_prod_set_fun$ ))(= (member$b ?v0 (supremum$p ?v1 ?v2 ))(exists ((?v3 B$ ))(and (member$a ?v3 ?v1 )(member$b ?v0 (fun_app$z ?v2 ?v3 )))))):named a66 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_stream_set$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream_a_b_prod_set_fun$ ))(=> (and (member$k ?v0 ?v1 )(member$b ?v2 (fun_app$v ?v3 ?v0 )))(member$b ?v2 (supremum$ ?v1 ?v3 )))):named a67 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 B$ )(?v3 B_b_set_fun$ ))(=> (and (member$a ?v0 ?v1 )(member$a ?v2 (fun_app$w ?v3 ?v0 )))(member$a ?v2 (supremum$j ?v1 ?v3 )))):named a68 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 A$ )(?v3 B_a_set_fun$ ))(=> (and (member$a ?v0 ?v1 )(member$ ?v2 (fun_app$x ?v3 ?v0 )))(member$ ?v2 (supremum$l ?v1 ?v3 )))):named a69 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 B$ )(?v3 A_b_set_fun$ ))(=> (and (member$ ?v0 ?v1 )(member$a ?v2 (fun_app$a ?v3 ?v0 )))(member$a ?v2 (supremum$k ?v1 ?v3 )))):named a70 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ )(?v3 A_a_set_fun$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v2 (fun_app$y ?v3 ?v0 )))(member$ ?v2 (supremum$m ?v1 ?v3 )))):named a71 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_set$ )(?v2 B$ )(?v3 B_stream_b_set_fun$ ))(=> (and (member$m ?v0 ?v1 )(member$a ?v2 (fun_app$b ?v3 ?v0 )))(member$a ?v2 (supremum$i ?v1 ?v3 )))):named a72 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_set$ )(?v2 A$ )(?v3 A_stream_a_set_fun$ ))(=> (and (member$n ?v0 ?v1 )(member$ ?v2 (fun_app$o ?v3 ?v0 )))(member$ ?v2 (supremum$h ?v1 ?v3 )))):named a73 ))
(assert (! (forall ((?v0 B$ )(?v1 B_set$ )(?v2 A_b_prod$ )(?v3 B_a_b_prod_set_fun$ ))(=> (and (member$a ?v0 ?v1 )(member$b ?v2 (fun_app$z ?v3 ?v0 )))(member$b ?v2 (supremum$p ?v1 ?v3 )))):named a74 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_b_prod$ )(?v3 A_a_b_prod_set_fun$ ))(=> (and (member$ ?v0 ?v1 )(member$b ?v2 (fun_app$aa ?v3 ?v0 )))(member$b ?v2 (supremum$q ?v1 ?v3 )))):named a75 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_set$ )(?v2 B$ )(?v3 A_b_prod_b_set_fun$ ))(=> (and (member$b ?v0 ?v1 )(member$a ?v2 (fun_app$ab ?v3 ?v0 )))(member$a ?v2 (supremum$n ?v1 ?v3 )))):named a76 ))
(assert (! (forall ((?v0 A_b_prod_stream_set$ )(?v1 A_b_prod_stream_a_b_prod_set_fun$ )(?v2 A_b_prod_bool_fun$ ))(= (exists ((?v3 A_b_prod$ ))(and (member$b ?v3 (supremum$ ?v0 ?v1 ))(fun_app$af ?v2 ?v3 )))(exists ((?v3 A_b_prod_stream$ ))(and (member$k ?v3 ?v0 )(exists ((?v4 A_b_prod$ ))(and (member$b ?v4 (fun_app$v ?v1 ?v3 ))(fun_app$af ?v2 ?v4 ))))))):named a77 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_b_set_fun$ )(?v2 B_bool_fun$ ))(= (exists ((?v3 B$ ))(and (member$a ?v3 (supremum$j ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(exists ((?v3 B$ ))(and (member$a ?v3 ?v0 )(exists ((?v4 B$ ))(and (member$a ?v4 (fun_app$w ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a78 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_b_set_fun$ )(?v2 B_bool_fun$ ))(= (exists ((?v3 B$ ))(and (member$a ?v3 (supremum$k ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(exists ((?v3 A$ ))(and (member$ ?v3 ?v0 )(exists ((?v4 B$ ))(and (member$a ?v4 (fun_app$a ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a79 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$ ?v3 (supremum$l ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(exists ((?v3 B$ ))(and (member$a ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$ ?v4 (fun_app$x ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a80 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$ ?v3 (supremum$m ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(exists ((?v3 A$ ))(and (member$ ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$ ?v4 (fun_app$y ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a81 ))
(assert (! (forall ((?v0 B_stream_set$ )(?v1 B_stream_b_set_fun$ )(?v2 B_bool_fun$ ))(= (exists ((?v3 B$ ))(and (member$a ?v3 (supremum$i ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(exists ((?v3 B_stream$ ))(and (member$m ?v3 ?v0 )(exists ((?v4 B$ ))(and (member$a ?v4 (fun_app$b ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a82 ))
(assert (! (forall ((?v0 A_stream_set$ )(?v1 A_stream_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$ ?v3 (supremum$h ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(exists ((?v3 A_stream$ ))(and (member$n ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$ ?v4 (fun_app$o ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a83 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_b_set_fun$ )(?v2 B_bool_fun$ ))(= (exists ((?v3 B$ ))(and (member$a ?v3 (supremum$n ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(exists ((?v3 A_b_prod$ ))(and (member$b ?v3 ?v0 )(exists ((?v4 B$ ))(and (member$a ?v4 (fun_app$ab ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a84 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$ ?v3 (supremum$o ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(exists ((?v3 A_b_prod$ ))(and (member$b ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$ ?v4 (fun_app$ac ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a85 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_a_b_prod_set_fun$ )(?v2 A_b_prod_bool_fun$ ))(= (exists ((?v3 A_b_prod$ ))(and (member$b ?v3 (supremum$p ?v0 ?v1 ))(fun_app$af ?v2 ?v3 )))(exists ((?v3 B$ ))(and (member$a ?v3 ?v0 )(exists ((?v4 A_b_prod$ ))(and (member$b ?v4 (fun_app$z ?v1 ?v3 ))(fun_app$af ?v2 ?v4 ))))))):named a86 ))
(assert (! (forall ((?v0 A_b_prod_stream_set$ )(?v1 A_b_prod_stream_a_b_prod_set_fun$ )(?v2 A_b_prod_bool_fun$ ))(= (exists ((?v3 A_b_prod$ ))(and (member$b ?v3 (supremum$ ?v0 ?v1 ))(fun_app$af ?v2 ?v3 )))(exists ((?v3 A_b_prod_stream$ ))(and (member$k ?v3 ?v0 )(exists ((?v4 A_b_prod$ ))(and (member$b ?v4 (fun_app$v ?v1 ?v3 ))(fun_app$af ?v2 ?v4 ))))))):named a87 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_b_set_fun$ )(?v2 B_bool_fun$ ))(= (exists ((?v3 B$ ))(and (member$a ?v3 (supremum$j ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(exists ((?v3 B$ ))(and (member$a ?v3 ?v0 )(exists ((?v4 B$ ))(and (member$a ?v4 (fun_app$w ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a88 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_b_set_fun$ )(?v2 B_bool_fun$ ))(= (exists ((?v3 B$ ))(and (member$a ?v3 (supremum$k ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(exists ((?v3 A$ ))(and (member$ ?v3 ?v0 )(exists ((?v4 B$ ))(and (member$a ?v4 (fun_app$a ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a89 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$ ?v3 (supremum$l ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(exists ((?v3 B$ ))(and (member$a ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$ ?v4 (fun_app$x ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a90 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$ ?v3 (supremum$m ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(exists ((?v3 A$ ))(and (member$ ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$ ?v4 (fun_app$y ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a91 ))
(assert (! (forall ((?v0 B_stream_set$ )(?v1 B_stream_b_set_fun$ )(?v2 B_bool_fun$ ))(= (exists ((?v3 B$ ))(and (member$a ?v3 (supremum$i ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(exists ((?v3 B_stream$ ))(and (member$m ?v3 ?v0 )(exists ((?v4 B$ ))(and (member$a ?v4 (fun_app$b ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a92 ))
(assert (! (forall ((?v0 A_stream_set$ )(?v1 A_stream_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$ ?v3 (supremum$h ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(exists ((?v3 A_stream$ ))(and (member$n ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$ ?v4 (fun_app$o ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a93 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_b_set_fun$ )(?v2 B_bool_fun$ ))(= (exists ((?v3 B$ ))(and (member$a ?v3 (supremum$n ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(exists ((?v3 A_b_prod$ ))(and (member$b ?v3 ?v0 )(exists ((?v4 B$ ))(and (member$a ?v4 (fun_app$ab ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a94 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$ ?v3 (supremum$o ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(exists ((?v3 A_b_prod$ ))(and (member$b ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$ ?v4 (fun_app$ac ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a95 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_a_b_prod_set_fun$ )(?v2 A_b_prod_bool_fun$ ))(= (exists ((?v3 A_b_prod$ ))(and (member$b ?v3 (supremum$p ?v0 ?v1 ))(fun_app$af ?v2 ?v3 )))(exists ((?v3 B$ ))(and (member$a ?v3 ?v0 )(exists ((?v4 A_b_prod$ ))(and (member$b ?v4 (fun_app$z ?v1 ?v3 ))(fun_app$af ?v2 ?v4 ))))))):named a96 ))
(assert (! (forall ((?v0 A_b_prod_stream_set$ )(?v1 A_b_prod_stream_a_b_prod_set_fun$ )(?v2 A_b_prod_bool_fun$ ))(= (forall ((?v3 A_b_prod$ ))(=> (member$b ?v3 (supremum$ ?v0 ?v1 ))(fun_app$af ?v2 ?v3 )))(forall ((?v3 A_b_prod_stream$ ))(=> (member$k ?v3 ?v0 )(forall ((?v4 A_b_prod$ ))(=> (member$b ?v4 (fun_app$v ?v1 ?v3 ))(fun_app$af ?v2 ?v4 ))))))):named a97 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_b_set_fun$ )(?v2 B_bool_fun$ ))(= (forall ((?v3 B$ ))(=> (member$a ?v3 (supremum$j ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(forall ((?v3 B$ ))(=> (member$a ?v3 ?v0 )(forall ((?v4 B$ ))(=> (member$a ?v4 (fun_app$w ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a98 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_b_set_fun$ )(?v2 B_bool_fun$ ))(= (forall ((?v3 B$ ))(=> (member$a ?v3 (supremum$k ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(forall ((?v3 A$ ))(=> (member$ ?v3 ?v0 )(forall ((?v4 B$ ))(=> (member$a ?v4 (fun_app$a ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a99 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$ ?v3 (supremum$l ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(forall ((?v3 B$ ))(=> (member$a ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$ ?v4 (fun_app$x ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a100 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$ ?v3 (supremum$m ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(forall ((?v3 A$ ))(=> (member$ ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$ ?v4 (fun_app$y ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a101 ))
(assert (! (forall ((?v0 B_stream_set$ )(?v1 B_stream_b_set_fun$ )(?v2 B_bool_fun$ ))(= (forall ((?v3 B$ ))(=> (member$a ?v3 (supremum$i ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(forall ((?v3 B_stream$ ))(=> (member$m ?v3 ?v0 )(forall ((?v4 B$ ))(=> (member$a ?v4 (fun_app$b ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a102 ))
(assert (! (forall ((?v0 A_stream_set$ )(?v1 A_stream_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$ ?v3 (supremum$h ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(forall ((?v3 A_stream$ ))(=> (member$n ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$ ?v4 (fun_app$o ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a103 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_b_set_fun$ )(?v2 B_bool_fun$ ))(= (forall ((?v3 B$ ))(=> (member$a ?v3 (supremum$n ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(forall ((?v3 A_b_prod$ ))(=> (member$b ?v3 ?v0 )(forall ((?v4 B$ ))(=> (member$a ?v4 (fun_app$ab ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a104 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$ ?v3 (supremum$o ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(forall ((?v3 A_b_prod$ ))(=> (member$b ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$ ?v4 (fun_app$ac ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a105 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_a_b_prod_set_fun$ )(?v2 A_b_prod_bool_fun$ ))(= (forall ((?v3 A_b_prod$ ))(=> (member$b ?v3 (supremum$p ?v0 ?v1 ))(fun_app$af ?v2 ?v3 )))(forall ((?v3 B$ ))(=> (member$a ?v3 ?v0 )(forall ((?v4 A_b_prod$ ))(=> (member$b ?v4 (fun_app$z ?v1 ?v3 ))(fun_app$af ?v2 ?v4 ))))))):named a106 ))
(assert (! (forall ((?v0 A_b_prod_stream_set$ )(?v1 A_b_prod_stream_a_b_prod_set_fun$ )(?v2 A_b_prod_bool_fun$ ))(= (forall ((?v3 A_b_prod$ ))(=> (member$b ?v3 (supremum$ ?v0 ?v1 ))(fun_app$af ?v2 ?v3 )))(forall ((?v3 A_b_prod_stream$ ))(=> (member$k ?v3 ?v0 )(forall ((?v4 A_b_prod$ ))(=> (member$b ?v4 (fun_app$v ?v1 ?v3 ))(fun_app$af ?v2 ?v4 ))))))):named a107 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_b_set_fun$ )(?v2 B_bool_fun$ ))(= (forall ((?v3 B$ ))(=> (member$a ?v3 (supremum$j ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(forall ((?v3 B$ ))(=> (member$a ?v3 ?v0 )(forall ((?v4 B$ ))(=> (member$a ?v4 (fun_app$w ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a108 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_b_set_fun$ )(?v2 B_bool_fun$ ))(= (forall ((?v3 B$ ))(=> (member$a ?v3 (supremum$k ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(forall ((?v3 A$ ))(=> (member$ ?v3 ?v0 )(forall ((?v4 B$ ))(=> (member$a ?v4 (fun_app$a ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a109 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$ ?v3 (supremum$l ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(forall ((?v3 B$ ))(=> (member$a ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$ ?v4 (fun_app$x ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a110 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$ ?v3 (supremum$m ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(forall ((?v3 A$ ))(=> (member$ ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$ ?v4 (fun_app$y ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a111 ))
(assert (! (forall ((?v0 B_stream_set$ )(?v1 B_stream_b_set_fun$ )(?v2 B_bool_fun$ ))(= (forall ((?v3 B$ ))(=> (member$a ?v3 (supremum$i ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(forall ((?v3 B_stream$ ))(=> (member$m ?v3 ?v0 )(forall ((?v4 B$ ))(=> (member$a ?v4 (fun_app$b ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a112 ))
(assert (! (forall ((?v0 A_stream_set$ )(?v1 A_stream_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$ ?v3 (supremum$h ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(forall ((?v3 A_stream$ ))(=> (member$n ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$ ?v4 (fun_app$o ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a113 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_b_set_fun$ )(?v2 B_bool_fun$ ))(= (forall ((?v3 B$ ))(=> (member$a ?v3 (supremum$n ?v0 ?v1 ))(fun_app$ag ?v2 ?v3 )))(forall ((?v3 A_b_prod$ ))(=> (member$b ?v3 ?v0 )(forall ((?v4 B$ ))(=> (member$a ?v4 (fun_app$ab ?v1 ?v3 ))(fun_app$ag ?v2 ?v4 ))))))):named a114 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$ ?v3 (supremum$o ?v0 ?v1 ))(fun_app$ah ?v2 ?v3 )))(forall ((?v3 A_b_prod$ ))(=> (member$b ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$ ?v4 (fun_app$ac ?v1 ?v3 ))(fun_app$ah ?v2 ?v4 ))))))):named a115 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_a_b_prod_set_fun$ )(?v2 A_b_prod_bool_fun$ ))(= (forall ((?v3 A_b_prod$ ))(=> (member$b ?v3 (supremum$p ?v0 ?v1 ))(fun_app$af ?v2 ?v3 )))(forall ((?v3 B$ ))(=> (member$a ?v3 ?v0 )(forall ((?v4 A_b_prod$ ))(=> (member$b ?v4 (fun_app$z ?v1 ?v3 ))(fun_app$af ?v2 ?v4 ))))))):named a116 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B$ )(?v3 B$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a117 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 B$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a118 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod_stream$ )(?v2 A$ )(?v3 A_b_prod_stream$ ))(= (= (pair$i ?v0 ?v1 )(pair$i ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a119 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a120 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a121 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a122 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B$ )(?v3 B$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a123 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 B$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a124 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod_stream$ )(?v2 A$ )(?v3 A_b_prod_stream$ ))(= (= (pair$i ?v0 ?v1 )(pair$i ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a125 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a126 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a127 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a128 ))
(check-sat )
;(get-unsat-core )
