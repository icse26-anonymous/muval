;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()A_stream$ )
(declare-fun drop$ (Nat$ A_list$ )A_list$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun take$ (Nat$ A_list$ )A_list$ )
(declare-fun zero$ ()Nat$ )
(declare-fun minus$ (Nat$ )Nat_nat_fun$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun replicate$ (Nat$ A$ )A_list$ )
(assert (! (not (= (drop$ n$ (stake$ m$ s$ ))(stake$ (fun_app$ (minus$ m$ )n$ )(sdrop$ n$ s$ )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (minus$ (fun_app$ (minus$ ?v0 )?v1 ))?v2 )(fun_app$ (minus$ (fun_app$ (minus$ ?v0 )?v2 ))?v1 ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (minus$ (fun_app$ (minus$ ?v0 )?v1 ))?v2 )(fun_app$ (minus$ (fun_app$ (minus$ ?v0 )?v2 ))?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (sdrop$ ?v0 (smap$ ?v1 ?v2 ))(smap$ ?v1 (sdrop$ ?v0 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (size$ (stake$ ?v0 ?v1 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A$ ))(= (drop$ ?v0 (replicate$ ?v1 ?v2 ))(replicate$ (fun_app$ (minus$ ?v1 )?v0 )?v2 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (sdrop$ zero$ ?v0 )?v0 ):pattern ((sdrop$ zero$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (size$ (drop$ ?v0 ?v1 ))(fun_app$ (minus$ (size$ ?v1 ))?v0 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_list$ ))(= (drop$ ?v0 (take$ ?v1 ?v2 ))(take$ (fun_app$ (minus$ ?v1 )?v0 )(drop$ ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (minus$ zero$ )?v0 )zero$ )):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (minus$ ?v0 )?v0 )zero$ ):pattern ((minus$ ?v0 )))):named a11 ))
(check-sat )
;(get-unsat-core )
