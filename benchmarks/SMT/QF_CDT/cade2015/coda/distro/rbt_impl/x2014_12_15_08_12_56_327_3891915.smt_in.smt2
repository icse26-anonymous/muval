;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_b_b_fun_fun$ 0 )
(declare-sort A_b_c_fun_fun$ 0 )
(declare-sort A_c_b_fun_fun$ 0 )
(declare-sort A_c_c_fun_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_rbt_a_b_rbt_fun$ 0 )
(declare-sort A_c_rbt_a_c_rbt_fun$ 0 )
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-sort A_c_rbt$ 0)
(declare-sort A_list$ 0)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun empty$a ()A_c_rbt$)
(declare-fun selecte$ (A_c_rbt$)Color$)
(declare-fun selectf$ (A_c_rbt$)A_c_rbt$)
(declare-fun selectg$ (A_c_rbt$)A$)
(declare-fun selecth$ (A_c_rbt$)C$)
(declare-fun selecti$ (A_c_rbt$)A_c_rbt$)
(declare-fun branch$a (Color$ A_c_rbt$ A$ C$ A_c_rbt$ )A_c_rbt$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun f$ ()A_c_b_fun_fun$ )
(declare-fun t$ ()A_c_rbt$ )
(declare-fun map$ (A_c_b_fun_fun$ A_c_rbt$ )A_b_rbt$ )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun map$a (A_b_b_fun_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun map$b (A_b_c_fun_fun$ A_b_rbt$ )A_c_rbt$ )
(declare-fun map$c (A_c_c_fun_fun$ A_c_rbt$ )A_c_rbt$ )
(declare-fun keys$a (A_c_rbt$ )A_list$ )
(declare-fun paint$ (Color$ A_b_rbt$ )A_b_rbt$ )
(declare-fun is_rbt$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun paint$a (Color$ A_c_rbt$ )A_c_rbt$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun is_rbt$a (A_a_bool_fun_fun$ A_c_rbt$ )Bool )
(declare-fun lexordp$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_b_rbt_a_b_rbt_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$c (A_c_rbt_a_c_rbt_fun$ A_c_rbt$ )A_c_rbt$ )
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun rbt_less$ (A_a_bool_fun_fun$ A$ A_b_rbt$ )Bool )
(declare-fun rbt_less$a (A_a_bool_fun_fun$ A$ A_c_rbt$ )Bool )
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun rbt_greater$ (A_a_bool_fun_fun$ A$ A_b_rbt$ )Bool )
(declare-fun rbt_sorted$a (A_a_bool_fun_fun$ A_c_rbt$ )Bool )
(declare-fun rbt_greater$a (A_a_bool_fun_fun$ A$ A_c_rbt$ )Bool )
(declare-fun rbt_map_entry$ (A_a_bool_fun_fun$ A$ B_b_fun$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun rbt_map_entry$a (A_a_bool_fun_fun$ A$ C_c_fun$ )A_c_rbt_a_c_rbt_fun$ )
(declare-fun greaterThanLessThan$ (A_a_bool_fun_fun$ A$ A$ )A_set$ )
(assert (! (not (= (rbt_sorted$ less$ (map$ f$ t$ ))(rbt_sorted$a less$ t$ ))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (is_rbt$ less$ ?v0 )(rbt_sorted$ less$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_c_rbt$ ))(=> (is_rbt$a less$ ?v0 )(rbt_sorted$a less$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_fun$ )(?v2 A_b_rbt$ ))(= (rbt_sorted$ less$ (fun_app$b (rbt_map_entry$ less$ ?v0 ?v1 )?v2 ))(rbt_sorted$ less$ ?v2 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 C_c_fun$ )(?v2 A_c_rbt$ ))(= (rbt_sorted$a less$ (fun_app$c (rbt_map_entry$a less$ ?v0 ?v1 )?v2 ))(rbt_sorted$a less$ ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 Color$ ))(=> (rbt_sorted$ less$ ?v0 )(rbt_sorted$ less$ (paint$ ?v1 ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 Color$ ))(=> (rbt_sorted$a less$ ?v0 )(rbt_sorted$a less$ (paint$a ?v1 ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_b_fun_fun$ )(?v2 A_b_rbt$ ))(= (rbt_less$ less$ ?v0 (map$a ?v1 ?v2 ))(rbt_less$ less$ ?v0 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_c_fun_fun$ )(?v2 A_b_rbt$ ))(= (rbt_less$a less$ ?v0 (map$b ?v1 ?v2 ))(rbt_less$ less$ ?v0 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_c_fun_fun$ )(?v2 A_c_rbt$ ))(= (rbt_less$a less$ ?v0 (map$c ?v1 ?v2 ))(rbt_less$a less$ ?v0 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_b_fun_fun$ )(?v2 A_c_rbt$ ))(= (rbt_less$ less$ ?v0 (map$ ?v1 ?v2 ))(rbt_less$a less$ ?v0 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_b_fun_fun$ )(?v2 A_b_rbt$ ))(= (rbt_greater$ less$ ?v0 (map$a ?v1 ?v2 ))(rbt_greater$ less$ ?v0 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_c_fun_fun$ )(?v2 A_b_rbt$ ))(= (rbt_greater$a less$ ?v0 (map$b ?v1 ?v2 ))(rbt_greater$ less$ ?v0 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_c_fun_fun$ )(?v2 A_c_rbt$ ))(= (rbt_greater$a less$ ?v0 (map$c ?v1 ?v2 ))(rbt_greater$a less$ ?v0 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_b_fun_fun$ )(?v2 A_c_rbt$ ))(= (rbt_greater$ less$ ?v0 (map$ ?v1 ?v2 ))(rbt_greater$a less$ ?v0 ?v2 ))):named a16 ))
(assert (! (= (rbt_sorted$ less$ empty$ )true ):named a17 ))
(assert (! (= (rbt_sorted$a less$ empty$a )true ):named a18 ))
(assert (! (forall ((?v0 A_list$ ))(lexordp_eq$ less$ ?v0 ?v0 )):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (member$ ?v0 (greaterThanLessThan$ less$ ?v1 ?v2 ))(and (fun_app$ (fun_app$a less$ ?v1 )?v0 )(fun_app$ (fun_app$a less$ ?v0 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_list$ ))(=> (forall ((?v1 A$ ))(not (fun_app$ (fun_app$a less$ ?v1 )?v1 )))(not (lexordp$ less$ ?v0 ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (lessThan$ less$ ?v1 ))(fun_app$ (fun_app$a less$ ?v0 )?v1 ))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (greaterThan$ less$ ?v1 ))(fun_app$ (fun_app$a less$ ?v1 )?v0 ))):named a23 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_b_rbt$ ))(=> (is_rbt$ ?v0 ?v1 )(rbt_sorted$ ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_c_rbt$ ))(=> (is_rbt$a ?v0 ?v1 )(rbt_sorted$a ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_b_rbt$ ))(= (keys$ (map$a ?v0 ?v1 ))(keys$ ?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ )(?v1 A_b_rbt$ ))(= (keys$a (map$b ?v0 ?v1 ))(keys$ ?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ )(?v1 A_c_rbt$ ))(= (keys$a (map$c ?v0 ?v1 ))(keys$a ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 A_c_rbt$ ))(= (keys$ (map$ ?v0 ?v1 ))(keys$a ?v1 ))):named a29 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (lexordp$ less$ ?v0 ?v1 )(lexordp_eq$ less$ ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 C_c_fun$ ))(! (= (fun_app$c (rbt_map_entry$a less$ ?v0 ?v1 )empty$a )empty$a ):pattern ((rbt_map_entry$a less$ ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_fun$ ))(! (= (fun_app$b (rbt_map_entry$ less$ ?v0 ?v1 )empty$ )empty$ ):pattern ((rbt_map_entry$ less$ ?v0 ?v1 )))):named a32 ))
(check-sat )
;(get-unsat-core )
