;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_list$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-fun nil$a ()A_b_prod_list$)
(declare-fun hd$a (A_b_prod_list$)A_b_prod$)
(declare-fun tl$a (A_b_prod_list$)A_b_prod_list$)
(declare-fun cons$a (A_b_prod$ A_b_prod_list$ )A_b_prod_list$)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun t$ ()A_b_rbt$ )
(declare-fun uu$ ()A_b_prod_a_fun$ )
(declare-fun map$ (A_b_prod_a_fun$ A_b_prod_list$ )A_list$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun entries$ (A_b_rbt$ )A_b_prod_list$ )
(declare-fun fun_app$ (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun distinct$ (A_list$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (distinct$ (map$ uu$ (entries$ t$ )))):named a1 ))
(assert (! (rbt_sorted$ less$ t$ ):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (fun_app$a (fun_app$b less$ ?v0 )?v1 ))(or (fun_app$a (fun_app$b less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v0 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$a (fun_app$b less$ ?v1 )?v0 )false )))false )):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(=> (not false )(fun_app$a (fun_app$b less$ ?v1 )?v0 )))false )):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v2 ))(fun_app$a (fun_app$b less$ ?v0 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v2 ))(fun_app$a (fun_app$b less$ ?v0 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v2 )?v0 ))(fun_app$a (fun_app$b less$ ?v2 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v0 ))false )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v0 ))false )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v0 ))false )):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$a (fun_app$b less$ ?v0 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(= (= ?v1 ?v0 )false ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(= (= ?v0 ?v1 )false ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 Bool ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(= (=> (fun_app$a (fun_app$b less$ ?v1 )?v0 )?v2 )true ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(= (not (fun_app$a (fun_app$b less$ ?v1 )?v0 ))true ))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(not (fun_app$a (fun_app$b less$ ?v1 )?v0 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a19 ))
(check-sat )
;(get-unsat-core )
