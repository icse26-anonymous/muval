;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_b_b_fun_fun$ 0 )
(declare-sort A_b_c_fun_fun$ 0 )
(declare-sort A_c_b_fun_fun$ 0 )
(declare-sort A_c_c_fun_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_b_b_fun_fun_fun$ 0 )
(declare-sort A_c_c_c_fun_fun_fun$ 0 )
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-sort A_c_rbt$ 0)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun empty$a ()A_c_rbt$)
(declare-fun selecte$ (A_c_rbt$)Color$)
(declare-fun selectf$ (A_c_rbt$)A_c_rbt$)
(declare-fun selectg$ (A_c_rbt$)A$)
(declare-fun selecth$ (A_c_rbt$)C$)
(declare-fun selecti$ (A_c_rbt$)A_c_rbt$)
(declare-fun branch$a (Color$ A_c_rbt$ A$ C$ A_c_rbt$ )A_c_rbt$)
(declare-fun f$ ()A_c_b_fun_fun$ )
(declare-fun t$ ()A_c_rbt$ )
(declare-fun map$ (A_c_b_fun_fun$ A_c_rbt$ )A_b_rbt$ )
(declare-fun inv1$ (A_b_rbt$ )Bool )
(declare-fun inv2$ (A_b_rbt$ )Bool )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun map$a (A_b_b_fun_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun map$b (A_b_c_fun_fun$ A_b_rbt$ )A_c_rbt$ )
(declare-fun map$c (A_c_c_fun_fun$ A_c_rbt$ )A_c_rbt$ )
(declare-fun inv1$a (A_c_rbt$ )Bool )
(declare-fun inv2$a (A_c_rbt$ )Bool )
(declare-fun paint$ (Color$ A_b_rbt$ )A_b_rbt$ )
(declare-fun is_rbt$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun paint$a (Color$ A_c_rbt$ )A_c_rbt$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun is_rbt$a (A_a_bool_fun_fun$ A_c_rbt$ )Bool )
(declare-fun rbt_ins$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun color_of$ (A_b_rbt$ )Color$ )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun rbt_ins$a (A_a_bool_fun_fun$ A_c_c_c_fun_fun_fun$ A$ C$ A_c_rbt$ )A_c_rbt$ )
(declare-fun rbt_less$ (A_a_bool_fun_fun$ A$ A_b_rbt$ )Bool )
(declare-fun color_of$a (A_c_rbt$ )Color$ )
(declare-fun rbt_less$a (A_a_bool_fun_fun$ A$ A_c_rbt$ )Bool )
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun rbt_sorted$a (A_a_bool_fun_fun$ A_c_rbt$ )Bool )
(declare-fun rbt_map_entry$ (A_a_bool_fun_fun$ A$ B_b_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun rbt_map_entry$a (A_a_bool_fun_fun$ A$ C_c_fun$ A_c_rbt$ )A_c_rbt$ )
(assert (! (not (= (and (inv1$ (map$ f$ t$ ))(and (inv2$ (map$ f$ t$ ))(and (= (color_of$ (map$ f$ t$ ))b$ )(rbt_sorted$ less$ (map$ f$ t$ )))))(and (inv1$a t$ )(and (inv2$a t$ )(and (= (color_of$a t$ )b$ )(rbt_sorted$a less$ t$ )))))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_b_rbt$ ))(= (rbt_sorted$ less$ (map$a ?v0 ?v1 ))(rbt_sorted$ less$ ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 A_c_rbt$ ))(= (rbt_sorted$ less$ (map$ ?v0 ?v1 ))(rbt_sorted$a less$ ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ )(?v1 A_b_rbt$ ))(= (rbt_sorted$a less$ (map$b ?v0 ?v1 ))(rbt_sorted$ less$ ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ )(?v1 A_c_rbt$ ))(= (rbt_sorted$a less$ (map$c ?v0 ?v1 ))(rbt_sorted$a less$ ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (is_rbt$ less$ ?v0 )(rbt_sorted$ less$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_c_rbt$ ))(=> (is_rbt$a less$ ?v0 )(rbt_sorted$a less$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(! (= (is_rbt$ less$ ?v0 )(and (inv1$ ?v0 )(and (inv2$ ?v0 )(and (= (color_of$ ?v0 )b$ )(rbt_sorted$ less$ ?v0 ))))):pattern ((is_rbt$ less$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_c_rbt$ ))(! (= (is_rbt$a less$ ?v0 )(and (inv1$a ?v0 )(and (inv2$a ?v0 )(and (= (color_of$a ?v0 )b$ )(rbt_sorted$a less$ ?v0 ))))):pattern ((is_rbt$a less$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_b_b_fun_fun$ )(?v2 A_b_rbt$ ))(= (rbt_sorted$ ?v0 (map$a ?v1 ?v2 ))(rbt_sorted$ ?v0 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_c_b_fun_fun$ )(?v2 A_c_rbt$ ))(= (rbt_sorted$ ?v0 (map$ ?v1 ?v2 ))(rbt_sorted$a ?v0 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_b_c_fun_fun$ )(?v2 A_b_rbt$ ))(= (rbt_sorted$a ?v0 (map$b ?v1 ?v2 ))(rbt_sorted$ ?v0 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_c_c_fun_fun$ )(?v2 A_c_rbt$ ))(= (rbt_sorted$a ?v0 (map$c ?v1 ?v2 ))(rbt_sorted$a ?v0 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_b_rbt$ ))(= (inv1$ (map$a ?v0 ?v1 ))(inv1$ ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 A_c_rbt$ ))(= (inv1$ (map$ ?v0 ?v1 ))(inv1$a ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ )(?v1 A_b_rbt$ ))(= (inv1$a (map$b ?v0 ?v1 ))(inv1$ ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ )(?v1 A_c_rbt$ ))(= (inv1$a (map$c ?v0 ?v1 ))(inv1$a ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_b_rbt$ ))(= (inv2$ (map$a ?v0 ?v1 ))(inv2$ ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 A_c_rbt$ ))(= (inv2$ (map$ ?v0 ?v1 ))(inv2$a ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ )(?v1 A_b_rbt$ ))(= (inv2$a (map$b ?v0 ?v1 ))(inv2$ ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ )(?v1 A_c_rbt$ ))(= (inv2$a (map$c ?v0 ?v1 ))(inv2$a ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_b_rbt$ ))(= (color_of$ (map$a ?v0 ?v1 ))(color_of$ ?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 A_c_rbt$ ))(= (color_of$ (map$ ?v0 ?v1 ))(color_of$a ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ )(?v1 A_b_rbt$ ))(= (color_of$a (map$b ?v0 ?v1 ))(color_of$ ?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ )(?v1 A_c_rbt$ ))(= (color_of$a (map$c ?v0 ?v1 ))(color_of$a ?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_b_b_fun_fun_fun$ )(?v2 A$ )(?v3 B$ ))(=> (and (inv1$ ?v0 )(and (inv2$ ?v0 )(= (color_of$ ?v0 )b$ )))(inv1$ (rbt_ins$ less$ ?v1 ?v2 ?v3 ?v0 )))):named a27 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A_c_c_c_fun_fun_fun$ )(?v2 A$ )(?v3 C$ ))(=> (and (inv1$a ?v0 )(and (inv2$a ?v0 )(= (color_of$a ?v0 )b$ )))(inv1$a (rbt_ins$a less$ ?v1 ?v2 ?v3 ?v0 )))):named a28 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_b_b_fun_fun_fun$ )(?v2 A$ )(?v3 B$ ))(=> (and (inv1$ ?v0 )(inv2$ ?v0 ))(inv2$ (rbt_ins$ less$ ?v1 ?v2 ?v3 ?v0 )))):named a29 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A_c_c_c_fun_fun_fun$ )(?v2 A$ )(?v3 C$ ))(=> (and (inv1$a ?v0 )(inv2$a ?v0 ))(inv2$a (rbt_ins$a less$ ?v1 ?v2 ?v3 ?v0 )))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_fun$ )(?v2 A_b_rbt$ ))(= (color_of$ (rbt_map_entry$ less$ ?v0 ?v1 ?v2 ))(color_of$ ?v2 ))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 C_c_fun$ )(?v2 A_c_rbt$ ))(= (color_of$a (rbt_map_entry$a less$ ?v0 ?v1 ?v2 ))(color_of$a ?v2 ))):named a32 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_fun$ )(?v2 A_b_rbt$ ))(= (inv1$ (rbt_map_entry$ less$ ?v0 ?v1 ?v2 ))(inv1$ ?v2 ))):named a33 ))
(assert (! (forall ((?v0 A$ )(?v1 C_c_fun$ )(?v2 A_c_rbt$ ))(= (inv1$a (rbt_map_entry$a less$ ?v0 ?v1 ?v2 ))(inv1$a ?v2 ))):named a34 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_fun$ )(?v2 A_b_rbt$ ))(= (inv2$ (rbt_map_entry$ less$ ?v0 ?v1 ?v2 ))(inv2$ ?v2 ))):named a35 ))
(assert (! (forall ((?v0 A$ )(?v1 C_c_fun$ )(?v2 A_c_rbt$ ))(= (inv2$a (rbt_map_entry$a less$ ?v0 ?v1 ?v2 ))(inv2$a ?v2 ))):named a36 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_fun$ )(?v2 A_b_rbt$ ))(= (rbt_sorted$ less$ (rbt_map_entry$ less$ ?v0 ?v1 ?v2 ))(rbt_sorted$ less$ ?v2 ))):named a37 ))
(assert (! (forall ((?v0 A$ )(?v1 C_c_fun$ )(?v2 A_c_rbt$ ))(= (rbt_sorted$a less$ (rbt_map_entry$a less$ ?v0 ?v1 ?v2 ))(rbt_sorted$a less$ ?v2 ))):named a38 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 Color$ ))(=> (rbt_sorted$ less$ ?v0 )(rbt_sorted$ less$ (paint$ ?v1 ?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 Color$ ))(=> (rbt_sorted$a less$ ?v0 )(rbt_sorted$a less$ (paint$a ?v1 ?v0 )))):named a40 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_b_fun_fun$ )(?v2 A_b_rbt$ ))(= (rbt_less$ less$ ?v0 (map$a ?v1 ?v2 ))(rbt_less$ less$ ?v0 ?v2 ))):named a41 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_c_fun_fun$ )(?v2 A_b_rbt$ ))(= (rbt_less$a less$ ?v0 (map$b ?v1 ?v2 ))(rbt_less$ less$ ?v0 ?v2 ))):named a42 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_c_fun_fun$ )(?v2 A_c_rbt$ ))(= (rbt_less$a less$ ?v0 (map$c ?v1 ?v2 ))(rbt_less$a less$ ?v0 ?v2 ))):named a43 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_b_fun_fun$ )(?v2 A_c_rbt$ ))(= (rbt_less$ less$ ?v0 (map$ ?v1 ?v2 ))(rbt_less$a less$ ?v0 ?v2 ))):named a44 ))
(check-sat )
;(get-unsat-core )
