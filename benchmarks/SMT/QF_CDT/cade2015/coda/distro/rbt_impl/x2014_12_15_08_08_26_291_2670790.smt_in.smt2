;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_b_b_fun_fun_fun$ 0 )
(declare-sort A_b_rbt_a_b_rbt_fun$ 0 )
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun k$ ()A$ )
(declare-fun v$ ()B$ )
(declare-fun lt$ ()A_b_rbt$ )
(declare-fun rt$ ()A_b_rbt$ )
(declare-fun one$ ()Nat$ )
(declare-fun inv1$ (A_b_rbt$ )Bool )
(declare-fun inv2$ (A_b_rbt$ )Bool )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun inv1l$ (A_b_rbt$ )Bool )
(declare-fun paint$ (Color$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun balance$ (A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun bheight$ (A_b_rbt$ )Nat$ )
(declare-fun fun_app$ (A_b_rbt_a_b_rbt_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun rbt_ins$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun balance_left$ (A_b_rbt$ A$ B$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun balance_right$ (A_b_rbt$ A$ B$ )A_b_rbt_a_b_rbt_fun$ )
(assert (! (not (and (inv2$ (fun_app$ (balance_right$ lt$ k$ v$ )rt$ ))(= (bheight$ (fun_app$ (balance_right$ lt$ k$ v$ )rt$ ))(bheight$ lt$ )))):named a0 ))
(assert (! (inv1$ lt$ ):named a1 ))
(assert (! (inv2$ lt$ ):named a2 ))
(assert (! (inv2$ rt$ ):named a3 ))
(assert (! (= (bheight$ lt$ )(plus$ (bheight$ rt$ )one$ )):named a4 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_b_b_b_fun_fun_fun$ )(?v3 A$ )(?v4 B$ ))(=> (and (inv1$ ?v0 )(inv2$ ?v0 ))(= (bheight$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0 ))(bheight$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ ))(=> (and (inv2$ ?v0 )(and (inv2$ ?v1 )(= (bheight$ ?v0 )(bheight$ ?v1 ))))(inv2$ (balance$ ?v0 ?v2 ?v3 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (inv2$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(and (inv2$ ?v1 )(and (inv2$ ?v4 )(= (bheight$ ?v1 )(bheight$ ?v4 ))))):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a7 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 Color$ ))(=> (inv2$ ?v0 )(inv2$ (fun_app$ (paint$ ?v1 )?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ ))(=> (and (inv2$ ?v0 )(and (inv2$ ?v1 )(and (= (plus$ (bheight$ ?v0 )one$ )(bheight$ ?v1 ))(inv1$ ?v1 ))))(= (bheight$ (fun_app$ (balance_left$ ?v0 ?v2 ?v3 )?v1 ))(plus$ (bheight$ ?v0 )one$ )))):named a9 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ ))(=> (and (inv2$ ?v0 )(and (inv2$ ?v1 )(and (= (plus$ (bheight$ ?v0 )one$ )(bheight$ ?v1 ))(inv1$ ?v1 ))))(inv2$ (fun_app$ (balance_left$ ?v0 ?v2 ?v3 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_b_b_b_fun_fun_fun$ )(?v3 A$ )(?v4 B$ ))(=> (and (inv1$ ?v0 )(inv2$ ?v0 ))(inv2$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$ (balance_right$ empty$ ?v0 ?v1 )empty$ )empty$ ):pattern ((balance_right$ empty$ ?v0 ?v1 )))):named a12 ))
(assert (! (= (inv2$ empty$ )true ):named a13 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_b_b_b_fun_fun_fun$ )(?v3 A$ )(?v4 B$ ))(=> (and (inv1$ ?v0 )(inv2$ ?v0 ))(inv1l$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ )(?v5 Color$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ )(?v9 A_b_rbt$ ))(= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$ ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a15 ))
(assert (! (forall ((?v0 Color$ )(?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(! (= (fun_app$ (paint$ ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$ ?v0 ?v2 ?v3 ?v4 ?v5 )):pattern ((fun_app$ (paint$ ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a16 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (inv1l$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(and (inv1$ ?v1 )(inv1$ ?v4 ))):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a17 ))
(assert (! (= (inv1$ empty$ )true ):named a18 ))
(assert (! (= (inv1l$ empty$ )true ):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$ (balance_left$ empty$ ?v0 ?v1 )empty$ )empty$ ):pattern ((balance_left$ empty$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 Color$ ))(! (= (fun_app$ (paint$ ?v0 )empty$ )empty$ ):pattern ((paint$ ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (and (=> (= ?v0 empty$ )false )(forall ((?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))false )))false )):named a22 ))
(check-sat )
;(get-unsat-core )
