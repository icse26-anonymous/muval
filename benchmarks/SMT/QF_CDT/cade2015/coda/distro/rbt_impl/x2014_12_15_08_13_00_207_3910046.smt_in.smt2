;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_c_b_fun_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_option$ 0)
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-sort A_c_rbt$ 0)
(declare-sort C_option$ 0)
(declare-fun none$ ()B_option$)
(declare-fun the$ (B_option$)B$)
(declare-fun some$ (B$ )B_option$)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun empty$a ()A_c_rbt$)
(declare-fun selecte$ (A_c_rbt$)Color$)
(declare-fun selectf$ (A_c_rbt$)A_c_rbt$)
(declare-fun selectg$ (A_c_rbt$)A$)
(declare-fun selecth$ (A_c_rbt$)C$)
(declare-fun selecti$ (A_c_rbt$)A_c_rbt$)
(declare-fun branch$a (Color$ A_c_rbt$ A$ C$ A_c_rbt$ )A_c_rbt$)
(declare-fun none$a ()C_option$)
(declare-fun the$a (C_option$)C$)
(declare-fun some$a (C$ )C_option$)
(declare-fun f$ ()A_c_b_fun_fun$ )
(declare-fun t$ ()A_c_rbt$ )
(declare-fun x$ ()A$ )
(declare-fun map$ (A_c_b_fun_fun$ A_c_rbt$ )A_b_rbt$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun fun_app$ (A_c_b_fun_fun$ A$ )C_b_fun$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun map_option$ (C_b_fun$ C_option$ )B_option$ )
(declare-fun rbt_lookup$ (A_a_bool_fun_fun$ A_b_rbt$ A$ )B_option$ )
(declare-fun rbt_lookup$a (A_a_bool_fun_fun$ A_c_rbt$ A$ )C_option$ )
(assert (! (not (= (rbt_lookup$ less$ (map$ f$ t$ )x$ )(map_option$ (fun_app$ f$ x$ )(rbt_lookup$a less$ t$ x$ )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (fun_app$a (fun_app$b less$ ?v0 )?v1 ))(or (fun_app$a (fun_app$b less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$a (fun_app$b less$ ?v1 )?v0 )false )))false )):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(=> (not false )(fun_app$a (fun_app$b less$ ?v1 )?v0 )))false )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v2 ))(fun_app$a (fun_app$b less$ ?v0 )?v2 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v2 ))(fun_app$a (fun_app$b less$ ?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v2 )?v0 ))(fun_app$a (fun_app$b less$ ?v2 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v0 ))false )):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v0 ))false )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v0 ))false )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$a (fun_app$b less$ ?v0 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(= (= ?v1 ?v0 )false ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(= (= ?v0 ?v1 )false ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 Bool ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(= (=> (fun_app$a (fun_app$b less$ ?v1 )?v0 )?v2 )true ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(= (not (fun_app$a (fun_app$b less$ ?v1 )?v0 ))true ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(not (fun_app$a (fun_app$b less$ ?v1 )?v0 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
