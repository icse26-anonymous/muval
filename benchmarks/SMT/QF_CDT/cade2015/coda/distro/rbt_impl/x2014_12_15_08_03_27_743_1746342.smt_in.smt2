;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_rbt_a_b_rbt_fun$ 0 )
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-sort A_list$ 0)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun k$ ()A$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lexordp$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun map_rbt$ (A_a_fun$ B_b_fun$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_b_rbt_a_b_rbt_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$c (B_bool_fun$ B$ )Bool )
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun pred_rbt$ (A_bool_fun$ B_bool_fun$ A_b_rbt$ )Bool )
(declare-fun rbt_less$ (A_a_bool_fun_fun$ A$ A_b_rbt$ )Bool )
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun greaterThanLessThan$ (A_a_bool_fun_fun$ A$ A$ )A_set$ )
(assert (! (not (= (rbt_less$ less$ k$ empty$ )true )):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 A_list$ ))(lexordp_eq$ less$ ?v0 ?v0 )):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (member$ ?v0 (greaterThanLessThan$ less$ ?v1 ?v2 ))(and (fun_app$ (fun_app$a less$ ?v1 )?v0 )(fun_app$ (fun_app$a less$ ?v0 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_list$ ))(=> (forall ((?v1 A$ ))(not (fun_app$ (fun_app$a less$ ?v1 )?v1 )))(not (lexordp$ less$ ?v0 ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ ))(= (rbt_less$ less$ ?v0 ?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 (set$ (keys$ ?v1 )))(fun_app$ (fun_app$a less$ ?v2 )?v0 ))))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (lessThan$ less$ ?v1 ))(fun_app$ (fun_app$a less$ ?v0 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (greaterThan$ less$ ?v1 ))(fun_app$ (fun_app$a less$ ?v1 )?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ ))(pred_rbt$ ?v0 ?v1 empty$ )):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ ))(! (= (fun_app$b (map_rbt$ ?v0 ?v1 )empty$ )empty$ ):pattern ((map_rbt$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (and (=> (= ?v0 empty$ )false )(forall ((?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))false )))false )):named a11 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a12 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (lexordp$ less$ ?v0 ?v1 )(lexordp_eq$ less$ ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ )(?v5 Color$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ )(?v9 A_b_rbt$ ))(= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$ ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a14 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(! (= (pred_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(and (pred_rbt$ ?v0 ?v1 ?v3 )(and (fun_app$ ?v0 ?v4 )(and (fun_app$c ?v1 ?v5 )(pred_rbt$ ?v0 ?v1 ?v6 ))))):pattern ((pred_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a15 ))
(check-sat )
;(get-unsat-core )
