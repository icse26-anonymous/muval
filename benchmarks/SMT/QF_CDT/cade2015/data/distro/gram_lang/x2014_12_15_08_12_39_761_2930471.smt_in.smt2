;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))(N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun nsa$ ()N_set$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tr2$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun deftr$ ()N_dtree_fun$ )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun hsubst_r$ (Dtree$ )N$ )
(assert (! (not (reg$ f$ tr1a$ )):named a0 ))
(assert (! (member$ (inr$ tr1a$ )(cont$ tra$ )):named a1 ))
(assert (! (reg$ f$ tr$ ):named a2 ))
(assert (! (reg$ f$ tra$ ):named a3 ))
(assert (! (subtr$ nsa$ tr2$ tr1a$ ):named a4 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(=> (reg$ ?v0 ?v1 )(= (fun_app$ ?v0 (root$ ?v1 ))?v1 ))):named a5 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(reg$ ?v1 ?v0 )))):named a6 ))
(assert (! (reg$ f$ tra$ ):named a7 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (reg$ ?v0 ?v1 )(member$ (inr$ ?v2 )(cont$ ?v1 )))(reg$ ?v0 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 N$ ))(reg$ deftr$ (fun_app$ deftr$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(and (reg$ ?v1 ?v0 )(forall ((?v2 N$ ))(= (root$ (fun_app$ ?v1 ?v2 ))?v2 )))))):named a10 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ )(?v2 N_set$ )(?v3 Dtree$ ))(=> (and (reg$ ?v0 ?v1 )(subtr$ ?v2 ?v3 ?v1 ))(reg$ ?v0 ?v3 ))):named a11 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(= (reg$ ?v0 ?v1 )(forall ((?v2 N_set$ )(?v3 Dtree$ ))(=> (subtr$ ?v2 ?v3 ?v1 )(= ?v3 (fun_app$ ?v0 (root$ ?v3 ))))))):named a12 ))
(assert (! (=> (reg$ f$ tr1a$ )(exists ((?v0 N_list$ ))(and (path$ f$ ?v0 )(and (= (fun_app$ f$ (hd$ ?v0 ))tr1a$ )(and (= (fun_app$ f$ (last$ ?v0 ))tr2$ )(less_eq$ (set$ ?v0 )nsa$ )))))):named a13 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(= (reg$ ?v0 ?v1 )(forall ((?v2 Dtree$ ))(=> (subtr$ top$ ?v2 ?v1 )(= ?v2 (fun_app$ ?v0 (root$ ?v2 ))))))):named a14 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst_r$ ?v0 )(root$ ?v0 )):pattern ((hsubst_r$ ?v0 )))):named a15 ))
(assert (! (member$a (root$ tra$ )nsa$ ):named a16 ))
(assert (! (subtr$ ns$ tr1$ tr$ ):named a17 ))
(check-sat )
;(get-unsat-core )
