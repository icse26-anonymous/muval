;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun h$ (Dtree$ N$ )Dtree$ )
(declare-fun n$ ()N$ )
(declare-fun n1$ ()N$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun h_r$ (Dtree$ N$ )N$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun tr2$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ N$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun inFr2$ (N_set$ Dtree$ T$ )Bool )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun subtr2$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun hsubst_c$ (Dtree$ Dtree$ )T_dtree_sum_set$ )
(declare-fun hsubst_r$ (Dtree$ )N$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (and (= tr2$ (h$ tr0$ (root$ ?v0 )))(member$ (inr$ ?v0 )(cont$ (pick$ tr0$ n1$ ))))thesis$ )):named a1 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (h$ tr0$ ?v0 ))(root$ (pick$ tr0$ ?v0 )))):named a2 ))
(assert (! (member$ (inr$ tr2$ )(cont$ tr1a$ )):named a3 ))
(assert (! (= tr1a$ (h$ tr0$ n1$ )):named a4 ))
(assert (! (forall ((?v0 N$ ))(! (= (h_r$ tr0$ ?v0 )(root$ (pick$ tr0$ ?v0 ))):pattern ((h_r$ tr0$ ?v0 )))):named a5 ))
(assert (! (= tra$ (h$ tr0$ n$ )):named a6 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (root$ (h$ ?v0 ?v1 ))(root$ (pick$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (inItr$ top$ tr0$ n1$ ):named a10 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (hsubst_c$ ?v0 ?v1 )(ite (= (root$ ?v1 )(root$ ?v0 ))(cont$ ?v0 )(cont$ ?v1 ))):pattern ((hsubst_c$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (h_r$ ?v0 ?v1 )(root$ (pick$ ?v0 ?v1 ))):pattern ((h_r$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr2$ ?v0 ?v1 ?v2 )(and (member$a (root$ ?v3 )?v0 )(member$ (inr$ ?v1 )(cont$ ?v3 ))))(inFr2$ ?v0 ?v3 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$ (inr$ ?v1 )(cont$ ?v0 ))(member$ (inr$ ?v2 )(cont$ ?v0 ))))(= (= (root$ ?v1 )(root$ ?v2 ))(= ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst_r$ ?v0 )(root$ ?v0 )):pattern ((hsubst_r$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (subtr2$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (root$ ?v3 )?v4 )(and (member$ (inr$ ?v3 )(cont$ ?v5 ))(subtr2$ ?v4 ?v5 ?v6 )))))))))):named a17 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (subtr2$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (root$ ?v3 )?v4 )(and (member$ (inr$ ?v3 )(cont$ ?v5 ))(subtr2$ ?v4 ?v5 ?v6 ))))))false ))))false )):named a18 ))
(check-sat )
;(get-unsat-core )
