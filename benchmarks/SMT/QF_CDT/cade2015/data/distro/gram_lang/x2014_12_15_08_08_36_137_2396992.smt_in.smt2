;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort N_T_fun$ 0 )
(declare-sort T_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort N_N_sum_N_fun$ 0 )
(declare-sort N_T_N_sum_fun$ 0 )
(declare-sort N_T_sum_N_fun$ 0 )
(declare-sort T_N_sum_N_fun$ 0 )
(declare-sort T_N_sum_T_fun$ 0 )
(declare-sort T_T_N_sum_fun$ 0 )
(declare-sort T_T_sum_T_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort T_N_sum_bool_fun$ 0 )
(declare-sort Dtree_N_sum_N_fun$ 0 )
(declare-sort Dtree_T_N_sum_fun$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort N_dtree_sum_N_fun$ 0 )
(declare-sort T_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_fun$ 0 )
(declare-sort N_N_fun_N_T_fun_fun$ 0 )
(declare-sort N_N_sum_N_N_sum_fun$ 0 )
(declare-sort N_N_sum_T_N_sum_fun$ 0 )
(declare-sort N_T_sum_N_T_sum_fun$ 0 )
(declare-sort N_T_sum_T_T_sum_fun$ 0 )
(declare-sort T_N_sum_N_N_sum_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_fun_T_N_fun_fun$ 0 )
(declare-sort T_T_fun_T_T_fun_fun$ 0 )
(declare-sort T_T_sum_N_T_sum_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_fun$ 0 )
(declare-sort Dtree_N_sum_N_N_sum_fun$ 0 )
(declare-sort Dtree_T_sum_N_T_sum_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort N_dtree_sum_N_N_sum_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-sort T_T_fun_T_T_N_sum_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_N_sum_fun$ 0 )
(declare-sort N_N_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_T_fun_T_T_dtree_sum_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_N_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_N_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_dtree_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort T_T_N_sum_fun_T_T_N_sum_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort T_T_N_sum_fun_T_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_T_dtree_sum_fun_T_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_T_dtree_sum_fun_T_T_dtree_sum_fun_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))(T_N_sum$ (inl$a (projl$a T$ ))(inr$a (projr$a N$ )))(T_T_sum$ (inl$b (projl$b T$ ))(inr$b (projr$b T$ )))(N_T_sum$ (inl$c (projl$c N$ ))(inr$c (projr$c T$ )))(N_N_sum$ (inl$d (projl$d N$ ))(inr$d (projr$d N$ )))(Dtree_dtree_sum$ (inl$e (projl$e Dtree$ ))(inr$e (projr$e Dtree$ )))(Dtree_N_sum$ (inl$f (projl$f Dtree$ ))(inr$f (projr$f N$ )))(N_dtree_sum$ (inl$g (projl$g N$ ))(inr$g (projr$g Dtree$ )))(Dtree_T_sum$ (inl$h (projl$h Dtree$ ))(inr$h (projr$h T$ )))))
(declare-fun s$ ()N_T_N_sum_set_fun$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ ()T_T_N_sum_fun$ )
(declare-fun id$a ()T_set_T_set_fun$ )
(declare-fun id$b ()N_N_fun$ )
(declare-fun id$c ()N_set_N_set_fun$ )
(declare-fun id$d ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun id$e ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$f ()Dtree_dtree_fun$ )
(declare-fun id$g ()T_T_sum_T_T_sum_fun$ )
(declare-fun id$h ()T_N_sum_T_N_sum_fun$ )
(declare-fun id$i ()N_T_sum_N_T_sum_fun$ )
(declare-fun id$j ()N_N_sum_N_N_sum_fun$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun uua$ ()T_T_dtree_sum_fun$ )
(declare-fun uub$ ()Dtree_T_dtree_sum_fun$ )
(declare-fun uuc$ ()N_T_N_sum_fun$ )
(declare-fun comp$ (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun setr$ (T_dtree_sum$ )Dtree_set$ )
(declare-fun comp$a (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$b (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun comp$c (N_N_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun comp$d (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$e (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$f (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$g (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$h (T_N_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$i (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$j (T_dtree_sum_T_dtree_sum_fun$ )T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$k (T_N_sum_T_dtree_sum_fun$ )T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$l (T_N_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$m (T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$n (T_dtree_sum_T_N_sum_fun$ )T_N_sum_T_dtree_sum_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun comp$o (T_T_fun$ )T_T_fun_T_T_fun_fun$ )
(declare-fun comp$p (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum_dtree_dtree_sum_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun comp$q (Dtree_dtree_sum_N_N_sum_fun$ Dtree_N_sum_dtree_dtree_sum_fun$ )Dtree_N_sum_N_N_sum_fun$ )
(declare-fun comp$r (Dtree_dtree_sum_N_N_sum_fun$ N_dtree_sum_dtree_dtree_sum_fun$ )N_dtree_sum_N_N_sum_fun$ )
(declare-fun comp$s (Dtree_dtree_sum_N_N_sum_fun$ N_N_sum_dtree_dtree_sum_fun$ )N_N_sum_N_N_sum_fun$ )
(declare-fun comp$t (T_T_sum_T_fun$ T_T_sum_T_T_sum_fun$ T_T_sum$ )T$ )
(declare-fun comp$u (T_T_sum_T_fun$ N_T_sum_T_T_sum_fun$ N_T_sum$ )T$ )
(declare-fun comp$v (N_T_fun$ )N_N_fun_N_T_fun_fun$ )
(declare-fun comp$w (T_N_sum_T_fun$ T_N_sum_T_N_sum_fun$ T_N_sum$ )T$ )
(declare-fun comp$x (T_N_sum_T_fun$ N_N_sum_T_N_sum_fun$ N_N_sum$ )T$ )
(declare-fun comp$y (N_T_sum_N_fun$ T_T_sum_N_T_sum_fun$ T_T_sum$ )N$ )
(declare-fun comp$z (T_N_fun$ )T_T_fun_T_N_fun_fun$ )
(declare-fun deftr$ ()N_dtree_fun$ )
(declare-fun image$ (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun setr$a (T_N_sum$ )N_set$ )
(declare-fun comp$aa (N_T_sum_N_fun$ N_T_sum_N_T_sum_fun$ N_T_sum$ )N$ )
(declare-fun comp$ab (N_N_sum_N_fun$ T_N_sum_N_N_sum_fun$ T_N_sum$ )N$ )
(declare-fun comp$ac (N_N_sum_N_fun$ N_N_sum_N_N_sum_fun$ N_N_sum$ )N$ )
(declare-fun comp$ad (N_T_sum_N_fun$ Dtree_T_sum_N_T_sum_fun$ Dtree_T_sum$ )N$ )
(declare-fun comp$ae (N_N_sum_N_fun$ Dtree_N_sum_N_N_sum_fun$ Dtree_N_sum$ )N$ )
(declare-fun comp$af (Dtree_dtree_sum_N_fun$ Dtree_dtree_sum_dtree_dtree_sum_fun$ )Dtree_dtree_sum_N_fun$ )
(declare-fun comp$ag (Dtree_dtree_sum_N_fun$ Dtree_N_sum_dtree_dtree_sum_fun$ )Dtree_N_sum_N_fun$ )
(declare-fun comp$ah (Dtree_dtree_sum_N_fun$ N_dtree_sum_dtree_dtree_sum_fun$ )N_dtree_sum_N_fun$ )
(declare-fun comp$ai (Dtree_dtree_sum_N_fun$ N_N_sum_dtree_dtree_sum_fun$ )N_N_sum_N_fun$ )
(declare-fun comp$aj (T_dtree_sum_N_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_N_fun$ )
(declare-fun comp$ak (T_dtree_sum_N_fun$ T_N_sum_T_dtree_sum_fun$ )T_N_sum_N_fun$ )
(declare-fun comp$al (T_N_sum_T_N_sum_fun$ )T_T_N_sum_fun_T_T_N_sum_fun_fun$ )
(declare-fun comp$am (T_T_N_sum_fun$ )T_T_fun_T_T_N_sum_fun_fun$ )
(declare-fun comp$an (T_dtree_sum_T_dtree_sum_fun$ )T_T_dtree_sum_fun_T_T_dtree_sum_fun_fun$ )
(declare-fun comp$ao (T_T_dtree_sum_fun$ )T_T_fun_T_T_dtree_sum_fun_fun$ )
(declare-fun comp$ap (T_N_sum_T_dtree_sum_fun$ )T_T_N_sum_fun_T_T_dtree_sum_fun_fun$ )
(declare-fun comp$aq (T_dtree_sum_T_N_sum_fun$ )T_T_dtree_sum_fun_T_T_N_sum_fun_fun$ )
(declare-fun comp$ar (T_dtree_sum_T_dtree_sum_fun$ Dtree_T_dtree_sum_fun$ )Dtree_T_dtree_sum_fun$ )
(declare-fun comp$as (Dtree_T_dtree_sum_fun$ Dtree_dtree_fun$ )Dtree_T_dtree_sum_fun$ )
(declare-fun comp$at (T_N_sum_T_dtree_sum_fun$ N_T_N_sum_fun$ )N_T_dtree_sum_fun$ )
(declare-fun comp$au (Dtree_T_dtree_sum_fun$ N_dtree_fun$ )N_T_dtree_sum_fun$ )
(declare-fun comp$av (T_dtree_sum_T_N_sum_fun$ Dtree_T_dtree_sum_fun$ )Dtree_T_N_sum_fun$ )
(declare-fun comp$aw (N_T_N_sum_fun$ Dtree_N_fun$ )Dtree_T_N_sum_fun$ )
(declare-fun finite$ (T_dtree_sum_set$ )Bool )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun image$a (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$b (N_N_fun$ )N_set_N_set_fun$ )
(declare-fun image$c (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$d (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun image$e (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun image$f (Dtree_N_fun$ Dtree_set$ )N_set$ )
(declare-fun image$g (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun image$h (N_dtree_fun$ N_set$ )Dtree_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (Dtree_N_fun$ )Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ )
(declare-fun vimage$ (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun finite$a (T_N_sum_set$ )Bool )
(declare-fun fun_app$ (Dtree_T_dtree_sum_fun$ Dtree$ )T_dtree_sum$ )
(declare-fun map_sum$ (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun member$a (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun member$b (T$ T_set$ )Bool )
(declare-fun unfold$a (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun vimage$a (N_N_fun$ )N_set_N_set_fun$ )
(declare-fun vimage$b (T_T_N_sum_fun$ T_N_sum_set$ )T_set$ )
(declare-fun vimage$c (T_T_dtree_sum_fun$ T_dtree_sum_set$ )T_set$ )
(declare-fun case_sum$ (T_T_fun$ T_T_fun$ )T_T_sum_T_fun$ )
(declare-fun fun_app$a (N_T_N_sum_fun$ N$ )T_N_sum$ )
(declare-fun fun_app$b (T_T_dtree_sum_fun$ T$ )T_dtree_sum$ )
(declare-fun fun_app$c (T_T_N_sum_fun$ T$ )T_N_sum$ )
(declare-fun fun_app$d (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$e (Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$f (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$g (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$h (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$i (Dtree_T_dtree_sum_set_fun$ Dtree$ )T_dtree_sum_set$ )
(declare-fun fun_app$j (T_T_fun$ T$ )T$ )
(declare-fun fun_app$k (N_N_fun$ N$ )N$ )
(declare-fun fun_app$l (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$m (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$n (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$o (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$p (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$q (N_N_fun_T_N_sum_T_N_sum_fun_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$r (N_T_sum_N_T_sum_fun$ N_T_sum$ )N_T_sum$ )
(declare-fun fun_app$s (N_N_sum_N_N_sum_fun$ N_N_sum$ )N_N_sum$ )
(declare-fun fun_app$t (N_T_N_sum_set_fun$ N$ )T_N_sum_set$ )
(declare-fun fun_app$u (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$v (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$w (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$x (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun fun_app$y (T_N_sum_bool_fun$ T_N_sum$ )Bool )
(declare-fun fun_app$z (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(declare-fun map_sum$a (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun map_sum$b (T_T_fun$ )N_N_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$c (N_N_fun$ T_T_fun$ )N_T_sum_N_T_sum_fun$ )
(declare-fun map_sum$d (N_N_fun$ N_N_fun$ )N_N_sum_N_N_sum_fun$ )
(declare-fun map_sum$e (T_T_fun$ )N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$f (Dtree_N_fun$ Dtree_N_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun map_sum$g (Dtree_dtree_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$h (Dtree_dtree_fun$ N_dtree_fun$ )Dtree_N_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$i (Dtree_N_fun$ N_N_fun$ )Dtree_N_sum_N_N_sum_fun$ )
(declare-fun map_sum$j (N_dtree_fun$ Dtree_dtree_fun$ )N_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$k (N_N_fun$ Dtree_N_fun$ )N_dtree_sum_N_N_sum_fun$ )
(declare-fun map_sum$l (N_dtree_fun$ N_dtree_fun$ )N_N_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$m (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$n (N_T_fun$ T_T_fun$ )N_T_sum_T_T_sum_fun$ )
(declare-fun map_sum$o (N_T_fun$ N_N_fun$ )N_N_sum_T_N_sum_fun$ )
(declare-fun map_sum$p (T_N_fun$ T_T_fun$ )T_T_sum_N_T_sum_fun$ )
(declare-fun map_sum$q (T_N_fun$ N_N_fun$ )T_N_sum_N_N_sum_fun$ )
(declare-fun map_sum$r (Dtree_N_fun$ T_T_fun$ )Dtree_T_sum_N_T_sum_fun$ )
(declare-fun case_sum$a (N_T_fun$ T_T_fun$ N_T_sum$ )T$ )
(declare-fun case_sum$b (T_T_fun$ N_T_fun$ )T_N_sum_T_fun$ )
(declare-fun case_sum$c (N_T_fun$ N_T_fun$ N_N_sum$ )T$ )
(declare-fun case_sum$d (N_N_fun$ T_N_fun$ )N_T_sum_N_fun$ )
(declare-fun case_sum$e (T_N_fun$ T_N_fun$ T_T_sum$ )N$ )
(declare-fun case_sum$f (N_N_fun$ N_N_fun$ )N_N_sum_N_fun$ )
(declare-fun case_sum$g (T_N_fun$ N_N_fun$ )T_N_sum_N_fun$ )
(declare-fun case_sum$h (Dtree_N_fun$ T_N_fun$ Dtree_T_sum$ )N$ )
(declare-fun case_sum$i (Dtree_N_fun$ N_N_fun$ )Dtree_N_sum_N_fun$ )
(declare-fun case_sum$j (Dtree_N_fun$ Dtree_N_fun$ )Dtree_dtree_sum_N_fun$ )
(declare-fun case_sum$k (N_N_fun$ Dtree_N_fun$ )N_dtree_sum_N_fun$ )
(declare-fun case_sum$l (T_N_fun$ Dtree_N_fun$ )T_dtree_sum_N_fun$ )
(declare-fun fun_app$aa (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$ab (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$ac (N_N_fun_N_N_fun_fun$ N_N_fun$ )N_N_fun$ )
(declare-fun fun_app$ad (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$ae (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$af (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$ag (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$ah (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun fun_app$ai (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$aj (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$ak (T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ T_N_sum_T_dtree_sum_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$al (T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ T_N_sum_T_N_sum_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$am (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$an (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$ao (T_N_sum_T_dtree_sum_fun_T_N_sum_T_N_sum_fun_fun$ T_N_sum_T_dtree_sum_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$ap (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum$ )N_N_sum$ )
(declare-fun fun_app$aq (Dtree_dtree_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$ar (Dtree_N_sum_dtree_dtree_sum_fun$ Dtree_N_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$as (Dtree_N_sum_N_N_sum_fun$ Dtree_N_sum$ )N_N_sum$ )
(declare-fun fun_app$at (N_dtree_sum_dtree_dtree_sum_fun$ N_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$au (N_dtree_sum_N_N_sum_fun$ N_dtree_sum$ )N_N_sum$ )
(declare-fun fun_app$av (N_N_sum_dtree_dtree_sum_fun$ N_N_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$aw (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$ax (T_T_fun_T_T_fun_fun$ T_T_fun$ )T_T_fun$ )
(declare-fun fun_app$ay (T_T_sum_T_fun$ T_T_sum$ )T$ )
(declare-fun fun_app$az (N_N_fun_N_T_fun_fun$ N_N_fun$ )N_T_fun$ )
(declare-fun fun_app$ba (T_N_sum_T_fun$ T_N_sum$ )T$ )
(declare-fun fun_app$bb (T_T_fun_T_N_fun_fun$ T_T_fun$ )T_N_fun$ )
(declare-fun fun_app$bc (N_T_sum_N_fun$ N_T_sum$ )N$ )
(declare-fun fun_app$bd (T_N_sum_N_fun$ T_N_sum$ )N$ )
(declare-fun fun_app$be (N_N_sum_N_fun$ N_N_sum$ )N$ )
(declare-fun fun_app$bf (Dtree_N_sum_N_fun$ Dtree_N_sum$ )N$ )
(declare-fun fun_app$bg (T_T_N_sum_fun_T_T_N_sum_fun_fun$ T_T_N_sum_fun$ )T_T_N_sum_fun$ )
(declare-fun fun_app$bh (T_T_fun_T_T_N_sum_fun_fun$ T_T_fun$ )T_T_N_sum_fun$ )
(declare-fun fun_app$bi (T_T_dtree_sum_fun_T_T_dtree_sum_fun_fun$ T_T_dtree_sum_fun$ )T_T_dtree_sum_fun$ )
(declare-fun fun_app$bj (T_T_fun_T_T_dtree_sum_fun_fun$ T_T_fun$ )T_T_dtree_sum_fun$ )
(declare-fun fun_app$bk (T_T_N_sum_fun_T_T_dtree_sum_fun_fun$ T_T_N_sum_fun$ )T_T_dtree_sum_fun$ )
(declare-fun fun_app$bl (T_T_dtree_sum_fun_T_T_N_sum_fun_fun$ T_T_dtree_sum_fun$ )T_T_N_sum_fun$ )
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$ uub$ ?v0 )(inr$ ?v0 )):pattern ((fun_app$ uub$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$a uuc$ ?v0 )(inr$a ?v0 )):pattern ((fun_app$a uuc$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$b uua$ ?v0 )(inl$ ?v0 )):pattern ((fun_app$b uua$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$c uu$ ?v0 )(inl$a ?v0 )):pattern ((fun_app$c uu$ ?v0 )))):named a3 ))
(assert (! (not (= (cont$ (fun_app$d (fun_app$e (unfold$ hsubst_r$ )(hsubst_c$ tr0$ ))tr$ ))(fun_app$f (image$ (fun_app$g (map_sum$ id$ )(fun_app$e (unfold$ hsubst_r$ )(hsubst_c$ tr0$ ))))(cont$ tr0$ )))):named a4 ))
(assert (! (= (fun_app$h root$ tr$ )(fun_app$h root$ tr0$ )):named a5 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$i (hsubst_c$ tr0$ )?v0 )(ite (= (fun_app$h root$ ?v0 )(fun_app$h root$ tr0$ ))(cont$ tr0$ )(cont$ ?v0 ))):pattern ((fun_app$i (hsubst_c$ tr0$ )?v0 )))):named a6 ))
(assert (! (= (hsubst$ tr0$ )(fun_app$e (unfold$ hsubst_r$ )(hsubst_c$ tr0$ ))):named a7 ))
(assert (! (= (image$a id$ )id$a ):named a8 ))
(assert (! (= (image$b id$b )id$c ):named a9 ))
(assert (! (= (image$ id$d )id$e ):named a10 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst$ ?v0 )(fun_app$e (unfold$ hsubst_r$ )(hsubst_c$ ?v0 ))):pattern ((hsubst$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (fun_app$i (hsubst_c$ ?v0 )?v1 )(ite (= (fun_app$h root$ ?v1 )(fun_app$h root$ ?v0 ))(cont$ ?v0 )(cont$ ?v1 ))):pattern ((fun_app$i (hsubst_c$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 Dtree$ ))(finite$ (fun_app$i (hsubst_c$ tr0$ )?v0 ))):named a13 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$j id$ ?v0 )?v0 ):pattern ((fun_app$j id$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$k id$b ?v0 )?v0 ):pattern ((fun_app$k id$b ?v0 )))):named a15 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$l ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (fun_app$f (image$ ?v1 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$m ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$c ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$n ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$d ?v1 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$h hsubst_r$ ?v0 )(fun_app$h root$ ?v0 )):pattern ((fun_app$h hsubst_r$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$o (map_sum$a id$ id$ )?v0 )?v0 )):named a20 ))
(assert (! (forall ((?v0 T_N_sum$ ))(= (fun_app$p (fun_app$q (map_sum$b id$ )id$b )?v0 )?v0 )):named a21 ))
(assert (! (forall ((?v0 N_T_sum$ ))(= (fun_app$r (map_sum$c id$b id$ )?v0 )?v0 )):named a22 ))
(assert (! (forall ((?v0 N_N_sum$ ))(= (fun_app$s (map_sum$d id$b id$b )?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (fun_app$l (fun_app$g (map_sum$ id$ )id$f )?v0 )?v0 )):named a24 ))
(assert (! (= (map_sum$a id$ id$ )id$g ):named a25 ))
(assert (! (= (fun_app$q (map_sum$b id$ )id$b )id$h ):named a26 ))
(assert (! (= (map_sum$c id$b id$ )id$i ):named a27 ))
(assert (! (= (map_sum$d id$b id$b )id$j ):named a28 ))
(assert (! (= (fun_app$g (map_sum$ id$ )id$f )id$d ):named a29 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_set_fun$ )(?v1 Dtree$ )(?v2 Dtree_N_fun$ ))(=> (finite$ (fun_app$i ?v0 ?v1 ))(= (cont$ (fun_app$d (fun_app$e (unfold$ ?v2 )?v0 )?v1 ))(fun_app$f (image$ (fun_app$g (map_sum$ id$ )(fun_app$e (unfold$ ?v2 )?v0 )))(fun_app$i ?v0 ?v1 ))))):named a30 ))
(assert (! (forall ((?v0 N_T_N_sum_set_fun$ )(?v1 N$ )(?v2 N_N_fun$ ))(=> (finite$a (fun_app$t ?v0 ?v1 ))(= (cont$ (fun_app$u (fun_app$v (unfold$a ?v2 )?v0 )?v1 ))(image$c (fun_app$w (map_sum$e id$ )(fun_app$v (unfold$a ?v2 )?v0 ))(fun_app$t ?v0 ?v1 ))))):named a31 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$h root$ (fun_app$d (hsubst$ tr0$ )?v0 ))(fun_app$h root$ ?v0 ))):named a32 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$j id$ ?v0 )?v0 ):pattern ((fun_app$j id$ ?v0 )))):named a33 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$k id$b ?v0 )?v0 ):pattern ((fun_app$k id$b ?v0 )))):named a34 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$h root$ (fun_app$d (hsubst$ ?v0 )?v1 ))(fun_app$h root$ ?v1 ))):named a35 ))
(assert (! (forall ((?v0 Dtree$ ))(finite$ (cont$ ?v0 ))):named a36 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(finite$ (fun_app$i (hsubst_c$ ?v0 )?v1 ))):named a37 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$h root$ ?v0 )(fun_app$h root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_T_dtree_sum_set_fun$ )(?v2 Dtree$ ))(= (fun_app$h root$ (fun_app$d (fun_app$e (unfold$ ?v0 )?v1 )?v2 ))(fun_app$h ?v0 ?v2 ))):named a39 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_T_N_sum_set_fun$ )(?v2 N$ ))(= (fun_app$h root$ (fun_app$u (fun_app$v (unfold$a ?v0 )?v1 )?v2 ))(fun_app$k ?v0 ?v2 ))):named a40 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$ (fun_app$l ?v2 ?v0 )(fun_app$f (image$ ?v2 )?v1 )))):named a41 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_dtree_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$ (fun_app$m ?v2 ?v0 )(image$c ?v2 ?v1 )))):named a42 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$a (fun_app$n ?v2 ?v0 )(image$d ?v2 ?v1 )))):named a43 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$l ?v3 ?v0 )))(member$ ?v2 (fun_app$f (image$ ?v3 )?v1 )))):named a44 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_N_sum_T_dtree_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$m ?v3 ?v0 )))(member$ ?v2 (image$c ?v3 ?v1 )))):named a45 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$n ?v3 ?v0 )))(member$a ?v2 (image$d ?v3 ?v1 )))):named a46 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (fun_app$f (image$ ?v0 )?v1 ))(fun_app$x ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$x ?v2 (fun_app$l ?v0 ?v3 )))))):named a47 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (image$c ?v0 ?v1 ))(fun_app$x ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$x ?v2 (fun_app$m ?v0 ?v3 )))))):named a48 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 (image$d ?v0 ?v1 ))(fun_app$y ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$y ?v2 (fun_app$n ?v0 ?v3 )))))):named a49 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (fun_app$f (image$ ?v0 )?v1 ))(fun_app$x ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$x ?v2 (fun_app$l ?v0 ?v3 )))))):named a50 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (image$c ?v0 ?v1 ))(fun_app$x ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$x ?v2 (fun_app$m ?v0 ?v3 )))))):named a51 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$a ?v3 (image$d ?v0 ?v1 ))(fun_app$y ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$y ?v2 (fun_app$n ?v0 ?v3 )))))):named a52 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$l ?v2 ?v4 )(fun_app$l ?v3 ?v4 )))))(= (fun_app$f (image$ ?v2 )?v0 )(fun_app$f (image$ ?v3 )?v1 )))):named a53 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_dtree_sum_fun$ )(?v3 T_N_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_N_sum$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$m ?v2 ?v4 )(fun_app$m ?v3 ?v4 )))))(= (image$c ?v2 ?v0 )(image$c ?v3 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$n ?v2 ?v4 )(fun_app$n ?v3 ?v4 )))))(= (image$d ?v2 ?v0 )(image$d ?v3 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (fun_app$f (image$ ?v1 )?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$l ?v1 ?v3 )))))):named a56 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$ ?v0 (image$c ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$m ?v1 ?v3 )))))):named a57 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (image$d ?v1 ?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$n ?v1 ?v3 )))))):named a58 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ ))(=> (finite$ ?v0 )(finite$ (fun_app$f (image$ ?v1 )?v0 )))):named a59 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_T_N_sum_fun$ ))(=> (finite$ ?v0 )(finite$a (image$d ?v1 ?v0 )))):named a60 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_T_dtree_sum_fun$ ))(=> (finite$a ?v0 )(finite$ (image$c ?v1 ?v0 )))):named a61 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_T_N_sum_fun$ ))(=> (finite$a ?v0 )(finite$a (image$e ?v1 ?v0 )))):named a62 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 N$ ))(=> (finite$ ?v0 )(= (cont$ (node$ ?v1 ?v0 ))?v0 ))):named a63 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (fun_app$h root$ ?v0 )(cont$ ?v0 ))?v0 )):named a64 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 N$ )(?v3 N$ ))(=> (and (finite$ ?v0 )(finite$ ?v1 ))(= (= (node$ ?v2 ?v0 )(node$ ?v3 ?v1 ))(and (= ?v2 ?v3 )(= ?v0 ?v1 ))))):named a65 ))
(assert (! (= (fun_app$z (comp$ root$ )(hsubst$ tr0$ ))root$ ):named a66 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$h root$ (fun_app$u deftr$ ?v0 ))?v0 )):named a67 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$h root$ (node$ ?v0 ?v1 ))?v0 )):named a68 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (forall ((?v1 N$ )(?v2 T_dtree_sum_set$ ))(=> (and (finite$ ?v2 )(= ?v0 (node$ ?v1 ?v2 )))false ))false )):named a69 ))
(assert (! (forall ((?v0 N$ ))(= (cont$ (fun_app$u deftr$ ?v0 ))(image$c (fun_app$w (map_sum$e id$ )deftr$ )(fun_app$t s$ ?v0 )))):named a70 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$h (fun_app$z (comp$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$z (comp$ ?v0 )?v1 )?v2 )))):named a71 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$k (fun_app$aa (comp$a ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$u ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$aa (comp$a ?v0 )?v1 )?v2 )))):named a72 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$z (comp$ ?v0 )id$f )?v0 )):named a73 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$ab (comp$b ?v0 )(fun_app$z (comp$ ?v1 )?v2 ))(fun_app$z (comp$ (fun_app$ab (comp$b ?v0 )?v1 ))?v2 ))):named a74 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$ac (comp$c ?v0 )(fun_app$aa (comp$a ?v1 )?v2 ))(fun_app$aa (comp$a (fun_app$ab (comp$b ?v0 )?v1 ))?v2 ))):named a75 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$z (comp$ ?v0 )(fun_app$ad (comp$d ?v1 )?v2 ))(fun_app$ab (comp$b (fun_app$aa (comp$a ?v0 )?v1 ))?v2 ))):named a76 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$z (comp$ ?v0 )(fun_app$ae (comp$e ?v1 )?v2 ))(fun_app$z (comp$ (fun_app$z (comp$ ?v0 )?v1 ))?v2 ))):named a77 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$aa (comp$a ?v0 )(fun_app$af (comp$f ?v1 )?v2 ))(fun_app$ac (comp$c (fun_app$aa (comp$a ?v0 )?v1 ))?v2 ))):named a78 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$aa (comp$a ?v0 )(fun_app$ag (comp$g ?v1 )?v2 ))(fun_app$aa (comp$a (fun_app$z (comp$ ?v0 )?v1 ))?v2 ))):named a79 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$ab (comp$b (fun_app$aa (comp$a ?v0 )?v1 ))?v2 )(fun_app$z (comp$ ?v0 )(fun_app$ad (comp$d ?v1 )?v2 )))):named a80 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$ac (comp$c (fun_app$aa (comp$a ?v0 )?v1 ))?v2 )(fun_app$aa (comp$a ?v0 )(fun_app$af (comp$f ?v1 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$z (comp$ (fun_app$ab (comp$b ?v0 )?v1 ))?v2 )(fun_app$ab (comp$b ?v0 )(fun_app$z (comp$ ?v1 )?v2 )))):named a82 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$z (comp$ (fun_app$z (comp$ ?v0 )?v1 ))?v2 )(fun_app$z (comp$ ?v0 )(fun_app$ae (comp$e ?v1 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$aa (comp$a (fun_app$ab (comp$b ?v0 )?v1 ))?v2 )(fun_app$ac (comp$c ?v0 )(fun_app$aa (comp$a ?v1 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$aa (comp$a (fun_app$z (comp$ ?v0 )?v1 ))?v2 )(fun_app$aa (comp$a ?v0 )(fun_app$ag (comp$g ?v1 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$h (fun_app$z (comp$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$z (comp$ ?v0 )?v1 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$k (fun_app$aa (comp$a ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$u ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$aa (comp$a ?v0 )?v1 )?v2 )))):named a87 ))
(assert (! (= deftr$ (fun_app$v (unfold$a id$b )s$ )):named a88 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$z (comp$ ?v0 )?v1 )(fun_app$z (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$h ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$d ?v3 ?v4 ))))false ))false )):named a89 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$aa (comp$a ?v0 )?v1 )(fun_app$aa (comp$a ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$h ?v0 (fun_app$u ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$u ?v3 ?v4 ))))false ))false )):named a90 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$z (comp$ ?v0 )?v1 )(fun_app$z (comp$ ?v2 )?v3 ))(= (fun_app$h ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$d ?v3 ?v4 ))))):named a91 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$aa (comp$a ?v0 )?v1 )(fun_app$aa (comp$a ?v2 )?v3 ))(= (fun_app$h ?v0 (fun_app$u ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$u ?v3 ?v4 ))))):named a92 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$z (comp$ ?v0 )?v1 )?v2 )(= (fun_app$h ?v0 (fun_app$d ?v1 ?v3 ))(fun_app$h ?v2 ?v3 )))):named a93 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$aa (comp$a ?v0 )?v1 )?v2 )(= (fun_app$h ?v0 (fun_app$u ?v1 ?v3 ))(fun_app$k ?v2 ?v3 )))):named a94 ))
(assert (! (forall ((?v0 N$ ))(finite$a (fun_app$t s$ ?v0 ))):named a95 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (image$f ?v0 (image$g ?v1 ?v2 ))(image$f (fun_app$z (comp$ ?v0 )?v1 )?v2 ))):named a96 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_set$ ))(= (image$f ?v0 (image$h ?v1 ?v2 ))(fun_app$ah (image$b (fun_app$aa (comp$a ?v0 )?v1 ))?v2 ))):named a97 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$e ?v0 (image$d ?v1 ?v2 ))(image$d (fun_app$ai (comp$h ?v0 )?v1 )?v2 ))):named a98 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$f (image$ ?v0 )(fun_app$f (image$ ?v1 )?v2 ))(fun_app$f (image$ (fun_app$aj (comp$i ?v0 )?v1 ))?v2 ))):named a99 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum_set$ ))(= (fun_app$f (image$ ?v0 )(image$c ?v1 ?v2 ))(image$c (fun_app$ak (comp$j ?v0 )?v1 )?v2 ))):named a100 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (image$c ?v0 (image$e ?v1 ?v2 ))(image$c (fun_app$al (comp$k ?v0 )?v1 )?v2 ))):named a101 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$c ?v0 (image$d ?v1 ?v2 ))(fun_app$f (image$ (fun_app$am (comp$l ?v0 )?v1 ))?v2 ))):named a102 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$d ?v0 (fun_app$f (image$ ?v1 )?v2 ))(image$d (fun_app$an (comp$m ?v0 )?v1 )?v2 ))):named a103 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum_set$ ))(= (image$d ?v0 (image$c ?v1 ?v2 ))(image$e (fun_app$ao (comp$n ?v0 )?v1 )?v2 ))):named a104 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$z (comp$ ?v0 )?v1 )(fun_app$ab (comp$b id$b )?v2 ))(= (fun_app$h ?v0 (fun_app$d ?v1 ?v3 ))(fun_app$h ?v2 ?v3 )))):named a105 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$aa (comp$a ?v0 )?v1 )(fun_app$ac (comp$c id$b )?v2 ))(= (fun_app$h ?v0 (fun_app$u ?v1 ?v3 ))(fun_app$k ?v2 ?v3 )))):named a106 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ap (map_sum$f ?v0 ?v1 )(fun_app$aq (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$ap (map_sum$f (fun_app$z (comp$ ?v0 )?v2 )(fun_app$z (comp$ ?v1 )?v3 ))?v4 ))):named a107 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$ap (map_sum$f ?v0 ?v1 )(fun_app$ar (map_sum$h ?v2 ?v3 )?v4 ))(fun_app$as (map_sum$i (fun_app$z (comp$ ?v0 )?v2 )(fun_app$aa (comp$a ?v1 )?v3 ))?v4 ))):named a108 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$ap (map_sum$f ?v0 ?v1 )(fun_app$at (map_sum$j ?v2 ?v3 )?v4 ))(fun_app$au (map_sum$k (fun_app$aa (comp$a ?v0 )?v2 )(fun_app$z (comp$ ?v1 )?v3 ))?v4 ))):named a109 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_sum$ ))(= (fun_app$ap (map_sum$f ?v0 ?v1 )(fun_app$av (map_sum$l ?v2 ?v3 )?v4 ))(fun_app$s (map_sum$d (fun_app$aa (comp$a ?v0 )?v2 )(fun_app$aa (comp$a ?v1 )?v3 ))?v4 ))):named a110 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$p (fun_app$q (map_sum$b ?v0 )?v1 )(fun_app$n (fun_app$aw (map_sum$m ?v2 )?v3 )?v4 ))(fun_app$n (fun_app$aw (map_sum$m (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ab (comp$b ?v1 )?v3 ))?v4 ))):named a111 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$l (fun_app$g (map_sum$ ?v0 )?v1 )(fun_app$l (fun_app$g (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$l (fun_app$g (map_sum$ (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ae (comp$e ?v1 )?v3 ))?v4 ))):named a112 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_dtree_fun$ )(?v4 T_N_sum$ ))(= (fun_app$l (fun_app$g (map_sum$ ?v0 )?v1 )(fun_app$m (fun_app$w (map_sum$e ?v2 )?v3 )?v4 ))(fun_app$m (fun_app$w (map_sum$e (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ag (comp$g ?v1 )?v3 ))?v4 ))):named a113 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_N_fun$ )(?v4 T_N_sum$ ))(= (fun_app$m (fun_app$w (map_sum$e ?v0 )?v1 )(fun_app$p (fun_app$q (map_sum$b ?v2 )?v3 )?v4 ))(fun_app$m (fun_app$w (map_sum$e (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$af (comp$f ?v1 )?v3 ))?v4 ))):named a114 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$m (fun_app$w (map_sum$e ?v0 )?v1 )(fun_app$n (fun_app$aw (map_sum$m ?v2 )?v3 )?v4 ))(fun_app$l (fun_app$g (map_sum$ (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ad (comp$d ?v1 )?v3 ))?v4 ))):named a115 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$n (fun_app$aw (map_sum$m ?v0 )?v1 )(fun_app$l (fun_app$g (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$n (fun_app$aw (map_sum$m (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$z (comp$ ?v1 )?v3 ))?v4 ))):named a116 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$z (comp$ root$ )(hsubst$ ?v0 ))root$ )):named a117 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$p (map_sum$f ?v0 ?v1 )(map_sum$g ?v2 ?v3 ))(map_sum$f (fun_app$z (comp$ ?v0 )?v2 )(fun_app$z (comp$ ?v1 )?v3 )))):named a118 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ ))(= (comp$q (map_sum$f ?v0 ?v1 )(map_sum$h ?v2 ?v3 ))(map_sum$i (fun_app$z (comp$ ?v0 )?v2 )(fun_app$aa (comp$a ?v1 )?v3 )))):named a119 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$r (map_sum$f ?v0 ?v1 )(map_sum$j ?v2 ?v3 ))(map_sum$k (fun_app$aa (comp$a ?v0 )?v2 )(fun_app$z (comp$ ?v1 )?v3 )))):named a120 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ ))(= (comp$s (map_sum$f ?v0 ?v1 )(map_sum$l ?v2 ?v3 ))(map_sum$d (fun_app$aa (comp$a ?v0 )?v2 )(fun_app$aa (comp$a ?v1 )?v3 )))):named a121 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (fun_app$ai (comp$h (fun_app$q (map_sum$b ?v0 )?v1 ))(fun_app$aw (map_sum$m ?v2 )?v3 ))(fun_app$aw (map_sum$m (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ab (comp$b ?v1 )?v3 )))):named a122 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ ))(= (fun_app$aj (comp$i (fun_app$g (map_sum$ ?v0 )?v1 ))(fun_app$g (map_sum$ ?v2 )?v3 ))(fun_app$g (map_sum$ (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ae (comp$e ?v1 )?v3 )))):named a123 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_dtree_fun$ ))(= (fun_app$ak (comp$j (fun_app$g (map_sum$ ?v0 )?v1 ))(fun_app$w (map_sum$e ?v2 )?v3 ))(fun_app$w (map_sum$e (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ag (comp$g ?v1 )?v3 )))):named a124 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_N_fun$ ))(= (fun_app$al (comp$k (fun_app$w (map_sum$e ?v0 )?v1 ))(fun_app$q (map_sum$b ?v2 )?v3 ))(fun_app$w (map_sum$e (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$af (comp$f ?v1 )?v3 )))):named a125 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (fun_app$am (comp$l (fun_app$w (map_sum$e ?v0 )?v1 ))(fun_app$aw (map_sum$m ?v2 )?v3 ))(fun_app$g (map_sum$ (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ad (comp$d ?v1 )?v3 )))):named a126 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ ))(= (fun_app$an (comp$m (fun_app$aw (map_sum$m ?v0 )?v1 ))(fun_app$g (map_sum$ ?v2 )?v3 ))(fun_app$aw (map_sum$m (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$z (comp$ ?v1 )?v3 )))):named a127 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ap (map_sum$f ?v0 ?v1 )(fun_app$aq (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$ap (map_sum$f (fun_app$z (comp$ ?v0 )?v2 )(fun_app$z (comp$ ?v1 )?v3 ))?v4 ))):named a128 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$ap (map_sum$f ?v0 ?v1 )(fun_app$ar (map_sum$h ?v2 ?v3 )?v4 ))(fun_app$as (map_sum$i (fun_app$z (comp$ ?v0 )?v2 )(fun_app$aa (comp$a ?v1 )?v3 ))?v4 ))):named a129 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$ap (map_sum$f ?v0 ?v1 )(fun_app$at (map_sum$j ?v2 ?v3 )?v4 ))(fun_app$au (map_sum$k (fun_app$aa (comp$a ?v0 )?v2 )(fun_app$z (comp$ ?v1 )?v3 ))?v4 ))):named a130 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_sum$ ))(= (fun_app$ap (map_sum$f ?v0 ?v1 )(fun_app$av (map_sum$l ?v2 ?v3 )?v4 ))(fun_app$s (map_sum$d (fun_app$aa (comp$a ?v0 )?v2 )(fun_app$aa (comp$a ?v1 )?v3 ))?v4 ))):named a131 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$p (fun_app$q (map_sum$b ?v0 )?v1 )(fun_app$n (fun_app$aw (map_sum$m ?v2 )?v3 )?v4 ))(fun_app$n (fun_app$aw (map_sum$m (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ab (comp$b ?v1 )?v3 ))?v4 ))):named a132 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$l (fun_app$g (map_sum$ ?v0 )?v1 )(fun_app$l (fun_app$g (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$l (fun_app$g (map_sum$ (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ae (comp$e ?v1 )?v3 ))?v4 ))):named a133 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_dtree_fun$ )(?v4 T_N_sum$ ))(= (fun_app$l (fun_app$g (map_sum$ ?v0 )?v1 )(fun_app$m (fun_app$w (map_sum$e ?v2 )?v3 )?v4 ))(fun_app$m (fun_app$w (map_sum$e (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ag (comp$g ?v1 )?v3 ))?v4 ))):named a134 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_N_fun$ )(?v4 T_N_sum$ ))(= (fun_app$m (fun_app$w (map_sum$e ?v0 )?v1 )(fun_app$p (fun_app$q (map_sum$b ?v2 )?v3 )?v4 ))(fun_app$m (fun_app$w (map_sum$e (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$af (comp$f ?v1 )?v3 ))?v4 ))):named a135 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$m (fun_app$w (map_sum$e ?v0 )?v1 )(fun_app$n (fun_app$aw (map_sum$m ?v2 )?v3 )?v4 ))(fun_app$l (fun_app$g (map_sum$ (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$ad (comp$d ?v1 )?v3 ))?v4 ))):named a136 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$n (fun_app$aw (map_sum$m ?v0 )?v1 )(fun_app$l (fun_app$g (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$n (fun_app$aw (map_sum$m (fun_app$ax (comp$o ?v0 )?v2 ))(fun_app$z (comp$ ?v1 )?v3 ))?v4 ))):named a137 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(=> (= (fun_app$aa (comp$a ?v0 )?v1 )id$b )(= (fun_app$h ?v0 (fun_app$u ?v1 ?v2 ))?v2 ))):named a138 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree$ ))(=> (= (fun_app$h ?v0 (fun_app$d ?v1 ?v2 ))(fun_app$h ?v3 (fun_app$d ?v4 ?v5 )))(= (fun_app$h (fun_app$z (comp$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$z (comp$ ?v3 )?v4 )?v5 )))):named a139 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N$ ))(=> (= (fun_app$h ?v0 (fun_app$d ?v1 ?v2 ))(fun_app$h ?v3 (fun_app$u ?v4 ?v5 )))(= (fun_app$h (fun_app$z (comp$ ?v0 )?v1 )?v2 )(fun_app$k (fun_app$aa (comp$a ?v3 )?v4 )?v5 )))):named a140 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree$ ))(=> (= (fun_app$h ?v0 (fun_app$u ?v1 ?v2 ))(fun_app$h ?v3 (fun_app$d ?v4 ?v5 )))(= (fun_app$k (fun_app$aa (comp$a ?v0 )?v1 )?v2 )(fun_app$h (fun_app$z (comp$ ?v3 )?v4 )?v5 )))):named a141 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N$ ))(=> (= (fun_app$h ?v0 (fun_app$u ?v1 ?v2 ))(fun_app$h ?v3 (fun_app$u ?v4 ?v5 )))(= (fun_app$k (fun_app$aa (comp$a ?v0 )?v1 )?v2 )(fun_app$k (fun_app$aa (comp$a ?v3 )?v4 )?v5 )))):named a142 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ ))(=> (= (fun_app$h ?v0 (fun_app$d ?v1 ?v2 ))(fun_app$h ?v3 (fun_app$d ?v4 ?v2 )))(= (fun_app$h (fun_app$z (comp$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$z (comp$ ?v3 )?v4 )?v2 )))):named a143 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ ))(=> (= (fun_app$h ?v0 (fun_app$u ?v1 ?v2 ))(fun_app$h ?v3 (fun_app$u ?v4 ?v2 )))(= (fun_app$k (fun_app$aa (comp$a ?v0 )?v1 )?v2 )(fun_app$k (fun_app$aa (comp$a ?v3 )?v4 )?v2 )))):named a144 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$u ?v0 (fun_app$h ?v1 ?v2 ))(fun_app$d ?v3 (fun_app$d ?v4 ?v2 )))(= (fun_app$h (fun_app$ab (comp$b (fun_app$aa (comp$a ?v5 )?v0 ))?v1 )?v2 )(fun_app$h (fun_app$z (comp$ (fun_app$z (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a145 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$u ?v0 (fun_app$k ?v1 ?v2 ))(fun_app$d ?v3 (fun_app$u ?v4 ?v2 )))(= (fun_app$k (fun_app$ac (comp$c (fun_app$aa (comp$a ?v5 )?v0 ))?v1 )?v2 )(fun_app$k (fun_app$aa (comp$a (fun_app$z (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a146 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$d ?v0 (fun_app$d ?v1 ?v2 ))(fun_app$u ?v3 (fun_app$h ?v4 ?v2 )))(= (fun_app$h (fun_app$z (comp$ (fun_app$z (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$h (fun_app$ab (comp$b (fun_app$aa (comp$a ?v5 )?v3 ))?v4 )?v2 )))):named a147 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$d ?v0 (fun_app$d ?v1 ?v2 ))(fun_app$d ?v3 (fun_app$d ?v4 ?v2 )))(= (fun_app$h (fun_app$z (comp$ (fun_app$z (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$h (fun_app$z (comp$ (fun_app$z (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a148 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$d ?v0 (fun_app$u ?v1 ?v2 ))(fun_app$u ?v3 (fun_app$k ?v4 ?v2 )))(= (fun_app$k (fun_app$aa (comp$a (fun_app$z (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$k (fun_app$ac (comp$c (fun_app$aa (comp$a ?v5 )?v3 ))?v4 )?v2 )))):named a149 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$d ?v0 (fun_app$u ?v1 ?v2 ))(fun_app$d ?v3 (fun_app$u ?v4 ?v2 )))(= (fun_app$k (fun_app$aa (comp$a (fun_app$z (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$k (fun_app$aa (comp$a (fun_app$z (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a150 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$ab (comp$b ?v0 )?v1 )?v2 )(= (fun_app$ab (comp$b ?v0 )(fun_app$z (comp$ ?v1 )?v3 ))(fun_app$z (comp$ ?v2 )?v3 )))):named a151 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$ab (comp$b ?v0 )?v1 )?v2 )(= (fun_app$ac (comp$c ?v0 )(fun_app$aa (comp$a ?v1 )?v3 ))(fun_app$aa (comp$a ?v2 )?v3 )))):named a152 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$z (comp$ ?v0 )?v1 )?v2 )(= (fun_app$z (comp$ ?v0 )(fun_app$ae (comp$e ?v1 )?v3 ))(fun_app$z (comp$ ?v2 )?v3 )))):named a153 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$z (comp$ ?v0 )?v1 )?v2 )(= (fun_app$aa (comp$a ?v0 )(fun_app$ag (comp$g ?v1 )?v3 ))(fun_app$aa (comp$a ?v2 )?v3 )))):named a154 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$aa (comp$a ?v0 )?v1 )?v2 )(= (fun_app$z (comp$ ?v0 )(fun_app$ad (comp$d ?v1 )?v3 ))(fun_app$ab (comp$b ?v2 )?v3 )))):named a155 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$aa (comp$a ?v0 )?v1 )?v2 )(= (fun_app$aa (comp$a ?v0 )(fun_app$af (comp$f ?v1 )?v3 ))(fun_app$ac (comp$c ?v2 )?v3 )))):named a156 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$ad (comp$d ?v0 )?v1 )?v2 )(= (fun_app$ab (comp$b (fun_app$aa (comp$a ?v3 )?v0 ))?v1 )(fun_app$z (comp$ ?v3 )?v2 )))):named a157 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$af (comp$f ?v0 )?v1 )?v2 )(= (fun_app$ac (comp$c (fun_app$aa (comp$a ?v3 )?v0 ))?v1 )(fun_app$aa (comp$a ?v3 )?v2 )))):named a158 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$ae (comp$e ?v0 )?v1 )?v2 )(= (fun_app$z (comp$ (fun_app$z (comp$ ?v3 )?v0 ))?v1 )(fun_app$z (comp$ ?v3 )?v2 )))):named a159 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$ag (comp$g ?v0 )?v1 )?v2 )(= (fun_app$aa (comp$a (fun_app$z (comp$ ?v3 )?v0 ))?v1 )(fun_app$aa (comp$a ?v3 )?v2 )))):named a160 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$z (comp$ ?v0 )?v1 )?v2 )(= (fun_app$z (comp$ (fun_app$ab (comp$b ?v3 )?v0 ))?v1 )(fun_app$ab (comp$b ?v3 )?v2 )))):named a161 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$aa (comp$a ?v0 )?v1 )?v2 )(= (fun_app$aa (comp$a (fun_app$ab (comp$b ?v3 )?v0 ))?v1 )(fun_app$ac (comp$c ?v3 )?v2 )))):named a162 ))
(assert (! (= (fun_app$aa (comp$a root$ )deftr$ )id$b ):named a163 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$ad (comp$d ?v0 )?v1 )(fun_app$ae (comp$e ?v2 )?v3 ))(= (fun_app$z (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$ab (comp$b (fun_app$aa (comp$a ?v4 )?v0 ))?v1 )(fun_app$z (comp$ ?v5 )?v3 )))):named a164 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$af (comp$f ?v0 )?v1 )(fun_app$ag (comp$g ?v2 )?v3 ))(= (fun_app$z (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$ac (comp$c (fun_app$aa (comp$a ?v4 )?v0 ))?v1 )(fun_app$aa (comp$a ?v5 )?v3 )))):named a165 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$ae (comp$e ?v0 )?v1 )(fun_app$ae (comp$e ?v2 )?v3 ))(= (fun_app$z (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$z (comp$ (fun_app$z (comp$ ?v4 )?v0 ))?v1 )(fun_app$z (comp$ ?v5 )?v3 )))):named a166 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$ag (comp$g ?v0 )?v1 )(fun_app$ag (comp$g ?v2 )?v3 ))(= (fun_app$z (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$aa (comp$a (fun_app$z (comp$ ?v4 )?v0 ))?v1 )(fun_app$aa (comp$a ?v5 )?v3 )))):named a167 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$ae (comp$e ?v0 )?v1 )(fun_app$ad (comp$d ?v2 )?v3 ))(= (fun_app$aa (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$z (comp$ (fun_app$z (comp$ ?v4 )?v0 ))?v1 )(fun_app$ab (comp$b ?v5 )?v3 )))):named a168 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$ag (comp$g ?v0 )?v1 )(fun_app$af (comp$f ?v2 )?v3 ))(= (fun_app$aa (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$aa (comp$a (fun_app$z (comp$ ?v4 )?v0 ))?v1 )(fun_app$ac (comp$c ?v5 )?v3 )))):named a169 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$z (comp$ ?v0 )?v1 )(fun_app$z (comp$ ?v2 )?v3 ))(= (fun_app$ab (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$z (comp$ (fun_app$ab (comp$b ?v4 )?v0 ))?v1 )(fun_app$z (comp$ ?v5 )?v3 )))):named a170 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$aa (comp$a ?v0 )?v1 )(fun_app$aa (comp$a ?v2 )?v3 ))(= (fun_app$ab (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$aa (comp$a (fun_app$ab (comp$b ?v4 )?v0 ))?v1 )(fun_app$aa (comp$a ?v5 )?v3 )))):named a171 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$ab (comp$b ?v0 )?v1 )(fun_app$z (comp$ ?v2 )?v3 ))(= (fun_app$ae (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$ab (comp$b ?v0 )(fun_app$z (comp$ ?v1 )?v4 ))(fun_app$z (comp$ ?v2 )?v5 )))):named a172 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$ab (comp$b ?v0 )?v1 )(fun_app$z (comp$ ?v2 )?v3 ))(= (fun_app$ag (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$ac (comp$c ?v0 )(fun_app$aa (comp$a ?v1 )?v4 ))(fun_app$aa (comp$a ?v2 )?v5 )))):named a173 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$z (comp$ ?v0 )?v1 )(fun_app$ab (comp$b ?v2 )?v3 ))(= (fun_app$z (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$z (comp$ ?v0 )(fun_app$ae (comp$e ?v1 )?v4 ))(fun_app$ab (comp$b ?v2 )?v5 )))):named a174 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$z (comp$ ?v0 )?v1 )(fun_app$ab (comp$b ?v2 )?v3 ))(= (fun_app$aa (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$aa (comp$a ?v0 )(fun_app$ag (comp$g ?v1 )?v4 ))(fun_app$ac (comp$c ?v2 )?v5 )))):named a175 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$z (comp$ ?v0 )?v1 )(fun_app$z (comp$ ?v2 )?v3 ))(= (fun_app$ae (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$z (comp$ ?v0 )(fun_app$ae (comp$e ?v1 )?v4 ))(fun_app$z (comp$ ?v2 )?v5 )))):named a176 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$z (comp$ ?v0 )?v1 )(fun_app$z (comp$ ?v2 )?v3 ))(= (fun_app$ag (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$aa (comp$a ?v0 )(fun_app$ag (comp$g ?v1 )?v4 ))(fun_app$aa (comp$a ?v2 )?v5 )))):named a177 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$aa (comp$a ?v0 )?v1 )(fun_app$aa (comp$a ?v2 )?v3 ))(= (fun_app$ad (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$z (comp$ ?v0 )(fun_app$ad (comp$d ?v1 )?v4 ))(fun_app$z (comp$ ?v2 )?v5 )))):named a178 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$aa (comp$a ?v0 )?v1 )(fun_app$aa (comp$a ?v2 )?v3 ))(= (fun_app$af (comp$f ?v3 )?v4 )?v5 ))(= (fun_app$aa (comp$a ?v0 )(fun_app$af (comp$f ?v1 )?v4 ))(fun_app$aa (comp$a ?v2 )?v5 )))):named a179 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_fun$ )(?v2 T_T_sum$ ))(= (comp$t (case_sum$ id$ ?v0 )(map_sum$a ?v1 id$ )?v2 )(fun_app$ay (case_sum$ (fun_app$ax (comp$o ?v1 )id$ )?v0 )?v2 ))):named a180 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_T_fun$ )(?v2 N_T_sum$ ))(= (comp$u (case_sum$ id$ ?v0 )(map_sum$n ?v1 id$ )?v2 )(case_sum$a (fun_app$az (comp$v ?v1 )id$b )?v0 ?v2 ))):named a181 ))
(assert (! (forall ((?v0 N_T_fun$ )(?v1 T_T_fun$ )(?v2 T_N_sum$ ))(= (comp$w (case_sum$b id$ ?v0 )(fun_app$q (map_sum$b ?v1 )id$b )?v2 )(fun_app$ba (case_sum$b (fun_app$ax (comp$o ?v1 )id$ )?v0 )?v2 ))):named a182 ))
(assert (! (forall ((?v0 N_T_fun$ )(?v1 N_T_fun$ )(?v2 N_N_sum$ ))(= (comp$x (case_sum$b id$ ?v0 )(map_sum$o ?v1 id$b )?v2 )(case_sum$c (fun_app$az (comp$v ?v1 )id$b )?v0 ?v2 ))):named a183 ))
(assert (! (forall ((?v0 T_N_fun$ )(?v1 T_N_fun$ )(?v2 T_T_sum$ ))(= (comp$y (case_sum$d id$b ?v0 )(map_sum$p ?v1 id$ )?v2 )(case_sum$e (fun_app$bb (comp$z ?v1 )id$ )?v0 ?v2 ))):named a184 ))
(assert (! (forall ((?v0 T_N_fun$ )(?v1 N_N_fun$ )(?v2 N_T_sum$ ))(= (comp$aa (case_sum$d id$b ?v0 )(map_sum$c ?v1 id$ )?v2 )(fun_app$bc (case_sum$d (fun_app$ac (comp$c ?v1 )id$b )?v0 )?v2 ))):named a185 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 T_N_fun$ )(?v2 T_N_sum$ ))(= (comp$ab (case_sum$f id$b ?v0 )(map_sum$q ?v1 id$b )?v2 )(fun_app$bd (case_sum$g (fun_app$bb (comp$z ?v1 )id$ )?v0 )?v2 ))):named a186 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_sum$ ))(= (comp$ac (case_sum$f id$b ?v0 )(map_sum$d ?v1 id$b )?v2 )(fun_app$be (case_sum$f (fun_app$ac (comp$c ?v1 )id$b )?v0 )?v2 ))):named a187 ))
(assert (! (forall ((?v0 T_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_T_sum$ ))(= (comp$ad (case_sum$d id$b ?v0 )(map_sum$r ?v1 id$ )?v2 )(case_sum$h (fun_app$z (comp$ ?v1 )id$f )?v0 ?v2 ))):named a188 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_sum$ ))(= (comp$ae (case_sum$f id$b ?v0 )(map_sum$i ?v1 id$b )?v2 )(fun_app$bf (case_sum$i (fun_app$z (comp$ ?v1 )id$f )?v0 )?v2 ))):named a189 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$af (case_sum$j ?v0 ?v1 )(map_sum$g ?v2 ?v3 ))(case_sum$j (fun_app$z (comp$ ?v0 )?v2 )(fun_app$z (comp$ ?v1 )?v3 )))):named a190 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ ))(= (comp$ag (case_sum$j ?v0 ?v1 )(map_sum$h ?v2 ?v3 ))(case_sum$i (fun_app$z (comp$ ?v0 )?v2 )(fun_app$aa (comp$a ?v1 )?v3 )))):named a191 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$ah (case_sum$j ?v0 ?v1 )(map_sum$j ?v2 ?v3 ))(case_sum$k (fun_app$aa (comp$a ?v0 )?v2 )(fun_app$z (comp$ ?v1 )?v3 )))):named a192 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ ))(= (comp$ai (case_sum$j ?v0 ?v1 )(map_sum$l ?v2 ?v3 ))(case_sum$f (fun_app$aa (comp$a ?v0 )?v2 )(fun_app$aa (comp$a ?v1 )?v3 )))):named a193 ))
(assert (! (forall ((?v0 T_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$aj (case_sum$l ?v0 ?v1 )(fun_app$g (map_sum$ ?v2 )?v3 ))(case_sum$l (fun_app$bb (comp$z ?v0 )?v2 )(fun_app$z (comp$ ?v1 )?v3 )))):named a194 ))
(assert (! (forall ((?v0 T_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 N_dtree_fun$ ))(= (comp$ak (case_sum$l ?v0 ?v1 )(fun_app$w (map_sum$e ?v2 )?v3 ))(case_sum$g (fun_app$bb (comp$z ?v0 )?v2 )(fun_app$aa (comp$a ?v1 )?v3 )))):named a195 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ ))(= (fun_app$bg (comp$al (fun_app$q (map_sum$b ?v0 )?v1 ))uu$ )(fun_app$bh (comp$am uu$ )?v0 ))):named a196 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ ))(= (fun_app$bi (comp$an (fun_app$g (map_sum$ ?v0 )?v1 ))uua$ )(fun_app$bj (comp$ao uua$ )?v0 ))):named a197 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ ))(= (fun_app$bk (comp$ap (fun_app$w (map_sum$e ?v0 )?v1 ))uu$ )(fun_app$bj (comp$ao uua$ )?v0 ))):named a198 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ ))(= (fun_app$bl (comp$aq (fun_app$aw (map_sum$m ?v0 )?v1 ))uua$ )(fun_app$bh (comp$am uu$ )?v0 ))):named a199 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ ))(= (comp$ar (fun_app$g (map_sum$ ?v0 )?v1 )uub$ )(comp$as uub$ ?v1 ))):named a200 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ ))(= (comp$at (fun_app$w (map_sum$e ?v0 )?v1 )uuc$ )(comp$au uub$ ?v1 ))):named a201 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ ))(= (comp$av (fun_app$aw (map_sum$m ?v0 )?v1 )uub$ )(comp$aw uuc$ ?v1 ))):named a202 ))
(assert (! (= (vimage$ id$ )id$a ):named a203 ))
(assert (! (= (vimage$a id$b )id$c ):named a204 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum$ ))(= (setr$ (fun_app$l (fun_app$g (map_sum$ ?v0 )?v1 )?v2 ))(image$g ?v1 (setr$ ?v2 )))):named a205 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum$ ))(= (setr$ (fun_app$m (fun_app$w (map_sum$e ?v0 )?v1 )?v2 ))(image$h ?v1 (setr$a ?v2 )))):named a206 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum$ ))(= (setr$a (fun_app$n (fun_app$aw (map_sum$m ?v0 )?v1 )?v2 ))(image$f ?v1 (setr$ ?v2 )))):named a207 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$b ?v0 (vimage$b ?v1 ?v2 ))(member$a (fun_app$c ?v1 ?v0 )?v2 ))):named a208 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b ?v0 (vimage$c ?v1 ?v2 ))(member$ (fun_app$b ?v1 ?v0 )?v2 ))):named a209 ))
(assert (! (forall ((?v0 T_T_N_sum_fun$ )(?v1 T$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= (fun_app$c ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$b ?v1 (vimage$b ?v0 ?v3 )))):named a210 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ )(?v1 T$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$b ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$b ?v1 (vimage$c ?v0 ?v3 )))):named a211 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$a ?v0 )(inl$a ?v1 ))(= ?v0 ?v1 ))):named a212 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a213 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$a ?v0 )(inl$a ?v1 ))(= ?v0 ?v1 ))):named a214 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a215 ))
(assert (! (forall ((?v0 Dtree$ ))(= (vimage$b uu$ (image$d (fun_app$aw (map_sum$m id$ )root$ )(cont$ ?v0 )))(vimage$c uua$ (cont$ ?v0 )))):named a216 ))
(check-sat )
;(get-unsat-core )
