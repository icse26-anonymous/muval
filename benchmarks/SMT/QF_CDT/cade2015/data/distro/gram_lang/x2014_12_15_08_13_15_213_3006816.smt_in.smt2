;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort Dtree_T_fun$ 0 )
(declare-sort N_N_sum_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort T_dtree_fun$ 0 )
(declare-sort N_N_prod_set$ 0 )
(declare-sort N_T_N_sum_fun$ 0 )
(declare-sort N_T_sum_N_fun$ 0 )
(declare-sort T_N_sum_N_fun$ 0 )
(declare-sort T_T_sum_T_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort T_N_sum_bool_fun$ 0 )
(declare-sort N_N_sum_dtree_fun$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort N_T_N_sum_sum_set$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_N_sum_N_sum_set$ 0 )
(declare-sort T_N_sum_dtree_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort T_dtree_sum_T_fun$ 0 )
(declare-sort N_T_N_sum_prod_set$ 0 )
(declare-sort T_N_sum_N_prod_set$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_fun_T_N_fun_fun$ 0 )
(declare-sort T_T_fun_T_T_fun_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_fun$ 0 )
(declare-sort N_T_dtree_sum_sum_set$ 0 )
(declare-sort T_dtree_sum_N_sum_set$ 0 )
(declare-sort T_dtree_sum_dtree_fun$ 0 )
(declare-sort N_T_dtree_sum_prod_set$ 0 )
(declare-sort T_dtree_sum_N_prod_set$ 0 )
(declare-sort Dtree_T_sum_N_T_sum_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_sum_set$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_T_fun_T_dtree_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_N_sum_N_dtree_sum_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_N_sum_fun$ 0 )
(declare-sort N_N_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_sum_dtree_N_sum_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_sum_set$ 0 )
(declare-sort T_dtree_sum_T_N_sum_sum_set$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_prod_set$ 0 )
(declare-sort T_dtree_sum_T_N_sum_prod_set$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_dtree_sum_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_N_sum_fun$ 0 )
(declare-sort N_N_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_prod_set$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_N_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_N_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))(T_N_sum$ (inl$a (projl$a T$ ))(inr$a (projr$a N$ )))(T_T_sum$ (inl$b (projl$b T$ ))(inr$b (projr$b T$ )))(Dtree_dtree_sum$ (inl$c (projl$c Dtree$ ))(inr$c (projr$c Dtree$ )))(N_N_sum$ (inl$d (projl$d N$ ))(inr$d (projr$d N$ )))(Dtree_N_sum$ (inl$e (projl$e Dtree$ ))(inr$e (projr$e N$ )))(N_dtree_sum$ (inl$f (projl$f N$ ))(inr$f (projr$f Dtree$ )))(Dtree_T_sum$ (inl$g (projl$g Dtree$ ))(inr$g (projr$g T$ )))(N_T_sum$ (inl$h (projl$h N$ ))(inr$h (projr$h T$ )))))
(declare-fun h$ (Dtree$ )N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun uu$ (T_N_sum_set$ )T_N_sum_bool_fun$ )
(declare-fun h_c$ (Dtree$ )N_T_N_sum_set_fun$ )
(declare-fun h_r$ (Dtree$ )N_N_fun$ )
(declare-fun id$a ()Dtree_dtree_fun$ )
(declare-fun id$b ()T_set_T_set_fun$ )
(declare-fun id$c ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun id$d ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$e ()T_T_sum_T_T_sum_fun$ )
(declare-fun id$f ()N_N_fun$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun uua$ (N_set$ )N_bool_fun$ )
(declare-fun comp$ (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun pick$ (Dtree$ )N_dtree_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun top$a ()T_N_sum_set$ )
(declare-fun top$b ()T_dtree_sum_set$ )
(declare-fun top$c ()T_set$ )
(declare-fun top$d ()Dtree_set$ )
(declare-fun top$e ()N_N_sum_set$ )
(declare-fun top$f ()T_N_sum_N_sum_set$ )
(declare-fun top$g ()T_dtree_sum_N_sum_set$ )
(declare-fun top$h ()N_T_N_sum_sum_set$ )
(declare-fun top$i ()N_T_dtree_sum_sum_set$ )
(declare-fun top$j ()T_N_sum_T_N_sum_sum_set$ )
(declare-fun top$k ()T_N_sum_T_dtree_sum_sum_set$ )
(declare-fun top$l ()T_dtree_sum_T_N_sum_sum_set$ )
(declare-fun top$m ()T_N_sum_T_dtree_sum_prod_set$ )
(declare-fun top$n ()T_dtree_sum_T_N_sum_prod_set$ )
(declare-fun top$o ()T_dtree_sum_T_dtree_sum_prod_set$ )
(declare-fun top$p ()T_N_sum_N_prod_set$ )
(declare-fun top$q ()T_dtree_sum_N_prod_set$ )
(declare-fun top$r ()N_T_N_sum_prod_set$ )
(declare-fun top$s ()N_T_dtree_sum_prod_set$ )
(declare-fun top$t ()N_N_prod_set$ )
(declare-fun comp$a (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun comp$b (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun comp$c (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$d (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$e (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$f (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$g (T_N_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$h (T_N_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$i (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$j (T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$k (T_T_fun$ )T_T_fun_T_T_fun_fun$ )
(declare-fun comp$l (N_N_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum_N_N_sum_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun comp$m (N_dtree_sum_dtree_N_sum_fun$ Dtree_dtree_sum_N_dtree_sum_fun$ )Dtree_dtree_sum_dtree_N_sum_fun$ )
(declare-fun comp$n (Dtree_N_sum_N_dtree_sum_fun$ Dtree_dtree_sum_dtree_N_sum_fun$ )Dtree_dtree_sum_N_dtree_sum_fun$ )
(declare-fun comp$o (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum_dtree_dtree_sum_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun comp$p (T_T_sum_T_fun$ T_T_sum_T_T_sum_fun$ T_T_sum$ )T$ )
(declare-fun comp$q (N_T_sum_N_fun$ Dtree_T_sum_N_T_sum_fun$ Dtree_T_sum$ )N$ )
(declare-fun comp$r (T_dtree_sum_T_fun$ T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T$ )
(declare-fun comp$s (N_N_sum_dtree_fun$ Dtree_dtree_sum_N_N_sum_fun$ )Dtree_dtree_sum_dtree_fun$ )
(declare-fun comp$t (Dtree_dtree_sum_N_fun$ Dtree_dtree_sum_dtree_dtree_sum_fun$ )Dtree_dtree_sum_N_fun$ )
(declare-fun comp$u (T_dtree_sum_N_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_N_fun_fun$ )
(declare-fun comp$v (T_N_fun$ )T_T_fun_T_N_fun_fun$ )
(declare-fun comp$w (T_N_sum_dtree_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_dtree_fun$ )
(declare-fun comp$x (T_dtree_fun$ )T_T_fun_T_dtree_fun_fun$ )
(declare-fun image$ (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun finite$ (T_N_sum_set$ )Bool )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun image$a (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$b (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun image$c (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun image$d (T_N_sum_N_fun$ T_N_sum_set$ )N_set$ )
(declare-fun image$e (N_T_N_sum_fun$ N_set$ )T_N_sum_set$ )
(declare-fun image$f (N_N_fun$ N_set$ )N_set$ )
(declare-fun image$g (N_dtree_fun$ N_set$ )Dtree_set$ )
(declare-fun image$h (Dtree_N_fun$ Dtree_set$ )N_set$ )
(declare-fun image$i (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun image$j (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$k (T_dtree_sum_N_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun image$l (N_T_dtree_sum_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun member$ (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun unfold$ (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun collect$ (T_N_sum_bool_fun$ )T_N_sum_set$ )
(declare-fun finite$a (T_dtree_sum_set$ )Bool )
(declare-fun finite$b (N_set$ )Bool )
(declare-fun finite$c (T_set$ )Bool )
(declare-fun finite$d (Dtree_set$ )Bool )
(declare-fun finite$e (N_N_sum_set$ )Bool )
(declare-fun finite$f (T_N_sum_N_sum_set$ )Bool )
(declare-fun finite$g (T_dtree_sum_N_sum_set$ )Bool )
(declare-fun finite$h (N_T_N_sum_sum_set$ )Bool )
(declare-fun finite$i (N_T_dtree_sum_sum_set$ )Bool )
(declare-fun finite$j (T_N_sum_T_N_sum_sum_set$ )Bool )
(declare-fun finite$k (T_N_sum_T_dtree_sum_sum_set$ )Bool )
(declare-fun finite$l (T_dtree_sum_T_N_sum_sum_set$ )Bool )
(declare-fun finite$m (T_N_sum_T_dtree_sum_prod_set$ )Bool )
(declare-fun finite$n (T_dtree_sum_T_N_sum_prod_set$ )Bool )
(declare-fun finite$o (T_dtree_sum_T_dtree_sum_prod_set$ )Bool )
(declare-fun finite$p (T_N_sum_N_prod_set$ )Bool )
(declare-fun finite$q (T_dtree_sum_N_prod_set$ )Bool )
(declare-fun finite$r (N_T_N_sum_prod_set$ )Bool )
(declare-fun finite$s (N_T_dtree_sum_prod_set$ )Bool )
(declare-fun finite$t (N_N_prod_set$ )Bool )
(declare-fun fun_app$ (T_N_sum_bool_fun$ T_N_sum$ )Bool )
(declare-fun map_sum$ (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun member$b (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ )N_dtree_fun$ )
(declare-fun unfold$a (Dtree_N_fun$ )Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ )
(declare-fun case_sum$ (T_T_fun$ T_T_fun$ )T_T_sum_T_fun$ )
(declare-fun collect$a (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$b (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$c (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$d (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$e (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$f (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$g (N_N_fun$ N$ )N$ )
(declare-fun fun_app$h (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$i (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$j (T_T_fun$ T$ )T$ )
(declare-fun fun_app$k (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$l (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$m (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$n (T_N_sum_N_fun$ T_N_sum$ )N$ )
(declare-fun fun_app$o (N_T_N_sum_fun$ N$ )T_N_sum$ )
(declare-fun fun_app$p (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$q (N_T_N_sum_set_fun$ N$ )T_N_sum_set$ )
(declare-fun fun_app$r (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$s (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun fun_app$t (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$u (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$v (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$w (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$x (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$y (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$z (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(declare-fun map_sum$a (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun map_sum$b (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$c (N_dtree_fun$ N_dtree_fun$ )N_N_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$d (Dtree_N_fun$ Dtree_N_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun map_sum$e (Dtree_dtree_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$f (N_dtree_fun$ Dtree_N_fun$ )N_dtree_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$g (Dtree_N_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$h (Dtree_dtree_fun$ Dtree_N_fun$ )Dtree_dtree_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$i (Dtree_N_fun$ N_dtree_fun$ )Dtree_N_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$j (T_T_fun$ )N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$k (T_T_fun$ )N_N_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$l (Dtree_N_fun$ T_T_fun$ )Dtree_T_sum_N_T_sum_fun$ )
(declare-fun case_sum$a (N_N_fun$ T_N_fun$ )N_T_sum_N_fun$ )
(declare-fun case_sum$b (Dtree_N_fun$ T_N_fun$ Dtree_T_sum$ )N$ )
(declare-fun case_sum$c (T_T_fun$ Dtree_T_fun$ )T_dtree_sum_T_fun$ )
(declare-fun case_sum$d (N_dtree_fun$ N_dtree_fun$ )N_N_sum_dtree_fun$ )
(declare-fun case_sum$e (Dtree_dtree_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_dtree_fun$ )
(declare-fun case_sum$f (Dtree_N_fun$ Dtree_N_fun$ )Dtree_dtree_sum_N_fun$ )
(declare-fun case_sum$g (T_N_fun$ )Dtree_N_fun_T_dtree_sum_N_fun_fun$ )
(declare-fun case_sum$h (T_dtree_fun$ N_dtree_fun$ )T_N_sum_dtree_fun$ )
(declare-fun case_sum$i (T_dtree_fun$ Dtree_dtree_fun$ )T_dtree_sum_dtree_fun$ )
(declare-fun fun_app$aa (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$ab (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$ac (N_N_sum_dtree_dtree_sum_fun$ N_N_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$ad (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum$ )N_N_sum$ )
(declare-fun fun_app$ae (Dtree_dtree_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$af (N_dtree_sum_dtree_N_sum_fun$ N_dtree_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$ag (Dtree_dtree_sum_N_dtree_sum_fun$ Dtree_dtree_sum$ )N_dtree_sum$ )
(declare-fun fun_app$ah (Dtree_dtree_sum_dtree_N_sum_fun$ Dtree_dtree_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$ai (Dtree_N_sum_N_dtree_sum_fun$ Dtree_N_sum$ )N_dtree_sum$ )
(declare-fun fun_app$aj (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$ak (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$al (T_T_fun_T_T_fun_fun$ T_T_fun$ )T_T_fun$ )
(declare-fun fun_app$am (N_N_fun_T_N_sum_T_N_sum_fun_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$an (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$ao (Dtree_T_dtree_sum_set_fun$ Dtree$ )T_dtree_sum_set$ )
(declare-fun fun_app$ap (Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$aq (T_T_sum_T_fun$ T_T_sum$ )T$ )
(declare-fun fun_app$ar (T_dtree_sum_T_fun$ T_dtree_sum$ )T$ )
(declare-fun fun_app$as (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_N_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_N_fun$ )
(declare-fun fun_app$at (Dtree_N_fun_T_dtree_sum_N_fun_fun$ Dtree_N_fun$ )T_dtree_sum_N_fun$ )
(declare-fun fun_app$au (T_T_fun_T_N_fun_fun$ T_T_fun$ )T_N_fun$ )
(declare-fun fun_app$av (T_T_fun_T_dtree_fun_fun$ T_T_fun$ )T_dtree_fun$ )
(declare-fun fun_app$aw (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (= (cont$ (fun_app$b (h$ tr0$ )n$ ))(fun_app$c (image$ (fun_app$d (map_sum$ id$ )(fun_app$e (comp$ (h$ tr0$ ))root$ )))(cont$ (fun_app$b (pick$ tr0$ )n$ ))))):named a2 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$f root$ (fun_app$b (h$ tr0$ )?v0 ))(fun_app$f root$ (fun_app$b (pick$ tr0$ )?v0 )))):named a3 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$g (h_r$ tr0$ )?v0 )(fun_app$f root$ (fun_app$b (pick$ tr0$ )?v0 ))):pattern ((fun_app$g (h_r$ tr0$ )?v0 )))):named a4 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (fun_app$f root$ (fun_app$b (h$ ?v0 )?v1 ))(fun_app$f root$ (fun_app$b (pick$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$h (comp$a ?v0 )id$a )?v0 )):named a6 ))
(assert (! (= (image$a id$ )id$b ):named a7 ))
(assert (! (= (image$ id$c )id$d ):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$f root$ ?v0 )(fun_app$f root$ ?v1 ))(= (cont$ (fun_app$i (hsubst$ ?v1 )?v0 ))(fun_app$c (image$ (fun_app$d (map_sum$ id$ )(hsubst$ ?v1 )))(cont$ ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= (fun_app$f root$ ?v0 )(fun_app$f root$ ?v1 )))(= (cont$ (fun_app$i (hsubst$ ?v1 )?v0 ))(fun_app$c (image$ (fun_app$d (map_sum$ id$ )(hsubst$ ?v1 )))(cont$ ?v0 ))))):named a10 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$j id$ ?v0 )?v0 ):pattern ((fun_app$j id$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$i (fun_app$e (comp$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$e (comp$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$f (fun_app$h (comp$a ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$h (comp$a ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$k ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (fun_app$c (image$ ?v1 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$l ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$ ?v0 (image$b ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$m ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$c ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_N_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$n ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$d ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 N_T_N_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$o ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$e ?v1 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$g ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$f ?v1 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$p (map_sum$a id$ id$ )?v0 )?v0 )):named a20 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (fun_app$k (fun_app$d (map_sum$ id$ )id$a )?v0 )?v0 )):named a21 ))
(assert (! (= (map_sum$a id$ id$ )id$e ):named a22 ))
(assert (! (= (fun_app$d (map_sum$ id$ )id$a )id$c ):named a23 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$f root$ ?v0 )(fun_app$f root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$h (comp$a root$ )(hsubst$ ?v0 ))root$ )):named a25 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$f root$ (fun_app$i (hsubst$ ?v0 )?v1 ))(fun_app$f root$ ?v1 ))):named a26 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$q (h_c$ tr0$ )?v0 )(image$b (fun_app$r (map_sum$b id$ )root$ )(cont$ (fun_app$b (pick$ tr0$ )?v0 )))):pattern ((fun_app$q (h_c$ tr0$ )?v0 )))):named a27 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$f root$ ?v0 )(fun_app$f root$ ?v1 ))(= (fun_app$i (hsubst$ ?v1 )?v0 )(fun_app$i (hsubst$ ?v1 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ ))(=> (member$b ?v0 ?v1 )(member$b (fun_app$k ?v2 ?v0 )(fun_app$c (image$ ?v2 )?v1 )))):named a29 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ ))(=> (member$b ?v0 ?v1 )(member$ (fun_app$l ?v2 ?v0 )(image$b ?v2 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_N_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$ (fun_app$m ?v2 ?v0 )(image$c ?v2 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_N_fun$ ))(=> (member$ ?v0 ?v1 )(member$a (fun_app$n ?v2 ?v0 )(image$d ?v2 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_T_N_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$ (fun_app$o ?v2 ?v0 )(image$e ?v2 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_N_fun$ ))(=> (member$a ?v0 ?v1 )(member$a (fun_app$g ?v2 ?v0 )(image$f ?v2 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$k ?v3 ?v0 )))(member$b ?v2 (fun_app$c (image$ ?v3 )?v1 )))):named a35 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$l ?v3 ?v0 )))(member$ ?v2 (image$b ?v3 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum$ )(?v3 T_N_sum_T_N_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$m ?v3 ?v0 )))(member$ ?v2 (image$c ?v3 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 N$ )(?v3 T_N_sum_N_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$n ?v3 ?v0 )))(member$a ?v2 (image$d ?v3 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 T_N_sum$ )(?v3 N_T_N_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$o ?v3 ?v0 )))(member$ ?v2 (image$e ?v3 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ )(?v3 N_N_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$g ?v3 ?v0 )))(member$a ?v2 (image$f ?v3 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$b ?v3 (fun_app$c (image$ ?v0 )?v1 ))(fun_app$s ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$b ?v3 ?v1 )(fun_app$s ?v2 (fun_app$k ?v0 ?v3 )))))):named a41 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$ ?v3 (image$b ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$b ?v3 ?v1 )(fun_app$ ?v2 (fun_app$l ?v0 ?v3 )))))):named a42 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$ ?v3 (image$c ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$ ?v2 (fun_app$m ?v0 ?v3 )))))):named a43 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$ ?v3 (image$e ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$a ?v3 ?v1 )(fun_app$ ?v2 (fun_app$o ?v0 ?v3 )))))):named a44 ))
(assert (! (forall ((?v0 T_N_sum_N_fun$ )(?v1 T_N_sum_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$a ?v3 (image$d ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$a ?v2 (fun_app$n ?v0 ?v3 )))))):named a45 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$a ?v3 (image$f ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$a ?v3 ?v1 )(fun_app$a ?v2 (fun_app$g ?v0 ?v3 )))))):named a46 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$b ?v3 (fun_app$c (image$ ?v0 )?v1 ))(fun_app$s ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$b ?v3 ?v1 )(fun_app$s ?v2 (fun_app$k ?v0 ?v3 )))))):named a47 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$ ?v3 (image$b ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$b ?v3 ?v1 )(fun_app$ ?v2 (fun_app$l ?v0 ?v3 )))))):named a48 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$ ?v3 (image$c ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$ ?v2 (fun_app$m ?v0 ?v3 )))))):named a49 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$ ?v3 (image$e ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$a ?v3 ?v1 )(fun_app$ ?v2 (fun_app$o ?v0 ?v3 )))))):named a50 ))
(assert (! (forall ((?v0 T_N_sum_N_fun$ )(?v1 T_N_sum_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$a ?v3 (image$d ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$a ?v2 (fun_app$n ?v0 ?v3 )))))):named a51 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$a ?v3 (image$f ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$a ?v3 ?v1 )(fun_app$a ?v2 (fun_app$g ?v0 ?v3 )))))):named a52 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$k ?v2 ?v4 )(fun_app$k ?v3 ?v4 )))))(= (fun_app$c (image$ ?v2 )?v0 )(fun_app$c (image$ ?v3 )?v1 )))):named a53 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$l ?v2 ?v4 )(fun_app$l ?v3 ?v4 )))))(= (image$b ?v2 ?v0 )(image$b ?v3 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b ?v0 (fun_app$c (image$ ?v1 )?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$k ?v1 ?v3 )))))):named a55 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (image$b ?v1 ?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$l ?v1 ?v3 )))))):named a56 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$ ?v0 (image$c ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$m ?v1 ?v3 )))))):named a57 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 N_T_N_sum_fun$ )(?v2 N_set$ ))(= (member$ ?v0 (image$e ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$o ?v1 ?v3 )))))):named a58 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_N_fun$ )(?v2 T_N_sum_set$ ))(= (member$a ?v0 (image$d ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$n ?v1 ?v3 )))))):named a59 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (member$a ?v0 (image$f ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$g ?v1 ?v3 )))))):named a60 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$e (comp$ ?v0 )?v1 )?v2 )(= (fun_app$b ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$i ?v2 ?v3 )))):named a61 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$h (comp$a ?v0 )?v1 )?v2 )(= (fun_app$f ?v0 (fun_app$i ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))):named a62 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(= (fun_app$b ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$f ?v3 ?v4 ))))):named a63 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$h (comp$a ?v0 )?v1 )(fun_app$h (comp$a ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$i ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$i ?v3 ?v4 ))))):named a64 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$b ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$f ?v3 ?v4 ))))false ))false )):named a65 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$h (comp$a ?v0 )?v1 )(fun_app$h (comp$a ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$f ?v0 (fun_app$i ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$i ?v3 ?v4 ))))false ))false )):named a66 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$i (fun_app$e (comp$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$e (comp$ ?v0 )?v1 )?v2 )))):named a67 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$f (fun_app$h (comp$a ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$h (comp$a ?v0 )?v1 )?v2 )))):named a68 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$t (comp$b (fun_app$u (comp$c ?v0 )?v1 ))?v2 )(fun_app$h (comp$a ?v0 )(fun_app$e (comp$ ?v1 )?v2 )))):named a69 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$v (comp$d (fun_app$e (comp$ ?v0 )?v1 ))?v2 )(fun_app$e (comp$ ?v0 )(fun_app$h (comp$a ?v1 )?v2 )))):named a70 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$e (comp$ (fun_app$w (comp$e ?v0 )?v1 ))?v2 )(fun_app$v (comp$d ?v0 )(fun_app$e (comp$ ?v1 )?v2 )))):named a71 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$e (comp$ (fun_app$x (comp$f ?v0 )?v1 ))?v2 )(fun_app$e (comp$ ?v0 )(fun_app$t (comp$b ?v1 )?v2 )))):named a72 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$h (comp$a (fun_app$t (comp$b ?v0 )?v1 ))?v2 )(fun_app$t (comp$b ?v0 )(fun_app$h (comp$a ?v1 )?v2 )))):named a73 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$h (comp$a (fun_app$h (comp$a ?v0 )?v1 ))?v2 )(fun_app$h (comp$a ?v0 )(fun_app$v (comp$d ?v1 )?v2 )))):named a74 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$v (comp$d ?v0 )(fun_app$e (comp$ ?v1 )?v2 ))(fun_app$e (comp$ (fun_app$w (comp$e ?v0 )?v1 ))?v2 ))):named a75 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$t (comp$b ?v0 )(fun_app$h (comp$a ?v1 )?v2 ))(fun_app$h (comp$a (fun_app$t (comp$b ?v0 )?v1 ))?v2 ))):named a76 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$e (comp$ ?v0 )(fun_app$t (comp$b ?v1 )?v2 ))(fun_app$e (comp$ (fun_app$x (comp$f ?v0 )?v1 ))?v2 ))):named a77 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$e (comp$ ?v0 )(fun_app$h (comp$a ?v1 )?v2 ))(fun_app$v (comp$d (fun_app$e (comp$ ?v0 )?v1 ))?v2 ))):named a78 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$h (comp$a ?v0 )(fun_app$v (comp$d ?v1 )?v2 ))(fun_app$h (comp$a (fun_app$h (comp$a ?v0 )?v1 ))?v2 ))):named a79 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$h (comp$a ?v0 )(fun_app$e (comp$ ?v1 )?v2 ))(fun_app$t (comp$b (fun_app$u (comp$c ?v0 )?v1 ))?v2 ))):named a80 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$j id$ ?v0 )?v0 ):pattern ((fun_app$j id$ ?v0 )))):named a81 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (fun_app$g (h_r$ ?v0 )?v1 )(fun_app$f root$ (fun_app$b (pick$ ?v0 )?v1 ))):pattern ((fun_app$g (h_r$ ?v0 )?v1 )))):named a82 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_set$ ))(= (image$g ?v0 (image$h ?v1 ?v2 ))(image$i (fun_app$e (comp$ ?v0 )?v1 )?v2 ))):named a83 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (image$h ?v0 (image$i ?v1 ?v2 ))(image$h (fun_app$h (comp$a ?v0 )?v1 )?v2 ))):named a84 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$j ?v0 (image$b ?v1 ?v2 ))(fun_app$c (image$ (fun_app$y (comp$g ?v0 )?v1 ))?v2 ))):named a85 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$c ?v0 (image$b ?v1 ?v2 ))(image$b (fun_app$z (comp$h ?v0 )?v1 )?v2 ))):named a86 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$c (image$ ?v0 )(fun_app$c (image$ ?v1 )?v2 ))(fun_app$c (image$ (fun_app$aa (comp$i ?v0 )?v1 ))?v2 ))):named a87 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$b ?v0 (fun_app$c (image$ ?v1 )?v2 ))(image$b (fun_app$ab (comp$j ?v0 )?v1 )?v2 ))):named a88 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$v (comp$d id$a )?v2 ))(= (fun_app$b ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$i ?v2 ?v3 )))):named a89 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$h (comp$a ?v0 )?v1 )(fun_app$t (comp$b id$f )?v2 ))(= (fun_app$f ?v0 (fun_app$i ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))):named a90 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ac (map_sum$c ?v0 ?v1 )(fun_app$ad (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$ae (map_sum$e (fun_app$e (comp$ ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a91 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$af (map_sum$f ?v0 ?v1 )(fun_app$ag (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$ah (map_sum$h (fun_app$e (comp$ ?v0 )?v2 )(fun_app$h (comp$a ?v1 )?v3 ))?v4 ))):named a92 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ai (map_sum$i ?v0 ?v1 )(fun_app$ah (map_sum$h ?v2 ?v3 )?v4 ))(fun_app$ag (map_sum$g (fun_app$h (comp$a ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a93 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ad (map_sum$d ?v0 ?v1 )(fun_app$ae (map_sum$e ?v2 ?v3 )?v4 ))(fun_app$ad (map_sum$d (fun_app$h (comp$a ?v0 )?v2 )(fun_app$h (comp$a ?v1 )?v3 ))?v4 ))):named a94 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$aj (fun_app$ak (map_sum$j ?v0 )?v1 )(fun_app$l (fun_app$r (map_sum$b ?v2 )?v3 )?v4 ))(fun_app$k (fun_app$d (map_sum$ (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a95 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$m (fun_app$am (map_sum$k ?v0 )?v1 )(fun_app$l (fun_app$r (map_sum$b ?v2 )?v3 )?v4 ))(fun_app$l (fun_app$r (map_sum$b (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$t (comp$b ?v1 )?v3 ))?v4 ))):named a96 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$k (fun_app$d (map_sum$ ?v0 )?v1 )(fun_app$k (fun_app$d (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$k (fun_app$d (map_sum$ (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$v (comp$d ?v1 )?v3 ))?v4 ))):named a97 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$l (fun_app$r (map_sum$b ?v0 )?v1 )(fun_app$k (fun_app$d (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$l (fun_app$r (map_sum$b (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$h (comp$a ?v1 )?v3 ))?v4 ))):named a98 ))
(assert (! (= (h$ tr0$ )(fun_app$an (unfold$ (h_r$ tr0$ ))(h_c$ tr0$ ))):named a99 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (fun_app$q (h_c$ ?v0 )?v1 )(image$b (fun_app$r (map_sum$b id$ )root$ )(cont$ (fun_app$b (pick$ ?v0 )?v1 )))):pattern ((fun_app$q (h_c$ ?v0 )?v1 )))):named a100 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$l (map_sum$c ?v0 ?v1 )(map_sum$d ?v2 ?v3 ))(map_sum$e (fun_app$e (comp$ ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 )))):named a101 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$m (map_sum$f ?v0 ?v1 )(map_sum$g ?v2 ?v3 ))(map_sum$h (fun_app$e (comp$ ?v0 )?v2 )(fun_app$h (comp$a ?v1 )?v3 )))):named a102 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$n (map_sum$i ?v0 ?v1 )(map_sum$h ?v2 ?v3 ))(map_sum$g (fun_app$h (comp$a ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 )))):named a103 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$o (map_sum$d ?v0 ?v1 )(map_sum$e ?v2 ?v3 ))(map_sum$d (fun_app$h (comp$a ?v0 )?v2 )(fun_app$h (comp$a ?v1 )?v3 )))):named a104 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (fun_app$y (comp$g (fun_app$ak (map_sum$j ?v0 )?v1 ))(fun_app$r (map_sum$b ?v2 )?v3 ))(fun_app$d (map_sum$ (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$e (comp$ ?v1 )?v3 )))):named a105 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (fun_app$z (comp$h (fun_app$am (map_sum$k ?v0 )?v1 ))(fun_app$r (map_sum$b ?v2 )?v3 ))(fun_app$r (map_sum$b (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$t (comp$b ?v1 )?v3 )))):named a106 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ ))(= (fun_app$aa (comp$i (fun_app$d (map_sum$ ?v0 )?v1 ))(fun_app$d (map_sum$ ?v2 )?v3 ))(fun_app$d (map_sum$ (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$v (comp$d ?v1 )?v3 )))):named a107 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ ))(= (fun_app$ab (comp$j (fun_app$r (map_sum$b ?v0 )?v1 ))(fun_app$d (map_sum$ ?v2 )?v3 ))(fun_app$r (map_sum$b (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$h (comp$a ?v1 )?v3 )))):named a108 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ac (map_sum$c ?v0 ?v1 )(fun_app$ad (map_sum$d ?v2 ?v3 )?v4 ))(fun_app$ae (map_sum$e (fun_app$e (comp$ ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a109 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$af (map_sum$f ?v0 ?v1 )(fun_app$ag (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$ah (map_sum$h (fun_app$e (comp$ ?v0 )?v2 )(fun_app$h (comp$a ?v1 )?v3 ))?v4 ))):named a110 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ai (map_sum$i ?v0 ?v1 )(fun_app$ah (map_sum$h ?v2 ?v3 )?v4 ))(fun_app$ag (map_sum$g (fun_app$h (comp$a ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a111 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ad (map_sum$d ?v0 ?v1 )(fun_app$ae (map_sum$e ?v2 ?v3 )?v4 ))(fun_app$ad (map_sum$d (fun_app$h (comp$a ?v0 )?v2 )(fun_app$h (comp$a ?v1 )?v3 ))?v4 ))):named a112 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$aj (fun_app$ak (map_sum$j ?v0 )?v1 )(fun_app$l (fun_app$r (map_sum$b ?v2 )?v3 )?v4 ))(fun_app$k (fun_app$d (map_sum$ (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a113 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$m (fun_app$am (map_sum$k ?v0 )?v1 )(fun_app$l (fun_app$r (map_sum$b ?v2 )?v3 )?v4 ))(fun_app$l (fun_app$r (map_sum$b (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$t (comp$b ?v1 )?v3 ))?v4 ))):named a114 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$k (fun_app$d (map_sum$ ?v0 )?v1 )(fun_app$k (fun_app$d (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$k (fun_app$d (map_sum$ (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$v (comp$d ?v1 )?v3 ))?v4 ))):named a115 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$l (fun_app$r (map_sum$b ?v0 )?v1 )(fun_app$k (fun_app$d (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$l (fun_app$r (map_sum$b (fun_app$al (comp$k ?v0 )?v2 ))(fun_app$h (comp$a ?v1 )?v3 ))?v4 ))):named a116 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (fun_app$ao (hsubst_c$ ?v0 )?v1 )(ite (= (fun_app$f root$ ?v1 )(fun_app$f root$ ?v0 ))(cont$ ?v0 )(cont$ ?v1 ))):pattern ((fun_app$ao (hsubst_c$ ?v0 )?v1 )))):named a117 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (fun_app$f root$ ?v0 )(cont$ ?v0 ))?v0 )):named a118 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(=> (= (fun_app$e (comp$ ?v0 )?v1 )id$a )(= (fun_app$b ?v0 (fun_app$f ?v1 ?v2 ))?v2 ))):named a119 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$f hsubst_r$ ?v0 )(fun_app$f root$ ?v0 )):pattern ((fun_app$f hsubst_r$ ?v0 )))):named a120 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(= (collect$ (uu$ ?v0 ))?v0 )):named a121 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$a (uua$ ?v0 ))?v0 )):named a122 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$ ?v1 ?v0 ))):named a123 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$a ?v0 (collect$a ?v1 ))(fun_app$a ?v1 ?v0 ))):named a124 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$f root$ (node$ ?v0 ?v1 ))?v0 )):named a125 ))
(assert (! (forall ((?v0 N_T_N_sum_set_fun$ )(?v1 N$ )(?v2 N_N_fun$ ))(=> (finite$ (fun_app$q ?v0 ?v1 ))(= (cont$ (fun_app$b (fun_app$an (unfold$ ?v2 )?v0 )?v1 ))(image$j (fun_app$ak (map_sum$j id$ )(fun_app$an (unfold$ ?v2 )?v0 ))(fun_app$q ?v0 ?v1 ))))):named a126 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_set_fun$ )(?v1 Dtree$ )(?v2 Dtree_N_fun$ ))(=> (finite$a (fun_app$ao ?v0 ?v1 ))(= (cont$ (fun_app$i (fun_app$ap (unfold$a ?v2 )?v0 )?v1 ))(fun_app$c (image$ (fun_app$d (map_sum$ id$ )(fun_app$ap (unfold$a ?v2 )?v0 )))(fun_app$ao ?v0 ?v1 ))))):named a127 ))
(assert (! (forall ((?v0 N$ ))(finite$ (fun_app$q (h_c$ tr0$ )?v0 ))):named a128 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 N$ )(?v3 N$ ))(=> (and (finite$a ?v0 )(finite$a ?v1 ))(= (= (node$ ?v2 ?v0 )(node$ ?v3 ?v1 ))(and (= ?v2 ?v3 )(= ?v0 ?v1 ))))):named a129 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 N$ ))(=> (finite$a ?v0 )(= (cont$ (node$ ?v1 ?v0 ))?v0 ))):named a130 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (forall ((?v1 N$ )(?v2 T_dtree_sum_set$ ))(=> (and (finite$a ?v2 )(= ?v0 (node$ ?v1 ?v2 )))false ))false )):named a131 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(finite$a (fun_app$ao (hsubst_c$ ?v0 )?v1 ))):named a132 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(finite$ (fun_app$q (h_c$ ?v0 )?v1 ))):named a133 ))
(assert (! (forall ((?v0 Dtree$ ))(finite$a (cont$ ?v0 ))):named a134 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst$ ?v0 )(fun_app$ap (unfold$a hsubst_r$ )(hsubst_c$ ?v0 ))):pattern ((hsubst$ ?v0 )))):named a135 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_T_N_sum_set_fun$ )(?v2 N$ ))(= (fun_app$f root$ (fun_app$b (fun_app$an (unfold$ ?v0 )?v1 )?v2 ))(fun_app$g ?v0 ?v2 ))):named a136 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_T_dtree_sum_set_fun$ )(?v2 Dtree$ ))(= (fun_app$f root$ (fun_app$i (fun_app$ap (unfold$a ?v0 )?v1 )?v2 ))(fun_app$f ?v0 ?v2 ))):named a137 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$v (comp$d ?v0 )?v1 )(fun_app$v (comp$d ?v2 )?v3 ))(= (fun_app$h (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$h (comp$a (fun_app$h (comp$a ?v4 )?v0 ))?v1 )(fun_app$h (comp$a ?v5 )?v3 )))):named a138 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$v (comp$d ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(= (fun_app$u (comp$c ?v4 )?v2 )?v5 ))(= (fun_app$h (comp$a (fun_app$h (comp$a ?v4 )?v0 ))?v1 )(fun_app$t (comp$b ?v5 )?v3 )))):named a139 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$t (comp$b ?v0 )?v1 )(fun_app$h (comp$a ?v2 )?v3 ))(= (fun_app$e (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$e (comp$ (fun_app$x (comp$f ?v4 )?v0 ))?v1 )(fun_app$v (comp$d ?v5 )?v3 )))):named a140 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$v (comp$d ?v2 )?v3 ))(= (fun_app$h (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$t (comp$b (fun_app$u (comp$c ?v4 )?v0 ))?v1 )(fun_app$h (comp$a ?v5 )?v3 )))):named a141 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(= (fun_app$w (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$e (comp$ (fun_app$w (comp$e ?v4 )?v0 ))?v1 )(fun_app$e (comp$ ?v5 )?v3 )))):named a142 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$h (comp$a ?v0 )?v1 )(fun_app$t (comp$b ?v2 )?v3 ))(= (fun_app$x (comp$f ?v4 )?v2 )?v5 ))(= (fun_app$v (comp$d (fun_app$e (comp$ ?v4 )?v0 ))?v1 )(fun_app$e (comp$ ?v5 )?v3 )))):named a143 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$h (comp$a ?v0 )?v1 )(fun_app$h (comp$a ?v2 )?v3 ))(= (fun_app$t (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$h (comp$a (fun_app$t (comp$b ?v4 )?v0 ))?v1 )(fun_app$h (comp$a ?v5 )?v3 )))):named a144 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$h (comp$a ?v0 )?v1 )(fun_app$h (comp$a ?v2 )?v3 ))(= (fun_app$e (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$v (comp$d (fun_app$e (comp$ ?v4 )?v0 ))?v1 )(fun_app$v (comp$d ?v5 )?v3 )))):named a145 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$w (comp$e ?v0 )?v1 )(fun_app$x (comp$f ?v2 )?v3 ))(= (fun_app$t (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$v (comp$d ?v0 )(fun_app$e (comp$ ?v1 )?v4 ))(fun_app$e (comp$ ?v2 )?v5 )))):named a146 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$x (comp$f ?v0 )?v1 )(fun_app$w (comp$e ?v2 )?v3 ))(= (fun_app$e (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$e (comp$ ?v0 )(fun_app$t (comp$b ?v1 )?v4 ))(fun_app$v (comp$d ?v2 )?v5 )))):named a147 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$u (comp$c ?v0 )?v1 )(fun_app$u (comp$c ?v2 )?v3 ))(= (fun_app$e (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$a ?v0 )(fun_app$e (comp$ ?v1 )?v4 ))(fun_app$h (comp$a ?v2 )?v5 )))):named a148 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$t (comp$b ?v0 )?v1 )(fun_app$h (comp$a ?v2 )?v3 ))(= (fun_app$v (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$t (comp$b ?v0 )(fun_app$h (comp$a ?v1 )?v4 ))(fun_app$h (comp$a ?v2 )?v5 )))):named a149 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(= (fun_app$h (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$e (comp$ ?v0 )(fun_app$h (comp$a ?v1 )?v4 ))(fun_app$e (comp$ ?v2 )?v5 )))):named a150 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$h (comp$a ?v0 )?v1 )(fun_app$t (comp$b ?v2 )?v3 ))(= (fun_app$h (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$a ?v0 )(fun_app$v (comp$d ?v1 )?v4 ))(fun_app$t (comp$b ?v2 )?v5 )))):named a151 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$h (comp$a ?v0 )?v1 )(fun_app$h (comp$a ?v2 )?v3 ))(= (fun_app$v (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$a ?v0 )(fun_app$v (comp$d ?v1 )?v4 ))(fun_app$h (comp$a ?v2 )?v5 )))):named a152 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$t (comp$b ?v0 )?v1 )?v2 )(= (fun_app$e (comp$ (fun_app$x (comp$f ?v3 )?v0 ))?v1 )(fun_app$e (comp$ ?v3 )?v2 )))):named a153 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$v (comp$d ?v0 )?v1 )?v2 )(= (fun_app$h (comp$a (fun_app$h (comp$a ?v3 )?v0 ))?v1 )(fun_app$h (comp$a ?v3 )?v2 )))):named a154 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$e (comp$ ?v0 )?v1 )?v2 )(= (fun_app$t (comp$b (fun_app$u (comp$c ?v3 )?v0 ))?v1 )(fun_app$h (comp$a ?v3 )?v2 )))):named a155 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$e (comp$ ?v0 )?v1 )?v2 )(= (fun_app$e (comp$ (fun_app$w (comp$e ?v3 )?v0 ))?v1 )(fun_app$v (comp$d ?v3 )?v2 )))):named a156 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$h (comp$a ?v0 )?v1 )?v2 )(= (fun_app$v (comp$d (fun_app$e (comp$ ?v3 )?v0 ))?v1 )(fun_app$e (comp$ ?v3 )?v2 )))):named a157 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$h (comp$a ?v0 )?v1 )?v2 )(= (fun_app$h (comp$a (fun_app$t (comp$b ?v3 )?v0 ))?v1 )(fun_app$t (comp$b ?v3 )?v2 )))):named a158 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$w (comp$e ?v0 )?v1 )?v2 )(= (fun_app$v (comp$d ?v0 )(fun_app$e (comp$ ?v1 )?v3 ))(fun_app$e (comp$ ?v2 )?v3 )))):named a159 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$t (comp$b ?v0 )?v1 )?v2 )(= (fun_app$t (comp$b ?v0 )(fun_app$h (comp$a ?v1 )?v3 ))(fun_app$h (comp$a ?v2 )?v3 )))):named a160 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$x (comp$f ?v0 )?v1 )?v2 )(= (fun_app$e (comp$ ?v0 )(fun_app$t (comp$b ?v1 )?v3 ))(fun_app$e (comp$ ?v2 )?v3 )))):named a161 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$u (comp$c ?v0 )?v1 )?v2 )(= (fun_app$h (comp$a ?v0 )(fun_app$e (comp$ ?v1 )?v3 ))(fun_app$t (comp$b ?v2 )?v3 )))):named a162 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$e (comp$ ?v0 )?v1 )?v2 )(= (fun_app$e (comp$ ?v0 )(fun_app$h (comp$a ?v1 )?v3 ))(fun_app$v (comp$d ?v2 )?v3 )))):named a163 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$h (comp$a ?v0 )?v1 )?v2 )(= (fun_app$h (comp$a ?v0 )(fun_app$v (comp$d ?v1 )?v3 ))(fun_app$h (comp$a ?v2 )?v3 )))):named a164 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (h$ ?v0 )(fun_app$an (unfold$ (h_r$ ?v0 ))(h_c$ ?v0 ))):pattern ((h$ ?v0 )))):named a165 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_T_N_sum_fun$ ))(=> (finite$ ?v0 )(finite$ (image$c ?v1 ?v0 )))):named a166 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_T_dtree_sum_fun$ ))(=> (finite$ ?v0 )(finite$a (image$j ?v1 ?v0 )))):named a167 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_N_fun$ ))(=> (finite$ ?v0 )(finite$b (image$d ?v1 ?v0 )))):named a168 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_T_N_sum_fun$ ))(=> (finite$a ?v0 )(finite$ (image$b ?v1 ?v0 )))):named a169 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ ))(=> (finite$a ?v0 )(finite$a (fun_app$c (image$ ?v1 )?v0 )))):named a170 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_N_fun$ ))(=> (finite$a ?v0 )(finite$b (image$k ?v1 ?v0 )))):named a171 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_T_N_sum_fun$ ))(=> (finite$b ?v0 )(finite$ (image$e ?v1 ?v0 )))):named a172 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_T_dtree_sum_fun$ ))(=> (finite$b ?v0 )(finite$a (image$l ?v1 ?v0 )))):named a173 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_N_fun$ ))(=> (finite$b ?v0 )(finite$b (image$f ?v1 ?v0 )))):named a174 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_fun$ )(?v2 T_T_sum$ ))(= (comp$p (case_sum$ id$ ?v0 )(map_sum$a ?v1 id$ )?v2 )(fun_app$aq (case_sum$ (fun_app$al (comp$k ?v1 )id$ )?v0 )?v2 ))):named a175 ))
(assert (! (forall ((?v0 T_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_T_sum$ ))(= (comp$q (case_sum$a id$f ?v0 )(map_sum$l ?v1 id$ )?v2 )(case_sum$b (fun_app$h (comp$a ?v1 )id$a )?v0 ?v2 ))):named a176 ))
(assert (! (forall ((?v0 Dtree_T_fun$ )(?v1 T_T_fun$ )(?v2 T_dtree_sum$ ))(= (comp$r (case_sum$c id$ ?v0 )(fun_app$d (map_sum$ ?v1 )id$a )?v2 )(fun_app$ar (case_sum$c (fun_app$al (comp$k ?v1 )id$ )?v0 )?v2 ))):named a177 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$s (case_sum$d ?v0 ?v1 )(map_sum$d ?v2 ?v3 ))(case_sum$e (fun_app$e (comp$ ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 )))):named a178 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$t (case_sum$f ?v0 ?v1 )(map_sum$e ?v2 ?v3 ))(case_sum$f (fun_app$h (comp$a ?v0 )?v2 )(fun_app$h (comp$a ?v1 )?v3 )))):named a179 ))
(assert (! (forall ((?v0 T_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ ))(= (fun_app$as (comp$u (fun_app$at (case_sum$g ?v0 )?v1 ))(fun_app$d (map_sum$ ?v2 )?v3 ))(fun_app$at (case_sum$g (fun_app$au (comp$v ?v0 )?v2 ))(fun_app$h (comp$a ?v1 )?v3 )))):named a180 ))
(assert (! (forall ((?v0 T_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$w (case_sum$h ?v0 ?v1 )(fun_app$r (map_sum$b ?v2 )?v3 ))(case_sum$i (fun_app$av (comp$x ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 )))):named a181 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$ (inr$a ?v0 )(image$b (fun_app$r (map_sum$b id$ )root$ )(cont$ ?v1 )))(= (fun_app$f root$ (fun_app$b (subtrOf$ ?v1 )?v0 ))?v0 ))):named a182 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$aw (inItr$ top$ )tr0$ )?v0 )(= (fun_app$f root$ (fun_app$b (pick$ tr0$ )?v0 ))?v0 ))):named a183 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_dtree_fun$ ))(=> (= (fun_app$f ?v0 (fun_app$i ?v1 ?v2 ))(fun_app$g ?v3 (fun_app$f ?v4 ?v2 )))(= (fun_app$i (fun_app$v (comp$d (fun_app$e (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$i (fun_app$e (comp$ (fun_app$x (comp$f ?v5 )?v3 ))?v4 )?v2 )))):named a184 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (= (fun_app$g ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$f ?v3 (fun_app$i ?v4 ?v2 )))(= (fun_app$i (fun_app$e (comp$ (fun_app$x (comp$f ?v5 )?v0 ))?v1 )?v2 )(fun_app$i (fun_app$v (comp$d (fun_app$e (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a185 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$i ?v0 (fun_app$i ?v1 ?v2 ))(fun_app$i ?v3 (fun_app$i ?v4 ?v2 )))(= (fun_app$f (fun_app$h (comp$a (fun_app$h (comp$a ?v5 )?v0 ))?v1 )?v2 )(fun_app$f (fun_app$h (comp$a (fun_app$h (comp$a ?v5 )?v3 ))?v4 )?v2 )))):named a186 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ ))(=> (= (fun_app$b ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$f ?v4 ?v2 )))(= (fun_app$i (fun_app$e (comp$ ?v0 )?v1 )?v2 )(fun_app$i (fun_app$e (comp$ ?v3 )?v4 )?v2 )))):named a187 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ ))(=> (= (fun_app$f ?v0 (fun_app$i ?v1 ?v2 ))(fun_app$f ?v3 (fun_app$i ?v4 ?v2 )))(= (fun_app$f (fun_app$h (comp$a ?v0 )?v1 )?v2 )(fun_app$f (fun_app$h (comp$a ?v3 )?v4 )?v2 )))):named a188 ))
(assert (! (forall ((?v0 T_N_sum$ ))(member$ ?v0 top$a )):named a189 ))
(assert (! (forall ((?v0 N$ ))(member$a ?v0 top$ )):named a190 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a191 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a192 ))
(assert (! (= (finite$a top$b )(and (finite$c top$c )(finite$d top$d ))):named a193 ))
(assert (! (= (finite$ top$a )(and (finite$c top$c )(finite$b top$ ))):named a194 ))
(assert (! (= (finite$e top$e )(and (finite$b top$ )(finite$b top$ ))):named a195 ))
(assert (! (= (finite$f top$f )(and (finite$ top$a )(finite$b top$ ))):named a196 ))
(assert (! (= (finite$g top$g )(and (finite$a top$b )(finite$b top$ ))):named a197 ))
(assert (! (= (finite$h top$h )(and (finite$b top$ )(finite$ top$a ))):named a198 ))
(assert (! (= (finite$i top$i )(and (finite$b top$ )(finite$a top$b ))):named a199 ))
(assert (! (= (finite$j top$j )(and (finite$ top$a )(finite$ top$a ))):named a200 ))
(assert (! (= (finite$k top$k )(and (finite$ top$a )(finite$a top$b ))):named a201 ))
(assert (! (= (finite$l top$l )(and (finite$a top$b )(finite$ top$a ))):named a202 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$aw (inItr$ top$ )tr0$ )?v0 )(= (fun_app$f root$ (fun_app$b (h$ tr0$ )?v0 ))?v0 ))):named a203 ))
(assert (! (finite$b top$ ):named a204 ))
(assert (! (=> (and (finite$ top$a )(finite$a top$b ))(finite$m top$m )):named a205 ))
(assert (! (=> (and (finite$a top$b )(finite$ top$a ))(finite$n top$n )):named a206 ))
(assert (! (=> (and (finite$a top$b )(finite$a top$b ))(finite$o top$o )):named a207 ))
(assert (! (=> (and (finite$ top$a )(finite$b top$ ))(finite$p top$p )):named a208 ))
(assert (! (=> (and (finite$a top$b )(finite$b top$ ))(finite$q top$q )):named a209 ))
(assert (! (=> (and (finite$b top$ )(finite$ top$a ))(finite$r top$r )):named a210 ))
(assert (! (=> (and (finite$b top$ )(finite$a top$b ))(finite$s top$s )):named a211 ))
(assert (! (=> (and (finite$b top$ )(finite$b top$ ))(finite$t top$t )):named a212 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (fun_app$a (fun_app$aw (inItr$ top$ )?v0 )?v1 )(= (fun_app$f root$ (fun_app$b (pick$ ?v0 )?v1 ))?v1 ))):named a213 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (fun_app$a (fun_app$aw (inItr$ top$ )?v0 )?v1 )(= (fun_app$f root$ (fun_app$b (h$ ?v0 )?v1 ))?v1 ))):named a214 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$f root$ ?v0 )?v1 )(fun_app$a (fun_app$aw (inItr$ ?v1 )?v0 )(fun_app$f root$ ?v0 )))):named a215 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$a (fun_app$aw (inItr$ ?v0 )?v1 )?v2 )(member$a (fun_app$f root$ ?v1 )?v0 ))):named a216 ))
(check-sat )
;(get-unsat-core )
