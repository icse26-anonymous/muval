;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort N_T_N_sum_fun$ 0 )
(declare-sort T_N_sum_N_fun$ 0 )
(declare-sort T_N_sum_bool_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-datatypes ()((T_N_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ N$ )))))
(declare-fun h$ (Dtree$ N$ )Dtree$ )
(declare-fun n$ ()N$ )
(declare-fun x$ ()N$ )
(declare-fun ns$ ()N_set$ )
(declare-fun uu$ ()N_T_N_sum_fun$ )
(declare-fun ftr$ (N$ )Dtree$ )
(declare-fun tns$ ()T_N_sum_set$ )
(declare-fun rcut$ (Dtree$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun deftr$ (N$ )Dtree$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun vimage$ (N_T_N_sum_fun$ T_N_sum_set$ )N_set$ )
(declare-fun collect$ (T_N_sum_bool_fun$ )T_N_sum_set$ )
(declare-fun fun_app$ (N_T_N_sum_fun$ N$ )T_N_sum$ )
(declare-fun member$a (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun vimage$a (N_N_fun$ N_set$ )N_set$ )
(declare-fun vimage$b (T_N_sum_N_fun$ N_set$ )T_N_sum_set$ )
(declare-fun vimage$c (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun collect$a (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (N_N_fun$ N$ )N$ )
(declare-fun fun_app$b (T_N_sum_N_fun$ T_N_sum$ )N$ )
(declare-fun fun_app$c (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$d (T_N_sum_bool_fun$ T_N_sum$ )Bool )
(declare-fun fun_app$e (N_bool_fun$ N$ )Bool )
(declare-fun hsubst_r$ (Dtree$ )N$ )
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$ uu$ ?v0 )(inr$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (exists ((?v0 Dtree$ ))(and (exists ((?v1 N$ ))(and (member$ ?v1 (vimage$ uu$ tns$ ))(= ?v0 (ftr$ ?v1 ))))(= x$ (root$ ?v0 ))))):named a1 ))
(assert (! (member$a (inr$ x$ )tns$ ):named a2 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (member$ ?v0 (vimage$a ?v1 ?v2 ))(member$ (fun_app$a ?v1 ?v0 )?v2 ))):named a3 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_N_fun$ )(?v2 N_set$ ))(= (member$a ?v0 (vimage$b ?v1 ?v2 ))(member$ (fun_app$b ?v1 ?v0 )?v2 ))):named a4 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$a ?v0 (vimage$c ?v1 ?v2 ))(member$a (fun_app$c ?v1 ?v0 )?v2 ))):named a5 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$ ?v0 (vimage$ ?v1 ?v2 ))(member$a (fun_app$ ?v1 ?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$a ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$ ?v1 (vimage$a ?v0 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 T_N_sum_N_fun$ )(?v1 T_N_sum$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$b ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$a ?v1 (vimage$b ?v0 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= (fun_app$c ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$a ?v1 (vimage$c ?v0 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= (fun_app$ ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$ ?v1 (vimage$ ?v0 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst_r$ ?v0 )(root$ ?v0 )):pattern ((hsubst_r$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Dtree$ ))(= (root$ (rcut$ ?v0 ))(root$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 T_N_sum_bool_fun$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(= (fun_app$d ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$d ?v2 ?v3 )))(= (vimage$c ?v1 (collect$ ?v0 ))(collect$ ?v2 )))):named a15 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 T_N_sum_N_fun$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(= (fun_app$e ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$d ?v2 ?v3 )))(= (vimage$b ?v1 (collect$a ?v0 ))(collect$ ?v2 )))):named a16 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_N_fun$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(= (fun_app$e ?v0 (fun_app$a ?v1 ?v3 ))(fun_app$e ?v2 ?v3 )))(= (vimage$a ?v1 (collect$a ?v0 ))(collect$a ?v2 )))):named a17 ))
(assert (! (forall ((?v0 T_N_sum_bool_fun$ )(?v1 N_T_N_sum_fun$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(= (fun_app$d ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$e ?v2 ?v3 )))(= (vimage$ ?v1 (collect$ ?v0 ))(collect$a ?v2 )))):named a18 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(=> (and (member$ ?v0 (vimage$a ?v1 ?v2 ))(forall ((?v3 N$ ))(=> (and (= (fun_app$a ?v1 ?v0 )?v3 )(member$ ?v3 ?v2 ))false )))false )):named a19 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_N_fun$ )(?v2 N_set$ ))(=> (and (member$a ?v0 (vimage$b ?v1 ?v2 ))(forall ((?v3 N$ ))(=> (and (= (fun_app$b ?v1 ?v0 )?v3 )(member$ ?v3 ?v2 ))false )))false )):named a20 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(=> (and (member$a ?v0 (vimage$c ?v1 ?v2 ))(forall ((?v3 T_N_sum$ ))(=> (and (= (fun_app$c ?v1 ?v0 )?v3 )(member$a ?v3 ?v2 ))false )))false )):named a21 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(=> (and (member$ ?v0 (vimage$ ?v1 ?v2 ))(forall ((?v3 T_N_sum$ ))(=> (and (= (fun_app$ ?v1 ?v0 )?v3 )(member$a ?v3 ?v2 ))false )))false )):named a22 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(=> (member$ ?v0 (vimage$a ?v1 ?v2 ))(member$ (fun_app$a ?v1 ?v0 )?v2 ))):named a23 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_N_fun$ )(?v2 N_set$ ))(=> (member$a ?v0 (vimage$b ?v1 ?v2 ))(member$ (fun_app$b ?v1 ?v0 )?v2 ))):named a24 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(=> (member$a ?v0 (vimage$c ?v1 ?v2 ))(member$a (fun_app$c ?v1 ?v0 )?v2 ))):named a25 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(=> (member$ ?v0 (vimage$ ?v1 ?v2 ))(member$a (fun_app$ ?v1 ?v0 )?v2 ))):named a26 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ )(?v2 N_set$ ))(=> (member$ (fun_app$a ?v0 ?v1 )?v2 )(member$ ?v1 (vimage$a ?v0 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 T_N_sum_N_fun$ )(?v1 T_N_sum$ )(?v2 N_set$ ))(=> (member$ (fun_app$b ?v0 ?v1 )?v2 )(member$a ?v1 (vimage$b ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum$ )(?v2 T_N_sum_set$ ))(=> (member$a (fun_app$c ?v0 ?v1 )?v2 )(member$a ?v1 (vimage$c ?v0 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N$ )(?v2 T_N_sum_set$ ))(=> (member$a (fun_app$ ?v0 ?v1 )?v2 )(member$ ?v1 (vimage$ ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(=> (not (= ?v0 ?v1 ))(not (= (inr$ ?v0 )(inr$ ?v1 ))))):named a32 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (rcut$ ?v0 )(h$ ?v0 (root$ ?v0 ))):pattern ((rcut$ ?v0 )))):named a33 ))
(assert (! (member$ n$ ns$ ):named a34 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (deftr$ ?v0 ))?v0 )):named a35 ))
(check-sat )
;(get-unsat-core )
