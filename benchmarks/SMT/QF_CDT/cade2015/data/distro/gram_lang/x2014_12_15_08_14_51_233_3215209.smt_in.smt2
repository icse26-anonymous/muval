;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-datatypes ()((N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))))
(declare-fun n$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun ns$ ()N_set$ )
(declare-fun bot$ ()N_set$ )
(declare-fun nl1$ ()N_list$ )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun minus$ (N_set$ )N_set_N_set_fun$ )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun collect$ (N_bool_fun$ )N_set$ )
(declare-fun fun_app$ (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun fun_app$a (N_bool_fun$ N$ )Bool )
(assert (! (not (less_eq$ (set$ nl1$ )(fun_app$ (minus$ ns$ )(insert$ n$ bot$ )))):named a0 ))
(assert (! (not (member$ n$ (set$ nl1$ ))):named a1 ))
(assert (! (less_eq$ (set$ nl$ )ns$ ):named a2 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ ))(= (insert$ ?v0 (fun_app$ (minus$ ?v1 )(insert$ ?v0 bot$ )))(insert$ ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(= (= (fun_app$ (minus$ ?v0 )?v1 )bot$ )(less_eq$ ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ ))(= (= (insert$ ?v0 ?v1 )(insert$ ?v2 bot$ ))(and (= ?v0 ?v2 )(less_eq$ ?v1 (insert$ ?v2 bot$ ))))):named a5 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_set$ ))(= (= (insert$ ?v0 bot$ )(insert$ ?v1 ?v2 ))(and (= ?v1 ?v0 )(less_eq$ ?v2 (insert$ ?v0 bot$ ))))):named a6 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (member$ ?v0 ?v1 )(= (fun_app$ (minus$ (insert$ ?v0 ?v2 ))?v1 )(fun_app$ (minus$ ?v2 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (not (member$ ?v0 ?v1 ))(= (fun_app$ (minus$ ?v1 )(insert$ ?v0 ?v2 ))(fun_app$ (minus$ ?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 N_set$ ))(= (fun_app$ (minus$ ?v0 )bot$ )?v0 )):named a9 ))
(assert (! (forall ((?v0 N_set$ ))(! (= (fun_app$ (minus$ ?v0 )?v0 )bot$ ):pattern ((minus$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 N_set$ ))(= (fun_app$ (minus$ bot$ )?v0 )bot$ )):named a11 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(= (less_eq$ (insert$ ?v0 ?v1 )?v2 )(and (member$ ?v0 ?v2 )(less_eq$ ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 N$ ))(member$ ?v0 (insert$ ?v0 bot$ ))):named a13 ))
(assert (! (forall ((?v0 N_set$ ))(= (less_eq$ ?v0 bot$ )(= ?v0 bot$ ))):named a14 ))
(assert (! (forall ((?v0 N$ ))(= (member$ ?v0 bot$ )false )):named a15 ))
(assert (! (forall ((?v0 N_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 N$ ))(not (fun_app$a ?v0 ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 N_set$ ))(= (forall ((?v1 N$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
