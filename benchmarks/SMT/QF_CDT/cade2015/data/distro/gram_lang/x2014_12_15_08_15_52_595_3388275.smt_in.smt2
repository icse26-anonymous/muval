;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun h$ (Dtree$ N$ )Dtree$ )
(declare-fun n$ ()N$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun top$ ()N_set$ )
(declare-fun tr$a ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ N$ )Dtree$ )
(declare-fun rcut$ (Dtree$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun deftr$ (N$ )Dtree$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun hsubst$ (Dtree$ Dtree$ )Dtree$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(assert (! (not (wf$ tr$ )):named a0 ))
(assert (! (= tr$a (hsubst$ tr$ tr$ )):named a1 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (wf$ ?v0 )(wf$ (rcut$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 N$ ))(wf$ (deftr$ ?v0 ))):named a3 ))
(assert (! (= (root$ tr$ )n$ ):named a4 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(wf$ ?v1 ))(wf$ (hsubst$ ?v0 ?v1 )))):named a5 ))
(assert (! (member$ n$ ns$ ):named a6 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(subtr$ ?v1 ?v2 ?v0 ))(wf$ ?v2 ))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$a (inr$ ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (and (wf$ ?v0 )(inItr$ top$ ?v0 ?v1 ))(wf$ (pick$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (and (wf$ ?v0 )(inItr$ top$ ?v0 ?v1 ))(wf$ (h$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (root$ (hsubst$ ?v0 ?v1 ))(root$ ?v1 ))):named a11 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (deftr$ ?v0 ))?v0 )):named a12 ))
(assert (! (forall ((?v0 Dtree$ ))(= (root$ (rcut$ ?v0 ))(root$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$a (inr$ ?v1 )(cont$ ?v0 ))(member$a (inr$ ?v2 )(cont$ ?v0 ))))(= (= (root$ ?v1 )(root$ ?v2 ))(= ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (inItr$ top$ ?v0 ?v1 )(= (root$ (h$ ?v0 ?v1 ))?v1 ))):named a15 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(= (inItr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (root$ ?v3 ))(member$ (root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$ (root$ ?v3 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v3 ))(inItr$ ?v4 ?v5 ?v6 )))))))))):named a16 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (subtr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$ (root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$ (root$ ?v3 )?v4 )(and (subtr$ ?v4 ?v5 ?v6 )(member$a (inr$ ?v6 )(cont$ ?v3 ))))))))))):named a17 ))
(check-sat )
;(get-unsat-core )
