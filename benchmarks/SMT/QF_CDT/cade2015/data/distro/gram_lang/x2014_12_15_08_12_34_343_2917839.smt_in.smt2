;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-datatypes ()((N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun nsa$ ()N_set$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(assert (! (not (and (path$ f$ (cons$ (root$ tra$ )nil$ ))(and (= (fun_app$ f$ (hd$ (cons$ (root$ tra$ )nil$ )))tra$ )(and (= (fun_app$ f$ (last$ (cons$ (root$ tra$ )nil$ )))tra$ )(less_eq$ (set$ (cons$ (root$ tra$ )nil$ ))nsa$ ))))):named a0 ))
(assert (! (member$ (root$ tra$ )nsa$ ):named a1 ))
(assert (! (reg$ f$ tra$ ):named a2 ))
(assert (! (reg$ f$ tr$ ):named a3 ))
(assert (! (reg$ f$ tra$ ):named a4 ))
(assert (! (member$ (root$ tra$ )nsa$ ):named a5 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(=> (reg$ ?v0 ?v1 )(= (fun_app$ ?v0 (root$ ?v1 ))?v1 ))):named a6 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ )(?v2 N_list$ ))(=> (and (path$ ?v0 (cons$ ?v1 ?v2 ))(not (= ?v2 nil$ )))(path$ ?v0 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(=> (path$ ?v0 ?v1 )(not (= ?v1 nil$ )))):named a8 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ ))(path$ ?v0 (cons$ ?v1 nil$ ))):named a9 ))
(assert (! (forall ((?v0 N_list$ ))(=> (not (= ?v0 nil$ ))(member$ (last$ ?v0 )(set$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (= (last$ (cons$ ?v0 ?v1 ))(ite (= ?v1 nil$ )?v0 (last$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N$ ))(! (=> (= ?v0 nil$ )(= (last$ (cons$ ?v1 ?v0 ))?v1 )):pattern ((cons$ ?v1 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N$ ))(! (=> (not (= ?v0 nil$ ))(= (last$ (cons$ ?v1 ?v0 ))(last$ ?v0 ))):pattern ((cons$ ?v1 ?v0 )))):named a13 ))
(assert (! (forall ((?v0 N_list$ ))(=> (not (= ?v0 nil$ ))(member$ (hd$ ?v0 )(set$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 N_list$ ))(=> (not (= ?v0 nil$ ))(member$ (hd$ ?v0 )(set$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N$ ))(less_eq$ (set$ ?v0 )(set$ (cons$ ?v1 ?v0 )))):named a16 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(=> (and (forall ((?v2 N$ ))(= (root$ (fun_app$ ?v0 ?v2 ))?v2 ))(path$ ?v0 ?v1 ))(subtr$ (set$ ?v1 )(fun_app$ ?v0 (last$ ?v1 ))(fun_app$ ?v0 (hd$ ?v1 ))))):named a17 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (forall ((?v2 N$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a19 ))
(check-sat )
;(get-unsat-core )
