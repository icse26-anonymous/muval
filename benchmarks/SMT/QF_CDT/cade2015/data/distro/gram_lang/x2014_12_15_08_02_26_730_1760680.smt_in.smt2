;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun ta$ ()T$ )
(declare-fun nsa$ ()N_set$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun ns_a$ ()N_set$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun less_eq$a (T_dtree_sum_set$ T_dtree_sum_set$ )Bool )
(assert (! (not (inFr$ ns_a$ tra$ ta$ )):named a0 ))
(assert (! (member$ (root$ tra$ )nsa$ ):named a1 ))
(assert (! (member$a (inl$ ta$ )(cont$ tra$ )):named a2 ))
(assert (! (less_eq$ nsa$ ns_a$ ):named a3 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ ))(=> (and (less_eq$a ?v0 ?v1 )(and (=> (not (member$a ?v2 ?v0 ))false )(=> (member$a ?v2 ?v1 )false )))false )):named a4 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ )(?v2 N$ ))(=> (and (less_eq$ ?v0 ?v1 )(and (=> (not (member$ ?v2 ?v0 ))false )(=> (member$ ?v2 ?v1 )false )))false )):named a5 ))
(check-sat )
;(get-unsat-core )
