;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun n$ ()N$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun nsa$ ()N_set$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr$a ()Dtree$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun inFr2$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ )Dtree_bool_fun$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun subtr2$ (N_set$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$ (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$a (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$b (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(declare-fun fun_app$c (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$d (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun fun_app$e (N_set_dtree_T_bool_fun_fun_fun$ N_set$ )Dtree_T_bool_fun_fun$ )
(assert (! (not (exists ((?v0 Dtree$ ))(and (fun_app$ (subtr$ nsa$ ?v0 )tra$ )(= (root$ ?v0 )(root$ tr$ ))))):named a0 ))
(assert (! (member$ (root$ tra$ )nsa$ ):named a1 ))
(assert (! (member$a (inr$ tr1$ )(cont$ tra$ )):named a2 ))
(assert (! (inItr$ nsa$ tr1$ (root$ tr$ )):named a3 ))
(assert (! (fun_app$ (subtr$ nsa$ tr$ )tr1$ ):named a4 ))
(assert (! (inItr$ ns$ tr$a n$ ):named a5 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(= (inItr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (root$ ?v3 ))(member$ (root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$ (root$ ?v3 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v3 ))(inItr$ ?v4 ?v5 ?v6 )))))))))):named a6 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (fun_app$ (subtr$ ?v0 ?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$ (root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$ (root$ ?v3 )?v4 )(and (fun_app$ (subtr$ ?v4 ?v5 )?v6 )(member$a (inr$ ?v6 )(cont$ ?v3 ))))))))))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (and (inItr$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (root$ ?v3 ))(member$ (root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$ (root$ ?v3 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v3 ))(inItr$ ?v4 ?v5 ?v6 ))))))false ))))false )):named a8 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (inItr$ ?v0 ?v1 ?v2 )(fun_app$ (subtr$ ?v0 ?v1 )?v3 ))(inItr$ ?v0 ?v3 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (inItr$ ?v0 ?v1 ?v2 )(member$ (root$ ?v1 )?v0 ))):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set_dtree_dtree_bool_fun_fun_fun$ ))(=> (and (fun_app$ (subtr$ ?v0 ?v1 )?v2 )(and (forall ((?v4 N_set$ )(?v5 Dtree$ ))(fun_app$ (fun_app$a (fun_app$b ?v3 ?v4 )?v5 )?v5 ))(forall ((?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$ (root$ ?v5 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v6 ))(and (fun_app$ (subtr$ ?v4 ?v6 )?v7 )(fun_app$ (fun_app$a (fun_app$b ?v3 ?v4 )?v6 )?v7 ))))(fun_app$ (fun_app$a (fun_app$b ?v3 ?v4 )?v5 )?v7 )))))(fun_app$ (fun_app$a (fun_app$b ?v3 ?v0 )?v1 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (fun_app$ (subtr$ ?v0 ?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$ (root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$ (root$ ?v3 )?v4 )(and (fun_app$ (subtr$ ?v4 ?v5 )?v6 )(member$a (inr$ ?v6 )(cont$ ?v3 )))))))false ))))false )):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$ (subtr$ ?v0 ?v1 )?v2 )(fun_app$ (subtr$ ?v0 ?v2 )?v3 ))(fun_app$ (subtr$ ?v0 ?v1 )?v3 ))):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$ (subtr$ ?v0 ?v1 )?v2 )(member$ (root$ ?v2 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$ (subtr$ ?v0 ?v1 )?v2 )(member$ (root$ ?v1 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$ (root$ ?v0 )?v1 )(and (fun_app$ (subtr$ ?v1 ?v2 )?v3 )(member$a (inr$ ?v3 )(cont$ ?v0 ))))(fun_app$ (subtr$ ?v1 ?v2 )?v0 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N$ ))(=> (and (member$ (root$ ?v0 )?v1 )(and (member$a (inr$ ?v2 )(cont$ ?v0 ))(inItr$ ?v1 ?v2 ?v3 )))(inItr$ ?v1 ?v0 ?v3 ))):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$ (root$ ?v0 )?v1 )(and (member$a (inr$ ?v0 )(cont$ ?v2 ))(fun_app$ (subtr$ ?v1 ?v2 )?v3 )))(fun_app$ (subtr$ ?v1 ?v0 )?v3 ))):named a18 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (root$ ?v0 )?v1 )(inItr$ ?v1 ?v0 (root$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (root$ ?v0 )?v1 )(fun_app$ (subtr$ ?v1 ?v0 )?v0 ))):named a20 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$c (fun_app$d (fun_app$e inFr2$ ?v0 )?v1 )?v2 )(and (member$ (root$ ?v3 )?v0 )(member$a (inr$ ?v1 )(cont$ ?v3 ))))(fun_app$c (fun_app$d (fun_app$e inFr2$ ?v0 )?v3 )?v2 ))):named a24 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$ (root$ ?v0 )?v1 )(and (member$a (inr$ ?v2 )(cont$ ?v0 ))(fun_app$c (fun_app$d (fun_app$e inFr$ ?v1 )?v2 )?v3 )))(fun_app$c (fun_app$d (fun_app$e inFr$ ?v1 )?v0 )?v3 ))):named a25 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (fun_app$ (subtr2$ ?v0 ?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$ (root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$ (root$ ?v3 )?v4 )(and (member$a (inr$ ?v3 )(cont$ ?v5 ))(fun_app$ (subtr2$ ?v4 ?v5 )?v6 )))))))))):named a26 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (fun_app$ (subtr2$ ?v0 ?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$ (root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$ (root$ ?v3 )?v4 )(and (member$a (inr$ ?v3 )(cont$ ?v5 ))(fun_app$ (subtr2$ ?v4 ?v5 )?v6 ))))))false ))))false )):named a27 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$ (root$ ?v0 )?v1 )(and (member$a (inr$ ?v2 )(cont$ ?v0 ))(fun_app$ (subtr2$ ?v1 ?v3 )?v2 )))(fun_app$ (subtr2$ ?v1 ?v3 )?v0 ))):named a28 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$ (root$ ?v0 )?v1 )(and (member$a (inr$ ?v0 )(cont$ ?v2 ))(fun_app$ (subtr2$ ?v1 ?v2 )?v3 )))(fun_app$ (subtr2$ ?v1 ?v0 )?v3 ))):named a29 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree_dtree_bool_fun_fun$ ))(=> (and (fun_app$ (subtr$ top$ ?v0 )?v1 )(and (forall ((?v3 Dtree$ ))(fun_app$ (fun_app$a ?v2 ?v3 )?v3 ))(forall ((?v3 Dtree$ )(?v4 Dtree$ )(?v5 Dtree$ ))(=> (and (member$a (inr$ ?v3 )(cont$ ?v4 ))(and (fun_app$ (subtr$ top$ ?v4 )?v5 )(fun_app$ (fun_app$a ?v2 ?v4 )?v5 )))(fun_app$ (fun_app$a ?v2 ?v3 )?v5 )))))(fun_app$ (fun_app$a ?v2 ?v0 )?v1 ))):named a30 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= ?v0 ?v1 ))(not (= (inr$ ?v0 )(inr$ ?v1 ))))):named a32 ))
(assert (! (= inFr$ inFr2$ ):named a33 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$ (subtr2$ ?v0 ?v1 )?v2 )(fun_app$ (subtr2$ ?v0 ?v2 )?v3 ))(fun_app$ (subtr2$ ?v0 ?v1 )?v3 ))):named a34 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (root$ ?v0 )?v1 )(fun_app$ (subtr2$ ?v1 ?v0 )?v0 ))):named a35 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$ (subtr2$ ?v0 ?v1 )?v2 )(member$ (root$ ?v1 )?v0 ))):named a36 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$ (subtr2$ ?v0 ?v1 )?v2 )(member$ (root$ ?v2 )?v0 ))):named a37 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$ (root$ ?v0 )?v1 ))(not (fun_app$c (fun_app$d (fun_app$e inFr$ ?v1 )?v0 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$c (fun_app$d (fun_app$e inFr$ ?v0 )?v1 )?v2 )(member$ (root$ ?v1 )?v0 ))):named a39 ))
(check-sat )
;(get-unsat-core )
