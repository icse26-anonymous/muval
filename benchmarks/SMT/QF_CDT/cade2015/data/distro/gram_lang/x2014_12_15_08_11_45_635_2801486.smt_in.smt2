;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-datatypes ()((N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun nl$ ()N_list$ )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun collect$ (N_bool_fun$ )N_set$ )
(declare-fun fun_app$ (N_bool_fun$ N$ )Bool )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun distinct$ (N_list$ )Bool )
(assert (! (not (exists ((?v0 N_list$ ))(and (path$ f$ ?v0 )(and (= (hd$ ?v0 )(hd$ nl$ ))(and (= (last$ ?v0 )(last$ nl$ ))(and (less_eq$ (set$ ?v0 )(set$ nl$ ))(distinct$ ?v0 ))))))):named a0 ))
(assert (! (path$ f$ nl$ ):named a1 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (forall ((?v2 N$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 N_set$ ))(less_eq$ ?v0 ?v0 )):named a4 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_set$ ))(= (less_eq$ (set$ ?v0 )?v1 )(forall ((?v2 N$ ))(=> (member$ ?v2 (set$ ?v0 ))(member$ ?v2 ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a6 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(= (less_eq$ ?v0 ?v1 )(forall ((?v2 N$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(= (less_eq$ ?v0 ?v1 )(forall ((?v2 N$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_bool_fun$ ))(=> (forall ((?v2 N$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(less_eq$ (collect$ ?v0 )(collect$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (and (= ?v0 ?v1 )(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))false ))false )):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (and (member$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(member$ ?v0 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 N_set$ ))(less_eq$ ?v0 ?v0 )):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(! (=> (less_eq$ ?v0 ?v1 )(= (less_eq$ ?v1 ?v0 )(= ?v1 ?v0 ))):pattern ((less_eq$ ?v1 ?v0 )))):named a15 ))
(check-sat )
;(get-unsat-core )
