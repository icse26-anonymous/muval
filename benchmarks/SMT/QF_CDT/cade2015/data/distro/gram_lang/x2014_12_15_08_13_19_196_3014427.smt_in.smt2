;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort N_T_N_sum_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort T_N_sum_bool_fun$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort T_T_N_sum_sum_set$ 0 )
(declare-sort Dtree_set_N_set_fun$ 0 )
(declare-sort N_set_dtree_set_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_fun_T_T_fun_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_fun$ 0 )
(declare-sort T_T_dtree_sum_sum_set$ 0 )
(declare-sort Dtree_set_dtree_set_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort T_N_sum_T_T_N_sum_sum_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_set_dtree_set_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_N_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_T_dtree_sum_sum_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_T_dtree_sum_fun_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_fun_dtree_T_dtree_sum_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))(T_T_dtree_sum_sum$ (inl$a (projl$a T$ ))(inr$a (projr$a T_dtree_sum$ )))(T_N_sum$ (inl$b (projl$b T$ ))(inr$b (projr$b N$ )))(T_T_N_sum_sum$ (inl$c (projl$c T$ ))(inr$c (projr$c T_N_sum$ )))(Dtree_dtree_sum$ (inl$d (projl$d Dtree$ ))(inr$d (projr$d Dtree$ )))(N_N_sum$ (inl$e (projl$e N$ ))(inr$e (projr$e N$ )))(Dtree_N_sum$ (inl$f (projl$f Dtree$ ))(inr$f (projr$f N$ )))(N_dtree_sum$ (inl$g (projl$g N$ ))(inr$g (projr$g Dtree$ )))(T_T_sum$ (inl$h (projl$h T$ ))(inr$h (projr$h T$ )))))
(declare-fun h$ (Dtree$ )N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun uu$ ()Dtree_T_dtree_sum_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun h_c$ (Dtree$ )N_T_N_sum_set_fun$ )
(declare-fun h_r$ (Dtree$ )N_N_fun$ )
(declare-fun id$a ()T_set_T_set_fun$ )
(declare-fun id$b ()Dtree_dtree_fun$ )
(declare-fun id$c ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun id$d ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$e ()Dtree_set_dtree_set_fun$ )
(declare-fun id$f ()N_N_fun$ )
(declare-fun id$g ()T_T_sum_T_T_sum_fun$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun uua$ ()T_dtree_sum_T_T_dtree_sum_sum_fun$ )
(declare-fun uub$ ()T_N_sum_T_T_N_sum_sum_fun$ )
(declare-fun uuc$ ()N_T_N_sum_fun$ )
(declare-fun uud$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun uue$ (T_N_sum_set$ )T_N_sum_bool_fun$ )
(declare-fun comp$ (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ )N_dtree_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun comp$a (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun comp$b (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun comp$c (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$d (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$e (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$f (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$g (T_N_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$h (T_N_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$i (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$j (T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$k (N_set_dtree_set_fun$ Dtree_set_N_set_fun$ )Dtree_set_dtree_set_fun$ )
(declare-fun comp$l (Dtree_set_dtree_set_fun$ N_set_dtree_set_fun$ )N_set_dtree_set_fun$ )
(declare-fun comp$m (Dtree_set_dtree_set_fun$ T_dtree_sum_set_dtree_set_fun$ )T_dtree_sum_set_dtree_set_fun$ )
(declare-fun comp$n (Dtree_T_dtree_sum_fun$ )Dtree_dtree_fun_dtree_T_dtree_sum_fun_fun$ )
(declare-fun comp$o (T_dtree_sum_set_dtree_set_fun$ T_dtree_sum_set_T_dtree_sum_set_fun$ )T_dtree_sum_set_dtree_set_fun$ )
(declare-fun comp$p (T_dtree_sum_T_dtree_sum_fun$ )Dtree_T_dtree_sum_fun_dtree_T_dtree_sum_fun_fun$ )
(declare-fun comp$q (T_T_fun$ )T_T_fun_T_T_fun_fun$ )
(declare-fun image$ (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun finite$ (T_N_sum_set$ )Bool )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun image$a (Dtree_dtree_fun$ )Dtree_set_dtree_set_fun$ )
(declare-fun image$b (T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ T_T_dtree_sum_sum_set$ )T_T_dtree_sum_sum_set$ )
(declare-fun image$c (T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ T_T_dtree_sum_sum_set$ )T_T_N_sum_sum_set$ )
(declare-fun image$d (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun image$e (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$f (N_dtree_fun$ N_set$ )Dtree_set$ )
(declare-fun image$g (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun image$h (N_N_fun$ N_set$ )N_set$ )
(declare-fun image$i (Dtree_N_fun$ Dtree_set$ )N_set$ )
(declare-fun image$j (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun vimage$ (Dtree_T_dtree_sum_fun$ )T_dtree_sum_set_dtree_set_fun$ )
(declare-fun collect$ (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$ (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_dtree_sum$ )T_T_dtree_sum_sum$ )
(declare-fun map_sum$ (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun member$a (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun member$b (Dtree$ Dtree_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ )N_dtree_fun$ )
(declare-fun vimage$a (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_T_dtree_sum_sum_set$ )T_dtree_sum_set$ )
(declare-fun vimage$b (T_N_sum_T_T_N_sum_sum_fun$ T_T_N_sum_sum_set$ )T_N_sum_set$ )
(declare-fun vimage$c (N_T_N_sum_fun$ T_N_sum_set$ )N_set$ )
(declare-fun vimage$d (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun vimage$e (Dtree_N_fun$ )N_set_dtree_set_fun$ )
(declare-fun vimage$f (N_dtree_fun$ )Dtree_set_N_set_fun$ )
(declare-fun vimage$g (Dtree_dtree_fun$ )Dtree_set_dtree_set_fun$ )
(declare-fun vimage$h (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun vimage$i (T_N_sum_T_dtree_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun vimage$j (T_dtree_sum_T_N_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun vimage$k (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun collect$a (T_N_sum_bool_fun$ )T_N_sum_set$ )
(declare-fun collect$b (Dtree_bool_fun$ )Dtree_set$ )
(declare-fun fun_app$a (T_N_sum_T_T_N_sum_sum_fun$ T_N_sum$ )T_T_N_sum_sum$ )
(declare-fun fun_app$b (Dtree_T_dtree_sum_fun$ Dtree$ )T_dtree_sum$ )
(declare-fun fun_app$c (N_T_N_sum_fun$ N$ )T_N_sum$ )
(declare-fun fun_app$d (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun fun_app$e (T_N_sum_bool_fun$ T_N_sum$ )Bool )
(declare-fun fun_app$f (T_dtree_sum_set_dtree_set_fun$ T_dtree_sum_set$ )Dtree_set$ )
(declare-fun fun_app$g (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$h (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$i (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$j (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$k (Dtree_set_dtree_set_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun fun_app$l (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$m (N_N_fun$ N$ )N$ )
(declare-fun fun_app$n (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$o (N_N_fun_T_N_sum_T_N_sum_fun_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$p (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$q (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$r (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$s (T_T_fun$ T$ )T$ )
(declare-fun fun_app$t (N_T_N_sum_set_fun$ N$ )T_N_sum_set$ )
(declare-fun fun_app$u (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$v (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$w (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$x (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$y (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$z (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun map_sum$a (T_T_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ )
(declare-fun map_sum$b (T_T_fun$ T_dtree_sum_T_N_sum_fun$ )T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ )
(declare-fun map_sum$c (T_T_fun$ )N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$d (T_T_fun$ )N_N_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$e (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$f (N_dtree_fun$ N_dtree_fun$ N_N_sum$ )Dtree_dtree_sum$ )
(declare-fun map_sum$g (Dtree_N_fun$ Dtree_N_fun$ Dtree_dtree_sum$ )N_N_sum$ )
(declare-fun map_sum$h (Dtree_dtree_fun$ Dtree_dtree_fun$ Dtree_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun map_sum$i (N_dtree_fun$ Dtree_N_fun$ N_dtree_sum$ )Dtree_N_sum$ )
(declare-fun map_sum$j (Dtree_N_fun$ Dtree_dtree_fun$ Dtree_dtree_sum$ )N_dtree_sum$ )
(declare-fun map_sum$k (Dtree_dtree_fun$ Dtree_N_fun$ Dtree_dtree_sum$ )Dtree_N_sum$ )
(declare-fun map_sum$l (Dtree_N_fun$ N_dtree_fun$ Dtree_N_sum$ )N_dtree_sum$ )
(declare-fun map_sum$m (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun fun_app$aa (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$ab (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$ac (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$ad (Dtree_dtree_fun_dtree_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )Dtree_T_dtree_sum_fun$ )
(declare-fun fun_app$ae (Dtree_T_dtree_sum_fun_dtree_T_dtree_sum_fun_fun$ Dtree_T_dtree_sum_fun$ )Dtree_T_dtree_sum_fun$ )
(declare-fun fun_app$af (N_set_dtree_set_fun$ N_set$ )Dtree_set$ )
(declare-fun fun_app$ag (Dtree_set_N_set_fun$ Dtree_set$ )N_set$ )
(declare-fun fun_app$ah (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$ai (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$aj (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$ak (T_T_fun_T_T_fun_fun$ T_T_fun$ )T_T_fun$ )
(declare-fun fun_app$al (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$am (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$an (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$ao (Dtree_bool_fun$ Dtree$ )Bool )
(assert (! (forall ((?v0 T_dtree_sum$ ))(! (= (fun_app$ uua$ ?v0 )(inr$a ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 T_N_sum$ ))(! (= (fun_app$a uub$ ?v0 )(inr$c ?v0 )):pattern ((fun_app$a uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$b uu$ ?v0 )(inr$ ?v0 )):pattern ((fun_app$b uu$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$c uuc$ ?v0 )(inr$b ?v0 )):pattern ((fun_app$c uuc$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$d (uud$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$d (uud$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum$ ))(! (= (fun_app$e (uue$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$e (uue$ ?v0 )?v1 )))):named a5 ))
(assert (! (not (= (fun_app$f (vimage$ uu$ )(fun_app$g (image$ (fun_app$h (map_sum$ id$ )(fun_app$i (comp$ (h$ tr0$ ))root$ )))(cont$ (fun_app$j (pick$ tr0$ )n$ ))))(fun_app$k (image$a (fun_app$i (comp$ (h$ tr0$ ))root$ ))(fun_app$f (vimage$ uu$ )(cont$ (fun_app$j (pick$ tr0$ )n$ )))))):named a6 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$l root$ (fun_app$j (h$ tr0$ )?v0 ))(fun_app$l root$ (fun_app$j (pick$ tr0$ )?v0 )))):named a7 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$m (h_r$ tr0$ )?v0 )(fun_app$l root$ (fun_app$j (pick$ tr0$ )?v0 ))):pattern ((fun_app$m (h_r$ tr0$ )?v0 )))):named a8 ))
(assert (! (forall ((?v0 N$ ))(= (cont$ (fun_app$j (h$ tr0$ )?v0 ))(fun_app$g (image$ (fun_app$h (map_sum$ id$ )(fun_app$i (comp$ (h$ tr0$ ))root$ )))(cont$ (fun_app$j (pick$ tr0$ )?v0 ))))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (cont$ (fun_app$j (h$ ?v0 )?v1 ))(fun_app$g (image$ (fun_app$h (map_sum$ id$ )(fun_app$i (comp$ (h$ ?v0 ))root$ )))(cont$ (fun_app$j (pick$ ?v0 )?v1 ))))):named a10 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (fun_app$l root$ (fun_app$j (h$ ?v0 )?v1 ))(fun_app$l root$ (fun_app$j (pick$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_T_dtree_sum_sum_set$ ))(= (vimage$a uua$ (image$b (map_sum$a id$ ?v0 )?v1 ))(fun_app$g (image$ ?v0 )(vimage$a uua$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_T_dtree_sum_sum_set$ ))(= (vimage$b uub$ (image$c (map_sum$b id$ ?v0 )?v1 ))(image$d ?v0 (vimage$a uua$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 T_N_sum_set$ ))(= (fun_app$f (vimage$ uu$ )(image$e (fun_app$n (map_sum$c id$ )?v0 )?v1 ))(image$f ?v0 (vimage$c uuc$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 T_N_sum_set$ ))(= (vimage$c uuc$ (image$g (fun_app$o (map_sum$d id$ )?v0 )?v1 ))(image$h ?v0 (vimage$c uuc$ ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$f (vimage$ uu$ )(fun_app$g (image$ (fun_app$h (map_sum$ id$ )?v0 ))?v1 ))(fun_app$k (image$a ?v0 )(fun_app$f (vimage$ uu$ )?v1 )))):named a16 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 T_dtree_sum_set$ ))(= (vimage$c uuc$ (image$d (fun_app$p (map_sum$e id$ )?v0 )?v1 ))(image$i ?v0 (fun_app$f (vimage$ uu$ )?v1 )))):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum_set$ ))(= (member$ (inr$ ?v0 )(image$e (fun_app$n (map_sum$c id$ )?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$a (inr$b ?v3 )?v2 )(= (fun_app$j ?v1 ?v3 )?v0 ))))):named a18 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 T_N_sum_set$ ))(= (member$a (inr$b ?v0 )(image$g (fun_app$o (map_sum$d id$ )?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$a (inr$b ?v3 )?v2 )(= (fun_app$m ?v1 ?v3 )?v0 ))))):named a19 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ (inr$ ?v0 )(fun_app$g (image$ (fun_app$h (map_sum$ id$ )?v1 ))?v2 ))(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$q ?v1 ?v3 )?v0 ))))):named a20 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a (inr$b ?v0 )(image$d (fun_app$p (map_sum$e id$ )?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$l ?v1 ?v3 )?v0 ))))):named a21 ))
(assert (! (= (vimage$d id$ )id$a ):named a22 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$r (comp$a ?v0 )id$b )?v0 )):named a23 ))
(assert (! (= (image$j id$ )id$a ):named a24 ))
(assert (! (= (image$ id$c )id$d ):named a25 ))
(assert (! (= (image$a id$b )id$e ):named a26 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum_set$ ))(=> (member$ (inr$ ?v0 )(image$e (fun_app$n (map_sum$c id$ )?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$a (inr$b ?v3 )?v2 )(= (fun_app$j ?v1 ?v3 )?v0 ))))):named a27 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 T_N_sum_set$ ))(=> (member$a (inr$b ?v0 )(image$g (fun_app$o (map_sum$d id$ )?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$a (inr$b ?v3 )?v2 )(= (fun_app$m ?v1 ?v3 )?v0 ))))):named a28 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$ (inr$ ?v0 )(fun_app$g (image$ (fun_app$h (map_sum$ id$ )?v1 ))?v2 ))(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$q ?v1 ?v3 )?v0 ))))):named a29 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$a (inr$b ?v0 )(image$d (fun_app$p (map_sum$e id$ )?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$l ?v1 ?v3 )?v0 ))))):named a30 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$l root$ ?v0 )(fun_app$l root$ ?v1 ))(= (cont$ (fun_app$q (hsubst$ ?v1 )?v0 ))(fun_app$g (image$ (fun_app$h (map_sum$ id$ )(hsubst$ ?v1 )))(cont$ ?v1 ))))):named a31 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= (fun_app$l root$ ?v0 )(fun_app$l root$ ?v1 )))(= (cont$ (fun_app$q (hsubst$ ?v1 )?v0 ))(fun_app$g (image$ (fun_app$h (map_sum$ id$ )(hsubst$ ?v1 )))(cont$ ?v0 ))))):named a32 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$l root$ ?v0 )(fun_app$l root$ ?v1 ))(= (fun_app$f (vimage$ uu$ )(cont$ (fun_app$q (hsubst$ ?v1 )?v0 )))(fun_app$k (image$a (hsubst$ ?v1 ))(fun_app$f (vimage$ uu$ )(cont$ ?v1 )))))):named a33 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= (fun_app$l root$ ?v0 )(fun_app$l root$ ?v1 )))(= (fun_app$f (vimage$ uu$ )(cont$ (fun_app$q (hsubst$ ?v1 )?v0 )))(fun_app$k (image$a (hsubst$ ?v1 ))(fun_app$f (vimage$ uu$ )(cont$ ?v0 )))))):named a34 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$q (fun_app$i (comp$ ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$q (fun_app$i (comp$ ?v0 )?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$l (fun_app$r (comp$a ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$q ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$r (comp$a ?v0 )?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$s id$ ?v0 )?v0 ):pattern ((fun_app$s id$ ?v0 )))):named a37 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$r (comp$a root$ )(hsubst$ ?v0 ))root$ )):named a38 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$l root$ (fun_app$q (hsubst$ ?v0 )?v1 ))(fun_app$l root$ ?v1 ))):named a39 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$t (h_c$ tr0$ )?v0 )(image$d (fun_app$p (map_sum$e id$ )root$ )(cont$ (fun_app$j (pick$ tr0$ )?v0 )))):pattern ((fun_app$t (h_c$ tr0$ )?v0 )))):named a40 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (member$ (inr$ ?v0 )(cont$ ?v1 ))(member$a (inr$b (fun_app$l root$ ?v0 ))(image$d (fun_app$p (map_sum$e id$ )root$ )(cont$ ?v1 ))))):named a41 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$l root$ ?v0 )(fun_app$l root$ ?v1 ))(= (fun_app$q (hsubst$ ?v1 )?v0 )(fun_app$q (hsubst$ ?v1 )?v1 )))):named a42 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$i (comp$ ?v0 )?v1 )?v2 )(= (fun_app$j ?v0 (fun_app$l ?v1 ?v3 ))(fun_app$q ?v2 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$r (comp$a ?v0 )?v1 )?v2 )(= (fun_app$l ?v0 (fun_app$q ?v1 ?v3 ))(fun_app$l ?v2 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$i (comp$ ?v0 )?v1 )(fun_app$i (comp$ ?v2 )?v3 ))(= (fun_app$j ?v0 (fun_app$l ?v1 ?v4 ))(fun_app$j ?v2 (fun_app$l ?v3 ?v4 ))))):named a45 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$r (comp$a ?v0 )?v1 )(fun_app$r (comp$a ?v2 )?v3 ))(= (fun_app$l ?v0 (fun_app$q ?v1 ?v4 ))(fun_app$l ?v2 (fun_app$q ?v3 ?v4 ))))):named a46 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$i (comp$ ?v0 )?v1 )(fun_app$i (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$j ?v0 (fun_app$l ?v1 ?v4 ))(fun_app$j ?v2 (fun_app$l ?v3 ?v4 ))))false ))false )):named a47 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$r (comp$a ?v0 )?v1 )(fun_app$r (comp$a ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$l ?v0 (fun_app$q ?v1 ?v4 ))(fun_app$l ?v2 (fun_app$q ?v3 ?v4 ))))false ))false )):named a48 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$q (fun_app$i (comp$ ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$q (fun_app$i (comp$ ?v0 )?v1 )?v2 )))):named a49 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$l (fun_app$r (comp$a ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$q ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$r (comp$a ?v0 )?v1 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$u (comp$b (fun_app$v (comp$c ?v0 )?v1 ))?v2 )(fun_app$r (comp$a ?v0 )(fun_app$i (comp$ ?v1 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$w (comp$d (fun_app$i (comp$ ?v0 )?v1 ))?v2 )(fun_app$i (comp$ ?v0 )(fun_app$r (comp$a ?v1 )?v2 )))):named a52 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$i (comp$ (fun_app$x (comp$e ?v0 )?v1 ))?v2 )(fun_app$w (comp$d ?v0 )(fun_app$i (comp$ ?v1 )?v2 )))):named a53 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$i (comp$ (fun_app$y (comp$f ?v0 )?v1 ))?v2 )(fun_app$i (comp$ ?v0 )(fun_app$u (comp$b ?v1 )?v2 )))):named a54 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$r (comp$a (fun_app$u (comp$b ?v0 )?v1 ))?v2 )(fun_app$u (comp$b ?v0 )(fun_app$r (comp$a ?v1 )?v2 )))):named a55 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$r (comp$a (fun_app$r (comp$a ?v0 )?v1 ))?v2 )(fun_app$r (comp$a ?v0 )(fun_app$w (comp$d ?v1 )?v2 )))):named a56 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$w (comp$d ?v0 )(fun_app$i (comp$ ?v1 )?v2 ))(fun_app$i (comp$ (fun_app$x (comp$e ?v0 )?v1 ))?v2 ))):named a57 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$u (comp$b ?v0 )(fun_app$r (comp$a ?v1 )?v2 ))(fun_app$r (comp$a (fun_app$u (comp$b ?v0 )?v1 ))?v2 ))):named a58 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$i (comp$ ?v0 )(fun_app$u (comp$b ?v1 )?v2 ))(fun_app$i (comp$ (fun_app$y (comp$f ?v0 )?v1 ))?v2 ))):named a59 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$i (comp$ ?v0 )(fun_app$r (comp$a ?v1 )?v2 ))(fun_app$w (comp$d (fun_app$i (comp$ ?v0 )?v1 ))?v2 ))):named a60 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$r (comp$a ?v0 )(fun_app$w (comp$d ?v1 )?v2 ))(fun_app$r (comp$a (fun_app$r (comp$a ?v0 )?v1 ))?v2 ))):named a61 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$r (comp$a ?v0 )(fun_app$i (comp$ ?v1 )?v2 ))(fun_app$u (comp$b (fun_app$v (comp$c ?v0 )?v1 ))?v2 ))):named a62 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$s id$ ?v0 )?v0 ):pattern ((fun_app$s id$ ?v0 )))):named a63 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (fun_app$m (h_r$ ?v0 )?v1 )(fun_app$l root$ (fun_app$j (pick$ ?v0 )?v1 ))):pattern ((fun_app$m (h_r$ ?v0 )?v1 )))):named a64 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_set$ ))(= (image$f ?v0 (image$i ?v1 ?v2 ))(fun_app$k (image$a (fun_app$i (comp$ ?v0 )?v1 ))?v2 ))):named a65 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (image$i ?v0 (fun_app$k (image$a ?v1 )?v2 ))(image$i (fun_app$r (comp$a ?v0 )?v1 )?v2 ))):named a66 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$e ?v0 (image$d ?v1 ?v2 ))(fun_app$g (image$ (fun_app$z (comp$g ?v0 )?v1 ))?v2 ))):named a67 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$g ?v0 (image$d ?v1 ?v2 ))(image$d (fun_app$aa (comp$h ?v0 )?v1 )?v2 ))):named a68 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$g (image$ ?v0 )(fun_app$g (image$ ?v1 )?v2 ))(fun_app$g (image$ (fun_app$ab (comp$i ?v0 )?v1 ))?v2 ))):named a69 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (fun_app$k (image$a ?v0 )(fun_app$k (image$a ?v1 )?v2 ))(fun_app$k (image$a (fun_app$w (comp$d ?v0 )?v1 ))?v2 ))):named a70 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$d ?v0 (fun_app$g (image$ ?v1 )?v2 ))(image$d (fun_app$ac (comp$j ?v0 )?v1 )?v2 ))):named a71 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$i (comp$ ?v0 )?v1 )(fun_app$w (comp$d id$b )?v2 ))(= (fun_app$j ?v0 (fun_app$l ?v1 ?v3 ))(fun_app$q ?v2 ?v3 )))):named a72 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$r (comp$a ?v0 )?v1 )(fun_app$u (comp$b id$f )?v2 ))(= (fun_app$l ?v0 (fun_app$q ?v1 ?v3 ))(fun_app$l ?v2 ?v3 )))):named a73 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ ))(= (comp$k (vimage$e ?v0 )(vimage$f ?v1 ))(vimage$g (fun_app$i (comp$ ?v1 )?v0 )))):named a74 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_N_fun$ ))(= (comp$l (vimage$g ?v0 )(vimage$e ?v1 ))(vimage$e (fun_app$r (comp$a ?v1 )?v0 )))):named a75 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_T_dtree_sum_fun$ ))(= (comp$m (vimage$g ?v0 )(vimage$ ?v1 ))(vimage$ (fun_app$ad (comp$n ?v1 )?v0 )))):named a76 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ ))(= (comp$o (vimage$ ?v0 )(vimage$h ?v1 ))(vimage$ (fun_app$ae (comp$p ?v1 )?v0 )))):named a77 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_set$ ))(= (fun_app$af (vimage$e ?v0 )(fun_app$ag (vimage$f ?v1 )?v2 ))(fun_app$k (vimage$g (fun_app$i (comp$ ?v1 )?v0 ))?v2 ))):named a78 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_set$ ))(= (fun_app$k (vimage$g ?v0 )(fun_app$af (vimage$e ?v1 )?v2 ))(fun_app$af (vimage$e (fun_app$r (comp$a ?v1 )?v0 ))?v2 ))):named a79 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$k (vimage$g ?v0 )(fun_app$f (vimage$ ?v1 )?v2 ))(fun_app$f (vimage$ (fun_app$ad (comp$n ?v1 )?v0 ))?v2 ))):named a80 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$f (vimage$ ?v0 )(fun_app$g (vimage$h ?v1 )?v2 ))(fun_app$f (vimage$ (fun_app$ae (comp$p ?v1 )?v0 ))?v2 ))):named a81 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_set$ ))(= (fun_app$af (vimage$e ?v0 )(fun_app$ag (vimage$f ?v1 )?v2 ))(fun_app$k (vimage$g (fun_app$i (comp$ ?v1 )?v0 ))?v2 ))):named a82 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_set$ ))(= (fun_app$k (vimage$g ?v0 )(fun_app$af (vimage$e ?v1 )?v2 ))(fun_app$af (vimage$e (fun_app$r (comp$a ?v1 )?v0 ))?v2 ))):named a83 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$k (vimage$g ?v0 )(fun_app$f (vimage$ ?v1 )?v2 ))(fun_app$f (vimage$ (fun_app$ad (comp$n ?v1 )?v0 ))?v2 ))):named a84 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$f (vimage$ ?v0 )(fun_app$g (vimage$h ?v1 )?v2 ))(fun_app$f (vimage$ (fun_app$ae (comp$p ?v1 )?v0 ))?v2 ))):named a85 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (map_sum$f ?v0 ?v1 (map_sum$g ?v2 ?v3 ?v4 ))(map_sum$h (fun_app$i (comp$ ?v0 )?v2 )(fun_app$i (comp$ ?v1 )?v3 )?v4 ))):named a86 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (map_sum$i ?v0 ?v1 (map_sum$j ?v2 ?v3 ?v4 ))(map_sum$k (fun_app$i (comp$ ?v0 )?v2 )(fun_app$r (comp$a ?v1 )?v3 )?v4 ))):named a87 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (map_sum$l ?v0 ?v1 (map_sum$k ?v2 ?v3 ?v4 ))(map_sum$j (fun_app$r (comp$a ?v0 )?v2 )(fun_app$i (comp$ ?v1 )?v3 )?v4 ))):named a88 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (map_sum$g ?v0 ?v1 (map_sum$h ?v2 ?v3 ?v4 ))(map_sum$g (fun_app$r (comp$a ?v0 )?v2 )(fun_app$r (comp$a ?v1 )?v3 )?v4 ))):named a89 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$ah (fun_app$n (map_sum$c ?v0 )?v1 )(fun_app$ai (fun_app$p (map_sum$e ?v2 )?v3 )?v4 ))(fun_app$aj (fun_app$h (map_sum$ (fun_app$ak (comp$q ?v0 )?v2 ))(fun_app$i (comp$ ?v1 )?v3 ))?v4 ))):named a90 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$al (fun_app$o (map_sum$d ?v0 )?v1 )(fun_app$ai (fun_app$p (map_sum$e ?v2 )?v3 )?v4 ))(fun_app$ai (fun_app$p (map_sum$e (fun_app$ak (comp$q ?v0 )?v2 ))(fun_app$u (comp$b ?v1 )?v3 ))?v4 ))):named a91 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$aj (fun_app$h (map_sum$ ?v0 )?v1 )(fun_app$aj (fun_app$h (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$aj (fun_app$h (map_sum$ (fun_app$ak (comp$q ?v0 )?v2 ))(fun_app$w (comp$d ?v1 )?v3 ))?v4 ))):named a92 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$ai (fun_app$p (map_sum$e ?v0 )?v1 )(fun_app$aj (fun_app$h (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$ai (fun_app$p (map_sum$e (fun_app$ak (comp$q ?v0 )?v2 ))(fun_app$r (comp$a ?v1 )?v3 ))?v4 ))):named a93 ))
(assert (! (= (map_sum$m id$ id$ )id$g ):named a94 ))
(assert (! (= (fun_app$h (map_sum$ id$ )id$b )id$c ):named a95 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$am (map_sum$m id$ id$ )?v0 )?v0 )):named a96 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (fun_app$aj (fun_app$h (map_sum$ id$ )id$b )?v0 )?v0 )):named a97 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum$ )(?v3 Dtree$ ))(=> (= (fun_app$ah (fun_app$n (map_sum$c ?v0 )?v1 )?v2 )(inr$ ?v3 ))(exists ((?v4 N$ ))(and (= ?v2 (inr$b ?v4 ))(= (fun_app$j ?v1 ?v4 )?v3 ))))):named a98 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_N_sum$ )(?v3 N$ ))(=> (= (fun_app$al (fun_app$o (map_sum$d ?v0 )?v1 )?v2 )(inr$b ?v3 ))(exists ((?v4 N$ ))(and (= ?v2 (inr$b ?v4 ))(= (fun_app$m ?v1 ?v4 )?v3 ))))):named a99 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum$ )(?v3 Dtree$ ))(=> (= (fun_app$aj (fun_app$h (map_sum$ ?v0 )?v1 )?v2 )(inr$ ?v3 ))(exists ((?v4 Dtree$ ))(and (= ?v2 (inr$ ?v4 ))(= (fun_app$q ?v1 ?v4 )?v3 ))))):named a100 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum$ )(?v3 N$ ))(=> (= (fun_app$ai (fun_app$p (map_sum$e ?v0 )?v1 )?v2 )(inr$b ?v3 ))(exists ((?v4 Dtree$ ))(and (= ?v2 (inr$ ?v4 ))(= (fun_app$l ?v1 ?v4 )?v3 ))))):named a101 ))
(assert (! (= (h$ tr0$ )(fun_app$an (unfold$ (h_r$ tr0$ ))(h_c$ tr0$ ))):named a102 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (fun_app$t (h_c$ ?v0 )?v1 )(image$d (fun_app$p (map_sum$e id$ )root$ )(cont$ (fun_app$j (pick$ ?v0 )?v1 )))):pattern ((fun_app$t (h_c$ ?v0 )?v1 )))):named a103 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$a (inr$b ?v0 )(image$d (fun_app$p (map_sum$e id$ )root$ )(cont$ ?v1 )))(= (fun_app$l root$ (fun_app$j (subtrOf$ ?v1 )?v0 ))?v0 ))):named a104 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$ (uud$ ?v0 ))?v0 )):named a105 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(= (collect$a (uue$ ?v0 ))?v0 )):named a106 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$d ?v1 ?v0 ))):named a107 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_bool_fun$ ))(= (member$a ?v0 (collect$a ?v1 ))(fun_app$e ?v1 ?v0 ))):named a108 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$aj ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$ ?v1 (fun_app$g (vimage$h ?v0 )?v3 )))):named a109 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$ah ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$a ?v1 (vimage$i ?v0 ?v3 )))):named a110 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= (fun_app$ai ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$ ?v1 (vimage$j ?v0 ?v3 )))):named a111 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= (fun_app$al ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$a ?v1 (vimage$k ?v0 ?v3 )))):named a112 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 Dtree$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$b ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$b ?v1 (fun_app$f (vimage$ ?v0 )?v3 )))):named a113 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (fun_app$g (vimage$h ?v1 )?v2 ))(member$ (fun_app$aj ?v1 ?v0 )?v2 ))):named a114 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$ ?v0 (vimage$j ?v1 ?v2 ))(member$a (fun_app$ai ?v1 ?v0 )?v2 ))):named a115 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (vimage$i ?v1 ?v2 ))(member$ (fun_app$ah ?v1 ?v0 )?v2 ))):named a116 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$a ?v0 (vimage$k ?v1 ?v2 ))(member$a (fun_app$al ?v1 ?v0 )?v2 ))):named a117 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b ?v0 (fun_app$f (vimage$ ?v1 )?v2 ))(member$ (fun_app$b ?v1 ?v0 )?v2 ))):named a118 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a119 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$b ?v0 )(inr$b ?v1 ))(= ?v0 ?v1 ))):named a120 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a121 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$b ?v0 )(inr$b ?v1 ))(= ?v0 ?v1 ))):named a122 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$a (inr$b ?v0 )(image$d (fun_app$p (map_sum$e id$ )root$ )(cont$ ?v1 )))(member$ (inr$ (fun_app$j (subtrOf$ ?v1 )?v0 ))(cont$ ?v1 )))):named a123 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$a (inr$b ?v0 )(image$d (fun_app$p (map_sum$e id$ )root$ )(cont$ ?v1 )))(and (member$ (inr$ (fun_app$j (subtrOf$ ?v1 )?v0 ))(cont$ ?v1 ))(= (fun_app$l root$ (fun_app$j (subtrOf$ ?v1 )?v0 ))?v0 )))):named a124 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= ?v0 (fun_app$q ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (fun_app$k (image$a ?v1 )?v3 )))):named a125 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$aj ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (fun_app$g (image$ ?v1 )?v3 )))):named a126 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$ai ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$d ?v1 ?v3 )))):named a127 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$ah ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$e ?v1 ?v3 )))):named a128 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$al ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$g ?v1 ?v3 )))):named a129 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (h$ ?v0 )(fun_app$an (unfold$ (h_r$ ?v0 ))(h_c$ ?v0 ))):pattern ((h$ ?v0 )))):named a130 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$b ?v0 (fun_app$k (image$a ?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$q ?v1 ?v3 )))))):named a131 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (fun_app$g (image$ ?v1 )?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$aj ?v1 ?v3 )))))):named a132 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$ ?v0 (image$e ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$ah ?v1 ?v3 )))))):named a133 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (image$d ?v1 ?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$ai ?v1 ?v3 )))))):named a134 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$a ?v0 (image$g ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$al ?v1 ?v3 )))))):named a135 ))
(assert (! (forall ((?v0 Dtree_set$ )(?v1 Dtree_set$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Dtree$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$q ?v2 ?v4 )(fun_app$q ?v3 ?v4 )))))(= (fun_app$k (image$a ?v2 )?v0 )(fun_app$k (image$a ?v3 )?v1 )))):named a136 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$aj ?v2 ?v4 )(fun_app$aj ?v3 ?v4 )))))(= (fun_app$g (image$ ?v2 )?v0 )(fun_app$g (image$ ?v3 )?v1 )))):named a137 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$ai ?v2 ?v4 )(fun_app$ai ?v3 ?v4 )))))(= (image$d ?v2 ?v0 )(image$d ?v3 ?v1 )))):named a138 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_set$ )(?v2 Dtree_bool_fun$ ))(=> (exists ((?v3 Dtree$ ))(and (member$b ?v3 (fun_app$k (image$a ?v0 )?v1 ))(fun_app$ao ?v2 ?v3 )))(exists ((?v3 Dtree$ ))(and (member$b ?v3 ?v1 )(fun_app$ao ?v2 (fun_app$q ?v0 ?v3 )))))):named a139 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (fun_app$g (image$ ?v0 )?v1 ))(fun_app$d ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$d ?v2 (fun_app$aj ?v0 ?v3 )))))):named a140 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (image$e ?v0 ?v1 ))(fun_app$d ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$d ?v2 (fun_app$ah ?v0 ?v3 )))))):named a141 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$a ?v3 (image$d ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$e ?v2 (fun_app$ai ?v0 ?v3 )))))):named a142 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$a ?v3 (image$g ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$e ?v2 (fun_app$al ?v0 ?v3 )))))):named a143 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_set$ )(?v2 Dtree_bool_fun$ ))(=> (forall ((?v3 Dtree$ ))(=> (member$b ?v3 (fun_app$k (image$a ?v0 )?v1 ))(fun_app$ao ?v2 ?v3 )))(forall ((?v3 Dtree$ ))(=> (member$b ?v3 ?v1 )(fun_app$ao ?v2 (fun_app$q ?v0 ?v3 )))))):named a144 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (fun_app$g (image$ ?v0 )?v1 ))(fun_app$d ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$d ?v2 (fun_app$aj ?v0 ?v3 )))))):named a145 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (image$e ?v0 ?v1 ))(fun_app$d ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$d ?v2 (fun_app$ah ?v0 ?v3 )))))):named a146 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 (image$d ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$e ?v2 (fun_app$ai ?v0 ?v3 )))))):named a147 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 (image$g ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$e ?v2 (fun_app$al ?v0 ?v3 )))))):named a148 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 Dtree$ )(?v3 Dtree_dtree_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$q ?v3 ?v0 )))(member$b ?v2 (fun_app$k (image$a ?v3 )?v1 )))):named a149 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$aj ?v3 ?v0 )))(member$ ?v2 (fun_app$g (image$ ?v3 )?v1 )))):named a150 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$ai ?v3 ?v0 )))(member$a ?v2 (image$d ?v3 ?v1 )))):named a151 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_N_sum_T_dtree_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$ah ?v3 ?v0 )))(member$ ?v2 (image$e ?v3 ?v1 )))):named a152 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum$ )(?v3 T_N_sum_T_N_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$al ?v3 ?v0 )))(member$a ?v2 (image$g ?v3 ?v1 )))):named a153 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 Dtree_dtree_fun$ ))(=> (member$b ?v0 ?v1 )(member$b (fun_app$q ?v2 ?v0 )(fun_app$k (image$a ?v2 )?v1 )))):named a154 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$ (fun_app$aj ?v2 ?v0 )(fun_app$g (image$ ?v2 )?v1 )))):named a155 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$a (fun_app$ai ?v2 ?v0 )(image$d ?v2 ?v1 )))):named a156 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_dtree_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$ (fun_app$ah ?v2 ?v0 )(image$e ?v2 ?v1 )))):named a157 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_N_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$a (fun_app$al ?v2 ?v0 )(image$g ?v2 ?v1 )))):named a158 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a159 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(=> (= (inr$b ?v0 )(inr$b ?v1 ))(= ?v0 ?v1 ))):named a160 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 Dtree_bool_fun$ ))(=> (forall ((?v3 Dtree$ ))(= (fun_app$d ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$ao ?v2 ?v3 )))(= (fun_app$f (vimage$ ?v1 )(collect$ ?v0 ))(collect$b ?v2 )))):named a161 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (and (member$ ?v0 (fun_app$g (vimage$h ?v1 )?v2 ))(forall ((?v3 T_dtree_sum$ ))(=> (and (= (fun_app$aj ?v1 ?v0 )?v3 )(member$ ?v3 ?v2 ))false )))false )):named a162 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(=> (and (member$ ?v0 (vimage$j ?v1 ?v2 ))(forall ((?v3 T_N_sum$ ))(=> (and (= (fun_app$ai ?v1 ?v0 )?v3 )(member$a ?v3 ?v2 ))false )))false )):named a163 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (and (member$a ?v0 (vimage$i ?v1 ?v2 ))(forall ((?v3 T_dtree_sum$ ))(=> (and (= (fun_app$ah ?v1 ?v0 )?v3 )(member$ ?v3 ?v2 ))false )))false )):named a164 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(=> (and (member$a ?v0 (vimage$k ?v1 ?v2 ))(forall ((?v3 T_N_sum$ ))(=> (and (= (fun_app$al ?v1 ?v0 )?v3 )(member$a ?v3 ?v2 ))false )))false )):named a165 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (and (member$b ?v0 (fun_app$f (vimage$ ?v1 )?v2 ))(forall ((?v3 T_dtree_sum$ ))(=> (and (= (fun_app$b ?v1 ?v0 )?v3 )(member$ ?v3 ?v2 ))false )))false )):named a166 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$ ?v0 (fun_app$g (vimage$h ?v1 )?v2 ))(member$ (fun_app$aj ?v1 ?v0 )?v2 ))):named a167 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(=> (member$ ?v0 (vimage$j ?v1 ?v2 ))(member$a (fun_app$ai ?v1 ?v0 )?v2 ))):named a168 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$a ?v0 (vimage$i ?v1 ?v2 ))(member$ (fun_app$ah ?v1 ?v0 )?v2 ))):named a169 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(=> (member$a ?v0 (vimage$k ?v1 ?v2 ))(member$a (fun_app$al ?v1 ?v0 )?v2 ))):named a170 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$b ?v0 (fun_app$f (vimage$ ?v1 )?v2 ))(member$ (fun_app$b ?v1 ?v0 )?v2 ))):named a171 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum$ )(?v2 T_dtree_sum_set$ ))(=> (member$ (fun_app$aj ?v0 ?v1 )?v2 )(member$ ?v1 (fun_app$g (vimage$h ?v0 )?v2 )))):named a172 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum$ )(?v2 T_dtree_sum_set$ ))(=> (member$ (fun_app$ah ?v0 ?v1 )?v2 )(member$a ?v1 (vimage$i ?v0 ?v2 )))):named a173 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum$ )(?v2 T_N_sum_set$ ))(=> (member$a (fun_app$ai ?v0 ?v1 )?v2 )(member$ ?v1 (vimage$j ?v0 ?v2 )))):named a174 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum$ )(?v2 T_N_sum_set$ ))(=> (member$a (fun_app$al ?v0 ?v1 )?v2 )(member$a ?v1 (vimage$k ?v0 ?v2 )))):named a175 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 Dtree$ )(?v2 T_dtree_sum_set$ ))(=> (member$ (fun_app$b ?v0 ?v1 )?v2 )(member$b ?v1 (fun_app$f (vimage$ ?v0 )?v2 )))):named a176 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$ah (fun_app$n (map_sum$c ?v0 )?v1 )(fun_app$ai (fun_app$p (map_sum$e ?v2 )?v3 )?v4 ))(fun_app$aj (fun_app$h (map_sum$ (fun_app$ak (comp$q ?v0 )?v2 ))(fun_app$i (comp$ ?v1 )?v3 ))?v4 ))):named a177 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$al (fun_app$o (map_sum$d ?v0 )?v1 )(fun_app$ai (fun_app$p (map_sum$e ?v2 )?v3 )?v4 ))(fun_app$ai (fun_app$p (map_sum$e (fun_app$ak (comp$q ?v0 )?v2 ))(fun_app$u (comp$b ?v1 )?v3 ))?v4 ))):named a178 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$aj (fun_app$h (map_sum$ ?v0 )?v1 )(fun_app$aj (fun_app$h (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$aj (fun_app$h (map_sum$ (fun_app$ak (comp$q ?v0 )?v2 ))(fun_app$w (comp$d ?v1 )?v3 ))?v4 ))):named a179 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$ai (fun_app$p (map_sum$e ?v0 )?v1 )(fun_app$aj (fun_app$h (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$ai (fun_app$p (map_sum$e (fun_app$ak (comp$q ?v0 )?v2 ))(fun_app$r (comp$a ?v1 )?v3 ))?v4 ))):named a180 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(exists ((?v2 N$ ))(and (member$a (inr$b ?v2 )(image$d (fun_app$p (map_sum$e id$ )root$ )(cont$ ?v0 )))(= (fun_app$j (subtrOf$ ?v0 )?v2 )?v1 ))))):named a181 ))
(assert (! (forall ((?v0 N$ ))(finite$ (fun_app$t (h_c$ tr0$ )?v0 ))):named a182 ))
(check-sat )
;(get-unsat-core )
