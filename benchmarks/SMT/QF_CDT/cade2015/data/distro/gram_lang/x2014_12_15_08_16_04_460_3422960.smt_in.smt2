;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_set_N_prod_bool_fun$ 0 )
(declare-datatypes ()((N_set_N_prod$ (pair$ (fst$ N_set$ )(snd$ N$ )))))
(declare-fun p$ ()Bool )
(declare-fun x$ ()N_set_N_prod$ )
(declare-fun fun_app$ (N_set_N_prod_bool_fun$ N_set_N_prod$ )Bool )
(assert (! (not p$ ):named a0 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(=> (= x$ (pair$ ?v0 ?v1 ))p$ )):named a1 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ )(?v2 N_set$ )(?v3 N$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ )(?v2 N_set$ )(?v3 N$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 N_set_N_prod$ ))(=> (forall ((?v1 N_set$ )(?v2 N$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a4 ))
(assert (! (forall ((?v0 N_set_N_prod$ ))(exists ((?v1 N_set$ )(?v2 N$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ )(?v2 N_set$ )(?v3 N$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a6 ))
(assert (! (forall ((?v0 N_set_N_prod$ ))(=> (forall ((?v1 N_set$ )(?v2 N$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a7 ))
(assert (! (forall ((?v0 N_set_N_prod_bool_fun$ )(?v1 N_set_N_prod$ ))(=> (forall ((?v2 N_set$ )(?v3 N$ ))(fun_app$ ?v0 (pair$ ?v2 ?v3 )))(fun_app$ ?v0 ?v1 ))):named a8 ))
(check-sat )
;(get-unsat-core )
