;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort N_T_fun$ 0 )
(declare-sort T_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort Dtree_T_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort T_dtree_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort N_N_sum_N_N_sum_fun$ 0 )
(declare-sort N_T_sum_N_T_sum_fun$ 0 )
(declare-sort N_set_dtree_set_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_fun_T_T_fun_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort T_dtree_sum_dtree_fun$ 0 )
(declare-sort Dtree_set_dtree_set_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_set_set_N_set_set_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort T_set_set_T_set_set_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_N_sum_dtree_N_sum_fun$ 0 )
(declare-sort Dtree_T_sum_dtree_T_sum_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_N_sum_fun$ 0 )
(declare-sort N_N_sum_set_N_N_sum_set_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_sum_N_dtree_sum_fun$ 0 )
(declare-sort T_T_set_sum_T_T_set_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_N_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))(N_N_sum$ (inl$a (projl$a N$ ))(inr$a (projr$a N$ )))(T_N_sum$ (inl$b (projl$b T$ ))(inr$b (projr$b N$ )))(T_T_sum$ (inl$c (projl$c T$ ))(inr$c (projr$c T$ )))(N_T_sum$ (inl$d (projl$d N$ ))(inr$d (projr$d T$ )))(N_dtree_sum$ (inl$e (projl$e N$ ))(inr$e (projr$e Dtree$ )))(Dtree_T_sum$ (inl$f (projl$f Dtree$ ))(inr$f (projr$f T$ )))(Dtree_N_sum$ (inl$g (projl$g Dtree$ ))(inr$g (projr$g N$ )))(Dtree_dtree_sum$ (inl$h (projl$h Dtree$ ))(inr$h (projr$h Dtree$ )))(T_T_set_sum$ (inl$i (projl$i T$ ))(inr$i (projr$i T_set$ )))))
(declare-fun s$ ()N_T_N_sum_set_fun$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun id$a ()N_N_sum_N_N_sum_fun$ )
(declare-fun id$b ()N_N_sum_set_N_N_sum_set_fun$ )
(declare-fun id$c ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$d ()T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ )
(declare-fun id$e ()T_set_T_set_fun$ )
(declare-fun id$f ()T_set_set_T_set_set_fun$ )
(declare-fun id$g ()N_set_N_set_fun$ )
(declare-fun id$h ()N_set_set_N_set_set_fun$ )
(declare-fun id$i ()Dtree_dtree_fun$ )
(declare-fun id$j ()Dtree_set_dtree_set_fun$ )
(declare-fun id$k ()N_N_fun$ )
(declare-fun id$l ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun id$m ()T_T_sum_T_T_sum_fun$ )
(declare-fun id$n ()T_N_sum_T_N_sum_fun$ )
(declare-fun id$o ()N_T_sum_N_T_sum_fun$ )
(declare-fun id$p ()N_dtree_sum_N_dtree_sum_fun$ )
(declare-fun id$q ()Dtree_T_sum_dtree_T_sum_fun$ )
(declare-fun id$r ()Dtree_N_sum_dtree_N_sum_fun$ )
(declare-fun id$s ()Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun id$t ()T_T_set_sum_T_T_set_sum_fun$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun comp$ (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun setl$ (T_dtree_sum$ )T_set$ )
(declare-fun setr$ (T_dtree_sum$ )Dtree_set$ )
(declare-fun comp$a (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun comp$b (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$c (Dtree_set_dtree_set_fun$ N_set_dtree_set_fun$ )N_set_dtree_set_fun$ )
(declare-fun comp$d (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$e (T_dtree_sum_T_dtree_sum_fun$ )T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$f (T_N_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$g (T_N_sum_T_dtree_sum_fun$ )T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$h (T_T_fun$ )T_T_fun_T_T_fun_fun$ )
(declare-fun comp$i (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$j (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$k (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$l (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum_dtree_dtree_sum_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun deftr$ ()N_dtree_fun$ )
(declare-fun image$ (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun setl$a (T_N_sum$ )T_set$ )
(declare-fun setr$a (T_N_sum$ )N_set$ )
(declare-fun finite$ (T_dtree_sum_set$ )Bool )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun image$a (N_N_sum_N_N_sum_fun$ )N_N_sum_set_N_N_sum_set_fun$ )
(declare-fun image$b (T_dtree_sum_set_T_dtree_sum_set_fun$ )T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ )
(declare-fun image$c (T_set_T_set_fun$ )T_set_set_T_set_set_fun$ )
(declare-fun image$d (N_set_N_set_fun$ )N_set_set_N_set_set_fun$ )
(declare-fun image$e (Dtree_dtree_fun$ )Dtree_set_dtree_set_fun$ )
(declare-fun image$f (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$g (N_N_fun$ )N_set_N_set_fun$ )
(declare-fun image$h (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$i (T_N_fun$ T_set$ )N_set$ )
(declare-fun image$j (T_dtree_fun$ T_set$ )Dtree_set$ )
(declare-fun image$k (N_T_fun$ N_set$ )T_set$ )
(declare-fun image$l (N_dtree_fun$ N_set$ )Dtree_set$ )
(declare-fun image$m (Dtree_T_fun$ Dtree_set$ )T_set$ )
(declare-fun image$n (Dtree_N_fun$ Dtree_set$ )N_set$ )
(declare-fun image$o (T_dtree_sum_dtree_fun$ T_dtree_sum_set$ )Dtree_set$ )
(declare-fun image$p (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun image$q (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (Dtree_N_fun$ )Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ )
(declare-fun vimage$ (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun finite$a (T_N_sum_set$ )Bool )
(declare-fun fun_app$ (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun map_sum$ (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun member$a (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun member$b (T$ T_set$ )Bool )
(declare-fun member$c (N$ N_set$ )Bool )
(declare-fun member$d (Dtree$ Dtree_set$ )Bool )
(declare-fun unfold$a (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun vimage$a (N_N_fun$ )N_set_N_set_fun$ )
(declare-fun vimage$b (Dtree_dtree_fun$ )Dtree_set_dtree_set_fun$ )
(declare-fun vimage$c (Dtree_N_fun$ )N_set_dtree_set_fun$ )
(declare-fun fun_app$a (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$b (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$c (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$d (N_N_sum_N_N_sum_fun$ N_N_sum$ )N_N_sum$ )
(declare-fun fun_app$e (T_set_T_set_fun$ T_set$ )T_set$ )
(declare-fun fun_app$f (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun fun_app$g (T_T_fun$ T$ )T$ )
(declare-fun fun_app$h (N_N_fun$ N$ )N$ )
(declare-fun fun_app$i (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$j (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$k (T_N_fun$ T$ )N$ )
(declare-fun fun_app$l (T_dtree_fun$ T$ )Dtree$ )
(declare-fun fun_app$m (N_T_fun$ N$ )T$ )
(declare-fun fun_app$n (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$o (Dtree_T_fun$ Dtree$ )T$ )
(declare-fun fun_app$p (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$q (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$r (N_N_fun_T_N_sum_T_N_sum_fun_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$s (N_T_sum_N_T_sum_fun$ N_T_sum$ )N_T_sum$ )
(declare-fun fun_app$t (N_dtree_sum_N_dtree_sum_fun$ N_dtree_sum$ )N_dtree_sum$ )
(declare-fun fun_app$u (Dtree_T_sum_dtree_T_sum_fun$ Dtree_T_sum$ )Dtree_T_sum$ )
(declare-fun fun_app$v (Dtree_N_sum_dtree_N_sum_fun$ Dtree_N_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$w (Dtree_dtree_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$x (T_T_set_sum_T_T_set_sum_fun$ T_T_set_sum$ )T_T_set_sum$ )
(declare-fun fun_app$y (Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$z (Dtree_T_dtree_sum_set_fun$ Dtree$ )T_dtree_sum_set$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(declare-fun map_sum$a (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun map_sum$b (T_T_fun$ )N_N_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$c (N_N_fun$ T_T_fun$ )N_T_sum_N_T_sum_fun$ )
(declare-fun map_sum$d (N_N_fun$ N_N_fun$ )N_N_sum_N_N_sum_fun$ )
(declare-fun map_sum$e (N_N_fun$ Dtree_dtree_fun$ )N_dtree_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$f (Dtree_dtree_fun$ T_T_fun$ )Dtree_T_sum_dtree_T_sum_fun$ )
(declare-fun map_sum$g (Dtree_dtree_fun$ N_N_fun$ )Dtree_N_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$h (Dtree_dtree_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$i (T_T_fun$ T_set_T_set_fun$ )T_T_set_sum_T_T_set_sum_fun$ )
(declare-fun map_sum$j (T_T_fun$ )N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$k (Dtree_N_fun$ Dtree_N_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun map_sum$l (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun fun_app$aa (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun fun_app$ab (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$ac (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$ad (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$ae (T_dtree_sum_dtree_fun$ T_dtree_sum$ )Dtree$ )
(declare-fun fun_app$af (Dtree_set_dtree_set_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun fun_app$ag (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$ah (N_T_N_sum_set_fun$ N$ )T_N_sum_set$ )
(declare-fun fun_app$ai (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$aj (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$ak (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$al (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$am (N_set_dtree_set_fun$ N_set$ )Dtree_set$ )
(declare-fun fun_app$an (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$ao (T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ T_N_sum_T_dtree_sum_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$ap (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$aq (T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ T_N_sum_T_N_sum_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$ar (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum$ )N_N_sum$ )
(declare-fun fun_app$as (T_T_fun_T_T_fun_fun$ T_T_fun$ )T_T_fun$ )
(declare-fun fun_app$at (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$au (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$av (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$aw (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$ax (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(assert (! (not (= (cont$ (fun_app$ (hsubst$ tr0$ )tr$ ))(fun_app$a (image$ (fun_app$b (map_sum$ id$ )(hsubst$ tr0$ )))(cont$ tr$ )))):named a0 ))
(assert (! (not (= (fun_app$c root$ tr$ )(fun_app$c root$ tr0$ ))):named a1 ))
(assert (! (= (image$a id$a )id$b ):named a2 ))
(assert (! (= (image$b id$c )id$d ):named a3 ))
(assert (! (= (image$c id$e )id$f ):named a4 ))
(assert (! (= (image$d id$g )id$h ):named a5 ))
(assert (! (= (image$e id$i )id$j ):named a6 ))
(assert (! (= (image$f id$ )id$e ):named a7 ))
(assert (! (= (image$g id$k )id$g ):named a8 ))
(assert (! (= (image$ id$l )id$c ):named a9 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (fun_app$c root$ ?v0 )(fun_app$c root$ tr0$ ))(= (cont$ (fun_app$ (hsubst$ tr0$ )?v0 ))(fun_app$a (image$ (fun_app$b (map_sum$ id$ )(hsubst$ tr0$ )))(cont$ tr0$ ))))):named a10 ))
(assert (! (forall ((?v0 N_N_sum$ ))(! (= (fun_app$d id$a ?v0 )?v0 ):pattern ((fun_app$d id$a ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$ id$i ?v0 )?v0 ):pattern ((fun_app$ id$i ?v0 )))):named a12 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(! (= (fun_app$a id$c ?v0 )?v0 ):pattern ((fun_app$a id$c ?v0 )))):named a13 ))
(assert (! (forall ((?v0 T_set$ ))(! (= (fun_app$e id$e ?v0 )?v0 ):pattern ((fun_app$e id$e ?v0 )))):named a14 ))
(assert (! (forall ((?v0 N_set$ ))(! (= (fun_app$f id$g ?v0 )?v0 ):pattern ((fun_app$f id$g ?v0 )))):named a15 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$g id$ ?v0 )?v0 ):pattern ((fun_app$g id$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$h id$k ?v0 )?v0 ):pattern ((fun_app$h id$k ?v0 )))):named a17 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$i ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (fun_app$a (image$ ?v1 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$j ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$h ?v1 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= ?v0 (fun_app$g ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (fun_app$e (image$f ?v1 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_fun$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= ?v0 (fun_app$k ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$c ?v0 (image$i ?v1 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T_dtree_fun$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= ?v0 (fun_app$l ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$d ?v0 (image$j ?v1 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 T$ )(?v1 N_T_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$m ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$b ?v0 (image$k ?v1 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$h ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$c ?v0 (fun_app$f (image$g ?v1 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$n ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$d ?v0 (image$l ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree_T_fun$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= ?v0 (fun_app$o ?v1 ?v2 ))(member$d ?v2 ?v3 ))(member$b ?v0 (image$m ?v1 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= ?v0 (fun_app$c ?v1 ?v2 ))(member$d ?v2 ?v3 ))(member$c ?v0 (image$n ?v1 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$p (map_sum$a id$ id$ )?v0 )?v0 )):named a28 ))
(assert (! (forall ((?v0 T_N_sum$ ))(= (fun_app$q (fun_app$r (map_sum$b id$ )id$k )?v0 )?v0 )):named a29 ))
(assert (! (forall ((?v0 N_T_sum$ ))(= (fun_app$s (map_sum$c id$k id$ )?v0 )?v0 )):named a30 ))
(assert (! (forall ((?v0 N_N_sum$ ))(= (fun_app$d (map_sum$d id$k id$k )?v0 )?v0 )):named a31 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (fun_app$i (fun_app$b (map_sum$ id$ )id$i )?v0 )?v0 )):named a32 ))
(assert (! (forall ((?v0 N_dtree_sum$ ))(= (fun_app$t (map_sum$e id$k id$i )?v0 )?v0 )):named a33 ))
(assert (! (forall ((?v0 Dtree_T_sum$ ))(= (fun_app$u (map_sum$f id$i id$ )?v0 )?v0 )):named a34 ))
(assert (! (forall ((?v0 Dtree_N_sum$ ))(= (fun_app$v (map_sum$g id$i id$k )?v0 )?v0 )):named a35 ))
(assert (! (forall ((?v0 Dtree_dtree_sum$ ))(= (fun_app$w (map_sum$h id$i id$i )?v0 )?v0 )):named a36 ))
(assert (! (forall ((?v0 T_T_set_sum$ ))(= (fun_app$x (map_sum$i id$ id$e )?v0 )?v0 )):named a37 ))
(assert (! (= (map_sum$a id$ id$ )id$m ):named a38 ))
(assert (! (= (fun_app$r (map_sum$b id$ )id$k )id$n ):named a39 ))
(assert (! (= (map_sum$c id$k id$ )id$o ):named a40 ))
(assert (! (= (map_sum$d id$k id$k )id$a ):named a41 ))
(assert (! (= (fun_app$b (map_sum$ id$ )id$i )id$l ):named a42 ))
(assert (! (= (map_sum$e id$k id$i )id$p ):named a43 ))
(assert (! (= (map_sum$f id$i id$ )id$q ):named a44 ))
(assert (! (= (map_sum$g id$i id$k )id$r ):named a45 ))
(assert (! (= (map_sum$h id$i id$i )id$s ):named a46 ))
(assert (! (= (map_sum$i id$ id$e )id$t ):named a47 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$c root$ ?v0 )(fun_app$c root$ ?v1 ))(= (cont$ (fun_app$ (hsubst$ ?v1 )?v0 ))(fun_app$a (image$ (fun_app$b (map_sum$ id$ )(hsubst$ ?v1 )))(cont$ ?v1 ))))):named a48 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (fun_app$c root$ ?v0 )(fun_app$c root$ tr0$ ))(= (fun_app$ (hsubst$ tr0$ )?v0 )(fun_app$ (hsubst$ tr0$ )tr0$ )))):named a49 ))
(assert (! (= (hsubst$ tr0$ )(fun_app$y (unfold$ hsubst_r$ )(hsubst_c$ tr0$ ))):named a50 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$c root$ (fun_app$ (hsubst$ tr0$ )?v0 ))(fun_app$c root$ ?v0 ))):named a51 ))
(assert (! (forall ((?v0 N_N_sum$ ))(! (= (fun_app$d id$a ?v0 )?v0 ):pattern ((fun_app$d id$a ?v0 )))):named a52 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$ id$i ?v0 )?v0 ):pattern ((fun_app$ id$i ?v0 )))):named a53 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(! (= (fun_app$a id$c ?v0 )?v0 ):pattern ((fun_app$a id$c ?v0 )))):named a54 ))
(assert (! (forall ((?v0 T_set$ ))(! (= (fun_app$e id$e ?v0 )?v0 ):pattern ((fun_app$e id$e ?v0 )))):named a55 ))
(assert (! (forall ((?v0 N_set$ ))(! (= (fun_app$f id$g ?v0 )?v0 ):pattern ((fun_app$f id$g ?v0 )))):named a56 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$g id$ ?v0 )?v0 ):pattern ((fun_app$g id$ ?v0 )))):named a57 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$h id$k ?v0 )?v0 ):pattern ((fun_app$h id$k ?v0 )))):named a58 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (fun_app$a (image$ ?v1 )?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$i ?v1 ?v3 )))))):named a59 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$ ?v0 (image$h ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$j ?v1 ?v3 )))))):named a60 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T_set$ ))(= (member$b ?v0 (fun_app$e (image$f ?v1 )?v2 ))(exists ((?v3 T$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$g ?v1 ?v3 )))))):named a61 ))
(assert (! (forall ((?v0 T$ )(?v1 N_T_fun$ )(?v2 N_set$ ))(= (member$b ?v0 (image$k ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$c ?v3 ?v2 )(= ?v0 (fun_app$m ?v1 ?v3 )))))):named a62 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree_T_fun$ )(?v2 Dtree_set$ ))(= (member$b ?v0 (image$m ?v1 ?v2 ))(exists ((?v3 Dtree$ ))(and (member$d ?v3 ?v2 )(= ?v0 (fun_app$o ?v1 ?v3 )))))):named a63 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_fun$ )(?v2 T_set$ ))(= (member$c ?v0 (image$i ?v1 ?v2 ))(exists ((?v3 T$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$k ?v1 ?v3 )))))):named a64 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (member$c ?v0 (fun_app$f (image$g ?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$c ?v3 ?v2 )(= ?v0 (fun_app$h ?v1 ?v3 )))))):named a65 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_set$ ))(= (member$c ?v0 (image$n ?v1 ?v2 ))(exists ((?v3 Dtree$ ))(and (member$d ?v3 ?v2 )(= ?v0 (fun_app$c ?v1 ?v3 )))))):named a66 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T_dtree_fun$ )(?v2 T_set$ ))(= (member$d ?v0 (image$j ?v1 ?v2 ))(exists ((?v3 T$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$l ?v1 ?v3 )))))):named a67 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 N_set$ ))(= (member$d ?v0 (image$l ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$c ?v3 ?v2 )(= ?v0 (fun_app$n ?v1 ?v3 )))))):named a68 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$z (hsubst_c$ tr0$ )?v0 )(ite (= (fun_app$c root$ ?v0 )(fun_app$c root$ tr0$ ))(cont$ tr0$ )(cont$ ?v0 ))):pattern ((fun_app$z (hsubst_c$ tr0$ )?v0 )))):named a69 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$c hsubst_r$ ?v0 )(fun_app$c root$ ?v0 )):pattern ((fun_app$c hsubst_r$ ?v0 )))):named a70 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (fun_app$z (hsubst_c$ ?v0 )?v1 )(ite (= (fun_app$c root$ ?v1 )(fun_app$c root$ ?v0 ))(cont$ ?v0 )(cont$ ?v1 ))):pattern ((fun_app$z (hsubst_c$ ?v0 )?v1 )))):named a71 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst$ ?v0 )(fun_app$y (unfold$ hsubst_r$ )(hsubst_c$ ?v0 ))):pattern ((hsubst$ ?v0 )))):named a72 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$c root$ ?v0 )(fun_app$c root$ ?v1 ))(= (fun_app$ (hsubst$ ?v1 )?v0 )(fun_app$ (hsubst$ ?v1 )?v1 )))):named a73 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$c root$ (fun_app$ (hsubst$ ?v0 )?v1 ))(fun_app$c root$ ?v1 ))):named a74 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$ (fun_app$i ?v2 ?v0 )(fun_app$a (image$ ?v2 )?v1 )))):named a75 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_dtree_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$ (fun_app$j ?v2 ?v0 )(image$h ?v2 ?v1 )))):named a76 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T_T_fun$ ))(=> (member$b ?v0 ?v1 )(member$b (fun_app$g ?v2 ?v0 )(fun_app$e (image$f ?v2 )?v1 )))):named a77 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T_N_fun$ ))(=> (member$b ?v0 ?v1 )(member$c (fun_app$k ?v2 ?v0 )(image$i ?v2 ?v1 )))):named a78 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T_dtree_fun$ ))(=> (member$b ?v0 ?v1 )(member$d (fun_app$l ?v2 ?v0 )(image$j ?v2 ?v1 )))):named a79 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_T_fun$ ))(=> (member$c ?v0 ?v1 )(member$b (fun_app$m ?v2 ?v0 )(image$k ?v2 ?v1 )))):named a80 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_N_fun$ ))(=> (member$c ?v0 ?v1 )(member$c (fun_app$h ?v2 ?v0 )(fun_app$f (image$g ?v2 )?v1 )))):named a81 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_dtree_fun$ ))(=> (member$c ?v0 ?v1 )(member$d (fun_app$n ?v2 ?v0 )(image$l ?v2 ?v1 )))):named a82 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 Dtree_T_fun$ ))(=> (member$d ?v0 ?v1 )(member$b (fun_app$o ?v2 ?v0 )(image$m ?v2 ?v1 )))):named a83 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 Dtree_N_fun$ ))(=> (member$d ?v0 ?v1 )(member$c (fun_app$c ?v2 ?v0 )(image$n ?v2 ?v1 )))):named a84 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$i ?v3 ?v0 )))(member$ ?v2 (fun_app$a (image$ ?v3 )?v1 )))):named a85 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_N_sum_T_dtree_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$j ?v3 ?v0 )))(member$ ?v2 (image$h ?v3 ?v1 )))):named a86 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T$ )(?v3 T_T_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$g ?v3 ?v0 )))(member$b ?v2 (fun_app$e (image$f ?v3 )?v1 )))):named a87 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 N$ )(?v3 T_N_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$k ?v3 ?v0 )))(member$c ?v2 (image$i ?v3 ?v1 )))):named a88 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 Dtree$ )(?v3 T_dtree_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$l ?v3 ?v0 )))(member$d ?v2 (image$j ?v3 ?v1 )))):named a89 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 T$ )(?v3 N_T_fun$ ))(=> (and (member$c ?v0 ?v1 )(= ?v2 (fun_app$m ?v3 ?v0 )))(member$b ?v2 (image$k ?v3 ?v1 )))):named a90 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ )(?v3 N_N_fun$ ))(=> (and (member$c ?v0 ?v1 )(= ?v2 (fun_app$h ?v3 ?v0 )))(member$c ?v2 (fun_app$f (image$g ?v3 )?v1 )))):named a91 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N_dtree_fun$ ))(=> (and (member$c ?v0 ?v1 )(= ?v2 (fun_app$n ?v3 ?v0 )))(member$d ?v2 (image$l ?v3 ?v1 )))):named a92 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 T$ )(?v3 Dtree_T_fun$ ))(=> (and (member$d ?v0 ?v1 )(= ?v2 (fun_app$o ?v3 ?v0 )))(member$b ?v2 (image$m ?v3 ?v1 )))):named a93 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 N$ )(?v3 Dtree_N_fun$ ))(=> (and (member$d ?v0 ?v1 )(= ?v2 (fun_app$c ?v3 ?v0 )))(member$c ?v2 (image$n ?v3 ?v1 )))):named a94 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (fun_app$a (image$ ?v0 )?v1 ))(fun_app$aa ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$aa ?v2 (fun_app$i ?v0 ?v3 )))))):named a95 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (image$h ?v0 ?v1 ))(fun_app$aa ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$aa ?v2 (fun_app$j ?v0 ?v3 )))))):named a96 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_set$ )(?v2 T_bool_fun$ ))(=> (forall ((?v3 T$ ))(=> (member$b ?v3 (fun_app$e (image$f ?v0 )?v1 ))(fun_app$ab ?v2 ?v3 )))(forall ((?v3 T$ ))(=> (member$b ?v3 ?v1 )(fun_app$ab ?v2 (fun_app$g ?v0 ?v3 )))))):named a97 ))
(assert (! (forall ((?v0 N_T_fun$ )(?v1 N_set$ )(?v2 T_bool_fun$ ))(=> (forall ((?v3 T$ ))(=> (member$b ?v3 (image$k ?v0 ?v1 ))(fun_app$ab ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$c ?v3 ?v1 )(fun_app$ab ?v2 (fun_app$m ?v0 ?v3 )))))):named a98 ))
(assert (! (forall ((?v0 Dtree_T_fun$ )(?v1 Dtree_set$ )(?v2 T_bool_fun$ ))(=> (forall ((?v3 T$ ))(=> (member$b ?v3 (image$m ?v0 ?v1 ))(fun_app$ab ?v2 ?v3 )))(forall ((?v3 Dtree$ ))(=> (member$d ?v3 ?v1 )(fun_app$ab ?v2 (fun_app$o ?v0 ?v3 )))))):named a99 ))
(assert (! (forall ((?v0 T_N_fun$ )(?v1 T_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$c ?v3 (image$i ?v0 ?v1 ))(fun_app$ac ?v2 ?v3 )))(forall ((?v3 T$ ))(=> (member$b ?v3 ?v1 )(fun_app$ac ?v2 (fun_app$k ?v0 ?v3 )))))):named a100 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$c ?v3 (fun_app$f (image$g ?v0 )?v1 ))(fun_app$ac ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$c ?v3 ?v1 )(fun_app$ac ?v2 (fun_app$h ?v0 ?v3 )))))):named a101 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$c ?v3 (image$n ?v0 ?v1 ))(fun_app$ac ?v2 ?v3 )))(forall ((?v3 Dtree$ ))(=> (member$d ?v3 ?v1 )(fun_app$ac ?v2 (fun_app$c ?v0 ?v3 )))))):named a102 ))
(assert (! (forall ((?v0 T_dtree_fun$ )(?v1 T_set$ )(?v2 Dtree_bool_fun$ ))(=> (forall ((?v3 Dtree$ ))(=> (member$d ?v3 (image$j ?v0 ?v1 ))(fun_app$ad ?v2 ?v3 )))(forall ((?v3 T$ ))(=> (member$b ?v3 ?v1 )(fun_app$ad ?v2 (fun_app$l ?v0 ?v3 )))))):named a103 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_set$ )(?v2 Dtree_bool_fun$ ))(=> (forall ((?v3 Dtree$ ))(=> (member$d ?v3 (image$l ?v0 ?v1 ))(fun_app$ad ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$c ?v3 ?v1 )(fun_app$ad ?v2 (fun_app$n ?v0 ?v3 )))))):named a104 ))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$ )(?v1 T_dtree_sum_set$ )(?v2 Dtree_bool_fun$ ))(=> (exists ((?v3 Dtree$ ))(and (member$d ?v3 (image$o ?v0 ?v1 ))(fun_app$ad ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$ad ?v2 (fun_app$ae ?v0 ?v3 )))))):named a105 ))
(assert (! (forall ((?v0 T_dtree_fun$ )(?v1 T_set$ )(?v2 Dtree_bool_fun$ ))(=> (exists ((?v3 Dtree$ ))(and (member$d ?v3 (image$j ?v0 ?v1 ))(fun_app$ad ?v2 ?v3 )))(exists ((?v3 T$ ))(and (member$b ?v3 ?v1 )(fun_app$ad ?v2 (fun_app$l ?v0 ?v3 )))))):named a106 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_set$ )(?v2 Dtree_bool_fun$ ))(=> (exists ((?v3 Dtree$ ))(and (member$d ?v3 (image$l ?v0 ?v1 ))(fun_app$ad ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$c ?v3 ?v1 )(fun_app$ad ?v2 (fun_app$n ?v0 ?v3 )))))):named a107 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_set$ )(?v2 Dtree_bool_fun$ ))(=> (exists ((?v3 Dtree$ ))(and (member$d ?v3 (fun_app$af (image$e ?v0 )?v1 ))(fun_app$ad ?v2 ?v3 )))(exists ((?v3 Dtree$ ))(and (member$d ?v3 ?v1 )(fun_app$ad ?v2 (fun_app$ ?v0 ?v3 )))))):named a108 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (fun_app$a (image$ ?v0 )?v1 ))(fun_app$aa ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$aa ?v2 (fun_app$i ?v0 ?v3 )))))):named a109 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (image$h ?v0 ?v1 ))(fun_app$aa ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$aa ?v2 (fun_app$j ?v0 ?v3 )))))):named a110 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$i ?v2 ?v4 )(fun_app$i ?v3 ?v4 )))))(= (fun_app$a (image$ ?v2 )?v0 )(fun_app$a (image$ ?v3 )?v1 )))):named a111 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_dtree_sum_fun$ )(?v3 T_N_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_N_sum$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$j ?v2 ?v4 )(fun_app$j ?v3 ?v4 )))))(= (image$h ?v2 ?v0 )(image$h ?v3 ?v1 )))):named a112 ))
(assert (! (forall ((?v0 Dtree$ ))(finite$ (fun_app$z (hsubst_c$ tr0$ )?v0 ))):named a113 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_T_dtree_sum_set_fun$ )(?v2 Dtree$ ))(= (fun_app$c root$ (fun_app$ (fun_app$y (unfold$ ?v0 )?v1 )?v2 ))(fun_app$c ?v0 ?v2 ))):named a114 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_T_N_sum_set_fun$ )(?v2 N$ ))(= (fun_app$c root$ (fun_app$n (fun_app$ag (unfold$a ?v0 )?v1 )?v2 ))(fun_app$h ?v0 ?v2 ))):named a115 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$c root$ ?v0 )(fun_app$c root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a116 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_set_fun$ )(?v1 Dtree$ )(?v2 Dtree_N_fun$ ))(=> (finite$ (fun_app$z ?v0 ?v1 ))(= (cont$ (fun_app$ (fun_app$y (unfold$ ?v2 )?v0 )?v1 ))(fun_app$a (image$ (fun_app$b (map_sum$ id$ )(fun_app$y (unfold$ ?v2 )?v0 )))(fun_app$z ?v0 ?v1 ))))):named a117 ))
(assert (! (forall ((?v0 N_T_N_sum_set_fun$ )(?v1 N$ )(?v2 N_N_fun$ ))(=> (finite$a (fun_app$ah ?v0 ?v1 ))(= (cont$ (fun_app$n (fun_app$ag (unfold$a ?v2 )?v0 )?v1 ))(image$h (fun_app$ai (map_sum$j id$ )(fun_app$ag (unfold$a ?v2 )?v0 ))(fun_app$ah ?v0 ?v1 ))))):named a118 ))
(assert (! (= (fun_app$aj (comp$ root$ )(hsubst$ tr0$ ))root$ ):named a119 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$c root$ (fun_app$n deftr$ ?v0 ))?v0 )):named a120 ))
(assert (! (forall ((?v0 N$ ))(= (cont$ (fun_app$n deftr$ ?v0 ))(image$h (fun_app$ai (map_sum$j id$ )deftr$ )(fun_app$ah s$ ?v0 )))):named a121 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (fun_app$c root$ ?v0 )(cont$ ?v0 ))?v0 )):named a122 ))
(assert (! (= (vimage$ id$ )id$e ):named a123 ))
(assert (! (= (vimage$a id$k )id$g ):named a124 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum$ ))(= (setr$ (fun_app$i (fun_app$b (map_sum$ ?v0 )?v1 )?v2 ))(fun_app$af (image$e ?v1 )(setr$ ?v2 )))):named a125 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum$ ))(= (setr$ (fun_app$j (fun_app$ai (map_sum$j ?v0 )?v1 )?v2 ))(image$l ?v1 (setr$a ?v2 )))):named a126 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum$ ))(= (setl$ (fun_app$i (fun_app$b (map_sum$ ?v0 )?v1 )?v2 ))(fun_app$e (image$f ?v0 )(setl$ ?v2 )))):named a127 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum$ ))(= (setl$ (fun_app$j (fun_app$ai (map_sum$j ?v0 )?v1 )?v2 ))(fun_app$e (image$f ?v0 )(setl$a ?v2 )))):named a128 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$aj (comp$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$aj (comp$ ?v0 )?v1 )?v2 )))):named a129 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$aj (comp$ ?v0 )id$i )?v0 )):named a130 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$c root$ (node$ ?v0 ?v1 ))?v0 )):named a131 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 N$ )(?v3 N$ ))(=> (and (finite$ ?v0 )(finite$ ?v1 ))(= (= (node$ ?v2 ?v0 )(node$ ?v3 ?v1 ))(and (= ?v2 ?v3 )(= ?v0 ?v1 ))))):named a132 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 N$ ))(=> (finite$ ?v0 )(= (cont$ (node$ ?v1 ?v0 ))?v0 ))):named a133 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$ak (comp$a ?v0 )(fun_app$aj (comp$ ?v1 )?v2 ))(fun_app$aj (comp$ (fun_app$ak (comp$a ?v0 )?v1 ))?v2 ))):named a134 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$aj (comp$ ?v0 )(fun_app$al (comp$b ?v1 )?v2 ))(fun_app$aj (comp$ (fun_app$aj (comp$ ?v0 )?v1 ))?v2 ))):named a135 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$aj (comp$ (fun_app$ak (comp$a ?v0 )?v1 ))?v2 )(fun_app$ak (comp$a ?v0 )(fun_app$aj (comp$ ?v1 )?v2 )))):named a136 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$aj (comp$ (fun_app$aj (comp$ ?v0 )?v1 ))?v2 )(fun_app$aj (comp$ ?v0 )(fun_app$al (comp$b ?v1 )?v2 )))):named a137 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_set$ ))(= (fun_app$af (vimage$b ?v0 )(fun_app$am (vimage$c ?v1 )?v2 ))(fun_app$am (vimage$c (fun_app$aj (comp$ ?v1 )?v0 ))?v2 ))):named a138 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_set$ ))(= (fun_app$af (vimage$b ?v0 )(fun_app$am (vimage$c ?v1 )?v2 ))(fun_app$am (vimage$c (fun_app$aj (comp$ ?v1 )?v0 ))?v2 ))):named a139 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_N_fun$ ))(= (comp$c (vimage$b ?v0 )(vimage$c ?v1 ))(vimage$c (fun_app$aj (comp$ ?v1 )?v0 )))):named a140 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$aj (comp$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$aj (comp$ ?v0 )?v1 )?v2 )))):named a141 ))
(assert (! (= deftr$ (fun_app$ag (unfold$a id$k )s$ )):named a142 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$aj (comp$ ?v0 )?v1 )(fun_app$aj (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$c ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$ ?v3 ?v4 ))))false ))false )):named a143 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$aj (comp$ ?v0 )?v1 )(fun_app$aj (comp$ ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$ ?v3 ?v4 ))))):named a144 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$aj (comp$ ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a145 ))
(assert (! (forall ((?v0 N$ ))(finite$a (fun_app$ah s$ ?v0 ))):named a146 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (forall ((?v1 N$ )(?v2 T_dtree_sum_set$ ))(=> (and (finite$ ?v2 )(= ?v0 (node$ ?v1 ?v2 )))false ))false )):named a147 ))
(assert (! (forall ((?v0 Dtree$ ))(finite$ (cont$ ?v0 ))):named a148 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum$ )(?v2 T_T_fun$ )(?v3 T_T_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (forall ((?v6 T$ )(?v7 T$ ))(=> (and (member$b ?v6 (setl$ ?v0 ))(and (member$b ?v7 (setl$ ?v1 ))(= (fun_app$g ?v2 ?v6 )(fun_app$g ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$d ?v6 (setr$ ?v0 ))(and (member$d ?v7 (setr$ ?v1 ))(= (fun_app$ ?v4 ?v6 )(fun_app$ ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (fun_app$i (fun_app$b (map_sum$ ?v2 )?v4 )?v0 )(fun_app$i (fun_app$b (map_sum$ ?v3 )?v5 )?v1 ))))(= ?v0 ?v1 ))):named a149 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum$ )(?v2 T_T_fun$ )(?v3 T_T_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (forall ((?v6 T$ )(?v7 T$ ))(=> (and (member$b ?v6 (setl$a ?v0 ))(and (member$b ?v7 (setl$a ?v1 ))(= (fun_app$g ?v2 ?v6 )(fun_app$g ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 N$ )(?v7 N$ ))(=> (and (member$c ?v6 (setr$a ?v0 ))(and (member$c ?v7 (setr$a ?v1 ))(= (fun_app$n ?v4 ?v6 )(fun_app$n ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (fun_app$j (fun_app$ai (map_sum$j ?v2 )?v4 )?v0 )(fun_app$j (fun_app$ai (map_sum$j ?v3 )?v5 )?v1 ))))(= ?v0 ?v1 ))):named a150 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_T_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ ))(=> (and (forall ((?v5 T$ ))(=> (member$b ?v5 (setl$ ?v0 ))(= (fun_app$g ?v1 ?v5 )(fun_app$g ?v2 ?v5 ))))(forall ((?v5 Dtree$ ))(=> (member$d ?v5 (setr$ ?v0 ))(= (fun_app$ ?v3 ?v5 )(fun_app$ ?v4 ?v5 )))))(= (fun_app$i (fun_app$b (map_sum$ ?v1 )?v3 )?v0 )(fun_app$i (fun_app$b (map_sum$ ?v2 )?v4 )?v0 )))):named a151 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_T_fun$ )(?v2 T_T_fun$ )(?v3 N_dtree_fun$ )(?v4 N_dtree_fun$ ))(=> (and (forall ((?v5 T$ ))(=> (member$b ?v5 (setl$a ?v0 ))(= (fun_app$g ?v1 ?v5 )(fun_app$g ?v2 ?v5 ))))(forall ((?v5 N$ ))(=> (member$c ?v5 (setr$a ?v0 ))(= (fun_app$n ?v3 ?v5 )(fun_app$n ?v4 ?v5 )))))(= (fun_app$j (fun_app$ai (map_sum$j ?v1 )?v3 )?v0 )(fun_app$j (fun_app$ai (map_sum$j ?v2 )?v4 )?v0 )))):named a152 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum$ )(?v2 T_T_fun$ )(?v3 T_T_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 T$ ))(=> (member$b ?v6 (setl$ ?v1 ))(= (fun_app$g ?v2 ?v6 )(fun_app$g ?v3 ?v6 ))))(forall ((?v6 Dtree$ ))(=> (member$d ?v6 (setr$ ?v1 ))(= (fun_app$ ?v4 ?v6 )(fun_app$ ?v5 ?v6 ))))))(= (fun_app$i (fun_app$b (map_sum$ ?v2 )?v4 )?v0 )(fun_app$i (fun_app$b (map_sum$ ?v3 )?v5 )?v1 )))):named a153 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum$ )(?v2 T_T_fun$ )(?v3 T_T_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 T$ ))(=> (member$b ?v6 (setl$a ?v1 ))(= (fun_app$g ?v2 ?v6 )(fun_app$g ?v3 ?v6 ))))(forall ((?v6 N$ ))(=> (member$c ?v6 (setr$a ?v1 ))(= (fun_app$n ?v4 ?v6 )(fun_app$n ?v5 ?v6 ))))))(= (fun_app$j (fun_app$ai (map_sum$j ?v2 )?v4 )?v0 )(fun_app$j (fun_app$ai (map_sum$j ?v3 )?v5 )?v1 )))):named a154 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (image$n ?v0 (fun_app$af (image$e ?v1 )?v2 ))(image$n (fun_app$aj (comp$ ?v0 )?v1 )?v2 ))):named a155 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$a (image$ ?v0 )(fun_app$a (image$ ?v1 )?v2 ))(fun_app$a (image$ (fun_app$an (comp$d ?v0 )?v1 ))?v2 ))):named a156 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum_set$ ))(= (fun_app$a (image$ ?v0 )(image$h ?v1 ?v2 ))(image$h (fun_app$ao (comp$e ?v0 )?v1 )?v2 ))):named a157 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$h ?v0 (image$p ?v1 ?v2 ))(fun_app$a (image$ (fun_app$ap (comp$f ?v0 )?v1 ))?v2 ))):named a158 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (image$h ?v0 (image$q ?v1 ?v2 ))(image$h (fun_app$aq (comp$g ?v0 )?v1 )?v2 ))):named a159 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$aj (comp$ ?v0 )?v1 )(fun_app$ak (comp$a id$k )?v2 ))(= (fun_app$c ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a160 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ar (map_sum$k ?v0 ?v1 )(fun_app$w (map_sum$h ?v2 ?v3 )?v4 ))(fun_app$ar (map_sum$k (fun_app$aj (comp$ ?v0 )?v2 )(fun_app$aj (comp$ ?v1 )?v3 ))?v4 ))):named a161 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$i (fun_app$b (map_sum$ ?v0 )?v1 )(fun_app$i (fun_app$b (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$i (fun_app$b (map_sum$ (fun_app$as (comp$h ?v0 )?v2 ))(fun_app$al (comp$b ?v1 )?v3 ))?v4 ))):named a162 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_dtree_fun$ )(?v4 T_N_sum$ ))(= (fun_app$i (fun_app$b (map_sum$ ?v0 )?v1 )(fun_app$j (fun_app$ai (map_sum$j ?v2 )?v3 )?v4 ))(fun_app$j (fun_app$ai (map_sum$j (fun_app$as (comp$h ?v0 )?v2 ))(fun_app$at (comp$i ?v1 )?v3 ))?v4 ))):named a163 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$j (fun_app$ai (map_sum$j ?v0 )?v1 )(fun_app$au (fun_app$av (map_sum$l ?v2 )?v3 )?v4 ))(fun_app$i (fun_app$b (map_sum$ (fun_app$as (comp$h ?v0 )?v2 ))(fun_app$aw (comp$j ?v1 )?v3 ))?v4 ))):named a164 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_N_fun$ )(?v4 T_N_sum$ ))(= (fun_app$j (fun_app$ai (map_sum$j ?v0 )?v1 )(fun_app$q (fun_app$r (map_sum$b ?v2 )?v3 )?v4 ))(fun_app$j (fun_app$ai (map_sum$j (fun_app$as (comp$h ?v0 )?v2 ))(fun_app$ax (comp$k ?v1 )?v3 ))?v4 ))):named a165 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(finite$ (fun_app$z (hsubst_c$ ?v0 )?v1 ))):named a166 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$aj (comp$ root$ )(hsubst$ ?v0 ))root$ )):named a167 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ ))(=> (finite$ ?v0 )(finite$ (fun_app$a (image$ ?v1 )?v0 )))):named a168 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_T_N_sum_fun$ ))(=> (finite$ ?v0 )(finite$a (image$p ?v1 ?v0 )))):named a169 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_T_dtree_sum_fun$ ))(=> (finite$a ?v0 )(finite$ (image$h ?v1 ?v0 )))):named a170 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_T_N_sum_fun$ ))(=> (finite$a ?v0 )(finite$a (image$q ?v1 ?v0 )))):named a171 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$l (map_sum$k ?v0 ?v1 )(map_sum$h ?v2 ?v3 ))(map_sum$k (fun_app$aj (comp$ ?v0 )?v2 )(fun_app$aj (comp$ ?v1 )?v3 )))):named a172 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ ))(= (fun_app$an (comp$d (fun_app$b (map_sum$ ?v0 )?v1 ))(fun_app$b (map_sum$ ?v2 )?v3 ))(fun_app$b (map_sum$ (fun_app$as (comp$h ?v0 )?v2 ))(fun_app$al (comp$b ?v1 )?v3 )))):named a173 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_dtree_fun$ ))(= (fun_app$ao (comp$e (fun_app$b (map_sum$ ?v0 )?v1 ))(fun_app$ai (map_sum$j ?v2 )?v3 ))(fun_app$ai (map_sum$j (fun_app$as (comp$h ?v0 )?v2 ))(fun_app$at (comp$i ?v1 )?v3 )))):named a174 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (fun_app$ap (comp$f (fun_app$ai (map_sum$j ?v0 )?v1 ))(fun_app$av (map_sum$l ?v2 )?v3 ))(fun_app$b (map_sum$ (fun_app$as (comp$h ?v0 )?v2 ))(fun_app$aw (comp$j ?v1 )?v3 )))):named a175 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 N_N_fun$ ))(= (fun_app$aq (comp$g (fun_app$ai (map_sum$j ?v0 )?v1 ))(fun_app$r (map_sum$b ?v2 )?v3 ))(fun_app$ai (map_sum$j (fun_app$as (comp$h ?v0 )?v2 ))(fun_app$ax (comp$k ?v1 )?v3 )))):named a176 ))
(check-sat )
;(get-unsat-core )
