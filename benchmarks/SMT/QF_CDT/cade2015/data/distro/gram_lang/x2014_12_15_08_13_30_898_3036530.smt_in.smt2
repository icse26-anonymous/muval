;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun h$ (Dtree$ N$ )Dtree$ )
(declare-fun n$ ()N$ )
(declare-fun n1$ ()N$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun h_r$ (Dtree$ N$ )N$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tr2$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ N$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun tr2$a ()Dtree$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(assert (! (not (inItr$ top$ tr0$ (root$ tr2$ ))):named a0 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (inItr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v1 ?v3 ))(inItr$ ?v0 ?v3 ?v2 ))):named a1 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (root$ ?v0 )?v1 )(inItr$ ?v1 ?v0 (root$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N$ ))(=> (and (member$ (root$ ?v0 )?v1 )(and (member$a (inr$ ?v2 )(cont$ ?v0 ))(inItr$ ?v1 ?v2 ?v3 )))(inItr$ ?v1 ?v0 ?v3 ))):named a3 ))
(assert (! (inItr$ top$ tr0$ n1$ ):named a4 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(and (subtr$ top$ (pick$ tr0$ ?v0 )tr0$ )(= (root$ (pick$ tr0$ ?v0 ))?v0 )))):named a5 ))
(assert (! (subtr$ top$ tr1$ tr$ ):named a6 ))
(assert (! (member$a (inr$ tr2$ )(cont$ (pick$ tr0$ n1$ ))):named a7 ))
(assert (! (inItr$ top$ tr0$ n$ ):named a8 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(= (root$ (pick$ tr0$ ?v0 ))?v0 ))):named a9 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(subtr$ top$ (pick$ tr0$ ?v0 )tr0$ ))):named a10 ))
(assert (! (forall ((?v0 N$ ))(! (= (h_r$ tr0$ ?v0 )(root$ (pick$ tr0$ ?v0 ))):pattern ((h_r$ tr0$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (inItr$ ?v0 ?v1 ?v2 )(member$ (root$ ?v1 )?v0 ))):named a12 ))
(assert (! (= tr2$a (h$ tr0$ (root$ tr2$ ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (inItr$ top$ ?v0 ?v1 )(= (root$ (pick$ ?v0 ?v1 ))?v1 ))):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (inItr$ ?v0 ?v1 ?v2 )(exists ((?v3 Dtree$ ))(and (subtr$ ?v0 ?v3 ?v1 )(= (root$ ?v3 )?v2 ))))):named a15 ))
(assert (! (forall ((?v0 N$ ))(=> (and (wf$ tr0$ )(inItr$ top$ tr0$ ?v0 ))(wf$ (pick$ tr0$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(= (root$ (h$ tr0$ ?v0 ))?v0 ))):named a17 ))
(check-sat )
;(get-unsat-core )
