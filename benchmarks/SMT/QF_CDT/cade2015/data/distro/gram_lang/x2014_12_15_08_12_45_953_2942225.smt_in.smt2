;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-datatypes ()((N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))(T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun nl$ ()N_list$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun nsa$ ()N_set$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun tr2$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun member$a (N$ N_set$ )Bool )
(assert (! (not (or (exists ((?v0 N$ ))(= (cons$ (root$ tra$ )nl$ )(cons$ ?v0 nil$ )))(exists ((?v0 N$ )(?v1 N_list$ )(?v2 N$ ))(and (= (cons$ (root$ tra$ )nl$ )(cons$ ?v2 (cons$ ?v0 ?v1 )))(and (path$ f$ (cons$ ?v0 ?v1 ))(member$ (inr$ (fun_app$ f$ ?v0 ))(cont$ (fun_app$ f$ ?v2 )))))))):named a0 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(=> (reg$ ?v0 ?v1 )(= (fun_app$ ?v0 (root$ ?v1 ))?v1 ))):named a1 ))
(assert (! (reg$ f$ tra$ ):named a2 ))
(assert (! (member$ (inr$ tr1a$ )(cont$ tra$ )):named a3 ))
(assert (! (path$ f$ nl$ ):named a4 ))
(assert (! (reg$ f$ tr$ ):named a5 ))
(assert (! (= (fun_app$ f$ (hd$ nl$ ))tr1a$ ):named a6 ))
(assert (! (member$a (root$ tra$ )nsa$ ):named a7 ))
(assert (! (reg$ f$ tr1a$ ):named a8 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(= (path$ ?v0 ?v1 )(or (exists ((?v2 N$ ))(= ?v1 (cons$ ?v2 nil$ )))(exists ((?v2 N$ )(?v3 N_list$ )(?v4 N$ ))(and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3 )))(and (path$ ?v0 (cons$ ?v2 ?v3 ))(member$ (inr$ (fun_app$ ?v0 ?v2 ))(cont$ (fun_app$ ?v0 ?v4 ))))))))):named a9 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ )(?v2 N_list$ )(?v3 N$ ))(=> (and (path$ ?v0 (cons$ ?v1 ?v2 ))(member$ (inr$ (fun_app$ ?v0 ?v1 ))(cont$ (fun_app$ ?v0 ?v3 ))))(path$ ?v0 (cons$ ?v3 (cons$ ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ )(?v2 N_list$ ))(=> (and (path$ ?v0 (cons$ ?v1 ?v2 ))(not (= ?v2 nil$ )))(path$ ?v0 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(=> (and (path$ ?v0 ?v1 )(and (forall ((?v2 N$ ))(=> (= ?v1 (cons$ ?v2 nil$ ))false ))(forall ((?v2 N$ )(?v3 N_list$ )(?v4 N$ ))(=> (and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3 )))(and (path$ ?v0 (cons$ ?v2 ?v3 ))(member$ (inr$ (fun_app$ ?v0 ?v2 ))(cont$ (fun_app$ ?v0 ?v4 )))))false ))))false )):named a12 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(=> (path$ ?v0 ?v1 )(not (= ?v1 nil$ )))):named a13 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ ))(path$ ?v0 (cons$ ?v1 nil$ ))):named a14 ))
(assert (! (= (fun_app$ f$ (last$ nl$ ))tr2$ ):named a15 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (reg$ ?v0 ?v1 )(member$ (inr$ ?v2 )(cont$ ?v1 )))(reg$ ?v0 ?v2 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
