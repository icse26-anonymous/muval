;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun t$ ()T$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun tr0$ ()Dtree$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun unfold$ (Dtree_N_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$ (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$a (Dtree_T_dtree_sum_set_fun$ Dtree$ )T_dtree_sum_set$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(assert (! (not (inFr$ ns$ (fun_app$ (hsubst$ tr0$ )tr0$ )t$ )):named a0 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$ (root$ ?v0 )?v1 )(and (member$a (inr$ ?v2 )(cont$ ?v0 ))(inFr$ ?v1 ?v2 ?v3 )))(inFr$ ?v1 ?v0 ?v3 ))):named a1 ))
(assert (! (member$ (root$ tr0$ )ns$ ):named a2 ))
(assert (! (member$a (inr$ tr1$ )(cont$ (fun_app$ (hsubst$ tr0$ )tr0$ ))):named a3 ))
(assert (! (inFr$ ns$ tr1$ t$ ):named a4 ))
(assert (! (= tr1$ (fun_app$ (hsubst$ tr0$ )tr$ )):named a5 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (root$ ?v0 )(root$ tr0$ ))(= (fun_app$ (hsubst$ tr0$ )?v0 )(fun_app$ (hsubst$ tr0$ )tr0$ )))):named a6 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(not (member$ (root$ tr0$ )?v0 )))(inFr$ ?v0 (fun_app$ (hsubst$ tr0$ )?v1 )?v2 ))):named a7 ))
(assert (! (member$a (inr$ tr$ )(cont$ tr0$ )):named a8 ))
(assert (! (forall ((?v0 Dtree$ ))(= (root$ (fun_app$ (hsubst$ tr0$ )?v0 ))(root$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (and (wf$ tr0$ )(wf$ ?v0 ))(wf$ (fun_app$ (hsubst$ tr0$ )?v0 )))):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(not (member$ (root$ ?v3 )?v0 )))(inFr$ ?v0 (fun_app$ (hsubst$ ?v3 )?v1 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr$ ?v0 ?v1 ?v2 )(member$ (root$ ?v1 )?v0 ))):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$ (root$ ?v0 )?v1 ))(not (inFr$ ?v1 ?v0 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (root$ (fun_app$ (hsubst$ ?v0 )?v1 ))(root$ ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (root$ ?v0 )(root$ ?v1 ))(= (fun_app$ (hsubst$ ?v1 )?v0 )(fun_app$ (hsubst$ ?v1 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$a (hsubst_c$ tr0$ )?v0 )(ite (= (root$ ?v0 )(root$ tr0$ ))(cont$ tr0$ )(cont$ ?v0 ))):pattern ((fun_app$a (hsubst_c$ tr0$ )?v0 )))):named a16 ))
(assert (! (= (hsubst$ tr0$ )(unfold$ hsubst_r$ (hsubst_c$ tr0$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
