;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun n$ ()N$ )
(declare-fun s$ ()N_T_N_sum_set_fun$ )
(declare-fun id$ ()N_N_fun$ )
(declare-fun uu$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun id$a ()Dtree_dtree_fun$ )
(declare-fun id$b ()N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun id$c ()Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun id$d ()N_N_fun_N_N_fun_fun$ )
(declare-fun top$ ()N_set$ )
(declare-fun uua$ (N_set$ )N_bool_fun$ )
(declare-fun comp$ (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun comp$a (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun comp$b (N_N_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun comp$c (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$d (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$e (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun comp$f (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$g (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun deftr$ ()N_dtree_fun$ )
(declare-fun inFr2$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun subtr$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun subtr2$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun unfold$ (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun collect$ (N_bool_fun$ )N_set$ )
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ )N_dtree_fun$ )
(declare-fun collect$a (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$a (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$b (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$c (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$d (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$e (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$f (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(declare-fun fun_app$g (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$h (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$i (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$j (N_N_fun_N_N_fun_fun$ N_N_fun$ )N_N_fun$ )
(declare-fun fun_app$k (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$l (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$m (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$n (N_N_fun$ N$ )N$ )
(declare-fun fun_app$o (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$p (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$q (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$r (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$s (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun fun_app$t (N_set_dtree_T_bool_fun_fun_fun$ N_set$ )Dtree_T_bool_fun_fun$ )
(declare-fun fun_app$u (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (wf$ (fun_app$b deftr$ n$ ))):named a2 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$c root$ (fun_app$b deftr$ ?v0 ))?v0 )):named a3 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(fun_app$d (fun_app$e (fun_app$f subtr$ ?v1 )?v2 )?v0 ))(wf$ ?v2 ))):named a4 ))
(assert (! (= deftr$ (fun_app$g (unfold$ id$ )s$ )):named a5 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a6 ))
(assert (! (= (fun_app$h (comp$ root$ )deftr$ )id$ ):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$ (inr$ ?v1 )(cont$ ?v0 ))(member$ (inr$ ?v2 )(cont$ ?v0 ))))(= (= (fun_app$c root$ ?v1 )(fun_app$c root$ ?v2 ))(= ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (fun_app$c root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$a (fun_app$c root$ ?v3 )?v4 )(and (fun_app$d (fun_app$e (fun_app$f subtr$ ?v4 )?v5 )?v6 )(member$ (inr$ ?v6 )(cont$ ?v3 ))))))))))):named a9 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set_dtree_dtree_bool_fun_fun_fun$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v2 )(and (forall ((?v4 N_set$ )(?v5 Dtree$ ))(fun_app$d (fun_app$e (fun_app$f ?v3 ?v4 )?v5 )?v5 ))(forall ((?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$a (fun_app$c root$ ?v5 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v6 ))(and (fun_app$d (fun_app$e (fun_app$f subtr$ ?v4 )?v6 )?v7 )(fun_app$d (fun_app$e (fun_app$f ?v3 ?v4 )?v6 )?v7 ))))(fun_app$d (fun_app$e (fun_app$f ?v3 ?v4 )?v5 )?v7 )))))(fun_app$d (fun_app$e (fun_app$f ?v3 ?v0 )?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (fun_app$c root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$a (fun_app$c root$ ?v3 )?v4 )(and (fun_app$d (fun_app$e (fun_app$f subtr$ ?v4 )?v5 )?v6 )(member$ (inr$ ?v6 )(cont$ ?v3 )))))))false ))))false )):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v2 )?v3 ))(fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v3 ))):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v2 )(member$a (fun_app$c root$ ?v2 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v2 )(member$a (fun_app$c root$ ?v1 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (fun_app$c root$ ?v0 )?v1 )(and (fun_app$d (fun_app$e (fun_app$f subtr$ ?v1 )?v2 )?v3 )(member$ (inr$ ?v3 )(cont$ ?v0 ))))(fun_app$d (fun_app$e (fun_app$f subtr$ ?v1 )?v2 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (fun_app$c root$ ?v0 )?v1 )(and (member$ (inr$ ?v0 )(cont$ ?v2 ))(fun_app$d (fun_app$e (fun_app$f subtr$ ?v1 )?v2 )?v3 )))(fun_app$d (fun_app$e (fun_app$f subtr$ ?v1 )?v0 )?v3 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$c root$ ?v0 )?v1 )(fun_app$d (fun_app$e (fun_app$f subtr$ ?v1 )?v0 )?v0 ))):named a17 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$i (comp$a ?v0 )id$a )?v0 )):named a18 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$j (comp$b ?v0 )id$ )?v0 )):named a19 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$k (comp$c ?v0 )id$ )?v0 )):named a20 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$l (comp$d id$a )?v0 )?v0 )):named a21 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$m (comp$e id$ )?v0 )?v0 )):named a22 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$j (comp$b id$ )?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$l (comp$d id$a )?v0 )?v0 )):named a24 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$m (comp$e id$ )?v0 )?v0 )):named a25 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$j (comp$b id$ )?v0 )?v0 )):named a26 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(= (fun_app$b (subtrOf$ ?v0 )(fun_app$c root$ ?v1 ))?v1 ))):named a27 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_T_N_sum_set_fun$ )(?v2 N$ ))(= (fun_app$c root$ (fun_app$b (fun_app$g (unfold$ ?v0 )?v1 )?v2 ))(fun_app$n ?v0 ?v2 ))):named a28 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$n id$ ?v0 )?v0 ):pattern ((fun_app$n id$ ?v0 )))):named a31 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$i (comp$a ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$i (comp$a ?v0 )?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$b (fun_app$l (comp$d ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$l (comp$d ?v0 )?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$m (comp$e ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$m (comp$e ?v0 )?v1 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$n (fun_app$j (comp$b ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$j (comp$b ?v0 )?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$b (fun_app$k (comp$c ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$k (comp$c ?v0 )?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$n (fun_app$h (comp$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$h (comp$ ?v0 )?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$c root$ ?v0 )(fun_app$c root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a38 ))
(assert (! (= (comp$d id$a )id$b ):named a39 ))
(assert (! (= (comp$e id$ )id$c ):named a40 ))
(assert (! (= (comp$b id$ )id$d ):named a41 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$i (comp$a ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$o ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$l (comp$d ?v0 )?v1 )?v2 )(= (fun_app$o ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$b ?v2 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )?v2 )(= (fun_app$n ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$j (comp$b ?v0 )?v1 )?v2 )(= (fun_app$n ?v0 (fun_app$n ?v1 ?v3 ))(fun_app$n ?v2 ?v3 )))):named a45 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$k (comp$c ?v0 )?v1 )?v2 )(= (fun_app$b ?v0 (fun_app$n ?v1 ?v3 ))(fun_app$b ?v2 ?v3 )))):named a46 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$h (comp$ ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$n ?v2 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$h (comp$ ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$b ?v3 ?v4 ))))):named a48 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$j (comp$b ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$n ?v2 (fun_app$n ?v3 ?v4 ))))):named a49 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$i (comp$a ?v0 )?v1 )(fun_app$i (comp$a ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$o ?v3 ?v4 ))))):named a50 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$i (comp$a ?v0 )?v1 )(fun_app$m (comp$e ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$n ?v2 (fun_app$c ?v3 ?v4 ))))):named a51 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$l (comp$d ?v0 )?v1 )(fun_app$l (comp$d ?v2 )?v3 ))(= (fun_app$o ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$b ?v3 ?v4 ))))):named a52 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$l (comp$d ?v0 )?v1 )(fun_app$k (comp$c ?v2 )?v3 ))(= (fun_app$o ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$n ?v3 ?v4 ))))):named a53 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )(fun_app$i (comp$a ?v2 )?v3 ))(= (fun_app$n ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$o ?v3 ?v4 ))))):named a54 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )(fun_app$m (comp$e ?v2 )?v3 ))(= (fun_app$n ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$n ?v2 (fun_app$c ?v3 ?v4 ))))):named a55 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$j (comp$b ?v0 )?v1 )(fun_app$h (comp$ ?v2 )?v3 ))(= (fun_app$n ?v0 (fun_app$n ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$b ?v3 ?v4 ))))):named a56 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$j (comp$b ?v0 )?v1 )(fun_app$j (comp$b ?v2 )?v3 ))(= (fun_app$n ?v0 (fun_app$n ?v1 ?v4 ))(fun_app$n ?v2 (fun_app$n ?v3 ?v4 ))))):named a57 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$h (comp$ ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$c ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a58 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$j (comp$b ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$c ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$n ?v2 (fun_app$n ?v3 ?v4 ))))false ))false )):named a59 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$i (comp$a ?v0 )?v1 )(fun_app$i (comp$a ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$c ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$o ?v3 ?v4 ))))false ))false )):named a60 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$i (comp$a ?v0 )?v1 )(fun_app$m (comp$e ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$c ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$n ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a61 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$l (comp$d ?v0 )?v1 )(fun_app$l (comp$d ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$o ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a62 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$l (comp$d ?v0 )?v1 )(fun_app$k (comp$c ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$o ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$n ?v3 ?v4 ))))false ))false )):named a63 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$m (comp$e ?v0 )?v1 )(fun_app$i (comp$a ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$n ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$o ?v3 ?v4 ))))false ))false )):named a64 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$m (comp$e ?v0 )?v1 )(fun_app$m (comp$e ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$n ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$n ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a65 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$j (comp$b ?v0 )?v1 )(fun_app$h (comp$ ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$n ?v0 (fun_app$n ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a66 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$j (comp$b ?v0 )?v1 )(fun_app$j (comp$b ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$n ?v0 (fun_app$n ?v1 ?v4 ))(fun_app$n ?v2 (fun_app$n ?v3 ?v4 ))))false ))false )):named a67 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$i (comp$a ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$i (comp$a ?v0 )?v1 )?v2 )))):named a68 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$b (fun_app$l (comp$d ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$l (comp$d ?v0 )?v1 )?v2 )))):named a69 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$m (comp$e ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$m (comp$e ?v0 )?v1 )?v2 )))):named a70 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$n (fun_app$j (comp$b ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$j (comp$b ?v0 )?v1 )?v2 )))):named a71 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$b (fun_app$k (comp$c ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$k (comp$c ?v0 )?v1 )?v2 )))):named a72 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$n (fun_app$h (comp$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$h (comp$ ?v0 )?v1 )?v2 )))):named a73 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$j (comp$b (fun_app$h (comp$ ?v0 )?v1 ))?v2 )(fun_app$h (comp$ ?v0 )(fun_app$k (comp$c ?v1 )?v2 )))):named a74 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$h (comp$ (fun_app$m (comp$e ?v0 )?v1 ))?v2 )(fun_app$j (comp$b ?v0 )(fun_app$h (comp$ ?v1 )?v2 )))):named a75 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$h (comp$ (fun_app$i (comp$a ?v0 )?v1 ))?v2 )(fun_app$h (comp$ ?v0 )(fun_app$l (comp$d ?v1 )?v2 )))):named a76 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$p (comp$f (fun_app$k (comp$c ?v0 )?v1 ))?v2 )(fun_app$p (comp$f ?v0 )(fun_app$m (comp$e ?v1 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$i (comp$a (fun_app$i (comp$a ?v0 )?v1 ))?v2 )(fun_app$i (comp$a ?v0 )(fun_app$q (comp$g ?v1 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$i (comp$a (fun_app$m (comp$e ?v0 )?v1 ))?v2 )(fun_app$m (comp$e ?v0 )(fun_app$i (comp$a ?v1 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$l (comp$d (fun_app$q (comp$g ?v0 )?v1 ))?v2 )(fun_app$l (comp$d ?v0 )(fun_app$l (comp$d ?v1 )?v2 )))):named a80 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$l (comp$d (fun_app$p (comp$f ?v0 )?v1 ))?v2 )(fun_app$k (comp$c ?v0 )(fun_app$h (comp$ ?v1 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$m (comp$e (fun_app$h (comp$ ?v0 )?v1 ))?v2 )(fun_app$i (comp$a ?v0 )(fun_app$p (comp$f ?v1 )?v2 )))):named a82 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$m (comp$e (fun_app$j (comp$b ?v0 )?v1 ))?v2 )(fun_app$m (comp$e ?v0 )(fun_app$m (comp$e ?v1 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$j (comp$b ?v0 )(fun_app$h (comp$ ?v1 )?v2 ))(fun_app$h (comp$ (fun_app$m (comp$e ?v0 )?v1 ))?v2 ))):named a84 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$h (comp$ ?v0 )(fun_app$k (comp$c ?v1 )?v2 ))(fun_app$j (comp$b (fun_app$h (comp$ ?v0 )?v1 ))?v2 ))):named a85 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$h (comp$ ?v0 )(fun_app$l (comp$d ?v1 )?v2 ))(fun_app$h (comp$ (fun_app$i (comp$a ?v0 )?v1 ))?v2 ))):named a86 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$p (comp$f ?v0 )(fun_app$m (comp$e ?v1 )?v2 ))(fun_app$p (comp$f (fun_app$k (comp$c ?v0 )?v1 ))?v2 ))):named a87 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$i (comp$a ?v0 )(fun_app$q (comp$g ?v1 )?v2 ))(fun_app$i (comp$a (fun_app$i (comp$a ?v0 )?v1 ))?v2 ))):named a88 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$i (comp$a ?v0 )(fun_app$p (comp$f ?v1 )?v2 ))(fun_app$m (comp$e (fun_app$h (comp$ ?v0 )?v1 ))?v2 ))):named a89 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$l (comp$d ?v0 )(fun_app$l (comp$d ?v1 )?v2 ))(fun_app$l (comp$d (fun_app$q (comp$g ?v0 )?v1 ))?v2 ))):named a90 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$l (comp$d ?v0 )(fun_app$k (comp$c ?v1 )?v2 ))(fun_app$k (comp$c (fun_app$l (comp$d ?v0 )?v1 ))?v2 ))):named a91 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$m (comp$e ?v0 )(fun_app$i (comp$a ?v1 )?v2 ))(fun_app$i (comp$a (fun_app$m (comp$e ?v0 )?v1 ))?v2 ))):named a92 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$m (comp$e ?v0 )(fun_app$m (comp$e ?v1 )?v2 ))(fun_app$m (comp$e (fun_app$j (comp$b ?v0 )?v1 ))?v2 ))):named a93 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$n id$ ?v0 )?v0 ):pattern ((fun_app$n id$ ?v0 )))):named a94 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a95 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$i (comp$a ?v0 )?v1 )(fun_app$m (comp$e id$ )?v2 ))(= (fun_app$c ?v0 (fun_app$o ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a96 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$l (comp$d ?v0 )?v1 )(fun_app$l (comp$d id$a )?v2 ))(= (fun_app$o ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$b ?v2 ?v3 )))):named a97 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )(fun_app$m (comp$e id$ )?v2 ))(= (fun_app$n ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a98 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$j (comp$b ?v0 )?v1 )(fun_app$j (comp$b id$ )?v2 ))(= (fun_app$n ?v0 (fun_app$n ?v1 ?v3 ))(fun_app$n ?v2 ?v3 )))):named a99 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$k (comp$c ?v0 )?v1 )(fun_app$l (comp$d id$a )?v2 ))(= (fun_app$b ?v0 (fun_app$n ?v1 ?v3 ))(fun_app$b ?v2 ?v3 )))):named a100 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$j (comp$b id$ )?v2 ))(= (fun_app$c ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$n ?v2 ?v3 )))):named a101 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (fun_app$c root$ ?v0 )(cont$ ?v0 ))?v0 )):named a102 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(=> (= (fun_app$j (comp$b ?v0 )?v1 )id$ )(= (fun_app$n ?v0 (fun_app$n ?v1 ?v2 ))?v2 ))):named a103 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(=> (= (fun_app$h (comp$ ?v0 )?v1 )id$ )(= (fun_app$c ?v0 (fun_app$b ?v1 ?v2 ))?v2 ))):named a104 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$r (fun_app$s (fun_app$t inFr2$ ?v0 )?v1 )?v2 )(and (member$a (fun_app$c root$ ?v3 )?v0 )(member$ (inr$ ?v1 )(cont$ ?v3 ))))(fun_app$r (fun_app$s (fun_app$t inFr2$ ?v0 )?v3 )?v2 ))):named a105 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N$ ))(=> (and (member$a (fun_app$c root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(fun_app$a (fun_app$u (inItr$ ?v1 )?v2 )?v3 )))(fun_app$a (fun_app$u (inItr$ ?v1 )?v0 )?v3 ))):named a106 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (and (fun_app$a (fun_app$u (inItr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$c root$ ?v3 ))(member$a (fun_app$c root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$c root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$a (fun_app$u (inItr$ ?v4 )?v5 )?v6 ))))))false ))))false )):named a107 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(= (fun_app$a (fun_app$u (inItr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$c root$ ?v3 ))(member$a (fun_app$c root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$c root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$a (fun_app$u (inItr$ ?v4 )?v5 )?v6 )))))))))):named a108 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$a (fun_app$c root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(fun_app$r (fun_app$s (fun_app$t inFr$ ?v1 )?v2 )?v3 )))(fun_app$r (fun_app$s (fun_app$t inFr$ ?v1 )?v0 )?v3 ))):named a109 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (fun_app$c root$ ?v0 )?v1 )(and (member$ (inr$ ?v0 )(cont$ ?v2 ))(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v1 )?v2 )?v3 )))(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v1 )?v0 )?v3 ))):named a110 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$c root$ (node$ ?v0 ?v1 ))?v0 )):named a111 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_bool_fun$ ))(=> (forall ((?v2 N$ ))(= (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a112 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ )(?v1 T_dtree_sum_bool_fun$ ))(=> (forall ((?v2 T_dtree_sum$ ))(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(= (collect$a ?v0 )(collect$a ?v1 )))):named a113 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$a (uu$ ?v0 ))?v0 )):named a114 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$ (uua$ ?v0 ))?v0 )):named a115 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$ ?v0 (collect$a ?v1 ))(fun_app$ ?v1 ?v0 ))):named a116 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$a ?v0 (collect$ ?v1 ))(fun_app$a ?v1 ?v0 ))):named a117 ))
(assert (! (= inFr$ inFr2$ ):named a118 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v2 )?v3 ))(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v1 )?v3 ))):named a119 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v1 )?v2 )(member$a (fun_app$c root$ ?v2 )?v0 ))):named a120 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v1 )?v2 )(member$a (fun_app$c root$ ?v1 )?v0 ))):named a121 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$c root$ ?v0 )?v1 )(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v1 )?v0 )?v0 ))):named a122 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$r (fun_app$s (fun_app$t inFr$ ?v0 )?v1 )?v2 )(member$a (fun_app$c root$ ?v1 )?v0 ))):named a123 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$a (fun_app$c root$ ?v0 )?v1 ))(not (fun_app$r (fun_app$s (fun_app$t inFr$ ?v1 )?v0 )?v2 )))):named a124 ))
(assert (! (= subtr$ subtr2$ ):named a125 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$r (fun_app$s (fun_app$t inFr$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v3 ))(fun_app$r (fun_app$s (fun_app$t inFr$ ?v0 )?v3 )?v2 ))):named a126 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$a (fun_app$u (inItr$ ?v0 )?v1 )?v2 )(member$a (fun_app$c root$ ?v1 )?v0 ))):named a127 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$c root$ ?v0 )?v1 )(fun_app$a (fun_app$u (inItr$ ?v1 )?v0 )(fun_app$c root$ ?v0 )))):named a128 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$r (fun_app$s (fun_app$t inFr2$ ?v0 )?v1 )?v2 )(member$a (fun_app$c root$ ?v1 )?v0 ))):named a129 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (fun_app$a (fun_app$u (inItr$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v3 ))(fun_app$a (fun_app$u (inItr$ ?v0 )?v3 )?v2 ))):named a130 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$k (comp$c ?v0 )?v1 )(fun_app$l (comp$d ?v2 )?v3 ))(= (fun_app$i (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$j (comp$b (fun_app$h (comp$ ?v4 )?v0 ))?v1 )(fun_app$h (comp$ ?v5 )?v3 )))):named a131 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$l (comp$d ?v0 )?v1 )(fun_app$k (comp$c ?v2 )?v3 ))(= (fun_app$h (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$h (comp$ (fun_app$i (comp$a ?v4 )?v0 ))?v1 )(fun_app$j (comp$b ?v5 )?v3 )))):named a132 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$h (comp$ ?v2 )?v3 ))(= (fun_app$m (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$h (comp$ (fun_app$m (comp$e ?v4 )?v0 ))?v1 )(fun_app$h (comp$ ?v5 )?v3 )))):named a133 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$q (comp$g ?v0 )?v1 )(fun_app$p (comp$f ?v2 )?v3 ))(= (fun_app$h (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$i (comp$a (fun_app$i (comp$a ?v4 )?v0 ))?v1 )(fun_app$m (comp$e ?v5 )?v3 )))):named a134 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$p (comp$f ?v0 )?v1 )(fun_app$p (comp$f ?v2 )?v3 ))(= (fun_app$h (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$m (comp$e (fun_app$h (comp$ ?v4 )?v0 ))?v1 )(fun_app$m (comp$e ?v5 )?v3 )))):named a135 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$q (comp$g ?v0 )?v1 )(fun_app$q (comp$g ?v2 )?v3 ))(= (fun_app$i (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$i (comp$a (fun_app$i (comp$a ?v4 )?v0 ))?v1 )(fun_app$i (comp$a ?v5 )?v3 )))):named a136 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$p (comp$f ?v0 )?v1 )(fun_app$q (comp$g ?v2 )?v3 ))(= (fun_app$i (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$m (comp$e (fun_app$h (comp$ ?v4 )?v0 ))?v1 )(fun_app$i (comp$a ?v5 )?v3 )))):named a137 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$h (comp$ ?v2 )?v3 ))(= (fun_app$p (comp$f ?v4 )?v2 )?v5 ))(= (fun_app$l (comp$d (fun_app$p (comp$f ?v4 )?v0 ))?v1 )(fun_app$l (comp$d ?v5 )?v3 )))):named a138 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$j (comp$b ?v2 )?v3 ))(= (fun_app$j (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$h (comp$ (fun_app$m (comp$e ?v4 )?v0 ))?v1 )(fun_app$j (comp$b ?v5 )?v3 )))):named a139 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$j (comp$b ?v2 )?v3 ))(= (fun_app$k (comp$c ?v4 )?v2 )?v5 ))(= (fun_app$l (comp$d (fun_app$p (comp$f ?v4 )?v0 ))?v1 )(fun_app$k (comp$c ?v5 )?v3 )))):named a140 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$m (comp$e ?v0 )?v1 )(fun_app$i (comp$a ?v2 )?v3 ))(= (fun_app$l (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$j (comp$b ?v0 )(fun_app$h (comp$ ?v1 )?v4 ))(fun_app$h (comp$ ?v2 )?v5 )))):named a141 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$i (comp$a ?v0 )?v1 )(fun_app$m (comp$e ?v2 )?v3 ))(= (fun_app$h (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$ ?v0 )(fun_app$l (comp$d ?v1 )?v4 ))(fun_app$j (comp$b ?v2 )?v5 )))):named a142 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$h (comp$ ?v2 )?v3 ))(= (fun_app$k (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$ ?v0 )(fun_app$k (comp$c ?v1 )?v4 ))(fun_app$h (comp$ ?v2 )?v5 )))):named a143 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$q (comp$g ?v0 )?v1 )(fun_app$p (comp$f ?v2 )?v3 ))(= (fun_app$h (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$l (comp$d ?v0 )(fun_app$l (comp$d ?v1 )?v4 ))(fun_app$k (comp$c ?v2 )?v5 )))):named a144 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$p (comp$f ?v0 )?v1 )(fun_app$p (comp$f ?v2 )?v3 ))(= (fun_app$h (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$k (comp$c ?v0 )(fun_app$h (comp$ ?v1 )?v4 ))(fun_app$k (comp$c ?v2 )?v5 )))):named a145 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$q (comp$g ?v0 )?v1 )(fun_app$q (comp$g ?v2 )?v3 ))(= (fun_app$l (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$l (comp$d ?v0 )(fun_app$l (comp$d ?v1 )?v4 ))(fun_app$l (comp$d ?v2 )?v5 )))):named a146 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$p (comp$f ?v0 )?v1 )(fun_app$q (comp$g ?v2 )?v3 ))(= (fun_app$l (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$k (comp$c ?v0 )(fun_app$h (comp$ ?v1 )?v4 ))(fun_app$l (comp$d ?v2 )?v5 )))):named a147 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$h (comp$ ?v2 )?v3 ))(= (fun_app$p (comp$f ?v3 )?v4 )?v5 ))(= (fun_app$i (comp$a ?v0 )(fun_app$p (comp$f ?v1 )?v4 ))(fun_app$i (comp$a ?v2 )?v5 )))):named a148 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$j (comp$b ?v2 )?v3 ))(= (fun_app$m (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$i (comp$a ?v0 )(fun_app$p (comp$f ?v1 )?v4 ))(fun_app$m (comp$e ?v2 )?v5 )))):named a149 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$h (comp$ ?v0 )?v1 )(fun_app$j (comp$b ?v2 )?v3 ))(= (fun_app$j (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$ ?v0 )(fun_app$k (comp$c ?v1 )?v4 ))(fun_app$j (comp$b ?v2 )?v5 )))):named a150 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$k (comp$c ?v0 )?v1 )?v2 )(= (fun_app$j (comp$b (fun_app$h (comp$ ?v3 )?v0 ))?v1 )(fun_app$h (comp$ ?v3 )?v2 )))):named a151 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$l (comp$d ?v0 )?v1 )?v2 )(= (fun_app$h (comp$ (fun_app$i (comp$a ?v3 )?v0 ))?v1 )(fun_app$h (comp$ ?v3 )?v2 )))):named a152 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$h (comp$ ?v0 )?v1 )?v2 )(= (fun_app$h (comp$ (fun_app$m (comp$e ?v3 )?v0 ))?v1 )(fun_app$j (comp$b ?v3 )?v2 )))):named a153 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$q (comp$g ?v0 )?v1 )?v2 )(= (fun_app$i (comp$a (fun_app$i (comp$a ?v3 )?v0 ))?v1 )(fun_app$i (comp$a ?v3 )?v2 )))):named a154 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$p (comp$f ?v0 )?v1 )?v2 )(= (fun_app$m (comp$e (fun_app$h (comp$ ?v3 )?v0 ))?v1 )(fun_app$i (comp$a ?v3 )?v2 )))):named a155 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$h (comp$ ?v0 )?v1 )?v2 )(= (fun_app$l (comp$d (fun_app$p (comp$f ?v3 )?v0 ))?v1 )(fun_app$k (comp$c ?v3 )?v2 )))):named a156 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$i (comp$a ?v0 )?v1 )?v2 )(= (fun_app$i (comp$a (fun_app$m (comp$e ?v3 )?v0 ))?v1 )(fun_app$m (comp$e ?v3 )?v2 )))):named a157 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$l (comp$d ?v0 )?v1 )?v2 )(= (fun_app$l (comp$d (fun_app$q (comp$g ?v3 )?v0 ))?v1 )(fun_app$l (comp$d ?v3 )?v2 )))):named a158 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )?v2 )(= (fun_app$p (comp$f (fun_app$k (comp$c ?v3 )?v0 ))?v1 )(fun_app$p (comp$f ?v3 )?v2 )))):named a159 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )?v2 )(= (fun_app$m (comp$e (fun_app$j (comp$b ?v3 )?v0 ))?v1 )(fun_app$m (comp$e ?v3 )?v2 )))):named a160 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )?v2 )(= (fun_app$m (comp$e ?v0 )(fun_app$i (comp$a ?v1 )?v3 ))(fun_app$i (comp$a ?v2 )?v3 )))):named a161 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$j (comp$b ?v0 )?v1 )?v2 )(= (fun_app$m (comp$e ?v0 )(fun_app$m (comp$e ?v1 )?v3 ))(fun_app$m (comp$e ?v2 )?v3 )))):named a162 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$j (comp$b ?v0 )?v1 )?v2 )(= (fun_app$j (comp$b ?v0 )(fun_app$j (comp$b ?v1 )?v3 ))(fun_app$j (comp$b ?v2 )?v3 )))):named a163 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$k (comp$c ?v0 )?v1 )?v2 )(= (fun_app$p (comp$f ?v0 )(fun_app$m (comp$e ?v1 )?v3 ))(fun_app$p (comp$f ?v2 )?v3 )))):named a164 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$k (comp$c ?v0 )?v1 )?v2 )(= (fun_app$k (comp$c ?v0 )(fun_app$j (comp$b ?v1 )?v3 ))(fun_app$k (comp$c ?v2 )?v3 )))):named a165 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )?v2 )(= (fun_app$j (comp$b ?v0 )(fun_app$h (comp$ ?v1 )?v3 ))(fun_app$h (comp$ ?v2 )?v3 )))):named a166 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$i (comp$a ?v0 )?v1 )?v2 )(= (fun_app$h (comp$ ?v0 )(fun_app$l (comp$d ?v1 )?v3 ))(fun_app$h (comp$ ?v2 )?v3 )))):named a167 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$h (comp$ ?v0 )?v1 )?v2 )(= (fun_app$h (comp$ ?v0 )(fun_app$k (comp$c ?v1 )?v3 ))(fun_app$j (comp$b ?v2 )?v3 )))):named a168 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$a (fun_app$u (inItr$ ?v0 )?v1 )?v2 )(exists ((?v3 Dtree$ ))(and (fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v3 )?v1 )(= (fun_app$c root$ ?v3 )?v2 ))))):named a169 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (fun_app$c root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$c root$ ?v3 )?v4 )(and (member$ (inr$ ?v3 )(cont$ ?v5 ))(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v4 )?v5 )?v6 )))))))))):named a170 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (fun_app$c root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$c root$ ?v3 )?v4 )(and (member$ (inr$ ?v3 )(cont$ ?v5 ))(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v4 )?v5 )?v6 ))))))false ))))false )):named a171 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (fun_app$c root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v1 )?v3 )?v2 )))(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v1 )?v3 )?v0 ))):named a172 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 N_set$ )(?v3 T$ ))(=> (and (member$ (inr$ ?v0 )(cont$ ?v1 ))(fun_app$r (fun_app$s (fun_app$t inFr2$ ?v2 )?v0 )?v3 ))(fun_app$r (fun_app$s (fun_app$t inFr2$ (insert$ (fun_app$c root$ ?v1 )?v2 ))?v1 )?v3 ))):named a173 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$r (fun_app$s (fun_app$t inFr$ ?v0 )?v1 )?v2 )(member$ (inr$ ?v1 )(cont$ ?v3 )))(fun_app$r (fun_app$s (fun_app$t inFr$ (insert$ (fun_app$c root$ ?v3 )?v0 ))?v3 )?v2 ))):named a174 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(= (fun_app$r (fun_app$s (fun_app$t inFr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$a (fun_app$c root$ ?v3 )?v4 )(member$ (inl$ ?v5 )(cont$ ?v3 )))))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$c root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$r (fun_app$s (fun_app$t inFr$ ?v4 )?v5 )?v6 )))))))))):named a175 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (and (fun_app$r (fun_app$s (fun_app$t inFr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$a (fun_app$c root$ ?v3 )?v4 )(member$ (inl$ ?v5 )(cont$ ?v3 ))))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 T$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$c root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$r (fun_app$s (fun_app$t inFr$ ?v4 )?v5 )?v6 ))))))false ))))false )):named a176 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree_dtree_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f subtr$ top$ )?v0 )?v1 )(and (forall ((?v3 Dtree$ ))(fun_app$d (fun_app$e ?v2 ?v3 )?v3 ))(forall ((?v3 Dtree$ )(?v4 Dtree$ )(?v5 Dtree$ ))(=> (and (member$ (inr$ ?v3 )(cont$ ?v4 ))(and (fun_app$d (fun_app$e (fun_app$f subtr$ top$ )?v4 )?v5 )(fun_app$d (fun_app$e ?v2 ?v4 )?v5 )))(fun_app$d (fun_app$e ?v2 ?v3 )?v5 )))))(fun_app$d (fun_app$e ?v2 ?v0 )?v1 ))):named a177 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= ?v0 ?v1 ))(not (= (inr$ ?v0 )(inr$ ?v1 ))))):named a178 ))
(check-sat )
;(get-unsat-core )
