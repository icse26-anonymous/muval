;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun k$ (Dtree$ )A_set$ )
(declare-fun x$ ()A$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun tr$a ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun deftr$ (N$ )Dtree$ )
(declare-fun inFr2$ (N_set$ Dtree$ T$ )Bool )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun hsubst$ (Dtree$ Dtree$ )Dtree$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun subtr2$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun member$b (N$ N_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ )N_dtree_fun$ )
(declare-fun hsubst_r$ (Dtree$ )N$ )
(assert (! (not (member$ x$ (k$ (fun_app$ (subtrOf$ tr$ )(root$ tr$a ))))):named a0 ))
(assert (! (wf$ tr$ ):named a1 ))
(assert (! (member$ x$ (k$ tr$a )):named a2 ))
(assert (! (member$a (inr$ tr$a )(cont$ tr$ )):named a3 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst_r$ ?v0 )(root$ ?v0 )):pattern ((hsubst_r$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (deftr$ ?v0 ))?v0 )):named a5 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (root$ (hsubst$ ?v0 ?v1 ))(root$ ?v1 ))):named a6 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(=> (reg$ ?v0 ?v1 )(= (fun_app$ ?v0 (root$ ?v1 ))?v1 ))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr2$ ?v0 ?v1 ?v2 )(member$b (root$ ?v1 )?v0 ))):named a8 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (inItr$ ?v0 ?v1 ?v2 )(member$b (root$ ?v1 )?v0 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (root$ ?v0 )?v1 )(inItr$ ?v1 ?v0 (root$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr2$ ?v0 ?v1 ?v2 )(member$b (root$ ?v2 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr2$ ?v0 ?v1 ?v2 )(member$b (root$ ?v1 )?v0 ))):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (root$ ?v0 )?v1 )(subtr2$ ?v1 ?v0 ?v0 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (root$ ?v0 )(root$ ?v1 ))(= (hsubst$ ?v1 ?v0 )(hsubst$ ?v1 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$a (inr$ ?v1 )(cont$ ?v0 ))(member$a (inr$ ?v2 )(cont$ ?v0 ))))(= (= (root$ ?v1 )(root$ ?v2 ))(= ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$a (inr$ ?v1 )(cont$ ?v0 )))(= (fun_app$ (subtrOf$ ?v0 )(root$ ?v1 ))?v1 ))):named a16 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(= (inItr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (root$ ?v3 ))(member$b (root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (root$ ?v3 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v3 ))(inItr$ ?v4 ?v5 ?v6 )))))))))):named a17 ))
(check-sat )
;(get-unsat-core )
