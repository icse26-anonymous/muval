;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-datatypes ()((N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun nl$ ()N_list$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun last$ (N_list$ )N$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun subtr$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun subtr2$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun fun_app$ (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun distinct$ (N_list$ )Bool )
(declare-fun fun_app$a (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$b (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(declare-fun fun_app$c (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$d (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$e (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(declare-fun dropWhile$ (N_bool_fun$ N_list$ )N_list$ )
(assert (! (not (fun_app$ (fun_app$a (fun_app$b subtr$ (set$ nl$ ))(fun_app$c f$ (last$ nl$ )))(fun_app$c f$ (hd$ nl$ )))):named a0 ))
(assert (! (reg$ f$ tr$ ):named a1 ))
(assert (! (path$ f$ nl$ ):named a2 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v2 )?v3 ))(fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v1 )?v3 ))):named a3 ))
(assert (! (less_eq$ (set$ nl$ )ns$ ):named a4 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (fun_app$c f$ ?v0 ))?v0 )):named a5 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (regular$ ?v0 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v1 )?v2 )?v0 ))(regular$ ?v2 ))):named a6 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(=> (and (forall ((?v2 N$ ))(= (root$ (fun_app$c ?v0 ?v2 ))?v2 ))(path$ ?v0 ?v1 ))(fun_app$ (fun_app$a (fun_app$b subtr$ (set$ ?v1 ))(fun_app$c ?v0 (last$ ?v1 )))(fun_app$c ?v0 (hd$ ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ )(?v2 N_set$ )(?v3 Dtree$ ))(=> (and (reg$ ?v0 ?v1 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v2 )?v3 )?v1 ))(exists ((?v4 N_list$ ))(and (path$ ?v0 ?v4 )(and (= (fun_app$c ?v0 (hd$ ?v4 ))?v1 )(and (= (fun_app$c ?v0 (last$ ?v4 ))?v3 )(less_eq$ (set$ ?v4 )?v2 ))))))):named a8 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (fun_app$d (fun_app$e (inItr$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v1 )?v3 ))(fun_app$d (fun_app$e (inItr$ ?v0 )?v3 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ )(?v2 N_set$ )(?v3 Dtree$ ))(=> (and (reg$ ?v0 ?v1 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v2 )?v3 )?v1 ))(reg$ ?v0 ?v3 ))):named a10 ))
(assert (! (= subtr$ subtr2$ ):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v0 )?v1 )?v3 ))(inFr$ ?v0 ?v3 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(fun_app$ (fun_app$a (fun_app$b subtr$ ?v1 )?v2 )?v0 ))(wf$ ?v2 ))):named a13 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N_bool_fun$ ))(=> (and (member$ ?v0 (set$ ?v1 ))(not (fun_app$d ?v2 ?v0 )))(= (last$ (dropWhile$ ?v2 ?v1 ))(last$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(=> (path$ ?v0 ?v1 )(exists ((?v2 N_list$ ))(and (path$ ?v0 ?v2 )(and (= (hd$ ?v2 )(hd$ ?v1 ))(and (= (last$ ?v2 )(last$ ?v1 ))(and (less_eq$ (set$ ?v2 )(set$ ?v1 ))(distinct$ ?v2 )))))))):named a15 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_list$ ))(= (dropWhile$ ?v0 (dropWhile$ ?v0 ?v1 ))(dropWhile$ ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(and (reg$ ?v1 ?v0 )(forall ((?v2 N$ ))(= (root$ (fun_app$c ?v1 ?v2 ))?v2 )))))):named a17 ))
(check-sat )
;(get-unsat-core )
