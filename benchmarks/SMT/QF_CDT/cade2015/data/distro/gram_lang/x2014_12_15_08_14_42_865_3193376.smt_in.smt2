;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-datatypes ()((N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun n1$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun nl1$ ()N_list$ )
(declare-fun nl2$ ()N_list$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun distinct$ (N_list$ )Bool )
(assert (! (not (= (last$ (cons$ n1$ nl2$ ))(last$ (cons$ n$ (cons$ n1$ nl2$ ))))):named a0 ))
(assert (! (= nl1$ (cons$ n1$ nl2$ )):named a1 ))
(assert (! (= nl$ (cons$ n$ nl1$ )):named a2 ))
(assert (! (=> (forall ((?v0 N$ )(?v1 N_list$ ))(=> (= nl$ (cons$ ?v0 ?v1 ))false ))false ):named a3 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ )(?v3 N_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (regular$ tr$ ):named a5 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a6 ))
(assert (! (not (member$ n$ (set$ nl1$ ))):named a7 ))
(assert (! (= (fun_app$ f$ n$ )tr$ ):named a8 ))
(assert (! (= (fun_app$ f$ (last$ nl$ ))tr1$ ):named a9 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (= (last$ (cons$ ?v0 ?v1 ))(ite (= ?v1 nil$ )?v0 (last$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N$ ))(! (=> (= ?v0 nil$ )(= (last$ (cons$ ?v1 ?v0 ))?v1 )):pattern ((cons$ ?v1 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N$ ))(! (=> (not (= ?v0 nil$ ))(= (last$ (cons$ ?v1 ?v0 ))(last$ ?v0 ))):pattern ((cons$ ?v1 ?v0 )))):named a12 ))
(assert (! (reg$ f$ tr$ ):named a13 ))
(assert (! (path$ f$ nl$ ):named a14 ))
(assert (! (= (fun_app$ f$ (hd$ nl$ ))tr$ ):named a15 ))
(assert (! (distinct$ nl$ ):named a16 ))
(check-sat )
;(get-unsat-core )
