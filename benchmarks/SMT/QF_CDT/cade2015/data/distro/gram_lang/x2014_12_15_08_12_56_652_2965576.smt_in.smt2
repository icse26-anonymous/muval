;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ 0 )
(declare-datatypes ()((N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ (N_set$ )N_bool_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun comp$ (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun inFr$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun deftr$ ()N_dtree_fun$ )
(declare-fun inFr2$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun subtr$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun subtr2$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun unfold$ (Dtree_N_fun$ )Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ )
(declare-fun collect$ (N_bool_fun$ )N_set$ )
(declare-fun fun_app$ (N_bool_fun$ N$ )Bool )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun fun_app$a (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$b (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$c (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$d (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$e (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun fun_app$f (N_set_dtree_T_bool_fun_fun_fun$ N_set$ )Dtree_T_bool_fun_fun$ )
(declare-fun fun_app$g (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(declare-fun fun_app$h (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$i (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$j (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(declare-fun fun_app$k (Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$l (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (= (fun_app$a root$ (fun_app$b f$ n$ ))n$ )):named a1 ))
(assert (! (path$ f$ nl$ ):named a2 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$a root$ (fun_app$b f$ ?v0 ))?v0 )):named a3 ))
(assert (! (reg$ f$ tr$ ):named a4 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$a hsubst_r$ ?v0 )(fun_app$a root$ ?v0 )):pattern ((fun_app$a hsubst_r$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$a root$ (fun_app$b deftr$ ?v0 ))?v0 )):named a6 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$a root$ (fun_app$c (hsubst$ ?v0 )?v1 ))(fun_app$a root$ ?v1 ))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$d (fun_app$e (fun_app$f inFr2$ ?v0 )?v1 )?v2 )(member$ (fun_app$a root$ ?v1 )?v0 ))):named a8 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$ (fun_app$g (inItr$ ?v0 )?v1 )?v2 )(member$ (fun_app$a root$ ?v1 )?v0 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (fun_app$a root$ ?v0 )?v1 )(fun_app$ (fun_app$g (inItr$ ?v1 )?v0 )(fun_app$a root$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(=> (reg$ ?v0 ?v1 )(= (fun_app$b ?v0 (fun_app$a root$ ?v1 ))?v1 ))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$h (fun_app$i (fun_app$j subtr2$ ?v0 )?v1 )?v2 )(member$ (fun_app$a root$ ?v2 )?v0 ))):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$h (fun_app$i (fun_app$j subtr2$ ?v0 )?v1 )?v2 )(member$ (fun_app$a root$ ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (fun_app$a root$ ?v0 )?v1 )(fun_app$h (fun_app$i (fun_app$j subtr2$ ?v1 )?v0 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$a root$ ?v0 )(fun_app$a root$ ?v1 ))(= (fun_app$c (hsubst$ ?v1 )?v0 )(fun_app$c (hsubst$ ?v1 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$d (fun_app$e (fun_app$f inFr$ ?v0 )?v1 )?v2 )(member$ (fun_app$a root$ ?v1 )?v0 ))):named a16 ))
(assert (! (= inFr$ inFr2$ ):named a17 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$h (fun_app$i (fun_app$j subtr2$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$i (fun_app$j subtr2$ ?v0 )?v2 )?v3 ))(fun_app$h (fun_app$i (fun_app$j subtr2$ ?v0 )?v1 )?v3 ))):named a18 ))
(assert (! (forall ((?v0 N$ ))(reg$ deftr$ (fun_app$b deftr$ ?v0 ))):named a19 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f inFr$ ?v0 )?v1 )?v2 )(not (member$ (fun_app$a root$ ?v3 )?v0 )))(fun_app$d (fun_app$e (fun_app$f inFr$ ?v0 )(fun_app$c (hsubst$ ?v3 )?v1 ))?v2 ))):named a20 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$ (fun_app$a root$ ?v0 )?v1 ))(not (fun_app$d (fun_app$e (fun_app$f inFr$ ?v1 )?v0 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(and (reg$ ?v1 ?v0 )(forall ((?v2 N$ ))(= (fun_app$a root$ (fun_app$b ?v1 ?v2 ))?v2 )))))):named a22 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst$ ?v0 )(fun_app$k (unfold$ hsubst_r$ )(hsubst_c$ ?v0 ))):pattern ((hsubst$ ?v0 )))):named a23 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(reg$ ?v1 ?v0 )))):named a24 ))
(assert (! (less_eq$ (set$ nl$ )ns$ ):named a25 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$h (fun_app$i (fun_app$j subtr$ ?v0 )?v1 )(fun_app$b deftr$ ?v2 ))(= ?v1 (fun_app$b deftr$ (fun_app$a root$ ?v1 ))))):named a26 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(= (reg$ ?v0 ?v1 )(forall ((?v2 N_set$ )(?v3 Dtree$ ))(=> (fun_app$h (fun_app$i (fun_app$j subtr$ ?v2 )?v3 )?v1 )(= ?v3 (fun_app$b ?v0 (fun_app$a root$ ?v3 ))))))):named a27 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$ (fun_app$g (inItr$ ?v0 )?v1 )?v2 )(exists ((?v3 Dtree$ ))(and (fun_app$h (fun_app$i (fun_app$j subtr$ ?v0 )?v3 )?v1 )(= (fun_app$a root$ ?v3 )?v2 ))))):named a28 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$l (comp$ root$ )(hsubst$ ?v0 ))root$ )):named a29 ))
(assert (! (forall ((?v0 N$ ))(wf$ (fun_app$b deftr$ ?v0 ))):named a30 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(wf$ ?v1 ))(wf$ (fun_app$c (hsubst$ ?v0 )?v1 )))):named a31 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (regular$ ?v0 )(fun_app$h (fun_app$i (fun_app$j subtr$ ?v1 )?v2 )?v0 ))(regular$ ?v2 ))):named a32 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(fun_app$h (fun_app$i (fun_app$j subtr$ ?v1 )?v2 )?v0 ))(wf$ ?v2 ))):named a33 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set$ ))(=> (and (fun_app$h (fun_app$i (fun_app$j subtr$ ?v0 )?v1 )?v2 )(less_eq$ ?v0 ?v3 ))(fun_app$h (fun_app$i (fun_app$j subtr$ ?v3 )?v1 )?v2 ))):named a34 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$h (fun_app$i (fun_app$j subtr$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$i (fun_app$j subtr$ ?v0 )?v2 )?v3 ))(fun_app$h (fun_app$i (fun_app$j subtr$ ?v0 )?v1 )?v3 ))):named a35 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$h (fun_app$i (fun_app$j subtr$ ?v0 )?v1 )?v2 )(member$ (fun_app$a root$ ?v2 )?v0 ))):named a36 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$h (fun_app$i (fun_app$j subtr$ ?v0 )?v1 )?v2 )(member$ (fun_app$a root$ ?v1 )?v0 ))):named a37 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (fun_app$a root$ ?v0 )?v1 )(fun_app$h (fun_app$i (fun_app$j subtr$ ?v1 )?v0 )?v0 ))):named a38 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 N_set$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f inFr$ ?v0 )?v1 )?v2 )(less_eq$ ?v0 ?v3 ))(fun_app$d (fun_app$e (fun_app$f inFr$ ?v3 )?v1 )?v2 ))):named a39 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set$ ))(=> (and (fun_app$h (fun_app$i (fun_app$j subtr2$ ?v0 )?v1 )?v2 )(less_eq$ ?v0 ?v3 ))(fun_app$h (fun_app$i (fun_app$j subtr2$ ?v3 )?v1 )?v2 ))):named a40 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (fun_app$ (fun_app$g (inItr$ ?v0 )?v1 )?v2 )(less_eq$ ?v0 ?v3 ))(fun_app$ (fun_app$g (inItr$ ?v3 )?v1 )?v2 ))):named a41 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 N_set$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f inFr2$ ?v0 )?v1 )?v2 )(less_eq$ ?v0 ?v3 ))(fun_app$d (fun_app$e (fun_app$f inFr2$ ?v3 )?v1 )?v2 ))):named a42 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f inFr$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$i (fun_app$j subtr$ ?v0 )?v1 )?v3 ))(fun_app$d (fun_app$e (fun_app$f inFr$ ?v0 )?v3 )?v2 ))):named a43 ))
(assert (! (= subtr$ subtr2$ ):named a44 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (fun_app$ (fun_app$g (inItr$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$i (fun_app$j subtr$ ?v0 )?v1 )?v3 ))(fun_app$ (fun_app$g (inItr$ ?v0 )?v3 )?v2 ))):named a45 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ )(?v2 N_set$ )(?v3 Dtree$ ))(=> (and (reg$ ?v0 ?v1 )(fun_app$h (fun_app$i (fun_app$j subtr$ ?v2 )?v3 )?v1 ))(reg$ ?v0 ?v3 ))):named a46 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_bool_fun$ ))(=> (forall ((?v2 N$ ))(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a47 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$ (uu$ ?v0 ))?v0 )):named a48 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$ ?v1 ?v0 ))):named a49 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_T_dtree_sum_set_fun$ )(?v2 Dtree$ ))(= (fun_app$a root$ (fun_app$c (fun_app$k (unfold$ ?v0 )?v1 )?v2 ))(fun_app$a ?v0 ?v2 ))):named a50 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$a (fun_app$l (comp$ ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$l (comp$ ?v0 )?v1 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a52 ))
(check-sat )
;(get-unsat-core )
