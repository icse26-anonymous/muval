;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_set_N_prod_set$ 0 )
(declare-sort N_set_N_prod_bool_fun$ 0 )
(declare-sort N_set_N_prod_N_set_N_prod_bool_fun_fun$ 0 )
(declare-datatypes ()((N_set_N_prod$ (pair$ (fst$ N_set$ )(snd$ N$ )))))
(declare-fun wfP$ (N_set_N_prod_N_set_N_prod_bool_fun_fun$ )Bool )
(declare-fun accp$ (N_set_N_prod_N_set_N_prod_bool_fun_fun$ )N_set_N_prod_bool_fun$ )
(declare-fun lL_rel$ ()N_set_N_prod_N_set_N_prod_bool_fun_fun$ )
(declare-fun member$ (N_set_N_prod$ N_set_N_prod_set$ )Bool )
(declare-fun fun_app$ (N_set_N_prod_bool_fun$ N_set_N_prod$ )Bool )
(declare-fun fun_app$a (N_set_N_prod_N_set_N_prod_bool_fun_fun$ N_set_N_prod$ )N_set_N_prod_bool_fun$ )
(declare-fun rtranclp$ (N_set_N_prod_N_set_N_prod_bool_fun_fun$ )N_set_N_prod_N_set_N_prod_bool_fun_fun$ )
(assert (! (not (forall ((?v0 N_set_N_prod$ ))(fun_app$ (accp$ lL_rel$ )?v0 ))):named a0 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod$ ))(= (fun_app$ (accp$ ?v0 )?v1 )(exists ((?v2 N_set_N_prod$ ))(and (= ?v1 ?v2 )(forall ((?v3 N_set_N_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v2 )(fun_app$ (accp$ ?v0 )?v3 ))))))):named a1 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod$ ))(=> (forall ((?v2 N_set_N_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v2 )?v1 )(fun_app$ (accp$ ?v0 )?v2 )))(fun_app$ (accp$ ?v0 )?v1 ))):named a2 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod$ )(?v2 N_set_N_prod_bool_fun$ ))(=> (and (fun_app$ (accp$ ?v0 )?v1 )(forall ((?v3 N_set_N_prod$ ))(=> (and (fun_app$ (accp$ ?v0 )?v3 )(forall ((?v4 N_set_N_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v2 ?v4 ))))(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod$ )(?v2 N_set_N_prod_bool_fun$ ))(=> (and (fun_app$ (accp$ ?v0 )?v1 )(forall ((?v3 N_set_N_prod$ ))(=> (and (fun_app$ (accp$ ?v0 )?v3 )(forall ((?v4 N_set_N_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v2 ?v4 ))))(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod$ ))(=> (and (fun_app$ (accp$ ?v0 )?v1 )(forall ((?v2 N_set_N_prod$ ))(=> (and (= ?v1 ?v2 )(forall ((?v3 N_set_N_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v2 )(fun_app$ (accp$ ?v0 )?v3 ))))false )))false )):named a5 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod$ )(?v2 N_set_N_prod$ ))(=> (and (fun_app$ (accp$ ?v0 )?v1 )(fun_app$ (fun_app$a ?v0 ?v2 )?v1 ))(fun_app$ (accp$ ?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod$ ))(=> (and (not (fun_app$ (accp$ ?v0 )?v1 ))(forall ((?v2 N_set_N_prod$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v2 )?v1 )(not (fun_app$ (accp$ ?v0 )?v2 )))false )))false )):named a7 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ ))(! (= (wfP$ ?v0 )(forall ((?v1 N_set_N_prod$ ))(fun_app$ (accp$ ?v0 )?v1 ))):pattern ((wfP$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ ))(=> (forall ((?v1 N_set_N_prod$ ))(fun_app$ (accp$ ?v0 )?v1 ))(wfP$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod$ ))(=> (wfP$ ?v0 )(fun_app$ (accp$ ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod$ )(?v2 N_set_N_prod$ ))(=> (and (fun_app$ (fun_app$a (rtranclp$ ?v0 )?v1 )?v2 )(fun_app$ (accp$ ?v0 )?v2 ))(fun_app$ (accp$ ?v0 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod$ )(?v2 N_set_N_prod$ ))(=> (and (fun_app$ (accp$ ?v0 )?v1 )(fun_app$ (fun_app$a (rtranclp$ ?v0 )?v2 )?v1 ))(fun_app$ (accp$ ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ ))(= (wfP$ ?v0 )(forall ((?v1 N_set_N_prod_set$ )(?v2 N_set_N_prod$ ))(=> (member$ ?v2 ?v1 )(exists ((?v3 N_set_N_prod$ ))(and (member$ ?v3 ?v1 )(forall ((?v4 N_set_N_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(not (member$ ?v4 ?v1 )))))))))):named a13 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ ))(=> (forall ((?v1 N_set_N_prod_bool_fun$ )(?v2 N_set_N_prod$ ))(=> (forall ((?v3 N_set_N_prod$ ))(=> (forall ((?v4 N_set_N_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v1 ?v4 )))(fun_app$ ?v1 ?v3 )))(fun_app$ ?v1 ?v2 )))(wfP$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod_bool_fun$ )(?v2 N_set_N_prod$ ))(=> (and (wfP$ ?v0 )(forall ((?v3 N_set_N_prod$ ))(=> (forall ((?v4 N_set_N_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v1 ?v4 )))(fun_app$ ?v1 ?v3 ))))(fun_app$ ?v1 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ )(?v1 N_set_N_prod_bool_fun$ )(?v2 N_set_N_prod$ ))(=> (and (wfP$ ?v0 )(forall ((?v3 N_set_N_prod$ ))(=> (forall ((?v4 N_set_N_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v1 ?v4 )))(fun_app$ ?v1 ?v3 ))))(fun_app$ ?v1 ?v2 ))):named a16 ))
(assert (! (forall ((?v0 N_set_N_prod_N_set_N_prod_bool_fun_fun$ ))(= (rtranclp$ (rtranclp$ ?v0 ))(rtranclp$ ?v0 ))):named a17 ))
(check-sat )
;(get-unsat-core )
