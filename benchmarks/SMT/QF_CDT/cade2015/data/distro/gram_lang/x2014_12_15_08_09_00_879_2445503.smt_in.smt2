;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort N_T_N_sum_fun$ 0 )
(declare-sort T_N_sum_N_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort T_N_sum_bool_fun$ 0 )
(declare-sort Dtree_T_N_sum_fun$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_N_sum_dtree_fun$ 0 )
(declare-sort T_T_N_sum_sum_set$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_fun$ 0 )
(declare-sort T_T_dtree_sum_sum_set$ 0 )
(declare-sort T_dtree_sum_dtree_fun$ 0 )
(declare-sort N_T_N_sum_set_prod_set$ 0 )
(declare-sort Dtree_set_dtree_set_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_prod_N_fun$ 0 )
(declare-sort T_N_sum_T_T_N_sum_sum_fun$ 0 )
(declare-sort N_T_N_sum_set_prod_bool_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_T_dtree_sum_sum_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-datatypes ()((N_T_N_sum_set_prod$ (pair$ (fst$ N$ )(snd$ T_N_sum_set$ )))(T_N_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ N$ )))(T_dtree_sum$ (inl$a (projl$a T$ ))(inr$a (projr$a Dtree$ )))(T_T_N_sum_sum$ (inl$b (projl$b T$ ))(inr$b (projr$b T_N_sum$ )))(T_T_dtree_sum_sum$ (inl$c (projl$c T$ ))(inr$c (projr$c T_dtree_sum$ )))))
(declare-fun p$ ()N_T_N_sum_set_prod_set$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ ()Dtree_T_dtree_sum_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun id$a ()T_set_T_set_fun$ )
(declare-fun id$b ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun id$c ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$d ()Dtree_dtree_fun$ )
(declare-fun id$e ()Dtree_set_dtree_set_fun$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun uua$ ()T_N_sum_T_T_N_sum_sum_fun$ )
(declare-fun uub$ ()T_dtree_sum_T_T_dtree_sum_sum_fun$ )
(declare-fun uuc$ ()N_T_N_sum_fun$ )
(declare-fun uud$ (N_T_N_sum_set_prod_set$ )N_T_N_sum_set_prod_bool_fun$ )
(declare-fun uue$ (Dtree_set$ )Dtree_bool_fun$ )
(declare-fun uuf$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun uug$ (T_N_sum_set$ )T_N_sum_bool_fun$ )
(declare-fun uuh$ (N_set$ )N_bool_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun subtr$ (N_set$ )Dtree_dtree_bool_fun_fun$ )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun image$a (T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ T_T_dtree_sum_sum_set$ )T_T_N_sum_sum_set$ )
(declare-fun image$b (T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ T_T_dtree_sum_sum_set$ )T_T_dtree_sum_sum_set$ )
(declare-fun image$c (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun image$d (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$e (N_dtree_fun$ N_set$ )Dtree_set$ )
(declare-fun image$f (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun image$g (N_N_fun$ N_set$ )N_set$ )
(declare-fun image$h (Dtree_N_fun$ Dtree_set$ )N_set$ )
(declare-fun image$i (Dtree_dtree_fun$ )Dtree_set_dtree_set_fun$ )
(declare-fun image$j (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$k (Dtree_T_dtree_sum_fun$ Dtree_set$ )T_dtree_sum_set$ )
(declare-fun image$l (Dtree_T_N_sum_fun$ Dtree_set$ )T_N_sum_set$ )
(declare-fun image$m (T_dtree_sum_dtree_fun$ T_dtree_sum_set$ )Dtree_set$ )
(declare-fun image$n (T_dtree_sum_N_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun image$o (T_N_sum_dtree_fun$ T_N_sum_set$ )Dtree_set$ )
(declare-fun image$p (T_N_sum_N_fun$ T_N_sum_set$ )N_set$ )
(declare-fun image$q (N_T_dtree_sum_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun image$r (N_T_N_sum_fun$ N_set$ )T_N_sum_set$ )
(declare-fun inj_on$ (Dtree_N_fun$ Dtree_set$ )Bool )
(declare-fun member$ (N_T_N_sum_set_prod$ N_T_N_sum_set_prod_set$ )Bool )
(declare-fun vimage$ (Dtree_T_dtree_sum_fun$ T_dtree_sum_set$ )Dtree_set$ )
(declare-fun collect$ (N_T_N_sum_set_prod_bool_fun$ )N_T_N_sum_set_prod_set$ )
(declare-fun fun_app$ (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_dtree_sum$ )T_T_dtree_sum_sum$ )
(declare-fun map_sum$ (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun member$b (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun member$c (Dtree$ Dtree_set$ )Bool )
(declare-fun member$d (N$ N_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ )N_dtree_fun$ )
(declare-fun vimage$a (T_N_sum_T_T_N_sum_sum_fun$ T_T_N_sum_sum_set$ )T_N_sum_set$ )
(declare-fun vimage$b (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_T_dtree_sum_sum_set$ )T_dtree_sum_set$ )
(declare-fun vimage$c (N_T_N_sum_fun$ T_N_sum_set$ )N_set$ )
(declare-fun vimage$d (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun vimage$e (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun vimage$f (Dtree_N_fun$ N_set$ )Dtree_set$ )
(declare-fun vimage$g (N_dtree_fun$ Dtree_set$ )N_set$ )
(declare-fun vimage$h (N_N_fun$ N_set$ )N_set$ )
(declare-fun vimage$i (Dtree_T_N_sum_fun$ T_N_sum_set$ )Dtree_set$ )
(declare-fun vimage$j (T_dtree_sum_dtree_fun$ Dtree_set$ )T_dtree_sum_set$ )
(declare-fun vimage$k (T_dtree_sum_N_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun vimage$l (T_N_sum_dtree_fun$ Dtree_set$ )T_N_sum_set$ )
(declare-fun vimage$m (T_N_sum_N_fun$ N_set$ )T_N_sum_set$ )
(declare-fun vimage$n (N_T_dtree_sum_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun vimage$o (N_T_N_sum_set_prod_N_fun$ N_set$ )N_T_N_sum_set_prod_set$ )
(declare-fun collect$a (Dtree_bool_fun$ )Dtree_set$ )
(declare-fun collect$b (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun collect$c (T_N_sum_bool_fun$ )T_N_sum_set$ )
(declare-fun collect$d (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (T_N_sum_T_T_N_sum_sum_fun$ T_N_sum$ )T_T_N_sum_sum$ )
(declare-fun fun_app$b (Dtree_T_dtree_sum_fun$ Dtree$ )T_dtree_sum$ )
(declare-fun fun_app$c (N_T_N_sum_fun$ N$ )T_N_sum$ )
(declare-fun fun_app$d (N_T_N_sum_set_prod_bool_fun$ N_T_N_sum_set_prod$ )Bool )
(declare-fun fun_app$e (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun fun_app$f (T_N_sum_bool_fun$ T_N_sum$ )Bool )
(declare-fun fun_app$g (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$h (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$i (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$j (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$k (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$l (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$m (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$n (Dtree_set_dtree_set_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun fun_app$o (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$p (N_N_fun$ N$ )N$ )
(declare-fun fun_app$q (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$r (Dtree_T_N_sum_fun$ Dtree$ )T_N_sum$ )
(declare-fun fun_app$s (T_dtree_sum_dtree_fun$ T_dtree_sum$ )Dtree$ )
(declare-fun fun_app$t (T_dtree_sum_N_fun$ T_dtree_sum$ )N$ )
(declare-fun fun_app$u (T_N_sum_dtree_fun$ T_N_sum$ )Dtree$ )
(declare-fun fun_app$v (T_N_sum_N_fun$ T_N_sum$ )N$ )
(declare-fun fun_app$w (N_T_dtree_sum_fun$ N$ )T_dtree_sum$ )
(declare-fun fun_app$x (T_T_fun$ T$ )T$ )
(declare-fun fun_app$y (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$z (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun hsubst_c$ (Dtree$ Dtree$ )T_dtree_sum_set$ )
(declare-fun map_sum$a (T_T_fun$ T_dtree_sum_T_N_sum_fun$ )T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ )
(declare-fun map_sum$b (T_T_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ )
(declare-fun map_sum$c (T_T_fun$ N_dtree_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun map_sum$d (T_T_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun map_sum$e (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun fun_app$aa (N_T_N_sum_set_prod_N_fun$ N_T_N_sum_set_prod$ )N$ )
(declare-fun fun_app$ab (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(assert (! (forall ((?v0 T_dtree_sum$ ))(! (= (fun_app$ uub$ ?v0 )(inr$c ?v0 )):pattern ((fun_app$ uub$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 T_N_sum$ ))(! (= (fun_app$a uua$ ?v0 )(inr$b ?v0 )):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$b uu$ ?v0 )(inr$a ?v0 )):pattern ((fun_app$b uu$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$c uuc$ ?v0 )(inr$ ?v0 )):pattern ((fun_app$c uuc$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$ )(?v1 N_T_N_sum_set_prod$ ))(! (= (fun_app$d (uud$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$d (uud$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$e (uuf$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$e (uuf$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum$ ))(! (= (fun_app$f (uug$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$f (uug$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 Dtree_set$ )(?v1 Dtree$ ))(! (= (fun_app$g (uue$ ?v0 )?v1 )(member$c ?v1 ?v0 )):pattern ((fun_app$g (uue$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$h (uuh$ ?v0 )?v1 )(member$d ?v1 ?v0 )):pattern ((fun_app$h (uuh$ ?v0 )?v1 )))):named a8 ))
(assert (! (not (and (member$ (pair$ (fun_app$i root$ (fun_app$j (hsubst$ tr0$ )tra$ ))(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ (fun_app$j (hsubst$ tr0$ )tra$ ))))p$ )(and (inj_on$ root$ (vimage$ uu$ (cont$ (fun_app$j (hsubst$ tr0$ )tra$ ))))(forall ((?v0 Dtree$ ))(=> (member$c ?v0 (vimage$ uu$ (cont$ (fun_app$j (hsubst$ tr0$ )tra$ ))))(exists ((?v1 Dtree$ ))(and (wf$ ?v1 )(= ?v0 (fun_app$j (hsubst$ tr0$ )?v1 ))))))))):named a9 ))
(assert (! (wf$ tr$ ):named a10 ))
(assert (! (wf$ tr0$ ):named a11 ))
(assert (! (wf$ tra$ ):named a12 ))
(assert (! (exists ((?v0 Dtree$ ))(and (wf$ ?v0 )(= tr1a$ (fun_app$j (hsubst$ tr0$ )?v0 )))):named a13 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (fun_app$i root$ ?v0 )(fun_app$i root$ tr0$ ))(= (fun_app$j (hsubst$ tr0$ )?v0 )(fun_app$j (hsubst$ tr0$ )tr0$ )))):named a14 ))
(assert (! (= tr1a$ (fun_app$j (hsubst$ tr0$ )tra$ )):named a15 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$i root$ (fun_app$j (hsubst$ tr0$ )?v0 ))(fun_app$i root$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$a (inr$a ?v1 )(cont$ ?v0 ))(member$a (inr$a ?v2 )(cont$ ?v0 ))))(= (= (fun_app$i root$ ?v1 )(fun_app$i root$ ?v2 ))(= ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst_c$ tr0$ ?v0 )(ite (= (fun_app$i root$ ?v0 )(fun_app$i root$ tr0$ ))(cont$ tr0$ )(cont$ ?v0 ))):pattern ((hsubst_c$ tr0$ ?v0 )))):named a18 ))
(assert (! (=> (forall ((?v0 Dtree$ ))(=> (and (wf$ ?v0 )(= tr1a$ (fun_app$j (hsubst$ tr0$ )?v0 )))false ))false ):named a19 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$i root$ (fun_app$j (hsubst$ ?v0 )?v1 ))(fun_app$i root$ ?v1 ))):named a20 ))
(assert (! (forall ((?v0 Dtree$ ))(= (wf$ ?v0 )(exists ((?v1 Dtree$ ))(and (= ?v0 ?v1 )(and (member$ (pair$ (fun_app$i root$ ?v1 )(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ ?v1 )))p$ )(and (inj_on$ root$ (vimage$ uu$ (cont$ ?v1 )))(forall ((?v2 Dtree$ ))(=> (member$c ?v2 (vimage$ uu$ (cont$ ?v1 )))(wf$ ?v2 ))))))))):named a21 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$i root$ ?v0 )(fun_app$i root$ ?v1 ))(= (fun_app$j (hsubst$ ?v1 )?v0 )(fun_app$j (hsubst$ ?v1 )?v1 )))):named a22 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (and (member$ (pair$ (fun_app$i root$ ?v0 )(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ ?v0 )))p$ )(and (inj_on$ root$ (vimage$ uu$ (cont$ ?v0 )))(forall ((?v1 Dtree$ ))(=> (member$c ?v1 (vimage$ uu$ (cont$ ?v0 )))(wf$ ?v1 )))))(wf$ ?v0 ))):named a23 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (and (wf$ ?v0 )(forall ((?v1 Dtree$ ))(=> (and (= ?v0 ?v1 )(and (member$ (pair$ (fun_app$i root$ ?v1 )(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ ?v1 )))p$ )(and (inj_on$ root$ (vimage$ uu$ (cont$ ?v1 )))(forall ((?v2 Dtree$ ))(=> (member$c ?v2 (vimage$ uu$ (cont$ ?v1 )))(wf$ ?v2 ))))))false )))false )):named a24 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$a (inr$a ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a25 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (wf$ ?v0 )(inj_on$ root$ (vimage$ uu$ (cont$ ?v0 ))))):named a26 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (wf$ ?v0 )(member$ (pair$ (fun_app$i root$ ?v0 )(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ ?v0 )))p$ ))):named a27 ))
(assert (! (forall ((?v0 Dtree_bool_fun$ )(?v1 Dtree$ ))(=> (and (fun_app$g ?v0 ?v1 )(forall ((?v2 Dtree$ ))(=> (fun_app$g ?v0 ?v2 )(and (member$ (pair$ (fun_app$i root$ ?v2 )(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ ?v2 )))p$ )(and (inj_on$ root$ (vimage$ uu$ (cont$ ?v2 )))(forall ((?v3 Dtree$ ))(=> (member$c ?v3 (vimage$ uu$ (cont$ ?v2 )))(fun_app$g ?v0 ?v3 ))))))))(wf$ ?v1 ))):named a28 ))
(assert (! (forall ((?v0 Dtree_bool_fun$ )(?v1 Dtree$ ))(=> (and (fun_app$g ?v0 ?v1 )(forall ((?v2 Dtree$ ))(=> (fun_app$g ?v0 ?v2 )(exists ((?v3 Dtree$ ))(and (= ?v2 ?v3 )(and (member$ (pair$ (fun_app$i root$ ?v3 )(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ ?v3 )))p$ )(and (inj_on$ root$ (vimage$ uu$ (cont$ ?v3 )))(forall ((?v4 Dtree$ ))(=> (member$c ?v4 (vimage$ uu$ (cont$ ?v3 )))(or (fun_app$g ?v0 ?v4 )(wf$ ?v4 )))))))))))(wf$ ?v1 ))):named a29 ))
(assert (! (forall ((?v0 Dtree_bool_fun$ )(?v1 Dtree$ ))(=> (and (fun_app$g ?v0 ?v1 )(forall ((?v2 Dtree$ ))(=> (fun_app$g ?v0 ?v2 )(and (member$ (pair$ (fun_app$i root$ ?v2 )(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ ?v2 )))p$ )(and (inj_on$ root$ (vimage$ uu$ (cont$ ?v2 )))(forall ((?v3 Dtree$ ))(=> (member$c ?v3 (vimage$ uu$ (cont$ ?v2 )))(or (fun_app$g ?v0 ?v3 )(wf$ ?v3 )))))))))(wf$ ?v1 ))):named a30 ))
(assert (! (forall ((?v0 N$ ))(exists ((?v1 T_N_sum_set$ ))(member$ (pair$ ?v0 ?v1 )p$ ))):named a31 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_T_dtree_sum_sum_set$ ))(= (vimage$a uua$ (image$a (map_sum$a id$ ?v0 )?v1 ))(image$ ?v0 (vimage$b uub$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_T_dtree_sum_sum_set$ ))(= (vimage$b uub$ (image$b (map_sum$b id$ ?v0 )?v1 ))(fun_app$l (image$c ?v0 )(vimage$b uub$ ?v1 )))):named a33 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 T_N_sum_set$ ))(= (vimage$ uu$ (image$d (map_sum$c id$ ?v0 )?v1 ))(image$e ?v0 (vimage$c uuc$ ?v1 )))):named a34 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 T_N_sum_set$ ))(= (vimage$c uuc$ (image$f (map_sum$d id$ ?v0 )?v1 ))(image$g ?v0 (vimage$c uuc$ ?v1 )))):named a35 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 T_dtree_sum_set$ ))(= (vimage$c uuc$ (image$ (fun_app$k (map_sum$ id$ )?v0 )?v1 ))(image$h ?v0 (vimage$ uu$ ?v1 )))):named a36 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 T_dtree_sum_set$ ))(= (vimage$ uu$ (fun_app$l (image$c (fun_app$m (map_sum$e id$ )?v0 ))?v1 ))(fun_app$n (image$i ?v0 )(vimage$ uu$ ?v1 )))):named a37 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum_set$ ))(= (member$a (inr$a ?v0 )(image$d (map_sum$c id$ ?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$b (inr$ ?v3 )?v2 )(= (fun_app$o ?v1 ?v3 )?v0 ))))):named a38 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 T_N_sum_set$ ))(= (member$b (inr$ ?v0 )(image$f (map_sum$d id$ ?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$b (inr$ ?v3 )?v2 )(= (fun_app$p ?v1 ?v3 )?v0 ))))):named a39 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b (inr$ ?v0 )(image$ (fun_app$k (map_sum$ id$ )?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$i ?v1 ?v3 )?v0 ))))):named a40 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a (inr$a ?v0 )(fun_app$l (image$c (fun_app$m (map_sum$e id$ )?v1 ))?v2 ))(exists ((?v3 Dtree$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$j ?v1 ?v3 )?v0 ))))):named a41 ))
(assert (! (= (vimage$d id$ )id$a ):named a42 ))
(assert (! (= (image$j id$ )id$a ):named a43 ))
(assert (! (= (image$c id$b )id$c ):named a44 ))
(assert (! (= (image$i id$d )id$e ):named a45 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum_set$ ))(=> (member$a (inr$a ?v0 )(image$d (map_sum$c id$ ?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$b (inr$ ?v3 )?v2 )(= (fun_app$o ?v1 ?v3 )?v0 ))))):named a46 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 T_N_sum_set$ ))(=> (member$b (inr$ ?v0 )(image$f (map_sum$d id$ ?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$b (inr$ ?v3 )?v2 )(= (fun_app$p ?v1 ?v3 )?v0 ))))):named a47 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$b (inr$ ?v0 )(image$ (fun_app$k (map_sum$ id$ )?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$i ?v1 ?v3 )?v0 ))))):named a48 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$a (inr$a ?v0 )(fun_app$l (image$c (fun_app$m (map_sum$e id$ )?v1 ))?v2 ))(exists ((?v3 Dtree$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$j ?v1 ?v3 )?v0 ))))):named a49 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$a (inr$a ?v1 )(cont$ ?v0 )))(= (fun_app$o (subtrOf$ ?v0 )(fun_app$i root$ ?v1 ))?v1 ))):named a50 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(fun_app$g (fun_app$q (subtr$ ?v1 )?v2 )?v0 ))(member$ (pair$ (fun_app$i root$ ?v2 )(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ ?v2 )))p$ ))):named a51 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$c ?v0 (vimage$e ?v1 ?v2 ))(member$c (fun_app$j ?v1 ?v0 )?v2 ))):named a52 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_N_fun$ )(?v2 N_set$ ))(= (member$c ?v0 (vimage$f ?v1 ?v2 ))(member$d (fun_app$i ?v1 ?v0 )?v2 ))):named a53 ))
(assert (! (forall ((?v0 N$ )(?v1 N_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$d ?v0 (vimage$g ?v1 ?v2 ))(member$c (fun_app$o ?v1 ?v0 )?v2 ))):named a54 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (member$d ?v0 (vimage$h ?v1 ?v2 ))(member$d (fun_app$p ?v1 ?v0 )?v2 ))):named a55 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$c ?v0 (vimage$i ?v1 ?v2 ))(member$b (fun_app$r ?v1 ?v0 )?v2 ))):named a56 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$a ?v0 (vimage$j ?v1 ?v2 ))(member$c (fun_app$s ?v1 ?v0 )?v2 ))):named a57 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_N_fun$ )(?v2 N_set$ ))(= (member$a ?v0 (vimage$k ?v1 ?v2 ))(member$d (fun_app$t ?v1 ?v0 )?v2 ))):named a58 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$b ?v0 (vimage$l ?v1 ?v2 ))(member$c (fun_app$u ?v1 ?v0 )?v2 ))):named a59 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_N_fun$ )(?v2 N_set$ ))(= (member$b ?v0 (vimage$m ?v1 ?v2 ))(member$d (fun_app$v ?v1 ?v0 )?v2 ))):named a60 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$d ?v0 (vimage$n ?v1 ?v2 ))(member$a (fun_app$w ?v1 ?v0 )?v2 ))):named a61 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$j ?v0 ?v1 )?v2 )(member$c ?v2 ?v3 ))(member$c ?v1 (vimage$e ?v0 ?v3 )))):named a62 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$o ?v0 ?v1 )?v2 )(member$c ?v2 ?v3 ))(member$d ?v1 (vimage$g ?v0 ?v3 )))):named a63 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$i ?v0 ?v1 )?v2 )(member$d ?v2 ?v3 ))(member$c ?v1 (vimage$f ?v0 ?v3 )))):named a64 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$p ?v0 ?v1 )?v2 )(member$d ?v2 ?v3 ))(member$d ?v1 (vimage$h ?v0 ?v3 )))):named a65 ))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$ )(?v1 T_dtree_sum$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$s ?v0 ?v1 )?v2 )(member$c ?v2 ?v3 ))(member$a ?v1 (vimage$j ?v0 ?v3 )))):named a66 ))
(assert (! (forall ((?v0 T_N_sum_dtree_fun$ )(?v1 T_N_sum$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$u ?v0 ?v1 )?v2 )(member$c ?v2 ?v3 ))(member$b ?v1 (vimage$l ?v0 ?v3 )))):named a67 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 N$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$w ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$d ?v1 (vimage$n ?v0 ?v3 )))):named a68 ))
(assert (! (forall ((?v0 Dtree_T_N_sum_fun$ )(?v1 Dtree$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= (fun_app$r ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$c ?v1 (vimage$i ?v0 ?v3 )))):named a69 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= (fun_app$c ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$d ?v1 (vimage$c ?v0 ?v3 )))):named a70 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 T_dtree_sum$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$t ?v0 ?v1 )?v2 )(member$d ?v2 ?v3 ))(member$a ?v1 (vimage$k ?v0 ?v3 )))):named a71 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a72 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a73 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a74 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a75 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$x id$ ?v0 )?v0 ):pattern ((fun_app$x id$ ?v0 )))):named a76 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= ?v0 (fun_app$j ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$c ?v0 (fun_app$n (image$i ?v1 )?v3 )))):named a77 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= ?v0 (fun_app$i ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$d ?v0 (image$h ?v1 ?v3 )))):named a78 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$o ?v1 ?v2 ))(member$d ?v2 ?v3 ))(member$c ?v0 (image$e ?v1 ?v3 )))):named a79 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$p ?v1 ?v2 ))(member$d ?v2 ?v3 ))(member$d ?v0 (image$g ?v1 ?v3 )))):named a80 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= ?v0 (fun_app$b ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$a ?v0 (image$k ?v1 ?v3 )))):named a81 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 Dtree_T_N_sum_fun$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= ?v0 (fun_app$r ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$b ?v0 (image$l ?v1 ?v3 )))):named a82 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T_dtree_sum_dtree_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$s ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$c ?v0 (image$m ?v1 ?v3 )))):named a83 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_N_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$t ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$d ?v0 (image$n ?v1 ?v3 )))):named a84 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T_N_sum_dtree_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$u ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$c ?v0 (image$o ?v1 ?v3 )))):named a85 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_N_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$v ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$d ?v0 (image$p ?v1 ?v3 )))):named a86 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (not (= (fun_app$i root$ ?v0 )(fun_app$i root$ tr0$ )))(= (cont$ (fun_app$j (hsubst$ tr0$ )?v0 ))(fun_app$l (image$c (fun_app$m (map_sum$e id$ )(hsubst$ tr0$ )))(cont$ ?v0 ))))):named a87 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (fun_app$i root$ ?v0 )(fun_app$i root$ tr0$ ))(= (cont$ (fun_app$j (hsubst$ tr0$ )?v0 ))(fun_app$l (image$c (fun_app$m (map_sum$e id$ )(hsubst$ tr0$ )))(cont$ tr0$ ))))):named a88 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (not (= (fun_app$i root$ ?v0 )(fun_app$i root$ tr0$ )))(= (vimage$ uu$ (cont$ (fun_app$j (hsubst$ tr0$ )?v0 )))(fun_app$n (image$i (hsubst$ tr0$ ))(vimage$ uu$ (cont$ ?v0 )))))):named a89 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (fun_app$i root$ ?v0 )(fun_app$i root$ tr0$ ))(= (vimage$ uu$ (cont$ (fun_app$j (hsubst$ tr0$ )?v0 )))(fun_app$n (image$i (hsubst$ tr0$ ))(vimage$ uu$ (cont$ tr0$ )))))):named a90 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$b (inr$ ?v0 )(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ ?v1 )))(= (fun_app$i root$ (fun_app$o (subtrOf$ ?v1 )?v0 ))?v0 ))):named a91 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$g (fun_app$q (subtr$ ?v0 )?v1 )?v2 )(fun_app$g (fun_app$q (subtr$ ?v0 )?v2 )?v3 ))(fun_app$g (fun_app$q (subtr$ ?v0 )?v1 )?v3 ))):named a92 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$d (fun_app$i root$ ?v0 )?v1 )(fun_app$g (fun_app$q (subtr$ ?v1 )?v0 )?v0 ))):named a93 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$g (fun_app$q (subtr$ ?v0 )?v1 )?v2 )(member$d (fun_app$i root$ ?v1 )?v0 ))):named a94 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$g (fun_app$q (subtr$ ?v0 )?v1 )?v2 )(member$d (fun_app$i root$ ?v2 )?v0 ))):named a95 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(fun_app$g (fun_app$q (subtr$ ?v1 )?v2 )?v0 ))(wf$ ?v2 ))):named a96 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$ ))(= (collect$ (uud$ ?v0 ))?v0 )):named a97 ))
(assert (! (forall ((?v0 Dtree_set$ ))(= (collect$a (uue$ ?v0 ))?v0 )):named a98 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$b (uuf$ ?v0 ))?v0 )):named a99 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(= (collect$c (uug$ ?v0 ))?v0 )):named a100 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$d (uuh$ ?v0 ))?v0 )):named a101 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$ )(?v1 N_T_N_sum_set_prod_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$d ?v1 ?v0 ))):named a102 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_bool_fun$ ))(= (member$c ?v0 (collect$a ?v1 ))(fun_app$g ?v1 ?v0 ))):named a103 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$a ?v0 (collect$b ?v1 ))(fun_app$e ?v1 ?v0 ))):named a104 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_bool_fun$ ))(= (member$b ?v0 (collect$c ?v1 ))(fun_app$f ?v1 ?v0 ))):named a105 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$d ?v0 (collect$d ?v1 ))(fun_app$h ?v1 ?v0 ))):named a106 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= (fun_app$i root$ ?v0 )(fun_app$i root$ ?v1 )))(= (cont$ (fun_app$j (hsubst$ ?v1 )?v0 ))(fun_app$l (image$c (fun_app$m (map_sum$e id$ )(hsubst$ ?v1 )))(cont$ ?v0 ))))):named a107 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$i root$ ?v0 )(fun_app$i root$ ?v1 ))(= (cont$ (fun_app$j (hsubst$ ?v1 )?v0 ))(fun_app$l (image$c (fun_app$m (map_sum$e id$ )(hsubst$ ?v1 )))(cont$ ?v1 ))))):named a108 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 Dtree_dtree_fun$ ))(=> (member$c ?v0 ?v1 )(member$c (fun_app$j ?v2 ?v0 )(fun_app$n (image$i ?v2 )?v1 )))):named a109 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 Dtree_N_fun$ ))(=> (member$c ?v0 ?v1 )(member$d (fun_app$i ?v2 ?v0 )(image$h ?v2 ?v1 )))):named a110 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_dtree_fun$ ))(=> (member$d ?v0 ?v1 )(member$c (fun_app$o ?v2 ?v0 )(image$e ?v2 ?v1 )))):named a111 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_N_fun$ ))(=> (member$d ?v0 ?v1 )(member$d (fun_app$p ?v2 ?v0 )(image$g ?v2 ?v1 )))):named a112 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 Dtree_T_dtree_sum_fun$ ))(=> (member$c ?v0 ?v1 )(member$a (fun_app$b ?v2 ?v0 )(image$k ?v2 ?v1 )))):named a113 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 Dtree_T_N_sum_fun$ ))(=> (member$c ?v0 ?v1 )(member$b (fun_app$r ?v2 ?v0 )(image$l ?v2 ?v1 )))):named a114 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_dtree_fun$ ))(=> (member$a ?v0 ?v1 )(member$c (fun_app$s ?v2 ?v0 )(image$m ?v2 ?v1 )))):named a115 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_N_fun$ ))(=> (member$a ?v0 ?v1 )(member$d (fun_app$t ?v2 ?v0 )(image$n ?v2 ?v1 )))):named a116 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_dtree_fun$ ))(=> (member$b ?v0 ?v1 )(member$c (fun_app$u ?v2 ?v0 )(image$o ?v2 ?v1 )))):named a117 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_N_fun$ ))(=> (member$b ?v0 ?v1 )(member$d (fun_app$v ?v2 ?v0 )(image$p ?v2 ?v1 )))):named a118 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 Dtree$ )(?v3 Dtree_dtree_fun$ ))(=> (and (member$c ?v0 ?v1 )(= ?v2 (fun_app$j ?v3 ?v0 )))(member$c ?v2 (fun_app$n (image$i ?v3 )?v1 )))):named a119 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 N$ )(?v3 Dtree_N_fun$ ))(=> (and (member$c ?v0 ?v1 )(= ?v2 (fun_app$i ?v3 ?v0 )))(member$d ?v2 (image$h ?v3 ?v1 )))):named a120 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N_dtree_fun$ ))(=> (and (member$d ?v0 ?v1 )(= ?v2 (fun_app$o ?v3 ?v0 )))(member$c ?v2 (image$e ?v3 ?v1 )))):named a121 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ )(?v3 N_N_fun$ ))(=> (and (member$d ?v0 ?v1 )(= ?v2 (fun_app$p ?v3 ?v0 )))(member$d ?v2 (image$g ?v3 ?v1 )))):named a122 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 T_dtree_sum$ )(?v3 Dtree_T_dtree_sum_fun$ ))(=> (and (member$c ?v0 ?v1 )(= ?v2 (fun_app$b ?v3 ?v0 )))(member$a ?v2 (image$k ?v3 ?v1 )))):named a123 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_set$ )(?v2 T_N_sum$ )(?v3 Dtree_T_N_sum_fun$ ))(=> (and (member$c ?v0 ?v1 )(= ?v2 (fun_app$r ?v3 ?v0 )))(member$b ?v2 (image$l ?v3 ?v1 )))):named a124 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 Dtree$ )(?v3 T_dtree_sum_dtree_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$s ?v3 ?v0 )))(member$c ?v2 (image$m ?v3 ?v1 )))):named a125 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 N$ )(?v3 T_dtree_sum_N_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$t ?v3 ?v0 )))(member$d ?v2 (image$n ?v3 ?v1 )))):named a126 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 Dtree$ )(?v3 T_N_sum_dtree_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$u ?v3 ?v0 )))(member$c ?v2 (image$o ?v3 ?v1 )))):named a127 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 N$ )(?v3 T_N_sum_N_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$v ?v3 ?v0 )))(member$d ?v2 (image$p ?v3 ?v1 )))):named a128 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_set$ )(?v2 Dtree_bool_fun$ ))(=> (forall ((?v3 Dtree$ ))(=> (member$c ?v3 (fun_app$n (image$i ?v0 )?v1 ))(fun_app$g ?v2 ?v3 )))(forall ((?v3 Dtree$ ))(=> (member$c ?v3 ?v1 )(fun_app$g ?v2 (fun_app$j ?v0 ?v3 )))))):named a129 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_set$ )(?v2 Dtree_bool_fun$ ))(=> (forall ((?v3 Dtree$ ))(=> (member$c ?v3 (image$e ?v0 ?v1 ))(fun_app$g ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$d ?v3 ?v1 )(fun_app$g ?v2 (fun_app$o ?v0 ?v3 )))))):named a130 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$d ?v3 (image$h ?v0 ?v1 ))(fun_app$h ?v2 ?v3 )))(forall ((?v3 Dtree$ ))(=> (member$c ?v3 ?v1 )(fun_app$h ?v2 (fun_app$i ?v0 ?v3 )))))):named a131 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$d ?v3 (image$g ?v0 ?v1 ))(fun_app$h ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$d ?v3 ?v1 )(fun_app$h ?v2 (fun_app$p ?v0 ?v3 )))))):named a132 ))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$ )(?v1 T_dtree_sum_set$ )(?v2 Dtree_bool_fun$ ))(=> (forall ((?v3 Dtree$ ))(=> (member$c ?v3 (image$m ?v0 ?v1 ))(fun_app$g ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$g ?v2 (fun_app$s ?v0 ?v3 )))))):named a133 ))
(assert (! (forall ((?v0 T_N_sum_dtree_fun$ )(?v1 T_N_sum_set$ )(?v2 Dtree_bool_fun$ ))(=> (forall ((?v3 Dtree$ ))(=> (member$c ?v3 (image$o ?v0 ?v1 ))(fun_app$g ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$b ?v3 ?v1 )(fun_app$g ?v2 (fun_app$u ?v0 ?v3 )))))):named a134 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 Dtree_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$a ?v3 (image$k ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(forall ((?v3 Dtree$ ))(=> (member$c ?v3 ?v1 )(fun_app$e ?v2 (fun_app$b ?v0 ?v3 )))))):named a135 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 N_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$a ?v3 (image$q ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$d ?v3 ?v1 )(fun_app$e ?v2 (fun_app$w ?v0 ?v3 )))))):named a136 ))
(assert (! (forall ((?v0 Dtree_T_N_sum_fun$ )(?v1 Dtree_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$b ?v3 (image$l ?v0 ?v1 ))(fun_app$f ?v2 ?v3 )))(forall ((?v3 Dtree$ ))(=> (member$c ?v3 ?v1 )(fun_app$f ?v2 (fun_app$r ?v0 ?v3 )))))):named a137 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$b ?v3 (image$r ?v0 ?v1 ))(fun_app$f ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$d ?v3 ?v1 )(fun_app$f ?v2 (fun_app$c ?v0 ?v3 )))))):named a138 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_set$ )(?v2 Dtree_bool_fun$ ))(=> (exists ((?v3 Dtree$ ))(and (member$c ?v3 (fun_app$n (image$i ?v0 )?v1 ))(fun_app$g ?v2 ?v3 )))(exists ((?v3 Dtree$ ))(and (member$c ?v3 ?v1 )(fun_app$g ?v2 (fun_app$j ?v0 ?v3 )))))):named a139 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_set$ )(?v2 Dtree_bool_fun$ ))(=> (exists ((?v3 Dtree$ ))(and (member$c ?v3 (image$e ?v0 ?v1 ))(fun_app$g ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$d ?v3 ?v1 )(fun_app$g ?v2 (fun_app$o ?v0 ?v3 )))))):named a140 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$d ?v3 (image$h ?v0 ?v1 ))(fun_app$h ?v2 ?v3 )))(exists ((?v3 Dtree$ ))(and (member$c ?v3 ?v1 )(fun_app$h ?v2 (fun_app$i ?v0 ?v3 )))))):named a141 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$d ?v3 (image$g ?v0 ?v1 ))(fun_app$h ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$d ?v3 ?v1 )(fun_app$h ?v2 (fun_app$p ?v0 ?v3 )))))):named a142 ))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$ )(?v1 T_dtree_sum_set$ )(?v2 Dtree_bool_fun$ ))(=> (exists ((?v3 Dtree$ ))(and (member$c ?v3 (image$m ?v0 ?v1 ))(fun_app$g ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$g ?v2 (fun_app$s ?v0 ?v3 )))))):named a143 ))
(assert (! (forall ((?v0 T_N_sum_dtree_fun$ )(?v1 T_N_sum_set$ )(?v2 Dtree_bool_fun$ ))(=> (exists ((?v3 Dtree$ ))(and (member$c ?v3 (image$o ?v0 ?v1 ))(fun_app$g ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$b ?v3 ?v1 )(fun_app$g ?v2 (fun_app$u ?v0 ?v3 )))))):named a144 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 Dtree_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$a ?v3 (image$k ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(exists ((?v3 Dtree$ ))(and (member$c ?v3 ?v1 )(fun_app$e ?v2 (fun_app$b ?v0 ?v3 )))))):named a145 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 N_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$a ?v3 (image$q ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$d ?v3 ?v1 )(fun_app$e ?v2 (fun_app$w ?v0 ?v3 )))))):named a146 ))
(assert (! (forall ((?v0 Dtree_T_N_sum_fun$ )(?v1 Dtree_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$b ?v3 (image$l ?v0 ?v1 ))(fun_app$f ?v2 ?v3 )))(exists ((?v3 Dtree$ ))(and (member$c ?v3 ?v1 )(fun_app$f ?v2 (fun_app$r ?v0 ?v3 )))))):named a147 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$b ?v3 (image$r ?v0 ?v1 ))(fun_app$f ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$d ?v3 ?v1 )(fun_app$f ?v2 (fun_app$c ?v0 ?v3 )))))):named a148 ))
(assert (! (forall ((?v0 Dtree_set$ )(?v1 Dtree_set$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Dtree$ ))(=> (member$c ?v4 ?v1 )(= (fun_app$j ?v2 ?v4 )(fun_app$j ?v3 ?v4 )))))(= (fun_app$n (image$i ?v2 )?v0 )(fun_app$n (image$i ?v3 )?v1 )))):named a149 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$y ?v2 ?v4 )(fun_app$y ?v3 ?v4 )))))(= (image$ ?v2 ?v0 )(image$ ?v3 ?v1 )))):named a150 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$z ?v2 ?v4 )(fun_app$z ?v3 ?v4 )))))(= (fun_app$l (image$c ?v2 )?v0 )(fun_app$l (image$c ?v3 )?v1 )))):named a151 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$c ?v0 (fun_app$n (image$i ?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$c ?v3 ?v2 )(= ?v0 (fun_app$j ?v1 ?v3 )))))):named a152 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 N_set$ ))(= (member$c ?v0 (image$e ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$d ?v3 ?v2 )(= ?v0 (fun_app$o ?v1 ?v3 )))))):named a153 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_set$ ))(= (member$d ?v0 (image$h ?v1 ?v2 ))(exists ((?v3 Dtree$ ))(and (member$c ?v3 ?v2 )(= ?v0 (fun_app$i ?v1 ?v3 )))))):named a154 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (member$d ?v0 (image$g ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$d ?v3 ?v2 )(= ?v0 (fun_app$p ?v1 ?v3 )))))):named a155 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T_dtree_sum_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$c ?v0 (image$m ?v1 ?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$s ?v1 ?v3 )))))):named a156 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T_N_sum_dtree_fun$ )(?v2 T_N_sum_set$ ))(= (member$c ?v0 (image$o ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$u ?v1 ?v3 )))))):named a157 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 Dtree_set$ ))(= (member$a ?v0 (image$k ?v1 ?v2 ))(exists ((?v3 Dtree$ ))(and (member$c ?v3 ?v2 )(= ?v0 (fun_app$b ?v1 ?v3 )))))):named a158 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 N_T_dtree_sum_fun$ )(?v2 N_set$ ))(= (member$a ?v0 (image$q ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$d ?v3 ?v2 )(= ?v0 (fun_app$w ?v1 ?v3 )))))):named a159 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 Dtree_T_N_sum_fun$ )(?v2 Dtree_set$ ))(= (member$b ?v0 (image$l ?v1 ?v2 ))(exists ((?v3 Dtree$ ))(and (member$c ?v3 ?v2 )(= ?v0 (fun_app$r ?v1 ?v3 )))))):named a160 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 N_T_N_sum_fun$ )(?v2 N_set$ ))(= (member$b ?v0 (image$r ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$d ?v3 ?v2 )(= ?v0 (fun_app$c ?v1 ?v3 )))))):named a161 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (inj_on$ ?v0 ?v1 )(and (not (= ?v2 ?v3 ))(and (member$c ?v2 ?v1 )(member$c ?v3 ?v1 ))))(not (= (fun_app$i ?v0 ?v2 )(fun_app$i ?v0 ?v3 ))))):named a162 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (inj_on$ ?v0 ?v1 )(and (member$c ?v2 ?v1 )(member$c ?v3 ?v1 )))(= (= (fun_app$i ?v0 ?v2 )(fun_app$i ?v0 ?v3 ))(= ?v2 ?v3 )))):named a163 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (inj_on$ ?v0 ?v1 )(and (= (fun_app$i ?v0 ?v2 )(fun_app$i ?v0 ?v3 ))(and (member$c ?v2 ?v1 )(member$c ?v3 ?v1 ))))(= ?v2 ?v3 ))):named a164 ))
(assert (! (forall ((?v0 Dtree_set$ )(?v1 Dtree_N_fun$ ))(=> (forall ((?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$c ?v2 ?v0 )(and (member$c ?v3 ?v0 )(= (fun_app$i ?v1 ?v2 )(fun_app$i ?v1 ?v3 ))))(= ?v2 ?v3 )))(inj_on$ ?v1 ?v0 ))):named a165 ))
(assert (! (forall ((?v0 Dtree_set$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(=> (forall ((?v3 Dtree$ ))(=> (member$c ?v3 ?v0 )(= (fun_app$o ?v1 (fun_app$i ?v2 ?v3 ))?v3 )))(inj_on$ ?v2 ?v0 ))):named a166 ))
(assert (! (forall ((?v0 Dtree_set$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ ))(=> (forall ((?v3 Dtree$ ))(=> (member$c ?v3 ?v0 )(= (fun_app$i ?v1 ?v3 )(fun_app$i ?v2 ?v3 ))))(= (inj_on$ ?v1 ?v0 )(inj_on$ ?v2 ?v0 )))):named a167 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_set$ ))(= (inj_on$ ?v0 ?v1 )(forall ((?v2 Dtree$ ))(=> (member$c ?v2 ?v1 )(forall ((?v3 Dtree$ ))(=> (and (member$c ?v3 ?v1 )(= (fun_app$i ?v0 ?v2 )(fun_app$i ?v0 ?v3 )))(= ?v2 ?v3 ))))))):named a168 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$x id$ ?v0 )?v0 ):pattern ((fun_app$x id$ ?v0 )))):named a169 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a170 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a171 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N$ )(?v2 T_N_sum_set$ ))(=> (member$b (fun_app$c ?v0 ?v1 )?v2 )(member$d ?v1 (vimage$c ?v0 ?v2 )))):named a172 ))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_N_fun$ )(?v1 N_T_N_sum_set_prod$ )(?v2 N_set$ ))(=> (member$d (fun_app$aa ?v0 ?v1 )?v2 )(member$ ?v1 (vimage$o ?v0 ?v2 )))):named a173 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree$ )(?v2 N_set$ ))(=> (member$d (fun_app$i ?v0 ?v1 )?v2 )(member$c ?v1 (vimage$f ?v0 ?v2 )))):named a174 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 T_dtree_sum$ )(?v2 N_set$ ))(=> (member$d (fun_app$t ?v0 ?v1 )?v2 )(member$a ?v1 (vimage$k ?v0 ?v2 )))):named a175 ))
(assert (! (forall ((?v0 T_N_sum_N_fun$ )(?v1 T_N_sum$ )(?v2 N_set$ ))(=> (member$d (fun_app$v ?v0 ?v1 )?v2 )(member$b ?v1 (vimage$m ?v0 ?v2 )))):named a176 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ )(?v2 N_set$ ))(=> (member$d (fun_app$p ?v0 ?v1 )?v2 )(member$d ?v1 (vimage$h ?v0 ?v2 )))):named a177 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 Dtree$ )(?v2 T_dtree_sum_set$ ))(=> (member$a (fun_app$b ?v0 ?v1 )?v2 )(member$c ?v1 (vimage$ ?v0 ?v2 )))):named a178 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$d (fun_app$i root$ ?v0 )?v1 )(and (member$a (inr$a ?v0 )(cont$ ?v2 ))(fun_app$g (fun_app$q (subtr$ ?v1 )?v2 )?v3 )))(fun_app$g (fun_app$q (subtr$ ?v1 )?v0 )?v3 ))):named a179 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$d (fun_app$i root$ ?v0 )?v1 )(and (fun_app$g (fun_app$q (subtr$ ?v1 )?v2 )?v3 )(member$a (inr$a ?v3 )(cont$ ?v0 ))))(fun_app$g (fun_app$q (subtr$ ?v1 )?v2 )?v0 ))):named a180 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (fun_app$g (fun_app$q (subtr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$d (fun_app$i root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$d (fun_app$i root$ ?v3 )?v4 )(and (fun_app$g (fun_app$q (subtr$ ?v4 )?v5 )?v6 )(member$a (inr$a ?v6 )(cont$ ?v3 )))))))false ))))false )):named a181 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set_dtree_dtree_bool_fun_fun_fun$ ))(=> (and (fun_app$g (fun_app$q (subtr$ ?v0 )?v1 )?v2 )(and (forall ((?v4 N_set$ )(?v5 Dtree$ ))(fun_app$g (fun_app$q (fun_app$ab ?v3 ?v4 )?v5 )?v5 ))(forall ((?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$d (fun_app$i root$ ?v5 )?v4 )(and (member$a (inr$a ?v5 )(cont$ ?v6 ))(and (fun_app$g (fun_app$q (subtr$ ?v4 )?v6 )?v7 )(fun_app$g (fun_app$q (fun_app$ab ?v3 ?v4 )?v6 )?v7 ))))(fun_app$g (fun_app$q (fun_app$ab ?v3 ?v4 )?v5 )?v7 )))))(fun_app$g (fun_app$q (fun_app$ab ?v3 ?v0 )?v1 )?v2 ))):named a182 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (fun_app$g (fun_app$q (subtr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$d (fun_app$i root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$d (fun_app$i root$ ?v3 )?v4 )(and (fun_app$g (fun_app$q (subtr$ ?v4 )?v5 )?v6 )(member$a (inr$a ?v6 )(cont$ ?v3 ))))))))))):named a183 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$b (inr$ ?v0 )(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ ?v1 )))(member$a (inr$a (fun_app$o (subtrOf$ ?v1 )?v0 ))(cont$ ?v1 )))):named a184 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$b (inr$ ?v0 )(image$ (fun_app$k (map_sum$ id$ )root$ )(cont$ ?v1 )))(and (member$a (inr$a (fun_app$o (subtrOf$ ?v1 )?v0 ))(cont$ ?v1 ))(= (fun_app$i root$ (fun_app$o (subtrOf$ ?v1 )?v0 ))?v0 )))):named a185 ))
(check-sat )
;(get-unsat-core )
