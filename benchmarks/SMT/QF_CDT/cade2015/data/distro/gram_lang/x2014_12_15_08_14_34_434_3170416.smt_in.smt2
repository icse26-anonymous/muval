;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-datatypes ()((N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))(T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun t$ ()T$ )
(declare-fun nl$ ()N_list$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun nl1$ ()N_list$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun last$ (N_list$ )N$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun distinct$ (N_list$ )Bool )
(assert (! (not (= (fun_app$ f$ n$ )tr$ )):named a0 ))
(assert (! (=> (forall ((?v0 N$ )(?v1 N_list$ ))(=> (= nl$ (cons$ ?v0 ?v1 ))false ))false ):named a1 ))
(assert (! (regular$ tr$ ):named a2 ))
(assert (! (= (fun_app$ f$ (hd$ nl$ ))tr$ ):named a3 ))
(assert (! (= nl$ (cons$ n$ nl1$ )):named a4 ))
(assert (! (reg$ f$ tr$ ):named a5 ))
(assert (! (path$ f$ nl$ ):named a6 ))
(assert (! (= (fun_app$ f$ (last$ nl$ ))tr1$ ):named a7 ))
(assert (! (member$ (root$ tr$ )ns$ ):named a8 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (fun_app$ f$ ?v0 ))?v0 )):named a9 ))
(assert (! (inFr$ ns$ tr$ t$ ):named a10 ))
(assert (! (distinct$ nl$ ):named a11 ))
(assert (! (=> (forall ((?v0 N_dtree_fun$ ))(=> (and (reg$ ?v0 tr$ )(forall ((?v1 N$ ))(= (root$ (fun_app$ ?v0 ?v1 ))?v1 )))false ))false ):named a12 ))
(assert (! (=> (forall ((?v0 N_list$ )(?v1 Dtree$ ))(=> (and (distinct$ ?v0 )(and (path$ f$ ?v0 )(and (= (fun_app$ f$ (hd$ ?v0 ))tr$ )(and (= (fun_app$ f$ (last$ ?v0 ))?v1 )(and (less_eq$ (set$ ?v0 )ns$ )(member$a (inl$ t$ )(cont$ ?v1 )))))))false ))false ):named a13 ))
(assert (! (less_eq$ (set$ nl$ )ns$ ):named a14 ))
(assert (! (member$a (inl$ t$ )(cont$ tr1$ )):named a15 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(and (reg$ ?v1 ?v0 )(forall ((?v2 N$ ))(= (root$ (fun_app$ ?v1 ?v2 ))?v2 )))))):named a16 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(reg$ ?v1 ?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
