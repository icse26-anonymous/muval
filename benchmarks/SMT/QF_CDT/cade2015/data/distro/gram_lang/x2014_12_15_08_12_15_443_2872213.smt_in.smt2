;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-datatypes ()((N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun n1$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun bot$ ()N_set$ )
(declare-fun nl1$ ()N_list$ )
(declare-fun nl2$ ()N_list$ )
(declare-fun nla$ ()N_list$ )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun sup$ (N_set$ N_set$ )N_set$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun nl12$ ()N_list$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun distinct$ (N_list$ )Bool )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 N_list$ ))(=> (and (path$ f$ ?v0 )(and (= (hd$ ?v0 )n$ )(and (= (last$ ?v0 )(last$ (cons$ n$ nl12$ )))(and (distinct$ ?v0 )(less_eq$ (set$ ?v0 )(sup$ (insert$ n$ bot$ )(set$ nl12$ )))))))thesis$ )):named a1 ))
(assert (! (path$ f$ nl$ ):named a2 ))
(assert (! (path$ f$ (cons$ n$ nl12$ )):named a3 ))
(assert (! (member$ n$ (set$ nl1$ )):named a4 ))
(assert (! (= nl1$ (cons$ n1$ nl2$ )):named a5 ))
(assert (! (path$ f$ nla$ ):named a6 ))
(assert (! (=> (forall ((?v0 N$ )(?v1 N_list$ ))(=> (= nla$ (cons$ ?v0 ?v1 ))false ))false ):named a7 ))
(assert (! (path$ f$ nl1$ ):named a8 ))
(assert (! (= nla$ (cons$ n$ nl1$ )):named a9 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (= (set$ (cons$ ?v0 ?v1 ))(insert$ ?v0 (set$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ ))(= (= (insert$ ?v0 ?v1 )(insert$ ?v2 bot$ ))(and (= ?v0 ?v2 )(less_eq$ ?v1 (insert$ ?v2 bot$ ))))):named a11 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_set$ ))(= (= (insert$ ?v0 bot$ )(insert$ ?v1 ?v2 ))(and (= ?v1 ?v0 )(less_eq$ ?v2 (insert$ ?v0 bot$ ))))):named a12 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(= (sup$ (insert$ ?v0 ?v1 )?v2 )(insert$ ?v0 (sup$ ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ )(?v2 N_set$ ))(= (sup$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (sup$ ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ )(?v2 N_set$ ))(= (less_eq$ (sup$ ?v0 ?v1 )?v2 )(and (less_eq$ ?v0 ?v2 )(less_eq$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a16 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(= (less_eq$ (insert$ ?v0 ?v1 )?v2 )(and (member$ ?v0 ?v2 )(less_eq$ ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 N$ ))(= (member$ ?v0 bot$ )false )):named a18 ))
(check-sat )
;(get-unsat-core )
