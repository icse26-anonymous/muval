;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort Nat$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-datatypes ()((N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun nl$ ()N_list$ )
(declare-fun nla$ ()N_list$ )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun size$ (N_list$ )Nat$ )
(declare-fun append$ (N_list$ N_list$ )N_list$ )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun distinct$ (N_list$ )Bool )
(assert (! (not (path$ f$ nla$ )):named a0 ))
(assert (! (path$ f$ nl$ ):named a1 ))
(assert (! (path$ f$ nla$ ):named a2 ))
(assert (! (forall ((?v0 N_list$ ))(=> (and (less$ (size$ ?v0 )(size$ nla$ ))(path$ f$ ?v0 ))(exists ((?v1 N_list$ ))(and (path$ f$ ?v1 )(and (= (hd$ ?v1 )(hd$ ?v0 ))(and (= (last$ ?v1 )(last$ ?v0 ))(and (less_eq$ (set$ ?v1 )(set$ ?v0 ))(distinct$ ?v1 )))))))):named a3 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(=> (path$ ?v0 ?v1 )(not (= ?v1 nil$ )))):named a4 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ )(?v2 N_list$ ))(=> (and (path$ ?v0 (cons$ ?v1 ?v2 ))(not (= ?v2 nil$ )))(path$ ?v0 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ ))(path$ ?v0 (cons$ ?v1 nil$ ))):named a6 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ )(?v2 N_list$ ))(=> (and (path$ ?v0 (append$ ?v1 ?v2 ))(not (= ?v2 nil$ )))(path$ ?v0 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ )(?v2 N_list$ ))(=> (and (path$ ?v0 ?v1 )(path$ ?v0 (cons$ (last$ ?v1 )?v2 )))(path$ ?v0 (append$ ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N$ ))(= (last$ (append$ ?v0 (cons$ ?v1 nil$ )))?v1 )):named a9 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ ))(=> (= ?v0 nil$ )(= (last$ (append$ ?v1 ?v0 ))(last$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ ))(=> (not (= ?v0 nil$ ))(= (last$ (append$ ?v1 ?v0 ))(last$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ ))(=> (not (= ?v0 nil$ ))(= (hd$ (append$ ?v0 ?v1 ))(hd$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N$ )(?v2 N_list$ )(?v3 N$ ))(= (= (append$ ?v0 (cons$ ?v1 nil$ ))(append$ ?v2 (cons$ ?v3 nil$ )))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ )(?v2 N_list$ )(?v3 N_list$ ))(=> (or (= (size$ ?v0 )(size$ ?v1 ))(= (size$ ?v2 )(size$ ?v3 )))(= (= (append$ ?v0 ?v2 )(append$ ?v1 ?v3 ))(and (= ?v0 ?v1 )(= ?v2 ?v3 ))))):named a14 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ ))(= (= (append$ ?v0 ?v1 )?v1 )(= ?v0 nil$ ))):named a15 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ ))(= (= (append$ ?v0 ?v1 )?v0 )(= ?v1 nil$ ))):named a16 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ ))(= (= ?v0 (append$ ?v1 ?v0 ))(= ?v1 nil$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
