;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun t$ ()T$ )
(declare-fun ns$ ()N_set$ )
(declare-fun ta$ ()T$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun nsa$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun inFr2$ (N_set$ Dtree$ T$ )Bool )
(declare-fun inFrr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun finite$ (T_dtree_sum_set$ )Bool )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun unfold$ (Dtree_N_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$ (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ N$ )Dtree$ )
(declare-fun fun_app$a (Dtree_T_dtree_sum_set_fun$ Dtree$ )T_dtree_sum_set$ )
(declare-fun fun_app$b (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (and (member$ (inr$ ?v0 )(cont$ tr0$ ))(= tr1$ (fun_app$ (hsubst$ tr0$ )?v0 )))thesis$ )):named a1 ))
(assert (! (member$ (inr$ tr1$ )(cont$ tr1a$ )):named a2 ))
(assert (! (= tr1a$ (fun_app$ (hsubst$ tr0$ )tra$ )):named a3 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (and (wf$ tr0$ )(wf$ ?v0 ))(wf$ (fun_app$ (hsubst$ tr0$ )?v0 )))):named a4 ))
(assert (! (inFr$ ns$ (fun_app$ (hsubst$ tr0$ )tr$ )t$ ):named a5 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (root$ ?v0 )(root$ tr0$ ))(= (fun_app$ (hsubst$ tr0$ )?v0 )(fun_app$ (hsubst$ tr0$ )tr0$ )))):named a8 ))
(assert (! (= (hsubst$ tr0$ )(unfold$ hsubst_r$ (hsubst_c$ tr0$ ))):named a9 ))
(assert (! (inFr$ nsa$ tr1$ ta$ ):named a10 ))
(assert (! (= (root$ tr1a$ )(root$ tr0$ )):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= ?v0 ?v1 ))(not (= (inr$ ?v0 )(inr$ ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 Dtree$ ))(= (root$ (fun_app$ (hsubst$ tr0$ )?v0 ))(root$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$a (hsubst_c$ tr0$ )?v0 )(ite (= (root$ ?v0 )(root$ tr0$ ))(cont$ tr0$ )(cont$ ?v0 ))):pattern ((fun_app$a (hsubst_c$ tr0$ )?v0 )))):named a15 ))
(assert (! (member$a (root$ tr1a$ )nsa$ ):named a16 ))
(assert (! (= (root$ tr1a$ )(root$ tra$ )):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$ (inr$ ?v1 )(cont$ ?v0 ))(member$ (inr$ ?v2 )(cont$ ?v0 ))))(= (= (root$ ?v1 )(root$ ?v2 ))(= ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$b hsubst_r$ ?v0 )(root$ ?v0 )):pattern ((fun_app$b hsubst_r$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr$ ?v0 ?v1 ?v2 )(member$a (root$ ?v1 )?v0 ))):named a20 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$a (root$ ?v0 )?v1 ))(not (inFr$ ?v1 ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (fun_app$a (hsubst_c$ ?v0 )?v1 )(ite (= (root$ ?v1 )(root$ ?v0 ))(cont$ ?v0 )(cont$ ?v1 ))):pattern ((fun_app$a (hsubst_c$ ?v0 )?v1 )))):named a22 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst$ ?v0 )(unfold$ hsubst_r$ (hsubst_c$ ?v0 ))):pattern ((hsubst$ ?v0 )))):named a23 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$a (root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(inFr$ ?v1 ?v2 ?v3 )))(inFr$ ?v1 ?v0 ?v3 ))):named a24 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (root$ ?v0 )(root$ ?v1 ))(= (fun_app$ (hsubst$ ?v1 )?v0 )(fun_app$ (hsubst$ ?v1 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (root$ (fun_app$ (hsubst$ ?v0 )?v1 ))(root$ ?v1 ))):named a26 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(wf$ ?v1 ))(wf$ (fun_app$ (hsubst$ ?v0 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a28 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(= (subtrOf$ ?v0 (root$ ?v1 ))?v1 ))):named a29 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(= (inFrr$ ?v0 ?v1 ?v2 )(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )(cont$ ?v1 ))(inFr$ ?v0 ?v3 ?v2 ))))):named a30 ))
(assert (! (forall ((?v0 Dtree$ ))(finite$ (fun_app$a (hsubst_c$ tr0$ )?v0 ))):named a31 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_T_dtree_sum_set_fun$ )(?v2 Dtree$ ))(= (root$ (fun_app$ (unfold$ ?v0 ?v1 )?v2 ))(fun_app$b ?v0 ?v2 ))):named a32 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a33 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr2$ ?v0 ?v1 ?v2 )(and (member$a (root$ ?v3 )?v0 )(member$ (inr$ ?v1 )(cont$ ?v3 ))))(inFr2$ ?v0 ?v3 ?v2 ))):named a34 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N$ ))(=> (and (member$a (root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(inItr$ ?v1 ?v2 ?v3 )))(inItr$ ?v1 ?v0 ?v3 ))):named a35 ))
(check-sat )
;(get-unsat-core )
