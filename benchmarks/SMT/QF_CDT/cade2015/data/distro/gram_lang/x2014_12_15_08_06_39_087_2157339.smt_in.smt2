;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun x$ ()N$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun itr$ (N_set$ Dtree$ )N_set$ )
(declare-fun sup$ (N_set$ N_set$ )N_set$ )
(declare-fun tr$a ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun inItr$ (N_set$ Dtree$ )N_bool_fun$ )
(declare-fun subtr$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun subtr2$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun collect$ (N_bool_fun$ )N_set$ )
(declare-fun fun_app$ (N_bool_fun$ N$ )Bool )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$a (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$b (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$c (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(assert (! (not (fun_app$ (inItr$ ns$ tr$ )x$ )):named a0 ))
(assert (! (fun_app$a (fun_app$b (fun_app$c subtr$ ns$ )tr$a )tr$ ):named a1 ))
(assert (! (fun_app$ (inItr$ ns$ tr$a )x$ ):named a2 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (fun_app$ (inItr$ ?v0 ?v1 )?v2 )(fun_app$a (fun_app$b (fun_app$c subtr$ ?v0 )?v1 )?v3 ))(fun_app$ (inItr$ ?v0 ?v3 )?v2 ))):named a3 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c subtr$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$b (fun_app$c subtr$ ?v0 )?v2 )?v3 ))(fun_app$a (fun_app$b (fun_app$c subtr$ ?v0 )?v1 )?v3 ))):named a4 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(fun_app$a (fun_app$b (fun_app$c subtr$ ?v0 )?v1 )?v3 ))(inFr$ ?v0 ?v3 ?v2 ))):named a5 ))
(assert (! (= subtr$ subtr2$ ):named a6 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (fun_app$ (inItr$ ?v0 ?v1 )?v2 )(less_eq$ ?v0 ?v3 ))(fun_app$ (inItr$ ?v3 ?v1 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$ (inItr$ ?v0 ?v1 )?v2 )(member$ (root$ ?v1 )?v0 ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (root$ ?v0 )?v1 )(fun_app$ (inItr$ ?v1 ?v0 )(root$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c subtr$ ?v0 )?v1 )?v2 )(less_eq$ ?v0 ?v3 ))(fun_app$a (fun_app$b (fun_app$c subtr$ ?v3 )?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set$ )(?v4 Dtree$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c subtr$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$b (fun_app$c subtr$ ?v3 )?v2 )?v4 ))(fun_app$a (fun_app$b (fun_app$c subtr$ (sup$ ?v0 ?v3 ))?v1 )?v4 ))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$a (fun_app$b (fun_app$c subtr$ ?v0 )?v1 )?v2 )(member$ (root$ ?v2 )?v0 ))):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$a (fun_app$b (fun_app$c subtr$ ?v0 )?v1 )?v2 )(member$ (root$ ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (root$ ?v0 )?v1 )(fun_app$a (fun_app$b (fun_app$c subtr$ ?v1 )?v0 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ ))(! (= (itr$ ?v0 ?v1 )(collect$ (inItr$ ?v0 ?v1 ))):pattern ((itr$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr$ ?v0 ?v1 ?v2 )(exists ((?v3 Dtree$ ))(and (fun_app$a (fun_app$b (fun_app$c subtr$ ?v0 )?v3 )?v1 )(member$a (inl$ ?v2 )(cont$ ?v3 )))))):named a16 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 N_set$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(less_eq$ ?v0 ?v3 ))(inFr$ ?v3 ?v1 ?v2 ))):named a17 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr$ ?v0 ?v1 ?v2 )(member$ (root$ ?v1 )?v0 ))):named a18 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set$ )(?v4 Dtree$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c subtr2$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$b (fun_app$c subtr2$ ?v3 )?v2 )?v4 ))(fun_app$a (fun_app$b (fun_app$c subtr2$ (sup$ ?v0 ?v3 ))?v1 )?v4 ))):named a19 ))
(check-sat )
;(get-unsat-core )
