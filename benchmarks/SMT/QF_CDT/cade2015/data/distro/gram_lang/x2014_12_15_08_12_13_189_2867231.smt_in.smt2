;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-datatypes ()((N_list$ (nil$ )(cons$ (hd$ N$ )(tl$ N_list$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun n1$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun nl1$ ()N_list$ )
(declare-fun nl2$ ()N_list$ )
(declare-fun nla$ ()N_list$ )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun nl11$ ()N_list$ )
(declare-fun nl12$ ()N_list$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun append$ (N_list$ N_list$ )N_list$ )
(declare-fun member$ (N$ N_set$ )Bool )
(assert (! (not (path$ f$ (append$ (cons$ n$ nl11$ )(cons$ n$ nl12$ )))):named a0 ))
(assert (! (path$ f$ nl$ ):named a1 ))
(assert (! (= nl1$ (append$ nl11$ (cons$ n$ nl12$ ))):named a2 ))
(assert (! (= nl1$ (cons$ n1$ nl2$ )):named a3 ))
(assert (! (path$ f$ nla$ ):named a4 ))
(assert (! (=> (forall ((?v0 N$ )(?v1 N_list$ ))(=> (= nla$ (cons$ ?v0 ?v1 ))false ))false ):named a5 ))
(assert (! (=> (forall ((?v0 N_list$ )(?v1 N_list$ ))(=> (= nl1$ (append$ ?v0 (cons$ n$ ?v1 )))false ))false ):named a6 ))
(assert (! (path$ f$ nl1$ ):named a7 ))
(assert (! (= nla$ (cons$ n$ nl1$ )):named a8 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ )(?v2 N_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ )(?v2 N_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ )(?v2 N_list$ ))(= (append$ (append$ ?v0 ?v1 )?v2 )(append$ ?v0 (append$ ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ )(?v3 N_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N_list$ ))(! (= (append$ (cons$ ?v0 ?v1 )?v2 )(cons$ ?v0 (append$ ?v1 ?v2 ))):pattern ((append$ (cons$ ?v0 ?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N_list$ )(?v3 N_list$ )(?v4 N_list$ ))(=> (and (= (cons$ ?v0 ?v1 )?v2 )(= ?v3 (append$ ?v1 ?v4 )))(= (cons$ ?v0 ?v3 )(append$ ?v2 ?v4 )))):named a14 ))
(assert (! (member$ n$ (set$ nl1$ )):named a15 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(member$ ?v0 (set$ (cons$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ ))(=> (member$ ?v0 (set$ ?v1 ))(member$ ?v0 (set$ (cons$ ?v2 ?v1 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
