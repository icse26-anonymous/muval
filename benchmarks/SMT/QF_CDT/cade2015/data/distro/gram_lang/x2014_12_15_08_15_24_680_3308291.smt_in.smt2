;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort T_set_set$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort T_N_sum_T_fun$ 0 )
(declare-sort T_T_N_sum_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort T_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort T_set_set_T_set_set_fun$ 0 )
(declare-sort T_N_sum_set_T_N_sum_set_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort N_N_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_set_set_set_T_set_set_set_fun$ 0 )
(declare-sort T_N_sum_set_set_T_N_sum_set_set_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-datatypes ()((T_N_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ N$ )))(T_dtree_sum$ (inl$a (projl$a T$ ))(inr$a (projr$a Dtree$ )))))
(declare-fun n$ ()N$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun n$a ()N$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun id$a ()T_N_sum_set_T_N_sum_set_fun$ )
(declare-fun id$b ()T_N_sum_set_set_T_N_sum_set_set_fun$ )
(declare-fun id$c ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$d ()T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ )
(declare-fun id$e ()T_set_set_T_set_set_fun$ )
(declare-fun id$f ()T_set_set_set_T_set_set_set_fun$ )
(declare-fun id$g ()T_set_T_set_fun$ )
(declare-fun id$h ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun id$i ()T_N_sum_T_N_sum_fun$ )
(declare-fun tns$ ()T_N_sum_set$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun image$a (T_N_sum_T_N_sum_fun$ )T_N_sum_set_T_N_sum_set_fun$ )
(declare-fun image$b (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$c (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun image$d (T_N_sum_set_T_N_sum_set_fun$ )T_N_sum_set_set_T_N_sum_set_set_fun$ )
(declare-fun image$e (T_dtree_sum_set_T_dtree_sum_set_fun$ )T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ )
(declare-fun image$f (T_set_set_T_set_set_fun$ )T_set_set_set_T_set_set_set_fun$ )
(declare-fun image$g (T_set_T_set_fun$ )T_set_set_T_set_set_fun$ )
(declare-fun image$h (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$i (T_N_sum_T_fun$ T_N_sum_set$ )T_set$ )
(declare-fun image$j (T_dtree_sum_T_fun$ T_dtree_sum_set$ )T_set$ )
(declare-fun image$k (T_T_N_sum_fun$ T_set$ )T_N_sum_set$ )
(declare-fun image$l (T_T_dtree_sum_fun$ T_set$ )T_dtree_sum_set$ )
(declare-fun member$ (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun map_sum$ (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun member$b (T_set$ T_set_set$ )Bool )
(declare-fun member$c (T$ T_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun subtrOf$ (Dtree$ )N_dtree_fun$ )
(declare-fun fun_app$a (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$b (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$c (T_N_sum_set_T_N_sum_set_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun fun_app$d (N_N_fun_T_N_sum_T_N_sum_fun_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$e (N_N_fun$ N$ )N$ )
(declare-fun fun_app$f (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$g (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$h (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$i (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$j (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$k (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$l (T_set_set_T_set_set_fun$ T_set_set$ )T_set_set$ )
(declare-fun fun_app$m (T_set_T_set_fun$ T_set$ )T_set$ )
(declare-fun fun_app$n (T_T_fun$ T$ )T$ )
(declare-fun fun_app$o (T_N_sum_T_fun$ T_N_sum$ )T$ )
(declare-fun fun_app$p (T_dtree_sum_T_fun$ T_dtree_sum$ )T$ )
(declare-fun fun_app$q (T_T_N_sum_fun$ T$ )T_N_sum$ )
(declare-fun fun_app$r (T_T_dtree_sum_fun$ T$ )T_dtree_sum$ )
(declare-fun fun_app$s (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$t (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun map_sum$a (T_T_fun$ )N_N_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$b (T_T_fun$ )N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$c (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(assert (! (not (regular$ (fun_app$ (subtrOf$ tr$ )n$ ))):named a0 ))
(assert (! (member$ (inr$ n$ )(image$ (fun_app$a (map_sum$ id$ )root$ )(cont$ tr$ ))):named a1 ))
(assert (! (wf$ tr$ ):named a2 ))
(assert (! (regular$ tr$ ):named a3 ))
(assert (! (wf$ tr$ ):named a4 ))
(assert (! (regular$ tr$ ):named a5 ))
(assert (! (= (fun_app$b root$ tr$ )n$a ):named a6 ))
(assert (! (member$ (inr$ n$ )tns$ ):named a7 ))
(assert (! (= tns$ (image$ (fun_app$a (map_sum$ id$ )root$ )(cont$ tr$ ))):named a8 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$ (inr$ ?v0 )(image$ (fun_app$a (map_sum$ id$ )root$ )(cont$ ?v1 )))(= (fun_app$b root$ (fun_app$ (subtrOf$ ?v1 )?v0 ))?v0 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(image$ (fun_app$a (map_sum$ id$ )root$ )(cont$ ?v0 ))))(wf$ (fun_app$ (subtrOf$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 T_N_sum_set$ ))(= (member$ (inr$ ?v0 )(fun_app$c (image$a (fun_app$d (map_sum$a id$ )?v1 ))?v2 ))(exists ((?v3 N$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$e ?v1 ?v3 )?v0 ))))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum_set$ ))(= (member$a (inr$a ?v0 )(image$b (fun_app$f (map_sum$b id$ )?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$ ?v1 ?v3 )?v0 ))))):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a (inr$a ?v0 )(fun_app$g (image$c (fun_app$h (map_sum$c id$ )?v1 ))?v2 ))(exists ((?v3 Dtree$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$i ?v1 ?v3 )?v0 ))))):named a13 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ (inr$ ?v0 )(image$ (fun_app$a (map_sum$ id$ )?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$b ?v1 ?v3 )?v0 ))))):named a14 ))
(assert (! (= (image$d id$a )id$b ):named a15 ))
(assert (! (= (image$e id$c )id$d ):named a16 ))
(assert (! (= (image$f id$e )id$f ):named a17 ))
(assert (! (= (image$g id$g )id$e ):named a18 ))
(assert (! (= (image$c id$h )id$c ):named a19 ))
(assert (! (= (image$a id$i )id$a ):named a20 ))
(assert (! (= (image$h id$ )id$g ):named a21 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 T_N_sum_set$ ))(=> (member$ (inr$ ?v0 )(fun_app$c (image$a (fun_app$d (map_sum$a id$ )?v1 ))?v2 ))(exists ((?v3 N$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$e ?v1 ?v3 )?v0 ))))):named a22 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum_set$ ))(=> (member$a (inr$a ?v0 )(image$b (fun_app$f (map_sum$b id$ )?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$ ?v1 ?v3 )?v0 ))))):named a23 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$a (inr$a ?v0 )(fun_app$g (image$c (fun_app$h (map_sum$c id$ )?v1 ))?v2 ))(exists ((?v3 Dtree$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$i ?v1 ?v3 )?v0 ))))):named a24 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$ (inr$ ?v0 )(image$ (fun_app$a (map_sum$ id$ )?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$b ?v1 ?v3 )?v0 ))))):named a25 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a27 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$a (inr$a ?v1 )(cont$ ?v0 )))(exists ((?v2 N$ ))(and (member$ (inr$ ?v2 )(image$ (fun_app$a (map_sum$ id$ )root$ )(cont$ ?v0 )))(= (fun_app$ (subtrOf$ ?v0 )?v2 )?v1 ))))):named a30 ))
(assert (! (forall ((?v0 T_N_sum$ ))(! (= (fun_app$j id$i ?v0 )?v0 ):pattern ((fun_app$j id$i ?v0 )))):named a31 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(! (= (fun_app$c id$a ?v0 )?v0 ):pattern ((fun_app$c id$a ?v0 )))):named a32 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(! (= (fun_app$k id$h ?v0 )?v0 ):pattern ((fun_app$k id$h ?v0 )))):named a33 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(! (= (fun_app$g id$c ?v0 )?v0 ):pattern ((fun_app$g id$c ?v0 )))):named a34 ))
(assert (! (forall ((?v0 T_set_set$ ))(! (= (fun_app$l id$e ?v0 )?v0 ):pattern ((fun_app$l id$e ?v0 )))):named a35 ))
(assert (! (forall ((?v0 T_set$ ))(! (= (fun_app$m id$g ?v0 )?v0 ):pattern ((fun_app$m id$g ?v0 )))):named a36 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$n id$ ?v0 )?v0 ):pattern ((fun_app$n id$ ?v0 )))):named a37 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set_T_set_fun$ )(?v2 T_set$ )(?v3 T_set_set$ ))(=> (and (= ?v0 (fun_app$m ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (fun_app$l (image$g ?v1 )?v3 )))):named a38 ))
(assert (! (forall ((?v0 T$ )(?v1 T_N_sum_T_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$o ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$c ?v0 (image$i ?v1 ?v3 )))):named a39 ))
(assert (! (forall ((?v0 T$ )(?v1 T_dtree_sum_T_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$p ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$c ?v0 (image$j ?v1 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_T_N_sum_fun$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= ?v0 (fun_app$q ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$ ?v0 (image$k ?v1 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_T_dtree_sum_fun$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= ?v0 (fun_app$r ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$a ?v0 (image$l ?v1 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= ?v0 (fun_app$n ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$c ?v0 (fun_app$m (image$h ?v1 )?v3 )))):named a43 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$j ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (fun_app$c (image$a ?v1 )?v3 )))):named a44 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$s ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$b ?v1 ?v3 )))):named a45 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$t ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$ ?v1 ?v3 )))):named a46 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$k ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (fun_app$g (image$c ?v1 )?v3 )))):named a47 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$ (inr$ ?v0 )(image$ (fun_app$a (map_sum$ id$ )root$ )(cont$ ?v1 )))(and (member$a (inr$a (fun_app$ (subtrOf$ ?v1 )?v0 ))(cont$ ?v1 ))(= (fun_app$b root$ (fun_app$ (subtrOf$ ?v1 )?v0 ))?v0 )))):named a48 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$ (inr$ ?v0 )(image$ (fun_app$a (map_sum$ id$ )root$ )(cont$ ?v1 )))(member$a (inr$a (fun_app$ (subtrOf$ ?v1 )?v0 ))(cont$ ?v1 )))):named a49 ))
(check-sat )
;(get-unsat-core )
