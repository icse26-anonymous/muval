;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_fun$ 0 )
(declare-sort N_N_sum_N_N_sum_fun$ 0 )
(declare-sort N_T_sum_N_T_sum_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_fun_T_T_fun_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_N_sum_N_N_sum_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_N_sum_N_dtree_sum_fun$ 0 )
(declare-sort N_N_sum_dtree_N_sum_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort N_dtree_sum_N_N_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_N_sum_N_dtree_sum_fun$ 0 )
(declare-sort Dtree_N_sum_dtree_N_sum_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_N_sum_fun$ 0 )
(declare-sort N_N_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_sum_N_dtree_sum_fun$ 0 )
(declare-sort N_dtree_sum_dtree_N_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_dtree_sum_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_N_sum_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-datatypes ()((T_N_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ N$ )))(T_dtree_sum$ (inl$a (projl$a T$ ))(inr$a (projr$a Dtree$ )))(N_dtree_sum$ (inl$b (projl$b N$ ))(inr$b (projr$b Dtree$ )))(T_T_sum$ (inl$c (projl$c T$ ))(inr$c (projr$c T$ )))(N_T_sum$ (inl$d (projl$d N$ ))(inr$d (projr$d T$ )))(N_N_sum$ (inl$e (projl$e N$ ))(inr$e (projr$e N$ )))(Dtree_dtree_sum$ (inl$f (projl$f Dtree$ ))(inr$f (projr$f Dtree$ )))(Dtree_N_sum$ (inl$g (projl$g Dtree$ ))(inr$g (projr$g N$ )))))
(declare-fun h$ (Dtree$ )N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun uu$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun h_c$ (Dtree$ )N_T_N_sum_set_fun$ )
(declare-fun h_r$ (Dtree$ )N_N_fun$ )
(declare-fun id$a ()Dtree_dtree_fun$ )
(declare-fun id$b ()N_N_fun$ )
(declare-fun id$c ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$d ()T_set_T_set_fun$ )
(declare-fun id$e ()N_set_N_set_fun$ )
(declare-fun id$f ()Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun id$g ()T_T_sum_T_T_sum_fun$ )
(declare-fun id$h ()T_N_sum_T_N_sum_fun$ )
(declare-fun id$i ()N_T_sum_N_T_sum_fun$ )
(declare-fun id$j ()N_N_sum_N_N_sum_fun$ )
(declare-fun id$k ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun uua$ (N_set$ )N_bool_fun$ )
(declare-fun comp$ (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ )N_dtree_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun t_tr$ ()T_dtree_sum$ )
(declare-fun top$a ()T_dtree_sum_set$ )
(declare-fun comp$a (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$b (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun comp$c (T_T_fun$ )T_T_fun_T_T_fun_fun$ )
(declare-fun comp$d (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$e (N_N_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun comp$f (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$g (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$h (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$i (N_N_sum_N_N_sum_fun$ Dtree_dtree_sum_N_N_sum_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun comp$j (N_dtree_sum_N_N_sum_fun$ Dtree_N_sum_N_dtree_sum_fun$ )Dtree_N_sum_N_N_sum_fun$ )
(declare-fun comp$k (N_N_sum_N_dtree_sum_fun$ Dtree_dtree_sum_N_N_sum_fun$ )Dtree_dtree_sum_N_dtree_sum_fun$ )
(declare-fun comp$l (Dtree_N_sum_N_N_sum_fun$ N_dtree_sum_dtree_N_sum_fun$ )N_dtree_sum_N_N_sum_fun$ )
(declare-fun comp$m (Dtree_dtree_sum_N_N_sum_fun$ N_N_sum_dtree_dtree_sum_fun$ )N_N_sum_N_N_sum_fun$ )
(declare-fun comp$n (Dtree_N_sum_N_dtree_sum_fun$ N_dtree_sum_dtree_N_sum_fun$ )N_dtree_sum_N_dtree_sum_fun$ )
(declare-fun comp$o (N_N_sum_dtree_N_sum_fun$ Dtree_dtree_sum_N_N_sum_fun$ )Dtree_dtree_sum_dtree_N_sum_fun$ )
(declare-fun comp$p (N_dtree_sum_dtree_N_sum_fun$ Dtree_N_sum_N_dtree_sum_fun$ )Dtree_N_sum_dtree_N_sum_fun$ )
(declare-fun comp$q (N_N_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum_N_N_sum_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun comp$r (T_N_sum_T_N_sum_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun deftr$ ()N_dtree_fun$ )
(declare-fun image$ (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun image$a (T_dtree_sum_N_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun image$b (N_T_dtree_sum_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun image$c (N_N_fun$ )N_set_N_set_fun$ )
(declare-fun image$d (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun collect$ (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun map_sum$ (T_T_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun collect$a (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$b (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$c (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$d (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$e (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(declare-fun fun_app$f (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$g (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$h (N_N_fun$ N$ )N$ )
(declare-fun fun_app$i (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$j (T_T_fun_T_T_fun_fun$ T_T_fun$ )T_T_fun$ )
(declare-fun fun_app$k (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$l (N_N_fun_N_N_fun_fun$ N_N_fun$ )N_N_fun$ )
(declare-fun fun_app$m (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$n (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$o (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$p (T_set_T_set_fun$ T_set$ )T_set$ )
(declare-fun fun_app$q (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun fun_app$r (T_T_fun$ T$ )T$ )
(declare-fun fun_app$s (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$t (N_dtree_sum_N_dtree_sum_fun$ N_dtree_sum$ )N_dtree_sum$ )
(declare-fun fun_app$u (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$v (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$w (N_T_sum_N_T_sum_fun$ N_T_sum$ )N_T_sum$ )
(declare-fun fun_app$x (N_N_sum_N_N_sum_fun$ N_N_sum$ )N_N_sum$ )
(declare-fun fun_app$y (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$z (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun map_sum$a (N_N_fun$ Dtree_dtree_fun$ )N_dtree_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$b (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun map_sum$c (T_T_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun map_sum$d (N_N_fun$ T_T_fun$ )N_T_sum_N_T_sum_fun$ )
(declare-fun map_sum$e (N_N_fun$ N_N_fun$ )N_N_sum_N_N_sum_fun$ )
(declare-fun map_sum$f (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$g (Dtree_N_fun$ Dtree_N_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun map_sum$h (N_N_fun$ Dtree_N_fun$ )N_dtree_sum_N_N_sum_fun$ )
(declare-fun map_sum$i (Dtree_N_fun$ N_dtree_fun$ )Dtree_N_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$j (Dtree_N_fun$ N_N_fun$ )Dtree_N_sum_N_N_sum_fun$ )
(declare-fun map_sum$k (N_N_fun$ N_dtree_fun$ )N_N_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$l (Dtree_N_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$m (N_dtree_fun$ Dtree_N_fun$ )N_dtree_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$n (N_dtree_fun$ N_dtree_fun$ )N_N_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$o (N_dtree_fun$ N_N_fun$ )N_N_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$p (Dtree_dtree_fun$ Dtree_N_fun$ )Dtree_dtree_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$q (Dtree_dtree_fun$ N_N_fun$ )Dtree_N_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$r (Dtree_dtree_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun fun_app$aa (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum$ )N_N_sum$ )
(declare-fun fun_app$ab (N_dtree_sum_N_N_sum_fun$ N_dtree_sum$ )N_N_sum$ )
(declare-fun fun_app$ac (Dtree_N_sum_N_dtree_sum_fun$ Dtree_N_sum$ )N_dtree_sum$ )
(declare-fun fun_app$ad (Dtree_N_sum_N_N_sum_fun$ Dtree_N_sum$ )N_N_sum$ )
(declare-fun fun_app$ae (N_N_sum_N_dtree_sum_fun$ N_N_sum$ )N_dtree_sum$ )
(declare-fun fun_app$af (Dtree_dtree_sum_N_dtree_sum_fun$ Dtree_dtree_sum$ )N_dtree_sum$ )
(declare-fun fun_app$ag (N_dtree_sum_dtree_N_sum_fun$ N_dtree_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$ah (N_N_sum_dtree_dtree_sum_fun$ N_N_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$ai (N_N_sum_dtree_N_sum_fun$ N_N_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$aj (Dtree_dtree_sum_dtree_N_sum_fun$ Dtree_dtree_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$ak (Dtree_N_sum_dtree_N_sum_fun$ Dtree_N_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$al (Dtree_dtree_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$am (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$an (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$ao (T_dtree_sum_N_fun$ T_dtree_sum$ )N$ )
(declare-fun fun_app$ap (N_T_dtree_sum_fun$ N$ )T_dtree_sum$ )
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (= (fun_app$b (map_sum$ id$ (fun_app$c (comp$ (fun_app$d (comp$a root$ )(h$ tr0$ )))root$ ))t_tr$ )(fun_app$b (map_sum$ id$ root$ )t_tr$ ))):named a2 ))
(assert (! (fun_app$a (fun_app$e (inItr$ top$ )tr0$ )n$ ):named a3 ))
(assert (! (member$ t_tr$ (cont$ (fun_app$f (pick$ tr0$ )n$ ))):named a4 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$g root$ (fun_app$f (h$ tr0$ )?v0 ))(fun_app$g root$ (fun_app$f (pick$ tr0$ )?v0 )))):named a5 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$h (h_r$ tr0$ )?v0 )(fun_app$g root$ (fun_app$f (pick$ tr0$ )?v0 ))):pattern ((fun_app$h (h_r$ tr0$ )?v0 )))):named a6 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$e (inItr$ top$ )tr0$ )?v0 )(= (fun_app$g root$ (fun_app$f (pick$ tr0$ )?v0 ))?v0 ))):named a7 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$i (comp$b ?v0 )id$a )?v0 )):named a8 ))
(assert (! (forall ((?v0 T_T_fun$ ))(= (fun_app$j (comp$c ?v0 )id$ )?v0 )):named a9 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$k (comp$d ?v0 )id$b )?v0 )):named a10 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$l (comp$e ?v0 )id$b )?v0 )):named a11 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$m (comp$f id$a )?v0 )?v0 )):named a12 ))
(assert (! (forall ((?v0 T_T_fun$ ))(= (fun_app$j (comp$c id$ )?v0 )?v0 )):named a13 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$l (comp$e id$b )?v0 )?v0 )):named a14 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$c (comp$ id$b )?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$m (comp$f id$a )?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 T_T_fun$ ))(= (fun_app$j (comp$c id$ )?v0 )?v0 )):named a17 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$l (comp$e id$b )?v0 )?v0 )):named a18 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$c (comp$ id$b )?v0 )?v0 )):named a19 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$e (inItr$ top$ )tr0$ )?v0 )(= (fun_app$g root$ (fun_app$f (h$ tr0$ )?v0 ))?v0 ))):named a20 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (fun_app$g root$ (fun_app$f (h$ ?v0 )?v1 ))(fun_app$g root$ (fun_app$f (pick$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$n id$a ?v0 )?v0 ):pattern ((fun_app$n id$a ?v0 )))):named a22 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(! (= (fun_app$o id$c ?v0 )?v0 ):pattern ((fun_app$o id$c ?v0 )))):named a23 ))
(assert (! (forall ((?v0 T_set$ ))(! (= (fun_app$p id$d ?v0 )?v0 ):pattern ((fun_app$p id$d ?v0 )))):named a24 ))
(assert (! (forall ((?v0 N_set$ ))(! (= (fun_app$q id$e ?v0 )?v0 ):pattern ((fun_app$q id$e ?v0 )))):named a25 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(! (= (fun_app$c id$f ?v0 )?v0 ):pattern ((fun_app$c id$f ?v0 )))):named a26 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$r id$ ?v0 )?v0 ):pattern ((fun_app$r id$ ?v0 )))):named a27 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$h id$b ?v0 )?v0 ):pattern ((fun_app$h id$b ?v0 )))):named a28 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$f (fun_app$m (comp$f ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$m (comp$f ?v0 )?v1 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$g (fun_app$i (comp$b ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$i (comp$b ?v0 )?v1 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_fun$ )(?v2 T$ ))(! (= (fun_app$r (fun_app$j (comp$c ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$j (comp$c ?v0 )?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$f (fun_app$k (comp$d ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$k (comp$d ?v0 )?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$h (fun_app$l (comp$e ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$l (comp$e ?v0 )?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$g (fun_app$c (comp$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$c (comp$ ?v0 )?v1 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$h (fun_app$d (comp$a ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$d (comp$a ?v0 )?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$n (fun_app$s (comp$g ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$s (comp$g ?v0 )?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 N_dtree_sum$ ))(= (fun_app$t (map_sum$a id$b id$a )?v0 )?v0 )):named a37 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$u (map_sum$b id$ id$ )?v0 )?v0 )):named a38 ))
(assert (! (forall ((?v0 T_N_sum$ ))(= (fun_app$v (map_sum$c id$ id$b )?v0 )?v0 )):named a39 ))
(assert (! (forall ((?v0 N_T_sum$ ))(= (fun_app$w (map_sum$d id$b id$ )?v0 )?v0 )):named a40 ))
(assert (! (forall ((?v0 N_N_sum$ ))(= (fun_app$x (map_sum$e id$b id$b )?v0 )?v0 )):named a41 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (fun_app$y (fun_app$z (map_sum$f id$ )id$a )?v0 )?v0 )):named a42 ))
(assert (! (= (map_sum$b id$ id$ )id$g ):named a43 ))
(assert (! (= (map_sum$c id$ id$b )id$h ):named a44 ))
(assert (! (= (map_sum$d id$b id$ )id$i ):named a45 ))
(assert (! (= (map_sum$e id$b id$b )id$j ):named a46 ))
(assert (! (= (fun_app$z (map_sum$f id$ )id$a )id$k ):named a47 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$x (map_sum$e ?v0 ?v1 )(fun_app$aa (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$aa (map_sum$g (fun_app$c (comp$ ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 ))?v4 ))):named a48 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$ab (map_sum$h ?v0 ?v1 )(fun_app$ac (map_sum$i ?v2 ?v3 )?v4 ))(fun_app$ad (map_sum$j (fun_app$c (comp$ ?v0 )?v2 )(fun_app$d (comp$a ?v1 )?v3 ))?v4 ))):named a49 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ae (map_sum$k ?v0 ?v1 )(fun_app$aa (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$af (map_sum$l (fun_app$c (comp$ ?v0 )?v2 )(fun_app$s (comp$g ?v1 )?v3 ))?v4 ))):named a50 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$ad (map_sum$j ?v0 ?v1 )(fun_app$ag (map_sum$m ?v2 ?v3 )?v4 ))(fun_app$ab (map_sum$h (fun_app$d (comp$a ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 ))?v4 ))):named a51 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_sum$ ))(= (fun_app$aa (map_sum$g ?v0 ?v1 )(fun_app$ah (map_sum$n ?v2 ?v3 )?v4 ))(fun_app$x (map_sum$e (fun_app$d (comp$a ?v0 )?v2 )(fun_app$d (comp$a ?v1 )?v3 ))?v4 ))):named a52 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$ac (map_sum$i ?v0 ?v1 )(fun_app$ag (map_sum$m ?v2 ?v3 )?v4 ))(fun_app$t (map_sum$a (fun_app$d (comp$a ?v0 )?v2 )(fun_app$s (comp$g ?v1 )?v3 ))?v4 ))):named a53 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ai (map_sum$o ?v0 ?v1 )(fun_app$aa (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$aj (map_sum$p (fun_app$s (comp$g ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 ))?v4 ))):named a54 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$ag (map_sum$m ?v0 ?v1 )(fun_app$ac (map_sum$i ?v2 ?v3 )?v4 ))(fun_app$ak (map_sum$q (fun_app$s (comp$g ?v0 )?v2 )(fun_app$d (comp$a ?v1 )?v3 ))?v4 ))):named a55 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ah (map_sum$n ?v0 ?v1 )(fun_app$aa (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$al (map_sum$r (fun_app$s (comp$g ?v0 )?v2 )(fun_app$s (comp$g ?v1 )?v3 ))?v4 ))):named a56 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$v (map_sum$c ?v0 ?v1 )(fun_app$b (map_sum$ ?v2 ?v3 )?v4 ))(fun_app$b (map_sum$ (fun_app$j (comp$c ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 ))?v4 ))):named a57 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$x (map_sum$e ?v0 ?v1 )(fun_app$aa (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$aa (map_sum$g (fun_app$c (comp$ ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 ))?v4 ))):named a58 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$ab (map_sum$h ?v0 ?v1 )(fun_app$ac (map_sum$i ?v2 ?v3 )?v4 ))(fun_app$ad (map_sum$j (fun_app$c (comp$ ?v0 )?v2 )(fun_app$d (comp$a ?v1 )?v3 ))?v4 ))):named a59 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ae (map_sum$k ?v0 ?v1 )(fun_app$aa (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$af (map_sum$l (fun_app$c (comp$ ?v0 )?v2 )(fun_app$s (comp$g ?v1 )?v3 ))?v4 ))):named a60 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$ad (map_sum$j ?v0 ?v1 )(fun_app$ag (map_sum$m ?v2 ?v3 )?v4 ))(fun_app$ab (map_sum$h (fun_app$d (comp$a ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 ))?v4 ))):named a61 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_sum$ ))(= (fun_app$aa (map_sum$g ?v0 ?v1 )(fun_app$ah (map_sum$n ?v2 ?v3 )?v4 ))(fun_app$x (map_sum$e (fun_app$d (comp$a ?v0 )?v2 )(fun_app$d (comp$a ?v1 )?v3 ))?v4 ))):named a62 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_sum$ ))(= (fun_app$ac (map_sum$i ?v0 ?v1 )(fun_app$ag (map_sum$m ?v2 ?v3 )?v4 ))(fun_app$t (map_sum$a (fun_app$d (comp$a ?v0 )?v2 )(fun_app$s (comp$g ?v1 )?v3 ))?v4 ))):named a63 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ai (map_sum$o ?v0 ?v1 )(fun_app$aa (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$aj (map_sum$p (fun_app$s (comp$g ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 ))?v4 ))):named a64 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_sum$ ))(= (fun_app$ag (map_sum$m ?v0 ?v1 )(fun_app$ac (map_sum$i ?v2 ?v3 )?v4 ))(fun_app$ak (map_sum$q (fun_app$s (comp$g ?v0 )?v2 )(fun_app$d (comp$a ?v1 )?v3 ))?v4 ))):named a65 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ah (map_sum$n ?v0 ?v1 )(fun_app$aa (map_sum$g ?v2 ?v3 )?v4 ))(fun_app$al (map_sum$r (fun_app$s (comp$g ?v0 )?v2 )(fun_app$s (comp$g ?v1 )?v3 ))?v4 ))):named a66 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$v (map_sum$c ?v0 ?v1 )(fun_app$b (map_sum$ ?v2 ?v3 )?v4 ))(fun_app$b (map_sum$ (fun_app$j (comp$c ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 ))?v4 ))):named a67 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (fun_app$a (fun_app$e (inItr$ top$ )?v0 )?v1 )(= (fun_app$g root$ (fun_app$f (pick$ ?v0 )?v1 ))?v1 ))):named a68 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (fun_app$h (h_r$ ?v0 )?v1 )(fun_app$g root$ (fun_app$f (pick$ ?v0 )?v1 ))):pattern ((fun_app$h (h_r$ ?v0 )?v1 )))):named a69 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$c (comp$ ?v0 )?v1 )?v2 )(= (fun_app$h ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$g ?v2 ?v3 )))):named a70 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$d (comp$a ?v0 )?v1 )?v2 )(= (fun_app$g ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$h ?v2 ?v3 )))):named a71 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$s (comp$g ?v0 )?v1 )?v2 )(= (fun_app$f ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$n ?v2 ?v3 )))):named a72 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$c (comp$ ?v0 )?v1 )(fun_app$c (comp$ ?v2 )?v3 ))(= (fun_app$h ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$g ?v3 ?v4 ))))):named a73 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$d (comp$a ?v0 )?v1 )(fun_app$d (comp$a ?v2 )?v3 ))(= (fun_app$g ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$g ?v2 (fun_app$f ?v3 ?v4 ))))):named a74 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$s (comp$g ?v0 )?v1 )(fun_app$s (comp$g ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$g ?v3 ?v4 ))))):named a75 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$c (comp$ ?v0 )?v1 )(fun_app$c (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$h ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$g ?v3 ?v4 ))))false ))false )):named a76 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$d (comp$a ?v0 )?v1 )(fun_app$d (comp$a ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$g ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$g ?v2 (fun_app$f ?v3 ?v4 ))))false ))false )):named a77 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$s (comp$g ?v0 )?v1 )(fun_app$s (comp$g ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$f ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$g ?v3 ?v4 ))))false ))false )):named a78 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$g (fun_app$c (comp$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$c (comp$ ?v0 )?v1 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$h (fun_app$d (comp$a ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$d (comp$a ?v0 )?v1 )?v2 )))):named a80 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$n (fun_app$s (comp$g ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$s (comp$g ?v0 )?v1 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$i (comp$b (fun_app$c (comp$ ?v0 )?v1 ))?v2 )(fun_app$c (comp$ ?v0 )(fun_app$i (comp$b ?v1 )?v2 )))):named a82 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$l (comp$e (fun_app$d (comp$a ?v0 )?v1 ))?v2 )(fun_app$d (comp$a ?v0 )(fun_app$k (comp$d ?v1 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$m (comp$f (fun_app$s (comp$g ?v0 )?v1 ))?v2 )(fun_app$k (comp$d ?v0 )(fun_app$d (comp$a ?v1 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$am (comp$h (fun_app$s (comp$g ?v0 )?v1 ))?v2 )(fun_app$s (comp$g ?v0 )(fun_app$i (comp$b ?v1 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$c (comp$ (fun_app$l (comp$e ?v0 )?v1 ))?v2 )(fun_app$c (comp$ ?v0 )(fun_app$c (comp$ ?v1 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$c (comp$ (fun_app$d (comp$a ?v0 )?v1 ))?v2 )(fun_app$i (comp$b ?v0 )(fun_app$s (comp$g ?v1 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$d (comp$a (fun_app$i (comp$b ?v0 )?v1 ))?v2 )(fun_app$d (comp$a ?v0 )(fun_app$m (comp$f ?v1 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$d (comp$a (fun_app$c (comp$ ?v0 )?v1 ))?v2 )(fun_app$l (comp$e ?v0 )(fun_app$d (comp$a ?v1 )?v2 )))):named a89 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$s (comp$g (fun_app$m (comp$f ?v0 )?v1 ))?v2 )(fun_app$am (comp$h ?v0 )(fun_app$s (comp$g ?v1 )?v2 )))):named a90 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$s (comp$g (fun_app$k (comp$d ?v0 )?v1 ))?v2 )(fun_app$s (comp$g ?v0 )(fun_app$c (comp$ ?v1 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$k (comp$d ?v0 )(fun_app$d (comp$a ?v1 )?v2 ))(fun_app$m (comp$f (fun_app$s (comp$g ?v0 )?v1 ))?v2 ))):named a92 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$l (comp$e ?v0 )(fun_app$d (comp$a ?v1 )?v2 ))(fun_app$d (comp$a (fun_app$c (comp$ ?v0 )?v1 ))?v2 ))):named a93 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$i (comp$b ?v0 )(fun_app$s (comp$g ?v1 )?v2 ))(fun_app$c (comp$ (fun_app$d (comp$a ?v0 )?v1 ))?v2 ))):named a94 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$am (comp$h ?v0 )(fun_app$s (comp$g ?v1 )?v2 ))(fun_app$s (comp$g (fun_app$m (comp$f ?v0 )?v1 ))?v2 ))):named a95 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$c (comp$ ?v0 )(fun_app$i (comp$b ?v1 )?v2 ))(fun_app$i (comp$b (fun_app$c (comp$ ?v0 )?v1 ))?v2 ))):named a96 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$c (comp$ ?v0 )(fun_app$c (comp$ ?v1 )?v2 ))(fun_app$c (comp$ (fun_app$l (comp$e ?v0 )?v1 ))?v2 ))):named a97 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$d (comp$a ?v0 )(fun_app$k (comp$d ?v1 )?v2 ))(fun_app$l (comp$e (fun_app$d (comp$a ?v0 )?v1 ))?v2 ))):named a98 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$d (comp$a ?v0 )(fun_app$m (comp$f ?v1 )?v2 ))(fun_app$d (comp$a (fun_app$i (comp$b ?v0 )?v1 ))?v2 ))):named a99 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$s (comp$g ?v0 )(fun_app$i (comp$b ?v1 )?v2 ))(fun_app$am (comp$h (fun_app$s (comp$g ?v0 )?v1 ))?v2 ))):named a100 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$s (comp$g ?v0 )(fun_app$c (comp$ ?v1 )?v2 ))(fun_app$s (comp$g (fun_app$k (comp$d ?v0 )?v1 ))?v2 ))):named a101 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$r id$ ?v0 )?v0 ):pattern ((fun_app$r id$ ?v0 )))):named a102 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$h id$b ?v0 )?v0 ):pattern ((fun_app$h id$b ?v0 )))):named a103 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (fun_app$a (fun_app$e (inItr$ top$ )?v0 )?v1 )(= (fun_app$g root$ (fun_app$f (h$ ?v0 )?v1 ))?v1 ))):named a104 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$g root$ ?v0 )?v1 )(fun_app$a (fun_app$e (inItr$ ?v1 )?v0 )(fun_app$g root$ ?v0 )))):named a105 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$a (fun_app$e (inItr$ ?v0 )?v1 )?v2 )(member$a (fun_app$g root$ ?v1 )?v0 ))):named a106 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$c (comp$ ?v0 )?v1 )(fun_app$c (comp$ id$b )?v2 ))(= (fun_app$h ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$g ?v2 ?v3 )))):named a107 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$d (comp$a ?v0 )?v1 )(fun_app$l (comp$e id$b )?v2 ))(= (fun_app$g ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$h ?v2 ?v3 )))):named a108 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$s (comp$g ?v0 )?v1 )(fun_app$am (comp$h id$a )?v2 ))(= (fun_app$f ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$n ?v2 ?v3 )))):named a109 ))
(assert (! (= (comp$ id$b )id$f ):named a110 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$i (map_sum$e ?v0 ?v1 )(map_sum$g ?v2 ?v3 ))(map_sum$g (fun_app$c (comp$ ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 )))):named a111 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(= (comp$j (map_sum$h ?v0 ?v1 )(map_sum$i ?v2 ?v3 ))(map_sum$j (fun_app$c (comp$ ?v0 )?v2 )(fun_app$d (comp$a ?v1 )?v3 )))):named a112 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$k (map_sum$k ?v0 ?v1 )(map_sum$g ?v2 ?v3 ))(map_sum$l (fun_app$c (comp$ ?v0 )?v2 )(fun_app$s (comp$g ?v1 )?v3 )))):named a113 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$l (map_sum$j ?v0 ?v1 )(map_sum$m ?v2 ?v3 ))(map_sum$h (fun_app$d (comp$a ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 )))):named a114 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_dtree_fun$ ))(= (comp$m (map_sum$g ?v0 ?v1 )(map_sum$n ?v2 ?v3 ))(map_sum$e (fun_app$d (comp$a ?v0 )?v2 )(fun_app$d (comp$a ?v1 )?v3 )))):named a115 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$n (map_sum$i ?v0 ?v1 )(map_sum$m ?v2 ?v3 ))(map_sum$a (fun_app$d (comp$a ?v0 )?v2 )(fun_app$s (comp$g ?v1 )?v3 )))):named a116 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$o (map_sum$o ?v0 ?v1 )(map_sum$g ?v2 ?v3 ))(map_sum$p (fun_app$s (comp$g ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 )))):named a117 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(= (comp$p (map_sum$m ?v0 ?v1 )(map_sum$i ?v2 ?v3 ))(map_sum$q (fun_app$s (comp$g ?v0 )?v2 )(fun_app$d (comp$a ?v1 )?v3 )))):named a118 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$q (map_sum$n ?v0 ?v1 )(map_sum$g ?v2 ?v3 ))(map_sum$r (fun_app$s (comp$g ?v0 )?v2 )(fun_app$s (comp$g ?v1 )?v3 )))):named a119 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$r (map_sum$c ?v0 ?v1 )(map_sum$ ?v2 ?v3 ))(map_sum$ (fun_app$j (comp$c ?v0 )?v2 )(fun_app$c (comp$ ?v1 )?v3 )))):named a120 ))
(assert (! (forall ((?v0 N$ ))(=> (and (wf$ tr0$ )(fun_app$a (fun_app$e (inItr$ top$ )tr0$ )?v0 ))(wf$ (fun_app$f (pick$ tr0$ )?v0 )))):named a121 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$e (inItr$ top$ )tr0$ )?v0 )(and (subtr$ top$ (fun_app$f (pick$ tr0$ )?v0 )tr0$ )(= (fun_app$g root$ (fun_app$f (pick$ tr0$ )?v0 ))?v0 )))):named a122 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (and (fun_app$a (fun_app$e (inItr$ top$ )tr0$ )?v0 )(subtr$ top$ ?v1 (fun_app$f (h$ tr0$ )?v0 )))(exists ((?v2 N$ ))(and (fun_app$a (fun_app$e (inItr$ top$ )tr0$ )?v2 )(= ?v1 (fun_app$f (h$ tr0$ )?v2 )))))):named a123 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$e (inItr$ top$ )tr0$ )?v0 )(subtr$ top$ (fun_app$f (pick$ tr0$ )?v0 )tr0$ ))):named a124 ))
(assert (! (= (h$ tr0$ )(fun_app$an (unfold$ (h_r$ tr0$ ))(h_c$ tr0$ ))):named a125 ))
(assert (! (= (fun_app$d (comp$a root$ )deftr$ )id$b ):named a126 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (member$ ?v0 top$a )true )):named a127 ))
(assert (! (forall ((?v0 N$ ))(= (member$a ?v0 top$ )true )):named a128 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(member$ ?v0 top$a )):named a129 ))
(assert (! (forall ((?v0 N$ ))(member$a ?v0 top$ )):named a130 ))
(assert (! (forall ((?v0 N$ ))(= (cont$ (fun_app$f (h$ tr0$ )?v0 ))(fun_app$o (image$ (fun_app$z (map_sum$f id$ )(fun_app$s (comp$g (h$ tr0$ ))root$ )))(cont$ (fun_app$f (pick$ tr0$ )?v0 ))))):named a131 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$y ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (fun_app$o (image$ ?v1 )?v3 )))):named a132 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_N_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$ao ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$a ?v1 ?v3 )))):named a133 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 N_T_dtree_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$ap ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$b ?v1 ?v3 )))):named a134 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$h ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (fun_app$q (image$c ?v1 )?v3 )))):named a135 ))
(assert (! (= (image$d id$ )id$d ):named a136 ))
(assert (! (= (image$c id$b )id$e ):named a137 ))
(assert (! (= (image$ id$k )id$c ):named a138 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$g root$ (fun_app$f deftr$ ?v0 ))?v0 )):named a139 ))
(assert (! (forall ((?v0 N$ ))(wf$ (fun_app$f deftr$ ?v0 ))):named a140 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$ (uu$ ?v0 ))?v0 )):named a141 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$a (uua$ ?v0 ))?v0 )):named a142 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$ ?v1 ?v0 ))):named a143 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$a ?v0 (collect$a ?v1 ))(fun_app$a ?v1 ?v0 ))):named a144 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(subtr$ ?v1 ?v2 ?v0 ))(wf$ ?v2 ))):named a145 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$ (fun_app$y ?v2 ?v0 )(fun_app$o (image$ ?v2 )?v1 )))):named a146 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_N_fun$ ))(=> (member$ ?v0 ?v1 )(member$a (fun_app$ao ?v2 ?v0 )(image$a ?v2 ?v1 )))):named a147 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_T_dtree_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$ (fun_app$ap ?v2 ?v0 )(image$b ?v2 ?v1 )))):named a148 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_N_fun$ ))(=> (member$a ?v0 ?v1 )(member$a (fun_app$h ?v2 ?v0 )(fun_app$q (image$c ?v2 )?v1 )))):named a149 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$y ?v3 ?v0 )))(member$ ?v2 (fun_app$o (image$ ?v3 )?v1 )))):named a150 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 N$ )(?v3 T_dtree_sum_N_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$ao ?v3 ?v0 )))(member$a ?v2 (image$a ?v3 ?v1 )))):named a151 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 T_dtree_sum$ )(?v3 N_T_dtree_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$ap ?v3 ?v0 )))(member$ ?v2 (image$b ?v3 ?v1 )))):named a152 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ )(?v3 N_N_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$h ?v3 ?v0 )))(member$a ?v2 (fun_app$q (image$c ?v3 )?v1 )))):named a153 ))
(check-sat )
;(get-unsat-core )
