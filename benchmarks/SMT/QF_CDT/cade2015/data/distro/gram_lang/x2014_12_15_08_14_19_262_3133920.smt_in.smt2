;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun h$ (Dtree$ N$ )Dtree$ )
(declare-fun t$ ()T$ )
(declare-fun fr$ (N_set$ Dtree$ )T_set$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ N$ )Dtree$ )
(declare-fun rcut$ (Dtree$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun top$a ()T_dtree_sum_set$ )
(declare-fun top$b ()T_set$ )
(declare-fun inFr2$ (N_set$ Dtree$ T$ )Bool )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun member$a (T$ T_set$ )Bool )
(declare-fun member$b (N$ N_set$ )Bool )
(declare-fun hsubst_c$ (Dtree$ Dtree$ )T_dtree_sum_set$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (and (member$ (inl$ t$ )(cont$ ?v0 ))(subtr$ top$ ?v0 (h$ tr0$ (root$ tr0$ ))))thesis$ )):named a1 ))
(assert (! (member$a t$ (fr$ top$ (rcut$ tr0$ ))):named a2 ))
(assert (! (= (rcut$ tr0$ )(h$ tr0$ (root$ tr0$ ))):named a3 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v2 ?v3 ))(subtr$ ?v0 ?v1 ?v3 ))):named a4 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$b (root$ ?v2 )?v0 ))):named a5 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$b (root$ ?v1 )?v0 ))):named a6 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (root$ ?v0 )?v1 )(subtr$ ?v1 ?v0 ?v0 ))):named a7 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (h$ tr0$ ?v0 ))(root$ (pick$ tr0$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (and (inItr$ top$ tr0$ ?v0 )(subtr$ top$ ?v1 (h$ tr0$ ?v0 )))(exists ((?v2 N$ ))(and (inItr$ top$ tr0$ ?v2 )(= ?v1 (h$ tr0$ ?v2 )))))):named a9 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (member$ ?v0 top$a )true )):named a12 ))
(assert (! (forall ((?v0 T$ ))(= (member$a ?v0 top$b )true )):named a13 ))
(assert (! (forall ((?v0 N$ ))(= (member$b ?v0 top$ )true )):named a14 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(member$ ?v0 top$a )):named a15 ))
(assert (! (forall ((?v0 T$ ))(member$a ?v0 top$b )):named a16 ))
(assert (! (forall ((?v0 N$ ))(member$b ?v0 top$ )):named a17 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(= (root$ (h$ tr0$ ?v0 ))?v0 ))):named a18 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (hsubst_c$ ?v0 ?v1 )(ite (= (root$ ?v1 )(root$ ?v0 ))(cont$ ?v0 )(cont$ ?v1 ))):pattern ((hsubst_c$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$b (root$ ?v0 )?v1 )(member$ (inl$ ?v2 )(cont$ ?v0 )))(inFr2$ ?v1 ?v0 ?v2 ))):named a21 ))
(check-sat )
;(get-unsat-core )
