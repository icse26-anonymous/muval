;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_N_bool_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-sort N_N_N_fun_N_N_fun_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort N_N_fun_N_N_bool_fun_fun_fun$ 0 )
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_N_N_fun_N_N_bool_fun_fun_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort N_N_fun_N_N_N_fun_N_N_bool_fun_fun_fun_fun_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun g$ (N$ )Dtree$ )
(declare-fun s$ ()N_T_N_sum_set_fun$ )
(declare-fun id$ ()N_N_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ (N_set$ )N_bool_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun id$a ()Dtree_dtree_fun$ )
(declare-fun id$b (T_dtree_sum$ )T_dtree_sum$ )
(declare-fun id$c ()N_N_fun_N_N_fun_fun$ )
(declare-fun id$d ()N_set_N_set_fun$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun top$ ()N_set$ )
(declare-fun uua$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun comp$ (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun swap$ (N$ )N_N_N_fun_N_N_fun_fun_fun$ )
(declare-fun top$a ()Dtree_set$ )
(declare-fun top$b ()T_dtree_sum_set$ )
(declare-fun top$c ()N_bool_fun$ )
(declare-fun top$d ()Bool )
(declare-fun top$e ()T_dtree_sum_bool_fun$ )
(declare-fun top$f ()Dtree_bool_fun$ )
(declare-fun comp$a (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$b (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$c (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$d (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun comp$e (N_N_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun comp$f (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$g (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun deftr$ ()N_dtree_fun$ )
(declare-fun image$ (N_N_fun$ )N_set_N_set_fun$ )
(declare-fun inFr2$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun subtr$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun id_bnf$ ()N_N_fun$ )
(declare-fun image$a (N_T_dtree_sum_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun image$b (T_dtree_sum_N_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun image$c (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun subtr2$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun unfold$ (Dtree_N_fun$ )Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ )
(declare-fun collect$ (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun member$b (Dtree$ Dtree_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun unfold$a (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun collect$a (Dtree_bool_fun$ )Dtree_set$ )
(declare-fun collect$b (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$b (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$c (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$d (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$e (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$f (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(declare-fun fun_app$g (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$h (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$i (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun fun_app$j (N_set_dtree_T_bool_fun_fun_fun$ N_set$ )Dtree_T_bool_fun_fun$ )
(declare-fun fun_app$k (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(declare-fun fun_app$l (Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$m (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$n (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$o (N_N_fun$ N$ )N$ )
(declare-fun fun_app$p (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$q (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$r (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$s (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$t (N_N_fun_N_N_fun_fun$ N_N_fun$ )N_N_fun$ )
(declare-fun fun_app$u (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$v (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$w (Dtree_T_dtree_sum_set_fun$ Dtree$ )T_dtree_sum_set$ )
(declare-fun fun_app$x (N_N_bool_fun_fun$ N$ )N_bool_fun$ )
(declare-fun fun_app$y (N_N_fun_N_N_bool_fun_fun_fun$ N_N_fun$ )N_N_bool_fun_fun$ )
(declare-fun fun_app$z (N_N_N_fun_N_N_bool_fun_fun_fun_fun$ N$ )N_N_fun_N_N_bool_fun_fun_fun$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(declare-fun fun_app$aa (N_N_fun_N_N_N_fun_N_N_bool_fun_fun_fun_fun_fun$ N_N_fun$ )N_N_N_fun_N_N_bool_fun_fun_fun_fun$ )
(declare-fun fun_app$ab (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun fun_app$ac (N_T_dtree_sum_fun$ N$ )T_dtree_sum$ )
(declare-fun fun_app$ad (T_dtree_sum_N_fun$ T_dtree_sum$ )N$ )
(declare-fun fun_app$ae (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$af (N_N_N_fun_N_N_fun_fun_fun$ N$ )N_N_fun_N_N_fun_fun$ )
(declare-fun type_definition$ (Dtree_dtree_fun$ Dtree_dtree_fun$ Dtree_set$ )Bool )
(declare-fun type_definition$a (N_dtree_fun$ Dtree_N_fun$ Dtree_set$ )Bool )
(declare-fun type_definition$b (N_N_fun$ N_N_fun$ N_set$ )Bool )
(declare-fun type_definition$c (Dtree_N_fun$ N_dtree_fun$ N_set$ )Bool )
(declare-fun iso_tuple_update_accessor_eq_assist$ (N_N_fun_N_N_fun_fun$ )N_N_fun_N_N_N_fun_N_N_bool_fun_fun_fun_fun_fun$ )
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$a (uu$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uu$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (exists ((?v0 N_dtree_fun$ ))(and (reg$ ?v0 tr$ )(forall ((?v1 N$ ))(= (fun_app$b root$ (fun_app$c ?v0 ?v1 ))?v1 ))))):named a2 ))
(assert (! (reg$ f$ tr$ ):named a3 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(reg$ ?v1 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$b hsubst_r$ ?v0 )(fun_app$b root$ ?v0 )):pattern ((fun_app$b hsubst_r$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$b root$ (fun_app$c deftr$ ?v0 ))?v0 )):named a6 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(= (reg$ ?v0 ?v1 )(forall ((?v2 N_set$ )(?v3 Dtree$ ))(=> (fun_app$d (fun_app$e (fun_app$f subtr$ ?v2 )?v3 )?v1 )(= ?v3 (fun_app$c ?v0 (fun_app$b root$ ?v3 ))))))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$b root$ (fun_app$g (hsubst$ ?v0 )?v1 ))(fun_app$b root$ ?v1 ))):named a8 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$h (fun_app$i (fun_app$j inFr2$ ?v0 )?v1 )?v2 )(member$a (fun_app$b root$ ?v1 )?v0 ))):named a9 ))
(assert (! (forall ((?v0 N$ ))(= (g$ ?v0 )(ite (fun_app$a (fun_app$k (inItr$ top$ )tr$ )?v0 )(fun_app$c f$ ?v0 )(fun_app$c deftr$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$a (fun_app$k (inItr$ ?v0 )?v1 )?v2 )(member$a (fun_app$b root$ ?v1 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$b root$ ?v0 )?v1 )(fun_app$a (fun_app$k (inItr$ ?v1 )?v0 )(fun_app$b root$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v1 )?v2 )(member$a (fun_app$b root$ ?v2 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v1 )?v2 )(member$a (fun_app$b root$ ?v1 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$b root$ ?v0 )?v1 )(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v1 )?v0 )?v0 ))):named a15 ))
(assert (! (= subtr$ subtr2$ ):named a16 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (fun_app$a (fun_app$k (inItr$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v3 ))(fun_app$a (fun_app$k (inItr$ ?v0 )?v3 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v2 )?v3 ))(fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v3 ))):named a18 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v2 )?v3 ))(fun_app$d (fun_app$e (fun_app$f subtr2$ ?v0 )?v1 )?v3 ))):named a19 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$a (fun_app$k (inItr$ ?v0 )?v1 )?v2 )(exists ((?v3 Dtree$ ))(and (fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v3 )?v1 )(= (fun_app$b root$ ?v3 )?v2 ))))):named a20 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$b root$ ?v0 )?v1 )(fun_app$d (fun_app$e (fun_app$f subtr$ ?v1 )?v0 )?v0 ))):named a21 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v2 )(member$a (fun_app$b root$ ?v1 )?v0 ))):named a22 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v2 )(member$a (fun_app$b root$ ?v2 )?v0 ))):named a23 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(= (reg$ ?v0 ?v1 )(forall ((?v2 Dtree$ ))(=> (fun_app$d (fun_app$e (fun_app$f subtr$ top$ )?v2 )?v1 )(= ?v2 (fun_app$c ?v0 (fun_app$b root$ ?v2 ))))))):named a24 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$b root$ ?v0 )(fun_app$b root$ ?v1 ))(= (fun_app$g (hsubst$ ?v1 )?v0 )(fun_app$g (hsubst$ ?v1 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 Dtree$ ))(= (member$b ?v0 top$a )true )):named a26 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (member$ ?v0 top$b )true )):named a27 ))
(assert (! (forall ((?v0 N$ ))(= (member$a ?v0 top$ )true )):named a28 ))
(assert (! (forall ((?v0 Dtree$ ))(member$b ?v0 top$a )):named a29 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(member$ ?v0 top$b )):named a30 ))
(assert (! (forall ((?v0 N$ ))(member$a ?v0 top$ )):named a31 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$a top$c ?v0 )top$d ):pattern ((fun_app$a top$c ?v0 )))):named a32 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(! (= (fun_app$ top$e ?v0 )top$d ):pattern ((fun_app$ top$e ?v0 )))):named a33 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst$ ?v0 )(fun_app$l (unfold$ hsubst_r$ )(hsubst_c$ ?v0 ))):pattern ((hsubst$ ?v0 )))):named a34 ))
(assert (! (forall ((?v0 Dtree_set$ ))(=> (forall ((?v1 Dtree$ ))(member$b ?v1 ?v0 ))(= top$a ?v0 ))):named a35 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(=> (forall ((?v1 T_dtree_sum$ ))(member$ ?v1 ?v0 ))(= top$b ?v0 ))):named a36 ))
(assert (! (forall ((?v0 N_set$ ))(=> (forall ((?v1 N$ ))(member$a ?v1 ?v0 ))(= top$ ?v0 ))):named a37 ))
(assert (! (exists ((?v0 Dtree$ ))(member$b ?v0 top$a )):named a38 ))
(assert (! (exists ((?v0 T_dtree_sum$ ))(member$ ?v0 top$b )):named a39 ))
(assert (! (exists ((?v0 N$ ))(member$a ?v0 top$ )):named a40 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$h (fun_app$i (fun_app$j inFr$ ?v0 )?v1 )?v2 )(not (member$a (fun_app$b root$ ?v3 )?v0 )))(fun_app$h (fun_app$i (fun_app$j inFr$ ?v0 )(fun_app$g (hsubst$ ?v3 )?v1 ))?v2 ))):named a41 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$m (comp$ root$ )(hsubst$ ?v0 ))root$ )):named a42 ))
(assert (! (forall ((?v0 N$ ))(wf$ (fun_app$c deftr$ ?v0 ))):named a43 ))
(assert (! (= inFr$ inFr2$ ):named a44 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(wf$ ?v1 ))(wf$ (fun_app$g (hsubst$ ?v0 )?v1 )))):named a45 ))
(assert (! (= top$b (collect$ top$e )):named a46 ))
(assert (! (= top$a (collect$a top$f )):named a47 ))
(assert (! (= top$ (collect$b top$c )):named a48 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$h (fun_app$i (fun_app$j inFr$ ?v0 )?v1 )?v2 )(member$a (fun_app$b root$ ?v1 )?v0 ))):named a49 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$a (fun_app$b root$ ?v0 )?v1 ))(not (fun_app$h (fun_app$i (fun_app$j inFr$ ?v1 )?v0 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(fun_app$d (fun_app$e (fun_app$f subtr$ ?v1 )?v2 )?v0 ))(wf$ ?v2 ))):named a51 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$h (fun_app$i (fun_app$j inFr$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$e (fun_app$f subtr$ ?v0 )?v1 )?v3 ))(fun_app$h (fun_app$i (fun_app$j inFr$ ?v0 )?v3 )?v2 ))):named a52 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_T_dtree_sum_set_fun$ )(?v2 Dtree$ ))(= (fun_app$b root$ (fun_app$g (fun_app$l (unfold$ ?v0 )?v1 )?v2 ))(fun_app$b ?v0 ?v2 ))):named a53 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_T_N_sum_set_fun$ )(?v2 N$ ))(= (fun_app$b root$ (fun_app$c (fun_app$n (unfold$a ?v0 )?v1 )?v2 ))(fun_app$o ?v0 ?v2 ))):named a54 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$c (fun_app$p (comp$a ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$p (comp$a ?v0 )?v1 )?v2 )))):named a55 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$g (fun_app$q (comp$b ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$q (comp$b ?v0 )?v1 )?v2 )))):named a56 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$c (fun_app$r (comp$c ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$r (comp$c ?v0 )?v1 )?v2 )))):named a57 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$b (fun_app$s (comp$d ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$s (comp$d ?v0 )?v1 )?v2 )))):named a58 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$o (fun_app$t (comp$e ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$t (comp$e ?v0 )?v1 )?v2 )))):named a59 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$b (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$m (comp$ ?v0 )?v1 )?v2 )))):named a60 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )))):named a61 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree$ ))(=> (= (fun_app$b ?v0 (fun_app$g ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$g ?v4 ?v5 )))(= (fun_app$b (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$b (fun_app$m (comp$ ?v3 )?v4 )?v5 )))):named a62 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N$ ))(=> (= (fun_app$b ?v0 (fun_app$g ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$c ?v4 ?v5 )))(= (fun_app$b (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$o (fun_app$u (comp$f ?v3 )?v4 )?v5 )))):named a63 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree$ ))(=> (= (fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$g ?v4 ?v5 )))(= (fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )(fun_app$b (fun_app$m (comp$ ?v3 )?v4 )?v5 )))):named a64 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N$ ))(=> (= (fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$c ?v4 ?v5 )))(= (fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )(fun_app$o (fun_app$u (comp$f ?v3 )?v4 )?v5 )))):named a65 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree$ ))(=> (= (fun_app$b ?v0 (fun_app$g ?v1 ?v2 ))(fun_app$o ?v3 (fun_app$b ?v4 ?v5 )))(= (fun_app$b (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$b (fun_app$s (comp$d ?v3 )?v4 )?v5 )))):named a66 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ )(?v5 N$ ))(=> (= (fun_app$b ?v0 (fun_app$g ?v1 ?v2 ))(fun_app$o ?v3 (fun_app$o ?v4 ?v5 )))(= (fun_app$b (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$o (fun_app$t (comp$e ?v3 )?v4 )?v5 )))):named a67 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree$ ))(=> (= (fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$o ?v3 (fun_app$b ?v4 ?v5 )))(= (fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )(fun_app$b (fun_app$s (comp$d ?v3 )?v4 )?v5 )))):named a68 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ )(?v5 N$ ))(=> (= (fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$o ?v3 (fun_app$o ?v4 ?v5 )))(= (fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )(fun_app$o (fun_app$t (comp$e ?v3 )?v4 )?v5 )))):named a69 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 N$ ))(=> (= (fun_app$g ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$g ?v3 (fun_app$c ?v4 ?v5 )))(= (fun_app$c (fun_app$p (comp$a ?v0 )?v1 )?v2 )(fun_app$c (fun_app$p (comp$a ?v3 )?v4 )?v5 )))):named a70 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree$ ))(=> (= (fun_app$g ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$b ?v4 ?v5 )))(= (fun_app$c (fun_app$p (comp$a ?v0 )?v1 )?v2 )(fun_app$g (fun_app$q (comp$b ?v3 )?v4 )?v5 )))):named a71 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ ))(=> (= (fun_app$b ?v0 (fun_app$g ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$g ?v4 ?v2 )))(= (fun_app$b (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$b (fun_app$m (comp$ ?v3 )?v4 )?v2 )))):named a72 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ ))(=> (= (fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )(fun_app$o (fun_app$u (comp$f ?v3 )?v4 )?v2 )))):named a73 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ ))(=> (= (fun_app$b ?v0 (fun_app$g ?v1 ?v2 ))(fun_app$o ?v3 (fun_app$b ?v4 ?v2 )))(= (fun_app$b (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$b (fun_app$s (comp$d ?v3 )?v4 )?v2 )))):named a74 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ ))(=> (= (fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$o ?v3 (fun_app$o ?v4 ?v2 )))(= (fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )(fun_app$o (fun_app$t (comp$e ?v3 )?v4 )?v2 )))):named a75 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ ))(=> (= (fun_app$g ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$g ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$c (fun_app$p (comp$a ?v0 )?v1 )?v2 )(fun_app$c (fun_app$p (comp$a ?v3 )?v4 )?v2 )))):named a76 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ ))(=> (= (fun_app$g ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$o ?v4 ?v2 )))(= (fun_app$c (fun_app$p (comp$a ?v0 )?v1 )?v2 )(fun_app$c (fun_app$r (comp$c ?v3 )?v4 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ ))(=> (= (fun_app$c ?v0 (fun_app$b ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$b ?v4 ?v2 )))(= (fun_app$g (fun_app$q (comp$b ?v0 )?v1 )?v2 )(fun_app$g (fun_app$q (comp$b ?v3 )?v4 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ ))(=> (= (fun_app$c ?v0 (fun_app$o ?v1 ?v2 ))(fun_app$g ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$c (fun_app$r (comp$c ?v0 )?v1 )?v2 )(fun_app$c (fun_app$p (comp$a ?v3 )?v4 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ ))(=> (= (fun_app$c ?v0 (fun_app$o ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$o ?v4 ?v2 )))(= (fun_app$c (fun_app$r (comp$c ?v0 )?v1 )?v2 )(fun_app$c (fun_app$r (comp$c ?v3 )?v4 )?v2 )))):named a80 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ ))(=> (= (fun_app$o ?v0 (fun_app$b ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$g ?v4 ?v2 )))(= (fun_app$b (fun_app$s (comp$d ?v0 )?v1 )?v2 )(fun_app$b (fun_app$m (comp$ ?v3 )?v4 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$c ?v0 (fun_app$b ?v1 ?v2 ))(fun_app$g ?v3 (fun_app$g ?v4 ?v2 )))(= (fun_app$b (fun_app$s (comp$d (fun_app$u (comp$f ?v5 )?v0 ))?v1 )?v2 )(fun_app$b (fun_app$m (comp$ (fun_app$m (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a82 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$c ?v0 (fun_app$o ?v1 ?v2 ))(fun_app$g ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$o (fun_app$t (comp$e (fun_app$u (comp$f ?v5 )?v0 ))?v1 )?v2 )(fun_app$o (fun_app$u (comp$f (fun_app$m (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$g ?v0 (fun_app$g ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$b ?v4 ?v2 )))(= (fun_app$b (fun_app$m (comp$ (fun_app$m (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$b (fun_app$s (comp$d (fun_app$u (comp$f ?v5 )?v3 ))?v4 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$g ?v0 (fun_app$g ?v1 ?v2 ))(fun_app$g ?v3 (fun_app$g ?v4 ?v2 )))(= (fun_app$b (fun_app$m (comp$ (fun_app$m (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$b (fun_app$m (comp$ (fun_app$m (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$g ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$o ?v4 ?v2 )))(= (fun_app$o (fun_app$u (comp$f (fun_app$m (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$o (fun_app$t (comp$e (fun_app$u (comp$f ?v5 )?v3 ))?v4 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$g ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$g ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$o (fun_app$u (comp$f (fun_app$m (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$o (fun_app$u (comp$f (fun_app$m (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_dtree_fun$ ))(=> (= (fun_app$b ?v0 (fun_app$g ?v1 ?v2 ))(fun_app$o ?v3 (fun_app$b ?v4 ?v2 )))(= (fun_app$g (fun_app$v (comp$g (fun_app$q (comp$b ?v5 )?v0 ))?v1 )?v2 )(fun_app$g (fun_app$q (comp$b (fun_app$r (comp$c ?v5 )?v3 ))?v4 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 N_N_fun$ ))(=> (= (fun_app$b ?v0 (fun_app$g ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$g ?v4 ?v2 )))(= (fun_app$b (fun_app$m (comp$ (fun_app$s (comp$d ?v5 )?v0 ))?v1 )?v2 )(fun_app$b (fun_app$m (comp$ (fun_app$s (comp$d ?v5 )?v3 ))?v4 )?v2 )))):named a89 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (= (fun_app$b ?v0 (fun_app$g ?v1 ?v2 ))(fun_app$o ?v3 (fun_app$b ?v4 ?v2 )))(= (fun_app$b (fun_app$m (comp$ (fun_app$s (comp$d ?v5 )?v0 ))?v1 )?v2 )(fun_app$b (fun_app$s (comp$d (fun_app$t (comp$e ?v5 )?v3 ))?v4 )?v2 )))):named a90 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_N_fun$ ))(=> (= (fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$o (fun_app$u (comp$f (fun_app$s (comp$d ?v5 )?v0 ))?v1 )?v2 )(fun_app$o (fun_app$u (comp$f (fun_app$s (comp$d ?v5 )?v3 ))?v4 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$p (comp$a ?v0 )?v1 )?v2 )(= (fun_app$g ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a92 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$q (comp$b ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$g ?v2 ?v3 )))):named a93 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$r (comp$c ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$o ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a94 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$s (comp$d ?v0 )?v1 )?v2 )(= (fun_app$o ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$b ?v2 ?v3 )))):named a95 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$t (comp$e ?v0 )?v1 )?v2 )(= (fun_app$o ?v0 (fun_app$o ?v1 ?v3 ))(fun_app$o ?v2 ?v3 )))):named a96 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )?v2 )(= (fun_app$b ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$b ?v2 ?v3 )))):named a97 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$u (comp$f ?v0 )?v1 )?v2 )(= (fun_app$b ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$o ?v2 ?v3 )))):named a98 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_bool_fun$ ))(=> (forall ((?v2 N$ ))(= (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 )))(= (collect$b ?v0 )(collect$b ?v1 )))):named a99 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ )(?v1 T_dtree_sum_bool_fun$ ))(=> (forall ((?v2 T_dtree_sum$ ))(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a100 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$b (uu$ ?v0 ))?v0 )):named a101 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$ (uua$ ?v0 ))?v0 )):named a102 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$a ?v0 (collect$b ?v1 ))(fun_app$a ?v1 ?v0 ))):named a103 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$ ?v1 ?v0 ))):named a104 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$s (comp$d ?v0 )?v1 )?v2 )(= (fun_app$s (comp$d ?v0 )(fun_app$m (comp$ ?v1 )?v3 ))(fun_app$m (comp$ ?v2 )?v3 )))):named a105 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$s (comp$d ?v0 )?v1 )?v2 )(= (fun_app$t (comp$e ?v0 )(fun_app$u (comp$f ?v1 )?v3 ))(fun_app$u (comp$f ?v2 )?v3 )))):named a106 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )?v2 )(= (fun_app$m (comp$ ?v0 )(fun_app$v (comp$g ?v1 )?v3 ))(fun_app$m (comp$ ?v2 )?v3 )))):named a107 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )?v2 )(= (fun_app$u (comp$f ?v0 )(fun_app$p (comp$a ?v1 )?v3 ))(fun_app$u (comp$f ?v2 )?v3 )))):named a108 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$u (comp$f ?v0 )?v1 )?v2 )(= (fun_app$m (comp$ ?v0 )(fun_app$q (comp$b ?v1 )?v3 ))(fun_app$s (comp$d ?v2 )?v3 )))):named a109 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$u (comp$f ?v0 )?v1 )?v2 )(= (fun_app$u (comp$f ?v0 )(fun_app$r (comp$c ?v1 )?v3 ))(fun_app$t (comp$e ?v2 )?v3 )))):named a110 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$v (comp$g ?v0 )?v1 )?v2 )(= (fun_app$p (comp$a ?v0 )(fun_app$p (comp$a ?v1 )?v3 ))(fun_app$p (comp$a ?v2 )?v3 )))):named a111 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$p (comp$a ?v0 )?v1 )?v2 )(= (fun_app$v (comp$g ?v0 )(fun_app$q (comp$b ?v1 )?v3 ))(fun_app$q (comp$b ?v2 )?v3 )))):named a112 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$p (comp$a ?v0 )?v1 )?v2 )(= (fun_app$p (comp$a ?v0 )(fun_app$r (comp$c ?v1 )?v3 ))(fun_app$r (comp$c ?v2 )?v3 )))):named a113 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$q (comp$b ?v0 )?v1 )?v2 )(= (fun_app$q (comp$b ?v0 )(fun_app$m (comp$ ?v1 )?v3 ))(fun_app$v (comp$g ?v2 )?v3 )))):named a114 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$q (comp$b ?v0 )?v1 )?v2 )(= (fun_app$s (comp$d (fun_app$u (comp$f ?v3 )?v0 ))?v1 )(fun_app$m (comp$ ?v3 )?v2 )))):named a115 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$r (comp$c ?v0 )?v1 )?v2 )(= (fun_app$t (comp$e (fun_app$u (comp$f ?v3 )?v0 ))?v1 )(fun_app$u (comp$f ?v3 )?v2 )))):named a116 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$v (comp$g ?v0 )?v1 )?v2 )(= (fun_app$m (comp$ (fun_app$m (comp$ ?v3 )?v0 ))?v1 )(fun_app$m (comp$ ?v3 )?v2 )))):named a117 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$p (comp$a ?v0 )?v1 )?v2 )(= (fun_app$u (comp$f (fun_app$m (comp$ ?v3 )?v0 ))?v1 )(fun_app$u (comp$f ?v3 )?v2 )))):named a118 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )?v2 )(= (fun_app$m (comp$ (fun_app$s (comp$d ?v3 )?v0 ))?v1 )(fun_app$s (comp$d ?v3 )?v2 )))):named a119 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$u (comp$f ?v0 )?v1 )?v2 )(= (fun_app$u (comp$f (fun_app$s (comp$d ?v3 )?v0 ))?v1 )(fun_app$t (comp$e ?v3 )?v2 )))):named a120 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )?v2 )(= (fun_app$v (comp$g (fun_app$q (comp$b ?v3 )?v0 ))?v1 )(fun_app$q (comp$b ?v3 )?v2 )))):named a121 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$u (comp$f ?v0 )?v1 )?v2 )(= (fun_app$p (comp$a (fun_app$q (comp$b ?v3 )?v0 ))?v1 )(fun_app$r (comp$c ?v3 )?v2 )))):named a122 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$p (comp$a ?v0 )?v1 )?v2 )(= (fun_app$p (comp$a (fun_app$v (comp$g ?v3 )?v0 ))?v1 )(fun_app$p (comp$a ?v3 )?v2 )))):named a123 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$q (comp$b ?v0 )?v1 )?v2 )(= (fun_app$q (comp$b (fun_app$p (comp$a ?v3 )?v0 ))?v1 )(fun_app$v (comp$g ?v3 )?v2 )))):named a124 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$r (comp$c ?v0 )?v1 )(fun_app$p (comp$a ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$g ?v2 (fun_app$c ?v3 ?v4 ))))):named a125 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$r (comp$c ?v0 )?v1 )(fun_app$r (comp$c ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$o ?v3 ?v4 ))))):named a126 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$s (comp$d ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(= (fun_app$o ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$g ?v3 ?v4 ))))):named a127 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$s (comp$d ?v0 )?v1 )(fun_app$s (comp$d ?v2 )?v3 ))(= (fun_app$o ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$b ?v3 ?v4 ))))):named a128 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$t (comp$e ?v0 )?v1 )(fun_app$u (comp$f ?v2 )?v3 ))(= (fun_app$o ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$c ?v3 ?v4 ))))):named a129 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$t (comp$e ?v0 )?v1 )(fun_app$t (comp$e ?v2 )?v3 ))(= (fun_app$o ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$o ?v3 ?v4 ))))):named a130 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(= (fun_app$b ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$g ?v3 ?v4 ))))):named a131 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$u (comp$f ?v0 )?v1 )(fun_app$u (comp$f ?v2 )?v3 ))(= (fun_app$b ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$c ?v3 ?v4 ))))):named a132 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$s (comp$d (fun_app$u (comp$f ?v0 )?v1 ))?v2 )(fun_app$m (comp$ ?v0 )(fun_app$q (comp$b ?v1 )?v2 )))):named a133 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$t (comp$e (fun_app$u (comp$f ?v0 )?v1 ))?v2 )(fun_app$u (comp$f ?v0 )(fun_app$r (comp$c ?v1 )?v2 )))):named a134 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$m (comp$ (fun_app$s (comp$d ?v0 )?v1 ))?v2 )(fun_app$s (comp$d ?v0 )(fun_app$m (comp$ ?v1 )?v2 )))):named a135 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$m (comp$ (fun_app$m (comp$ ?v0 )?v1 ))?v2 )(fun_app$m (comp$ ?v0 )(fun_app$v (comp$g ?v1 )?v2 )))):named a136 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$u (comp$f (fun_app$s (comp$d ?v0 )?v1 ))?v2 )(fun_app$t (comp$e ?v0 )(fun_app$u (comp$f ?v1 )?v2 )))):named a137 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$u (comp$f (fun_app$m (comp$ ?v0 )?v1 ))?v2 )(fun_app$u (comp$f ?v0 )(fun_app$p (comp$a ?v1 )?v2 )))):named a138 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$b (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$m (comp$ ?v0 )?v1 )?v2 )))):named a139 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )))):named a140 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$b ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$g ?v3 ?v4 ))))false ))false )):named a141 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$u (comp$f ?v0 )?v1 )(fun_app$u (comp$f ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$b ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a142 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$q (comp$b ?v0 )?v1 )(fun_app$v (comp$g ?v2 )?v3 ))(= (fun_app$m (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$s (comp$d (fun_app$u (comp$f ?v4 )?v0 ))?v1 )(fun_app$m (comp$ ?v5 )?v3 )))):named a143 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$r (comp$c ?v0 )?v1 )(fun_app$p (comp$a ?v2 )?v3 ))(= (fun_app$m (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$t (comp$e (fun_app$u (comp$f ?v4 )?v0 ))?v1 )(fun_app$u (comp$f ?v5 )?v3 )))):named a144 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$v (comp$g ?v0 )?v1 )(fun_app$v (comp$g ?v2 )?v3 ))(= (fun_app$m (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$m (comp$ (fun_app$m (comp$ ?v4 )?v0 ))?v1 )(fun_app$m (comp$ ?v5 )?v3 )))):named a145 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$p (comp$a ?v0 )?v1 )(fun_app$p (comp$a ?v2 )?v3 ))(= (fun_app$m (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$u (comp$f (fun_app$m (comp$ ?v4 )?v0 ))?v1 )(fun_app$u (comp$f ?v5 )?v3 )))):named a146 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$v (comp$g ?v0 )?v1 )(fun_app$q (comp$b ?v2 )?v3 ))(= (fun_app$u (comp$f ?v4 )?v2 )?v5 ))(= (fun_app$m (comp$ (fun_app$m (comp$ ?v4 )?v0 ))?v1 )(fun_app$s (comp$d ?v5 )?v3 )))):named a147 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$p (comp$a ?v0 )?v1 )(fun_app$r (comp$c ?v2 )?v3 ))(= (fun_app$u (comp$f ?v4 )?v2 )?v5 ))(= (fun_app$u (comp$f (fun_app$m (comp$ ?v4 )?v0 ))?v1 )(fun_app$t (comp$e ?v5 )?v3 )))):named a148 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(= (fun_app$s (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$m (comp$ (fun_app$s (comp$d ?v4 )?v0 ))?v1 )(fun_app$m (comp$ ?v5 )?v3 )))):named a149 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$u (comp$f ?v0 )?v1 )(fun_app$u (comp$f ?v2 )?v3 ))(= (fun_app$s (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$u (comp$f (fun_app$s (comp$d ?v4 )?v0 ))?v1 )(fun_app$u (comp$f ?v5 )?v3 )))):named a150 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$s (comp$d ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(= (fun_app$v (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$s (comp$d ?v0 )(fun_app$m (comp$ ?v1 )?v4 ))(fun_app$m (comp$ ?v2 )?v5 )))):named a151 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$s (comp$d ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(= (fun_app$p (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$t (comp$e ?v0 )(fun_app$u (comp$f ?v1 )?v4 ))(fun_app$u (comp$f ?v2 )?v5 )))):named a152 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$s (comp$d ?v2 )?v3 ))(= (fun_app$m (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$m (comp$ ?v0 )(fun_app$v (comp$g ?v1 )?v4 ))(fun_app$s (comp$d ?v2 )?v5 )))):named a153 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$s (comp$d ?v2 )?v3 ))(= (fun_app$u (comp$f ?v3 )?v4 )?v5 ))(= (fun_app$u (comp$f ?v0 )(fun_app$p (comp$a ?v1 )?v4 ))(fun_app$t (comp$e ?v2 )?v5 )))):named a154 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(= (fun_app$v (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$m (comp$ ?v0 )(fun_app$v (comp$g ?v1 )?v4 ))(fun_app$m (comp$ ?v2 )?v5 )))):named a155 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(= (fun_app$p (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$u (comp$f ?v0 )(fun_app$p (comp$a ?v1 )?v4 ))(fun_app$u (comp$f ?v2 )?v5 )))):named a156 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$u (comp$f ?v0 )?v1 )(fun_app$u (comp$f ?v2 )?v3 ))(= (fun_app$q (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$m (comp$ ?v0 )(fun_app$q (comp$b ?v1 )?v4 ))(fun_app$m (comp$ ?v2 )?v5 )))):named a157 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$u (comp$f ?v0 )?v1 )(fun_app$u (comp$f ?v2 )?v3 ))(= (fun_app$r (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$u (comp$f ?v0 )(fun_app$r (comp$c ?v1 )?v4 ))(fun_app$u (comp$f ?v2 )?v5 )))):named a158 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(! (= (fun_app$ top$e ?v0 )(member$ ?v0 top$b )):pattern ((fun_app$ top$e ?v0 )))):named a159 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$a top$c ?v0 )(member$a ?v0 top$ )):pattern ((fun_app$a top$c ?v0 )))):named a160 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$b root$ (node$ ?v0 ?v1 ))?v0 )):named a161 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$s (comp$d ?v0 )(fun_app$m (comp$ ?v1 )?v2 ))(fun_app$m (comp$ (fun_app$s (comp$d ?v0 )?v1 ))?v2 ))):named a162 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$t (comp$e ?v0 )(fun_app$u (comp$f ?v1 )?v2 ))(fun_app$u (comp$f (fun_app$s (comp$d ?v0 )?v1 ))?v2 ))):named a163 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$m (comp$ ?v0 )(fun_app$q (comp$b ?v1 )?v2 ))(fun_app$s (comp$d (fun_app$u (comp$f ?v0 )?v1 ))?v2 ))):named a164 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$m (comp$ ?v0 )(fun_app$v (comp$g ?v1 )?v2 ))(fun_app$m (comp$ (fun_app$m (comp$ ?v0 )?v1 ))?v2 ))):named a165 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$u (comp$f ?v0 )(fun_app$r (comp$c ?v1 )?v2 ))(fun_app$t (comp$e (fun_app$u (comp$f ?v0 )?v1 ))?v2 ))):named a166 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$u (comp$f ?v0 )(fun_app$p (comp$a ?v1 )?v2 ))(fun_app$u (comp$f (fun_app$m (comp$ ?v0 )?v1 ))?v2 ))):named a167 ))
(assert (! (= (fun_app$u (comp$f root$ )deftr$ )id$ ):named a168 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (fun_app$w (hsubst_c$ ?v0 )?v1 )(ite (= (fun_app$b root$ ?v1 )(fun_app$b root$ ?v0 ))(cont$ ?v0 )(cont$ ?v1 ))):pattern ((fun_app$w (hsubst_c$ ?v0 )?v1 )))):named a169 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ )(?v6 Dtree_N_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(= ?v2 (fun_app$p (comp$a ?v3 )?v4 )))(= (fun_app$s (comp$d (fun_app$u (comp$f ?v5 )?v2 ))?v6 )(fun_app$m (comp$ (fun_app$m (comp$ (fun_app$m (comp$ ?v5 )?v3 ))?v0 ))(fun_app$q (comp$b (fun_app$p (comp$a ?v1 )?v4 ))?v6 ))))):named a170 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ )(?v6 N_N_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(= ?v2 (fun_app$p (comp$a ?v3 )?v4 )))(= (fun_app$t (comp$e (fun_app$u (comp$f ?v5 )?v2 ))?v6 )(fun_app$u (comp$f (fun_app$m (comp$ (fun_app$m (comp$ ?v5 )?v3 ))?v0 ))(fun_app$r (comp$c (fun_app$p (comp$a ?v1 )?v4 ))?v6 ))))):named a171 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ )(?v6 Dtree_dtree_fun$ ))(=> (and (type_definition$a ?v0 ?v1 top$a )(= ?v2 (fun_app$v (comp$g ?v3 )?v4 )))(= (fun_app$m (comp$ (fun_app$m (comp$ ?v5 )?v2 ))?v6 )(fun_app$s (comp$d (fun_app$u (comp$f (fun_app$m (comp$ ?v5 )?v3 ))?v0 ))(fun_app$m (comp$ (fun_app$m (comp$ ?v1 )?v4 ))?v6 ))))):named a172 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ )(?v6 Dtree_dtree_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(= ?v2 (fun_app$v (comp$g ?v3 )?v4 )))(= (fun_app$m (comp$ (fun_app$m (comp$ ?v5 )?v2 ))?v6 )(fun_app$m (comp$ (fun_app$m (comp$ (fun_app$m (comp$ ?v5 )?v3 ))?v0 ))(fun_app$v (comp$g (fun_app$v (comp$g ?v1 )?v4 ))?v6 ))))):named a173 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ )(?v6 N_dtree_fun$ ))(=> (and (type_definition$a ?v0 ?v1 top$a )(= ?v2 (fun_app$v (comp$g ?v3 )?v4 )))(= (fun_app$u (comp$f (fun_app$m (comp$ ?v5 )?v2 ))?v6 )(fun_app$t (comp$e (fun_app$u (comp$f (fun_app$m (comp$ ?v5 )?v3 ))?v0 ))(fun_app$u (comp$f (fun_app$m (comp$ ?v1 )?v4 ))?v6 ))))):named a174 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ )(?v6 N_dtree_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(= ?v2 (fun_app$v (comp$g ?v3 )?v4 )))(= (fun_app$u (comp$f (fun_app$m (comp$ ?v5 )?v2 ))?v6 )(fun_app$u (comp$f (fun_app$m (comp$ (fun_app$m (comp$ ?v5 )?v3 ))?v0 ))(fun_app$p (comp$a (fun_app$v (comp$g ?v1 )?v4 ))?v6 ))))):named a175 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 N_N_fun$ )(?v6 Dtree_dtree_fun$ ))(=> (and (type_definition$a ?v0 ?v1 top$a )(= ?v2 (fun_app$m (comp$ ?v3 )?v4 )))(= (fun_app$m (comp$ (fun_app$s (comp$d ?v5 )?v2 ))?v6 )(fun_app$s (comp$d (fun_app$u (comp$f (fun_app$s (comp$d ?v5 )?v3 ))?v0 ))(fun_app$m (comp$ (fun_app$m (comp$ ?v1 )?v4 ))?v6 ))))):named a176 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 N_N_fun$ )(?v6 Dtree_dtree_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(= ?v2 (fun_app$m (comp$ ?v3 )?v4 )))(= (fun_app$m (comp$ (fun_app$s (comp$d ?v5 )?v2 ))?v6 )(fun_app$m (comp$ (fun_app$m (comp$ (fun_app$s (comp$d ?v5 )?v3 ))?v0 ))(fun_app$v (comp$g (fun_app$v (comp$g ?v1 )?v4 ))?v6 ))))):named a177 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 N_N_fun$ )(?v6 N_dtree_fun$ ))(=> (and (type_definition$a ?v0 ?v1 top$a )(= ?v2 (fun_app$m (comp$ ?v3 )?v4 )))(= (fun_app$u (comp$f (fun_app$s (comp$d ?v5 )?v2 ))?v6 )(fun_app$t (comp$e (fun_app$u (comp$f (fun_app$s (comp$d ?v5 )?v3 ))?v0 ))(fun_app$u (comp$f (fun_app$m (comp$ ?v1 )?v4 ))?v6 ))))):named a178 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 N_N_fun$ )(?v6 N_dtree_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(= ?v2 (fun_app$m (comp$ ?v3 )?v4 )))(= (fun_app$u (comp$f (fun_app$s (comp$d ?v5 )?v2 ))?v6 )(fun_app$u (comp$f (fun_app$m (comp$ (fun_app$s (comp$d ?v5 )?v3 ))?v0 ))(fun_app$p (comp$a (fun_app$v (comp$g ?v1 )?v4 ))?v6 ))))):named a179 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$o id$ ?v0 )?v0 ):pattern ((fun_app$o id$ ?v0 )))):named a180 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$m (comp$ ?v0 )id$a )?v0 )):named a181 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (fun_app$b root$ ?v0 )(cont$ ?v0 ))?v0 )):named a182 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$o id$ ?v0 )?v0 ):pattern ((fun_app$o id$ ?v0 )))):named a183 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(=> (and (type_definition$a ?v0 ?v1 top$a )(= ?v2 id$a ))(= (fun_app$u (comp$f (fun_app$m (comp$ ?v1 )?v2 ))?v0 )id$ ))):named a184 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ ))(=> (and (type_definition$b ?v0 ?v1 top$ )(= ?v2 id$ ))(= (fun_app$t (comp$e (fun_app$t (comp$e ?v1 )?v2 ))?v0 )id$ ))):named a185 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ ))(! (=> (type_definition$c ?v0 ?v1 top$ )(= (fun_app$u (comp$f ?v0 )?v1 )id$ )):pattern ((fun_app$u (comp$f ?v0 )?v1 )))):named a186 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ ))(! (=> (type_definition$a ?v0 ?v1 top$a )(= (fun_app$u (comp$f ?v1 )?v0 )id$ )):pattern ((fun_app$u (comp$f ?v1 )?v0 )))):named a187 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ ))(! (=> (type_definition$b ?v0 ?v1 top$ )(= (fun_app$t (comp$e ?v1 )?v0 )id$ )):pattern ((fun_app$t (comp$e ?v1 )?v0 )))):named a188 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum$ ))(= (= ?v0 ?v1 )(exists ((?v2 T_dtree_sum$ ))(and (member$ ?v2 top$b )(and (= (id$b ?v2 )?v0 )(= (id$b ?v2 )?v1 )))))):named a189 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= ?v0 ?v1 )(exists ((?v2 N$ ))(and (member$a ?v2 top$ )(and (= (fun_app$o id$ ?v2 )?v0 )(= (fun_app$o id$ ?v2 )?v1 )))))):named a190 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$s (comp$d id$ )?v2 ))(= (fun_app$b ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$b ?v2 ?v3 )))):named a191 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$u (comp$f ?v0 )?v1 )(fun_app$t (comp$e id$ )?v2 ))(= (fun_app$b ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$o ?v2 ?v3 )))):named a192 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(=> (= (fun_app$u (comp$f ?v0 )?v1 )id$ )(= (fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))?v2 ))):named a193 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$b root$ ?v0 )(fun_app$b root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a194 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ )(?v6 Dtree_dtree_fun$ )(?v7 Dtree_dtree_fun$ )(?v8 Dtree_dtree_fun$ ))(=> (and (type_definition$a ?v0 ?v1 top$a )(and (type_definition$a ?v2 ?v3 top$a )(and (type_definition$ ?v4 ?v5 top$a )(= (fun_app$m (comp$ (fun_app$m (comp$ ?v3 )?v6 ))?v4 )(fun_app$s (comp$d (fun_app$u (comp$f (fun_app$m (comp$ ?v3 )?v7 ))?v0 ))(fun_app$m (comp$ (fun_app$m (comp$ ?v1 )?v8 ))?v4 ))))))(= (fun_app$v (comp$g ?v7 )?v8 )?v6 ))):named a195 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ )(?v6 Dtree_dtree_fun$ )(?v7 Dtree_dtree_fun$ )(?v8 Dtree_dtree_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(and (type_definition$a ?v2 ?v3 top$a )(and (type_definition$ ?v4 ?v5 top$a )(= (fun_app$m (comp$ (fun_app$m (comp$ ?v3 )?v6 ))?v4 )(fun_app$m (comp$ (fun_app$m (comp$ (fun_app$m (comp$ ?v3 )?v7 ))?v0 ))(fun_app$v (comp$g (fun_app$v (comp$g ?v1 )?v8 ))?v4 ))))))(= (fun_app$v (comp$g ?v7 )?v8 )?v6 ))):named a196 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ )(?v6 Dtree_dtree_fun$ )(?v7 Dtree_dtree_fun$ )(?v8 Dtree_dtree_fun$ ))(=> (and (type_definition$a ?v0 ?v1 top$a )(and (type_definition$a ?v2 ?v3 top$a )(and (type_definition$a ?v4 ?v5 top$a )(= (fun_app$u (comp$f (fun_app$m (comp$ ?v3 )?v6 ))?v4 )(fun_app$t (comp$e (fun_app$u (comp$f (fun_app$m (comp$ ?v3 )?v7 ))?v0 ))(fun_app$u (comp$f (fun_app$m (comp$ ?v1 )?v8 ))?v4 ))))))(= (fun_app$v (comp$g ?v7 )?v8 )?v6 ))):named a197 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ )(?v6 Dtree_dtree_fun$ )(?v7 Dtree_dtree_fun$ )(?v8 Dtree_dtree_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(and (type_definition$a ?v2 ?v3 top$a )(and (type_definition$a ?v4 ?v5 top$a )(= (fun_app$u (comp$f (fun_app$m (comp$ ?v3 )?v6 ))?v4 )(fun_app$u (comp$f (fun_app$m (comp$ (fun_app$m (comp$ ?v3 )?v7 ))?v0 ))(fun_app$p (comp$a (fun_app$v (comp$g ?v1 )?v8 ))?v4 ))))))(= (fun_app$v (comp$g ?v7 )?v8 )?v6 ))):named a198 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_dtree_fun$ )(?v6 N_dtree_fun$ )(?v7 Dtree_dtree_fun$ )(?v8 N_dtree_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(and (type_definition$a ?v2 ?v3 top$a )(and (type_definition$c ?v4 ?v5 top$ )(= (fun_app$s (comp$d (fun_app$u (comp$f ?v3 )?v6 ))?v4 )(fun_app$m (comp$ (fun_app$m (comp$ (fun_app$m (comp$ ?v3 )?v7 ))?v0 ))(fun_app$q (comp$b (fun_app$p (comp$a ?v1 )?v8 ))?v4 ))))))(= (fun_app$p (comp$a ?v7 )?v8 )?v6 ))):named a199 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_N_fun$ )(?v5 N_N_fun$ )(?v6 N_dtree_fun$ )(?v7 Dtree_dtree_fun$ )(?v8 N_dtree_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(and (type_definition$a ?v2 ?v3 top$a )(and (type_definition$b ?v4 ?v5 top$ )(= (fun_app$t (comp$e (fun_app$u (comp$f ?v3 )?v6 ))?v4 )(fun_app$u (comp$f (fun_app$m (comp$ (fun_app$m (comp$ ?v3 )?v7 ))?v0 ))(fun_app$r (comp$c (fun_app$p (comp$a ?v1 )?v8 ))?v4 ))))))(= (fun_app$p (comp$a ?v7 )?v8 )?v6 ))):named a200 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ )(?v6 Dtree_N_fun$ )(?v7 Dtree_N_fun$ )(?v8 Dtree_dtree_fun$ ))(=> (and (type_definition$a ?v0 ?v1 top$a )(and (type_definition$b ?v2 ?v3 top$ )(and (type_definition$ ?v4 ?v5 top$a )(= (fun_app$m (comp$ (fun_app$s (comp$d ?v3 )?v6 ))?v4 )(fun_app$s (comp$d (fun_app$u (comp$f (fun_app$s (comp$d ?v3 )?v7 ))?v0 ))(fun_app$m (comp$ (fun_app$m (comp$ ?v1 )?v8 ))?v4 ))))))(= (fun_app$m (comp$ ?v7 )?v8 )?v6 ))):named a201 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ )(?v6 Dtree_N_fun$ )(?v7 Dtree_N_fun$ )(?v8 Dtree_dtree_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(and (type_definition$b ?v2 ?v3 top$ )(and (type_definition$ ?v4 ?v5 top$a )(= (fun_app$m (comp$ (fun_app$s (comp$d ?v3 )?v6 ))?v4 )(fun_app$m (comp$ (fun_app$m (comp$ (fun_app$s (comp$d ?v3 )?v7 ))?v0 ))(fun_app$v (comp$g (fun_app$v (comp$g ?v1 )?v8 ))?v4 ))))))(= (fun_app$m (comp$ ?v7 )?v8 )?v6 ))):named a202 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ )(?v6 Dtree_N_fun$ )(?v7 Dtree_N_fun$ )(?v8 Dtree_dtree_fun$ ))(=> (and (type_definition$a ?v0 ?v1 top$a )(and (type_definition$b ?v2 ?v3 top$ )(and (type_definition$a ?v4 ?v5 top$a )(= (fun_app$u (comp$f (fun_app$s (comp$d ?v3 )?v6 ))?v4 )(fun_app$t (comp$e (fun_app$u (comp$f (fun_app$s (comp$d ?v3 )?v7 ))?v0 ))(fun_app$u (comp$f (fun_app$m (comp$ ?v1 )?v8 ))?v4 ))))))(= (fun_app$m (comp$ ?v7 )?v8 )?v6 ))):named a203 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ )(?v6 Dtree_N_fun$ )(?v7 Dtree_N_fun$ )(?v8 Dtree_dtree_fun$ ))(=> (and (type_definition$ ?v0 ?v1 top$a )(and (type_definition$b ?v2 ?v3 top$ )(and (type_definition$a ?v4 ?v5 top$a )(= (fun_app$u (comp$f (fun_app$s (comp$d ?v3 )?v6 ))?v4 )(fun_app$u (comp$f (fun_app$m (comp$ (fun_app$s (comp$d ?v3 )?v7 ))?v0 ))(fun_app$p (comp$a (fun_app$v (comp$g ?v1 )?v8 ))?v4 ))))))(= (fun_app$m (comp$ ?v7 )?v8 )?v6 ))):named a204 ))
(assert (! (= deftr$ (fun_app$n (unfold$a id$ )s$ )):named a205 ))
(assert (! (type_definition$b id_bnf$ id_bnf$ top$ ):named a206 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ ))(=> (= ?v0 (fun_app$o ?v1 ?v2 ))(fun_app$a (fun_app$x (fun_app$y (fun_app$z (fun_app$aa (iso_tuple_update_accessor_eq_assist$ id$c )id$ )?v2 )?v1 )?v0 )?v2 ))):named a207 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$ (inr$ ?v1 )(cont$ ?v0 ))(member$ (inr$ ?v2 )(cont$ ?v0 ))))(= (= (fun_app$b root$ ?v1 )(fun_app$b root$ ?v2 ))(= ?v1 ?v2 )))):named a208 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree_dtree_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$e (fun_app$f subtr$ top$ )?v0 )?v1 )(and (forall ((?v3 Dtree$ ))(fun_app$d (fun_app$e ?v2 ?v3 )?v3 ))(forall ((?v3 Dtree$ )(?v4 Dtree$ )(?v5 Dtree$ ))(=> (and (member$ (inr$ ?v3 )(cont$ ?v4 ))(and (fun_app$d (fun_app$e (fun_app$f subtr$ top$ )?v4 )?v5 )(fun_app$d (fun_app$e ?v2 ?v4 )?v5 )))(fun_app$d (fun_app$e ?v2 ?v3 )?v5 )))))(fun_app$d (fun_app$e ?v2 ?v0 )?v1 ))):named a209 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$o ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (fun_app$ab (image$ ?v1 )?v3 )))):named a210 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 N_T_dtree_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$ac ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$a ?v1 ?v3 )))):named a211 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_N_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$ad ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$b ?v1 ?v3 )))):named a212 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$ae ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$c ?v1 ?v3 )))):named a213 ))
(assert (! (= (image$ id$ )id$d ):named a214 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_N_fun$ ))(= (= (fun_app$ab (image$ (fun_app$t (fun_app$af (swap$ ?v0 )?v1 )?v2 ))top$ )top$ )(= (fun_app$ab (image$ ?v2 )top$ )top$ ))):named a215 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ )(?v2 N$ ))(=> (= (fun_app$ab (image$ ?v0 )top$ )top$ )(= (fun_app$ab (image$ (fun_app$t (fun_app$af (swap$ ?v1 )?v2 )?v0 ))top$ )top$ ))):named a216 ))
(check-sat )
;(get-unsat-core )
