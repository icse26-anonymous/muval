;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort T_set_set$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort T_T_sum_set$ 0 )
(declare-sort N_T_N_sum_fun$ 0 )
(declare-sort T_N_sum_N_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort N_N_sum_N_N_sum_fun$ 0 )
(declare-sort N_T_sum_N_T_sum_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort Dtree_set_dtree_set_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort N_set_set_N_set_set_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort T_set_set_T_set_set_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_N_sum_dtree_N_sum_fun$ 0 )
(declare-sort Dtree_T_sum_dtree_T_sum_fun$ 0 )
(declare-sort N_dtree_sum_N_dtree_sum_fun$ 0 )
(declare-sort T_T_set_sum_T_T_set_sum_fun$ 0 )
(declare-sort T_T_sum_set_T_T_sum_set_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort Dtree_set_set_dtree_set_set_fun$ 0 )
(declare-sort N_N_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_set_set_set_T_set_set_set_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-datatypes ()((T_N_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ N$ )))(T_dtree_sum$ (inl$a (projl$a T$ ))(inr$a (projr$a Dtree$ )))(T_T_sum$ (inl$b (projl$b T$ ))(inr$b (projr$b T$ )))(Dtree_T_sum$ (inl$c (projl$c Dtree$ ))(inr$c (projr$c T$ )))(Dtree_dtree_sum$ (inl$d (projl$d Dtree$ ))(inr$d (projr$d Dtree$ )))(Dtree_N_sum$ (inl$e (projl$e Dtree$ ))(inr$e (projr$e N$ )))(N_T_sum$ (inl$f (projl$f N$ ))(inr$f (projr$f T$ )))(N_dtree_sum$ (inl$g (projl$g N$ ))(inr$g (projr$g Dtree$ )))(N_N_sum$ (inl$h (projl$h N$ ))(inr$h (projr$h N$ )))(T_T_set_sum$ (inl$i (projl$i T$ ))(inr$i (projr$i T_set$ )))))
(declare-fun h$ (Dtree$ )N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun h_c$ (Dtree$ )N_T_N_sum_set_fun$ )
(declare-fun h_r$ (Dtree$ )N_N_fun$ )
(declare-fun id$a ()N_N_fun$ )
(declare-fun id$b ()T_set_T_set_fun$ )
(declare-fun id$c ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun id$d ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$e ()Dtree_dtree_fun$ )
(declare-fun id$f ()Dtree_set_dtree_set_fun$ )
(declare-fun id$g ()N_set_N_set_fun$ )
(declare-fun id$h ()T_set_set_T_set_set_fun$ )
(declare-fun id$i ()T_T_sum_T_T_sum_fun$ )
(declare-fun id$j ()T_T_sum_set_T_T_sum_set_fun$ )
(declare-fun id$k ()T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ )
(declare-fun id$l ()Dtree_set_set_dtree_set_set_fun$ )
(declare-fun id$m ()N_set_set_N_set_set_fun$ )
(declare-fun id$n ()T_set_set_set_T_set_set_set_fun$ )
(declare-fun id$o ()T_N_sum_T_N_sum_fun$ )
(declare-fun id$p ()Dtree_T_sum_dtree_T_sum_fun$ )
(declare-fun id$q ()Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun id$r ()Dtree_N_sum_dtree_N_sum_fun$ )
(declare-fun id$s ()N_T_sum_N_T_sum_fun$ )
(declare-fun id$t ()N_dtree_sum_N_dtree_sum_fun$ )
(declare-fun id$u ()N_N_sum_N_N_sum_fun$ )
(declare-fun id$v ()T_T_set_sum_T_T_set_sum_fun$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun comp$ (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ )N_dtree_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun top$a ()T_set$ )
(declare-fun top$b ()T_N_sum_set$ )
(declare-fun top$c ()T_dtree_sum_set$ )
(declare-fun comp$a (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$b (N_dtree_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun image$a (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$b (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun image$c (Dtree_dtree_fun$ )Dtree_set_dtree_set_fun$ )
(declare-fun image$d (N_N_fun$ )N_set_N_set_fun$ )
(declare-fun image$e (T_set_T_set_fun$ )T_set_set_T_set_set_fun$ )
(declare-fun image$f (T_T_sum_T_T_sum_fun$ )T_T_sum_set_T_T_sum_set_fun$ )
(declare-fun image$g (T_dtree_sum_set_T_dtree_sum_set_fun$ )T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ )
(declare-fun image$h (Dtree_set_dtree_set_fun$ )Dtree_set_set_dtree_set_set_fun$ )
(declare-fun image$i (N_set_N_set_fun$ )N_set_set_N_set_set_fun$ )
(declare-fun image$j (T_set_set_T_set_set_fun$ )T_set_set_set_T_set_set_set_fun$ )
(declare-fun image$k (T_dtree_sum_N_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun image$l (T_N_sum_N_fun$ T_N_sum_set$ )N_set$ )
(declare-fun image$m (N_T_dtree_sum_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun image$n (N_T_N_sum_fun$ N_set$ )T_N_sum_set$ )
(declare-fun image$o (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$p (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun fun_app$ (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun map_sum$ (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun member$a (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun member$b (T$ T_set$ )Bool )
(declare-fun member$c (N$ N_set$ )Bool )
(declare-fun fun_app$a (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$b (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$c (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$d (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$e (N_N_fun$ N$ )N$ )
(declare-fun fun_app$f (N_T_N_sum_set_fun$ N$ )T_N_sum_set$ )
(declare-fun fun_app$g (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$h (T_T_fun$ T$ )T$ )
(declare-fun fun_app$i (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$j (T_set_T_set_fun$ T_set$ )T_set$ )
(declare-fun fun_app$k (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$l (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$m (Dtree_set_dtree_set_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun fun_app$n (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun fun_app$o (T_set_set_T_set_set_fun$ T_set_set$ )T_set_set$ )
(declare-fun fun_app$p (T_T_sum_set_T_T_sum_set_fun$ T_T_sum_set$ )T_T_sum_set$ )
(declare-fun fun_app$q (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$r (T_dtree_sum_N_fun$ T_dtree_sum$ )N$ )
(declare-fun fun_app$s (T_N_sum_N_fun$ T_N_sum$ )N$ )
(declare-fun fun_app$t (N_T_dtree_sum_fun$ N$ )T_dtree_sum$ )
(declare-fun fun_app$u (N_T_N_sum_fun$ N$ )T_N_sum$ )
(declare-fun fun_app$v (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$w (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$x (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$y (N_N_fun_T_N_sum_T_N_sum_fun_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$z (Dtree_T_sum_dtree_T_sum_fun$ Dtree_T_sum$ )Dtree_T_sum$ )
(declare-fun map_sum$a (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun map_sum$b (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$c (T_T_fun$ )N_N_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$d (Dtree_dtree_fun$ T_T_fun$ )Dtree_T_sum_dtree_T_sum_fun$ )
(declare-fun map_sum$e (Dtree_dtree_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$f (Dtree_dtree_fun$ N_N_fun$ )Dtree_N_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$g (N_N_fun$ T_T_fun$ )N_T_sum_N_T_sum_fun$ )
(declare-fun map_sum$h (N_N_fun$ Dtree_dtree_fun$ )N_dtree_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$i (N_N_fun$ N_N_fun$ )N_N_sum_N_N_sum_fun$ )
(declare-fun map_sum$j (T_T_fun$ T_set_T_set_fun$ )T_T_set_sum_T_T_set_sum_fun$ )
(declare-fun fun_app$aa (Dtree_dtree_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$ab (Dtree_N_sum_dtree_N_sum_fun$ Dtree_N_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$ac (N_T_sum_N_T_sum_fun$ N_T_sum$ )N_T_sum$ )
(declare-fun fun_app$ad (N_dtree_sum_N_dtree_sum_fun$ N_dtree_sum$ )N_dtree_sum$ )
(declare-fun fun_app$ae (N_N_sum_N_N_sum_fun$ N_N_sum$ )N_N_sum$ )
(declare-fun fun_app$af (T_T_set_sum_T_T_set_sum_fun$ T_T_set_sum$ )T_T_set_sum$ )
(declare-fun fun_app$ag (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(assert (! (not (and (= n$ n$ )(= (image$ (fun_app$ (map_sum$ id$ )(fun_app$a (comp$ (fun_app$b (comp$a root$ )(h$ tr0$ )))root$ ))(cont$ (fun_app$c (pick$ tr0$ )n$ )))(image$ (fun_app$ (map_sum$ id$ )root$ )(cont$ (fun_app$c (pick$ tr0$ )n$ )))))):named a0 ))
(assert (! (wf$ tr0$ ):named a1 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$d root$ (fun_app$c (h$ tr0$ )?v0 ))(fun_app$d root$ (fun_app$c (pick$ tr0$ )?v0 )))):named a2 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$e (h_r$ tr0$ )?v0 )(fun_app$d root$ (fun_app$c (pick$ tr0$ )?v0 ))):pattern ((fun_app$e (h_r$ tr0$ )?v0 )))):named a3 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$f (h_c$ tr0$ )?v0 )(image$ (fun_app$ (map_sum$ id$ )root$ )(cont$ (fun_app$c (pick$ tr0$ )?v0 )))):pattern ((fun_app$f (h_c$ tr0$ )?v0 )))):named a4 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (fun_app$d root$ (fun_app$c (h$ ?v0 )?v1 ))(fun_app$d root$ (fun_app$c (pick$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$a (comp$ id$a )?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$a (comp$ id$a )?v0 )?v0 )):named a7 ))
(assert (! (= (image$a id$ )id$b ):named a8 ))
(assert (! (= (image$b id$c )id$d ):named a9 ))
(assert (! (= (image$c id$e )id$f ):named a10 ))
(assert (! (= (image$d id$a )id$g ):named a11 ))
(assert (! (= (image$e id$b )id$h ):named a12 ))
(assert (! (= (image$f id$i )id$j ):named a13 ))
(assert (! (= (image$g id$d )id$k ):named a14 ))
(assert (! (= (image$h id$f )id$l ):named a15 ))
(assert (! (= (image$i id$g )id$m ):named a16 ))
(assert (! (= (image$j id$h )id$n ):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (fun_app$f (h_c$ ?v0 )?v1 )(image$ (fun_app$ (map_sum$ id$ )root$ )(cont$ (fun_app$c (pick$ ?v0 )?v1 )))):pattern ((fun_app$f (h_c$ ?v0 )?v1 )))):named a18 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum$ ))(=> (and (inItr$ top$ tr0$ ?v0 )(member$ ?v1 (cont$ (fun_app$c (pick$ tr0$ )?v0 ))))(= (fun_app$g (fun_app$ (map_sum$ id$ )(fun_app$a (comp$ (fun_app$b (comp$a root$ )(h$ tr0$ )))root$ ))?v1 )(fun_app$g (fun_app$ (map_sum$ id$ )root$ )?v1 )))):named a19 ))
(assert (! (inItr$ top$ tr0$ n$ ):named a20 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$h id$ ?v0 )?v0 ):pattern ((fun_app$h id$ ?v0 )))):named a21 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$i id$e ?v0 )?v0 ):pattern ((fun_app$i id$e ?v0 )))):named a22 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$e id$a ?v0 )?v0 ):pattern ((fun_app$e id$a ?v0 )))):named a23 ))
(assert (! (forall ((?v0 T_set$ ))(! (= (fun_app$j id$b ?v0 )?v0 ):pattern ((fun_app$j id$b ?v0 )))):named a24 ))
(assert (! (forall ((?v0 T_T_sum$ ))(! (= (fun_app$k id$i ?v0 )?v0 ):pattern ((fun_app$k id$i ?v0 )))):named a25 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(! (= (fun_app$l id$d ?v0 )?v0 ):pattern ((fun_app$l id$d ?v0 )))):named a26 ))
(assert (! (forall ((?v0 Dtree_set$ ))(! (= (fun_app$m id$f ?v0 )?v0 ):pattern ((fun_app$m id$f ?v0 )))):named a27 ))
(assert (! (forall ((?v0 N_set$ ))(! (= (fun_app$n id$g ?v0 )?v0 ):pattern ((fun_app$n id$g ?v0 )))):named a28 ))
(assert (! (forall ((?v0 T_set_set$ ))(! (= (fun_app$o id$h ?v0 )?v0 ):pattern ((fun_app$o id$h ?v0 )))):named a29 ))
(assert (! (forall ((?v0 T_T_sum_set$ ))(! (= (fun_app$p id$j ?v0 )?v0 ):pattern ((fun_app$p id$j ?v0 )))):named a30 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$d (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$a (comp$ ?v0 )?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$e (fun_app$b (comp$a ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$b (comp$a ?v0 )?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$i (comp$b ?v0 ?v1 )?v2 )(fun_app$c ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$i (comp$b ?v0 ?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$g ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$ ?v1 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$q ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (fun_app$l (image$b ?v1 )?v3 )))):named a35 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= ?v0 (fun_app$h ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (fun_app$j (image$a ?v1 )?v3 )))):named a36 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$e ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$c ?v0 (fun_app$n (image$d ?v1 )?v3 )))):named a37 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_N_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$r ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$c ?v0 (image$k ?v1 ?v3 )))):named a38 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_N_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$s ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$c ?v0 (image$l ?v1 ?v3 )))):named a39 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 N_T_dtree_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$t ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$ ?v0 (image$m ?v1 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 N_T_N_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$u ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$a ?v0 (image$n ?v1 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$v ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$o ?v1 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$w ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$p ?v1 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$k (map_sum$a id$ id$ )?v0 )?v0 )):named a44 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (fun_app$q (fun_app$x (map_sum$b id$ )id$e )?v0 )?v0 )):named a45 ))
(assert (! (forall ((?v0 T_N_sum$ ))(= (fun_app$w (fun_app$y (map_sum$c id$ )id$a )?v0 )?v0 )):named a46 ))
(assert (! (forall ((?v0 Dtree_T_sum$ ))(= (fun_app$z (map_sum$d id$e id$ )?v0 )?v0 )):named a47 ))
(assert (! (forall ((?v0 Dtree_dtree_sum$ ))(= (fun_app$aa (map_sum$e id$e id$e )?v0 )?v0 )):named a48 ))
(assert (! (forall ((?v0 Dtree_N_sum$ ))(= (fun_app$ab (map_sum$f id$e id$a )?v0 )?v0 )):named a49 ))
(assert (! (forall ((?v0 N_T_sum$ ))(= (fun_app$ac (map_sum$g id$a id$ )?v0 )?v0 )):named a50 ))
(assert (! (forall ((?v0 N_dtree_sum$ ))(= (fun_app$ad (map_sum$h id$a id$e )?v0 )?v0 )):named a51 ))
(assert (! (forall ((?v0 N_N_sum$ ))(= (fun_app$ae (map_sum$i id$a id$a )?v0 )?v0 )):named a52 ))
(assert (! (forall ((?v0 T_T_set_sum$ ))(= (fun_app$af (map_sum$j id$ id$b )?v0 )?v0 )):named a53 ))
(assert (! (= (map_sum$a id$ id$ )id$i ):named a54 ))
(assert (! (= (fun_app$x (map_sum$b id$ )id$e )id$c ):named a55 ))
(assert (! (= (fun_app$y (map_sum$c id$ )id$a )id$o ):named a56 ))
(assert (! (= (map_sum$d id$e id$ )id$p ):named a57 ))
(assert (! (= (map_sum$e id$e id$e )id$q ):named a58 ))
(assert (! (= (map_sum$f id$e id$a )id$r ):named a59 ))
(assert (! (= (map_sum$g id$a id$ )id$s ):named a60 ))
(assert (! (= (map_sum$h id$a id$e )id$t ):named a61 ))
(assert (! (= (map_sum$i id$a id$a )id$u ):named a62 ))
(assert (! (= (map_sum$j id$ id$b )id$v ):named a63 ))
(assert (! (forall ((?v0 T$ ))(member$b ?v0 top$a )):named a64 ))
(assert (! (forall ((?v0 T_N_sum$ ))(member$a ?v0 top$b )):named a65 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(member$ ?v0 top$c )):named a66 ))
(assert (! (forall ((?v0 N$ ))(member$c ?v0 top$ )):named a67 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(= (fun_app$d root$ (fun_app$c (pick$ tr0$ )?v0 ))?v0 ))):named a68 ))
(assert (! (forall ((?v0 N$ ))(=> (and (wf$ tr0$ )(inItr$ top$ tr0$ ?v0 ))(wf$ (fun_app$c (pick$ tr0$ )?v0 )))):named a69 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(= (fun_app$d root$ (fun_app$c (h$ tr0$ )?v0 ))?v0 ))):named a70 ))
(assert (! (forall ((?v0 N$ ))(= (cont$ (fun_app$c (h$ tr0$ )?v0 ))(fun_app$l (image$b (fun_app$x (map_sum$b id$ )(comp$b (h$ tr0$ )root$ )))(cont$ (fun_app$c (pick$ tr0$ )?v0 ))))):named a71 ))
(assert (! (= (h$ tr0$ )(fun_app$ag (unfold$ (h_r$ tr0$ ))(h_c$ tr0$ ))):named a72 ))
(assert (! (forall ((?v0 T_set$ ))(=> (forall ((?v1 T$ ))(member$b ?v1 ?v0 ))(= top$a ?v0 ))):named a73 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(=> (forall ((?v1 T_N_sum$ ))(member$a ?v1 ?v0 ))(= top$b ?v0 ))):named a74 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(=> (forall ((?v1 T_dtree_sum$ ))(member$ ?v1 ?v0 ))(= top$c ?v0 ))):named a75 ))
(assert (! (forall ((?v0 N_set$ ))(=> (forall ((?v1 N$ ))(member$c ?v1 ?v0 ))(= top$ ?v0 ))):named a76 ))
(check-sat )
;(get-unsat-core )
