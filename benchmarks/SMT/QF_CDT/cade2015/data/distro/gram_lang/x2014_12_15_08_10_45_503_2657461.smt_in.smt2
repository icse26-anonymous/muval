;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun top$ ()N_set$ )
(declare-fun tr$a ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun subtr$ (N_set$ Dtree$ )Dtree_bool_fun$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun fun_app$a (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$b (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$c (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(assert (! (not (reg$ f$ tr$ )):named a0 ))
(assert (! (reg$ f$ tr$a ):named a1 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(reg$ ?v1 ?v0 )))):named a2 ))
(assert (! (member$ (inr$ tr$ )(cont$ tr$a )):named a3 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(=> (reg$ ?v0 ?v1 )(= (fun_app$ ?v0 (root$ ?v1 ))?v1 ))):named a4 ))
(assert (! (forall ((?v0 Dtree$ ))(= (regular$ ?v0 )(exists ((?v1 N_dtree_fun$ ))(and (reg$ ?v1 ?v0 )(forall ((?v2 N$ ))(= (root$ (fun_app$ ?v1 ?v2 ))?v2 )))))):named a5 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(= (reg$ ?v0 ?v1 )(forall ((?v2 N_set$ )(?v3 Dtree$ ))(=> (fun_app$a (subtr$ ?v2 ?v3 )?v1 )(= ?v3 (fun_app$ ?v0 (root$ ?v3 ))))))):named a6 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ ))(= (reg$ ?v0 ?v1 )(forall ((?v2 Dtree$ ))(=> (fun_app$a (subtr$ top$ ?v2 )?v1 )(= ?v2 (fun_app$ ?v0 (root$ ?v2 ))))))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (fun_app$a (subtr$ ?v0 ?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$a (root$ ?v3 )?v4 )(and (fun_app$a (subtr$ ?v4 ?v5 )?v6 )(member$ (inr$ ?v6 )(cont$ ?v3 ))))))))))):named a8 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set_dtree_dtree_bool_fun_fun_fun$ ))(=> (and (fun_app$a (subtr$ ?v0 ?v1 )?v2 )(and (forall ((?v4 N_set$ )(?v5 Dtree$ ))(fun_app$a (fun_app$b (fun_app$c ?v3 ?v4 )?v5 )?v5 ))(forall ((?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$a (root$ ?v5 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v6 ))(and (fun_app$a (subtr$ ?v4 ?v6 )?v7 )(fun_app$a (fun_app$b (fun_app$c ?v3 ?v4 )?v6 )?v7 ))))(fun_app$a (fun_app$b (fun_app$c ?v3 ?v4 )?v5 )?v7 )))))(fun_app$a (fun_app$b (fun_app$c ?v3 ?v0 )?v1 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (fun_app$a (subtr$ ?v0 ?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$a (root$ ?v3 )?v4 )(and (fun_app$a (subtr$ ?v4 ?v5 )?v6 )(member$ (inr$ ?v6 )(cont$ ?v3 )))))))false ))))false )):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$a (subtr$ ?v0 ?v1 )?v2 )(fun_app$a (subtr$ ?v0 ?v2 )?v3 ))(fun_app$a (subtr$ ?v0 ?v1 )?v3 ))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$a (subtr$ ?v0 ?v1 )?v2 )(member$a (root$ ?v2 )?v0 ))):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$a (subtr$ ?v0 ?v1 )?v2 )(member$a (root$ ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree_dtree_bool_fun_fun$ ))(=> (and (fun_app$a (subtr$ top$ ?v0 )?v1 )(and (forall ((?v3 Dtree$ ))(fun_app$a (fun_app$b ?v2 ?v3 )?v3 ))(forall ((?v3 Dtree$ )(?v4 Dtree$ )(?v5 Dtree$ ))(=> (and (member$ (inr$ ?v3 )(cont$ ?v4 ))(and (fun_app$a (subtr$ top$ ?v4 )?v5 )(fun_app$a (fun_app$b ?v2 ?v4 )?v5 )))(fun_app$a (fun_app$b ?v2 ?v3 )?v5 )))))(fun_app$a (fun_app$b ?v2 ?v0 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (root$ ?v0 )?v1 )(and (fun_app$a (subtr$ ?v1 ?v2 )?v3 )(member$ (inr$ ?v3 )(cont$ ?v0 ))))(fun_app$a (subtr$ ?v1 ?v2 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (root$ ?v0 )?v1 )(and (member$ (inr$ ?v0 )(cont$ ?v2 ))(fun_app$a (subtr$ ?v1 ?v2 )?v3 )))(fun_app$a (subtr$ ?v1 ?v0 )?v3 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (root$ ?v0 )?v1 )(fun_app$a (subtr$ ?v1 ?v0 )?v0 ))):named a17 ))
(check-sat )
;(get-unsat-core )
