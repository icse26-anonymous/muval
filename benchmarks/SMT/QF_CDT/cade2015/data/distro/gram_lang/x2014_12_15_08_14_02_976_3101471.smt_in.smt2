;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_dtree_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_T_dtree_sum_fun_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_T_dtree_sum_fun_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_fun_dtree_T_dtree_sum_fun_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun h$ (Dtree$ )N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun na$ ()N$ )
(declare-fun uu$ ()Dtree_T_dtree_sum_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun h_r$ (Dtree$ )N_N_fun$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun comp$ (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ )N_dtree_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun top$a ()T_dtree_sum_set$ )
(declare-fun top$b ()Dtree_set$ )
(declare-fun comp$a (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun comp$b (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$c (N_T_dtree_sum_fun$ )Dtree_N_fun_dtree_T_dtree_sum_fun_fun$ )
(declare-fun comp$d (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$e (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun comp$f (T_dtree_sum_T_dtree_sum_fun$ )Dtree_T_dtree_sum_fun_dtree_T_dtree_sum_fun_fun$ )
(declare-fun comp$g (Dtree_T_dtree_sum_fun$ )Dtree_dtree_fun_dtree_T_dtree_sum_fun_fun$ )
(declare-fun comp$h (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$i (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$j (T_dtree_sum_dtree_fun$ )Dtree_T_dtree_sum_fun_dtree_dtree_fun_fun$ )
(declare-fun image$ (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun image$a (Dtree_T_dtree_sum_fun$ Dtree_set$ )T_dtree_sum_set$ )
(declare-fun image$b (Dtree_N_fun$ Dtree_set$ )N_set$ )
(declare-fun image$c (T_dtree_sum_dtree_fun$ T_dtree_sum_set$ )Dtree_set$ )
(declare-fun image$d (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$e (T_dtree_sum_N_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun image$f (N_dtree_fun$ N_set$ )Dtree_set$ )
(declare-fun image$g (N_T_dtree_sum_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun image$h (N_N_fun$ N_set$ )N_set$ )
(declare-fun member$ (Dtree$ Dtree_set$ )Bool )
(declare-fun vimage$ (Dtree_T_dtree_sum_fun$ T_dtree_sum_set$ )Dtree_set$ )
(declare-fun fun_app$ (Dtree_T_dtree_sum_fun$ Dtree$ )T_dtree_sum$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun member$b (N$ N_set$ )Bool )
(declare-fun vimage$a (T_dtree_sum_dtree_fun$ Dtree_set$ )T_dtree_sum_set$ )
(declare-fun vimage$b (T_dtree_sum_N_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun vimage$c (N_T_dtree_sum_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun vimage$d (N_N_fun$ N_set$ )N_set$ )
(declare-fun vimage$e (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun vimage$f (Dtree_N_fun$ N_set$ )Dtree_set$ )
(declare-fun vimage$g (N_dtree_fun$ Dtree_set$ )N_set$ )
(declare-fun vimage$h (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun fun_app$a (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$b (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$c (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$d (N_N_fun$ N$ )N$ )
(declare-fun fun_app$e (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$f (T_dtree_sum_dtree_fun$ T_dtree_sum$ )Dtree$ )
(declare-fun fun_app$g (T_dtree_sum_N_fun$ T_dtree_sum$ )N$ )
(declare-fun fun_app$h (N_T_dtree_sum_fun$ N$ )T_dtree_sum$ )
(declare-fun fun_app$i (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$j (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$k (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$l (Dtree_N_fun_dtree_T_dtree_sum_fun_fun$ Dtree_N_fun$ )Dtree_T_dtree_sum_fun$ )
(declare-fun fun_app$m (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$n (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$o (Dtree_T_dtree_sum_fun_dtree_T_dtree_sum_fun_fun$ Dtree_T_dtree_sum_fun$ )Dtree_T_dtree_sum_fun$ )
(declare-fun fun_app$p (Dtree_dtree_fun_dtree_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )Dtree_T_dtree_sum_fun$ )
(declare-fun fun_app$q (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$r (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$s (Dtree_T_dtree_sum_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_fun$ )Dtree_dtree_fun$ )
(declare-fun hsubst_c$ (Dtree$ Dtree$ )T_dtree_sum_set$ )
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$ uu$ ?v0 )(inr$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (forall ((?v0 Dtree$ ))(=> (member$ ?v0 (image$ (fun_app$a (comp$ (h$ tr0$ ))root$ )(vimage$ uu$ (cont$ (fun_app$b (pick$ tr0$ )na$ )))))(forall ((?v1 Dtree$ ))(=> (and (member$ ?v1 (image$ (fun_app$a (comp$ (h$ tr0$ ))root$ )(vimage$ uu$ (cont$ (fun_app$b (pick$ tr0$ )na$ )))))(= (fun_app$c root$ ?v0 )(fun_app$c root$ ?v1 )))(= ?v0 ?v1 )))))):named a1 ))
(assert (! (wf$ tr0$ ):named a2 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$c root$ (fun_app$b (h$ tr0$ )?v0 ))(fun_app$c root$ (fun_app$b (pick$ tr0$ )?v0 )))):named a3 ))
(assert (! (= tra$ (fun_app$b (h$ tr0$ )na$ )):named a4 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$d (h_r$ tr0$ )?v0 )(fun_app$c root$ (fun_app$b (pick$ tr0$ )?v0 ))):pattern ((fun_app$d (h_r$ tr0$ )?v0 )))):named a5 ))
(assert (! (forall ((?v0 N$ ))(= (vimage$ uu$ (cont$ (fun_app$b (h$ tr0$ )?v0 )))(image$ (fun_app$a (comp$ (h$ tr0$ ))root$ )(vimage$ uu$ (cont$ (fun_app$b (pick$ tr0$ )?v0 )))))):named a6 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (vimage$ uu$ (cont$ (fun_app$b (h$ ?v0 )?v1 )))(image$ (fun_app$a (comp$ (h$ ?v0 ))root$ )(vimage$ uu$ (cont$ (fun_app$b (pick$ ?v0 )?v1 )))))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (fun_app$c root$ (fun_app$b (h$ ?v0 )?v1 ))(fun_app$c root$ (fun_app$b (pick$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$c root$ ?v0 )(fun_app$c root$ ?v1 ))(= (vimage$ uu$ (cont$ (fun_app$e (hsubst$ ?v1 )?v0 )))(image$ (hsubst$ ?v1 )(vimage$ uu$ (cont$ ?v1 )))))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= (fun_app$c root$ ?v0 )(fun_app$c root$ ?v1 )))(= (vimage$ uu$ (cont$ (fun_app$e (hsubst$ ?v1 )?v0 )))(image$ (hsubst$ ?v1 )(vimage$ uu$ (cont$ ?v0 )))))):named a10 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$a ?v0 (vimage$a ?v1 ?v2 ))(member$ (fun_app$f ?v1 ?v0 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_N_fun$ )(?v2 N_set$ ))(= (member$a ?v0 (vimage$b ?v1 ?v2 ))(member$b (fun_app$g ?v1 ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b ?v0 (vimage$c ?v1 ?v2 ))(member$a (fun_app$h ?v1 ?v0 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (member$b ?v0 (vimage$d ?v1 ?v2 ))(member$b (fun_app$d ?v1 ?v0 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (vimage$e ?v1 ?v2 ))(member$a (fun_app$i ?v1 ?v0 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_N_fun$ )(?v2 N_set$ ))(= (member$ ?v0 (vimage$f ?v1 ?v2 ))(member$b (fun_app$c ?v1 ?v0 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 N$ )(?v1 N_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$b ?v0 (vimage$g ?v1 ?v2 ))(member$ (fun_app$b ?v1 ?v0 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$ ?v0 (vimage$h ?v1 ?v2 ))(member$ (fun_app$e ?v1 ?v0 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (vimage$ ?v1 ?v2 ))(member$a (fun_app$ ?v1 ?v0 )?v2 ))):named a19 ))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$ )(?v1 T_dtree_sum$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$f ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$a ?v1 (vimage$a ?v0 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 N$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$h ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$b ?v1 (vimage$c ?v0 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 T_dtree_sum$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$g ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$a ?v1 (vimage$b ?v0 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$d ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$b ?v1 (vimage$d ?v0 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$i ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$a ?v1 (vimage$e ?v0 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$c ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$ ?v1 (vimage$f ?v0 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$b ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$b ?v1 (vimage$g ?v0 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$e ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$ ?v1 (vimage$h ?v0 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 Dtree$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$ ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$ ?v1 (vimage$ ?v0 ?v3 )))):named a28 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$j (comp$a ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$j (comp$a ?v0 )?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$d (fun_app$k (comp$b ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$k (comp$b ?v0 )?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$ (fun_app$l (comp$c ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$l (comp$c ?v0 )?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$b (fun_app$m (comp$d ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$m (comp$d ?v0 )?v1 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$n (comp$e ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$n (comp$e ?v0 )?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 Dtree$ ))(! (= (fun_app$ (fun_app$o (comp$f ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$o (comp$f ?v0 )?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$ (fun_app$p (comp$g ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$p (comp$g ?v0 )?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$e (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$a (comp$ ?v0 )?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= ?v0 (fun_app$ ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$a ?v1 ?v3 )))):named a39 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= ?v0 (fun_app$c ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$b ?v0 (image$b ?v1 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T_dtree_sum_dtree_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$f ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$c ?v1 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$i ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$d ?v1 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_N_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$g ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$b ?v0 (image$e ?v1 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$b ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$ ?v0 (image$f ?v1 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 N_T_dtree_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$h ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$a ?v0 (image$g ?v1 ?v3 )))):named a45 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$d ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (image$h ?v1 ?v3 )))):named a46 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= ?v0 (fun_app$e ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$ ?v1 ?v3 )))):named a47 ))
(assert (! (inItr$ top$ tr0$ na$ ):named a48 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$c root$ ?v0 )(fun_app$c root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a49 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (hsubst_c$ ?v0 ?v1 )(ite (= (fun_app$c root$ ?v1 )(fun_app$c root$ ?v0 ))(cont$ ?v0 )(cont$ ?v1 ))):pattern ((hsubst_c$ ?v0 ?v1 )))):named a50 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_set$ ))(= (vimage$f ?v0 (vimage$g ?v1 ?v2 ))(vimage$h (fun_app$a (comp$ ?v1 )?v0 )?v2 ))):named a51 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (vimage$h ?v0 (vimage$ ?v1 ?v2 ))(vimage$ (fun_app$p (comp$g ?v1 )?v0 )?v2 ))):named a52 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (vimage$ ?v0 (vimage$e ?v1 ?v2 ))(vimage$ (fun_app$o (comp$f ?v1 )?v0 )?v2 ))):named a53 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_set$ ))(= (vimage$d ?v0 (vimage$g ?v1 ?v2 ))(vimage$g (fun_app$m (comp$d ?v1 )?v0 )?v2 ))):named a54 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (vimage$h ?v0 (vimage$h ?v1 ?v2 ))(vimage$h (fun_app$q (comp$h ?v1 )?v0 )?v2 ))):named a55 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_set$ ))(= (vimage$h ?v0 (vimage$f ?v1 ?v2 ))(vimage$f (fun_app$j (comp$a ?v1 )?v0 )?v2 ))):named a56 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (vimage$f ?v0 (vimage$d ?v1 ?v2 ))(vimage$f (fun_app$n (comp$e ?v1 )?v0 )?v2 ))):named a57 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (vimage$g ?v0 (vimage$h ?v1 ?v2 ))(vimage$g (fun_app$r (comp$i ?v1 )?v0 )?v2 ))):named a58 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_set$ ))(= (vimage$g ?v0 (vimage$f ?v1 ?v2 ))(vimage$d (fun_app$k (comp$b ?v1 )?v0 )?v2 ))):named a59 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 T_dtree_sum_dtree_fun$ )(?v2 Dtree_set$ ))(= (vimage$ ?v0 (vimage$a ?v1 ?v2 ))(vimage$h (fun_app$s (comp$j ?v1 )?v0 )?v2 ))):named a60 ))
(assert (! (inItr$ top$ tr0$ n$ ):named a61 ))
(assert (! (exists ((?v0 N$ ))(and (inItr$ top$ tr0$ ?v0 )(= tra$ (fun_app$b (h$ tr0$ )?v0 )))):named a62 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(member$a ?v0 top$a )):named a63 ))
(assert (! (forall ((?v0 Dtree$ ))(member$ ?v0 top$b )):named a64 ))
(assert (! (forall ((?v0 N$ ))(member$b ?v0 top$ )):named a65 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(= (fun_app$c root$ (fun_app$b (pick$ tr0$ )?v0 ))?v0 ))):named a66 ))
(assert (! (forall ((?v0 N$ ))(=> (and (wf$ tr0$ )(inItr$ top$ tr0$ ?v0 ))(wf$ (fun_app$b (pick$ tr0$ )?v0 )))):named a67 ))
(check-sat )
;(get-unsat-core )
