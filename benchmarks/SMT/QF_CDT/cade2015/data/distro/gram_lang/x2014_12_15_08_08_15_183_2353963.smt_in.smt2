;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_N_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_fset$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_N_N_fun_N_N_fun_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort N_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_N_fun_N_N_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_N_N_fun_fun_fun$ 0 )
(declare-sort N_N_dtree_fun_N_dtree_fun_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_N_N_fun_N_N_bool_fun_fun_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun$ 0 )
(declare-sort N_N_fun_dtree_N_fun_dtree_N_fun_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_N_N_fun_fun_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_fun_N_N_fun_N_N_fun_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_dtree_dtree_fun_fun_fun$ 0 )
(declare-sort N_N_fun_N_N_N_fun_N_N_bool_fun_fun_fun_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_N_dtree_fun_N_dtree_fun_fun_fun$ 0 )
(declare-sort N_N_fun_dtree_dtree_fun_fun_N_N_fun_N_N_fun_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun_N_dtree_fun_N_dtree_fun_fun_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_fun_fun$ 0 )
(declare-sort Dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_fun_dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_fun_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun s$ ()N_T_N_sum_set_fun$ )
(declare-fun id$ ()N_N_fun$ )
(declare-fun uu$ (N_set$ )N_bool_fun$ )
(declare-fun id$a ()Dtree_dtree_fun$ )
(declare-fun id$b ()N_N_fun_N_N_fun_fun$ )
(declare-fun id$c ()Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun id$d ()N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun id$e ()N_N_fun_N_N_fun_fun_N_N_fun_N_N_fun_fun_fun$ )
(declare-fun uua$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun uub$ ()N_N_bool_fun_fun$ )
(declare-fun comp$ ()Dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun swap$ (N$ )N_N_dtree_fun_N_dtree_fun_fun_fun$ )
(declare-fun ccont$ (Dtree$ )T_dtree_sum_fset$ )
(declare-fun comp$a (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun comp$b (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$c (N_N_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun comp$d (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun comp$e (Dtree_dtree_fun_N_N_fun_fun$ )N_N_fun_dtree_dtree_fun_fun_N_N_fun_N_N_fun_fun_fun$ )
(declare-fun comp$f (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$g (N_N_fun_N_N_fun_fun$ )N_N_fun_N_N_fun_fun_N_N_fun_N_N_fun_fun_fun$ )
(declare-fun comp$h (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$i (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$j (N_dtree_fun_N_dtree_fun_fun$ )N_dtree_fun_N_dtree_fun_fun_N_dtree_fun_N_dtree_fun_fun_fun$ )
(declare-fun deftr$ ()N_dtree_fun$ )
(declare-fun inFr2$ (N_set$ Dtree$ T$ )Bool )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun nNode$ (N$ T_dtree_sum_fset$ )Dtree$ )
(declare-fun subtr$ (N_set$ Dtree$ )Dtree_bool_fun$ )
(declare-fun swap$a (N$ )N_N_N_fun_N_N_fun_fun_fun$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun collect$ (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun map_fun$ (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_N_N_fun_fun_fun$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun collect$a (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$b (N_N_bool_fun_fun$ N$ )N_bool_fun$ )
(declare-fun fun_app$c (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$d (Dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun$ Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun fun_app$e (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$f (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$g (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$h (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$i (N_N_fun_N_N_fun_fun$ N_N_fun$ )N_N_fun$ )
(declare-fun fun_app$j (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$k (N_N_fun$ N$ )N$ )
(declare-fun fun_app$l (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$m (N_N_fun_dtree_dtree_fun_fun_N_N_fun_N_N_fun_fun_fun$ N_N_fun_dtree_dtree_fun_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun fun_app$n (Dtree_dtree_fun_N_N_fun_fun$ Dtree_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$o (N_N_fun_dtree_dtree_fun_fun$ N_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$p (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$q (N_N_fun_N_N_fun_fun_N_N_fun_N_N_fun_fun_fun$ N_N_fun_N_N_fun_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun fun_app$r (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$s (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$t (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$u (N_dtree_fun_N_dtree_fun_fun_N_dtree_fun_N_dtree_fun_fun_fun$ N_dtree_fun_N_dtree_fun_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun fun_app$v (N_N_dtree_fun_N_dtree_fun_fun_fun$ N$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun fun_app$w (N_N_N_fun_N_N_fun_fun_fun$ N$ )N_N_fun_N_N_fun_fun$ )
(declare-fun fun_app$x (N_N_fun_N_N_bool_fun_fun_fun$ N_N_fun$ )N_N_bool_fun_fun$ )
(declare-fun fun_app$y (N_N_N_fun_N_N_bool_fun_fun_fun_fun$ N$ )N_N_fun_N_N_bool_fun_fun_fun$ )
(declare-fun fun_app$z (N_N_fun_N_N_N_fun_N_N_bool_fun_fun_fun_fun_fun$ N_N_fun$ )N_N_N_fun_N_N_bool_fun_fun_fun_fun$ )
(declare-fun map_fun$a (Dtree_N_fun$ )N_dtree_fun_N_N_fun_dtree_dtree_fun_fun_fun$ )
(declare-fun map_fun$b (N_N_fun$ )N_N_fun_N_N_fun_N_N_fun_fun_fun$ )
(declare-fun map_fun$c (Dtree_N_fun_dtree_N_fun_fun$ )N_dtree_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_fun_dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_fun_fun$ )
(declare-fun map_fun$d (Dtree_dtree_fun$ )N_N_fun_dtree_N_fun_dtree_N_fun_fun_fun$ )
(declare-fun map_fun$e (N_dtree_fun_N_dtree_fun_fun$ )N_N_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_fun_fun$ )
(declare-fun map_fun$f (N_N_fun$ )Dtree_dtree_fun_N_dtree_fun_N_dtree_fun_fun_fun$ )
(declare-fun fun_app$aa (Dtree_N_fun_dtree_dtree_fun_N_N_fun_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun_N_N_fun_fun$ )
(declare-fun fun_app$ab (N_dtree_fun_N_N_fun_dtree_dtree_fun_fun_fun$ N_dtree_fun$ )N_N_fun_dtree_dtree_fun_fun$ )
(declare-fun fun_app$ac (N_N_fun_N_N_fun_N_N_fun_fun_fun$ N_N_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun fun_app$ad (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(declare-fun fun_app$ae (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$af (Dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_fun$ Dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun$ )Dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun$ )
(declare-fun fun_app$ag (N_dtree_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_fun_dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_fun_fun$ N_dtree_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_fun$ )Dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_dtree_N_fun_N_dtree_fun_N_N_fun_fun_fun_fun$ )
(declare-fun fun_app$ah (N_N_fun_dtree_N_fun_dtree_N_fun_fun_fun$ N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun fun_app$ai (N_N_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_fun_fun$ N_N_fun_N_N_fun_fun$ )N_dtree_fun_N_N_fun_fun_N_dtree_fun_N_N_fun_fun_fun$ )
(declare-fun fun_app$aj (Dtree_dtree_fun_N_dtree_fun_N_dtree_fun_fun_fun$ Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun quotient3$ (N_N_bool_fun_fun$ N_N_fun$ N_N_fun$ )Bool )
(declare-fun quotient3$a (Dtree_dtree_bool_fun_fun$ Dtree_N_fun$ N_dtree_fun$ )Bool )
(declare-fun quotient3$b (Dtree_dtree_bool_fun_fun$ Dtree_dtree_fun$ Dtree_dtree_fun$ )Bool )
(declare-fun iso_tuple_surjective_proof_assist$ (N$ N$ N_N_fun$ )Bool )
(declare-fun iso_tuple_update_accessor_eq_assist$ (N_N_fun_N_N_fun_fun_N_N_fun_N_N_fun_fun_fun$ N_N_fun_N_N_fun_fun$ N_N_fun$ N_N_fun_N_N_fun_fun$ N_N_fun$ N_N_fun$ )Bool )
(declare-fun iso_tuple_update_accessor_eq_assist$a (N_N_fun_N_N_fun_fun$ )N_N_fun_N_N_N_fun_N_N_bool_fun_fun_fun_fun_fun$ )
(declare-fun iso_tuple_update_accessor_cong_assist$ (N_N_fun_N_N_fun_fun_N_N_fun_N_N_fun_fun_fun$ N_N_fun_N_N_fun_fun$ )Bool )
(declare-fun iso_tuple_update_accessor_cong_assist$a (N_N_fun_N_N_fun_fun$ N_N_fun$ )Bool )
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$a (uu$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uu$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(! (= (fun_app$a (fun_app$b uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$a (fun_app$b uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (not (= (fun_app$c (fun_app$d comp$ root$ )deftr$ )id$ )):named a3 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$e root$ (fun_app$f deftr$ ?v0 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$g (comp$a ?v0 )id$a )?v0 )):named a5 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$h (comp$b ?v0 )id$ )?v0 )):named a6 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$i (comp$c ?v0 )id$ )?v0 )):named a7 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$j (comp$d id$ )?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$i (comp$c id$ )?v0 )?v0 )):named a9 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$j (comp$d id$ )?v0 )?v0 )):named a10 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$i (comp$c id$ )?v0 )?v0 )):named a11 ))
(assert (! (forall ((?v0 N_N_fun$ ))(! (= (fun_app$i id$b ?v0 )?v0 ):pattern ((fun_app$i id$b ?v0 )))):named a12 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$k id$ ?v0 )?v0 ):pattern ((fun_app$k id$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$e (fun_app$g (comp$a ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$g (comp$a ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$f (fun_app$h (comp$b ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$h (comp$b ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$e (fun_app$j (comp$d ?v0 )?v1 )?v2 )(fun_app$k ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$j (comp$d ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$k (fun_app$i (comp$c ?v0 )?v1 )?v2 )(fun_app$k ?v0 (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$i (comp$c ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 Dtree_dtree_fun_N_N_fun_fun$ )(?v1 N_N_fun_dtree_dtree_fun_fun$ )(?v2 N_N_fun$ ))(! (= (fun_app$i (fun_app$m (comp$e ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$m (comp$e ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$k (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (= (comp$d id$ )id$c ):named a20 ))
(assert (! (= (comp$c id$ )id$b ):named a21 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$g (comp$a ?v0 )?v1 )(fun_app$j (comp$d id$ )?v2 ))(= (fun_app$e ?v0 (fun_app$l ?v1 ?v3 ))(fun_app$e ?v2 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$h (comp$b ?v0 )?v1 )(fun_app$p (comp$f id$a )?v2 ))(= (fun_app$f ?v0 (fun_app$k ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$j (comp$d ?v0 )?v1 )(fun_app$j (comp$d id$ )?v2 ))(= (fun_app$k ?v0 (fun_app$e ?v1 ?v3 ))(fun_app$e ?v2 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$i (comp$c ?v0 )?v1 )(fun_app$i (comp$c id$ )?v2 ))(= (fun_app$k ?v0 (fun_app$k ?v1 ?v3 ))(fun_app$k ?v2 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 Dtree_dtree_fun_N_N_fun_fun$ )(?v1 N_N_fun_dtree_dtree_fun_fun$ )(?v2 N_N_fun_N_N_fun_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )(fun_app$q (comp$g id$b )?v2 ))(= (fun_app$n ?v0 (fun_app$o ?v1 ?v3 ))(fun_app$i ?v2 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$i (comp$c id$ )?v2 ))(= (fun_app$e ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$k ?v2 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(=> (= (fun_app$i (comp$c ?v0 )?v1 )id$ )(= (fun_app$k ?v0 (fun_app$k ?v1 ?v2 ))?v2 ))):named a28 ))
(assert (! (forall ((?v0 Dtree_dtree_fun_N_N_fun_fun$ )(?v1 N_N_fun_dtree_dtree_fun_fun$ )(?v2 N_N_fun$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )id$b )(= (fun_app$n ?v0 (fun_app$o ?v1 ?v2 ))?v2 ))):named a29 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(=> (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )id$ )(= (fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))?v2 ))):named a30 ))
(assert (! (= deftr$ (fun_app$r (unfold$ id$ )s$ )):named a31 ))
(assert (! (forall ((?v0 N_N_fun$ ))(! (= (fun_app$i id$b ?v0 )?v0 ):pattern ((fun_app$i id$b ?v0 )))):named a32 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$k id$ ?v0 )?v0 ):pattern ((fun_app$k id$ ?v0 )))):named a33 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$i (comp$c ?v0 )(fun_app$c (fun_app$d comp$ ?v1 )?v2 ))(fun_app$c (fun_app$d comp$ (fun_app$j (comp$d ?v0 )?v1 ))?v2 ))):named a34 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$c (fun_app$d comp$ ?v0 )(fun_app$h (comp$b ?v1 )?v2 ))(fun_app$i (comp$c (fun_app$c (fun_app$d comp$ ?v0 )?v1 ))?v2 ))):named a35 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$c (fun_app$d comp$ ?v0 )(fun_app$p (comp$f ?v1 )?v2 ))(fun_app$c (fun_app$d comp$ (fun_app$g (comp$a ?v0 )?v1 ))?v2 ))):named a36 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$p (comp$f ?v0 )(fun_app$h (comp$b ?v1 )?v2 ))(fun_app$h (comp$b (fun_app$p (comp$f ?v0 )?v1 ))?v2 ))):named a37 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$s (comp$h ?v0 )(fun_app$j (comp$d ?v1 )?v2 ))(fun_app$s (comp$h (fun_app$h (comp$b ?v0 )?v1 ))?v2 ))):named a38 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$g (comp$a ?v0 )(fun_app$t (comp$i ?v1 )?v2 ))(fun_app$g (comp$a (fun_app$g (comp$a ?v0 )?v1 ))?v2 ))):named a39 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$g (comp$a ?v0 )(fun_app$s (comp$h ?v1 )?v2 ))(fun_app$j (comp$d (fun_app$c (fun_app$d comp$ ?v0 )?v1 ))?v2 ))):named a40 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$h (comp$b ?v0 )(fun_app$c (fun_app$d comp$ ?v1 )?v2 ))(fun_app$p (comp$f (fun_app$s (comp$h ?v0 )?v1 ))?v2 ))):named a41 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ ))(= (fun_app$h (comp$b ?v0 )(fun_app$i (comp$c ?v1 )?v2 ))(fun_app$h (comp$b (fun_app$h (comp$b ?v0 )?v1 ))?v2 ))):named a42 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$j (comp$d ?v0 )(fun_app$g (comp$a ?v1 )?v2 ))(fun_app$g (comp$a (fun_app$j (comp$d ?v0 )?v1 ))?v2 ))):named a43 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$i (comp$c (fun_app$c (fun_app$d comp$ ?v0 )?v1 ))?v2 )(fun_app$c (fun_app$d comp$ ?v0 )(fun_app$h (comp$b ?v1 )?v2 )))):named a44 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$c (fun_app$d comp$ (fun_app$j (comp$d ?v0 )?v1 ))?v2 )(fun_app$i (comp$c ?v0 )(fun_app$c (fun_app$d comp$ ?v1 )?v2 )))):named a45 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$c (fun_app$d comp$ (fun_app$g (comp$a ?v0 )?v1 ))?v2 )(fun_app$c (fun_app$d comp$ ?v0 )(fun_app$p (comp$f ?v1 )?v2 )))):named a46 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$p (comp$f (fun_app$s (comp$h ?v0 )?v1 ))?v2 )(fun_app$h (comp$b ?v0 )(fun_app$c (fun_app$d comp$ ?v1 )?v2 )))):named a47 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$s (comp$h (fun_app$h (comp$b ?v0 )?v1 ))?v2 )(fun_app$s (comp$h ?v0 )(fun_app$j (comp$d ?v1 )?v2 )))):named a48 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$g (comp$a (fun_app$g (comp$a ?v0 )?v1 ))?v2 )(fun_app$g (comp$a ?v0 )(fun_app$t (comp$i ?v1 )?v2 )))):named a49 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$g (comp$a (fun_app$j (comp$d ?v0 )?v1 ))?v2 )(fun_app$j (comp$d ?v0 )(fun_app$g (comp$a ?v1 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$h (comp$b (fun_app$p (comp$f ?v0 )?v1 ))?v2 )(fun_app$p (comp$f ?v0 )(fun_app$h (comp$b ?v1 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ ))(= (fun_app$h (comp$b (fun_app$h (comp$b ?v0 )?v1 ))?v2 )(fun_app$h (comp$b ?v0 )(fun_app$i (comp$c ?v1 )?v2 )))):named a52 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$j (comp$d (fun_app$c (fun_app$d comp$ ?v0 )?v1 ))?v2 )(fun_app$g (comp$a ?v0 )(fun_app$s (comp$h ?v1 )?v2 )))):named a53 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$g (comp$a ?v0 )?v1 )?v2 )(= (fun_app$e ?v0 (fun_app$l ?v1 ?v3 ))(fun_app$e ?v2 ?v3 )))):named a54 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$h (comp$b ?v0 )?v1 )?v2 )(= (fun_app$f ?v0 (fun_app$k ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))):named a55 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$j (comp$d ?v0 )?v1 )?v2 )(= (fun_app$k ?v0 (fun_app$e ?v1 ?v3 ))(fun_app$e ?v2 ?v3 )))):named a56 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$i (comp$c ?v0 )?v1 )?v2 )(= (fun_app$k ?v0 (fun_app$k ?v1 ?v3 ))(fun_app$k ?v2 ?v3 )))):named a57 ))
(assert (! (forall ((?v0 Dtree_dtree_fun_N_N_fun_fun$ )(?v1 N_N_fun_dtree_dtree_fun_fun$ )(?v2 N_N_fun_N_N_fun_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )?v2 )(= (fun_app$n ?v0 (fun_app$o ?v1 ?v3 ))(fun_app$i ?v2 ?v3 )))):named a58 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(= (fun_app$e ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$k ?v2 ?v3 )))):named a59 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$j (comp$d ?v0 )?v1 )?v2 )(= (fun_app$i (comp$c ?v0 )(fun_app$c (fun_app$d comp$ ?v1 )?v3 ))(fun_app$c (fun_app$d comp$ ?v2 )?v3 )))):named a60 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$g (comp$a ?v0 )?v1 )?v2 )(= (fun_app$c (fun_app$d comp$ ?v0 )(fun_app$p (comp$f ?v1 )?v3 ))(fun_app$c (fun_app$d comp$ ?v2 )?v3 )))):named a61 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(= (fun_app$c (fun_app$d comp$ ?v0 )(fun_app$h (comp$b ?v1 )?v3 ))(fun_app$i (comp$c ?v2 )?v3 )))):named a62 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$p (comp$f ?v0 )?v1 )?v2 )(= (fun_app$p (comp$f ?v0 )(fun_app$h (comp$b ?v1 )?v3 ))(fun_app$h (comp$b ?v2 )?v3 )))):named a63 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$s (comp$h ?v0 )?v1 )?v2 )(= (fun_app$h (comp$b ?v0 )(fun_app$c (fun_app$d comp$ ?v1 )?v3 ))(fun_app$p (comp$f ?v2 )?v3 )))):named a64 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(= (fun_app$g (comp$a ?v0 )(fun_app$s (comp$h ?v1 )?v3 ))(fun_app$j (comp$d ?v2 )?v3 )))):named a65 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$g (comp$a ?v0 )?v1 )?v2 )(= (fun_app$g (comp$a ?v0 )(fun_app$t (comp$i ?v1 )?v3 ))(fun_app$g (comp$a ?v2 )?v3 )))):named a66 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$h (comp$b ?v0 )?v1 )?v2 )(= (fun_app$s (comp$h ?v0 )(fun_app$j (comp$d ?v1 )?v3 ))(fun_app$s (comp$h ?v2 )?v3 )))):named a67 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$h (comp$b ?v0 )?v1 )?v2 )(= (fun_app$h (comp$b ?v0 )(fun_app$i (comp$c ?v1 )?v3 ))(fun_app$h (comp$b ?v2 )?v3 )))):named a68 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$j (comp$d ?v0 )?v1 )?v2 )(= (fun_app$j (comp$d ?v0 )(fun_app$g (comp$a ?v1 )?v3 ))(fun_app$g (comp$a ?v2 )?v3 )))):named a69 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$h (comp$b ?v0 )?v1 )?v2 )(= (fun_app$i (comp$c (fun_app$c (fun_app$d comp$ ?v3 )?v0 ))?v1 )(fun_app$c (fun_app$d comp$ ?v3 )?v2 )))):named a70 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$p (comp$f ?v0 )?v1 )?v2 )(= (fun_app$c (fun_app$d comp$ (fun_app$g (comp$a ?v3 )?v0 ))?v1 )(fun_app$c (fun_app$d comp$ ?v3 )?v2 )))):named a71 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(= (fun_app$c (fun_app$d comp$ (fun_app$j (comp$d ?v3 )?v0 ))?v1 )(fun_app$i (comp$c ?v3 )?v2 )))):named a72 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$t (comp$i ?v0 )?v1 )?v2 )(= (fun_app$g (comp$a (fun_app$g (comp$a ?v3 )?v0 ))?v1 )(fun_app$g (comp$a ?v3 )?v2 )))):named a73 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (= (fun_app$s (comp$h ?v0 )?v1 )?v2 )(= (fun_app$j (comp$d (fun_app$c (fun_app$d comp$ ?v3 )?v0 ))?v1 )(fun_app$g (comp$a ?v3 )?v2 )))):named a74 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(= (fun_app$p (comp$f (fun_app$s (comp$h ?v3 )?v0 ))?v1 )(fun_app$h (comp$b ?v3 )?v2 )))):named a75 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$g (comp$a ?v0 )?v1 )?v2 )(= (fun_app$g (comp$a (fun_app$j (comp$d ?v3 )?v0 ))?v1 )(fun_app$j (comp$d ?v3 )?v2 )))):named a76 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (= (fun_app$h (comp$b ?v0 )?v1 )?v2 )(= (fun_app$h (comp$b (fun_app$p (comp$f ?v3 )?v0 ))?v1 )(fun_app$p (comp$f ?v3 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (= (fun_app$j (comp$d ?v0 )?v1 )?v2 )(= (fun_app$s (comp$h (fun_app$h (comp$b ?v3 )?v0 ))?v1 )(fun_app$s (comp$h ?v3 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_N_fun$ ))(=> (= (fun_app$j (comp$d ?v0 )?v1 )?v2 )(= (fun_app$j (comp$d (fun_app$i (comp$c ?v3 )?v0 ))?v1 )(fun_app$j (comp$d ?v3 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(= (fun_app$e ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$k ?v2 (fun_app$k ?v3 ?v4 ))))):named a80 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$g (comp$a ?v0 )?v1 )(fun_app$g (comp$a ?v2 )?v3 ))(= (fun_app$e ?v0 (fun_app$l ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$l ?v3 ?v4 ))))):named a81 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$g (comp$a ?v0 )?v1 )(fun_app$j (comp$d ?v2 )?v3 ))(= (fun_app$e ?v0 (fun_app$l ?v1 ?v4 ))(fun_app$k ?v2 (fun_app$e ?v3 ?v4 ))))):named a82 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$h (comp$b ?v0 )?v1 )(fun_app$h (comp$b ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$k ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$k ?v3 ?v4 ))))):named a83 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$j (comp$d ?v0 )?v1 )(fun_app$g (comp$a ?v2 )?v3 ))(= (fun_app$k ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$l ?v3 ?v4 ))))):named a84 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$j (comp$d ?v0 )?v1 )(fun_app$j (comp$d ?v2 )?v3 ))(= (fun_app$k ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$k ?v2 (fun_app$e ?v3 ?v4 ))))):named a85 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$i (comp$c ?v0 )?v1 )(fun_app$c (fun_app$d comp$ ?v2 )?v3 ))(= (fun_app$k ?v0 (fun_app$k ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$f ?v3 ?v4 ))))):named a86 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$i (comp$c ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(= (fun_app$k ?v0 (fun_app$k ?v1 ?v4 ))(fun_app$k ?v2 (fun_app$k ?v3 ?v4 ))))):named a87 ))
(assert (! (forall ((?v0 Dtree_dtree_fun_N_N_fun_fun$ )(?v1 N_N_fun_dtree_dtree_fun_fun$ )(?v2 Dtree_dtree_fun_N_N_fun_fun$ )(?v3 N_N_fun_dtree_dtree_fun_fun$ )(?v4 N_N_fun$ ))(=> (= (fun_app$m (comp$e ?v0 )?v1 )(fun_app$m (comp$e ?v2 )?v3 ))(= (fun_app$n ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$n ?v2 (fun_app$o ?v3 ?v4 ))))):named a88 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$c (fun_app$d comp$ ?v2 )?v3 ))(= (fun_app$e ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$f ?v3 ?v4 ))))):named a89 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$j (comp$d ?v0 )?v1 )(fun_app$g (comp$a ?v2 )?v3 ))(= (fun_app$p (comp$f ?v3 )?v4 )?v5 ))(= (fun_app$i (comp$c ?v0 )(fun_app$c (fun_app$d comp$ ?v1 )?v4 ))(fun_app$c (fun_app$d comp$ ?v2 )?v5 )))):named a90 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$g (comp$a ?v0 )?v1 )(fun_app$j (comp$d ?v2 )?v3 ))(= (fun_app$c (fun_app$d comp$ ?v3 )?v4 )?v5 ))(= (fun_app$c (fun_app$d comp$ ?v0 )(fun_app$p (comp$f ?v1 )?v4 ))(fun_app$i (comp$c ?v2 )?v5 )))):named a91 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$c (fun_app$d comp$ ?v2 )?v3 ))(= (fun_app$h (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$c (fun_app$d comp$ ?v0 )(fun_app$h (comp$b ?v1 )?v4 ))(fun_app$c (fun_app$d comp$ ?v2 )?v5 )))):named a92 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$s (comp$h ?v0 )?v1 )(fun_app$s (comp$h ?v2 )?v3 ))(= (fun_app$c (fun_app$d comp$ ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$b ?v0 )(fun_app$c (fun_app$d comp$ ?v1 )?v4 ))(fun_app$h (comp$b ?v2 )?v5 )))):named a93 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$p (comp$f ?v0 )?v1 )(fun_app$h (comp$b ?v2 )?v3 ))(= (fun_app$i (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$p (comp$f ?v0 )(fun_app$h (comp$b ?v1 )?v4 ))(fun_app$h (comp$b ?v2 )?v5 )))):named a94 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$c (fun_app$d comp$ ?v2 )?v3 ))(= (fun_app$s (comp$h ?v3 )?v4 )?v5 ))(= (fun_app$g (comp$a ?v0 )(fun_app$s (comp$h ?v1 )?v4 ))(fun_app$g (comp$a ?v2 )?v5 )))):named a95 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(= (fun_app$j (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$g (comp$a ?v0 )(fun_app$s (comp$h ?v1 )?v4 ))(fun_app$j (comp$d ?v2 )?v5 )))):named a96 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(= (fun_app$i (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$c (fun_app$d comp$ ?v0 )(fun_app$h (comp$b ?v1 )?v4 ))(fun_app$i (comp$c ?v2 )?v5 )))):named a97 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$g (comp$a ?v0 )?v1 )(fun_app$g (comp$a ?v2 )?v3 ))(= (fun_app$p (comp$f ?v3 )?v4 )?v5 ))(= (fun_app$c (fun_app$d comp$ ?v0 )(fun_app$p (comp$f ?v1 )?v4 ))(fun_app$c (fun_app$d comp$ ?v2 )?v5 )))):named a98 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$g (comp$a ?v0 )?v1 )(fun_app$g (comp$a ?v2 )?v3 ))(= (fun_app$t (comp$i ?v3 )?v4 )?v5 ))(= (fun_app$g (comp$a ?v0 )(fun_app$t (comp$i ?v1 )?v4 ))(fun_app$g (comp$a ?v2 )?v5 )))):named a99 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$h (comp$b ?v0 )?v1 )(fun_app$p (comp$f ?v2 )?v3 ))(= (fun_app$g (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$i (comp$c (fun_app$c (fun_app$d comp$ ?v4 )?v0 ))?v1 )(fun_app$c (fun_app$d comp$ ?v5 )?v3 )))):named a100 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$p (comp$f ?v0 )?v1 )(fun_app$h (comp$b ?v2 )?v3 ))(= (fun_app$c (fun_app$d comp$ ?v4 )?v2 )?v5 ))(= (fun_app$c (fun_app$d comp$ (fun_app$g (comp$a ?v4 )?v0 ))?v1 )(fun_app$i (comp$c ?v5 )?v3 )))):named a101 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$c (fun_app$d comp$ ?v2 )?v3 ))(= (fun_app$j (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$c (fun_app$d comp$ (fun_app$j (comp$d ?v4 )?v0 ))?v1 )(fun_app$c (fun_app$d comp$ ?v5 )?v3 )))):named a102 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$t (comp$i ?v0 )?v1 )(fun_app$s (comp$h ?v2 )?v3 ))(= (fun_app$c (fun_app$d comp$ ?v4 )?v2 )?v5 ))(= (fun_app$g (comp$a (fun_app$g (comp$a ?v4 )?v0 ))?v1 )(fun_app$j (comp$d ?v5 )?v3 )))):named a103 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$s (comp$h ?v0 )?v1 )(fun_app$s (comp$h ?v2 )?v3 ))(= (fun_app$c (fun_app$d comp$ ?v4 )?v2 )?v5 ))(= (fun_app$j (comp$d (fun_app$c (fun_app$d comp$ ?v4 )?v0 ))?v1 )(fun_app$j (comp$d ?v5 )?v3 )))):named a104 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$p (comp$f ?v0 )?v1 )(fun_app$p (comp$f ?v2 )?v3 ))(= (fun_app$g (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$c (fun_app$d comp$ (fun_app$g (comp$a ?v4 )?v0 ))?v1 )(fun_app$c (fun_app$d comp$ ?v5 )?v3 )))):named a105 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$t (comp$i ?v0 )?v1 )(fun_app$t (comp$i ?v2 )?v3 ))(= (fun_app$g (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$g (comp$a (fun_app$g (comp$a ?v4 )?v0 ))?v1 )(fun_app$g (comp$a ?v5 )?v3 )))):named a106 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$s (comp$h ?v0 )?v1 )(fun_app$t (comp$i ?v2 )?v3 ))(= (fun_app$g (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$j (comp$d (fun_app$c (fun_app$d comp$ ?v4 )?v0 ))?v1 )(fun_app$g (comp$a ?v5 )?v3 )))):named a107 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(= (fun_app$h (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$p (comp$f (fun_app$s (comp$h ?v4 )?v0 ))?v1 )(fun_app$h (comp$b ?v5 )?v3 )))):named a108 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(= (fun_app$i (comp$c ?v4 )?v2 )?v5 ))(= (fun_app$c (fun_app$d comp$ (fun_app$j (comp$d ?v4 )?v0 ))?v1 )(fun_app$i (comp$c ?v5 )?v3 )))):named a109 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$e ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$k ?v2 (fun_app$k ?v3 ?v4 ))))false ))false )):named a110 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$g (comp$a ?v0 )?v1 )(fun_app$g (comp$a ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$e ?v0 (fun_app$l ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$l ?v3 ?v4 ))))false ))false )):named a111 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$g (comp$a ?v0 )?v1 )(fun_app$j (comp$d ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$e ?v0 (fun_app$l ?v1 ?v4 ))(fun_app$k ?v2 (fun_app$e ?v3 ?v4 ))))false ))false )):named a112 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$h (comp$b ?v0 )?v1 )(fun_app$h (comp$b ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$f ?v0 (fun_app$k ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$k ?v3 ?v4 ))))false ))false )):named a113 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$j (comp$d ?v0 )?v1 )(fun_app$g (comp$a ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$k ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$l ?v3 ?v4 ))))false ))false )):named a114 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$j (comp$d ?v0 )?v1 )(fun_app$j (comp$d ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$k ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$k ?v2 (fun_app$e ?v3 ?v4 ))))false ))false )):named a115 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$i (comp$c ?v0 )?v1 )(fun_app$c (fun_app$d comp$ ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$k ?v0 (fun_app$k ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$f ?v3 ?v4 ))))false ))false )):named a116 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$i (comp$c ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$k ?v0 (fun_app$k ?v1 ?v4 ))(fun_app$k ?v2 (fun_app$k ?v3 ?v4 ))))false ))false )):named a117 ))
(assert (! (forall ((?v0 Dtree_dtree_fun_N_N_fun_fun$ )(?v1 N_N_fun_dtree_dtree_fun_fun$ )(?v2 Dtree_dtree_fun_N_N_fun_fun$ )(?v3 N_N_fun_dtree_dtree_fun_fun$ ))(=> (and (= (fun_app$m (comp$e ?v0 )?v1 )(fun_app$m (comp$e ?v2 )?v3 ))(=> (forall ((?v4 N_N_fun$ ))(= (fun_app$n ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$n ?v2 (fun_app$o ?v3 ?v4 ))))false ))false )):named a118 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$c (fun_app$d comp$ ?v0 )?v1 )(fun_app$c (fun_app$d comp$ ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$e ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$f ?v3 ?v4 ))))false ))false )):named a119 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$e (fun_app$g (comp$a ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$g (comp$a ?v0 )?v1 )?v2 )))):named a120 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$f (fun_app$h (comp$b ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$h (comp$b ?v0 )?v1 )?v2 )))):named a121 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$e (fun_app$j (comp$d ?v0 )?v1 )?v2 )(fun_app$k ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$j (comp$d ?v0 )?v1 )?v2 )))):named a122 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$k (fun_app$i (comp$c ?v0 )?v1 )?v2 )(fun_app$k ?v0 (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$i (comp$c ?v0 )?v1 )?v2 )))):named a123 ))
(assert (! (forall ((?v0 Dtree_dtree_fun_N_N_fun_fun$ )(?v1 N_N_fun_dtree_dtree_fun_fun$ )(?v2 N_N_fun$ ))(! (= (fun_app$i (fun_app$m (comp$e ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$m (comp$e ?v0 )?v1 )?v2 )))):named a124 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$k (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )))):named a125 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_T_N_sum_set_fun$ )(?v2 N$ ))(= (fun_app$e root$ (fun_app$f (fun_app$r (unfold$ ?v0 )?v1 )?v2 ))(fun_app$k ?v0 ?v2 ))):named a126 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N$ ))(=> (= (fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$f ?v4 ?v5 )))(= (fun_app$k (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(fun_app$k (fun_app$c (fun_app$d comp$ ?v3 )?v4 )?v5 )))):named a127 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree$ ))(=> (= (fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$l ?v4 ?v5 )))(= (fun_app$k (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(fun_app$e (fun_app$g (comp$a ?v3 )?v4 )?v5 )))):named a128 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree$ ))(=> (= (fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$k ?v3 (fun_app$e ?v4 ?v5 )))(= (fun_app$k (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(fun_app$e (fun_app$j (comp$d ?v3 )?v4 )?v5 )))):named a129 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ )(?v5 N$ ))(=> (= (fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$k ?v3 (fun_app$k ?v4 ?v5 )))(= (fun_app$k (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(fun_app$k (fun_app$i (comp$c ?v3 )?v4 )?v5 )))):named a130 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N$ ))(=> (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$f ?v4 ?v5 )))(= (fun_app$e (fun_app$g (comp$a ?v0 )?v1 )?v2 )(fun_app$k (fun_app$c (fun_app$d comp$ ?v3 )?v4 )?v5 )))):named a131 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree$ ))(=> (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$l ?v4 ?v5 )))(= (fun_app$e (fun_app$g (comp$a ?v0 )?v1 )?v2 )(fun_app$e (fun_app$g (comp$a ?v3 )?v4 )?v5 )))):named a132 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree$ ))(=> (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2 ))(fun_app$k ?v3 (fun_app$e ?v4 ?v5 )))(= (fun_app$e (fun_app$g (comp$a ?v0 )?v1 )?v2 )(fun_app$e (fun_app$j (comp$d ?v3 )?v4 )?v5 )))):named a133 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ )(?v5 N$ ))(=> (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2 ))(fun_app$k ?v3 (fun_app$k ?v4 ?v5 )))(= (fun_app$e (fun_app$g (comp$a ?v0 )?v1 )?v2 )(fun_app$k (fun_app$i (comp$c ?v3 )?v4 )?v5 )))):named a134 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 N$ ))(=> (= (fun_app$f ?v0 (fun_app$k ?v1 ?v2 ))(fun_app$f ?v3 (fun_app$k ?v4 ?v5 )))(= (fun_app$f (fun_app$h (comp$b ?v0 )?v1 )?v2 )(fun_app$f (fun_app$h (comp$b ?v3 )?v4 )?v5 )))):named a135 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N$ ))(=> (= (fun_app$k ?v0 (fun_app$e ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$f ?v4 ?v5 )))(= (fun_app$e (fun_app$j (comp$d ?v0 )?v1 )?v2 )(fun_app$k (fun_app$c (fun_app$d comp$ ?v3 )?v4 )?v5 )))):named a136 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ ))(=> (= (fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$k ?v3 (fun_app$k ?v4 ?v2 )))(= (fun_app$k (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(fun_app$k (fun_app$i (comp$c ?v3 )?v4 )?v2 )))):named a137 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ ))(=> (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$l ?v4 ?v2 )))(= (fun_app$e (fun_app$g (comp$a ?v0 )?v1 )?v2 )(fun_app$e (fun_app$g (comp$a ?v3 )?v4 )?v2 )))):named a138 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ ))(=> (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2 ))(fun_app$k ?v3 (fun_app$e ?v4 ?v2 )))(= (fun_app$e (fun_app$g (comp$a ?v0 )?v1 )?v2 )(fun_app$e (fun_app$j (comp$d ?v3 )?v4 )?v2 )))):named a139 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ ))(=> (= (fun_app$f ?v0 (fun_app$k ?v1 ?v2 ))(fun_app$f ?v3 (fun_app$k ?v4 ?v2 )))(= (fun_app$f (fun_app$h (comp$b ?v0 )?v1 )?v2 )(fun_app$f (fun_app$h (comp$b ?v3 )?v4 )?v2 )))):named a140 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ ))(=> (= (fun_app$k ?v0 (fun_app$e ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$l ?v4 ?v2 )))(= (fun_app$e (fun_app$j (comp$d ?v0 )?v1 )?v2 )(fun_app$e (fun_app$g (comp$a ?v3 )?v4 )?v2 )))):named a141 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ ))(=> (= (fun_app$k ?v0 (fun_app$e ?v1 ?v2 ))(fun_app$k ?v3 (fun_app$e ?v4 ?v2 )))(= (fun_app$e (fun_app$j (comp$d ?v0 )?v1 )?v2 )(fun_app$e (fun_app$j (comp$d ?v3 )?v4 )?v2 )))):named a142 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ ))(=> (= (fun_app$k ?v0 (fun_app$k ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$f ?v4 ?v2 )))(= (fun_app$k (fun_app$i (comp$c ?v0 )?v1 )?v2 )(fun_app$k (fun_app$c (fun_app$d comp$ ?v3 )?v4 )?v2 )))):named a143 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ ))(=> (= (fun_app$k ?v0 (fun_app$k ?v1 ?v2 ))(fun_app$k ?v3 (fun_app$k ?v4 ?v2 )))(= (fun_app$k (fun_app$i (comp$c ?v0 )?v1 )?v2 )(fun_app$k (fun_app$i (comp$c ?v3 )?v4 )?v2 )))):named a144 ))
(assert (! (forall ((?v0 Dtree_dtree_fun_N_N_fun_fun$ )(?v1 N_N_fun_dtree_dtree_fun_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_dtree_fun_N_N_fun_fun$ )(?v4 N_N_fun_dtree_dtree_fun_fun$ ))(=> (= (fun_app$n ?v0 (fun_app$o ?v1 ?v2 ))(fun_app$n ?v3 (fun_app$o ?v4 ?v2 )))(= (fun_app$i (fun_app$m (comp$e ?v0 )?v1 )?v2 )(fun_app$i (fun_app$m (comp$e ?v3 )?v4 )?v2 )))):named a145 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ ))(=> (= (fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$f ?v4 ?v2 )))(= (fun_app$k (fun_app$c (fun_app$d comp$ ?v0 )?v1 )?v2 )(fun_app$k (fun_app$c (fun_app$d comp$ ?v3 )?v4 )?v2 )))):named a146 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$f ?v0 (fun_app$k ?v1 ?v2 ))(fun_app$l ?v3 (fun_app$f ?v4 ?v2 )))(= (fun_app$k (fun_app$i (comp$c (fun_app$c (fun_app$d comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$k (fun_app$c (fun_app$d comp$ (fun_app$g (comp$a ?v5 )?v3 ))?v4 )?v2 )))):named a147 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$l ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$f ?v3 (fun_app$k ?v4 ?v2 )))(= (fun_app$k (fun_app$c (fun_app$d comp$ (fun_app$g (comp$a ?v5 )?v0 ))?v1 )?v2 )(fun_app$k (fun_app$i (comp$c (fun_app$c (fun_app$d comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a148 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$l ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$l ?v3 (fun_app$f ?v4 ?v2 )))(= (fun_app$k (fun_app$c (fun_app$d comp$ (fun_app$g (comp$a ?v5 )?v0 ))?v1 )?v2 )(fun_app$k (fun_app$c (fun_app$d comp$ (fun_app$g (comp$a ?v5 )?v3 ))?v4 )?v2 )))):named a149 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_N_fun$ ))(=> (= (fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$f ?v4 ?v2 )))(= (fun_app$k (fun_app$c (fun_app$d comp$ (fun_app$j (comp$d ?v5 )?v0 ))?v1 )?v2 )(fun_app$k (fun_app$c (fun_app$d comp$ (fun_app$j (comp$d ?v5 )?v3 ))?v4 )?v2 )))):named a150 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ )(?v5 N_N_fun$ ))(=> (= (fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))(fun_app$k ?v3 (fun_app$k ?v4 ?v2 )))(= (fun_app$k (fun_app$c (fun_app$d comp$ (fun_app$j (comp$d ?v5 )?v0 ))?v1 )?v2 )(fun_app$k (fun_app$i (comp$c (fun_app$i (comp$c ?v5 )?v3 ))?v4 )?v2 )))):named a151 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$l ?v0 (fun_app$l ?v1 ?v2 ))(fun_app$l ?v3 (fun_app$l ?v4 ?v2 )))(= (fun_app$e (fun_app$g (comp$a (fun_app$g (comp$a ?v5 )?v0 ))?v1 )?v2 )(fun_app$e (fun_app$g (comp$a (fun_app$g (comp$a ?v5 )?v3 ))?v4 )?v2 )))):named a152 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (= (fun_app$l ?v0 (fun_app$l ?v1 ?v2 ))(fun_app$f ?v3 (fun_app$e ?v4 ?v2 )))(= (fun_app$e (fun_app$g (comp$a (fun_app$g (comp$a ?v5 )?v0 ))?v1 )?v2 )(fun_app$e (fun_app$j (comp$d (fun_app$c (fun_app$d comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a153 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 N_N_fun$ ))(=> (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$l ?v4 ?v2 )))(= (fun_app$e (fun_app$g (comp$a (fun_app$j (comp$d ?v5 )?v0 ))?v1 )?v2 )(fun_app$e (fun_app$g (comp$a (fun_app$j (comp$d ?v5 )?v3 ))?v4 )?v2 )))):named a154 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ )(?v3 N_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2 ))(fun_app$k ?v3 (fun_app$e ?v4 ?v2 )))(= (fun_app$e (fun_app$g (comp$a (fun_app$j (comp$d ?v5 )?v0 ))?v1 )?v2 )(fun_app$e (fun_app$j (comp$d (fun_app$i (comp$c ?v5 )?v3 ))?v4 )?v2 )))):named a155 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_N_fun$ )(?v4 N_N_fun$ )(?v5 N_dtree_fun$ ))(=> (= (fun_app$k ?v0 (fun_app$k ?v1 ?v2 ))(fun_app$k ?v3 (fun_app$k ?v4 ?v2 )))(= (fun_app$f (fun_app$h (comp$b (fun_app$h (comp$b ?v5 )?v0 ))?v1 )?v2 )(fun_app$f (fun_app$h (comp$b (fun_app$h (comp$b ?v5 )?v3 ))?v4 )?v2 )))):named a156 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (fun_app$u (comp$j (fun_app$v (swap$ ?v0 )?v1 ))(fun_app$v (swap$ ?v0 )?v1 ))id$d )):named a157 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (fun_app$q (comp$g (fun_app$w (swap$a ?v0 )?v1 ))(fun_app$w (swap$a ?v0 )?v1 ))id$b )):named a158 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun_N_N_fun_fun$ )(?v2 N_N_fun$ ))(=> (= ?v0 (fun_app$i ?v1 ?v2 ))(iso_tuple_update_accessor_eq_assist$ id$e id$b ?v2 ?v1 ?v0 ?v2 ))):named a159 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ ))(=> (= ?v0 (fun_app$k ?v1 ?v2 ))(fun_app$a (fun_app$b (fun_app$x (fun_app$y (fun_app$z (iso_tuple_update_accessor_eq_assist$a id$b )id$ )?v2 )?v1 )?v0 )?v2 ))):named a160 ))
(assert (! (iso_tuple_update_accessor_cong_assist$ id$e id$b ):named a161 ))
(assert (! (iso_tuple_update_accessor_cong_assist$a id$b id$ ):named a162 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_dtree_fun$ ))(! (= (fun_app$f (fun_app$p (fun_app$v (swap$ ?v0 )?v1 )?v2 )?v0 )(fun_app$f ?v2 ?v1 )):pattern ((fun_app$p (fun_app$v (swap$ ?v0 )?v1 )?v2 )))):named a163 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_N_fun$ ))(! (= (fun_app$k (fun_app$i (fun_app$w (swap$a ?v0 )?v1 )?v2 )?v0 )(fun_app$k ?v2 ?v1 )):pattern ((fun_app$i (fun_app$w (swap$a ?v0 )?v1 )?v2 )))):named a164 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_dtree_fun$ ))(! (= (fun_app$f (fun_app$p (fun_app$v (swap$ ?v0 )?v1 )?v2 )?v1 )(fun_app$f ?v2 ?v0 )):pattern ((fun_app$p (fun_app$v (swap$ ?v0 )?v1 )?v2 )))):named a165 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_N_fun$ ))(! (= (fun_app$k (fun_app$i (fun_app$w (swap$a ?v0 )?v1 )?v2 )?v1 )(fun_app$k ?v2 ?v0 )):pattern ((fun_app$i (fun_app$w (swap$a ?v0 )?v1 )?v2 )))):named a166 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_dtree_fun$ ))(= (fun_app$p (fun_app$v (swap$ ?v0 )?v1 )(fun_app$p (fun_app$v (swap$ ?v0 )?v1 )?v2 ))?v2 )):named a167 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_N_fun$ ))(= (fun_app$i (fun_app$w (swap$a ?v0 )?v1 )(fun_app$i (fun_app$w (swap$a ?v0 )?v1 )?v2 ))?v2 )):named a168 ))
(assert (! (forall ((?v0 N$ )(?v1 N_dtree_fun$ ))(! (= (fun_app$p (fun_app$v (swap$ ?v0 )?v0 )?v1 )?v1 ):pattern ((fun_app$p (fun_app$v (swap$ ?v0 )?v0 )?v1 )))):named a169 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ ))(! (= (fun_app$i (fun_app$w (swap$a ?v0 )?v0 )?v1 )?v1 ):pattern ((fun_app$i (fun_app$w (swap$a ?v0 )?v0 )?v1 )))):named a170 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N$ )(?v3 N_dtree_fun$ ))(! (=> (and (not (= ?v0 ?v1 ))(not (= ?v0 ?v2 )))(= (fun_app$f (fun_app$p (fun_app$v (swap$ ?v1 )?v2 )?v3 )?v0 )(fun_app$f ?v3 ?v0 ))):pattern ((fun_app$f (fun_app$p (fun_app$v (swap$ ?v1 )?v2 )?v3 )?v0 )))):named a171 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N$ )(?v3 N_N_fun$ ))(! (=> (and (not (= ?v0 ?v1 ))(not (= ?v0 ?v2 )))(= (fun_app$k (fun_app$i (fun_app$w (swap$a ?v1 )?v2 )?v3 )?v0 )(fun_app$k ?v3 ?v0 ))):pattern ((fun_app$k (fun_app$i (fun_app$w (swap$a ?v1 )?v2 )?v3 )?v0 )))):named a172 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_dtree_fun$ ))(= (fun_app$p (fun_app$v (swap$ ?v0 )?v1 )?v2 )(fun_app$p (fun_app$v (swap$ ?v1 )?v0 )?v2 ))):named a173 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_N_fun$ ))(= (fun_app$i (fun_app$w (swap$a ?v0 )?v1 )?v2 )(fun_app$i (fun_app$w (swap$a ?v1 )?v0 )?v2 ))):named a174 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N$ )(?v3 N_dtree_fun$ ))(=> (and (not (= ?v0 ?v1 ))(not (= ?v2 ?v1 )))(= (fun_app$p (fun_app$v (swap$ ?v0 )?v2 )(fun_app$p (fun_app$v (swap$ ?v2 )?v1 )(fun_app$p (fun_app$v (swap$ ?v0 )?v2 )?v3 )))(fun_app$p (fun_app$v (swap$ ?v0 )?v1 )?v3 )))):named a175 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N$ )(?v3 N_N_fun$ ))(=> (and (not (= ?v0 ?v1 ))(not (= ?v2 ?v1 )))(= (fun_app$i (fun_app$w (swap$a ?v0 )?v2 )(fun_app$i (fun_app$w (swap$a ?v2 )?v1 )(fun_app$i (fun_app$w (swap$a ?v0 )?v2 )?v3 )))(fun_app$i (fun_app$w (swap$a ?v0 )?v1 )?v3 )))):named a176 ))
(assert (! (forall ((?v0 N_N_fun_N_N_fun_fun$ )(?v1 N_N_fun$ ))(=> (iso_tuple_update_accessor_cong_assist$a ?v0 ?v1 )(iso_tuple_update_accessor_cong_assist$a ?v0 ?v1 ))):named a177 ))
(assert (! (forall ((?v0 N_N_fun_N_N_fun_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (and (iso_tuple_update_accessor_cong_assist$a ?v0 ?v1 )(= (fun_app$k ?v2 (fun_app$k ?v1 ?v3 ))(fun_app$k ?v1 ?v3 )))(= (fun_app$k (fun_app$i ?v0 ?v2 )?v3 )?v3 ))):named a178 ))
(assert (! (forall ((?v0 N_N_fun_N_N_fun_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N$ )(?v4 N$ )(?v5 N_N_fun$ )(?v6 N_N_fun$ ))(=> (and (iso_tuple_update_accessor_cong_assist$a ?v0 ?v1 )(and (= ?v2 ?v3 )(and (= (fun_app$k ?v1 ?v3 )?v4 )(forall ((?v7 N$ ))(=> (= ?v4 ?v7 )(= (fun_app$k ?v5 ?v7 )(fun_app$k ?v6 ?v7 )))))))(= (fun_app$k (fun_app$i ?v0 ?v5 )?v2 )(fun_app$k (fun_app$i ?v0 ?v6 )?v3 )))):named a179 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ )(?v1 T_dtree_sum_bool_fun$ ))(=> (forall ((?v2 T_dtree_sum$ ))(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a180 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_bool_fun$ ))(=> (forall ((?v2 N$ ))(= (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 )))(= (collect$a ?v0 )(collect$a ?v1 )))):named a181 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$a (uu$ ?v0 ))?v0 )):named a182 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$ (uua$ ?v0 ))?v0 )):named a183 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$a ?v0 (collect$a ?v1 ))(fun_app$a ?v1 ?v0 ))):named a184 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$ ?v1 ?v0 ))):named a185 ))
(assert (! (forall ((?v0 N_N_fun_N_N_fun_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N$ )(?v4 N$ )(?v5 N_N_fun$ )(?v6 N_N_fun$ ))(=> (and (iso_tuple_update_accessor_cong_assist$a ?v0 ?v1 )(and (= ?v2 ?v3 )(and (= (fun_app$k ?v1 ?v3 )?v4 )(forall ((?v7 N$ ))(=> (= ?v7 ?v4 )(= (fun_app$k ?v5 ?v7 )(fun_app$k ?v6 ?v7 )))))))(= (fun_app$k (fun_app$i ?v0 ?v5 )?v2 )(fun_app$k (fun_app$i ?v0 ?v6 )?v3 )))):named a186 ))
(assert (! (forall ((?v0 N_N_fun_N_N_fun_fun$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_N_fun$ )(?v4 N$ )(?v5 N$ ))(=> (fun_app$a (fun_app$b (fun_app$x (fun_app$y (fun_app$z (iso_tuple_update_accessor_eq_assist$a ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 )(iso_tuple_update_accessor_cong_assist$a ?v0 ?v1 ))):named a187 ))
(assert (! (forall ((?v0 N_N_fun_N_N_fun_fun$ )(?v1 N_N_fun$ ))(=> (iso_tuple_update_accessor_cong_assist$a ?v0 ?v1 )(= (fun_app$i ?v0 id$ )id$ ))):named a188 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N$ )(?v2 N$ )(?v3 N_dtree_fun$ ))(= (fun_app$c (fun_app$d comp$ ?v0 )(fun_app$p (fun_app$v (swap$ ?v1 )?v2 )?v3 ))(fun_app$i (fun_app$w (swap$a ?v1 )?v2 )(fun_app$c (fun_app$d comp$ ?v0 )?v3 )))):named a189 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$e root$ (node$ ?v0 ?v1 ))?v0 )):named a190 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(= (fun_app$m (comp$e (fun_app$aa (map_fun$ ?v0 )?v1 ))(fun_app$ab (map_fun$a ?v2 )?v3 ))(fun_app$ac (map_fun$b (fun_app$c (fun_app$d comp$ ?v2 )?v0 ))(fun_app$c (fun_app$d comp$ ?v1 )?v3 )))):named a191 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(=> (iso_tuple_surjective_proof_assist$ ?v0 ?v1 id$ )(= ?v0 ?v1 ))):named a192 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_fset$ ))(! (= (fun_app$e root$ (nNode$ ?v0 ?v1 ))?v0 ):pattern ((nNode$ ?v0 ?v1 )))):named a193 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr2$ ?v0 ?v1 ?v2 )(member$a (fun_app$e root$ ?v1 )?v0 ))):named a194 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$a (fun_app$ad (inItr$ ?v0 )?v1 )?v2 )(member$a (fun_app$e root$ ?v1 )?v0 ))):named a195 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$e root$ ?v0 )?v1 )(fun_app$a (fun_app$ad (inItr$ ?v1 )?v0 )(fun_app$e root$ ?v0 )))):named a196 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_fset$ )(?v2 N$ )(?v3 T_dtree_sum_fset$ ))(= (= (nNode$ ?v0 ?v1 )(nNode$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a197 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (forall ((?v1 N$ )(?v2 T_dtree_sum_fset$ ))(=> (= ?v0 (nNode$ ?v1 ?v2 ))false ))false )):named a198 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N_N_fun$ ))(= (fun_app$n (fun_app$aa (map_fun$ ?v0 )?v1 )(fun_app$o (fun_app$ab (map_fun$a ?v2 )?v3 )?v4 ))(fun_app$i (fun_app$ac (map_fun$b (fun_app$c (fun_app$d comp$ ?v2 )?v0 ))(fun_app$c (fun_app$d comp$ ?v1 )?v3 ))?v4 ))):named a199 ))
(assert (! (= (fun_app$ac (map_fun$b id$ )id$ )id$b ):named a200 ))
(assert (! (forall ((?v0 Dtree$ ))(= (nNode$ (fun_app$e root$ ?v0 )(ccont$ ?v0 ))?v0 )):named a201 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (=> (= ?v0 (nNode$ (fun_app$e root$ ?v0 )(ccont$ ?v0 )))false )false )):named a202 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (fun_app$e root$ ?v0 )(cont$ ?v0 ))?v0 )):named a203 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$a (fun_app$ad (inItr$ ?v0 )?v1 )?v2 )(exists ((?v3 Dtree$ ))(and (fun_app$ae (subtr$ ?v0 ?v3 )?v1 )(= (fun_app$e root$ ?v3 )?v2 ))))):named a204 ))
(assert (! (quotient3$ uub$ id$ id$ ):named a205 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$ae (subtr$ ?v0 ?v1 )?v2 )(fun_app$ae (subtr$ ?v0 ?v2 )?v3 ))(fun_app$ae (subtr$ ?v0 ?v1 )?v3 ))):named a206 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$e root$ ?v0 )(fun_app$e root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a207 ))
(assert (! (forall ((?v0 Dtree_dtree_bool_fun_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(=> (quotient3$a ?v0 ?v1 ?v2 )(= (fun_app$c (fun_app$d comp$ ?v1 )?v2 )id$ ))):named a208 ))
(assert (! (forall ((?v0 N_N_bool_fun_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_dtree_bool_fun_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ )(?v6 N_N_bool_fun_fun$ )(?v7 N_N_fun$ )(?v8 N_N_fun$ ))(=> (and (quotient3$ ?v0 ?v1 ?v2 )(and (quotient3$b ?v3 ?v4 ?v5 )(quotient3$ ?v6 ?v7 ?v8 )))(= (fun_app$af (fun_app$ag (map_fun$c (fun_app$ah (map_fun$d ?v4 )?v8 ))(fun_app$ai (map_fun$e (fun_app$aj (map_fun$f ?v1 )?v5 ))(fun_app$ac (map_fun$b ?v2 )?v7 )))comp$ )comp$ ))):named a209 ))
(assert (! (forall ((?v0 N_N_bool_fun_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ ))(=> (quotient3$ ?v0 ?v1 ?v2 )(= (fun_app$i (fun_app$ac (map_fun$b ?v2 )?v1 )id$ )id$ ))):named a210 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$ae (subtr$ ?v0 ?v1 )?v2 )(member$a (fun_app$e root$ ?v2 )?v0 ))):named a211 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$ae (subtr$ ?v0 ?v1 )?v2 )(member$a (fun_app$e root$ ?v1 )?v0 ))):named a212 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$e root$ ?v0 )?v1 )(fun_app$ae (subtr$ ?v1 ?v0 )?v0 ))):named a213 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (fun_app$a (fun_app$ad (inItr$ ?v0 )?v1 )?v2 )(fun_app$ae (subtr$ ?v0 ?v1 )?v3 ))(fun_app$a (fun_app$ad (inItr$ ?v0 )?v3 )?v2 ))):named a214 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$e root$ ?v0 )(fun_app$e root$ ?v1 ))(= (ccont$ ?v0 )(ccont$ ?v1 )))(= ?v0 ?v1 ))):named a215 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_fset$ ))(! (= (ccont$ (nNode$ ?v0 ?v1 ))?v1 ):pattern ((nNode$ ?v0 ?v1 )))):named a216 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr2$ ?v0 ?v1 ?v2 )(and (member$a (fun_app$e root$ ?v3 )?v0 )(member$ (inr$ ?v1 )(cont$ ?v3 ))))(inFr2$ ?v0 ?v3 ?v2 ))):named a217 ))
(check-sat )
;(get-unsat-core )
