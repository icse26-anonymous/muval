;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_T_dtree_sum_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun t$ ()T$ )
(declare-fun n1$ ()N$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ ()T_T_dtree_sum_fun$ )
(declare-fun bot$ ()N_set$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun tr1$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun minus$ (N_set$ N_set$ )N_set$ )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (T$ T_set$ )Bool )
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$ )T_set$ )
(declare-fun fun_app$ (T_T_dtree_sum_fun$ T$ )T_dtree_sum$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun member$b (N$ N_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun fun_app$a (N_dtree_fun$ N$ )Dtree$ )
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$ uu$ ?v0 )(inl$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (or (member$ t$ (vimage$ uu$ (cont$ tr$ )))(exists ((?v0 Dtree$ ))(and (member$a (inr$ ?v0 )(cont$ tr$ ))(inFr$ (minus$ ns$ (insert$ (root$ tr$ )bot$ ))?v0 t$ ))))):named a1 ))
(assert (! (regular$ tr$ ):named a2 ))
(assert (! (member$a (inr$ (fun_app$a f$ n1$ ))(cont$ tr$ )):named a3 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (fun_app$a f$ ?v0 ))?v0 )):named a4 ))
(assert (! (member$b (root$ tr$ )ns$ ):named a5 ))
(assert (! (member$a (inl$ t$ )(cont$ tr1$ )):named a6 ))
(assert (! (inFr$ ns$ tr$ t$ ):named a7 ))
(assert (! (inFr$ (minus$ ns$ (insert$ (root$ tr$ )bot$ ))(fun_app$a f$ n1$ )t$ ):named a8 ))
(assert (! (reg$ f$ tr$ ):named a9 ))
(assert (! (= (root$ tr$ )n$ ):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(= (inFr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$b (root$ ?v3 )?v4 )(member$a (inl$ ?v5 )(cont$ ?v3 )))))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (root$ ?v3 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v3 ))(inFr$ ?v4 ?v5 ?v6 )))))))))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$b (root$ ?v3 )?v4 )(member$a (inl$ ?v5 )(cont$ ?v3 ))))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 T$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (root$ ?v3 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v3 ))(inFr$ ?v4 ?v5 ?v6 ))))))false ))))false )):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(member$a (inr$ ?v1 )(cont$ ?v3 )))(inFr$ (insert$ (root$ ?v3 )?v0 )?v3 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr$ ?v0 ?v1 ?v2 )(member$b (root$ ?v1 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$b (root$ ?v0 )?v1 )(member$a (inl$ ?v2 )(cont$ ?v0 )))(inFr$ ?v1 ?v0 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$b (root$ ?v0 )?v1 )(and (member$a (inr$ ?v2 )(cont$ ?v0 ))(inFr$ ?v1 ?v2 ?v3 )))(inFr$ ?v1 ?v0 ?v3 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$b (root$ ?v0 )?v1 ))(not (inFr$ ?v1 ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ ))(= (insert$ ?v0 (minus$ ?v1 (insert$ ?v0 bot$ )))(insert$ ?v0 ?v1 ))):named a18 ))
(check-sat )
;(get-unsat-core )
