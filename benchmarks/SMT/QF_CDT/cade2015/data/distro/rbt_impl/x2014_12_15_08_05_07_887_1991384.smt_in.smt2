;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))(A_b_prod_list$ (nil$ )(cons$ (hd$ A_b_prod$ )(tl$ A_b_prod_list$ )))(Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))(A_list$ (nil$a )(cons$a (hd$a A$ )(tl$a A_list$ )))))
(declare-fun t1$ ()A_b_rbt$ )
(declare-fun t2$ ()A_b_rbt$ )
(declare-fun set$ (A_b_prod_list$ )A_b_prod_set$ )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun set$a (A_list$ )A_set$ )
(declare-fun insert$ (A$ A_list$ )A_list$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun entries$ (A_b_rbt$ )A_b_prod_list$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun insert$a (A_b_prod$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun listMem$ (A$ A_list$ )Bool )
(declare-fun member$a (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun member$b (A_list$ )A_bool_fun$ )
(declare-fun member$c (A_b_prod_list$ )A_b_prod_bool_fun$ )
(declare-fun rotate1$ (A_list$ )A_list$ )
(declare-fun fun_app$a (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun listMem$a (A_b_prod$ A_b_prod_list$ )Bool )
(declare-fun list_ex1$ (A_bool_fun$ A_list$ )Bool )
(declare-fun rbt_less$ (A_a_bool_fun_fun$ A$ A_b_rbt$ )Bool )
(declare-fun rotate1$a (A_b_prod_list$ )A_b_prod_list$ )
(declare-fun list_ex1$a (A_b_prod_bool_fun$ A_b_prod_list$ )Bool )
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun rbt_greater$ (A_a_bool_fun_fun$ A$ A_b_rbt$ )Bool )
(assert (! (not (= (= (set$ (entries$ t1$ ))(set$ (entries$ t2$ )))(= (entries$ t1$ )(entries$ t2$ )))):named a0 ))
(assert (! (rbt_sorted$ less$ t1$ ):named a1 ))
(assert (! (rbt_sorted$ less$ t2$ ):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ ))(= (member$ ?v0 (set$a (keys$ ?v1 )))(exists ((?v2 B$ ))(member$a (pair$ ?v0 ?v2 )(set$ (entries$ ?v1 )))))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_b_rbt$ ))(=> (member$a (pair$ ?v0 ?v1 )(set$ (entries$ ?v2 )))(member$ ?v0 (set$a (keys$ ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (member$ ?v0 (set$a ?v1 ))(fun_app$ (member$b ?v1 )?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(= (member$a ?v0 (set$ ?v1 ))(fun_app$a (member$c ?v1 )?v0 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (=> (member$ ?v0 (set$a ?v1 ))(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(! (=> (member$a ?v0 (set$ ?v1 ))(= (insert$a ?v0 ?v1 )?v1 )):pattern ((insert$a ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (list_ex1$ ?v0 ?v1 )(exists ((?v2 A$ ))(and (and (member$ ?v2 (set$a ?v1 ))(fun_app$ ?v0 ?v2 ))(forall ((?v3 A$ ))(=> (and (member$ ?v3 (set$a ?v1 ))(fun_app$ ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod_list$ ))(= (list_ex1$a ?v0 ?v1 )(exists ((?v2 A_b_prod$ ))(and (and (member$a ?v2 (set$ ?v1 ))(fun_app$a ?v0 ?v2 ))(forall ((?v3 A_b_prod$ ))(=> (and (member$a ?v3 (set$ ?v1 ))(fun_app$a ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(= (set$a (rotate1$ ?v0 ))(set$a ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (set$ (rotate1$a ?v0 ))(set$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (listMem$ ?v0 ?v1 )(member$ ?v0 (set$a ?v1 ))):pattern ((listMem$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(! (= (listMem$a ?v0 ?v1 )(member$a ?v0 (set$ ?v1 ))):pattern ((listMem$a ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_b_rbt$ ))(= (rbt_less$ ?v0 ?v1 ?v2 )(forall ((?v3 A$ ))(=> (member$ ?v3 (set$a (keys$ ?v2 )))(fun_app$ (fun_app$b ?v0 ?v3 )?v1 ))))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_b_rbt$ ))(= (rbt_greater$ ?v0 ?v1 ?v2 )(forall ((?v3 A$ ))(=> (member$ ?v3 (set$a (keys$ ?v2 )))(fun_app$ (fun_app$b ?v0 ?v1 )?v3 ))))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ ))(= (rbt_less$ less$ ?v0 ?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 (set$a (keys$ ?v1 )))(fun_app$ (fun_app$b less$ ?v2 )?v0 ))))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ ))(= (rbt_greater$ less$ ?v0 ?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 (set$a (keys$ ?v1 )))(fun_app$ (fun_app$b less$ ?v0 )?v2 ))))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (fun_app$ (fun_app$b less$ ?v0 )?v1 ))(or (fun_app$ (fun_app$b less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (fun_app$b less$ ?v0 )?v1 )(fun_app$ (fun_app$b less$ ?v1 )?v0 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (fun_app$ (fun_app$b less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$ (fun_app$b less$ ?v1 )?v0 )false )))false )):named a21 ))
(check-sat )
;(get-unsat-core )
