;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort A_b_option_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_b_b_fun_fun_fun$ 0 )
(declare-datatypes ()((B_option$ (none$ )(some$ (the$ B$ )))(Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))))
(declare-fun f$ ()A_b_b_b_fun_fun_fun$ )
(declare-fun k$ ()A$ )
(declare-fun t$ ()A_b_rbt$ )
(declare-fun v$ ()B$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()B_b_fun$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun fun_app$ (B_b_fun$ B$ )B$ )
(declare-fun fun_upd$ (A_b_option_fun$ A$ B_option$ A$ )B_option$ )
(declare-fun rbt_ins$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$a (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun fun_app$b (A_b_b_b_fun_fun_fun$ A$ )B_b_b_fun_fun$ )
(declare-fun fun_app$c (A_b_option_fun$ A$ )B_option$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun rbt_lookup$ (A_a_bool_fun_fun$ A_b_rbt$ )A_b_option_fun$ )
(declare-fun case_option$ (B$ B_b_fun$ B_option$ )B$ )
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$ (fun_app$a (fun_app$b f$ k$ )?v0 )v$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (fun_app$c (rbt_lookup$ less$ (rbt_ins$ less$ f$ k$ v$ t$ ))x$ )(fun_upd$ (rbt_lookup$ less$ t$ )k$ (some$ (case_option$ v$ uu$ (fun_app$c (rbt_lookup$ less$ t$ )k$ )))x$ ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (fun_app$d (fun_app$e less$ ?v0 )?v1 ))(or (fun_app$d (fun_app$e less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$d (fun_app$e less$ ?v1 )?v0 )false )))false )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(=> (not false )(fun_app$d (fun_app$e less$ ?v1 )?v0 )))false )):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v2 ))(fun_app$d (fun_app$e less$ ?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v2 ))(fun_app$d (fun_app$e less$ ?v0 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v2 )?v0 ))(fun_app$d (fun_app$e less$ ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v0 ))false )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v0 ))false )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v0 ))false )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$d (fun_app$e less$ ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(= (= ?v1 ?v0 )false ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(= (= ?v0 ?v1 )false ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 Bool ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(= (=> (fun_app$d (fun_app$e less$ ?v1 )?v0 )?v2 )true ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(= (not (fun_app$d (fun_app$e less$ ?v1 )?v0 ))true ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(not (fun_app$d (fun_app$e less$ ?v1 )?v0 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a18 ))
(check-sat )
;(get-unsat-core )
