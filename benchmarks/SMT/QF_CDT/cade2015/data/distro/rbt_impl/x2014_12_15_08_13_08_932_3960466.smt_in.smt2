;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_c_rbt_bool_fun$ 0 )
(declare-sort B_c_a_a_fun_fun_fun$ 0 )
(declare-sort B_c_rbt_a_a_fun_fun$ 0 )
(declare-sort B_c_rbt_b_c_rbt_fun$ 0 )
(declare-datatypes ()((Color$ (r$ )(b$ ))(B_c_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ B_c_rbt$ )(selectb$ B$ )(selectc$ C$ )(selectd$ B_c_rbt$ )))))
(declare-fun f$ ()B_c_a_a_fun_fun_fun$ )
(declare-fun x$ ()A$ )
(declare-fun id$ ()A_a_fun$ )
(declare-fun fold$ (B_c_a_a_fun_fun_fun$ )B_c_rbt_a_a_fun_fun$ )
(declare-fun inv1l$ (B_c_rbt$ )Bool )
(declare-fun is_rbt$ (B_b_bool_fun_fun$ B_c_rbt$ )Bool )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun rbt_del$ (B_b_bool_fun_fun$ B$ )B_c_rbt_b_c_rbt_fun$ )
(declare-fun fun_app$a (B_c_rbt_a_a_fun_fun$ B_c_rbt$ )A_a_fun$ )
(declare-fun fun_app$b (B_c_rbt_b_c_rbt_fun$ B_c_rbt$ )B_c_rbt$ )
(declare-fun fun_app$c (B_c_rbt_bool_fun$ B_c_rbt$ )Bool )
(declare-fun pred_rbt$ (B_bool_fun$ C_bool_fun$ B_c_rbt$ )Bool )
(declare-fun rbt_less$ (B_b_bool_fun_fun$ B$ )B_c_rbt_bool_fun$ )
(declare-fun rbt_sorted$ (B_b_bool_fun_fun$ )B_c_rbt_bool_fun$ )
(declare-fun rbt_greater$ (B_b_bool_fun_fun$ B$ )B_c_rbt_bool_fun$ )
(declare-fun rbt_map_entry$ (B_b_bool_fun_fun$ B$ C_c_fun$ )B_c_rbt_b_c_rbt_fun$ )
(assert (! (not (= (fun_app$ (fun_app$a (fold$ f$ )empty$ )x$ )x$ )):named a0 ))
(assert (! (forall ((?v0 B_c_a_a_fun_fun_fun$ ))(! (= (fun_app$a (fold$ ?v0 )empty$ )id$ ):pattern ((fold$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 C_bool_fun$ ))(pred_rbt$ ?v0 ?v1 empty$ )):named a2 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ ))(is_rbt$ ?v0 empty$ )):named a3 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ ))(! (= (fun_app$b (rbt_del$ ?v0 ?v1 )empty$ )empty$ ):pattern ((rbt_del$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ ))(! (= (fun_app$c (rbt_sorted$ ?v0 )empty$ )true ):pattern ((rbt_sorted$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 C_c_fun$ ))(! (= (fun_app$b (rbt_map_entry$ ?v0 ?v1 ?v2 )empty$ )empty$ ):pattern ((rbt_map_entry$ ?v0 ?v1 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ ))(! (= (fun_app$c (rbt_less$ ?v0 ?v1 )empty$ )true ):pattern ((rbt_less$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ ))(! (= (fun_app$c (rbt_greater$ ?v0 ?v1 )empty$ )true ):pattern ((rbt_greater$ ?v0 ?v1 )))):named a8 ))
(assert (! (= (inv1l$ empty$ )true ):named a9 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B$ )(?v3 C_c_fun$ )(?v4 B_c_rbt$ ))(= (fun_app$c (rbt_less$ ?v0 ?v1 )(fun_app$b (rbt_map_entry$ ?v0 ?v2 ?v3 )?v4 ))(fun_app$c (rbt_less$ ?v0 ?v1 )?v4 ))):named a10 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B$ )(?v3 C_c_fun$ )(?v4 B_c_rbt$ ))(= (fun_app$c (rbt_greater$ ?v0 ?v1 )(fun_app$b (rbt_map_entry$ ?v0 ?v2 ?v3 )?v4 ))(fun_app$c (rbt_greater$ ?v0 ?v1 )?v4 ))):named a11 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 C_c_fun$ )(?v3 B_c_rbt$ ))(= (is_rbt$ ?v0 (fun_app$b (rbt_map_entry$ ?v0 ?v1 ?v2 )?v3 ))(is_rbt$ ?v0 ?v3 ))):named a12 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 C_c_fun$ )(?v3 B_c_rbt$ ))(= (fun_app$c (rbt_sorted$ ?v0 )(fun_app$b (rbt_map_entry$ ?v0 ?v1 ?v2 )?v3 ))(fun_app$c (rbt_sorted$ ?v0 )?v3 ))):named a13 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_c_rbt$ ))(=> (is_rbt$ ?v0 ?v1 )(fun_app$c (rbt_sorted$ ?v0 )?v1 ))):named a14 ))
(check-sat )
;(get-unsat-core )
