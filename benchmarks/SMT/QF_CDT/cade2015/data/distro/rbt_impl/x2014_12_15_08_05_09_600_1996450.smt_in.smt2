;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))(A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))(A_b_prod_list$ (nil$a )(cons$a (hd$a A_b_prod$ )(tl$a A_b_prod_list$ )))(Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))))
(declare-fun t1$ ()A_b_rbt$ )
(declare-fun uu$ ()A_b_prod_a_fun$ )
(declare-fun map$ (A_b_prod_a_fun$ A_b_prod_list$ )A_list$ )
(declare-fun less$ (A$ A$ )Bool )
(declare-fun entries$ (A_b_rbt$ )A_b_prod_list$ )
(declare-fun fun_app$ (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun distinct$ (A_list$ )Bool )
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (distinct$ (map$ uu$ (entries$ t1$ )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (less$ ?v0 ?v1 ))(or (less$ ?v1 ?v0 )(= ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (less$ ?v0 ?v1 )(less$ ?v1 ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (less$ ?v0 ?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (less$ ?v1 ?v0 )false )))false )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (less$ ?v0 ?v1 )(=> (not false )(less$ ?v1 ?v0 )))false )):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (less$ ?v0 ?v1 )(less$ ?v1 ?v2 ))(less$ ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (less$ ?v0 ?v1 )(less$ ?v1 ?v2 ))(less$ ?v0 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (less$ ?v0 ?v1 )(less$ ?v2 ?v0 ))(less$ ?v2 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (less$ ?v0 ?v1 )(less$ ?v1 ?v0 ))false )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (less$ ?v0 ?v1 )(less$ ?v1 ?v0 ))false )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (less$ ?v0 ?v1 )(less$ ?v1 ?v0 ))false )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (less$ ?v0 ?v1 )(= ?v1 ?v2 ))(less$ ?v0 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (less$ ?v0 ?v1 )(= (= ?v1 ?v0 )false ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (less$ ?v0 ?v1 )(= (= ?v0 ?v1 )false ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 Bool ))(=> (less$ ?v0 ?v1 )(= (=> (less$ ?v1 ?v0 )?v2 )true ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (less$ ?v0 ?v1 )(= (not (less$ ?v1 ?v0 ))true ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (less$ ?v0 ?v1 )(not (less$ ?v1 ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (less$ ?v0 ?v1 )(not (= ?v0 ?v1 )))):named a18 ))
(check-sat )
;(get-unsat-core )
