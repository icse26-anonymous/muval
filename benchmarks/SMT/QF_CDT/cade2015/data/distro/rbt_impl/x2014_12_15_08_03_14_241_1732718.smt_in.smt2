;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))(Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))(A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))(A_b_prod_list$ (nil$a )(cons$a (hd$a A_b_prod$ )(tl$a A_b_prod_list$ )))))
(declare-fun k$ ()A$ )
(declare-fun t$ ()A_b_rbt$ )
(declare-fun uu$ ()A_b_prod_a_fun$ )
(declare-fun map$ (A_a_b_prod_fun$ A_list$ )A_b_prod_list$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun map$a (A_b_prod_a_b_prod_fun$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun map$b (A_b_prod_a_fun$ A_b_prod_list$ )A_list$ )
(declare-fun map$c (A_a_fun$ A_list$ )A_list$ )
(declare-fun set$a (A_b_prod_list$ )A_b_prod_set$ )
(declare-fun image$ (A_a_b_prod_fun$ A_set$ )A_b_prod_set$ )
(declare-fun image$a (A_b_prod_a_b_prod_fun$ A_b_prod_set$ )A_b_prod_set$ )
(declare-fun image$b (A_b_prod_a_fun$ A_b_prod_set$ )A_set$ )
(declare-fun image$c (A_a_fun$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun entries$ (A_b_rbt$ )A_b_prod_list$ )
(declare-fun fun_app$ (A_b_prod_a_fun$ A_b_prod$ )A$ )
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (member$ k$ (set$ (keys$ t$ )))):named a1 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_list$ ))(= (set$a (map$ ?v0 ?v1 ))(image$ ?v0 (set$ ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_list$ ))(= (set$a (map$a ?v0 ?v1 ))(image$a ?v0 (set$a ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_list$ ))(= (set$ (map$b ?v0 ?v1 ))(image$b ?v0 (set$a ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (set$ (map$c ?v0 ?v1 ))(image$c ?v0 (set$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(! (= (keys$ ?v0 )(map$b uu$ (entries$ ?v0 ))):pattern ((keys$ ?v0 )))):named a6 ))
(check-sat )
;(get-unsat-core )
