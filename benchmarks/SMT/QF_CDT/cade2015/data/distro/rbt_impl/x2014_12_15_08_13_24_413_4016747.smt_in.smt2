;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_b_rbt_a_b_rbt_fun$ 0 )
(declare-sort B_a_b_rbt_a_b_rbt_fun_fun$ 0 )
(declare-sort A_b_a_b_rbt_a_b_rbt_fun_fun_fun$ 0 )
(declare-sort B_a_b_rbt_a_b_prod_list_prod_fun$ 0 )
(declare-sort Nat_a_b_rbt_a_b_prod_list_prod_fun$ 0 )
(declare-sort A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ 0 )
(declare-sort Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$ 0 )
(declare-sort A_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun$ 0 )
(declare-sort A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))(A_b_prod_list$ (nil$ )(cons$ (hd$ A_b_prod$ )(tl$ A_b_prod_list$ )))(Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))(A_b_rbt_a_b_prod_list_prod$ (pair$a (fst$a A_b_rbt$ )(snd$a A_b_prod_list$ )))(Nat_nat_prod$ (pair$b (fst$b Nat$ )(snd$b Nat$ )))(Num$ (one$ )(bit0$ (selecte$ Num$ ))(bit1$ (selectf$ Num$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun uu$ (A_b_prod_list$ )A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun div$ (Nat$ Nat$ )Nat$ )
(declare-fun kvs$ ()A_b_prod_list$ )
(declare-fun mod$ (Nat$ Nat$ )Nat$ )
(declare-fun uua$ ()A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uub$ (A_b_rbt$ )A_b_a_b_rbt_a_b_rbt_fun_fun_fun$ )
(declare-fun uuc$ (Nat$ A_b_rbt$ A_b_prod_list$ )A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uud$ (Nat$ A_b_rbt$ )A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uue$ (Nat$ )A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uuf$ (Nat$ A_b_rbt$ A_b_prod_list$ )A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uug$ (Nat$ A_b_rbt$ )A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uuh$ (Nat$ )A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uui$ ()Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uuj$ (Nat$ A_b_rbt$ A_b_prod_list$ )A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uuk$ (Nat$ A_b_rbt$ )A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uul$ (Nat$ )A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uum$ (Nat$ A_b_rbt$ A_b_prod_list$ )A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uun$ (Nat$ A_b_rbt$ )A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun uuo$ (Nat$ )A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ )
(declare-fun one$a ()Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun apfst$ (A_b_rbt_a_b_rbt_fun$ A_b_rbt_a_b_prod_list_prod$ )A_b_rbt_a_b_prod_list_prod$ )
(declare-fun fun_app$ (Nat_a_b_rbt_a_b_prod_list_prod_fun$ Nat$ )A_b_rbt_a_b_prod_list_prod$ )
(declare-fun numeral$ (Num$ )Nat$ )
(declare-fun fun_app$a (Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$ Nat$ )Nat_a_b_rbt_a_b_prod_list_prod_fun$ )
(declare-fun fun_app$b (A_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun$ A_b_prod_list$ )A_b_rbt_a_b_prod_list_prod$ )
(declare-fun fun_app$c (A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_prod$ )A_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun$ )
(declare-fun fun_app$d (A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_rbt$ )A_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun$ )
(declare-fun fun_app$e (B_a_b_rbt_a_b_prod_list_prod_fun$ B$ )A_b_rbt_a_b_prod_list_prod$ )
(declare-fun fun_app$f (A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ A$ )B_a_b_rbt_a_b_prod_list_prod_fun$ )
(declare-fun fun_app$g (A_b_rbt_a_b_rbt_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$h (B_a_b_rbt_a_b_rbt_fun_fun$ B$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun fun_app$i (A_b_a_b_rbt_a_b_rbt_fun_fun_fun$ A$ )B_a_b_rbt_a_b_rbt_fun_fun$ )
(declare-fun case_list$ (A_b_rbt_a_b_prod_list_prod$ A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ )A_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun$ )
(declare-fun case_prod$ (A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_rbt_a_b_prod_list_prod$ )A_b_rbt_a_b_prod_list_prod$ )
(declare-fun undefined$ ()A_b_rbt_a_b_prod_list_prod$ )
(declare-fun case_prod$a (A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_prod$ )A_b_rbt_a_b_prod_list_prod$ )
(declare-fun case_prod$b (Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$ Nat_nat_prod$ )A_b_rbt_a_b_prod_list_prod$ )
(declare-fun divmod_nat$ (Nat$ Nat$ )Nat_nat_prod$ )
(declare-fun size_color$ (Color$ )Nat$ )
(declare-fun rbtreeify_f$ (Nat$ A_b_prod_list$ )A_b_rbt_a_b_prod_list_prod$ )
(declare-fun rbtreeify_g$ (Nat$ A_b_prod_list$ )A_b_rbt_a_b_prod_list_prod$ )
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$a uui$ ?v0 )?v1 )(ite (= ?v1 zero$ )(case_prod$ (uue$ ?v0 )(rbtreeify_f$ ?v0 kvs$ ))(case_prod$ (uuh$ ?v0 )(rbtreeify_f$ ?v0 kvs$ )))):pattern ((fun_app$ (fun_app$a uui$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(case_prod$a (uu$ ?v1 )?v0 )):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ ))(! (= (fun_app$d (uuo$ ?v0 )?v1 )(case_list$ undefined$ (uun$ ?v0 ?v1 ))):pattern ((fun_app$d (uuo$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ ))(! (= (fun_app$d (uul$ ?v0 )?v1 )(case_list$ undefined$ (uuk$ ?v0 ?v1 ))):pattern ((fun_app$d (uul$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ ))(! (= (fun_app$d (uuh$ ?v0 )?v1 )(case_list$ undefined$ (uug$ ?v0 ?v1 ))):pattern ((fun_app$d (uuh$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ ))(! (= (fun_app$d (uue$ ?v0 )?v1 )(case_list$ undefined$ (uud$ ?v0 ?v1 ))):pattern ((fun_app$d (uue$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$e (fun_app$f (uu$ ?v0 )?v1 )?v2 )(pair$a (branch$ r$ empty$ ?v1 ?v2 empty$ )?v0 )):pattern ((fun_app$e (fun_app$f (uu$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ ))(! (= (fun_app$g (fun_app$h (fun_app$i (uub$ ?v0 )?v1 )?v2 )?v3 )(branch$ b$ ?v0 ?v1 ?v2 ?v3 )):pattern ((fun_app$g (fun_app$h (fun_app$i (uub$ ?v0 )?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ )(?v2 A_b_prod$ )(?v3 A_b_prod_list$ ))(! (= (fun_app$b (fun_app$c (uun$ ?v0 ?v1 )?v2 )?v3 )(case_prod$a (uum$ ?v0 ?v1 ?v3 )?v2 )):pattern ((fun_app$b (fun_app$c (uun$ ?v0 ?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ )(?v2 A_b_prod$ )(?v3 A_b_prod_list$ ))(! (= (fun_app$b (fun_app$c (uuk$ ?v0 ?v1 )?v2 )?v3 )(case_prod$a (uuj$ ?v0 ?v1 ?v3 )?v2 )):pattern ((fun_app$b (fun_app$c (uuk$ ?v0 ?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ )(?v2 A_b_prod$ )(?v3 A_b_prod_list$ ))(! (= (fun_app$b (fun_app$c (uug$ ?v0 ?v1 )?v2 )?v3 )(case_prod$a (uuf$ ?v0 ?v1 ?v3 )?v2 )):pattern ((fun_app$b (fun_app$c (uug$ ?v0 ?v1 )?v2 )?v3 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ )(?v2 A_b_prod$ )(?v3 A_b_prod_list$ ))(! (= (fun_app$b (fun_app$c (uud$ ?v0 ?v1 )?v2 )?v3 )(case_prod$a (uuc$ ?v0 ?v1 ?v3 )?v2 )):pattern ((fun_app$b (fun_app$c (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ )(?v2 A_b_prod_list$ )(?v3 A$ )(?v4 B$ ))(! (= (fun_app$e (fun_app$f (uuj$ ?v0 ?v1 ?v2 )?v3 )?v4 )(apfst$ (fun_app$h (fun_app$i (uub$ ?v1 )?v3 )?v4 )(rbtreeify_g$ (div$ ?v0 (numeral$ (bit0$ one$ )))?v2 ))):pattern ((fun_app$e (fun_app$f (uuj$ ?v0 ?v1 ?v2 )?v3 )?v4 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ )(?v2 A_b_prod_list$ )(?v3 A$ )(?v4 B$ ))(! (= (fun_app$e (fun_app$f (uum$ ?v0 ?v1 ?v2 )?v3 )?v4 )(apfst$ (fun_app$h (fun_app$i (uub$ ?v1 )?v3 )?v4 )(rbtreeify_f$ (div$ ?v0 (numeral$ (bit0$ one$ )))?v2 ))):pattern ((fun_app$e (fun_app$f (uum$ ?v0 ?v1 ?v2 )?v3 )?v4 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ )(?v2 A_b_prod_list$ )(?v3 A$ )(?v4 B$ ))(! (= (fun_app$e (fun_app$f (uuc$ ?v0 ?v1 ?v2 )?v3 )?v4 )(apfst$ (fun_app$h (fun_app$i (uub$ ?v1 )?v3 )?v4 )(rbtreeify_g$ ?v0 ?v2 ))):pattern ((fun_app$e (fun_app$f (uuc$ ?v0 ?v1 ?v2 )?v3 )?v4 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_rbt$ )(?v2 A_b_prod_list$ )(?v3 A$ )(?v4 B$ ))(! (= (fun_app$e (fun_app$f (uuf$ ?v0 ?v1 ?v2 )?v3 )?v4 )(apfst$ (fun_app$h (fun_app$i (uub$ ?v1 )?v3 )?v4 )(rbtreeify_f$ ?v0 ?v2 ))):pattern ((fun_app$e (fun_app$f (uuf$ ?v0 ?v1 ?v2 )?v3 )?v4 )))):named a15 ))
(assert (! (not (= (rbtreeify_f$ n$ kvs$ )(ite (= n$ zero$ )(pair$a empty$ kvs$ )(ite (= n$ one$a )(fun_app$b (case_list$ undefined$ uua$ )kvs$ )(case_prod$b uui$ (divmod_nat$ n$ (numeral$ (bit0$ one$ )))))))):named a16 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ )(?v5 Color$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ )(?v9 A_b_rbt$ ))(= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$ ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a17 ))
(assert (! (forall ((?v0 Color$ ))(=> (and (=> (= ?v0 r$ )false )(=> (= ?v0 b$ )false ))false )):named a18 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (and (=> (= ?v0 empty$ )false )(and (forall ((?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(=> (= ?v0 (branch$ r$ ?v1 ?v2 ?v3 ?v4 ))false ))(forall ((?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(=> (= ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4 ))false ))))false )):named a19 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (and (=> (= ?v0 empty$ )false )(forall ((?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))false )))false )):named a20 ))
(assert (! (not (= r$ b$ )):named a21 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a22 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$ ?v0 )one$a )(= ?v0 one$ ))):named a23 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$a (numeral$ ?v0 ))(= one$ ?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_b_rbt_a_b_rbt_fun$ )(?v1 A_b_rbt$ )(?v2 A_b_prod_list$ ))(! (= (apfst$ ?v0 (pair$a ?v1 ?v2 ))(pair$a (fun_app$g ?v0 ?v1 )?v2 )):pattern ((apfst$ ?v0 (pair$a ?v1 ?v2 ))))):named a25 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a26 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a27 ))
(assert (! (not (= zero$ (numeral$ (bit0$ one$ )))):named a28 ))
(assert (! (= (numeral$ one$ )one$a ):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_list$ ))(= (rbtreeify_f$ ?v0 ?v1 )(ite (= ?v0 zero$ )(pair$a empty$ ?v1 )(ite (= ?v0 one$a )(fun_app$b (case_list$ undefined$ uua$ )?v1 )(ite (= (mod$ ?v0 (numeral$ (bit0$ one$ )))zero$ )(case_prod$ (uul$ ?v0 )(rbtreeify_f$ (div$ ?v0 (numeral$ (bit0$ one$ )))?v1 ))(case_prod$ (uuo$ ?v0 )(rbtreeify_f$ (div$ ?v0 (numeral$ (bit0$ one$ )))?v1 ))))))):named a30 ))
(assert (! (= (numeral$ one$ )one$a ):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_list$ ))(= (rbtreeify_g$ ?v0 ?v1 )(ite (or (= ?v0 zero$ )(= ?v0 one$a ))(pair$a empty$ ?v1 )(ite (= (mod$ ?v0 (numeral$ (bit0$ one$ )))zero$ )(case_prod$ (uul$ ?v0 )(rbtreeify_g$ (div$ ?v0 (numeral$ (bit0$ one$ )))?v1 ))(case_prod$ (uul$ ?v0 )(rbtreeify_f$ (div$ ?v0 (numeral$ (bit0$ one$ )))?v1 )))))):named a32 ))
(assert (! (= (size_color$ r$ )zero$ ):named a33 ))
(check-sat )
;(get-unsat-core )
