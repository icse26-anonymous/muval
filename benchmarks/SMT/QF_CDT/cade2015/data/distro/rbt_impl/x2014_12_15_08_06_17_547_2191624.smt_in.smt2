;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-datatypes ()((Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))))
(declare-fun c$ ()A_b_rbt$ )
(declare-fun k$ ()A$ )
(declare-fun l$ ()A_b_rbt$ )
(declare-fun s$ ()B$ )
(declare-fun t$ ()B$ )
(declare-fun w$ ()B$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()A$ )
(declare-fun z$ ()A$ )
(declare-fun b$a ()A_b_rbt$ )
(declare-fun r$a ()A_b_rbt$ )
(declare-fun va$ ()A_b_rbt$ )
(declare-fun vb$ ()A$ )
(declare-fun vc$ ()A_b_rbt$ )
(declare-fun vd$ ()B$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun balance$ (A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun rbt_less$ (A_a_bool_fun_fun$ A$ A_b_rbt$ )Bool )
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun rbt_greater$ (A_a_bool_fun_fun$ A$ A_b_rbt$ )Bool )
(assert (! (not (rbt_sorted$ less$ (balance$ (branch$ r$ empty$ x$ w$ (branch$ r$ b$a y$ s$ c$ ))z$ t$ (branch$ b$ va$ vb$ vd$ vc$ )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (fun_app$ (fun_app$a less$ ?v0 )?v1 ))(or (fun_app$ (fun_app$a less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$ (fun_app$a less$ ?v1 )?v0 )false )))false )):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(=> (not false )(fun_app$ (fun_app$a less$ ?v1 )?v0 )))false )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v2 )?v0 ))(fun_app$ (fun_app$a less$ ?v2 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 ))false )):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 ))false )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 ))false )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= (= ?v1 ?v0 )false ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= (= ?v0 ?v1 )false ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 Bool ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= (=> (fun_app$ (fun_app$a less$ ?v1 )?v0 )?v2 )true ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= (not (fun_app$ (fun_app$a less$ ?v1 )?v0 ))true ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(not (fun_app$ (fun_app$a less$ ?v1 )?v0 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(not (= ?v1 ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (not (fun_app$ (fun_app$a less$ ?v0 )?v1 ))(= (not (fun_app$ (fun_app$a less$ ?v1 )?v0 ))(= ?v1 ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (not (= ?v0 ?v1 ))(and (=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )false )(=> (fun_app$ (fun_app$a less$ ?v1 )?v0 )false )))false )):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(or (fun_app$ (fun_app$a less$ ?v0 )?v1 )(or (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 )))):named a23 ))
(assert (! (forall ((?v0 A$ ))(not (fun_app$ (fun_app$a less$ ?v0 )?v0 ))):named a24 ))
(assert (! (forall ((?v0 A$ ))(not (fun_app$ (fun_app$a less$ ?v0 )?v0 ))):named a25 ))
(assert (! (rbt_sorted$ less$ l$ ):named a26 ))
(assert (! (rbt_sorted$ less$ r$a ):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ )(?v2 A$ ))(=> (and (rbt_less$ less$ ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v0 )?v2 ))(rbt_less$ less$ ?v2 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_b_rbt$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(rbt_greater$ less$ ?v1 ?v2 ))(rbt_greater$ less$ ?v0 ?v2 ))):named a29 ))
(assert (! (= (rbt_sorted$ less$ empty$ )true ):named a30 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ )(?v5 Color$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ )(?v9 A_b_rbt$ ))(= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$ ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a31 ))
(assert (! (rbt_less$ less$ k$ l$ ):named a32 ))
(assert (! (rbt_greater$ less$ k$ r$a ):named a33 ))
(assert (! (rbt_sorted$ less$ (branch$ b$ va$ vb$ vd$ vc$ )):named a34 ))
(assert (! (rbt_greater$ less$ y$ (branch$ b$ va$ vb$ vd$ vc$ )):named a35 ))
(check-sat )
;(get-unsat-core )
