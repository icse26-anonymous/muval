;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_b_option_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-datatypes ()((B_option$ (none$ )(some$ (the$ B$ )))(Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))(A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun c$ ()Color$ )
(declare-fun t$ ()A_b_rbt$ )
(declare-fun inv2$ (A_b_rbt$ )Bool )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun inv1l$ (A_b_rbt$ )Bool )
(declare-fun paint$ (Color$ A_b_rbt$ )A_b_rbt$ )
(declare-fun is_rbt$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lexordp$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_b_option_fun$ A$ )B_option$ )
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun rbt_lookup$ (A_a_bool_fun_fun$ A_b_rbt$ )A_b_option_fun$ )
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun greaterThanLessThan$ (A_a_bool_fun_fun$ A$ A$ )A_set$ )
(assert (! (not (= (rbt_lookup$ less$ (paint$ c$ t$ ))(rbt_lookup$ less$ t$ ))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 Color$ ))(=> (rbt_sorted$ less$ ?v0 )(rbt_sorted$ less$ (paint$ ?v1 ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_list$ ))(lexordp_eq$ less$ ?v0 ?v0 )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (member$ ?v0 (greaterThanLessThan$ less$ ?v1 ?v2 ))(and (fun_app$ (fun_app$a less$ ?v1 )?v0 )(fun_app$ (fun_app$a less$ ?v0 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_list$ ))(=> (forall ((?v1 A$ ))(not (fun_app$ (fun_app$a less$ ?v1 )?v1 )))(not (lexordp$ less$ ?v0 ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (lessThan$ less$ ?v1 ))(fun_app$ (fun_app$a less$ ?v0 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (greaterThan$ less$ ?v1 ))(fun_app$ (fun_app$a less$ ?v1 )?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 Color$ ))(=> (inv1l$ ?v0 )(inv1l$ (paint$ ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (is_rbt$ less$ ?v0 )(rbt_sorted$ less$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_b_rbt$ )(?v2 Color$ ))(=> (rbt_sorted$ ?v0 ?v1 )(rbt_sorted$ ?v0 (paint$ ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 Color$ ))(=> (inv2$ ?v0 )(inv2$ (paint$ ?v1 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b (rbt_lookup$ less$ empty$ )?v0 )none$ ):pattern ((fun_app$b (rbt_lookup$ less$ empty$ )?v0 )))):named a13 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b (rbt_lookup$ less$ empty$ )?v0 )none$ ):pattern ((fun_app$b (rbt_lookup$ less$ empty$ )?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (lexordp$ less$ ?v0 ?v1 )(lexordp_eq$ less$ ?v0 ?v1 ))):named a15 ))
(assert (! (= (rbt_sorted$ less$ empty$ )true ):named a16 ))
(assert (! (is_rbt$ less$ empty$ ):named a17 ))
(check-sat )
;(get-unsat-core )
