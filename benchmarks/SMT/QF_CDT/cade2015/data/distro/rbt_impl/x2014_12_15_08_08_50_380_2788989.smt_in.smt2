;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_rbt_bool_fun$ 0 )
(declare-sort A_b_b_b_fun_fun_fun$ 0 )
(declare-sort A_b_rbt_a_b_rbt_fun$ 0 )
(declare-datatypes ()((Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))))
(declare-fun lt$ ()A_b_rbt$ )
(declare-fun rt$ ()A_b_rbt$ )
(declare-fun inv1$ (A_b_rbt$ )Bool )
(declare-fun inv2$ (A_b_rbt$ )Bool )
(declare-fun inv1l$ (A_b_rbt$ )Bool )
(declare-fun paint$ (Color$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun is_rbt$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun combine$ (A_b_rbt$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$ (A_b_rbt_a_b_rbt_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun rbt_ins$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun color_of$ (A_b_rbt$ )Color$ )
(declare-fun fun_app$a (A_b_rbt_bool_fun$ A_b_rbt$ )Bool )
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ )A_b_rbt_bool_fun$ )
(declare-fun balance_left$ (A_b_rbt$ A$ B$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun balance_right$ (A_b_rbt$ A$ B$ )A_b_rbt_a_b_rbt_fun$ )
(assert (! (not (inv1$ (combine$ lt$ rt$ ))):named a0 ))
(assert (! (= (color_of$ lt$ )b$ ):named a1 ))
(assert (! (= (color_of$ rt$ )b$ ):named a2 ))
(assert (! (inv1$ lt$ ):named a3 ))
(assert (! (inv1$ rt$ ):named a4 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(= (color_of$ (fun_app$ (paint$ b$ )?v0 ))b$ )):named a5 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (inv1$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(and (inv1$ ?v1 )(and (inv1$ ?v4 )(or (= ?v0 b$ )(and (= (color_of$ ?v1 )b$ )(= (color_of$ ?v4 )b$ )))))):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a6 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ ))(=> (and (inv1$ ?v0 )(and (inv1l$ ?v1 )(= (color_of$ ?v0 )b$ )))(inv1$ (fun_app$ (balance_right$ ?v0 ?v2 ?v3 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ ))(=> (and (inv1l$ ?v0 )(and (inv1$ ?v1 )(= (color_of$ ?v1 )b$ )))(inv1$ (fun_app$ (balance_left$ ?v0 ?v2 ?v3 )?v1 )))):named a8 ))
(assert (! (= (color_of$ empty$ )b$ ):named a9 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_b_b_b_fun_fun_fun$ )(?v3 A$ )(?v4 B$ ))(=> (and (inv1$ ?v0 )(and (inv2$ ?v0 )(= (color_of$ ?v0 )b$ )))(inv1$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_b_rbt$ ))(! (= (is_rbt$ ?v0 ?v1 )(and (inv1$ ?v1 )(and (inv2$ ?v1 )(and (= (color_of$ ?v1 )b$ )(fun_app$a (rbt_sorted$ ?v0 )?v1 ))))):pattern ((is_rbt$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (inv1l$ ?v0 )(inv1$ (fun_app$ (paint$ b$ )?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(! (= (combine$ empty$ ?v0 )?v0 ):pattern ((combine$ empty$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ )(?v5 Color$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ )(?v9 A_b_rbt$ ))(= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$ ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a14 ))
(assert (! (forall ((?v0 Color$ )(?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(! (= (fun_app$ (paint$ ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$ ?v0 ?v2 ?v3 ?v4 ?v5 )):pattern ((fun_app$ (paint$ ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(! (= (fun_app$a (rbt_sorted$ ?v0 )empty$ )true ):pattern ((rbt_sorted$ ?v0 )))):named a16 ))
(assert (! (= (inv2$ empty$ )true ):named a17 ))
(assert (! (= (inv1l$ empty$ )true ):named a18 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ ))(! (= (fun_app$ (balance_left$ (branch$ b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )empty$ )empty$ ):pattern ((balance_left$ (branch$ b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$ (balance_left$ empty$ ?v0 ?v1 )empty$ )empty$ ):pattern ((balance_left$ empty$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(! (= (fun_app$ (balance_right$ empty$ ?v0 ?v1 )(branch$ b$ ?v2 ?v3 ?v4 ?v5 ))empty$ ):pattern ((fun_app$ (balance_right$ empty$ ?v0 ?v1 )(branch$ b$ ?v2 ?v3 ?v4 ?v5 ))))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$ (balance_right$ empty$ ?v0 ?v1 )empty$ )empty$ ):pattern ((balance_right$ empty$ ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Color$ ))(! (= (fun_app$ (paint$ ?v0 )empty$ )empty$ ):pattern ((paint$ ?v0 )))):named a23 ))
(check-sat )
;(get-unsat-core )
