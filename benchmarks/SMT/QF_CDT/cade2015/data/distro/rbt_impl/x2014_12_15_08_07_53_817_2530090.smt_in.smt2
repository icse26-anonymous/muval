;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_b_b_fun_fun_fun$ 0 )
(declare-datatypes ()((Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))(A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun k$ ()A$ )
(declare-fun t$ ()A_b_rbt$ )
(declare-fun v$ ()B$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun paint$ (Color$ A_b_rbt$ )A_b_rbt$ )
(declare-fun is_rbt$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun rbt_ins$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun rbt_insert$ (A_a_bool_fun_fun$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun rbt_insert_with$ (A_a_bool_fun_fun$ B_b_b_fun_fun$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun rbt_insert_with_key$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(assert (! (not (rbt_sorted$ less$ (rbt_insert$ less$ k$ v$ t$ ))):named a0 ))
(assert (! (rbt_sorted$ less$ t$ ):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (fun_app$ (fun_app$a less$ ?v0 )?v1 ))(or (fun_app$ (fun_app$a less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$ (fun_app$a less$ ?v1 )?v0 )false )))false )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(=> (not false )(fun_app$ (fun_app$a less$ ?v1 )?v0 )))false )):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v2 )?v0 ))(fun_app$ (fun_app$a less$ ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 ))false )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 ))false )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 ))false )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= (= ?v1 ?v0 )false ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= (= ?v0 ?v1 )false ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 Bool ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= (=> (fun_app$ (fun_app$a less$ ?v1 )?v0 )?v2 )true ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= (not (fun_app$ (fun_app$a less$ ?v1 )?v0 ))true ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(not (fun_app$ (fun_app$a less$ ?v1 )?v0 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )(not (= ?v1 ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (not (fun_app$ (fun_app$a less$ ?v0 )?v1 ))(= (not (fun_app$ (fun_app$a less$ ?v1 )?v0 ))(= ?v1 ?v0 )))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (not (= ?v0 ?v1 ))(and (=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )false )(=> (fun_app$ (fun_app$a less$ ?v1 )?v0 )false )))false )):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(or (fun_app$ (fun_app$a less$ ?v0 )?v1 )(or (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 )))):named a24 ))
(assert (! (forall ((?v0 A$ ))(not (fun_app$ (fun_app$a less$ ?v0 )?v0 ))):named a25 ))
(assert (! (forall ((?v0 A$ ))(not (fun_app$ (fun_app$a less$ ?v0 )?v0 ))):named a26 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 B_b_b_fun_fun$ )(?v2 A$ )(?v3 B$ ))(=> (rbt_sorted$ less$ ?v0 )(rbt_sorted$ less$ (rbt_insert_with$ less$ ?v1 ?v2 ?v3 ?v0 )))):named a27 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_b_b_fun_fun_fun$ )(?v2 A$ )(?v3 B$ ))(=> (rbt_sorted$ less$ ?v0 )(rbt_sorted$ less$ (rbt_insert_with_key$ less$ ?v1 ?v2 ?v3 ?v0 )))):named a28 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (is_rbt$ less$ ?v0 )(rbt_sorted$ less$ ?v0 ))):named a29 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 Color$ ))(=> (rbt_sorted$ less$ ?v0 )(rbt_sorted$ less$ (paint$ ?v1 ?v0 )))):named a30 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_b_b_fun_fun_fun$ )(?v2 A$ )(?v3 B$ ))(=> (rbt_sorted$ less$ ?v0 )(rbt_sorted$ less$ (rbt_ins$ less$ ?v1 ?v2 ?v3 ?v0 )))):named a31 ))
(assert (! (= (rbt_sorted$ less$ empty$ )true ):named a32 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(=> (and (lexordp_eq$ less$ ?v0 ?v1 )(lexordp_eq$ less$ ?v1 ?v2 ))(lexordp_eq$ less$ ?v0 ?v2 ))):named a33 ))
(check-sat )
;(get-unsat-core )
