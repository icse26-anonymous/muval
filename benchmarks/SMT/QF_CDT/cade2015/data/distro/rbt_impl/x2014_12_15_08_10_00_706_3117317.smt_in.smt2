;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))(A_b_prod_list$ (nil$ )(cons$ (hd$ A_b_prod$ )(tl$ A_b_prod_list$ )))(Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))(A_list$ (nil$a )(cons$a (hd$a A$ )(tl$a A_list$ )))))
(declare-fun a$ ()A_b_rbt$ )
(declare-fun c$ ()A_b_rbt$ )
(declare-fun d$ ()A_b_rbt$ )
(declare-fun k$ ()A$ )
(declare-fun l$ ()A_b_rbt$ )
(declare-fun s$ ()A$ )
(declare-fun v$ ()B$ )
(declare-fun x$ ()B$ )
(declare-fun y$ ()B$ )
(declare-fun b$a ()A_b_rbt$ )
(declare-fun ka$ ()A$ )
(declare-fun r$a ()A_b_rbt$ )
(declare-fun set$ (A_b_prod_list$ )A_b_prod_set$ )
(declare-fun inv1$ (A_b_rbt$ )Bool )
(declare-fun inv2$ (A_b_rbt$ )Bool )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun set$a (A_list$ )A_set$ )
(declare-fun inv1l$ (A_b_rbt$ )Bool )
(declare-fun paint$ (Color$ A_b_rbt$ )A_b_rbt$ )
(declare-fun member$ (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun bheight$ (A_b_rbt$ )Nat$ )
(declare-fun combine$ (A_b_rbt$ A_b_rbt$ )A_b_rbt$ )
(declare-fun entries$ (A_b_rbt$ )A_b_prod_list$ )
(declare-fun member$a (A$ A_set$ )Bool )
(assert (! (not (= (member$ (pair$ k$ v$ )(set$ (entries$ (combine$ (branch$ b$ a$ ka$ x$ b$a )(branch$ b$ c$ s$ y$ d$ )))))(or (member$ (pair$ k$ v$ )(set$ (entries$ (branch$ b$ a$ ka$ x$ b$a ))))(member$ (pair$ k$ v$ )(set$ (entries$ (branch$ b$ c$ s$ y$ d$ ))))))):named a0 ))
(assert (! (inv1$ l$ ):named a1 ))
(assert (! (inv1$ r$a ):named a2 ))
(assert (! (inv2$ l$ ):named a3 ))
(assert (! (inv2$ r$a ):named a4 ))
(assert (! (= (bheight$ (combine$ b$a c$ ))(bheight$ b$a )):named a5 ))
(assert (! (= (combine$ b$a c$ )empty$ ):named a6 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ )(?v5 Color$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ )(?v9 A_b_rbt$ ))(= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$ ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a7 ))
(assert (! (inv1$ (branch$ b$ a$ ka$ x$ b$a )):named a8 ))
(assert (! (inv1$ (branch$ b$ c$ s$ y$ d$ )):named a9 ))
(assert (! (inv2$ (branch$ b$ a$ ka$ x$ b$a )):named a10 ))
(assert (! (inv2$ (branch$ b$ c$ s$ y$ d$ )):named a11 ))
(assert (! (= (bheight$ (branch$ b$ a$ ka$ x$ b$a ))(bheight$ (branch$ b$ c$ s$ y$ d$ ))):named a12 ))
(assert (! (=> (and (inv2$ b$a )(and (inv2$ c$ )(and (= (bheight$ b$a )(bheight$ c$ ))(and (inv1$ b$a )(inv1$ c$ )))))(= (member$ (pair$ k$ v$ )(set$ (entries$ (combine$ b$a c$ ))))(or (member$ (pair$ k$ v$ )(set$ (entries$ b$a )))(member$ (pair$ k$ v$ )(set$ (entries$ c$ )))))):named a13 ))
(assert (! (inv1l$ (combine$ b$a c$ )):named a14 ))
(assert (! (= (bheight$ l$ )(bheight$ r$a )):named a15 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (combine$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )empty$ )(branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ ))(= (member$a ?v0 (set$a (keys$ ?v1 )))(exists ((?v2 B$ ))(member$ (pair$ ?v0 ?v2 )(set$ (entries$ ?v1 )))))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_b_rbt$ ))(=> (member$ (pair$ ?v0 ?v1 )(set$ (entries$ ?v2 )))(member$a ?v0 (set$a (keys$ ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(! (= (combine$ empty$ ?v0 )?v0 ):pattern ((combine$ empty$ ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 Color$ )(?v3 A_b_rbt$ ))(= (member$ (pair$ ?v0 ?v1 )(set$ (entries$ (paint$ ?v2 ?v3 ))))(member$ (pair$ ?v0 ?v1 )(set$ (entries$ ?v3 ))))):named a22 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (and (=> (= ?v0 empty$ )false )(forall ((?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))false )))false )):named a23 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a24 ))
(check-sat )
;(get-unsat-core )
