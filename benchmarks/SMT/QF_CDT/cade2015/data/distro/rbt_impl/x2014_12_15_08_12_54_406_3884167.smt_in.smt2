;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_b_b_fun_fun$ 0 )
(declare-sort A_b_c_fun_fun$ 0 )
(declare-sort A_c_b_fun_fun$ 0 )
(declare-sort A_c_c_fun_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_rbt_bool_fun$ 0 )
(declare-sort A_c_rbt_bool_fun$ 0 )
(declare-sort A_b_rbt_a_b_rbt_fun$ 0 )
(declare-sort A_c_rbt_a_c_rbt_fun$ 0 )
(declare-datatypes ()((Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))(A_c_rbt$ (empty$a )(branch$a (selecte$ Color$ )(selectf$ A_c_rbt$ )(selectg$ A$ )(selecth$ C$ )(selecti$ A_c_rbt$ )))(A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun f$ ()A_c_b_fun_fun$ )
(declare-fun k$ ()A$ )
(declare-fun t$ ()A_c_rbt$ )
(declare-fun map$ (A_c_b_fun_fun$ A_c_rbt$ )A_b_rbt$ )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun map$a (A_b_b_fun_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun map$b (A_b_c_fun_fun$ A_b_rbt$ )A_c_rbt$ )
(declare-fun map$c (A_c_c_fun_fun$ A_c_rbt$ )A_c_rbt$ )
(declare-fun keys$a (A_c_rbt$ )A_list$ )
(declare-fun paint$ (Color$ A_b_rbt$ )A_b_rbt$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun paint$a (Color$ A_c_rbt$ )A_c_rbt$ )
(declare-fun balance$ (A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$ (A_b_rbt_bool_fun$ A_b_rbt$ )Bool )
(declare-fun lexordp$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun balance$a (A_c_rbt$ A$ C$ A_c_rbt$ )A_c_rbt$ )
(declare-fun fun_app$a (A_c_rbt_bool_fun$ A_c_rbt$ )Bool )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$d (A_b_rbt_a_b_rbt_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$e (A_c_rbt_a_c_rbt_fun$ A_c_rbt$ )A_c_rbt$ )
(declare-fun fun_app$f (C_c_fun$ C$ )C$ )
(declare-fun fun_app$g (B_b_fun$ B$ )B$ )
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun rbt_less$ (A_a_bool_fun_fun$ A$ )A_b_rbt_bool_fun$ )
(declare-fun rbt_less$a (A_a_bool_fun_fun$ A$ )A_c_rbt_bool_fun$ )
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun rbt_greater$ (A_a_bool_fun_fun$ A$ A_b_rbt$ )Bool )
(declare-fun rbt_greater$a (A_a_bool_fun_fun$ A$ A_c_rbt$ )Bool )
(declare-fun rbt_map_entry$ (A_a_bool_fun_fun$ A$ B_b_fun$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun rbt_map_entry$a (A_a_bool_fun_fun$ A$ C_c_fun$ )A_c_rbt_a_c_rbt_fun$ )
(declare-fun greaterThanLessThan$ (A_a_bool_fun_fun$ A$ A$ )A_set$ )
(assert (! (not (= (fun_app$ (rbt_less$ less$ k$ )(map$ f$ t$ ))(fun_app$a (rbt_less$a less$ k$ )t$ ))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$b (fun_app$c less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$b (fun_app$c less$ ?v0 )?v2 ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$b (fun_app$c less$ ?v1 )?v2 ))(fun_app$b (fun_app$c less$ ?v0 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_b_fun_fun$ )(?v2 A_b_rbt$ ))(= (rbt_greater$ less$ ?v0 (map$a ?v1 ?v2 ))(rbt_greater$ less$ ?v0 ?v2 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_c_fun_fun$ )(?v2 A_b_rbt$ ))(= (rbt_greater$a less$ ?v0 (map$b ?v1 ?v2 ))(rbt_greater$ less$ ?v0 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_c_fun_fun$ )(?v2 A_c_rbt$ ))(= (rbt_greater$a less$ ?v0 (map$c ?v1 ?v2 ))(rbt_greater$a less$ ?v0 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_b_fun_fun$ )(?v2 A_c_rbt$ ))(= (rbt_greater$ less$ ?v0 (map$ ?v1 ?v2 ))(rbt_greater$a less$ ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 B_b_fun$ )(?v3 A_b_rbt$ ))(= (fun_app$ (rbt_less$ less$ ?v0 )(fun_app$d (rbt_map_entry$ less$ ?v1 ?v2 )?v3 ))(fun_app$ (rbt_less$ less$ ?v0 )?v3 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 C_c_fun$ )(?v3 A_c_rbt$ ))(= (fun_app$a (rbt_less$a less$ ?v0 )(fun_app$e (rbt_map_entry$a less$ ?v1 ?v2 )?v3 ))(fun_app$a (rbt_less$a less$ ?v0 )?v3 ))):named a8 ))
(assert (! (forall ((?v0 A_list$ ))(lexordp_eq$ less$ ?v0 ?v0 )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (member$ ?v0 (greaterThanLessThan$ less$ ?v1 ?v2 ))(and (fun_app$b (fun_app$c less$ ?v1 )?v0 )(fun_app$b (fun_app$c less$ ?v0 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(=> (forall ((?v1 A$ ))(not (fun_app$b (fun_app$c less$ ?v1 )?v1 )))(not (lexordp$ less$ ?v0 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 Color$ )(?v2 A_b_rbt$ ))(= (fun_app$ (rbt_less$ less$ ?v0 )(paint$ ?v1 ?v2 ))(fun_app$ (rbt_less$ less$ ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 Color$ )(?v2 A_c_rbt$ ))(= (fun_app$a (rbt_less$a less$ ?v0 )(paint$a ?v1 ?v2 ))(fun_app$a (rbt_less$a less$ ?v0 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (lessThan$ less$ ?v1 ))(fun_app$b (fun_app$c less$ ?v0 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (greaterThan$ less$ ?v1 ))(fun_app$b (fun_app$c less$ ?v1 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ (rbt_less$ less$ ?v0 )empty$ )true ):pattern ((rbt_less$ less$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (rbt_less$a less$ ?v0 )empty$a )true ):pattern ((rbt_less$a less$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(! (= (fun_app$ (rbt_less$ less$ ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))(and (fun_app$b (fun_app$c less$ ?v3 )?v0 )(and (fun_app$ (rbt_less$ less$ ?v0 )?v2 )(fun_app$ (rbt_less$ less$ ?v0 )?v5 )))):pattern ((fun_app$ (rbt_less$ less$ ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 Color$ )(?v2 A_c_rbt$ )(?v3 A$ )(?v4 C$ )(?v5 A_c_rbt$ ))(! (= (fun_app$a (rbt_less$a less$ ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))(and (fun_app$b (fun_app$c less$ ?v3 )?v0 )(and (fun_app$a (rbt_less$a less$ ?v0 )?v2 )(fun_app$a (rbt_less$a less$ ?v0 )?v5 )))):pattern ((fun_app$a (rbt_less$a less$ ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(= (fun_app$ (rbt_less$ less$ ?v0 )(balance$ ?v1 ?v2 ?v3 ?v4 ))(and (fun_app$ (rbt_less$ less$ ?v0 )?v1 )(and (fun_app$ (rbt_less$ less$ ?v0 )?v4 )(fun_app$b (fun_app$c less$ ?v2 )?v0 ))))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_rbt$ )(?v2 A$ )(?v3 C$ )(?v4 A_c_rbt$ ))(= (fun_app$a (rbt_less$a less$ ?v0 )(balance$a ?v1 ?v2 ?v3 ?v4 ))(and (fun_app$a (rbt_less$a less$ ?v0 )?v1 )(and (fun_app$a (rbt_less$a less$ ?v0 )?v4 )(fun_app$b (fun_app$c less$ ?v2 )?v0 ))))):named a21 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_b_rbt$ ))(= (keys$ (map$a ?v0 ?v1 ))(keys$ ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ )(?v1 A_b_rbt$ ))(= (keys$a (map$b ?v0 ?v1 ))(keys$ ?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ )(?v1 A_c_rbt$ ))(= (keys$a (map$c ?v0 ?v1 ))(keys$a ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 A_c_rbt$ ))(= (keys$ (map$ ?v0 ?v1 ))(keys$a ?v1 ))):named a25 ))
(assert (! (forall ((?v0 A$ )(?v1 C_c_fun$ )(?v2 Color$ )(?v3 A_c_rbt$ )(?v4 A$ )(?v5 C$ )(?v6 A_c_rbt$ ))(! (= (fun_app$e (rbt_map_entry$a less$ ?v0 ?v1 )(branch$a ?v2 ?v3 ?v4 ?v5 ?v6 ))(ite (fun_app$b (fun_app$c less$ ?v0 )?v4 )(branch$a ?v2 (fun_app$e (rbt_map_entry$a less$ ?v0 ?v1 )?v3 )?v4 ?v5 ?v6 )(ite (fun_app$b (fun_app$c less$ ?v4 )?v0 )(branch$a ?v2 ?v3 ?v4 ?v5 (fun_app$e (rbt_map_entry$a less$ ?v0 ?v1 )?v6 ))(branch$a ?v2 ?v3 ?v4 (fun_app$f ?v1 ?v5 )?v6 )))):pattern ((fun_app$e (rbt_map_entry$a less$ ?v0 ?v1 )(branch$a ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a26 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(! (= (fun_app$d (rbt_map_entry$ less$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(ite (fun_app$b (fun_app$c less$ ?v0 )?v4 )(branch$ ?v2 (fun_app$d (rbt_map_entry$ less$ ?v0 ?v1 )?v3 )?v4 ?v5 ?v6 )(ite (fun_app$b (fun_app$c less$ ?v4 )?v0 )(branch$ ?v2 ?v3 ?v4 ?v5 (fun_app$d (rbt_map_entry$ less$ ?v0 ?v1 )?v6 ))(branch$ ?v2 ?v3 ?v4 (fun_app$g ?v1 ?v5 )?v6 )))):pattern ((fun_app$d (rbt_map_entry$ less$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a27 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (lexordp$ less$ ?v0 ?v1 )(lexordp_eq$ less$ ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A$ )(?v1 C_c_fun$ ))(! (= (fun_app$e (rbt_map_entry$a less$ ?v0 ?v1 )empty$a )empty$a ):pattern ((rbt_map_entry$a less$ ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_fun$ ))(! (= (fun_app$d (rbt_map_entry$ less$ ?v0 ?v1 )empty$ )empty$ ):pattern ((rbt_map_entry$ less$ ?v0 ?v1 )))):named a30 ))
(check-sat )
;(get-unsat-core )
