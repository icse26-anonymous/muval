;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-datatypes ()((Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))))
(declare-fun k$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun k$a ()Nat$ )
(declare-fun div$ (Nat$ )Nat_nat_fun$ )
(declare-fun mod$ (Nat$ )Nat_nat_fun$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun minus$ (Nat$ Nat$ )Nat$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun numeral$ (Num$ )Nat$ )
(assert (! (not (= (plus$ (minus$ k$ (fun_app$ (div$ n$ )(numeral$ (bit0$ one$ ))))(minus$ n$ (fun_app$ (div$ n$ )(numeral$ (bit0$ one$ )))))(plus$ (minus$ k$a n$ )(minus$ n$ (fun_app$ (div$ n$ )(numeral$ (bit0$ one$ ))))))):named a0 ))
(assert (! (= (minus$ k$a (fun_app$ (div$ n$ )(numeral$ (bit0$ one$ ))))(suc$ k$ )):named a1 ))
(assert (! (less_eq$ n$ k$a ):named a2 ))
(assert (! (= (fun_app$ (mod$ n$ )(numeral$ (bit0$ one$ )))(suc$ zero$ )):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(= (plus$ (fun_app$ (div$ ?v0 )(numeral$ (bit0$ one$ )))(fun_app$ (div$ ?v0 )(numeral$ (bit0$ one$ ))))(minus$ ?v0 (fun_app$ (mod$ ?v0 )(numeral$ (bit0$ one$ )))))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (div$ (plus$ ?v0 ?v0 ))(numeral$ (bit0$ one$ )))?v0 )):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (mod$ (suc$ (suc$ ?v0 )))(numeral$ (bit0$ one$ )))(fun_app$ (mod$ ?v0 )(numeral$ (bit0$ one$ ))))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (div$ (suc$ (suc$ ?v0 )))(numeral$ (bit0$ one$ )))(suc$ (fun_app$ (div$ ?v0 )(numeral$ (bit0$ one$ )))))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(= (plus$ (numeral$ (bit0$ one$ ))?v0 )(suc$ (suc$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(= (plus$ ?v0 (numeral$ (bit0$ one$ )))(suc$ (suc$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (less_eq$ ?v0 ?v1 )(= (minus$ (suc$ (minus$ ?v1 ?v0 ))?v2 )(minus$ (suc$ ?v1 )(plus$ ?v0 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (less_eq$ ?v0 ?v1 )(= (minus$ ?v2 (suc$ (minus$ ?v1 ?v0 )))(minus$ (plus$ ?v2 ?v0 )(suc$ ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (mod$ ?v0 )(suc$ zero$ ))zero$ ):pattern ((mod$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (div$ ?v0 )(suc$ zero$ ))?v0 ):pattern ((div$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (less_eq$ ?v0 ?v1 )(= (plus$ (minus$ ?v1 ?v0 )?v2 )(minus$ (plus$ ?v1 ?v2 )?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (less_eq$ ?v0 ?v1 )(= (plus$ (minus$ ?v1 ?v0 )?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (less_eq$ ?v0 ?v1 )(= (plus$ ?v2 (minus$ ?v1 ?v0 ))(minus$ (plus$ ?v2 ?v1 )?v0 )))):named a16 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(check-sat )
;(get-unsat-core )
