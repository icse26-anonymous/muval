;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_c_b_fun_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-datatypes ()((B_option$ (none$ )(some$ (the$ B$ )))(Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))(A_c_rbt$ (empty$a )(branch$a (selecte$ Color$ )(selectf$ A_c_rbt$ )(selectg$ A$ )(selecth$ C$ )(selecti$ A_c_rbt$ )))(C_option$ (none$a )(some$a (the$a C$ )))))
(declare-fun f$ ()A_c_b_fun_fun$ )
(declare-fun x$ ()A$ )
(declare-fun t1$ ()A_c_rbt$ )
(declare-fun t2$ ()A_c_rbt$ )
(declare-fun x3$ ()A$ )
(declare-fun x4$ ()C$ )
(declare-fun map$ (A_c_b_fun_fun$ A_c_rbt$ )A_b_rbt$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun fun_app$ (C_b_fun$ C$ )B$ )
(declare-fun fun_app$a (A_c_b_fun_fun$ A$ )C_b_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun map_option$ (C_b_fun$ C_option$ )B_option$ )
(declare-fun rbt_lookup$ (A_a_bool_fun_fun$ A_b_rbt$ A$ )B_option$ )
(declare-fun rbt_lookup$a (A_a_bool_fun_fun$ A_c_rbt$ A$ )C_option$ )
(assert (! (not (= (fun_app$ (fun_app$a f$ x3$ )x4$ )(fun_app$ (fun_app$a f$ x$ )x4$ ))):named a0 ))
(assert (! (= (rbt_lookup$ less$ (map$ f$ t1$ )x$ )(map_option$ (fun_app$a f$ x$ )(rbt_lookup$a less$ t1$ x$ ))):named a1 ))
(assert (! (= (rbt_lookup$ less$ (map$ f$ t2$ )x$ )(map_option$ (fun_app$a f$ x$ )(rbt_lookup$a less$ t2$ x$ ))):named a2 ))
(assert (! (not (fun_app$b (fun_app$c less$ x3$ )x$ )):named a3 ))
(assert (! (not (fun_app$b (fun_app$c less$ x$ )x3$ )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (fun_app$b (fun_app$c less$ ?v0 )?v1 ))(or (fun_app$b (fun_app$c less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$b (fun_app$c less$ ?v0 )?v1 )(fun_app$b (fun_app$c less$ ?v1 )?v0 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (fun_app$b (fun_app$c less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$b (fun_app$c less$ ?v1 )?v0 )false )))false )):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$b (fun_app$c less$ ?v0 )?v1 )(=> (not false )(fun_app$b (fun_app$c less$ ?v1 )?v0 )))false )):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$b (fun_app$c less$ ?v0 )?v1 )(fun_app$b (fun_app$c less$ ?v1 )?v2 ))(fun_app$b (fun_app$c less$ ?v0 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$b (fun_app$c less$ ?v0 )?v1 )(fun_app$b (fun_app$c less$ ?v1 )?v2 ))(fun_app$b (fun_app$c less$ ?v0 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$b (fun_app$c less$ ?v0 )?v1 )(fun_app$b (fun_app$c less$ ?v2 )?v0 ))(fun_app$b (fun_app$c less$ ?v2 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$b (fun_app$c less$ ?v0 )?v1 )(fun_app$b (fun_app$c less$ ?v1 )?v0 ))false )):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$b (fun_app$c less$ ?v0 )?v1 )(fun_app$b (fun_app$c less$ ?v1 )?v0 ))false )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$b (fun_app$c less$ ?v0 )?v1 )(fun_app$b (fun_app$c less$ ?v1 )?v0 ))false )):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$b (fun_app$c less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$b (fun_app$c less$ ?v0 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$b (fun_app$c less$ ?v0 )?v1 )(= (= ?v1 ?v0 )false ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$b (fun_app$c less$ ?v0 )?v1 )(= (= ?v0 ?v1 )false ))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 Bool ))(=> (fun_app$b (fun_app$c less$ ?v0 )?v1 )(= (=> (fun_app$b (fun_app$c less$ ?v1 )?v0 )?v2 )true ))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$b (fun_app$c less$ ?v0 )?v1 )(= (not (fun_app$b (fun_app$c less$ ?v1 )?v0 ))true ))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$b (fun_app$c less$ ?v0 )?v1 )(not (fun_app$b (fun_app$c less$ ?v1 )?v0 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$b (fun_app$c less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a21 ))
(check-sat )
;(get-unsat-core )
