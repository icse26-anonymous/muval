;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_rbt_bool_fun$ 0 )
(declare-datatypes ()((Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))(A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun k$ ()A$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lexordp$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_b_rbt_bool_fun$ A_b_rbt$ )Bool )
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun pred_rbt$ (A_bool_fun$ B_bool_fun$ A_b_rbt$ )Bool )
(declare-fun rbt_less$ (A_a_bool_fun_fun$ A$ )A_b_rbt_bool_fun$ )
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun rbt_greater$ (A_a_bool_fun_fun$ A$ A_b_rbt$ )Bool )
(declare-fun greaterThanLessThan$ (A_a_bool_fun_fun$ A$ A$ )A_set$ )
(assert (! (not (= (rbt_greater$ less$ k$ empty$ )true )):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b (rbt_less$ less$ ?v0 )empty$ )true ):pattern ((rbt_less$ less$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_list$ ))(lexordp_eq$ less$ ?v0 ?v0 )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (member$ ?v0 (greaterThanLessThan$ less$ ?v1 ?v2 ))(and (fun_app$ (fun_app$a less$ ?v1 )?v0 )(fun_app$ (fun_app$a less$ ?v0 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_list$ ))(=> (forall ((?v1 A$ ))(not (fun_app$ (fun_app$a less$ ?v1 )?v1 )))(not (lexordp$ less$ ?v0 ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ ))(= (rbt_greater$ less$ ?v0 ?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 (set$ (keys$ ?v1 )))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (lessThan$ less$ ?v1 ))(fun_app$ (fun_app$a less$ ?v0 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (greaterThan$ less$ ?v1 ))(fun_app$ (fun_app$a less$ ?v1 )?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ ))(! (= (fun_app$b (rbt_less$ ?v0 ?v1 )empty$ )true ):pattern ((rbt_less$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ ))(pred_rbt$ ?v0 ?v1 empty$ )):named a11 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (lexordp$ less$ ?v0 ?v1 )(lexordp_eq$ less$ ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ ))(= (fun_app$b (rbt_less$ less$ ?v0 )?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 (set$ (keys$ ?v1 )))(fun_app$ (fun_app$a less$ ?v2 )?v0 ))))):named a13 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_b_rbt$ ))(= (fun_app$b (rbt_less$ ?v0 ?v1 )?v2 )(forall ((?v3 A$ ))(=> (member$ ?v3 (set$ (keys$ ?v2 )))(fun_app$ (fun_app$a ?v0 ?v3 )?v1 ))))):named a14 ))
(check-sat )
;(get-unsat-core )
