;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_b_option_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))(A_b_prod_list$ (nil$ )(cons$ (hd$ A_b_prod$ )(tl$ A_b_prod_list$ )))(Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))(B_option$ (none$ )(some$ (the$ B$ )))(A_list$ (nil$a )(cons$a (hd$a A$ )(tl$a A_list$ )))))
(declare-fun t1$ ()A_b_rbt$ )
(declare-fun t2$ ()A_b_rbt$ )
(declare-fun uu$ ()A_b_prod_a_fun$ )
(declare-fun map$ (A_b_prod_a_fun$ A_b_prod_list$ )A_list$ )
(declare-fun set$ (A_b_prod_list$ )A_b_prod_set$ )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun entries$ (A_b_rbt$ )A_b_prod_list$ )
(declare-fun fun_app$ (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun rbt_lookup$ (A_a_bool_fun_fun$ A_b_rbt$ )A_b_option_fun$ )
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (entries$ t1$ )(entries$ t2$ ))):named a1 ))
(assert (! (= (rbt_lookup$ less$ t1$ )(rbt_lookup$ less$ t2$ )):named a2 ))
(assert (! (rbt_sorted$ less$ t1$ ):named a3 ))
(assert (! (rbt_sorted$ less$ t2$ ):named a4 ))
(assert (! (= (entries$ empty$ )nil$ ):named a5 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ ))(=> (and (rbt_sorted$ less$ ?v0 )(rbt_sorted$ less$ ?v1 ))(= (= (set$ (entries$ ?v0 ))(set$ (entries$ ?v1 )))(= (entries$ ?v0 )(entries$ ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(! (= (keys$ ?v0 )(map$ uu$ (entries$ ?v0 ))):pattern ((keys$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (fun_app$a (fun_app$b less$ ?v0 )?v1 ))(or (fun_app$a (fun_app$b less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v0 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (fun_app$a (fun_app$b less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$a (fun_app$b less$ ?v1 )?v0 )false )))false )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(=> (not false )(fun_app$a (fun_app$b less$ ?v1 )?v0 )))false )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v2 ))(fun_app$a (fun_app$b less$ ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v2 ))(fun_app$a (fun_app$b less$ ?v0 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v2 )?v0 ))(fun_app$a (fun_app$b less$ ?v2 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v0 ))false )):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$a (fun_app$b less$ ?v0 )?v1 )(fun_app$a (fun_app$b less$ ?v1 )?v0 ))false )):named a16 ))
(check-sat )
;(get-unsat-core )
