;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_b_b_fun_fun_fun$ 0 )
(declare-datatypes ()((Color$ (r$ )(b$ ))(A_b_rbt$ (empty$ )(branch$ (select$ Color$ )(selecta$ A_b_rbt$ )(selectb$ A$ )(selectc$ B$ )(selectd$ A_b_rbt$ )))))
(declare-fun t$ ()A_b_rbt$ )
(declare-fun inv1$ (A_b_rbt$ )Bool )
(declare-fun inv2$ (A_b_rbt$ )Bool )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun inv1l$ (A_b_rbt$ )Bool )
(declare-fun paint$ (Color$ A_b_rbt$ )A_b_rbt$ )
(declare-fun is_rbt$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun balance$ (A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun bheight$ (A_b_rbt$ )Nat$ )
(declare-fun combine$ (A_b_rbt$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun rbt_ins$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(assert (! (not (inv2$ t$ )):named a0 ))
(assert (! (is_rbt$ less$ t$ ):named a1 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 Color$ ))(=> (inv2$ ?v0 )(inv2$ (paint$ ?v1 ?v0 )))):named a2 ))
(assert (! (= (inv2$ empty$ )true ):named a3 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_b_b_b_fun_fun_fun$ )(?v3 A$ )(?v4 B$ ))(=> (and (inv1$ ?v0 )(inv2$ ?v0 ))(inv2$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ ))(=> (and (inv2$ ?v0 )(and (inv2$ ?v1 )(= (bheight$ ?v0 )(bheight$ ?v1 ))))(= (bheight$ (combine$ ?v0 ?v1 ))(bheight$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ ))(=> (and (inv2$ ?v0 )(and (inv2$ ?v1 )(= (bheight$ ?v0 )(bheight$ ?v1 ))))(inv2$ (combine$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ ))(=> (and (inv2$ ?v0 )(and (inv2$ ?v1 )(= (bheight$ ?v0 )(bheight$ ?v1 ))))(inv2$ (balance$ ?v0 ?v2 ?v3 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (inv2$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(and (inv2$ ?v1 )(and (inv2$ ?v4 )(= (bheight$ ?v1 )(bheight$ ?v4 ))))):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a8 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_b_b_b_fun_fun_fun$ )(?v3 A$ )(?v4 B$ ))(=> (and (inv1$ ?v0 )(inv2$ ?v0 ))(inv1l$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_b_b_fun_fun_fun$ )(?v2 A$ )(?v3 B$ ))(=> (and (inv1$ ?v0 )(inv2$ ?v0 ))(inv2$ (rbt_ins$ less$ ?v1 ?v2 ?v3 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (fun_app$ (fun_app$a less$ ?v0 )?v1 ))(or (fun_app$ (fun_app$a less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (fun_app$ (fun_app$a less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$ (fun_app$a less$ ?v1 )?v0 )false )))false )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(=> (not false )(fun_app$ (fun_app$a less$ ?v1 )?v0 )))false )):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a15 ))
(check-sat )
;(get-unsat-core )
