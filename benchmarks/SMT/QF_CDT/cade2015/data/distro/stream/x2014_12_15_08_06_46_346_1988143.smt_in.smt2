;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun p$ (A$ )Bool )
(declare-fun s$ ()A_stream$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun least$ (Nat_bool_fun$ )Nat$ )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Nat$ )Nat_bool_fun$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(p$ (snth$ s$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not thesis$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (p$ (snth$ s$ ?v0 ))(and (forall ((?v1 Nat$ ))(=> (p$ (snth$ s$ ?v1 ))(fun_app$ (less_eq$ ?v0 )?v1 )))(= (least$ uu$ )?v0 )))thesis$ )):named a2 ))
(assert (! (exists ((?v0 Nat$ ))(p$ (snth$ s$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ (less_eq$ (least$ ?v0 ))?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$ (less_eq$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(and (forall ((?v3 Nat$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ (less_eq$ ?v1 )?v3 )))(forall ((?v3 Nat$ ))(=> (and (fun_app$ ?v0 ?v3 )(forall ((?v4 Nat$ ))(=> (fun_app$ ?v0 ?v4 )(fun_app$ (less_eq$ ?v3 )?v4 ))))(fun_app$ ?v2 ?v3 )))))(fun_app$ ?v2 (least$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 Nat$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ (less_eq$ ?v1 )?v2 ))))(= (least$ ?v0 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 Nat$ ))(=> (and (fun_app$ ?v0 ?v3 )(forall ((?v4 Nat$ ))(=> (fun_app$ ?v0 ?v4 )(fun_app$ (less_eq$ ?v3 )?v4 ))))(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 (least$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 (least$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(=> (and (exists ((?v2 Nat$ ))(fun_app$ ?v0 ?v2 ))(forall ((?v2 Nat$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))))(fun_app$ ?v1 (least$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(=> (exists ((?v1 Nat$ ))(fun_app$ ?v0 ?v1 ))(fun_app$ ?v0 (least$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 Nat$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 (least$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 ?v1 )(fun_app$ (less_eq$ ?v0 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$ (less_eq$ ?v0 )?v1 )(fun_app$ (less_eq$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$ (less_eq$ ?v0 )?v1 )(fun_app$ (less_eq$ ?v1 )?v2 ))(fun_app$ (less_eq$ ?v0 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$ (less_eq$ ?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(or (fun_app$ (less_eq$ ?v0 )?v1 )(fun_app$ (less_eq$ ?v1 )?v0 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (=> (fun_app$ (less_eq$ ?v0 )?v1 )(= (fun_app$ (less_eq$ ?v1 )?v0 )(= ?v1 ?v0 ))):pattern ((fun_app$ (less_eq$ ?v1 )?v0 )))):named a18 ))
(check-sat )
;(get-unsat-core )
