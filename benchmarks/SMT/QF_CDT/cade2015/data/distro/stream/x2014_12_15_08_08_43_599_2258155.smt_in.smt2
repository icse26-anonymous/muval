;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_list_a_fun$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_a_stream_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort Nat_a_list_fun$ 0 )
(declare-sort Nat_stream_set$ 0 )
(declare-sort A_stream_nat_fun$ 0 )
(declare-sort Nat_a_stream_fun$ 0 )
(declare-sort Nat_nat_list_fun$ 0 )
(declare-sort A_list_stream_set$ 0 )
(declare-sort A_stream_list_set$ 0 )
(declare-sort Nat_nat_stream_fun$ 0 )
(declare-sort Nat_stream_nat_fun$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort Nat_a_list_list_fun$ 0 )
(declare-sort A_a_stream_stream_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort Nat_a_list_stream_fun$ 0 )
(declare-sort Nat_a_stream_list_fun$ 0 )
(declare-sort Nat_a_stream_stream_fun$ 0 )
(declare-sort Nat_nat_stream_list_fun$ 0 )
(declare-sort A_list_stream_a_list_fun$ 0 )
(declare-sort A_stream_stream_stream_set$ 0 )
(declare-sort Nat_a_list_stream_list_fun$ 0 )
(declare-sort Nat_a_stream_list_list_fun$ 0 )
(declare-sort A_stream_stream_a_stream_fun$ 0 )
(declare-sort Nat_a_stream_stream_list_fun$ 0 )
(declare-sort Nat_stream_stream_nat_stream_fun$ 0 )
(declare-sort Nat_a_stream_stream_stream_list_fun$ 0 )
(declare-sort A_list_stream_stream_a_list_stream_fun$ 0 )
(declare-sort A_stream_list_stream_a_stream_list_fun$ 0 )
(declare-sort A_stream_stream_stream_a_stream_stream_fun$ 0 )
(declare-sort A_stream_stream_stream_stream_a_stream_stream_stream_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (A_stream_stream$)A_stream$)
(declare-fun stl$a (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$a (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_list_stream$ 0)
(declare-sort Nat_stream$ 0)
(declare-fun shd$b (A_list_stream$)A_list$)
(declare-fun stl$b (A_list_stream$)A_list_stream$)
(declare-fun sCons$b (A_list$ A_list_stream$ )A_list_stream$)
(declare-fun shd$c (Nat_stream$)Nat$)
(declare-fun stl$c (Nat_stream$)Nat_stream$)
(declare-fun sCons$c (Nat$ Nat_stream$ )Nat_stream$)
(declare-datatypes ()((A_stream_list$ (nil$a )(cons$a (hd$a A_stream$ )(tl$a A_stream_list$ )))(A_list_list$ (nil$b )(cons$b (hd$b A_list$ )(tl$b A_list_list$ )))(Nat_list$ (nil$c )(cons$c (hd$c Nat$ )(tl$c Nat_list$ )))))
(declare-sort A_stream_stream_stream$ 0)
(declare-sort A_stream_list_stream$ 0)
(declare-sort Nat_stream_stream$ 0)
(declare-sort Nat_list_stream$ 0)
(declare-sort A_list_stream_stream$ 0)
(declare-sort A_list_list_stream$ 0)
(declare-sort A_stream_stream_stream_stream$ 0)
(declare-sort A_stream_list_stream_stream$ 0)
(declare-fun shd$d (A_stream_stream_stream$)A_stream_stream$)
(declare-fun stl$d (A_stream_stream_stream$)A_stream_stream_stream$)
(declare-fun sCons$d (A_stream_stream$ A_stream_stream_stream$ )A_stream_stream_stream$)
(declare-fun shd$e (A_stream_list_stream$)A_stream_list$)
(declare-fun stl$e (A_stream_list_stream$)A_stream_list_stream$)
(declare-fun sCons$e (A_stream_list$ A_stream_list_stream$ )A_stream_list_stream$)
(declare-fun shd$f (Nat_stream_stream$)Nat_stream$)
(declare-fun stl$f (Nat_stream_stream$)Nat_stream_stream$)
(declare-fun sCons$f (Nat_stream$ Nat_stream_stream$ )Nat_stream_stream$)
(declare-fun shd$g (Nat_list_stream$)Nat_list$)
(declare-fun stl$g (Nat_list_stream$)Nat_list_stream$)
(declare-fun sCons$g (Nat_list$ Nat_list_stream$ )Nat_list_stream$)
(declare-fun shd$h (A_list_stream_stream$)A_list_stream$)
(declare-fun stl$h (A_list_stream_stream$)A_list_stream_stream$)
(declare-fun sCons$h (A_list_stream$ A_list_stream_stream$ )A_list_stream_stream$)
(declare-fun shd$i (A_list_list_stream$)A_list_list$)
(declare-fun stl$i (A_list_list_stream$)A_list_list_stream$)
(declare-fun sCons$i (A_list_list$ A_list_list_stream$ )A_list_list_stream$)
(declare-fun shd$j (A_stream_stream_stream_stream$)A_stream_stream_stream$)
(declare-fun stl$j (A_stream_stream_stream_stream$)A_stream_stream_stream_stream$)
(declare-fun sCons$j (A_stream_stream_stream$ A_stream_stream_stream_stream$ )A_stream_stream_stream_stream$)
(declare-fun shd$k (A_stream_list_stream_stream$)A_stream_list_stream$)
(declare-fun stl$k (A_stream_list_stream_stream$)A_stream_list_stream_stream$)
(declare-fun sCons$k (A_stream_list_stream$ A_stream_list_stream_stream$ )A_stream_list_stream_stream$)
(declare-datatypes ()((A_stream_list_list$ (nil$d )(cons$d (hd$d A_stream_list$ )(tl$d A_stream_list_list$ )))))
(declare-sort A_stream_list_list_stream$ 0)
(declare-fun shd$l (A_stream_list_list_stream$)A_stream_list_list$)
(declare-fun stl$l (A_stream_list_list_stream$)A_stream_list_list_stream$)
(declare-fun sCons$l (A_stream_list_list$ A_stream_list_list_stream$ )A_stream_list_list_stream$)
(declare-datatypes ()((A_stream_list_stream_list$ (nil$e )(cons$e (hd$e A_stream_list_stream$ )(tl$e A_stream_list_stream_list$ )))))
(declare-sort A_stream_stream_stream_stream_stream$ 0)
(declare-fun shd$m (A_stream_stream_stream_stream_stream$)A_stream_stream_stream_stream$)
(declare-fun stl$m (A_stream_stream_stream_stream_stream$)A_stream_stream_stream_stream_stream$)
(declare-fun sCons$m (A_stream_stream_stream_stream$ A_stream_stream_stream_stream_stream$ )A_stream_stream_stream_stream_stream$)
(declare-datatypes ()((A_stream_stream_stream_list$ (nil$f )(cons$f (hd$f A_stream_stream_stream$ )(tl$f A_stream_stream_stream_list$ )))))
(declare-sort A_stream_stream_stream_list_stream$ 0)
(declare-fun shd$n (A_stream_stream_stream_list_stream$)A_stream_stream_stream_list$)
(declare-fun stl$n (A_stream_stream_stream_list_stream$)A_stream_stream_stream_list_stream$)
(declare-fun sCons$n (A_stream_stream_stream_list$ A_stream_stream_stream_list_stream$ )A_stream_stream_stream_list_stream$)
(declare-datatypes ()((A_stream_stream_stream_stream_list$ (nil$g )(cons$g (hd$g A_stream_stream_stream_stream$ )(tl$g A_stream_stream_stream_stream_list$ )))))
(declare-sort Nat_stream_stream_stream$ 0)
(declare-fun shd$o (Nat_stream_stream_stream$)Nat_stream_stream$)
(declare-fun stl$o (Nat_stream_stream_stream$)Nat_stream_stream_stream$)
(declare-fun sCons$o (Nat_stream_stream$ Nat_stream_stream_stream$ )Nat_stream_stream_stream$)
(declare-datatypes ()((Nat_stream_list$ (nil$h )(cons$h (hd$h Nat_stream$ )(tl$h Nat_stream_list$ )))))
(declare-sort Nat_stream_list_stream$ 0)
(declare-fun shd$p (Nat_stream_list_stream$)Nat_stream_list$)
(declare-fun stl$p (Nat_stream_list_stream$)Nat_stream_list_stream$)
(declare-fun sCons$p (Nat_stream_list$ Nat_stream_list_stream$ )Nat_stream_list_stream$)
(declare-datatypes ()((Nat_stream_stream_list$ (nil$i )(cons$i (hd$i Nat_stream_stream$ )(tl$i Nat_stream_stream_list$ )))))
(declare-sort A_list_stream_stream_stream$ 0)
(declare-fun shd$q (A_list_stream_stream_stream$)A_list_stream_stream$)
(declare-fun stl$q (A_list_stream_stream_stream$)A_list_stream_stream_stream$)
(declare-fun sCons$q (A_list_stream_stream$ A_list_stream_stream_stream$ )A_list_stream_stream_stream$)
(declare-datatypes ()((A_list_stream_list$ (nil$j )(cons$j (hd$j A_list_stream$ )(tl$j A_list_stream_list$ )))))
(declare-sort A_list_stream_list_stream$ 0)
(declare-fun shd$r (A_list_stream_list_stream$)A_list_stream_list$)
(declare-fun stl$r (A_list_stream_list_stream$)A_list_stream_list_stream$)
(declare-fun sCons$r (A_list_stream_list$ A_list_stream_list_stream$ )A_list_stream_list_stream$)
(declare-datatypes ()((A_list_stream_stream_list$ (nil$k )(cons$k (hd$k A_list_stream_stream$ )(tl$k A_list_stream_stream_list$ )))(A_stream_stream_list$ (nil$l )(cons$l (hd$l A_stream_stream$ )(tl$l A_stream_stream_list$ )))))
(declare-sort A_stream_stream_list_stream$ 0)
(declare-fun shd$s (A_stream_stream_list_stream$)A_stream_stream_list$)
(declare-fun stl$s (A_stream_stream_list_stream$)A_stream_stream_list_stream$)
(declare-fun sCons$s (A_stream_stream_list$ A_stream_stream_list_stream$ )A_stream_stream_list_stream$)
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun ss$ ()A_stream_stream$ )
(declare-fun uu$ (Nat$ )A_stream_a_fun$ )
(declare-fun map$ (A_stream_a_fun$ A_stream_list$ )A_list$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun uua$ ()Nat_a_list_fun$ )
(declare-fun uub$ ()Nat_nat_fun$ )
(declare-fun uuc$ ()A_a_fun$ )
(declare-fun uud$ (Nat$ )A_stream_list_stream_a_stream_list_fun$ )
(declare-fun uue$ (A_stream_list_stream_stream$ )Nat_a_stream_list_list_fun$ )
(declare-fun uuf$ (Nat$ )A_stream_stream_stream_stream_a_stream_stream_stream_fun$ )
(declare-fun uug$ (A_stream_stream_stream_stream_stream$ )Nat_a_stream_stream_stream_list_fun$ )
(declare-fun uuh$ (Nat$ )Nat_stream_stream_nat_stream_fun$ )
(declare-fun uui$ (Nat_stream_stream_stream$ )Nat_nat_stream_list_fun$ )
(declare-fun uuj$ (Nat$ )A_list_stream_stream_a_list_stream_fun$ )
(declare-fun uuk$ (A_list_stream_stream_stream$ )Nat_a_list_stream_list_fun$ )
(declare-fun uul$ (Nat$ )A_list_stream_a_list_fun$ )
(declare-fun uum$ (A_list_stream_stream$ )Nat_a_list_list_fun$ )
(declare-fun uun$ (Nat$ )Nat_stream_nat_fun$ )
(declare-fun uuo$ (Nat_stream_stream$ )Nat_nat_list_fun$ )
(declare-fun uup$ (Nat$ )A_stream_stream_stream_a_stream_stream_fun$ )
(declare-fun uuq$ (A_stream_stream_stream_stream$ )Nat_a_stream_stream_list_fun$ )
(declare-fun uur$ (Nat$ )A_stream_stream_a_stream_fun$ )
(declare-fun uus$ (A_stream_stream_stream$ )Nat_a_stream_list_fun$ )
(declare-fun uut$ (A_stream_stream$ )Nat_a_list_fun$ )
(declare-fun uuu$ ()A_stream_a_stream_fun$ )
(declare-fun flat$ (A_list_stream$ )A_stream$ )
(declare-fun map$a (A_stream_stream_a_stream_fun$ A_stream_stream_list$ )A_stream_list$ )
(declare-fun map$b (A_stream_stream_stream_a_stream_stream_fun$ A_stream_stream_stream_list$ )A_stream_stream_list$ )
(declare-fun map$c (Nat_stream_nat_fun$ Nat_stream_list$ )Nat_list$ )
(declare-fun map$d (A_list_stream_a_list_fun$ A_list_stream_list$ )A_list_list$ )
(declare-fun map$e (A_list_stream_stream_a_list_stream_fun$ A_list_stream_stream_list$ )A_list_stream_list$ )
(declare-fun map$f (Nat_stream_stream_nat_stream_fun$ Nat_stream_stream_list$ )Nat_stream_list$ )
(declare-fun map$g (A_stream_stream_stream_stream_a_stream_stream_stream_fun$ A_stream_stream_stream_stream_list$ )A_stream_stream_stream_list$ )
(declare-fun map$h (A_stream_list_stream_a_stream_list_fun$ A_stream_list_stream_list$ )A_stream_list_list$ )
(declare-fun map$i (A_a_fun$ A_list$ )A_list$ )
(declare-fun map$j (A_a_stream_fun$ A_list$ )A_stream_list$ )
(declare-fun map$k (Nat_a_list_fun$ Nat_list$ )A_list_list$ )
(declare-fun map$l (A_stream_a_stream_fun$ A_stream_list$ )A_stream_list$ )
(declare-fun map$m (A_nat_fun$ A_list$ )Nat_list$ )
(declare-fun map$n (Nat_nat_fun$ Nat_list$ )Nat_list$ )
(declare-fun map$o (Nat_a_fun$ Nat_list$ )A_list$ )
(declare-fun map$p (Nat_a_stream_fun$ Nat_list$ )A_stream_list$ )
(declare-fun map$q (A_list_a_fun$ A_list_list$ )A_list$ )
(declare-fun map$r (A_stream_nat_fun$ A_stream_list$ )Nat_list$ )
(declare-fun smap$ (Nat_a_list_fun$ Nat_stream$ )A_list_stream$ )
(declare-fun snth$ (A_stream_stream$ )Nat_a_stream_fun$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun flat$a (A_stream_list_list_stream$ )A_stream_list_stream$ )
(declare-fun flat$b (A_stream_stream_stream_list_stream$ )A_stream_stream_stream_stream$ )
(declare-fun flat$c (Nat_stream_list_stream$ )Nat_stream_stream$ )
(declare-fun flat$d (A_list_stream_list_stream$ )A_list_stream_stream$ )
(declare-fun flat$e (A_list_list_stream$ )A_list_stream$ )
(declare-fun flat$f (Nat_list_stream$ )Nat_stream$ )
(declare-fun flat$g (A_stream_stream_list_stream$ )A_stream_stream_stream$ )
(declare-fun flat$h (A_stream_list_stream$ )A_stream_stream$ )
(declare-fun smap$a (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun smap$b (A_stream_a_fun$ )A_stream_stream_a_stream_fun$ )
(declare-fun smap$c (A_a_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun smap$d (A_stream_a_stream_fun$ A_stream_stream$ )A_stream_stream$ )
(declare-fun smap$e (A_nat_fun$ A_stream$ )Nat_stream$ )
(declare-fun smap$f (Nat_nat_fun$ Nat_stream$ )Nat_stream$ )
(declare-fun smap$g (Nat_a_fun$ Nat_stream$ )A_stream$ )
(declare-fun smap$h (A_list_a_fun$ A_list_stream$ )A_stream$ )
(declare-fun smap$i (Nat_a_stream_fun$ Nat_stream$ )A_stream_stream$ )
(declare-fun smap$j (A_a_list_fun$ A_stream$ )A_list_stream$ )
(declare-fun smap$k (A_stream_nat_fun$ A_stream_stream$ )Nat_stream$ )
(declare-fun smap$l (Nat_a_stream_stream_fun$ Nat_stream$ )A_stream_stream_stream$ )
(declare-fun smap$m (Nat_a_stream_list_fun$ Nat_stream$ )A_stream_list_stream$ )
(declare-fun smap$n (Nat_nat_stream_fun$ Nat_stream$ )Nat_stream_stream$ )
(declare-fun smap$o (Nat_nat_list_fun$ Nat_stream$ )Nat_list_stream$ )
(declare-fun smap$p (Nat_a_list_stream_fun$ Nat_stream$ )A_list_stream_stream$ )
(declare-fun smap$q (Nat_a_list_list_fun$ Nat_stream$ )A_list_list_stream$ )
(declare-fun smap$r (A_a_stream_stream_fun$ A_stream$ )A_stream_stream_stream$ )
(declare-fun smap$s (Nat_a_stream_list_list_fun$ Nat_stream$ )A_stream_list_list_stream$ )
(declare-fun smap$t (Nat_a_stream_stream_stream_list_fun$ Nat_stream$ )A_stream_stream_stream_list_stream$ )
(declare-fun smap$u (Nat_nat_stream_list_fun$ Nat_stream$ )Nat_stream_list_stream$ )
(declare-fun smap$v (Nat_a_list_stream_list_fun$ Nat_stream$ )A_list_stream_list_stream$ )
(declare-fun smap$w (Nat_a_stream_stream_list_fun$ Nat_stream$ )A_stream_stream_list_stream$ )
(declare-fun snth$a (A_stream_stream_stream$ )Nat_a_stream_stream_fun$ )
(declare-fun snth$b (A_stream_stream_stream_stream$ Nat$ )A_stream_stream_stream$ )
(declare-fun snth$c (Nat_stream_stream$ )Nat_nat_stream_fun$ )
(declare-fun snth$d (A_list_stream_stream$ )Nat_a_list_stream_fun$ )
(declare-fun snth$e (A_list_stream_stream_stream$ Nat$ )A_list_stream_stream$ )
(declare-fun snth$f (Nat_stream_stream_stream$ Nat$ )Nat_stream_stream$ )
(declare-fun snth$g (A_stream_stream_stream_stream_stream$ Nat$ )A_stream_stream_stream_stream$ )
(declare-fun snth$h (A_stream_list_stream_stream$ Nat$ )A_stream_list_stream$ )
(declare-fun snth$i (A_stream_list_stream$ )Nat_a_stream_list_fun$ )
(declare-fun snth$j (A_list_stream$ )Nat_a_list_fun$ )
(declare-fun snth$k (Nat_stream$ )Nat_nat_fun$ )
(declare-fun snth$l (A_stream$ )Nat_a_fun$ )
(declare-fun snth$m (Nat_list_stream$ )Nat_nat_list_fun$ )
(declare-fun snth$n (A_list_list_stream$ )Nat_a_list_list_fun$ )
(declare-fun sset$a (Nat_stream$ )Nat_set$ )
(declare-fun sset$b (A_stream_list_stream$ )A_stream_list_set$ )
(declare-fun sset$c (A_stream_stream_stream_stream$ )A_stream_stream_stream_set$ )
(declare-fun sset$d (Nat_stream_stream$ )Nat_stream_set$ )
(declare-fun sset$e (A_list_stream_stream$ )A_list_stream_set$ )
(declare-fun sset$f (A_list_stream$ )A_list_set$ )
(declare-fun sset$g (A_stream_stream_stream$ )A_stream_stream_set$ )
(declare-fun sset$h (A_stream_stream$ )A_stream_set$ )
(declare-fun stake$ (Nat$ A_stream_stream$ )A_stream_list$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun smerge$ (A_stream_list_stream_stream$ )A_stream_list_stream$ )
(declare-fun stake$a (Nat$ A_stream$ )A_list$ )
(declare-fun stake$b (Nat$ A_stream_stream_stream$ )A_stream_stream_list$ )
(declare-fun stake$c (Nat$ A_stream_stream_stream_stream$ )A_stream_stream_stream_list$ )
(declare-fun stake$d (Nat$ Nat_stream_stream$ )Nat_stream_list$ )
(declare-fun stake$e (Nat$ Nat_stream$ )Nat_list$ )
(declare-fun stake$f (Nat$ A_list_stream_stream$ )A_list_stream_list$ )
(declare-fun stake$g (Nat$ A_list_stream$ )A_list_list$ )
(declare-fun stake$h (Nat$ A_list_stream_stream_stream$ )A_list_stream_stream_list$ )
(declare-fun stake$i (Nat$ Nat_stream_stream_stream$ )Nat_stream_stream_list$ )
(declare-fun stake$j (Nat$ A_stream_stream_stream_stream_stream$ )A_stream_stream_stream_stream_list$ )
(declare-fun stake$k (Nat$ A_stream_list_stream_stream$ )A_stream_list_stream_list$ )
(declare-fun stake$l (Nat$ A_stream_list_stream$ )A_stream_list_list$ )
(declare-fun append$a (A_stream_list$ A_stream_list$ )A_stream_list$ )
(declare-fun append$b (A_stream_stream_list$ A_stream_stream_list$ )A_stream_stream_list$ )
(declare-fun append$c (Nat_list$ Nat_list$ )Nat_list$ )
(declare-fun append$d (A_list_list$ A_list_list$ )A_list_list$ )
(declare-fun append$e (A_list_stream_list$ A_list_stream_list$ )A_list_stream_list$ )
(declare-fun append$f (Nat_stream_list$ Nat_stream_list$ )Nat_stream_list$ )
(declare-fun append$g (A_stream_stream_stream_list$ A_stream_stream_stream_list$ )A_stream_stream_stream_list$ )
(declare-fun append$h (A_stream_list_list$ A_stream_list_list$ )A_stream_list_list$ )
(declare-fun fun_app$ (Nat_a_list_fun$ Nat$ )A_list$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun member$a (Nat$ Nat_set$ )Bool )
(declare-fun member$b (A_stream_list$ A_stream_list_set$ )Bool )
(declare-fun member$c (A_stream_stream_stream$ A_stream_stream_stream_set$ )Bool )
(declare-fun member$d (Nat_stream$ Nat_stream_set$ )Bool )
(declare-fun member$e (A_list_stream$ A_list_stream_set$ )Bool )
(declare-fun member$f (A_list$ A_list_set$ )Bool )
(declare-fun member$g (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$h (A_stream$ A_stream_set$ )Bool )
(declare-fun smerge$a (A_stream_stream_stream_stream_stream$ )A_stream_stream_stream_stream$ )
(declare-fun smerge$b (Nat_stream_stream_stream$ )Nat_stream_stream$ )
(declare-fun smerge$c (A_list_stream_stream_stream$ )A_list_stream_stream$ )
(declare-fun smerge$d (A_list_stream_stream$ )A_list_stream$ )
(declare-fun smerge$e (Nat_stream_stream$ )Nat_stream$ )
(declare-fun smerge$f (A_stream_stream_stream_stream$ )A_stream_stream_stream$ )
(declare-fun smerge$g (A_stream_stream_stream$ )A_stream_stream$ )
(declare-fun smerge$h (A_stream_stream$ )A_stream$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$b (Nat_a_stream_fun$ Nat$ )A_stream$ )
(declare-fun fun_app$c (Nat_a_stream_list_fun$ Nat$ )A_stream_list$ )
(declare-fun fun_app$d (Nat_a_stream_stream_fun$ Nat$ )A_stream_stream$ )
(declare-fun fun_app$e (Nat_a_stream_stream_list_fun$ Nat$ )A_stream_stream_list$ )
(declare-fun fun_app$f (Nat_nat_list_fun$ Nat$ )Nat_list$ )
(declare-fun fun_app$g (Nat_nat_stream_fun$ Nat$ )Nat_stream$ )
(declare-fun fun_app$h (Nat_a_list_list_fun$ Nat$ )A_list_list$ )
(declare-fun fun_app$i (Nat_a_list_stream_fun$ Nat$ )A_list_stream$ )
(declare-fun fun_app$j (Nat_a_list_stream_list_fun$ Nat$ )A_list_stream_list$ )
(declare-fun fun_app$k (Nat_nat_stream_list_fun$ Nat$ )Nat_stream_list$ )
(declare-fun fun_app$l (Nat_a_stream_stream_stream_list_fun$ Nat$ )A_stream_stream_stream_list$ )
(declare-fun fun_app$m (Nat_a_stream_list_list_fun$ Nat$ )A_stream_list_list$ )
(declare-fun fun_app$n (A_stream_stream_stream_stream_a_stream_stream_stream_fun$ A_stream_stream_stream_stream$ )A_stream_stream_stream$ )
(declare-fun fun_app$o (A_stream_stream_stream_a_stream_stream_fun$ A_stream_stream_stream$ )A_stream_stream$ )
(declare-fun fun_app$p (A_list_stream_stream_a_list_stream_fun$ A_list_stream_stream$ )A_list_stream$ )
(declare-fun fun_app$q (Nat_stream_stream_nat_stream_fun$ Nat_stream_stream$ )Nat_stream$ )
(declare-fun fun_app$r (A_stream_stream_a_stream_fun$ A_stream_stream$ )A_stream$ )
(declare-fun fun_app$s (A_stream_list_stream_a_stream_list_fun$ A_stream_list_stream$ )A_stream_list$ )
(declare-fun fun_app$t (A_list_stream_a_list_fun$ A_list_stream$ )A_list$ )
(declare-fun fun_app$u (Nat_stream_nat_fun$ Nat_stream$ )Nat$ )
(declare-fun fun_app$v (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$w (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$x (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$y (A_a_fun$ A$ )A$ )
(declare-fun fun_app$z (A_a_stream_fun$ A$ )A_stream$ )
(declare-fun siterate$ (Nat_nat_fun$ Nat$ )Nat_stream$ )
(declare-fun fun_app$aa (A_nat_fun$ A$ )Nat$ )
(declare-fun fun_app$ab (A_list_a_fun$ A_list$ )A$ )
(declare-fun fun_app$ac (A_a_list_fun$ A$ )A_list$ )
(declare-fun fun_app$ad (A_stream_nat_fun$ A_stream$ )Nat$ )
(declare-fun fun_app$ae (A_a_stream_stream_fun$ A$ )A_stream_stream$ )
(declare-fun siterate$a (A_a_fun$ )A_a_stream_fun$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(append$ (map$ (uu$ ?v0 )(stake$ (fun_app$a suc$ ?v0 )ss$ ))(stake$a ?v0 (fun_app$b (snth$ ss$ )?v0 )))):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$c (uus$ ?v0 )?v1 )(append$a (map$a (uur$ ?v1 )(stake$b (fun_app$a suc$ ?v1 )?v0 ))(stake$ ?v1 (fun_app$d (snth$a ?v0 )?v1 )))):pattern ((fun_app$c (uus$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_stream_stream_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$e (uuq$ ?v0 )?v1 )(append$b (map$b (uup$ ?v1 )(stake$c (fun_app$a suc$ ?v1 )?v0 ))(stake$b ?v1 (snth$b ?v0 ?v1 )))):pattern ((fun_app$e (uuq$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$f (uuo$ ?v0 )?v1 )(append$c (map$c (uun$ ?v1 )(stake$d (fun_app$a suc$ ?v1 )?v0 ))(stake$e ?v1 (fun_app$g (snth$c ?v0 )?v1 )))):pattern ((fun_app$f (uuo$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_list_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$h (uum$ ?v0 )?v1 )(append$d (map$d (uul$ ?v1 )(stake$f (fun_app$a suc$ ?v1 )?v0 ))(stake$g ?v1 (fun_app$i (snth$d ?v0 )?v1 )))):pattern ((fun_app$h (uum$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_list_stream_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$j (uuk$ ?v0 )?v1 )(append$e (map$e (uuj$ ?v1 )(stake$h (fun_app$a suc$ ?v1 )?v0 ))(stake$f ?v1 (snth$e ?v0 ?v1 )))):pattern ((fun_app$j (uuk$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Nat_stream_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$k (uui$ ?v0 )?v1 )(append$f (map$f (uuh$ ?v1 )(stake$i (fun_app$a suc$ ?v1 )?v0 ))(stake$d ?v1 (snth$f ?v0 ?v1 )))):pattern ((fun_app$k (uui$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_stream_stream_stream_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$l (uug$ ?v0 )?v1 )(append$g (map$g (uuf$ ?v1 )(stake$j (fun_app$a suc$ ?v1 )?v0 ))(stake$c ?v1 (snth$g ?v0 ?v1 )))):pattern ((fun_app$l (uug$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_stream_list_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$m (uue$ ?v0 )?v1 )(append$h (map$h (uud$ ?v1 )(stake$k (fun_app$a suc$ ?v1 )?v0 ))(stake$l ?v1 (snth$h ?v0 ?v1 )))):pattern ((fun_app$m (uue$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$ (uut$ ?v0 )?v1 )(append$ (map$ (uu$ ?v1 )(stake$ (fun_app$a suc$ ?v1 )?v0 ))(stake$a ?v1 (fun_app$b (snth$ ?v0 )?v1 )))):pattern ((fun_app$ (uut$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_stream_stream_stream$ ))(! (= (fun_app$n (uuf$ ?v0 )?v1 )(snth$b ?v1 ?v0 )):pattern ((fun_app$n (uuf$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_stream_stream$ ))(! (= (fun_app$o (uup$ ?v0 )?v1 )(fun_app$d (snth$a ?v1 )?v0 )):pattern ((fun_app$o (uup$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream_stream$ ))(! (= (fun_app$p (uuj$ ?v0 )?v1 )(fun_app$i (snth$d ?v1 )?v0 )):pattern ((fun_app$p (uuj$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_stream_stream$ ))(! (= (fun_app$q (uuh$ ?v0 )?v1 )(fun_app$g (snth$c ?v1 )?v0 )):pattern ((fun_app$q (uuh$ ?v0 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_stream$ ))(! (= (fun_app$r (uur$ ?v0 )?v1 )(fun_app$b (snth$ ?v1 )?v0 )):pattern ((fun_app$r (uur$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_list_stream$ ))(! (= (fun_app$s (uud$ ?v0 )?v1 )(fun_app$c (snth$i ?v1 )?v0 )):pattern ((fun_app$s (uud$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream$ ))(! (= (fun_app$t (uul$ ?v0 )?v1 )(fun_app$ (snth$j ?v1 )?v0 )):pattern ((fun_app$t (uul$ ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_stream$ ))(! (= (fun_app$u (uun$ ?v0 )?v1 )(fun_app$a (snth$k ?v1 )?v0 )):pattern ((fun_app$u (uun$ ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(! (= (fun_app$v (uu$ ?v0 )?v1 )(fun_app$w (snth$l ?v1 )?v0 )):pattern ((fun_app$v (uu$ ?v0 )?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$x uuu$ ?v0 )?v0 ):pattern ((fun_app$x uuu$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a uub$ ?v0 )?v0 ):pattern ((fun_app$a uub$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$y uuc$ ?v0 )?v0 ):pattern ((fun_app$y uuc$ ?v0 )))):named a21 ))
(assert (! (not (member$ (fun_app$w (snth$l (fun_app$b (snth$ ss$ )n$ ))m$ )(sset$ (flat$ (smap$ uua$ (siterate$ suc$ zero$ )))))):named a22 ))
(assert (! (not (less_eq$ n$ m$ )):named a23 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$w (snth$l (fun_app$x (smap$a ?v0 )?v1 ))?v2 )(fun_app$y ?v0 (fun_app$w (snth$l ?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$w (snth$l (fun_app$r (smap$b ?v0 )?v1 ))?v2 )(fun_app$v ?v0 (fun_app$b (snth$ ?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$b (snth$ (smap$c ?v0 ?v1 ))?v2 )(fun_app$z ?v0 (fun_app$w (snth$l ?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat_a_list_fun$ )(?v1 Nat_stream$ )(?v2 Nat$ ))(= (fun_app$ (snth$j (smap$ ?v0 ?v1 ))?v2 )(fun_app$ ?v0 (fun_app$a (snth$k ?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$b (snth$ (smap$d ?v0 ?v1 ))?v2 )(fun_app$x ?v0 (fun_app$b (snth$ ?v1 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$a (snth$k (smap$e ?v0 ?v1 ))?v2 )(fun_app$aa ?v0 (fun_app$w (snth$l ?v1 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ )(?v2 Nat$ ))(= (fun_app$a (snth$k (smap$f ?v0 ?v1 ))?v2 )(fun_app$a ?v0 (fun_app$a (snth$k ?v1 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_stream$ )(?v2 Nat$ ))(= (fun_app$w (snth$l (smap$g ?v0 ?v1 ))?v2 )(fun_app$w ?v0 (fun_app$a (snth$k ?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_stream$ )(?v2 Nat$ ))(= (fun_app$w (snth$l (smap$h ?v0 ?v1 ))?v2 )(fun_app$ab ?v0 (fun_app$ (snth$j ?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 Nat_a_stream_fun$ )(?v1 Nat_stream$ )(?v2 Nat$ ))(= (fun_app$b (snth$ (smap$i ?v0 ?v1 ))?v2 )(fun_app$b ?v0 (fun_app$a (snth$k ?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (stake$a ?v0 (fun_app$x (smap$a ?v1 )?v2 ))(map$i ?v1 (stake$a ?v0 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_stream_fun$ )(?v2 A_stream$ ))(= (stake$ ?v0 (smap$c ?v1 ?v2 ))(map$j ?v1 (stake$a ?v0 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_a_fun$ )(?v2 A_stream_stream$ ))(= (stake$a ?v0 (fun_app$r (smap$b ?v1 )?v2 ))(map$ ?v1 (stake$ ?v0 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_list_fun$ )(?v2 Nat_stream$ ))(= (stake$g ?v0 (smap$ ?v1 ?v2 ))(map$k ?v1 (stake$e ?v0 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream_stream$ ))(= (stake$ ?v0 (smap$d ?v1 ?v2 ))(map$l ?v1 (stake$ ?v0 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_fun$ )(?v2 A_stream$ ))(= (stake$e ?v0 (smap$e ?v1 ?v2 ))(map$m ?v1 (stake$a ?v0 ?v2 )))):named a39 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat_stream$ ))(= (stake$e ?v0 (smap$f ?v1 ?v2 ))(map$n ?v1 (stake$e ?v0 ?v2 )))):named a40 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_fun$ )(?v2 Nat_stream$ ))(= (stake$a ?v0 (smap$g ?v1 ?v2 ))(map$o ?v1 (stake$e ?v0 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_stream_fun$ )(?v2 Nat_stream$ ))(= (stake$ ?v0 (smap$i ?v1 ?v2 ))(map$p ?v1 (stake$e ?v0 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_a_fun$ )(?v2 A_list_stream$ ))(= (stake$a ?v0 (smap$h ?v1 ?v2 ))(map$q ?v1 (stake$g ?v0 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$x (smap$a ?v0 )(fun_app$z (siterate$a ?v0 )?v1 ))(fun_app$z (siterate$a ?v0 )(fun_app$y ?v0 ?v1 )))):named a44 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (smap$f ?v0 (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$a ?v0 ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (fun_app$x (smap$a ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$y ?v0 (fun_app$w (snth$l ?v1 )?v3 ))(fun_app$w (snth$l ?v2 )?v3 ))))):named a46 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ ))(= (= (smap$c ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$z ?v0 (fun_app$w (snth$l ?v1 )?v3 ))(fun_app$b (snth$ ?v2 )?v3 ))))):named a47 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ ))(= (= (fun_app$r (smap$b ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$v ?v0 (fun_app$b (snth$ ?v1 )?v3 ))(fun_app$w (snth$l ?v2 )?v3 ))))):named a48 ))
(assert (! (forall ((?v0 Nat_a_list_fun$ )(?v1 Nat_stream$ )(?v2 A_list_stream$ ))(= (= (smap$ ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$ ?v0 (fun_app$a (snth$k ?v1 )?v3 ))(fun_app$ (snth$j ?v2 )?v3 ))))):named a49 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream$ ))(= (= (smap$d ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$x ?v0 (fun_app$b (snth$ ?v1 )?v3 ))(fun_app$b (snth$ ?v2 )?v3 ))))):named a50 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_stream$ )(?v2 Nat_stream$ ))(= (= (smap$e ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$aa ?v0 (fun_app$w (snth$l ?v1 )?v3 ))(fun_app$a (snth$k ?v2 )?v3 ))))):named a51 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ )(?v2 Nat_stream$ ))(= (= (smap$f ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$a ?v0 (fun_app$a (snth$k ?v1 )?v3 ))(fun_app$a (snth$k ?v2 )?v3 ))))):named a52 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_stream$ )(?v2 A_stream$ ))(= (= (smap$g ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$w ?v0 (fun_app$a (snth$k ?v1 )?v3 ))(fun_app$w (snth$l ?v2 )?v3 ))))):named a53 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_stream$ )(?v2 A_list_stream$ ))(= (= (smap$j ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$ac ?v0 (fun_app$w (snth$l ?v1 )?v3 ))(fun_app$ (snth$j ?v2 )?v3 ))))):named a54 ))
(assert (! (forall ((?v0 A_stream_nat_fun$ )(?v1 A_stream_stream$ )(?v2 Nat_stream$ ))(= (= (smap$k ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$ad ?v0 (fun_app$b (snth$ ?v1 )?v3 ))(fun_app$a (snth$k ?v2 )?v3 ))))):named a55 ))
(assert (! (forall ((?v0 A_stream$ ))(= ?v0 (smap$g (snth$l ?v0 )(siterate$ suc$ zero$ )))):named a56 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= ?v0 (smap$i (snth$ ?v0 )(siterate$ suc$ zero$ )))):named a57 ))
(assert (! (forall ((?v0 A_list_stream$ ))(= ?v0 (smap$ (snth$j ?v0 )(siterate$ suc$ zero$ )))):named a58 ))
(assert (! (forall ((?v0 Nat_stream$ ))(= ?v0 (smap$f (snth$k ?v0 )(siterate$ suc$ zero$ )))):named a59 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ ))(= ?v0 (smap$l (snth$a ?v0 )(siterate$ suc$ zero$ )))):named a60 ))
(assert (! (forall ((?v0 A_stream_list_stream$ ))(= ?v0 (smap$m (snth$i ?v0 )(siterate$ suc$ zero$ )))):named a61 ))
(assert (! (forall ((?v0 Nat_stream_stream$ ))(= ?v0 (smap$n (snth$c ?v0 )(siterate$ suc$ zero$ )))):named a62 ))
(assert (! (forall ((?v0 Nat_list_stream$ ))(= ?v0 (smap$o (snth$m ?v0 )(siterate$ suc$ zero$ )))):named a63 ))
(assert (! (forall ((?v0 A_list_stream_stream$ ))(= ?v0 (smap$p (snth$d ?v0 )(siterate$ suc$ zero$ )))):named a64 ))
(assert (! (forall ((?v0 A_list_list_stream$ ))(= ?v0 (smap$q (snth$n ?v0 )(siterate$ suc$ zero$ )))):named a65 ))
(assert (! (forall ((?v0 Nat_stream$ ))(= (smap$f uub$ ?v0 )?v0 )):named a66 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$x (smap$a uuc$ )?v0 )?v0 )):named a67 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_a_list_fun$ )(?v3 Nat_a_list_fun$ ))(=> (and (forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (and (member$a ?v4 (sset$a ?v0 ))(and (member$a ?v5 (sset$a ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$ ?v2 ?v0 )(smap$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a68 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (sset$ ?v0 ))(and (member$ ?v5 (sset$ ?v1 ))(= (fun_app$y ?v2 ?v4 )(fun_app$y ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$x (smap$a ?v2 )?v0 )(fun_app$x (smap$a ?v3 )?v1 )))(= ?v0 ?v1 ))):named a69 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ ))(=> (and (forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (and (member$a ?v4 (sset$a ?v0 ))(and (member$a ?v5 (sset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$f ?v2 ?v0 )(smap$f ?v3 ?v1 )))(= ?v0 ?v1 ))):named a70 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_a_fun$ )(?v3 Nat_a_fun$ ))(=> (and (forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (and (member$a ?v4 (sset$a ?v0 ))(and (member$a ?v5 (sset$a ?v1 ))(= (fun_app$w ?v2 ?v4 )(fun_app$w ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$g ?v2 ?v0 )(smap$g ?v3 ?v1 )))(= ?v0 ?v1 ))):named a71 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_stream_fun$ )(?v3 A_a_stream_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (sset$ ?v0 ))(and (member$ ?v5 (sset$ ?v1 ))(= (fun_app$z ?v2 ?v4 )(fun_app$z ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$c ?v2 ?v0 )(smap$c ?v3 ?v1 )))(= ?v0 ?v1 ))):named a72 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_a_stream_list_fun$ )(?v3 Nat_a_stream_list_fun$ ))(=> (and (forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (and (member$a ?v4 (sset$a ?v0 ))(and (member$a ?v5 (sset$a ?v1 ))(= (fun_app$c ?v2 ?v4 )(fun_app$c ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$m ?v2 ?v0 )(smap$m ?v3 ?v1 )))(= ?v0 ?v1 ))):named a73 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_nat_fun$ )(?v3 A_nat_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (sset$ ?v0 ))(and (member$ ?v5 (sset$ ?v1 ))(= (fun_app$aa ?v2 ?v4 )(fun_app$aa ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$e ?v2 ?v0 )(smap$e ?v3 ?v1 )))(= ?v0 ?v1 ))):named a74 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_list_fun$ )(?v3 A_a_list_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (sset$ ?v0 ))(and (member$ ?v5 (sset$ ?v1 ))(= (fun_app$ac ?v2 ?v4 )(fun_app$ac ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$j ?v2 ?v0 )(smap$j ?v3 ?v1 )))(= ?v0 ?v1 ))):named a75 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_nat_list_fun$ )(?v3 Nat_nat_list_fun$ ))(=> (and (forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (and (member$a ?v4 (sset$a ?v0 ))(and (member$a ?v5 (sset$a ?v1 ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$o ?v2 ?v0 )(smap$o ?v3 ?v1 )))(= ?v0 ?v1 ))):named a76 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_stream_stream_fun$ )(?v3 A_a_stream_stream_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (sset$ ?v0 ))(and (member$ ?v5 (sset$ ?v1 ))(= (fun_app$ae ?v2 ?v4 )(fun_app$ae ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$r ?v2 ?v0 )(smap$r ?v3 ?v1 )))(= ?v0 ?v1 ))):named a77 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_a_list_fun$ )(?v2 Nat_a_list_fun$ ))(=> (forall ((?v3 Nat$ ))(=> (member$a ?v3 (sset$a ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (smap$ ?v1 ?v0 )(smap$ ?v2 ?v0 )))):named a78 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (sset$ ?v0 ))(= (fun_app$y ?v1 ?v3 )(fun_app$y ?v2 ?v3 ))))(= (fun_app$x (smap$a ?v1 )?v0 )(fun_app$x (smap$a ?v2 )?v0 )))):named a79 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ ))(=> (forall ((?v3 Nat$ ))(=> (member$a ?v3 (sset$a ?v0 ))(= (fun_app$a ?v1 ?v3 )(fun_app$a ?v2 ?v3 ))))(= (smap$f ?v1 ?v0 )(smap$f ?v2 ?v0 )))):named a80 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_a_fun$ )(?v2 Nat_a_fun$ ))(=> (forall ((?v3 Nat$ ))(=> (member$a ?v3 (sset$a ?v0 ))(= (fun_app$w ?v1 ?v3 )(fun_app$w ?v2 ?v3 ))))(= (smap$g ?v1 ?v0 )(smap$g ?v2 ?v0 )))):named a81 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_stream_fun$ )(?v2 A_a_stream_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (sset$ ?v0 ))(= (fun_app$z ?v1 ?v3 )(fun_app$z ?v2 ?v3 ))))(= (smap$c ?v1 ?v0 )(smap$c ?v2 ?v0 )))):named a82 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_a_stream_list_fun$ )(?v2 Nat_a_stream_list_fun$ ))(=> (forall ((?v3 Nat$ ))(=> (member$a ?v3 (sset$a ?v0 ))(= (fun_app$c ?v1 ?v3 )(fun_app$c ?v2 ?v3 ))))(= (smap$m ?v1 ?v0 )(smap$m ?v2 ?v0 )))):named a83 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_nat_fun$ )(?v2 A_nat_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (sset$ ?v0 ))(= (fun_app$aa ?v1 ?v3 )(fun_app$aa ?v2 ?v3 ))))(= (smap$e ?v1 ?v0 )(smap$e ?v2 ?v0 )))):named a84 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_list_fun$ )(?v2 A_a_list_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (sset$ ?v0 ))(= (fun_app$ac ?v1 ?v3 )(fun_app$ac ?v2 ?v3 ))))(= (smap$j ?v1 ?v0 )(smap$j ?v2 ?v0 )))):named a85 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_nat_list_fun$ )(?v2 Nat_nat_list_fun$ ))(=> (forall ((?v3 Nat$ ))(=> (member$a ?v3 (sset$a ?v0 ))(= (fun_app$f ?v1 ?v3 )(fun_app$f ?v2 ?v3 ))))(= (smap$o ?v1 ?v0 )(smap$o ?v2 ?v0 )))):named a86 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_stream_stream_fun$ )(?v2 A_a_stream_stream_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (sset$ ?v0 ))(= (fun_app$ae ?v1 ?v3 )(fun_app$ae ?v2 ?v3 ))))(= (smap$r ?v1 ?v0 )(smap$r ?v2 ?v0 )))):named a87 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_a_list_fun$ )(?v3 Nat_a_list_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (member$a ?v4 (sset$a ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (smap$ ?v2 ?v0 )(smap$ ?v3 ?v1 )))):named a88 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (sset$ ?v1 ))(= (fun_app$y ?v2 ?v4 )(fun_app$y ?v3 ?v4 )))))(= (fun_app$x (smap$a ?v2 )?v0 )(fun_app$x (smap$a ?v3 )?v1 )))):named a89 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (member$a ?v4 (sset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (smap$f ?v2 ?v0 )(smap$f ?v3 ?v1 )))):named a90 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_a_fun$ )(?v3 Nat_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (member$a ?v4 (sset$a ?v1 ))(= (fun_app$w ?v2 ?v4 )(fun_app$w ?v3 ?v4 )))))(= (smap$g ?v2 ?v0 )(smap$g ?v3 ?v1 )))):named a91 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_stream_fun$ )(?v3 A_a_stream_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (sset$ ?v1 ))(= (fun_app$z ?v2 ?v4 )(fun_app$z ?v3 ?v4 )))))(= (smap$c ?v2 ?v0 )(smap$c ?v3 ?v1 )))):named a92 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_a_stream_list_fun$ )(?v3 Nat_a_stream_list_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (member$a ?v4 (sset$a ?v1 ))(= (fun_app$c ?v2 ?v4 )(fun_app$c ?v3 ?v4 )))))(= (smap$m ?v2 ?v0 )(smap$m ?v3 ?v1 )))):named a93 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_nat_fun$ )(?v3 A_nat_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (sset$ ?v1 ))(= (fun_app$aa ?v2 ?v4 )(fun_app$aa ?v3 ?v4 )))))(= (smap$e ?v2 ?v0 )(smap$e ?v3 ?v1 )))):named a94 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_list_fun$ )(?v3 A_a_list_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (sset$ ?v1 ))(= (fun_app$ac ?v2 ?v4 )(fun_app$ac ?v3 ?v4 )))))(= (smap$j ?v2 ?v0 )(smap$j ?v3 ?v1 )))):named a95 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_nat_list_fun$ )(?v3 Nat_nat_list_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (member$a ?v4 (sset$a ?v1 ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v4 )))))(= (smap$o ?v2 ?v0 )(smap$o ?v3 ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_stream_stream_fun$ )(?v3 A_a_stream_stream_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (sset$ ?v1 ))(= (fun_app$ae ?v2 ?v4 )(fun_app$ae ?v3 ?v4 )))))(= (smap$r ?v2 ?v0 )(smap$r ?v3 ?v1 )))):named a97 ))
(assert (! (forall ((?v0 A_stream_list_stream$ )(?v1 Nat$ ))(member$b (fun_app$c (snth$i ?v0 )?v1 )(sset$b ?v0 ))):named a98 ))
(assert (! (forall ((?v0 A_stream_stream_stream_stream$ )(?v1 Nat$ ))(member$c (snth$b ?v0 ?v1 )(sset$c ?v0 ))):named a99 ))
(assert (! (forall ((?v0 Nat_stream_stream$ )(?v1 Nat$ ))(member$d (fun_app$g (snth$c ?v0 )?v1 )(sset$d ?v0 ))):named a100 ))
(assert (! (forall ((?v0 A_list_stream_stream$ )(?v1 Nat$ ))(member$e (fun_app$i (snth$d ?v0 )?v1 )(sset$e ?v0 ))):named a101 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 Nat$ ))(member$f (fun_app$ (snth$j ?v0 )?v1 )(sset$f ?v0 ))):named a102 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 Nat$ ))(member$g (fun_app$d (snth$a ?v0 )?v1 )(sset$g ?v0 ))):named a103 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat$ ))(member$a (fun_app$a (snth$k ?v0 )?v1 )(sset$a ?v0 ))):named a104 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 Nat$ ))(member$h (fun_app$b (snth$ ?v0 )?v1 )(sset$h ?v0 ))):named a105 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(member$ (fun_app$w (snth$l ?v0 )?v1 )(sset$ ?v0 ))):named a106 ))
(assert (! (forall ((?v0 A_stream_list_stream_stream$ ))(= (smerge$ ?v0 )(flat$a (smap$s (uue$ ?v0 )(siterate$ suc$ zero$ ))))):named a107 ))
(assert (! (forall ((?v0 A_stream_stream_stream_stream_stream$ ))(= (smerge$a ?v0 )(flat$b (smap$t (uug$ ?v0 )(siterate$ suc$ zero$ ))))):named a108 ))
(assert (! (forall ((?v0 Nat_stream_stream_stream$ ))(= (smerge$b ?v0 )(flat$c (smap$u (uui$ ?v0 )(siterate$ suc$ zero$ ))))):named a109 ))
(assert (! (forall ((?v0 A_list_stream_stream_stream$ ))(= (smerge$c ?v0 )(flat$d (smap$v (uuk$ ?v0 )(siterate$ suc$ zero$ ))))):named a110 ))
(assert (! (forall ((?v0 A_list_stream_stream$ ))(= (smerge$d ?v0 )(flat$e (smap$q (uum$ ?v0 )(siterate$ suc$ zero$ ))))):named a111 ))
(assert (! (forall ((?v0 Nat_stream_stream$ ))(= (smerge$e ?v0 )(flat$f (smap$o (uuo$ ?v0 )(siterate$ suc$ zero$ ))))):named a112 ))
(assert (! (forall ((?v0 A_stream_stream_stream_stream$ ))(= (smerge$f ?v0 )(flat$g (smap$w (uuq$ ?v0 )(siterate$ suc$ zero$ ))))):named a113 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ ))(= (smerge$g ?v0 )(flat$h (smap$m (uus$ ?v0 )(siterate$ suc$ zero$ ))))):named a114 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= (smerge$h ?v0 )(flat$ (smap$ (uut$ ?v0 )(siterate$ suc$ zero$ ))))):named a115 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(= (map$i ?v0 (append$ ?v1 ?v2 ))(append$ (map$i ?v0 ?v1 )(map$i ?v0 ?v2 )))):named a116 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_list$ )(?v2 A_stream_list$ ))(= (map$ ?v0 (append$a ?v1 ?v2 ))(append$ (map$ ?v0 ?v1 )(map$ ?v0 ?v2 )))):named a117 ))
(assert (! (forall ((?v0 Nat_a_list_fun$ )(?v1 Nat_list$ )(?v2 Nat_list$ ))(= (map$k ?v0 (append$c ?v1 ?v2 ))(append$d (map$k ?v0 ?v1 )(map$k ?v0 ?v2 )))):named a118 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(= (map$j ?v0 (append$ ?v1 ?v2 ))(append$a (map$j ?v0 ?v1 )(map$j ?v0 ?v2 )))):named a119 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_list$ )(?v2 A_stream_list$ ))(= (map$l ?v0 (append$a ?v1 ?v2 ))(append$a (map$l ?v0 ?v1 )(map$l ?v0 ?v2 )))):named a120 ))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$ )(?v1 A_stream_stream_list$ )(?v2 A_stream_stream_list$ ))(= (map$a ?v0 (append$b ?v1 ?v2 ))(append$a (map$a ?v0 ?v1 )(map$a ?v0 ?v2 )))):named a121 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_list$ )(?v2 Nat_list$ ))(= (map$n ?v0 (append$c ?v1 ?v2 ))(append$c (map$n ?v0 ?v1 )(map$n ?v0 ?v2 )))):named a122 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_list$ )(?v2 Nat_list$ ))(= (map$o ?v0 (append$c ?v1 ?v2 ))(append$ (map$o ?v0 ?v1 )(map$o ?v0 ?v2 )))):named a123 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(= (map$m ?v0 (append$ ?v1 ?v2 ))(append$c (map$m ?v0 ?v1 )(map$m ?v0 ?v2 )))):named a124 ))
(assert (! (forall ((?v0 A_stream_nat_fun$ )(?v1 A_stream_list$ )(?v2 A_stream_list$ ))(= (map$r ?v0 (append$a ?v1 ?v2 ))(append$c (map$r ?v0 ?v1 )(map$r ?v0 ?v2 )))):named a125 ))
(assert (! (forall ((?v0 Nat_list$ ))(= (map$n uub$ ?v0 )?v0 )):named a126 ))
(assert (! (forall ((?v0 A_list$ ))(= (map$i uuc$ ?v0 )?v0 )):named a127 ))
(assert (! (forall ((?v0 A_stream_list$ ))(= (map$l uuu$ ?v0 )?v0 )):named a128 ))
(assert (! (forall ((?v0 A_stream_stream_list$ )(?v1 A_stream_stream_list$ )(?v2 A_stream_stream_list$ ))(= (= (append$b ?v0 ?v1 )(append$b ?v0 ?v2 ))(= ?v1 ?v2 ))):named a129 ))
(assert (! (forall ((?v0 Nat_list$ )(?v1 Nat_list$ )(?v2 Nat_list$ ))(= (= (append$c ?v0 ?v1 )(append$c ?v0 ?v2 ))(= ?v1 ?v2 ))):named a130 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(= (= (append$d ?v0 ?v1 )(append$d ?v0 ?v2 ))(= ?v1 ?v2 ))):named a131 ))
(assert (! (forall ((?v0 A_stream_list$ )(?v1 A_stream_list$ )(?v2 A_stream_list$ ))(= (= (append$a ?v0 ?v1 )(append$a ?v0 ?v2 ))(= ?v1 ?v2 ))):named a132 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a133 ))
(assert (! (forall ((?v0 Nat_list$ )(?v1 Nat_list$ )(?v2 Nat_list$ ))(= (= (append$c ?v0 ?v1 )(append$c ?v2 ?v1 ))(= ?v0 ?v2 ))):named a134 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(= (= (append$d ?v0 ?v1 )(append$d ?v2 ?v1 ))(= ?v0 ?v2 ))):named a135 ))
(assert (! (forall ((?v0 A_stream_list$ )(?v1 A_stream_list$ )(?v2 A_stream_list$ ))(= (= (append$a ?v0 ?v1 )(append$a ?v2 ?v1 ))(= ?v0 ?v2 ))):named a136 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a137 ))
(assert (! (forall ((?v0 A_stream_list$ )(?v1 A_stream_list$ )(?v2 A_stream_list$ ))(= (append$a (append$a ?v0 ?v1 )?v2 )(append$a ?v0 (append$a ?v1 ?v2 )))):named a138 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (append$ (append$ ?v0 ?v1 )?v2 )(append$ ?v0 (append$ ?v1 ?v2 )))):named a139 ))
(check-sat )
;(get-unsat-core )
