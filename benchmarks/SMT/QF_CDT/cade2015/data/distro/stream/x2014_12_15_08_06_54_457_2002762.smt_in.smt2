;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun m$ ()Nat$ )
(declare-fun p$ ()A_bool_fun$ )
(declare-fun s$ ()A_stream$ )
(declare-fun ma$ ()Nat$ )
(declare-fun sa$ ()A_stream$ )
(declare-fun uu$ ()Bool_bool_fun$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ ()Bool_bool_fun$ )
(declare-fun comp$ (Bool_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun fun_app$ (Bool_bool_fun$ Bool )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun fun_app$a (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun sdrop_while$ (A_bool_fun$ A_stream$ )A_stream$ )
(assert (! (forall ((?v0 Bool ))(! (= (fun_app$ uu$ ?v0 )(not ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Bool ))(! (= (fun_app$ uua$ ?v0 )?v0 ):pattern ((fun_app$ uua$ ?v0 )))):named a1 ))
(assert (! (not (= (sdrop_while$ (fun_app$a (comp$ uu$ )p$ )sa$ )(sdrop$ (suc$ ma$ )sa$ ))):named a2 ))
(assert (! (= (suc$ ma$ )(suc$ ma$ )):named a3 ))
(assert (! (not (fun_app$b p$ (snth$ sa$ zero$ ))):named a4 ))
(assert (! (fun_app$b p$ (snth$ sa$ (suc$ ma$ ))):named a5 ))
(assert (! (= (sdrop_while$ (fun_app$a (comp$ uu$ )p$ )(stl$ sa$ ))(sdrop$ ma$ (stl$ sa$ ))):named a6 ))
(assert (! (exists ((?v0 Nat$ ))(fun_app$b p$ (snth$ s$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (stl$ (sdrop$ ?v0 ?v1 ))(sdrop$ (suc$ ?v0 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (and (fun_app$b p$ (snth$ ?v0 ma$ ))(and (forall ((?v1 Nat$ ))(=> (fun_app$b p$ (snth$ ?v0 ?v1 ))(less_eq$ ma$ ?v1 )))(= ma$ ma$ )))(= (sdrop_while$ (fun_app$a (comp$ uu$ )p$ )?v0 )(sdrop$ ma$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$b p$ (snth$ sa$ ?v0 ))(less_eq$ (suc$ ma$ )?v0 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(! (= (sdrop$ (suc$ ?v0 )?v1 )(sdrop$ ?v0 (stl$ ?v1 ))):pattern ((sdrop$ (suc$ ?v0 )?v1 )))):named a11 ))
(assert (! (fun_app$b p$ (snth$ s$ m$ )):named a12 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$b (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$a (comp$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (sdrop$ zero$ ?v0 )?v0 ):pattern ((sdrop$ zero$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (fun_app$a (comp$ uua$ )?v0 )?v0 )):named a18 ))
(check-sat )
;(get-unsat-core )
