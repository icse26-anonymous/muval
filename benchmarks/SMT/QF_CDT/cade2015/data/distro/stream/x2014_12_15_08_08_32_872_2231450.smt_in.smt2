;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort Nat_a_bool_fun_fun$ 0 )
(declare-sort A_list_list_bool_fun$ 0 )
(declare-sort Nat_a_list_bool_fun_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_list_stream$ 0)
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_list_stream$)A_list$)
(declare-fun stl$ (A_list_stream$)A_list_stream$)
(declare-fun sCons$ (A_list$ A_list_stream$ )A_list_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-datatypes ()((A_list_list$ (nil$a )(cons$a (hd$a A_list$ )(tl$a A_list_list$ )))))
(declare-fun m$ ()Nat$ )
(declare-fun s$ ()A_list_stream$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()Nat$ )
(declare-fun sa$ ()A_list_stream$ )
(declare-fun nth$ (A_list$ Nat$ )A$ )
(declare-fun flat$ (A_list_stream$ )A_stream$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun nth$a (A_list_list$ Nat$ )A_list$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun snth$ (A_list_stream$ Nat$ )A_list$ )
(declare-fun sset$ (A_list_stream$ )A_list_set$ )
(declare-fun minus$ (Nat$ Nat$ )Nat$ )
(declare-fun shift$ (A_list_list$ A_list_stream$ )A_list_stream$ )
(declare-fun size$a (A_list_list$ )Nat$ )
(declare-fun snth$a (A_stream$ Nat$ )A$ )
(declare-fun sset$a (A_stream$ )A_set$ )
(declare-fun member$ (A_list$ A_list_set$ )Bool )
(declare-fun shift$a (A_list$ A_stream$ )A_stream$ )
(declare-fun fun_app$ (A_list_bool_fun$ A_list$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (Nat_a_list_bool_fun_fun$ Nat$ )A_list_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (Nat_a_bool_fun_fun$ Nat$ )A_bool_fun$ )
(declare-fun fun_app$d (A_list_list_bool_fun$ A_list_list$ )Bool )
(assert (! (not (exists ((?v0 Nat$ )(?v1 Nat$ ))(and (= x$ (nth$ (snth$ (stl$ sa$ )?v0 )?v1 ))(less$ ?v1 (size$ (snth$ (stl$ sa$ )?v0 )))))):named a0 ))
(assert (! (forall ((?v0 A_list$ ))(=> (member$ ?v0 (sset$ s$ ))(not (= ?v0 nil$ )))):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(=> (member$ ?v0 (sset$ sa$ ))(not (= ?v0 nil$ )))):named a2 ))
(assert (! (forall ((?v0 A_list$ ))(=> (member$ ?v0 (sset$ (stl$ sa$ )))(not (= ?v0 nil$ )))):named a3 ))
(assert (! (less$ (minus$ y$ (size$ (shd$ sa$ )))y$ ):named a4 ))
(assert (! (not (less$ y$ (size$ (shd$ sa$ )))):named a5 ))
(assert (! (= x$ (snth$a (flat$ sa$ )y$ )):named a6 ))
(assert (! (= x$ (snth$a (flat$ (stl$ sa$ ))(minus$ y$ (size$ (shd$ sa$ ))))):named a7 ))
(assert (! (= x$ (snth$a (flat$ s$ )m$ )):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream$ ))(=> (and (less$ ?v0 y$ )(and (forall ((?v2 A_list$ ))(=> (member$ ?v2 (sset$ ?v1 ))(not (= ?v2 nil$ ))))(and (= x$ (snth$a (flat$ ?v1 )?v0 ))(and (forall ((?v2 A_list$ ))(=> (member$ ?v2 (sset$ ?v1 ))(not (= ?v2 nil$ ))))(= x$ (snth$a (flat$ ?v1 )?v0 ))))))(exists ((?v2 Nat$ )(?v3 Nat$ ))(and (= x$ (nth$ (snth$ ?v1 ?v2 )?v3 ))(less$ ?v3 (size$ (snth$ ?v1 ?v2 ))))))):named a9 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= ?v0 ?v1 )(and (= (size$a ?v0 )(size$a ?v1 ))(forall ((?v2 Nat$ ))(=> (less$ ?v2 (size$a ?v0 ))(= (nth$a ?v0 ?v2 )(nth$a ?v1 ?v2 ))))))):named a10 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= ?v0 ?v1 )(and (= (size$ ?v0 )(size$ ?v1 ))(forall ((?v2 Nat$ ))(=> (less$ ?v2 (size$ ?v0 ))(= (nth$ ?v0 ?v2 )(nth$ ?v1 ?v2 ))))))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_list_bool_fun_fun$ ))(= (forall ((?v2 Nat$ ))(=> (less$ ?v2 ?v0 )(exists ((?v3 A_list$ ))(fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))))(exists ((?v2 A_list_list$ ))(and (= (size$a ?v2 )?v0 )(forall ((?v3 Nat$ ))(=> (less$ ?v3 ?v0 )(fun_app$ (fun_app$a ?v1 ?v3 )(nth$a ?v2 ?v3 )))))))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_bool_fun_fun$ ))(= (forall ((?v2 Nat$ ))(=> (less$ ?v2 ?v0 )(exists ((?v3 A$ ))(fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))))(exists ((?v2 A_list$ ))(and (= (size$ ?v2 )?v0 )(forall ((?v3 Nat$ ))(=> (less$ ?v3 ?v0 )(fun_app$b (fun_app$c ?v1 ?v3 )(nth$ ?v2 ?v3 )))))))):named a13 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(=> (and (= (size$a ?v0 )(size$a ?v1 ))(forall ((?v2 Nat$ ))(=> (less$ ?v2 (size$a ?v0 ))(= (nth$a ?v0 ?v2 )(nth$a ?v1 ?v2 )))))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (and (= (size$ ?v0 )(size$ ?v1 ))(forall ((?v2 Nat$ ))(=> (less$ ?v2 (size$ ?v0 ))(= (nth$ ?v0 ?v2 )(nth$ ?v1 ?v2 )))))(= ?v0 ?v1 ))):named a15 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= x$ (snth$a (flat$ s$ )?v0 ))false ))false ):named a16 ))
(assert (! (forall ((?v0 A_list_list_bool_fun$ )(?v1 A_list_list$ ))(=> (forall ((?v2 A_list_list$ ))(=> (forall ((?v3 A_list_list$ ))(=> (less$ (size$a ?v3 )(size$a ?v2 ))(fun_app$d ?v0 ?v3 )))(fun_app$d ?v0 ?v2 )))(fun_app$d ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list$ ))(=> (forall ((?v2 A_list$ ))(=> (forall ((?v3 A_list$ ))(=> (less$ (size$ ?v3 )(size$ ?v2 ))(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(member$a (snth$a ?v0 ?v1 )(sset$a ?v0 ))):named a19 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 Nat$ ))(member$ (snth$ ?v0 ?v1 )(sset$ ?v0 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_list$ )(?v2 A_list_stream$ ))(=> (less$ ?v0 (size$a ?v1 ))(= (snth$ (shift$ ?v1 ?v2 )?v0 )(nth$a ?v1 ?v0 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ )(?v2 A_stream$ ))(=> (less$ ?v0 (size$ ?v1 ))(= (snth$a (shift$a ?v1 ?v2 )?v0 )(nth$ ?v1 ?v0 )))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(=> (member$a ?v0 (sset$a (stl$a ?v1 )))(member$a ?v0 (sset$a ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ ))(=> (member$ ?v0 (sset$ (stl$ ?v1 )))(member$ ?v0 (sset$ ?v1 )))):named a24 ))
(check-sat )
;(get-unsat-core )
