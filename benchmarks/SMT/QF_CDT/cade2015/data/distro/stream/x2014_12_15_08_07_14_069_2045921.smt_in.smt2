;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_list$ )
(declare-fun cycle$ (A_list$ )A_stream$ )
(declare-fun append$ (A_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$ (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun fun_app$a (A_list_bool_fun$ A_list$ )Bool )
(assert (! (not (= (cycle$ (cons$ x$ xs$ ))(sCons$ x$ (cycle$ (fun_app$ (append$ xs$ )(cons$ x$ nil$ )))))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_list$ )(?v3 A$ ))(= (= (fun_app$ (append$ ?v0 )(cons$ ?v1 nil$ ))(fun_app$ (append$ ?v2 )(cons$ ?v3 nil$ )))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )?v1 )(= ?v0 nil$ ))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )?v0 )(= ?v1 nil$ ))):named a5 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= ?v0 (fun_app$ (append$ ?v1 )?v0 ))(= ?v1 nil$ ))):named a6 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= ?v0 (fun_app$ (append$ ?v0 )?v1 ))(= ?v1 nil$ ))):named a7 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= nil$ (fun_app$ (append$ ?v0 )?v1 ))(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )nil$ )(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a9 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$ (append$ ?v0 )nil$ )?v0 ):pattern ((append$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )(cons$ ?v2 ?v3 ))(or (and (= ?v0 nil$ )(= ?v1 (cons$ ?v2 ?v3 )))(exists ((?v4 A_list$ ))(and (= ?v0 (cons$ ?v2 ?v4 ))(= (fun_app$ (append$ ?v4 )?v1 )?v3 )))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(fun_app$ (append$ ?v2 )?v3 ))(or (and (= ?v2 nil$ )(= (cons$ ?v0 ?v1 )?v3 ))(exists ((?v4 A_list$ ))(and (= (cons$ ?v0 ?v4 )?v2 )(= ?v1 (fun_app$ (append$ ?v4 )?v3 ))))))):named a12 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(forall ((?v1 A_list$ )(?v2 A$ ))(=> (= ?v0 (fun_app$ (append$ ?v1 )(cons$ ?v2 nil$ )))false )))false )):named a13 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_bool_fun$ ))(=> (and (not (= ?v0 nil$ ))(and (forall ((?v2 A$ ))(fun_app$a ?v1 (cons$ ?v2 nil$ )))(forall ((?v2 A$ )(?v3 A_list$ ))(=> (and (not (= ?v3 nil$ ))(fun_app$a ?v1 ?v3 ))(fun_app$a ?v1 (fun_app$ (append$ ?v3 )(cons$ ?v2 nil$ )))))))(fun_app$a ?v1 ?v0 ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (fun_app$ (append$ (fun_app$ (append$ ?v0 )?v1 ))?v2 )(fun_app$ (append$ ?v0 )(fun_app$ (append$ ?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )(fun_app$ (append$ ?v2 )?v1 ))(= ?v0 ?v2 ))):named a17 ))
(check-sat )
;(get-unsat-core )
