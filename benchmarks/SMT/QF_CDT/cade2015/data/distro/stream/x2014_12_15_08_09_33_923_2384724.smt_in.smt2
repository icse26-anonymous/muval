;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort C_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_c_prod_set$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort B_a_prod_set$ 0 )
(declare-sort B_b_prod_set$ 0 )
(declare-sort B_stream_set$ 0 )
(declare-sort C_stream_set$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_b_fun_fun$ 0 )
(declare-sort A_a_c_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_b_b_fun_fun$ 0 )
(declare-sort A_b_c_fun_fun$ 0 )
(declare-sort A_c_a_fun_fun$ 0 )
(declare-sort A_c_b_fun_fun$ 0 )
(declare-sort A_c_c_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort B_a_c_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_b_c_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun$ 0 )
(declare-sort B_c_b_fun_fun$ 0 )
(declare-sort B_c_c_fun_fun$ 0 )
(declare-sort C_a_a_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun$ 0 )
(declare-sort C_b_b_fun_fun$ 0 )
(declare-sort C_c_a_fun_fun$ 0 )
(declare-sort A_b_b_prod_fun$ 0 )
(declare-sort B_b_prod_a_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort A_c_prod_bool_fun$ 0 )
(declare-sort B_a_prod_bool_fun$ 0 )
(declare-sort B_b_prod_bool_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_prod_stream_set$ 0 )
(declare-sort A_b_prod_stream_set$ 0 )
(declare-sort A_c_prod_stream_set$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort B_a_prod_stream_set$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_prod_stream_set$ 0 )
(declare-sort B_stream_stream_set$ 0 )
(declare-sort C_c_fun_c_c_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_c_prod_a_c_prod_fun$ 0 )
(declare-sort B_a_prod_b_a_prod_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun_a_a_prod_a_a_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$ 0 )
(declare-sort A_c_prod_a_c_prod_fun_a_c_prod_a_c_prod_fun_fun$ 0 )
(declare-sort B_a_prod_b_a_prod_fun_b_a_prod_b_a_prod_fun_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_fun_b_b_prod_b_b_prod_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-sort C_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (B_stream$)B$)
(declare-fun stl$a (B_stream$)B_stream$)
(declare-fun sCons$a (B$ B_stream$ )B_stream$)
(declare-fun shd$b (C_stream$)C$)
(declare-fun stl$b (C_stream$)C_stream$)
(declare-fun sCons$b (C$ C_stream$ )C_stream$)
(declare-datatypes ()((B_b_prod$ (pair$ (fst$ B$ )(snd$ B$ )))))
(declare-sort B_b_prod_stream$ 0)
(declare-fun shd$c (B_b_prod_stream$)B_b_prod$)
(declare-fun stl$c (B_b_prod_stream$)B_b_prod_stream$)
(declare-fun sCons$c (B_b_prod$ B_b_prod_stream$ )B_b_prod_stream$)
(declare-datatypes ()((B_a_prod$ (pair$a (fst$a B$ )(snd$a A$ )))))
(declare-sort B_a_prod_stream$ 0)
(declare-fun shd$d (B_a_prod_stream$)B_a_prod$)
(declare-fun stl$d (B_a_prod_stream$)B_a_prod_stream$)
(declare-fun sCons$d (B_a_prod$ B_a_prod_stream$ )B_a_prod_stream$)
(declare-datatypes ()((A_c_prod$ (pair$b (fst$b A$ )(snd$b C$ )))))
(declare-sort A_c_prod_stream$ 0)
(declare-fun shd$e (A_c_prod_stream$)A_c_prod$)
(declare-fun stl$e (A_c_prod_stream$)A_c_prod_stream$)
(declare-fun sCons$e (A_c_prod$ A_c_prod_stream$ )A_c_prod_stream$)
(declare-datatypes ()((A_b_prod$ (pair$c (fst$c A$ )(snd$c B$ )))))
(declare-sort A_b_prod_stream$ 0)
(declare-fun shd$f (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$f (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$f (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-datatypes ()((A_a_prod$ (pair$d (fst$d A$ )(snd$d A$ )))))
(declare-sort A_a_prod_stream$ 0)
(declare-sort B_stream_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-sort B_stream_stream_stream$ 0)
(declare-sort A_stream_stream_stream$ 0)
(declare-sort B_b_prod_stream_stream$ 0)
(declare-sort B_a_prod_stream_stream$ 0)
(declare-sort A_c_prod_stream_stream$ 0)
(declare-sort A_b_prod_stream_stream$ 0)
(declare-sort A_a_prod_stream_stream$ 0)
(declare-sort C_stream_stream$ 0)
(declare-fun shd$g (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$g (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$g (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-fun shd$h (B_stream_stream$)B_stream$)
(declare-fun stl$h (B_stream_stream$)B_stream_stream$)
(declare-fun sCons$h (B_stream$ B_stream_stream$ )B_stream_stream$)
(declare-fun shd$i (A_stream_stream$)A_stream$)
(declare-fun stl$i (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$i (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-fun shd$j (B_stream_stream_stream$)B_stream_stream$)
(declare-fun stl$j (B_stream_stream_stream$)B_stream_stream_stream$)
(declare-fun sCons$j (B_stream_stream$ B_stream_stream_stream$ )B_stream_stream_stream$)
(declare-fun shd$k (A_stream_stream_stream$)A_stream_stream$)
(declare-fun stl$k (A_stream_stream_stream$)A_stream_stream_stream$)
(declare-fun sCons$k (A_stream_stream$ A_stream_stream_stream$ )A_stream_stream_stream$)
(declare-fun shd$l (B_b_prod_stream_stream$)B_b_prod_stream$)
(declare-fun stl$l (B_b_prod_stream_stream$)B_b_prod_stream_stream$)
(declare-fun sCons$l (B_b_prod_stream$ B_b_prod_stream_stream$ )B_b_prod_stream_stream$)
(declare-fun shd$m (B_a_prod_stream_stream$)B_a_prod_stream$)
(declare-fun stl$m (B_a_prod_stream_stream$)B_a_prod_stream_stream$)
(declare-fun sCons$m (B_a_prod_stream$ B_a_prod_stream_stream$ )B_a_prod_stream_stream$)
(declare-fun shd$n (A_c_prod_stream_stream$)A_c_prod_stream$)
(declare-fun stl$n (A_c_prod_stream_stream$)A_c_prod_stream_stream$)
(declare-fun sCons$n (A_c_prod_stream$ A_c_prod_stream_stream$ )A_c_prod_stream_stream$)
(declare-fun shd$o (A_b_prod_stream_stream$)A_b_prod_stream$)
(declare-fun stl$o (A_b_prod_stream_stream$)A_b_prod_stream_stream$)
(declare-fun sCons$o (A_b_prod_stream$ A_b_prod_stream_stream$ )A_b_prod_stream_stream$)
(declare-fun shd$p (A_a_prod_stream_stream$)A_a_prod_stream$)
(declare-fun stl$p (A_a_prod_stream_stream$)A_a_prod_stream_stream$)
(declare-fun sCons$p (A_a_prod_stream$ A_a_prod_stream_stream$ )A_a_prod_stream_stream$)
(declare-fun shd$q (C_stream_stream$)C_stream$)
(declare-fun stl$q (C_stream_stream$)C_stream_stream$)
(declare-fun sCons$q (C_stream$ C_stream_stream$ )C_stream_stream$)
(declare-datatypes ()((B_c_prod$ (pair$e (fst$e B$ )(snd$e C$ )))))
(declare-sort B_c_prod_stream$ 0)
(declare-fun shd$r (B_c_prod_stream$)B_c_prod$)
(declare-fun stl$r (B_c_prod_stream$)B_c_prod_stream$)
(declare-fun sCons$r (B_c_prod$ B_c_prod_stream$ )B_c_prod_stream$)
(declare-datatypes ()((C_a_prod$ (pair$f (fst$f C$ )(snd$f A$ )))))
(declare-sort C_a_prod_stream$ 0)
(declare-fun shd$s (C_a_prod_stream$)C_a_prod$)
(declare-fun stl$s (C_a_prod_stream$)C_a_prod_stream$)
(declare-fun sCons$s (C_a_prod$ C_a_prod_stream$ )C_a_prod_stream$)
(declare-datatypes ()((C_b_prod$ (pair$g (fst$g C$ )(snd$g B$ )))))
(declare-sort C_b_prod_stream$ 0)
(declare-fun shd$t (C_b_prod_stream$)C_b_prod$)
(declare-fun stl$t (C_b_prod_stream$)C_b_prod_stream$)
(declare-fun sCons$t (C_b_prod$ C_b_prod_stream$ )C_b_prod_stream$)
(declare-datatypes ()((C_c_prod$ (pair$h (fst$h C$ )(snd$h C$ )))))
(declare-sort C_c_prod_stream$ 0)
(declare-fun shd$u (C_c_prod_stream$)C_c_prod$)
(declare-fun stl$u (C_c_prod_stream$)C_c_prod_stream$)
(declare-fun sCons$u (C_c_prod$ C_c_prod_stream$ )C_c_prod_stream$)
(declare-datatypes ()((A_b_b_prod_prod$ (pair$i (fst$i A$ )(snd$i B_b_prod$ )))))
(declare-sort A_b_b_prod_prod_stream$ 0)
(declare-fun shd$v (A_b_b_prod_prod_stream$)A_b_b_prod_prod$)
(declare-fun stl$v (A_b_b_prod_prod_stream$)A_b_b_prod_prod_stream$)
(declare-fun sCons$v (A_b_b_prod_prod$ A_b_b_prod_prod_stream$ )A_b_b_prod_prod_stream$)
(declare-fun f$ ()B_c_a_fun_fun$ )
(declare-fun n$ ()Nat$ )
(declare-fun s1$ ()B_stream$ )
(declare-fun s2$ ()C_stream$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun sset$ (B_stream_stream$ )B_stream_set$ )
(declare-fun szip$ (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun smap$a (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$b (C_a_fun$ C_stream$ )A_stream$ )
(declare-fun smap$c (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$d (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$e (C_b_fun$ C_stream$ )B_stream$ )
(declare-fun smap$f (A_c_fun$ A_stream$ )C_stream$ )
(declare-fun smap$g (B_c_fun$ B_stream$ )C_stream$ )
(declare-fun smap$h (C_c_fun$ C_stream$ )C_stream$ )
(declare-fun smap$i (B_b_prod_a_fun$ B_b_prod_stream$ )A_stream$ )
(declare-fun smap$j (A_b_b_prod_fun$ A_stream$ )B_b_prod_stream$ )
(declare-fun smap2$ (B_c_a_fun_fun$ B_stream$ C_stream$ )A_stream$ )
(declare-fun snth$a (B_stream$ Nat$ )B$ )
(declare-fun snth$b (C_stream$ Nat$ )C$ )
(declare-fun snth$c (B_b_prod_stream$ Nat$ )B_b_prod$ )
(declare-fun snth$d (B_a_prod_stream$ Nat$ )B_a_prod$ )
(declare-fun snth$e (A_c_prod_stream$ Nat$ )A_c_prod$ )
(declare-fun snth$f (A_b_prod_stream$ Nat$ )A_b_prod$ )
(declare-fun snth$g (A_a_prod_stream$ Nat$ )A_a_prod$ )
(declare-fun snth$h (B_stream_stream$ Nat$ )B_stream$ )
(declare-fun snth$i (A_stream_stream$ Nat$ )A_stream$ )
(declare-fun snth$j (B_stream_stream_stream$ Nat$ )B_stream_stream$ )
(declare-fun snth$k (A_stream_stream_stream$ Nat$ )A_stream_stream$ )
(declare-fun snth$l (B_b_prod_stream_stream$ Nat$ )B_b_prod_stream$ )
(declare-fun snth$m (B_a_prod_stream_stream$ Nat$ )B_a_prod_stream$ )
(declare-fun snth$n (A_c_prod_stream_stream$ Nat$ )A_c_prod_stream$ )
(declare-fun snth$o (A_b_prod_stream_stream$ Nat$ )A_b_prod_stream$ )
(declare-fun snth$p (A_a_prod_stream_stream$ Nat$ )A_a_prod_stream$ )
(declare-fun snth$q (C_stream_stream$ Nat$ )C_stream$ )
(declare-fun snth$r (B_c_prod_stream$ Nat$ )B_c_prod$ )
(declare-fun snth$s (C_a_prod_stream$ Nat$ )C_a_prod$ )
(declare-fun snth$t (C_b_prod_stream$ Nat$ )C_b_prod$ )
(declare-fun snth$u (C_c_prod_stream$ Nat$ )C_c_prod$ )
(declare-fun snth$v (A_b_b_prod_prod_stream$ Nat$ )A_b_b_prod_prod$ )
(declare-fun sset$a (A_stream_stream$ )A_stream_set$ )
(declare-fun sset$b (B_b_prod_stream$ )B_b_prod_set$ )
(declare-fun sset$c (B_a_prod_stream$ )B_a_prod_set$ )
(declare-fun sset$d (A_c_prod_stream$ )A_c_prod_set$ )
(declare-fun sset$e (A_b_prod_stream$ )A_b_prod_set$ )
(declare-fun sset$f (A_a_prod_stream$ )A_a_prod_set$ )
(declare-fun sset$g (A_stream$ )A_set$ )
(declare-fun sset$h (B_stream$ )B_set$ )
(declare-fun sset$i (C_stream$ )C_set$ )
(declare-fun szip$a (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun szip$b (A_stream$ C_stream$ )A_c_prod_stream$ )
(declare-fun szip$c (B_stream$ A_stream$ )B_a_prod_stream$ )
(declare-fun szip$d (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun szip$e (B_stream$ C_stream$ )B_c_prod_stream$ )
(declare-fun szip$f (C_stream$ A_stream$ )C_a_prod_stream$ )
(declare-fun szip$g (C_stream$ B_stream$ )C_b_prod_stream$ )
(declare-fun szip$h (C_stream$ C_stream$ )C_c_prod_stream$ )
(declare-fun szip$i (A_stream$ B_b_prod_stream$ )A_b_b_prod_prod_stream$ )
(declare-fun compow$ (Nat$ )B_b_prod_b_b_prod_fun_b_b_prod_b_b_prod_fun_fun$ )
(declare-fun member$ (B_stream_stream$ B_stream_stream_set$ )Bool )
(declare-fun sdrop$a (Nat$ B_stream$ )B_stream$ )
(declare-fun sdrop$b (Nat$ C_stream$ )C_stream$ )
(declare-fun smap2$a (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$b (A_a_b_fun_fun$ A_stream$ A_stream$ )B_stream$ )
(declare-fun smap2$c (A_a_c_fun_fun$ A_stream$ A_stream$ )C_stream$ )
(declare-fun smap2$d (A_b_a_fun_fun$ A_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$e (A_b_b_fun_fun$ A_stream$ B_stream$ )B_stream$ )
(declare-fun smap2$f (A_b_c_fun_fun$ A_stream$ B_stream$ )C_stream$ )
(declare-fun smap2$g (A_c_a_fun_fun$ A_stream$ C_stream$ )A_stream$ )
(declare-fun smap2$h (A_c_b_fun_fun$ A_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$i (A_c_c_fun_fun$ A_stream$ C_stream$ )C_stream$ )
(declare-fun smap2$j (B_a_a_fun_fun$ B_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$k (B_b_a_fun_fun$ B_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$l (C_a_a_fun_fun$ C_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$m (C_b_a_fun_fun$ C_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$n (C_c_a_fun_fun$ C_stream$ C_stream$ )A_stream$ )
(declare-fun smap2$o (B_b_b_fun_fun$ B_stream$ B_stream$ )B_stream$ )
(declare-fun smap2$p (B_b_c_fun_fun$ B_stream$ B_stream$ )C_stream$ )
(declare-fun smap2$q (B_c_b_fun_fun$ B_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$r (B_c_c_fun_fun$ B_stream$ C_stream$ )C_stream$ )
(declare-fun smap2$s (B_a_b_fun_fun$ B_stream$ A_stream$ )B_stream$ )
(declare-fun smap2$t (B_a_c_fun_fun$ B_stream$ A_stream$ )C_stream$ )
(declare-fun smap2$u (C_b_b_fun_fun$ C_stream$ B_stream$ )B_stream$ )
(declare-fun smerge$ (B_stream_stream_stream$ )B_stream_stream$ )
(declare-fun compow$a (Nat$ )B_a_prod_b_a_prod_fun_b_a_prod_b_a_prod_fun_fun$ )
(declare-fun compow$b (Nat$ )A_c_prod_a_c_prod_fun_a_c_prod_a_c_prod_fun_fun$ )
(declare-fun compow$c (Nat$ )A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$ )
(declare-fun compow$d (Nat$ )A_a_prod_a_a_prod_fun_a_a_prod_a_a_prod_fun_fun$ )
(declare-fun compow$e (Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun compow$f (Nat$ )B_b_fun_b_b_fun_fun$ )
(declare-fun compow$g (Nat$ )C_c_fun_c_c_fun_fun$ )
(declare-fun fun_app$ (C_a_fun$ C$ )A$ )
(declare-fun member$a (B_stream$ B_stream_set$ )Bool )
(declare-fun member$b (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$c (A_stream$ A_stream_set$ )Bool )
(declare-fun member$d (B_b_prod_stream$ B_b_prod_stream_set$ )Bool )
(declare-fun member$e (B_b_prod$ B_b_prod_set$ )Bool )
(declare-fun member$f (B_a_prod_stream$ B_a_prod_stream_set$ )Bool )
(declare-fun member$g (B_a_prod$ B_a_prod_set$ )Bool )
(declare-fun member$h (A_c_prod_stream$ A_c_prod_stream_set$ )Bool )
(declare-fun member$i (A_c_prod$ A_c_prod_set$ )Bool )
(declare-fun member$j (A_b_prod_stream$ A_b_prod_stream_set$ )Bool )
(declare-fun member$k (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun member$l (A_a_prod_stream$ A_a_prod_stream_set$ )Bool )
(declare-fun member$m (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun member$n (A$ A_set$ )Bool )
(declare-fun member$o (B$ B_set$ )Bool )
(declare-fun member$p (C_stream$ C_stream_set$ )Bool )
(declare-fun member$q (C$ C_set$ )Bool )
(declare-fun smerge$a (A_stream_stream_stream$ )A_stream_stream$ )
(declare-fun smerge$b (B_b_prod_stream_stream$ )B_b_prod_stream$ )
(declare-fun smerge$c (B_a_prod_stream_stream$ )B_a_prod_stream$ )
(declare-fun smerge$d (A_c_prod_stream_stream$ )A_c_prod_stream$ )
(declare-fun smerge$e (A_b_prod_stream_stream$ )A_b_prod_stream$ )
(declare-fun smerge$f (A_a_prod_stream_stream$ )A_a_prod_stream$ )
(declare-fun smerge$g (A_stream_stream$ )A_stream$ )
(declare-fun smerge$h (B_stream_stream$ )B_stream$ )
(declare-fun smerge$i (C_stream_stream$ )C_stream$ )
(declare-fun streams$ (B_stream_set$ )B_stream_stream_set$ )
(declare-fun fun_app$a (B_c_a_fun_fun$ B$ )C_a_fun$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$d (A_b_fun$ A$ )B$ )
(declare-fun fun_app$e (A_a_b_fun_fun$ A$ )A_b_fun$ )
(declare-fun fun_app$f (A_c_fun$ A$ )C$ )
(declare-fun fun_app$g (A_a_c_fun_fun$ A$ )A_c_fun$ )
(declare-fun fun_app$h (B_a_fun$ B$ )A$ )
(declare-fun fun_app$i (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$j (B_b_fun$ B$ )B$ )
(declare-fun fun_app$k (A_b_b_fun_fun$ A$ )B_b_fun$ )
(declare-fun fun_app$l (B_c_fun$ B$ )C$ )
(declare-fun fun_app$m (A_b_c_fun_fun$ A$ )B_c_fun$ )
(declare-fun fun_app$n (A_c_a_fun_fun$ A$ )C_a_fun$ )
(declare-fun fun_app$o (C_b_fun$ C$ )B$ )
(declare-fun fun_app$p (A_c_b_fun_fun$ A$ )C_b_fun$ )
(declare-fun fun_app$q (C_c_fun$ C$ )C$ )
(declare-fun fun_app$r (A_c_c_fun_fun$ A$ )C_c_fun$ )
(declare-fun fun_app$s (B_a_a_fun_fun$ B$ )A_a_fun$ )
(declare-fun fun_app$t (B_b_prod_bool_fun$ B_b_prod$ )Bool )
(declare-fun fun_app$u (B_a_prod_bool_fun$ B_a_prod$ )Bool )
(declare-fun fun_app$v (A_c_prod_bool_fun$ A_c_prod$ )Bool )
(declare-fun fun_app$w (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$x (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun fun_app$y (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$z (B_bool_fun$ B$ )Bool )
(declare-fun siterate$ (B_b_prod_b_b_prod_fun$ B_b_prod$ )B_b_prod_stream$ )
(declare-fun streams$a (A_stream_set$ )A_stream_stream_set$ )
(declare-fun streams$b (B_b_prod_set$ )B_b_prod_stream_set$ )
(declare-fun streams$c (B_a_prod_set$ )B_a_prod_stream_set$ )
(declare-fun streams$d (A_c_prod_set$ )A_c_prod_stream_set$ )
(declare-fun streams$e (A_b_prod_set$ )A_b_prod_stream_set$ )
(declare-fun streams$f (A_a_prod_set$ )A_a_prod_stream_set$ )
(declare-fun streams$g (A_set$ )A_stream_set$ )
(declare-fun streams$h (B_set$ )B_stream_set$ )
(declare-fun streams$i (C_set$ )C_stream_set$ )
(declare-fun fun_app$aa (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$ab (B_b_prod_a_fun$ B_b_prod$ )A$ )
(declare-fun fun_app$ac (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$ad (C_a_a_fun_fun$ C$ )A_a_fun$ )
(declare-fun fun_app$ae (C_b_a_fun_fun$ C$ )B_a_fun$ )
(declare-fun fun_app$af (C_c_a_fun_fun$ C$ )C_a_fun$ )
(declare-fun fun_app$ag (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun fun_app$ah (B_b_c_fun_fun$ B$ )B_c_fun$ )
(declare-fun fun_app$ai (B_c_b_fun_fun$ B$ )C_b_fun$ )
(declare-fun fun_app$aj (B_c_c_fun_fun$ B$ )C_c_fun$ )
(declare-fun fun_app$ak (B_a_b_fun_fun$ B$ )A_b_fun$ )
(declare-fun fun_app$al (B_a_c_fun_fun$ B$ )A_c_fun$ )
(declare-fun fun_app$am (C_b_b_fun_fun$ C$ )B_b_fun$ )
(declare-fun fun_app$an (A_b_b_prod_fun$ A$ )B_b_prod$ )
(declare-fun fun_app$ao (B_b_prod_b_b_prod_fun$ B_b_prod$ )B_b_prod$ )
(declare-fun fun_app$ap (B_b_prod_b_b_prod_fun_b_b_prod_b_b_prod_fun_fun$ B_b_prod_b_b_prod_fun$ )B_b_prod_b_b_prod_fun$ )
(declare-fun fun_app$aq (B_a_prod_b_a_prod_fun$ B_a_prod$ )B_a_prod$ )
(declare-fun fun_app$ar (B_a_prod_b_a_prod_fun_b_a_prod_b_a_prod_fun_fun$ B_a_prod_b_a_prod_fun$ )B_a_prod_b_a_prod_fun$ )
(declare-fun fun_app$as (A_c_prod_a_c_prod_fun$ A_c_prod$ )A_c_prod$ )
(declare-fun fun_app$at (A_c_prod_a_c_prod_fun_a_c_prod_a_c_prod_fun_fun$ A_c_prod_a_c_prod_fun$ )A_c_prod_a_c_prod_fun$ )
(declare-fun fun_app$au (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$av (A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$ A_b_prod_a_b_prod_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun fun_app$aw (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod$ )
(declare-fun fun_app$ax (A_a_prod_a_a_prod_fun_a_a_prod_a_a_prod_fun_fun$ A_a_prod_a_a_prod_fun$ )A_a_prod_a_a_prod_fun$ )
(declare-fun fun_app$ay (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$az (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$ba (C_c_fun_c_c_fun_fun$ C_c_fun$ )C_c_fun$ )
(declare-fun siterate$a (B_a_prod_b_a_prod_fun$ B_a_prod$ )B_a_prod_stream$ )
(declare-fun siterate$b (A_c_prod_a_c_prod_fun$ A_c_prod$ )A_c_prod_stream$ )
(declare-fun siterate$c (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_stream$ )
(declare-fun siterate$d (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod_stream$ )
(declare-fun siterate$e (A_a_fun$ A$ )A_stream$ )
(declare-fun siterate$f (B_b_fun$ B$ )B_stream$ )
(declare-fun siterate$g (C_c_fun$ C$ )C_stream$ )
(declare-fun stream_all$ (B_b_prod_bool_fun$ B_b_prod_stream$ )Bool )
(declare-fun stream_all$a (B_a_prod_bool_fun$ B_a_prod_stream$ )Bool )
(declare-fun stream_all$b (A_c_prod_bool_fun$ A_c_prod_stream$ )Bool )
(declare-fun stream_all$c (A_b_prod_bool_fun$ A_b_prod_stream$ )Bool )
(declare-fun stream_all$d (A_a_prod_bool_fun$ A_a_prod_stream$ )Bool )
(declare-fun stream_all$e (A_bool_fun$ A_stream$ )Bool )
(declare-fun stream_all$f (B_bool_fun$ B_stream$ )Bool )
(declare-fun stream_all$g (C_bool_fun$ C_stream$ )Bool )
(assert (! (not (= (snth$ (smap2$ f$ s1$ s2$ )n$ )(fun_app$ (fun_app$a f$ (snth$a s1$ n$ ))(snth$b s2$ n$ )))):named a0 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (= (smap2$a ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$b (fun_app$c ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a1 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 B_stream$ ))(= (= (smap2$b ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$d (fun_app$e ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a2 ))
(assert (! (forall ((?v0 A_a_c_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 C_stream$ ))(= (= (smap2$c ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$f (fun_app$g ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$b ?v3 ?v4 ))))):named a3 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ )(?v3 A_stream$ ))(= (= (smap2$d ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$h (fun_app$i ?v0 (snth$ ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a4 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ )(?v3 B_stream$ ))(= (= (smap2$e ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$j (fun_app$k ?v0 (snth$ ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a5 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ )(?v3 C_stream$ ))(= (= (smap2$f ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$l (fun_app$m ?v0 (snth$ ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$b ?v3 ?v4 ))))):named a6 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ )(?v3 A_stream$ ))(= (= (smap2$g ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$ (fun_app$n ?v0 (snth$ ?v1 ?v4 ))(snth$b ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a7 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ )(?v3 B_stream$ ))(= (= (smap2$h ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$o (fun_app$p ?v0 (snth$ ?v1 ?v4 ))(snth$b ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a8 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ )(?v3 C_stream$ ))(= (= (smap2$i ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$q (fun_app$r ?v0 (snth$ ?v1 ?v4 ))(snth$b ?v2 ?v4 ))(snth$b ?v3 ?v4 ))))):named a9 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_stream$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (= (smap2$j ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$b (fun_app$s ?v0 (snth$a ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a10 ))
(assert (! (forall ((?v0 B_b_prod_bool_fun$ )(?v1 B_b_prod_stream$ ))(= (stream_all$ ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$t ?v0 (snth$c ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 B_a_prod_bool_fun$ )(?v1 B_a_prod_stream$ ))(= (stream_all$a ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$u ?v0 (snth$d ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_c_prod_bool_fun$ )(?v1 A_c_prod_stream$ ))(= (stream_all$b ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$v ?v0 (snth$e ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod_stream$ ))(= (stream_all$c ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$w ?v0 (snth$f ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_stream$ ))(= (stream_all$d ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$x ?v0 (snth$g ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (stream_all$e ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$y ?v0 (snth$ ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_stream$ ))(= (stream_all$f ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$z ?v0 (snth$a ?v1 ?v2 ))))):named a17 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_stream$ ))(= (stream_all$g ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$aa ?v0 (snth$b ?v1 ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$ (smap$ ?v0 ?v1 )?v2 )(fun_app$b ?v0 (snth$ ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$ (smap$a ?v0 ?v1 )?v2 )(fun_app$h ?v0 (snth$a ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$ (smap$b ?v0 ?v1 )?v2 )(fun_app$ ?v0 (snth$b ?v1 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$a (smap$c ?v0 ?v1 )?v2 )(fun_app$d ?v0 (snth$ ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$a (smap$d ?v0 ?v1 )?v2 )(fun_app$j ?v0 (snth$a ?v1 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$a (smap$e ?v0 ?v1 )?v2 )(fun_app$o ?v0 (snth$b ?v1 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$b (smap$f ?v0 ?v1 )?v2 )(fun_app$f ?v0 (snth$ ?v1 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$b (smap$g ?v0 ?v1 )?v2 )(fun_app$l ?v0 (snth$a ?v1 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$b (smap$h ?v0 ?v1 )?v2 )(fun_app$q ?v0 (snth$b ?v1 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 B_b_prod_a_fun$ )(?v1 B_b_prod_stream$ )(?v2 Nat$ ))(= (snth$ (smap$i ?v0 ?v1 )?v2 )(fun_app$ab ?v0 (snth$c ?v1 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(= (member$ ?v0 (streams$ ?v1 ))(forall ((?v2 Nat$ ))(member$a (snth$h ?v0 ?v2 )?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(= (member$b ?v0 (streams$a ?v1 ))(forall ((?v2 Nat$ ))(member$c (snth$i ?v0 ?v2 )?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ ))(= (member$d ?v0 (streams$b ?v1 ))(forall ((?v2 Nat$ ))(member$e (snth$c ?v0 ?v2 )?v1 )))):named a31 ))
(assert (! (forall ((?v0 B_a_prod_stream$ )(?v1 B_a_prod_set$ ))(= (member$f ?v0 (streams$c ?v1 ))(forall ((?v2 Nat$ ))(member$g (snth$d ?v0 ?v2 )?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_c_prod_stream$ )(?v1 A_c_prod_set$ ))(= (member$h ?v0 (streams$d ?v1 ))(forall ((?v2 Nat$ ))(member$i (snth$e ?v0 ?v2 )?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_set$ ))(= (member$j ?v0 (streams$e ?v1 ))(forall ((?v2 Nat$ ))(member$k (snth$f ?v0 ?v2 )?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(= (member$l ?v0 (streams$f ?v1 ))(forall ((?v2 Nat$ ))(member$m (snth$g ?v0 ?v2 )?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(= (member$c ?v0 (streams$g ?v1 ))(forall ((?v2 Nat$ ))(member$n (snth$ ?v0 ?v2 )?v1 )))):named a36 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(= (member$a ?v0 (streams$h ?v1 ))(forall ((?v2 Nat$ ))(member$o (snth$a ?v0 ?v2 )?v1 )))):named a37 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(= (member$p ?v0 (streams$i ?v1 ))(forall ((?v2 Nat$ ))(member$q (snth$b ?v0 ?v2 )?v1 )))):named a38 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ )(?v2 Nat$ ))(=> (member$ ?v0 (streams$ ?v1 ))(member$a (snth$h ?v0 ?v2 )?v1 ))):named a39 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 Nat$ ))(=> (member$b ?v0 (streams$a ?v1 ))(member$c (snth$i ?v0 ?v2 )?v1 ))):named a40 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ )(?v2 Nat$ ))(=> (member$d ?v0 (streams$b ?v1 ))(member$e (snth$c ?v0 ?v2 )?v1 ))):named a41 ))
(assert (! (forall ((?v0 B_a_prod_stream$ )(?v1 B_a_prod_set$ )(?v2 Nat$ ))(=> (member$f ?v0 (streams$c ?v1 ))(member$g (snth$d ?v0 ?v2 )?v1 ))):named a42 ))
(assert (! (forall ((?v0 A_c_prod_stream$ )(?v1 A_c_prod_set$ )(?v2 Nat$ ))(=> (member$h ?v0 (streams$d ?v1 ))(member$i (snth$e ?v0 ?v2 )?v1 ))):named a43 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_set$ )(?v2 Nat$ ))(=> (member$j ?v0 (streams$e ?v1 ))(member$k (snth$f ?v0 ?v2 )?v1 ))):named a44 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ )(?v2 Nat$ ))(=> (member$l ?v0 (streams$f ?v1 ))(member$m (snth$g ?v0 ?v2 )?v1 ))):named a45 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (member$c ?v0 (streams$g ?v1 ))(member$n (snth$ ?v0 ?v2 )?v1 ))):named a46 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ )(?v2 Nat$ ))(=> (member$a ?v0 (streams$h ?v1 ))(member$o (snth$a ?v0 ?v2 )?v1 ))):named a47 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ )(?v2 Nat$ ))(=> (member$p ?v0 (streams$i ?v1 ))(member$q (snth$b ?v0 ?v2 )?v1 ))):named a48 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (shd$ (smap2$ ?v0 ?v1 ?v2 ))(fun_app$ (fun_app$a ?v0 (shd$a ?v1 ))(shd$b ?v2 )))):named a49 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$a ?v0 ?v1 ?v2 ))(fun_app$b (fun_app$c ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a50 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (shd$ (smap2$d ?v0 ?v1 ?v2 ))(fun_app$h (fun_app$i ?v0 (shd$ ?v1 ))(shd$a ?v2 )))):named a51 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (shd$ (smap2$g ?v0 ?v1 ?v2 ))(fun_app$ (fun_app$n ?v0 (shd$ ?v1 ))(shd$b ?v2 )))):named a52 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$j ?v0 ?v1 ?v2 ))(fun_app$b (fun_app$s ?v0 (shd$a ?v1 ))(shd$ ?v2 )))):named a53 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (shd$ (smap2$k ?v0 ?v1 ?v2 ))(fun_app$h (fun_app$ac ?v0 (shd$a ?v1 ))(shd$a ?v2 )))):named a54 ))
(assert (! (forall ((?v0 C_a_a_fun_fun$ )(?v1 C_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$l ?v0 ?v1 ?v2 ))(fun_app$b (fun_app$ad ?v0 (shd$b ?v1 ))(shd$ ?v2 )))):named a55 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (shd$ (smap2$m ?v0 ?v1 ?v2 ))(fun_app$h (fun_app$ae ?v0 (shd$b ?v1 ))(shd$a ?v2 )))):named a56 ))
(assert (! (forall ((?v0 C_c_a_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (shd$ (smap2$n ?v0 ?v1 ?v2 ))(fun_app$ (fun_app$af ?v0 (shd$b ?v1 ))(shd$b ?v2 )))):named a57 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$a (smap2$b ?v0 ?v1 ?v2 ))(fun_app$d (fun_app$e ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a58 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 C$ )(?v4 C_stream$ ))(! (= (smap2$ ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))(sCons$ (fun_app$ (fun_app$a ?v0 ?v1 )?v3 )(smap2$ ?v0 ?v2 ?v4 ))):pattern ((smap2$ ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))))):named a59 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 B$ )(?v4 B_stream$ ))(! (= (smap2$o ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$a (fun_app$j (fun_app$ag ?v0 ?v1 )?v3 )(smap2$o ?v0 ?v2 ?v4 ))):pattern ((smap2$o ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a60 ))
(assert (! (forall ((?v0 B_b_c_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 B$ )(?v4 B_stream$ ))(! (= (smap2$p ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$b (fun_app$l (fun_app$ah ?v0 ?v1 )?v3 )(smap2$p ?v0 ?v2 ?v4 ))):pattern ((smap2$p ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a61 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 B$ )(?v4 B_stream$ ))(! (= (smap2$k ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$ (fun_app$h (fun_app$ac ?v0 ?v1 )?v3 )(smap2$k ?v0 ?v2 ?v4 ))):pattern ((smap2$k ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a62 ))
(assert (! (forall ((?v0 B_c_b_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 C$ )(?v4 C_stream$ ))(! (= (smap2$q ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))(sCons$a (fun_app$o (fun_app$ai ?v0 ?v1 )?v3 )(smap2$q ?v0 ?v2 ?v4 ))):pattern ((smap2$q ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))))):named a63 ))
(assert (! (forall ((?v0 B_c_c_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 C$ )(?v4 C_stream$ ))(! (= (smap2$r ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))(sCons$b (fun_app$q (fun_app$aj ?v0 ?v1 )?v3 )(smap2$r ?v0 ?v2 ?v4 ))):pattern ((smap2$r ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))))):named a64 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$s ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$a (fun_app$d (fun_app$ak ?v0 ?v1 )?v3 )(smap2$s ?v0 ?v2 ?v4 ))):pattern ((smap2$s ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a65 ))
(assert (! (forall ((?v0 B_a_c_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$t ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$b (fun_app$f (fun_app$al ?v0 ?v1 )?v3 )(smap2$t ?v0 ?v2 ?v4 ))):pattern ((smap2$t ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a66 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$j ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$ (fun_app$b (fun_app$s ?v0 ?v1 )?v3 )(smap2$j ?v0 ?v2 ?v4 ))):pattern ((smap2$j ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a67 ))
(assert (! (forall ((?v0 C_b_b_fun_fun$ )(?v1 C$ )(?v2 C_stream$ )(?v3 B$ )(?v4 B_stream$ ))(! (= (smap2$u ?v0 (sCons$b ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$a (fun_app$j (fun_app$am ?v0 ?v1 )?v3 )(smap2$u ?v0 ?v2 ?v4 ))):pattern ((smap2$u ?v0 (sCons$b ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a68 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (stl$ (smap2$ ?v0 ?v1 ?v2 ))(smap2$ ?v0 (stl$a ?v1 )(stl$b ?v2 )))):named a69 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$ (smap2$a ?v0 ?v1 ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a70 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (stl$ (smap2$d ?v0 ?v1 ?v2 ))(smap2$d ?v0 (stl$ ?v1 )(stl$a ?v2 )))):named a71 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (stl$ (smap2$g ?v0 ?v1 ?v2 ))(smap2$g ?v0 (stl$ ?v1 )(stl$b ?v2 )))):named a72 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (stl$ (smap2$j ?v0 ?v1 ?v2 ))(smap2$j ?v0 (stl$a ?v1 )(stl$ ?v2 )))):named a73 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (stl$ (smap2$k ?v0 ?v1 ?v2 ))(smap2$k ?v0 (stl$a ?v1 )(stl$a ?v2 )))):named a74 ))
(assert (! (forall ((?v0 C_a_a_fun_fun$ )(?v1 C_stream$ )(?v2 A_stream$ ))(= (stl$ (smap2$l ?v0 ?v1 ?v2 ))(smap2$l ?v0 (stl$b ?v1 )(stl$ ?v2 )))):named a75 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (stl$ (smap2$m ?v0 ?v1 ?v2 ))(smap2$m ?v0 (stl$b ?v1 )(stl$a ?v2 )))):named a76 ))
(assert (! (forall ((?v0 C_c_a_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (stl$ (smap2$n ?v0 ?v1 ?v2 ))(smap2$n ?v0 (stl$b ?v1 )(stl$b ?v2 )))):named a77 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$a (smap2$b ?v0 ?v1 ?v2 ))(smap2$b ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a78 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 Nat$ ))(member$a (snth$h ?v0 ?v1 )(sset$ ?v0 ))):named a79 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 Nat$ ))(member$c (snth$i ?v0 ?v1 )(sset$a ?v0 ))):named a80 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 Nat$ ))(member$e (snth$c ?v0 ?v1 )(sset$b ?v0 ))):named a81 ))
(assert (! (forall ((?v0 B_a_prod_stream$ )(?v1 Nat$ ))(member$g (snth$d ?v0 ?v1 )(sset$c ?v0 ))):named a82 ))
(assert (! (forall ((?v0 A_c_prod_stream$ )(?v1 Nat$ ))(member$i (snth$e ?v0 ?v1 )(sset$d ?v0 ))):named a83 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 Nat$ ))(member$k (snth$f ?v0 ?v1 )(sset$e ?v0 ))):named a84 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 Nat$ ))(member$m (snth$g ?v0 ?v1 )(sset$f ?v0 ))):named a85 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(member$n (snth$ ?v0 ?v1 )(sset$g ?v0 ))):named a86 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 Nat$ ))(member$o (snth$a ?v0 ?v1 )(sset$h ?v0 ))):named a87 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 Nat$ ))(member$q (snth$b ?v0 ?v1 )(sset$i ?v0 ))):named a88 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (smap$ ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$b ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 ))))):named a89 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (= (smap$c ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$d ?v0 (snth$ ?v1 ?v3 ))(snth$a ?v2 ?v3 ))))):named a90 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (= (smap$f ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$f ?v0 (snth$ ?v1 ?v3 ))(snth$b ?v2 ?v3 ))))):named a91 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (= (smap$a ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$h ?v0 (snth$a ?v1 ?v3 ))(snth$ ?v2 ?v3 ))))):named a92 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (= (smap$d ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$j ?v0 (snth$a ?v1 ?v3 ))(snth$a ?v2 ?v3 ))))):named a93 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (= (smap$g ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$l ?v0 (snth$a ?v1 ?v3 ))(snth$b ?v2 ?v3 ))))):named a94 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ )(?v2 A_stream$ ))(= (= (smap$b ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$ ?v0 (snth$b ?v1 ?v3 ))(snth$ ?v2 ?v3 ))))):named a95 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (= (smap$e ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$o ?v0 (snth$b ?v1 ?v3 ))(snth$a ?v2 ?v3 ))))):named a96 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (= (smap$h ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$q ?v0 (snth$b ?v1 ?v3 ))(snth$b ?v2 ?v3 ))))):named a97 ))
(assert (! (forall ((?v0 A_b_b_prod_fun$ )(?v1 A_stream$ )(?v2 B_b_prod_stream$ ))(= (= (smap$j ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$an ?v0 (snth$ ?v1 ?v3 ))(snth$c ?v2 ?v3 ))))):named a98 ))
(assert (! (forall ((?v0 B_stream_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$a (snth$h (snth$j ?v0 ?v1 )?v2 )(sset$ (smerge$ ?v0 )))):named a99 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$c (snth$i (snth$k ?v0 ?v1 )?v2 )(sset$a (smerge$a ?v0 )))):named a100 ))
(assert (! (forall ((?v0 B_b_prod_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$e (snth$c (snth$l ?v0 ?v1 )?v2 )(sset$b (smerge$b ?v0 )))):named a101 ))
(assert (! (forall ((?v0 B_a_prod_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$g (snth$d (snth$m ?v0 ?v1 )?v2 )(sset$c (smerge$c ?v0 )))):named a102 ))
(assert (! (forall ((?v0 A_c_prod_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$i (snth$e (snth$n ?v0 ?v1 )?v2 )(sset$d (smerge$d ?v0 )))):named a103 ))
(assert (! (forall ((?v0 A_b_prod_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$k (snth$f (snth$o ?v0 ?v1 )?v2 )(sset$e (smerge$e ?v0 )))):named a104 ))
(assert (! (forall ((?v0 A_a_prod_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$m (snth$g (snth$p ?v0 ?v1 )?v2 )(sset$f (smerge$f ?v0 )))):named a105 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$n (snth$ (snth$i ?v0 ?v1 )?v2 )(sset$g (smerge$g ?v0 )))):named a106 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$o (snth$a (snth$h ?v0 ?v1 )?v2 )(sset$h (smerge$h ?v0 )))):named a107 ))
(assert (! (forall ((?v0 C_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$q (snth$b (snth$q ?v0 ?v1 )?v2 )(sset$i (smerge$i ?v0 )))):named a108 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$g (szip$ ?v0 ?v1 )?v2 )(pair$d (snth$ ?v0 ?v2 )(snth$ ?v1 ?v2 )))):named a109 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$f (szip$a ?v0 ?v1 )?v2 )(pair$c (snth$ ?v0 ?v2 )(snth$a ?v1 ?v2 )))):named a110 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$e (szip$b ?v0 ?v1 )?v2 )(pair$b (snth$ ?v0 ?v2 )(snth$b ?v1 ?v2 )))):named a111 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$d (szip$c ?v0 ?v1 )?v2 )(pair$a (snth$a ?v0 ?v2 )(snth$ ?v1 ?v2 )))):named a112 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$c (szip$d ?v0 ?v1 )?v2 )(pair$ (snth$a ?v0 ?v2 )(snth$a ?v1 ?v2 )))):named a113 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$r (szip$e ?v0 ?v1 )?v2 )(pair$e (snth$a ?v0 ?v2 )(snth$b ?v1 ?v2 )))):named a114 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$s (szip$f ?v0 ?v1 )?v2 )(pair$f (snth$b ?v0 ?v2 )(snth$ ?v1 ?v2 )))):named a115 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$t (szip$g ?v0 ?v1 )?v2 )(pair$g (snth$b ?v0 ?v2 )(snth$a ?v1 ?v2 )))):named a116 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$u (szip$h ?v0 ?v1 )?v2 )(pair$h (snth$b ?v0 ?v2 )(snth$b ?v1 ?v2 )))):named a117 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_b_prod_stream$ )(?v2 Nat$ ))(= (snth$v (szip$i ?v0 ?v1 )?v2 )(pair$i (snth$ ?v0 ?v2 )(snth$c ?v1 ?v2 )))):named a118 ))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$ )(?v1 B_b_prod$ )(?v2 Nat$ ))(= (snth$c (siterate$ ?v0 ?v1 )?v2 )(fun_app$ao (fun_app$ap (compow$ ?v2 )?v0 )?v1 ))):named a119 ))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$ )(?v1 B_a_prod$ )(?v2 Nat$ ))(= (snth$d (siterate$a ?v0 ?v1 )?v2 )(fun_app$aq (fun_app$ar (compow$a ?v2 )?v0 )?v1 ))):named a120 ))
(assert (! (forall ((?v0 A_c_prod_a_c_prod_fun$ )(?v1 A_c_prod$ )(?v2 Nat$ ))(= (snth$e (siterate$b ?v0 ?v1 )?v2 )(fun_app$as (fun_app$at (compow$b ?v2 )?v0 )?v1 ))):named a121 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ )(?v2 Nat$ ))(= (snth$f (siterate$c ?v0 ?v1 )?v2 )(fun_app$au (fun_app$av (compow$c ?v2 )?v0 )?v1 ))):named a122 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod$ )(?v2 Nat$ ))(= (snth$g (siterate$d ?v0 ?v1 )?v2 )(fun_app$aw (fun_app$ax (compow$d ?v2 )?v0 )?v1 ))):named a123 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 Nat$ ))(= (snth$ (siterate$e ?v0 ?v1 )?v2 )(fun_app$b (fun_app$ay (compow$e ?v2 )?v0 )?v1 ))):named a124 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 Nat$ ))(= (snth$a (siterate$f ?v0 ?v1 )?v2 )(fun_app$j (fun_app$az (compow$f ?v2 )?v0 )?v1 ))):named a125 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ )(?v2 Nat$ ))(= (snth$b (siterate$g ?v0 ?v1 )?v2 )(fun_app$q (fun_app$ba (compow$g ?v2 )?v0 )?v1 ))):named a126 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a127 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a128 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a129 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ ))(= (stl$ (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$b ?v1 )))):named a130 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ ))(= (stl$a (smap$e ?v0 ?v1 ))(smap$e ?v0 (stl$b ?v1 )))):named a131 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ ))(= (stl$b (smap$g ?v0 ?v1 ))(smap$g ?v0 (stl$a ?v1 )))):named a132 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ ))(= (stl$b (smap$h ?v0 ?v1 ))(smap$h ?v0 (stl$b ?v1 )))):named a133 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (stl$a (smap$d ?v0 ?v1 ))(smap$d ?v0 (stl$a ?v1 )))):named a134 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (stl$ (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$a ?v1 )))):named a135 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_stream$ ))(= (stl$b (smap$f ?v0 ?v1 ))(smap$f ?v0 (stl$ ?v1 )))):named a136 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (stl$a (smap$c ?v0 ?v1 ))(smap$c ?v0 (stl$ ?v1 )))):named a137 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$ ?v1 )))):named a138 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ ))(= (shd$ (smap$b ?v0 ?v1 ))(fun_app$ ?v0 (shd$b ?v1 )))):named a139 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ ))(= (shd$a (smap$e ?v0 ?v1 ))(fun_app$o ?v0 (shd$b ?v1 )))):named a140 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ ))(= (shd$b (smap$g ?v0 ?v1 ))(fun_app$l ?v0 (shd$a ?v1 )))):named a141 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ ))(= (shd$b (smap$h ?v0 ?v1 ))(fun_app$q ?v0 (shd$b ?v1 )))):named a142 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (shd$a (smap$d ?v0 ?v1 ))(fun_app$j ?v0 (shd$a ?v1 )))):named a143 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (shd$ (smap$a ?v0 ?v1 ))(fun_app$h ?v0 (shd$a ?v1 )))):named a144 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_stream$ ))(= (shd$b (smap$f ?v0 ?v1 ))(fun_app$f ?v0 (shd$ ?v1 )))):named a145 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (shd$a (smap$c ?v0 ?v1 ))(fun_app$d ?v0 (shd$ ?v1 )))):named a146 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$b ?v0 (shd$ ?v1 )))):named a147 ))
(assert (! (forall ((?v0 B_stream$ ))(= (sCons$a (shd$a ?v0 )(stl$a ?v0 ))?v0 )):named a148 ))
(assert (! (forall ((?v0 C_stream$ ))(= (sCons$b (shd$b ?v0 )(stl$b ?v0 ))?v0 )):named a149 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a150 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$e ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$o ?v0 (shd$b ?v1 ))?v2 )(= (smap$e ?v0 (stl$b ?v1 ))?v3 )))):named a151 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$d ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$j ?v0 (shd$a ?v1 ))?v2 )(= (smap$d ?v0 (stl$a ?v1 ))?v3 )))):named a152 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$c ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$d ?v0 (shd$ ?v1 ))?v2 )(= (smap$c ?v0 (stl$ ?v1 ))?v3 )))):named a153 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (smap$g ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= (fun_app$l ?v0 (shd$a ?v1 ))?v2 )(= (smap$g ?v0 (stl$a ?v1 ))?v3 )))):named a154 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (smap$h ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= (fun_app$q ?v0 (shd$b ?v1 ))?v2 )(= (smap$h ?v0 (stl$b ?v1 ))?v3 )))):named a155 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (smap$f ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= (fun_app$f ?v0 (shd$ ?v1 ))?v2 )(= (smap$f ?v0 (stl$ ?v1 ))?v3 )))):named a156 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$b ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$ ?v0 (shd$b ?v1 ))?v2 )(= (smap$b ?v0 (stl$b ?v1 ))?v3 )))):named a157 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$a ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$h ?v0 (shd$a ?v1 ))?v2 )(= (smap$a ?v0 (stl$a ?v1 ))?v3 )))):named a158 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$b ?v0 (shd$ ?v1 ))?v2 )(= (smap$ ?v0 (stl$ ?v1 ))?v3 )))):named a159 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ )(?v2 B_stream_set$ ))(= (member$ (sCons$h ?v0 ?v1 )(streams$ ?v2 ))(and (member$a ?v0 ?v2 )(member$ ?v1 (streams$ ?v2 ))))):named a160 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_set$ ))(= (member$b (sCons$i ?v0 ?v1 )(streams$a ?v2 ))(and (member$c ?v0 ?v2 )(member$b ?v1 (streams$a ?v2 ))))):named a161 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B_set$ ))(= (member$a (sCons$a ?v0 ?v1 )(streams$h ?v2 ))(and (member$o ?v0 ?v2 )(member$a ?v1 (streams$h ?v2 ))))):named a162 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ )(?v2 C_set$ ))(= (member$p (sCons$b ?v0 ?v1 )(streams$i ?v2 ))(and (member$q ?v0 ?v2 )(member$p ?v1 (streams$i ?v2 ))))):named a163 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_set$ ))(= (member$c (sCons$ ?v0 ?v1 )(streams$g ?v2 ))(and (member$n ?v0 ?v2 )(member$c ?v1 (streams$g ?v2 ))))):named a164 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (szip$d (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$c (pair$ ?v0 ?v2 )(szip$d ?v1 ?v3 ))):pattern ((szip$d (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a165 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 C$ )(?v3 C_stream$ ))(! (= (szip$e (sCons$a ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$r (pair$e ?v0 ?v2 )(szip$e ?v1 ?v3 ))):pattern ((szip$e (sCons$a ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a166 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (szip$c (sCons$a ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$d (pair$a ?v0 ?v2 )(szip$c ?v1 ?v3 ))):pattern ((szip$c (sCons$a ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a167 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (szip$g (sCons$b ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$t (pair$g ?v0 ?v2 )(szip$g ?v1 ?v3 ))):pattern ((szip$g (sCons$b ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a168 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ )(?v2 C$ )(?v3 C_stream$ ))(! (= (szip$h (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$u (pair$h ?v0 ?v2 )(szip$h ?v1 ?v3 ))):pattern ((szip$h (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a169 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (szip$f (sCons$b ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$s (pair$f ?v0 ?v2 )(szip$f ?v1 ?v3 ))):pattern ((szip$f (sCons$b ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a170 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (szip$a (sCons$ ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$f (pair$c ?v0 ?v2 )(szip$a ?v1 ?v3 ))):pattern ((szip$a (sCons$ ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a171 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 C$ )(?v3 C_stream$ ))(! (= (szip$b (sCons$ ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$e (pair$b ?v0 ?v2 )(szip$b ?v1 ?v3 ))):pattern ((szip$b (sCons$ ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a172 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (szip$ (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$g (pair$d ?v0 ?v2 )(szip$ ?v1 ?v3 ))):pattern ((szip$ (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a173 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (szip$ ?v0 ?v1 )(sCons$g (pair$d (shd$ ?v0 )(shd$ ?v1 ))(szip$ (stl$ ?v0 )(stl$ ?v1 ))))):named a174 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_stream$ ))(= (szip$a ?v0 ?v1 )(sCons$f (pair$c (shd$ ?v0 )(shd$a ?v1 ))(szip$a (stl$ ?v0 )(stl$a ?v1 ))))):named a175 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 C_stream$ ))(= (szip$b ?v0 ?v1 )(sCons$e (pair$b (shd$ ?v0 )(shd$b ?v1 ))(szip$b (stl$ ?v0 )(stl$b ?v1 ))))):named a176 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_stream$ ))(= (szip$c ?v0 ?v1 )(sCons$d (pair$a (shd$a ?v0 )(shd$ ?v1 ))(szip$c (stl$a ?v0 )(stl$ ?v1 ))))):named a177 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (szip$d ?v0 ?v1 )(sCons$c (pair$ (shd$a ?v0 )(shd$a ?v1 ))(szip$d (stl$a ?v0 )(stl$a ?v1 ))))):named a178 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 C_stream$ ))(= (szip$e ?v0 ?v1 )(sCons$r (pair$e (shd$a ?v0 )(shd$b ?v1 ))(szip$e (stl$a ?v0 )(stl$b ?v1 ))))):named a179 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 A_stream$ ))(= (szip$f ?v0 ?v1 )(sCons$s (pair$f (shd$b ?v0 )(shd$ ?v1 ))(szip$f (stl$b ?v0 )(stl$ ?v1 ))))):named a180 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 B_stream$ ))(= (szip$g ?v0 ?v1 )(sCons$t (pair$g (shd$b ?v0 )(shd$a ?v1 ))(szip$g (stl$b ?v0 )(stl$a ?v1 ))))):named a181 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_stream$ ))(= (szip$h ?v0 ?v1 )(sCons$u (pair$h (shd$b ?v0 )(shd$b ?v1 ))(szip$h (stl$b ?v0 )(stl$b ?v1 ))))):named a182 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ ))(= (smap$h ?v0 (siterate$g ?v0 ?v1 ))(siterate$g ?v0 (fun_app$q ?v0 ?v1 )))):named a183 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (smap$d ?v0 (siterate$f ?v0 ?v1 ))(siterate$f ?v0 (fun_app$j ?v0 ?v1 )))):named a184 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (smap$ ?v0 (siterate$e ?v0 ?v1 ))(siterate$e ?v0 (fun_app$b ?v0 ?v1 )))):named a185 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (siterate$f ?v0 ?v1 )(sCons$a ?v1 (siterate$f ?v0 (fun_app$j ?v0 ?v1 ))))):named a186 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ ))(= (siterate$g ?v0 ?v1 )(sCons$b ?v1 (siterate$g ?v0 (fun_app$q ?v0 ?v1 ))))):named a187 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (siterate$e ?v0 ?v1 )(sCons$ ?v1 (siterate$e ?v0 (fun_app$b ?v0 ?v1 ))))):named a188 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (stream_all$f ?v0 (sCons$a ?v1 ?v2 ))(and (fun_app$z ?v0 ?v1 )(stream_all$f ?v0 ?v2 ))):pattern ((stream_all$f ?v0 (sCons$a ?v1 ?v2 ))))):named a189 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_stream$ ))(! (= (stream_all$g ?v0 (sCons$b ?v1 ?v2 ))(and (fun_app$aa ?v0 ?v1 )(stream_all$g ?v0 ?v2 ))):pattern ((stream_all$g ?v0 (sCons$b ?v1 ?v2 ))))):named a190 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (stream_all$e ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$y ?v0 ?v1 )(stream_all$e ?v0 ?v2 ))):pattern ((stream_all$e ?v0 (sCons$ ?v1 ?v2 ))))):named a191 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (smap$d ?v0 (sCons$a ?v1 ?v2 ))(sCons$a (fun_app$j ?v0 ?v1 )(smap$d ?v0 ?v2 ))):pattern ((smap$d ?v0 (sCons$a ?v1 ?v2 ))))):named a192 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (smap$g ?v0 (sCons$a ?v1 ?v2 ))(sCons$b (fun_app$l ?v0 ?v1 )(smap$g ?v0 ?v2 ))):pattern ((smap$g ?v0 (sCons$a ?v1 ?v2 ))))):named a193 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (smap$a ?v0 (sCons$a ?v1 ?v2 ))(sCons$ (fun_app$h ?v0 ?v1 )(smap$a ?v0 ?v2 ))):pattern ((smap$a ?v0 (sCons$a ?v1 ?v2 ))))):named a194 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C$ )(?v2 C_stream$ ))(! (= (smap$e ?v0 (sCons$b ?v1 ?v2 ))(sCons$a (fun_app$o ?v0 ?v1 )(smap$e ?v0 ?v2 ))):pattern ((smap$e ?v0 (sCons$b ?v1 ?v2 ))))):named a195 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ )(?v2 C_stream$ ))(! (= (smap$h ?v0 (sCons$b ?v1 ?v2 ))(sCons$b (fun_app$q ?v0 ?v1 )(smap$h ?v0 ?v2 ))):pattern ((smap$h ?v0 (sCons$b ?v1 ?v2 ))))):named a196 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C$ )(?v2 C_stream$ ))(! (= (smap$b ?v0 (sCons$b ?v1 ?v2 ))(sCons$ (fun_app$ ?v0 ?v1 )(smap$b ?v0 ?v2 ))):pattern ((smap$b ?v0 (sCons$b ?v1 ?v2 ))))):named a197 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smap$c ?v0 (sCons$ ?v1 ?v2 ))(sCons$a (fun_app$d ?v0 ?v1 )(smap$c ?v0 ?v2 ))):pattern ((smap$c ?v0 (sCons$ ?v1 ?v2 ))))):named a198 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smap$f ?v0 (sCons$ ?v1 ?v2 ))(sCons$b (fun_app$f ?v0 ?v1 )(smap$f ?v0 ?v2 ))):pattern ((smap$f ?v0 (sCons$ ?v1 ?v2 ))))):named a199 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smap$ ?v0 (sCons$ ?v1 ?v2 ))(sCons$ (fun_app$b ?v0 ?v1 )(smap$ ?v0 ?v2 ))):pattern ((smap$ ?v0 (sCons$ ?v1 ?v2 ))))):named a200 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(= (member$p ?v0 (streams$i ?v1 ))(exists ((?v2 C$ )(?v3 C_stream$ ))(and (= ?v0 (sCons$b ?v2 ?v3 ))(and (member$q ?v2 ?v1 )(member$p ?v3 (streams$i ?v1 ))))))):named a201 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(= (member$c ?v0 (streams$g ?v1 ))(exists ((?v2 A$ )(?v3 A_stream$ ))(and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$n ?v2 ?v1 )(member$c ?v3 (streams$g ?v1 ))))))):named a202 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (smap2$ ?v0 ?v1 ?v2 )(sCons$ (fun_app$ (fun_app$a ?v0 (shd$a ?v1 ))(shd$b ?v2 ))(smap2$ ?v0 (stl$a ?v1 )(stl$b ?v2 ))))):named a203 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$ (sdrop$ ?v0 ?v1 ))(snth$ ?v1 ?v0 ))):named a204 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (shd$a (sdrop$a ?v0 ?v1 ))(snth$a ?v1 ?v0 ))):named a205 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_stream$ ))(= (shd$b (sdrop$b ?v0 ?v1 ))(snth$b ?v1 ?v0 ))):named a206 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a207 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a208 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a209 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a210 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(! (= (snth$ ?v0 (suc$ ?v1 ))(snth$ (stl$ ?v0 )?v1 )):pattern ((snth$ ?v0 (suc$ ?v1 ))))):named a211 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 Nat$ ))(! (= (snth$a ?v0 (suc$ ?v1 ))(snth$a (stl$a ?v0 )?v1 )):pattern ((snth$a ?v0 (suc$ ?v1 ))))):named a212 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 Nat$ ))(! (= (snth$b ?v0 (suc$ ?v1 ))(snth$b (stl$b ?v0 )?v1 )):pattern ((snth$b ?v0 (suc$ ?v1 ))))):named a213 ))
(check-sat )
;(get-unsat-core )
