;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun n$ ()Nat$ )
(declare-fun u$ ()A_list$ )
(declare-fun map$ (A_a_fun$ A_list$ )A_list$ )
(declare-fun min$ (Nat$ Nat$ )Nat$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun take$ (Nat$ )A_list_a_list_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun cycle$ (A_list$ )A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun fun_app$ (A_list_a_list_fun$ A_list$ )A_list$ )
(assert (! (not (= (stake$ n$ (cycle$ u$ ))(fun_app$ (take$ n$ )u$ ))):named a0 ))
(assert (! (not (= u$ nil$ )):named a1 ))
(assert (! (less$ n$ (size$ u$ )):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (forall ((?v2 Nat$ ))(= (fun_app$ (take$ ?v2 )?v0 )(fun_app$ (take$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_stream$ ))(= (fun_app$ (take$ ?v0 )(stake$ ?v1 ?v2 ))(stake$ (min$ ?v0 ?v1 )?v2 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (size$ (stake$ ?v0 ?v1 ))?v0 )):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shift$ (stake$ ?v0 ?v1 )(sdrop$ ?v0 ?v1 ))?v1 )):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(! (=> (not (= ?v0 nil$ ))(= (cycle$ ?v0 )(shift$ ?v0 (cycle$ ?v0 )))):pattern ((cycle$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(= (shd$ (cycle$ ?v0 ))(hd$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (= (stake$ ?v0 ?v1 )nil$ )(= ?v0 zero$ ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_list$ ))(= (fun_app$ (take$ ?v0 )(fun_app$ (take$ ?v1 )?v2 ))(fun_app$ (take$ (min$ ?v0 ?v1 ))?v2 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (take$ ?v0 )nil$ )nil$ ):pattern ((take$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (stake$ ?v0 (smap$ ?v1 ?v2 ))(map$ ?v1 (stake$ ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (stake$ zero$ ?v0 )nil$ ):pattern ((stake$ zero$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (= (map$ ?v0 ?v1 )nil$ )(= ?v1 nil$ ))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (= (map$ ?v0 ?v1 )nil$ )(= ?v1 nil$ ))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (= nil$ (map$ ?v0 ?v1 ))(= ?v1 nil$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
