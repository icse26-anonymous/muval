;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_stream$ 0)
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-fun shd$ (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$ (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$ (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-fun shd$b (B_stream$)B$)
(declare-fun stl$b (B_stream$)B_stream$)
(declare-fun sCons$b (B$ B_stream$ )B_stream$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()B$ )
(declare-fun s1$ ()A_stream$ )
(declare-fun s2$ ()B_stream$ )
(declare-fun szip$ (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun smember$ (A$ A_stream$ )Bool )
(declare-fun fun_app$a (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$b (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun smember$a (B$ B_stream$ )Bool )
(declare-fun smember$b (A_b_prod$ A_b_prod_stream$ )Bool )
(declare-fun pred_stream$ (A_bool_fun$ A_stream$ )Bool )
(declare-fun pred_stream$a (B_bool_fun$ B_stream$ )Bool )
(declare-fun pred_stream$b (A_b_prod_bool_fun$ A_b_prod_stream$ )Bool )
(assert (! (not (= (szip$ (sCons$a a$ s1$ )(sCons$b b$ s2$ ))(sCons$ (pair$ a$ b$ )(szip$ s1$ s2$ )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a4 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (forall ((?v1 B$ )(?v2 B_stream$ ))(=> (= ?v0 (sCons$b ?v1 ?v2 ))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(=> (forall ((?v1 A_b_prod$ )(?v2 A_b_prod_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smember$ ?v0 (sCons$a ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$ ?v0 ?v2 ))):pattern ((smember$ ?v0 (sCons$a ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (smember$a ?v0 (sCons$b ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$a ?v0 ?v2 ))):pattern ((smember$a ?v0 (sCons$b ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod_stream$ ))(! (= (smember$b ?v0 (sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$b ?v0 ?v2 ))):pattern ((smember$b ?v0 (sCons$ ?v1 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (pred_stream$ ?v0 (sCons$a ?v1 ?v2 ))(and (fun_app$ ?v0 ?v1 )(pred_stream$ ?v0 ?v2 ))):pattern ((pred_stream$ ?v0 (sCons$a ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (pred_stream$a ?v0 (sCons$b ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(pred_stream$a ?v0 ?v2 ))):pattern ((pred_stream$a ?v0 (sCons$b ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_stream$ ))(! (= (pred_stream$b ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(pred_stream$b ?v0 ?v2 ))):pattern ((pred_stream$b ?v0 (sCons$ ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_b_prod$ ))(=> (forall ((?v1 A$ )(?v2 B$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_b_prod$ ))(exists ((?v1 A$ )(?v2 B$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a17 ))
(assert (! (forall ((?v0 A_b_prod$ ))(=> (forall ((?v1 A$ )(?v2 B$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a18 ))
(check-sat )
;(get-unsat-core )
