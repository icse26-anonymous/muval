;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-datatypes ()((Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun s1$ ()A_stream$ )
(declare-fun s2$ ()A_stream$ )
(declare-fun one$a ()Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun plus$a (Num$ Num$ )Num$ )
(declare-fun times$ (Nat$ Nat$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun numeral$ (Num$ )Nat$ )
(declare-fun sinterleave$ (A_stream$ A_stream$ )A_stream$ )
(assert (! (not (= (snth$ (sinterleave$ s1$ s2$ )(plus$ (times$ (numeral$ (bit0$ one$ ))n$ )one$a ))x$ )):named a0 ))
(assert (! (= x$ (snth$ s2$ n$ )):named a1 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= x$ (snth$ s2$ ?v0 ))false ))false ):named a2 ))
(assert (! (member$ x$ (sset$ s2$ )):named a3 ))
(assert (! (= (plus$ one$a one$a )(numeral$ (bit0$ one$ ))):named a4 ))
(assert (! (forall ((?v0 Num$ ))(= (plus$ (numeral$ ?v0 )one$a )(numeral$ (plus$a ?v0 one$ )))):named a5 ))
(assert (! (forall ((?v0 Num$ ))(= (plus$ one$a (numeral$ ?v0 ))(numeral$ (plus$a one$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$ ?v0 )one$a )(= ?v0 one$ ))):named a7 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$a (numeral$ ?v0 ))(= one$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Num$ ))(= (times$ (plus$ ?v0 ?v1 )(numeral$ ?v2 ))(plus$ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 Num$ )(?v1 Nat$ )(?v2 Nat$ ))(= (times$ (numeral$ ?v0 )(plus$ ?v1 ?v2 ))(plus$ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= one$a (times$ ?v0 ?v1 ))(and (= ?v0 one$a )(= ?v1 one$a )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (times$ ?v0 ?v1 )one$a )(and (= ?v0 one$a )(= ?v1 one$a )))):named a12 ))
(assert (! (= (plus$ one$a one$a )(numeral$ (bit0$ one$ ))):named a13 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a14 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a15 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(check-sat )
;(get-unsat-core )
