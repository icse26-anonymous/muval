;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort Nat_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun f$ ()A_a_fun$ )
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun plus$ (Nat$ )Nat_nat_fun$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun compow$ ()Nat_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun funpow$ ()Nat_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun fun_app$a (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$b (Nat_a_a_fun_a_a_fun_fun_fun$ Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$c (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun siterate$ (A_a_fun$ A$ )A_stream$ )
(assert (! (not (= (sdrop$ n$ (siterate$ f$ x$ ))(siterate$ f$ (fun_app$ (fun_app$a (fun_app$b compow$ n$ )f$ )x$ )))):named a0 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 Nat$ ))(= (snth$ (siterate$ ?v0 ?v1 )?v2 )(fun_app$ (fun_app$a (fun_app$b compow$ ?v2 )?v0 )?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 Nat$ )(?v2 A$ ))(= (fun_app$ ?v0 (fun_app$ (fun_app$a (fun_app$b compow$ ?v1 )?v0 )?v2 ))(fun_app$ (fun_app$a (fun_app$b compow$ ?v1 )?v0 )(fun_app$ ?v0 ?v2 )))):named a2 ))
(assert (! (= funpow$ compow$ ):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (sdrop$ ?v0 (smap$ ?v1 ?v2 ))(smap$ ?v1 (sdrop$ ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (shd$ (siterate$ ?v0 ?v1 ))?v1 )):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (stl$ (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (siterate$ ?v0 ?v1 )(sCons$ ?v1 (siterate$ ?v0 (fun_app$ ?v0 ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_stream$ ))(= (sdrop$ ?v0 (sdrop$ ?v1 ?v2 ))(sdrop$ (fun_app$c (plus$ ?v1 )?v0 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (sdrop$ zero$ ?v0 )?v0 ):pattern ((sdrop$ zero$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$ (sdrop$ ?v0 ?v1 ))(snth$ ?v1 ?v0 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shift$ (stake$ ?v0 ?v1 )(sdrop$ ?v0 ?v1 ))?v1 )):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$c (plus$ ?v0 )?v1 )zero$ )(and (= ?v0 zero$ )(= ?v1 zero$ )))):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$c (plus$ ?v0 )zero$ )?v0 ):pattern ((plus$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$ ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
