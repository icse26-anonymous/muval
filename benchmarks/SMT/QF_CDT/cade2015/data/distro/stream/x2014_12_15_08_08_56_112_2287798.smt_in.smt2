;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun x$ ()A$ )
(declare-fun s1$ ()A_stream$ )
(declare-fun s2$ ()A_stream$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun sfilter$ (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun smember$ (A$ )A_stream_bool_fun$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun streamsp$ (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun stream_all$ (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun pred_stream$ (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun sdrop_while$ (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun sinterleave$ (A_stream$ A_stream$ )A_stream$ )
(assert (! (not (= (sinterleave$ (sCons$ x$ s1$ )s2$ )(sCons$ x$ (sinterleave$ s2$ s1$ )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$ (smember$ ?v0 )(sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$ (smember$ ?v0 )?v2 ))):pattern ((fun_app$ (smember$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$ (pred_stream$ ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(fun_app$ (pred_stream$ ?v0 )?v2 ))):pattern ((fun_app$ (pred_stream$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$ (stream_all$ ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(fun_app$ (stream_all$ ?v0 )?v2 ))):pattern ((fun_app$ (stream_all$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$ (streamsp$ ?v0 )?v1 )(exists ((?v2 A$ )(?v3 A_stream$ ))(and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$a ?v0 ?v2 )(fun_app$ (streamsp$ ?v0 )?v3 )))))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(=> (and (fun_app$ (streamsp$ ?v0 )?v1 )(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$a ?v0 ?v2 )(fun_app$ (streamsp$ ?v0 )?v3 )))false )))false )):named a7 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$ ?v0 ?v3 )(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v3 (sCons$ ?v4 ?v5 ))(and (fun_app$a ?v2 ?v4 )(or (fun_app$ ?v0 ?v5 )(fun_app$ (streamsp$ ?v2 )?v5 ))))))))(fun_app$ (streamsp$ ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (sfilter$ ?v0 (sCons$ ?v1 ?v2 ))(ite (fun_app$a ?v0 ?v1 )(sCons$ ?v1 (sfilter$ ?v0 ?v2 ))(sfilter$ ?v0 ?v2 ))):pattern ((sfilter$ ?v0 (sCons$ ?v1 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (sdrop_while$ ?v0 (sCons$ ?v1 ?v2 ))(ite (fun_app$a ?v0 ?v1 )(sdrop_while$ ?v0 ?v2 )(sCons$ ?v1 ?v2 ))):pattern ((sdrop_while$ ?v0 (sCons$ ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$ (sinterleave$ ?v0 ?v1 ))(shd$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$ (sinterleave$ ?v0 ?v1 ))(sinterleave$ ?v1 (stl$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (sdrop_while$ ?v0 ?v1 )(ite (fun_app$a ?v0 (shd$ ?v1 ))(sdrop_while$ ?v0 (stl$ ?v1 ))?v1 ))):named a14 ))
(check-sat )
;(get-unsat-core )
