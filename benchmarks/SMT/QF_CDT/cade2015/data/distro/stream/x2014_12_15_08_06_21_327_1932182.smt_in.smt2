;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()A_stream$ )
(declare-fun map$ (A_a_fun$ A_list$ )A_list$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun drop$ (Nat$ A_list$ )A_list$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lists$ (A_set$ )A_list_set$ )
(declare-fun minus$ (Nat$ Nat$ )Nat$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun member$ (A_list$ A_list_set$ )Bool )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun member$a (A_stream$ A_stream_set$ )Bool )
(declare-fun streams$ (A_set$ )A_stream_set$ )
(assert (! (not (= (shift$ (stake$ n$ s$ )(sdrop$ n$ s$ ))s$ )):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (sdrop$ ?v0 (smap$ ?v1 ?v2 ))(smap$ ?v1 (sdrop$ ?v0 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (size$ (stake$ ?v0 ?v1 ))?v0 )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (sdrop$ zero$ ?v0 )?v0 ):pattern ((sdrop$ zero$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_stream$ ))(= (shift$ (append$ ?v0 ?v1 )?v2 )(shift$ ?v0 (shift$ ?v1 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (shift$ nil$ ?v0 )?v0 ):pattern ((shift$ nil$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_stream$ ))(= (drop$ ?v0 (stake$ ?v1 ?v2 ))(stake$ (minus$ ?v1 ?v0 )(sdrop$ ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$ (sdrop$ ?v0 ?v1 ))(snth$ ?v1 ?v0 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (stl$ (sdrop$ ?v0 ?v1 ))(sdrop$ (suc$ ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_set$ )(?v2 A_stream$ ))(=> (and (member$ ?v0 (lists$ ?v1 ))(member$a ?v2 (streams$ ?v1 )))(member$a (shift$ ?v0 ?v2 )(streams$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (stake$ ?v0 (smap$ ?v1 ?v2 ))(map$ ?v1 (stake$ ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (stake$ zero$ ?v0 )nil$ ):pattern ((stake$ zero$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$ ?v0 (shd$ ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$ (smap$ ?v0 ?v1 )?v2 )(fun_app$ ?v0 (snth$ ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 A_stream$ ))(= (smap$ ?v0 (shift$ ?v1 ?v2 ))(shift$ (map$ ?v0 ?v1 )(smap$ ?v0 ?v2 )))):named a17 ))
(check-sat )
;(get-unsat-core )
