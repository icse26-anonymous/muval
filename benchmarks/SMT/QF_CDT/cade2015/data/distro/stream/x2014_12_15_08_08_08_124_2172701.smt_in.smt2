;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_list_list_bool_fun$ 0 )
(declare-sort A_list_list_list_bool_fun$ 0 )
(declare-sort A_list_a_list_bool_fun_fun$ 0 )
(declare-sort A_list_a_list_list_bool_fun_fun$ 0 )
(declare-sort A_list_list_a_list_bool_fun_fun$ 0 )
(declare-sort A_list_a_list_list_list_bool_fun_fun$ 0 )
(declare-sort A_list_list_a_list_list_bool_fun_fun$ 0 )
(declare-sort A_list_list_list_a_list_bool_fun_fun$ 0 )
(declare-sort A_list_list_a_list_list_list_bool_fun_fun$ 0 )
(declare-sort A_list_list_list_a_list_list_bool_fun_fun$ 0 )
(declare-sort A_list_list_list_a_list_list_list_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_list_stream$ 0)
(declare-fun shd$a (A_list_stream$)A_list$)
(declare-fun stl$a (A_list_stream$)A_list_stream$)
(declare-fun sCons$a (A_list$ A_list_stream$ )A_list_stream$)
(declare-datatypes ()((A_list_list$ (nil$a )(cons$a (hd$a A_list$ )(tl$a A_list_list$ )))(A_list_list_list$ (nil$b )(cons$b (hd$b A_list_list$ )(tl$b A_list_list_list$ )))(A_list_list_list_list$ (nil$c )(cons$c (hd$c A_list_list_list$ )(tl$c A_list_list_list_list$ )))))
(declare-fun x$ ()A$ )
(declare-fun ws$ ()A_list_stream$ )
(declare-fun xs$ ()A_list$ )
(declare-fun flat$ (A_list_stream$ )A_stream$ )
(declare-fun fun_app$ (A_list_list_list_bool_fun$ A_list_list_list$ )Bool )
(declare-fun smember$ (A_list$ A_list_stream$ )Bool )
(declare-fun fun_app$a (A_list_list_bool_fun$ A_list_list$ )Bool )
(declare-fun fun_app$b (A_list_bool_fun$ A_list$ )Bool )
(declare-fun fun_app$c (A_list_a_list_list_list_bool_fun_fun$ A_list$ )A_list_list_list_bool_fun$ )
(declare-fun fun_app$d (A_list_list_a_list_list_list_bool_fun_fun$ A_list_list$ )A_list_list_list_bool_fun$ )
(declare-fun fun_app$e (A_list_list_list_a_list_bool_fun_fun$ A_list_list_list$ )A_list_bool_fun$ )
(declare-fun fun_app$f (A_list_list_list_a_list_list_bool_fun_fun$ A_list_list_list$ )A_list_list_bool_fun$ )
(declare-fun fun_app$g (A_list_list_list_a_list_list_list_bool_fun_fun$ A_list_list_list$ )A_list_list_list_bool_fun$ )
(declare-fun fun_app$h (A_list_a_list_list_bool_fun_fun$ A_list$ )A_list_list_bool_fun$ )
(declare-fun fun_app$i (A_list_list_a_list_bool_fun_fun$ A_list_list$ )A_list_bool_fun$ )
(declare-fun fun_app$j (A_list_list_a_list_list_bool_fun_fun$ A_list_list$ )A_list_list_bool_fun$ )
(declare-fun fun_app$k (A_list_a_list_bool_fun_fun$ A_list$ )A_list_bool_fun$ )
(declare-fun fun_app$l (A_bool_fun$ A$ )Bool )
(declare-fun smember$a (A$ A_stream$ )Bool )
(declare-fun sublists$ (A_list_list_list$ )A_list_list_list_list$ )
(declare-fun sublists$a (A_list_list$ )A_list_list_list$ )
(declare-fun sublists$b (A_list$ )A_list_list$ )
(declare-fun pred_stream$ (A_list_bool_fun$ A_list_stream$ )Bool )
(declare-fun pred_stream$a (A_bool_fun$ A_stream$ )Bool )
(declare-fun product_lists$ (A_list_list_list_list$ )A_list_list_list_list$ )
(declare-fun product_lists$a (A_list_list_list$ )A_list_list_list$ )
(declare-fun product_lists$b (A_list_list$ )A_list_list$ )
(assert (! (not (= (flat$ (sCons$a (cons$ x$ xs$ )ws$ ))(sCons$ x$ (flat$ (ite (= xs$ nil$ )ws$ (sCons$a xs$ ws$ )))))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ )(?v2 A_list$ )(?v3 A_list_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_list_stream$ ))(=> (forall ((?v1 A_list$ )(?v2 A_list_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a3 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list_stream$ ))(! (= (smember$ ?v0 (sCons$a ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$ ?v0 ?v2 ))):pattern ((smember$ ?v0 (sCons$a ?v1 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smember$a ?v0 (sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$a ?v0 ?v2 ))):pattern ((smember$a ?v0 (sCons$ ?v1 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(= (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(= (= (cons$a ?v0 ?v1 )(cons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(= (not (= ?v0 nil$b ))(exists ((?v1 A_list_list$ )(?v2 A_list_list_list$ ))(= ?v0 (cons$b ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (not (= ?v0 nil$a ))(exists ((?v1 A_list$ )(?v2 A_list_list$ ))(= ?v0 (cons$a ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A_list$ ))(= (not (= ?v0 nil$ ))(exists ((?v1 A$ )(?v2 A_list$ ))(= ?v0 (cons$ ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 A_list_list$ ))(=> (= ?v0 (cons$b ?v1 nil$b ))false ))(forall ((?v1 A_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(=> (= ?v0 (cons$b ?v1 (cons$b ?v2 ?v3 )))false ))))false )):named a13 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(and (forall ((?v1 A_list$ ))(=> (= ?v0 (cons$a ?v1 nil$a ))false ))(forall ((?v1 A_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(=> (= ?v0 (cons$a ?v1 (cons$a ?v2 ?v3 )))false ))))false )):named a14 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(and (forall ((?v1 A$ ))(=> (= ?v0 (cons$ ?v1 nil$ ))false ))(forall ((?v1 A$ )(?v2 A$ )(?v3 A_list$ ))(=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))false ))))false )):named a15 ))
(assert (! (forall ((?v0 A_list_list_list_list$ ))(=> (and (=> (= ?v0 nil$c )false )(and (forall ((?v1 A_list_list_list_list$ ))(=> (= ?v0 (cons$c nil$b ?v1 ))false ))(forall ((?v1 A_list_list$ )(?v2 A_list_list_list$ )(?v3 A_list_list_list_list$ ))(=> (= ?v0 (cons$c (cons$b ?v1 ?v2 )?v3 ))false ))))false )):named a16 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 A_list_list_list$ ))(=> (= ?v0 (cons$b nil$a ?v1 ))false ))(forall ((?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(=> (= ?v0 (cons$b (cons$a ?v1 ?v2 )?v3 ))false ))))false )):named a17 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(and (forall ((?v1 A_list_list$ ))(=> (= ?v0 (cons$a nil$ ?v1 ))false ))(forall ((?v1 A$ )(?v2 A_list$ )(?v3 A_list_list$ ))(=> (= ?v0 (cons$a (cons$ ?v1 ?v2 )?v3 ))false ))))false )):named a18 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(forall ((?v1 A_list_list$ )(?v2 A_list_list_list$ ))(=> (= ?v0 (cons$b ?v1 ?v2 ))false )))false )):named a19 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(forall ((?v1 A_list$ )(?v2 A_list_list$ ))(=> (= ?v0 (cons$a ?v1 ?v2 ))false )))false )):named a20 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(forall ((?v1 A$ )(?v2 A_list$ ))(=> (= ?v0 (cons$ ?v1 ?v2 ))false )))false )):named a21 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list$ )(?v2 A_list_list_list$ ))(=> (= ?v0 (cons$b ?v1 ?v2 ))(not (= ?v0 nil$b )))):named a22 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list$ )(?v2 A_list_list$ ))(=> (= ?v0 (cons$a ?v1 ?v2 ))(not (= ?v0 nil$a )))):named a23 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_list$ ))(=> (= ?v0 (cons$ ?v1 ?v2 ))(not (= ?v0 nil$ )))):named a24 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list_bool_fun$ ))(=> (and (not (= ?v0 nil$b ))(and (forall ((?v2 A_list_list$ ))(fun_app$ ?v1 (cons$b ?v2 nil$b )))(forall ((?v2 A_list_list$ )(?v3 A_list_list_list$ ))(=> (and (not (= ?v3 nil$b ))(fun_app$ ?v1 ?v3 ))(fun_app$ ?v1 (cons$b ?v2 ?v3 ))))))(fun_app$ ?v1 ?v0 ))):named a25 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_bool_fun$ ))(=> (and (not (= ?v0 nil$a ))(and (forall ((?v2 A_list$ ))(fun_app$a ?v1 (cons$a ?v2 nil$a )))(forall ((?v2 A_list$ )(?v3 A_list_list$ ))(=> (and (not (= ?v3 nil$a ))(fun_app$a ?v1 ?v3 ))(fun_app$a ?v1 (cons$a ?v2 ?v3 ))))))(fun_app$a ?v1 ?v0 ))):named a26 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_bool_fun$ ))(=> (and (not (= ?v0 nil$ ))(and (forall ((?v2 A$ ))(fun_app$b ?v1 (cons$ ?v2 nil$ )))(forall ((?v2 A$ )(?v3 A_list$ ))(=> (and (not (= ?v3 nil$ ))(fun_app$b ?v1 ?v3 ))(fun_app$b ?v1 (cons$ ?v2 ?v3 ))))))(fun_app$b ?v1 ?v0 ))):named a27 ))
(assert (! (forall ((?v0 A_list_a_list_list_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list_list$ ))(=> (and (fun_app$ (fun_app$c ?v0 nil$ )nil$b )(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$ (fun_app$c ?v0 (cons$ ?v3 ?v4 ))nil$b ))(and (forall ((?v3 A_list_list$ )(?v4 A_list_list_list$ ))(fun_app$ (fun_app$c ?v0 nil$ )(cons$b ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A_list_list$ )(?v6 A_list_list_list$ ))(=> (fun_app$ (fun_app$c ?v0 ?v4 )?v6 )(fun_app$ (fun_app$c ?v0 (cons$ ?v3 ?v4 ))(cons$b ?v5 ?v6 )))))))(fun_app$ (fun_app$c ?v0 ?v1 )?v2 ))):named a28 ))
(assert (! (forall ((?v0 A_list_list_a_list_list_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list_list_list$ ))(=> (and (fun_app$ (fun_app$d ?v0 nil$a )nil$b )(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$ (fun_app$d ?v0 (cons$a ?v3 ?v4 ))nil$b ))(and (forall ((?v3 A_list_list$ )(?v4 A_list_list_list$ ))(fun_app$ (fun_app$d ?v0 nil$a )(cons$b ?v3 ?v4 )))(forall ((?v3 A_list$ )(?v4 A_list_list$ )(?v5 A_list_list$ )(?v6 A_list_list_list$ ))(=> (fun_app$ (fun_app$d ?v0 ?v4 )?v6 )(fun_app$ (fun_app$d ?v0 (cons$a ?v3 ?v4 ))(cons$b ?v5 ?v6 )))))))(fun_app$ (fun_app$d ?v0 ?v1 )?v2 ))):named a29 ))
(assert (! (forall ((?v0 A_list_list_list_a_list_bool_fun_fun$ )(?v1 A_list_list_list$ )(?v2 A_list$ ))(=> (and (fun_app$b (fun_app$e ?v0 nil$b )nil$ )(and (forall ((?v3 A_list_list$ )(?v4 A_list_list_list$ ))(fun_app$b (fun_app$e ?v0 (cons$b ?v3 ?v4 ))nil$ ))(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$b (fun_app$e ?v0 nil$b )(cons$ ?v3 ?v4 )))(forall ((?v3 A_list_list$ )(?v4 A_list_list_list$ )(?v5 A$ )(?v6 A_list$ ))(=> (fun_app$b (fun_app$e ?v0 ?v4 )?v6 )(fun_app$b (fun_app$e ?v0 (cons$b ?v3 ?v4 ))(cons$ ?v5 ?v6 )))))))(fun_app$b (fun_app$e ?v0 ?v1 )?v2 ))):named a30 ))
(assert (! (forall ((?v0 A_list_list_list_a_list_list_bool_fun_fun$ )(?v1 A_list_list_list$ )(?v2 A_list_list$ ))(=> (and (fun_app$a (fun_app$f ?v0 nil$b )nil$a )(and (forall ((?v3 A_list_list$ )(?v4 A_list_list_list$ ))(fun_app$a (fun_app$f ?v0 (cons$b ?v3 ?v4 ))nil$a ))(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$a (fun_app$f ?v0 nil$b )(cons$a ?v3 ?v4 )))(forall ((?v3 A_list_list$ )(?v4 A_list_list_list$ )(?v5 A_list$ )(?v6 A_list_list$ ))(=> (fun_app$a (fun_app$f ?v0 ?v4 )?v6 )(fun_app$a (fun_app$f ?v0 (cons$b ?v3 ?v4 ))(cons$a ?v5 ?v6 )))))))(fun_app$a (fun_app$f ?v0 ?v1 )?v2 ))):named a31 ))
(assert (! (forall ((?v0 A_list_list_list_a_list_list_list_bool_fun_fun$ )(?v1 A_list_list_list$ )(?v2 A_list_list_list$ ))(=> (and (fun_app$ (fun_app$g ?v0 nil$b )nil$b )(and (forall ((?v3 A_list_list$ )(?v4 A_list_list_list$ ))(fun_app$ (fun_app$g ?v0 (cons$b ?v3 ?v4 ))nil$b ))(and (forall ((?v3 A_list_list$ )(?v4 A_list_list_list$ ))(fun_app$ (fun_app$g ?v0 nil$b )(cons$b ?v3 ?v4 )))(forall ((?v3 A_list_list$ )(?v4 A_list_list_list$ )(?v5 A_list_list$ )(?v6 A_list_list_list$ ))(=> (fun_app$ (fun_app$g ?v0 ?v4 )?v6 )(fun_app$ (fun_app$g ?v0 (cons$b ?v3 ?v4 ))(cons$b ?v5 ?v6 )))))))(fun_app$ (fun_app$g ?v0 ?v1 )?v2 ))):named a32 ))
(assert (! (forall ((?v0 A_list_a_list_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ ))(=> (and (fun_app$a (fun_app$h ?v0 nil$ )nil$a )(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$a (fun_app$h ?v0 (cons$ ?v3 ?v4 ))nil$a ))(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$a (fun_app$h ?v0 nil$ )(cons$a ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A_list$ )(?v6 A_list_list$ ))(=> (fun_app$a (fun_app$h ?v0 ?v4 )?v6 )(fun_app$a (fun_app$h ?v0 (cons$ ?v3 ?v4 ))(cons$a ?v5 ?v6 )))))))(fun_app$a (fun_app$h ?v0 ?v1 )?v2 ))):named a33 ))
(assert (! (forall ((?v0 A_list_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list$ ))(=> (and (fun_app$b (fun_app$i ?v0 nil$a )nil$ )(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$b (fun_app$i ?v0 (cons$a ?v3 ?v4 ))nil$ ))(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$b (fun_app$i ?v0 nil$a )(cons$ ?v3 ?v4 )))(forall ((?v3 A_list$ )(?v4 A_list_list$ )(?v5 A$ )(?v6 A_list$ ))(=> (fun_app$b (fun_app$i ?v0 ?v4 )?v6 )(fun_app$b (fun_app$i ?v0 (cons$a ?v3 ?v4 ))(cons$ ?v5 ?v6 )))))))(fun_app$b (fun_app$i ?v0 ?v1 )?v2 ))):named a34 ))
(assert (! (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(=> (and (fun_app$a (fun_app$j ?v0 nil$a )nil$a )(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$a (fun_app$j ?v0 (cons$a ?v3 ?v4 ))nil$a ))(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$a (fun_app$j ?v0 nil$a )(cons$a ?v3 ?v4 )))(forall ((?v3 A_list$ )(?v4 A_list_list$ )(?v5 A_list$ )(?v6 A_list_list$ ))(=> (fun_app$a (fun_app$j ?v0 ?v4 )?v6 )(fun_app$a (fun_app$j ?v0 (cons$a ?v3 ?v4 ))(cons$a ?v5 ?v6 )))))))(fun_app$a (fun_app$j ?v0 ?v1 )?v2 ))):named a35 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(=> (and (fun_app$b (fun_app$k ?v0 nil$ )nil$ )(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$b (fun_app$k ?v0 (cons$ ?v3 ?v4 ))nil$ ))(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$b (fun_app$k ?v0 nil$ )(cons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A$ )(?v6 A_list$ ))(=> (fun_app$b (fun_app$k ?v0 ?v4 )?v6 )(fun_app$b (fun_app$k ?v0 (cons$ ?v3 ?v4 ))(cons$ ?v5 ?v6 )))))))(fun_app$b (fun_app$k ?v0 ?v1 )?v2 ))):named a36 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ ))(not (= nil$b (cons$b ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(not (= nil$a (cons$a ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= nil$ (cons$ ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list$ )(?v2 A_list_stream$ ))(! (= (pred_stream$ ?v0 (sCons$a ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(pred_stream$ ?v0 ?v2 ))):pattern ((pred_stream$ ?v0 (sCons$a ?v1 ?v2 ))))):named a40 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (pred_stream$a ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$l ?v0 ?v1 )(pred_stream$a ?v0 ?v2 ))):pattern ((pred_stream$a ?v0 (sCons$ ?v1 ?v2 ))))):named a41 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(=> (not (= ?v0 nil$b ))false ))false )):named a42 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(=> (not (= ?v0 nil$a ))false ))false )):named a43 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a44 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ ))(not (= (cons$b ?v0 ?v1 )?v1 ))):named a45 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(not (= (cons$a ?v0 ?v1 )?v1 ))):named a46 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a47 ))
(assert (! (= (sublists$ nil$b )(cons$c nil$b nil$c )):named a48 ))
(assert (! (= (sublists$a nil$a )(cons$b nil$a nil$b )):named a49 ))
(assert (! (= (sublists$b nil$ )(cons$a nil$ nil$a )):named a50 ))
(assert (! (= (product_lists$ nil$c )(cons$c nil$b nil$c )):named a51 ))
(assert (! (= (product_lists$a nil$b )(cons$b nil$a nil$b )):named a52 ))
(assert (! (= (product_lists$b nil$a )(cons$a nil$ nil$a )):named a53 ))
(check-sat )
;(get-unsat-core )
