;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_b_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun$ 0 )
(declare-sort C_a_a_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun$ 0 )
(declare-sort C_c_a_fun_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort B_stream_bool_fun$ 0 )
(declare-sort C_stream_bool_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-sort C_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (B_stream$)B$)
(declare-fun stl$a (B_stream$)B_stream$)
(declare-fun sCons$a (B$ B_stream$ )B_stream$)
(declare-fun shd$b (C_stream$)C$)
(declare-fun stl$b (C_stream$)C_stream$)
(declare-fun sCons$b (C$ C_stream$ )C_stream$)
(declare-fun a$ ()B$ )
(declare-fun b$ ()C$ )
(declare-fun f$ ()B_c_a_fun_fun$ )
(declare-fun s1$ ()B_stream$ )
(declare-fun s2$ ()C_stream$ )
(declare-fun smap2$ (B_c_a_fun_fun$ B_stream$ C_stream$ )A_stream$ )
(declare-fun smap2$a (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$b (A_b_a_fun_fun$ A_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$c (A_c_a_fun_fun$ A_stream$ C_stream$ )A_stream$ )
(declare-fun smap2$d (B_a_a_fun_fun$ B_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$e (B_b_a_fun_fun$ B_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$f (C_a_a_fun_fun$ C_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$g (C_b_a_fun_fun$ C_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$h (C_c_a_fun_fun$ C_stream$ C_stream$ )A_stream$ )
(declare-fun smap2$i (A_a_b_fun_fun$ A_stream$ A_stream$ )B_stream$ )
(declare-fun fun_app$ (C_a_fun$ C$ )A$ )
(declare-fun sfilter$ (B_bool_fun$ B_stream$ )B_stream$ )
(declare-fun smember$ (B$ )B_stream_bool_fun$ )
(declare-fun fun_app$a (B_c_a_fun_fun$ B$ )C_a_fun$ )
(declare-fun fun_app$b (B_stream_bool_fun$ B_stream$ )Bool )
(declare-fun fun_app$c (C_stream_bool_fun$ C_stream$ )Bool )
(declare-fun fun_app$d (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$e (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$f (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$g (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$h (A_a_fun$ A$ )A$ )
(declare-fun fun_app$i (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$j (B_a_fun$ B$ )A$ )
(declare-fun fun_app$k (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$l (A_c_a_fun_fun$ A$ )C_a_fun$ )
(declare-fun fun_app$m (B_a_a_fun_fun$ B$ )A_a_fun$ )
(declare-fun fun_app$n (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$o (C_a_a_fun_fun$ C$ )A_a_fun$ )
(declare-fun fun_app$p (C_b_a_fun_fun$ C$ )B_a_fun$ )
(declare-fun fun_app$q (C_c_a_fun_fun$ C$ )C_a_fun$ )
(declare-fun fun_app$r (A_b_fun$ A$ )B$ )
(declare-fun fun_app$s (A_a_b_fun_fun$ A$ )A_b_fun$ )
(declare-fun sfilter$a (C_bool_fun$ C_stream$ )C_stream$ )
(declare-fun sfilter$b (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun smember$a (C$ )C_stream_bool_fun$ )
(declare-fun smember$b (A$ )A_stream_bool_fun$ )
(declare-fun streamsp$ (B_bool_fun$ )B_stream_bool_fun$ )
(declare-fun streamsp$a (C_bool_fun$ )C_stream_bool_fun$ )
(declare-fun streamsp$b (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun stream_all$ (B_bool_fun$ )B_stream_bool_fun$ )
(declare-fun pred_stream$ (B_bool_fun$ )B_stream_bool_fun$ )
(declare-fun sdrop_while$ (B_bool_fun$ B_stream$ )B_stream$ )
(declare-fun sinterleave$ (B_stream$ B_stream$ )B_stream$ )
(declare-fun stream_all$a (C_bool_fun$ )C_stream_bool_fun$ )
(declare-fun stream_all$b (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun pred_stream$a (C_bool_fun$ )C_stream_bool_fun$ )
(declare-fun pred_stream$b (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun sdrop_while$a (C_bool_fun$ C_stream$ )C_stream$ )
(declare-fun sdrop_while$b (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun sinterleave$a (C_stream$ C_stream$ )C_stream$ )
(declare-fun sinterleave$b (A_stream$ A_stream$ )A_stream$ )
(assert (! (not (= (smap2$ f$ (sCons$a a$ s1$ )(sCons$b b$ s2$ ))(sCons$ (fun_app$ (fun_app$a f$ a$ )b$ )(smap2$ f$ s1$ s2$ )))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (forall ((?v1 B$ )(?v2 B_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a4 ))
(assert (! (forall ((?v0 C_stream$ ))(=> (forall ((?v1 C$ )(?v2 C_stream$ ))(=> (= ?v0 (sCons$b ?v1 ?v2 ))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a6 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$b (smember$ ?v0 )(sCons$a ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$b (smember$ ?v0 )?v2 ))):pattern ((fun_app$b (smember$ ?v0 )(sCons$a ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ )(?v2 C_stream$ ))(! (= (fun_app$c (smember$a ?v0 )(sCons$b ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$c (smember$a ?v0 )?v2 ))):pattern ((fun_app$c (smember$a ?v0 )(sCons$b ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$d (smember$b ?v0 )(sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$d (smember$b ?v0 )?v2 ))):pattern ((fun_app$d (smember$b ?v0 )(sCons$ ?v1 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$b (pred_stream$ ?v0 )(sCons$a ?v1 ?v2 ))(and (fun_app$e ?v0 ?v1 )(fun_app$b (pred_stream$ ?v0 )?v2 ))):pattern ((fun_app$b (pred_stream$ ?v0 )(sCons$a ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_stream$ ))(! (= (fun_app$c (pred_stream$a ?v0 )(sCons$b ?v1 ?v2 ))(and (fun_app$f ?v0 ?v1 )(fun_app$c (pred_stream$a ?v0 )?v2 ))):pattern ((fun_app$c (pred_stream$a ?v0 )(sCons$b ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$d (pred_stream$b ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$g ?v0 ?v1 )(fun_app$d (pred_stream$b ?v0 )?v2 ))):pattern ((fun_app$d (pred_stream$b ?v0 )(sCons$ ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$b (stream_all$ ?v0 )(sCons$a ?v1 ?v2 ))(and (fun_app$e ?v0 ?v1 )(fun_app$b (stream_all$ ?v0 )?v2 ))):pattern ((fun_app$b (stream_all$ ?v0 )(sCons$a ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_stream$ ))(! (= (fun_app$c (stream_all$a ?v0 )(sCons$b ?v1 ?v2 ))(and (fun_app$f ?v0 ?v1 )(fun_app$c (stream_all$a ?v0 )?v2 ))):pattern ((fun_app$c (stream_all$a ?v0 )(sCons$b ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$d (stream_all$b ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$g ?v0 ?v1 )(fun_app$d (stream_all$b ?v0 )?v2 ))):pattern ((fun_app$d (stream_all$b ?v0 )(sCons$ ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_stream$ ))(= (fun_app$b (streamsp$ ?v0 )?v1 )(exists ((?v2 B$ )(?v3 B_stream$ ))(and (= ?v1 (sCons$a ?v2 ?v3 ))(and (fun_app$e ?v0 ?v2 )(fun_app$b (streamsp$ ?v0 )?v3 )))))):named a16 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_stream$ ))(= (fun_app$c (streamsp$a ?v0 )?v1 )(exists ((?v2 C$ )(?v3 C_stream$ ))(and (= ?v1 (sCons$b ?v2 ?v3 ))(and (fun_app$f ?v0 ?v2 )(fun_app$c (streamsp$a ?v0 )?v3 )))))):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$d (streamsp$b ?v0 )?v1 )(exists ((?v2 A$ )(?v3 A_stream$ ))(and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$g ?v0 ?v2 )(fun_app$d (streamsp$b ?v0 )?v3 )))))):named a18 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_stream$ ))(=> (and (fun_app$b (streamsp$ ?v0 )?v1 )(forall ((?v2 B$ )(?v3 B_stream$ ))(=> (and (= ?v1 (sCons$a ?v2 ?v3 ))(and (fun_app$e ?v0 ?v2 )(fun_app$b (streamsp$ ?v0 )?v3 )))false )))false )):named a19 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_stream$ ))(=> (and (fun_app$c (streamsp$a ?v0 )?v1 )(forall ((?v2 C$ )(?v3 C_stream$ ))(=> (and (= ?v1 (sCons$b ?v2 ?v3 ))(and (fun_app$f ?v0 ?v2 )(fun_app$c (streamsp$a ?v0 )?v3 )))false )))false )):named a20 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(=> (and (fun_app$d (streamsp$b ?v0 )?v1 )(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$g ?v0 ?v2 )(fun_app$d (streamsp$b ?v0 )?v3 )))false )))false )):named a21 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_stream$ )(?v2 B_bool_fun$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v3 B_stream$ ))(=> (fun_app$b ?v0 ?v3 )(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v3 (sCons$a ?v4 ?v5 ))(and (fun_app$e ?v2 ?v4 )(or (fun_app$b ?v0 ?v5 )(fun_app$b (streamsp$ ?v2 )?v5 ))))))))(fun_app$b (streamsp$ ?v2 )?v1 ))):named a22 ))
(assert (! (forall ((?v0 C_stream_bool_fun$ )(?v1 C_stream$ )(?v2 C_bool_fun$ ))(=> (and (fun_app$c ?v0 ?v1 )(forall ((?v3 C_stream$ ))(=> (fun_app$c ?v0 ?v3 )(exists ((?v4 C$ )(?v5 C_stream$ ))(and (= ?v3 (sCons$b ?v4 ?v5 ))(and (fun_app$f ?v2 ?v4 )(or (fun_app$c ?v0 ?v5 )(fun_app$c (streamsp$a ?v2 )?v5 ))))))))(fun_app$c (streamsp$a ?v2 )?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_bool_fun$ ))(=> (and (fun_app$d ?v0 ?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$d ?v0 ?v3 )(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v3 (sCons$ ?v4 ?v5 ))(and (fun_app$g ?v2 ?v4 )(or (fun_app$d ?v0 ?v5 )(fun_app$d (streamsp$b ?v2 )?v5 ))))))))(fun_app$d (streamsp$b ?v2 )?v1 ))):named a24 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (sfilter$ ?v0 (sCons$a ?v1 ?v2 ))(ite (fun_app$e ?v0 ?v1 )(sCons$a ?v1 (sfilter$ ?v0 ?v2 ))(sfilter$ ?v0 ?v2 ))):pattern ((sfilter$ ?v0 (sCons$a ?v1 ?v2 ))))):named a25 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_stream$ ))(! (= (sfilter$a ?v0 (sCons$b ?v1 ?v2 ))(ite (fun_app$f ?v0 ?v1 )(sCons$b ?v1 (sfilter$a ?v0 ?v2 ))(sfilter$a ?v0 ?v2 ))):pattern ((sfilter$a ?v0 (sCons$b ?v1 ?v2 ))))):named a26 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (sfilter$b ?v0 (sCons$ ?v1 ?v2 ))(ite (fun_app$g ?v0 ?v1 )(sCons$ ?v1 (sfilter$b ?v0 ?v2 ))(sfilter$b ?v0 ?v2 ))):pattern ((sfilter$b ?v0 (sCons$ ?v1 ?v2 ))))):named a27 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B_stream$ ))(! (= (sinterleave$ (sCons$a ?v0 ?v1 )?v2 )(sCons$a ?v0 (sinterleave$ ?v2 ?v1 ))):pattern ((sinterleave$ (sCons$a ?v0 ?v1 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ )(?v2 C_stream$ ))(! (= (sinterleave$a (sCons$b ?v0 ?v1 )?v2 )(sCons$b ?v0 (sinterleave$a ?v2 ?v1 ))):pattern ((sinterleave$a (sCons$b ?v0 ?v1 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_stream$ ))(! (= (sinterleave$b (sCons$ ?v0 ?v1 )?v2 )(sCons$ ?v0 (sinterleave$b ?v2 ?v1 ))):pattern ((sinterleave$b (sCons$ ?v0 ?v1 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (sdrop_while$ ?v0 (sCons$a ?v1 ?v2 ))(ite (fun_app$e ?v0 ?v1 )(sdrop_while$ ?v0 ?v2 )(sCons$a ?v1 ?v2 ))):pattern ((sdrop_while$ ?v0 (sCons$a ?v1 ?v2 ))))):named a31 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_stream$ ))(! (= (sdrop_while$a ?v0 (sCons$b ?v1 ?v2 ))(ite (fun_app$f ?v0 ?v1 )(sdrop_while$a ?v0 ?v2 )(sCons$b ?v1 ?v2 ))):pattern ((sdrop_while$a ?v0 (sCons$b ?v1 ?v2 ))))):named a32 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (sdrop_while$b ?v0 (sCons$ ?v1 ?v2 ))(ite (fun_app$g ?v0 ?v1 )(sdrop_while$b ?v0 ?v2 )(sCons$ ?v1 ?v2 ))):pattern ((sdrop_while$b ?v0 (sCons$ ?v1 ?v2 ))))):named a33 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (shd$ (smap2$ ?v0 ?v1 ?v2 ))(fun_app$ (fun_app$a ?v0 (shd$a ?v1 ))(shd$b ?v2 )))):named a34 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$a ?v0 ?v1 ?v2 ))(fun_app$h (fun_app$i ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (shd$ (smap2$b ?v0 ?v1 ?v2 ))(fun_app$j (fun_app$k ?v0 (shd$ ?v1 ))(shd$a ?v2 )))):named a36 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (shd$ (smap2$c ?v0 ?v1 ?v2 ))(fun_app$ (fun_app$l ?v0 (shd$ ?v1 ))(shd$b ?v2 )))):named a37 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$d ?v0 ?v1 ?v2 ))(fun_app$h (fun_app$m ?v0 (shd$a ?v1 ))(shd$ ?v2 )))):named a38 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (shd$ (smap2$e ?v0 ?v1 ?v2 ))(fun_app$j (fun_app$n ?v0 (shd$a ?v1 ))(shd$a ?v2 )))):named a39 ))
(assert (! (forall ((?v0 C_a_a_fun_fun$ )(?v1 C_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$f ?v0 ?v1 ?v2 ))(fun_app$h (fun_app$o ?v0 (shd$b ?v1 ))(shd$ ?v2 )))):named a40 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (shd$ (smap2$g ?v0 ?v1 ?v2 ))(fun_app$j (fun_app$p ?v0 (shd$b ?v1 ))(shd$a ?v2 )))):named a41 ))
(assert (! (forall ((?v0 C_c_a_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (shd$ (smap2$h ?v0 ?v1 ?v2 ))(fun_app$ (fun_app$q ?v0 (shd$b ?v1 ))(shd$b ?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$a (smap2$i ?v0 ?v1 ?v2 ))(fun_app$r (fun_app$s ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$ (sinterleave$b ?v0 ?v1 ))(shd$ ?v0 ))):named a44 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_stream$ ))(= (shd$b (sinterleave$a ?v0 ?v1 ))(shd$b ?v0 ))):named a45 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (shd$a (sinterleave$ ?v0 ?v1 ))(shd$a ?v0 ))):named a46 ))
(check-sat )
;(get-unsat-core )
