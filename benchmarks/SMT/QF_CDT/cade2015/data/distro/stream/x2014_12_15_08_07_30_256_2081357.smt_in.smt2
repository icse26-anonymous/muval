;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_list_list_a_list_list_fun$ 0 )
(declare-sort A_list_list_list_a_list_list_list_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-datatypes ()((A_list_list$ (nil$a )(cons$a (hd$a A_list$ )(tl$a A_list_list$ )))))
(declare-sort A_list_stream$ 0)
(declare-fun shd$a (A_list_stream$)A_list$)
(declare-fun stl$a (A_list_stream$)A_list_stream$)
(declare-fun sCons$a (A_list$ A_list_stream$ )A_list_stream$)
(declare-datatypes ()((A_list_list_list$ (nil$b )(cons$b (hd$b A_list_list$ )(tl$b A_list_list_list$ )))(A_list_list_list_list$ (nil$c )(cons$c (hd$c A_list_list_list$ )(tl$c A_list_list_list_list$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun u$ ()A_list$ )
(declare-fun div$ (Nat$ Nat$ )Nat$ )
(declare-fun mod$ (Nat$ Nat$ )Nat$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun take$ (Nat$ A_list$ )A_list$ )
(declare-fun cycle$ (A_list$ )A_stream$ )
(declare-fun size$a (A_list_list$ )Nat$ )
(declare-fun size$b (A_list_list_list$ )Nat$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun append$ (A_list$ )A_list_a_list_fun$ )
(declare-fun concat$ (A_list_list$ )A_list$ )
(declare-fun cycle$a (A_list_list$ )A_list_stream$ )
(declare-fun stake$a (Nat$ A_list_stream$ )A_list_list$ )
(declare-fun append$a (A_list_list_list_list$ A_list_list_list_list$ )A_list_list_list_list$ )
(declare-fun append$b (A_list_list_list$ )A_list_list_list_a_list_list_list_fun$ )
(declare-fun append$c (A_list_list$ )A_list_list_a_list_list_fun$ )
(declare-fun concat$a (A_list_list_list$ )A_list_list$ )
(declare-fun concat$b (A_list_list_list_list$ )A_list_list_list$ )
(declare-fun fun_app$ (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun fun_app$a (A_list_list_list_a_list_list_list_fun$ A_list_list_list$ )A_list_list_list$ )
(declare-fun fun_app$b (A_list_list_a_list_list_fun$ A_list_list$ )A_list_list$ )
(declare-fun replicate$ (Nat$ A_list$ )A_list_list$ )
(declare-fun replicate$a (Nat$ A_list_list$ )A_list_list_list$ )
(declare-fun replicate$b (Nat$ A$ )A_list$ )
(declare-fun replicate$c (Nat$ A_list_list_list$ )A_list_list_list_list$ )
(assert (! (not (= (stake$ n$ (cycle$ u$ ))(fun_app$ (append$ (concat$ (replicate$ (div$ n$ (size$ u$ ))u$ )))(take$ (mod$ n$ (size$ u$ ))u$ )))):named a0 ))
(assert (! (not (= u$ nil$ )):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream$ ))(= (size$a (stake$a ?v0 ?v1 ))?v0 )):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (size$ (stake$ ?v0 ?v1 ))?v0 )):named a3 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (not (= ?v0 nil$a ))(= (stake$a (size$a ?v0 )(cycle$a ?v0 ))?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$ ))(= (stake$ (size$ ?v0 )(cycle$ ?v0 ))?v0 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(= (concat$a (replicate$a ?v0 nil$a ))nil$a )):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(= (concat$ (replicate$ ?v0 nil$ ))nil$ )):named a7 ))
(assert (! (forall ((?v0 A_list_list_list_list$ )(?v1 A_list_list_list_list$ ))(= (concat$b (append$a ?v0 ?v1 ))(fun_app$a (append$b (concat$b ?v0 ))(concat$b ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ ))(= (concat$a (fun_app$a (append$b ?v0 )?v1 ))(fun_app$b (append$c (concat$a ?v0 ))(concat$a ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (concat$ (fun_app$b (append$c ?v0 )?v1 ))(fun_app$ (append$ (concat$ ?v0 ))(concat$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_list$ ))(= (size$b (replicate$a ?v0 ?v1 ))?v0 )):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (size$a (replicate$ ?v0 ?v1 ))?v0 )):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(= (size$ (replicate$b ?v0 ?v1 ))?v0 )):named a13 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list_list$ )(?v3 A_list_list_list$ ))(=> (or (= (size$b ?v0 )(size$b ?v1 ))(= (size$b ?v2 )(size$b ?v3 )))(= (= (fun_app$a (append$b ?v0 )?v2 )(fun_app$a (append$b ?v1 )?v3 ))(and (= ?v0 ?v1 )(= ?v2 ?v3 ))))):named a14 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list$ ))(=> (or (= (size$a ?v0 )(size$a ?v1 ))(= (size$a ?v2 )(size$a ?v3 )))(= (= (fun_app$b (append$c ?v0 )?v2 )(fun_app$b (append$c ?v1 )?v3 ))(and (= ?v0 ?v1 )(= ?v2 ?v3 ))))):named a15 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(=> (or (= (size$ ?v0 )(size$ ?v1 ))(= (size$ ?v2 )(size$ ?v3 )))(= (= (fun_app$ (append$ ?v0 )?v2 )(fun_app$ (append$ ?v1 )?v3 ))(and (= ?v0 ?v1 )(= ?v2 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ ))(= (= (fun_app$a (append$b ?v0 )?v1 )?v1 )(= ?v0 nil$b ))):named a17 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= (fun_app$b (append$c ?v0 )?v1 )?v1 )(= ?v0 nil$a ))):named a18 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )?v1 )(= ?v0 nil$ ))):named a19 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ ))(= (= (fun_app$a (append$b ?v0 )?v1 )?v0 )(= ?v1 nil$b ))):named a20 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= (fun_app$b (append$c ?v0 )?v1 )?v0 )(= ?v1 nil$a ))):named a21 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )?v0 )(= ?v1 nil$ ))):named a22 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ ))(= (= ?v0 (fun_app$a (append$b ?v1 )?v0 ))(= ?v1 nil$b ))):named a23 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= ?v0 (fun_app$b (append$c ?v1 )?v0 ))(= ?v1 nil$a ))):named a24 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= ?v0 (fun_app$ (append$ ?v1 )?v0 ))(= ?v1 nil$ ))):named a25 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ ))(= (= ?v0 (fun_app$a (append$b ?v0 )?v1 ))(= ?v1 nil$b ))):named a26 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= ?v0 (fun_app$b (append$c ?v0 )?v1 ))(= ?v1 nil$a ))):named a27 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= ?v0 (fun_app$ (append$ ?v0 )?v1 ))(= ?v1 nil$ ))):named a28 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ ))(= (= nil$b (fun_app$a (append$b ?v0 )?v1 ))(and (= ?v0 nil$b )(= ?v1 nil$b )))):named a29 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= nil$a (fun_app$b (append$c ?v0 )?v1 ))(and (= ?v0 nil$a )(= ?v1 nil$a )))):named a30 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= nil$ (fun_app$ (append$ ?v0 )?v1 ))(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a31 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ ))(= (= (fun_app$a (append$b ?v0 )?v1 )nil$b )(and (= ?v0 nil$b )(= ?v1 nil$b )))):named a32 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= (fun_app$b (append$c ?v0 )?v1 )nil$a )(and (= ?v0 nil$a )(= ?v1 nil$a )))):named a33 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )nil$ )(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a34 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(! (= (fun_app$a (append$b ?v0 )nil$b )?v0 ):pattern ((append$b ?v0 )))):named a35 ))
(assert (! (forall ((?v0 A_list_list$ ))(! (= (fun_app$b (append$c ?v0 )nil$a )?v0 ):pattern ((append$c ?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$ (append$ ?v0 )nil$ )?v0 ):pattern ((append$ ?v0 )))):named a37 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ ))(=> (and (not (= ?v0 nil$b ))(and (not (= ?v1 nil$b ))(= (fun_app$a (append$b ?v0 )?v1 )(fun_app$a (append$b ?v1 )?v0 ))))(exists ((?v2 Nat$ )(?v3 Nat$ )(?v4 A_list_list_list$ ))(and (= (concat$b (replicate$c ?v2 ?v4 ))?v0 )(= (concat$b (replicate$c ?v3 ?v4 ))?v1 ))))):named a38 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(=> (and (not (= ?v0 nil$a ))(and (not (= ?v1 nil$a ))(= (fun_app$b (append$c ?v0 )?v1 )(fun_app$b (append$c ?v1 )?v0 ))))(exists ((?v2 Nat$ )(?v3 Nat$ )(?v4 A_list_list$ ))(and (= (concat$a (replicate$a ?v2 ?v4 ))?v0 )(= (concat$a (replicate$a ?v3 ?v4 ))?v1 ))))):named a39 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (and (not (= ?v0 nil$ ))(and (not (= ?v1 nil$ ))(= (fun_app$ (append$ ?v0 )?v1 )(fun_app$ (append$ ?v1 )?v0 ))))(exists ((?v2 Nat$ )(?v3 Nat$ )(?v4 A_list$ ))(and (= (concat$ (replicate$ ?v2 ?v4 ))?v0 )(= (concat$ (replicate$ ?v3 ?v4 ))?v1 ))))):named a40 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list_list$ ))(= (fun_app$a (append$b (fun_app$a (append$b ?v0 )?v1 ))?v2 )(fun_app$a (append$b ?v0 )(fun_app$a (append$b ?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(= (fun_app$b (append$c (fun_app$b (append$c ?v0 )?v1 ))?v2 )(fun_app$b (append$c ?v0 )(fun_app$b (append$c ?v1 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (fun_app$ (append$ (fun_app$ (append$ ?v0 )?v1 ))?v2 )(fun_app$ (append$ ?v0 )(fun_app$ (append$ ?v1 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list_list$ ))(= (= (fun_app$a (append$b ?v0 )?v1 )(fun_app$a (append$b ?v2 )?v1 ))(= ?v0 ?v2 ))):named a44 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(= (= (fun_app$b (append$c ?v0 )?v1 )(fun_app$b (append$c ?v2 )?v1 ))(= ?v0 ?v2 ))):named a45 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )(fun_app$ (append$ ?v2 )?v1 ))(= ?v0 ?v2 ))):named a46 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list_list$ ))(= (= (fun_app$a (append$b ?v0 )?v1 )(fun_app$a (append$b ?v0 )?v2 ))(= ?v1 ?v2 ))):named a47 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(= (= (fun_app$b (append$c ?v0 )?v1 )(fun_app$b (append$c ?v0 )?v2 ))(= ?v1 ?v2 ))):named a48 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )(fun_app$ (append$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a49 ))
(check-sat )
;(get-unsat-core )
