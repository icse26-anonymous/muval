;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_a_stream_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort Nat_a_stream_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_stream_stream_bool_fun$ 0 )
(declare-sort A_stream_stream_stream_set$ 0 )
(declare-sort A_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-sort A_stream_stream_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (A_stream_stream$)A_stream$)
(declare-fun stl$a (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$a (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-fun shd$b (A_stream_stream_stream$)A_stream_stream$)
(declare-fun stl$b (A_stream_stream_stream$)A_stream_stream_stream$)
(declare-fun sCons$b (A_stream_stream$ A_stream_stream_stream$ )A_stream_stream_stream$)
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()A_stream$ )
(declare-fun smap$ (A_stream_a_fun$ A_stream_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ )Nat_a_fun$ )
(declare-fun sset$ (A_stream_stream_stream$ )A_stream_stream_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun sdrop$ (Nat$ )A_stream_a_stream_fun$ )
(declare-fun smap$a (A_a_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun smap$b (A_stream_a_stream_fun$ A_stream_stream$ )A_stream_stream$ )
(declare-fun smap$c (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun snth$a (A_stream_stream$ )Nat_a_stream_fun$ )
(declare-fun snth$b (A_stream_stream_stream$ Nat$ )A_stream_stream$ )
(declare-fun sset$a (A_stream_stream$ )A_stream_set$ )
(declare-fun sset$b (A_stream$ )A_set$ )
(declare-fun member$ (A_stream_stream_stream$ A_stream_stream_stream_set$ )Bool )
(declare-fun fun_app$ (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun member$a (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$b (A_stream$ A_stream_set$ )Bool )
(declare-fun member$c (A$ A_set$ )Bool )
(declare-fun streams$ (A_stream_stream_set$ )A_stream_stream_stream_set$ )
(declare-fun fun_app$a (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$b (Nat_a_stream_fun$ Nat$ )A_stream$ )
(declare-fun fun_app$c (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$d (A_a_stream_fun$ A$ )A_stream$ )
(declare-fun fun_app$e (A_a_fun$ A$ )A$ )
(declare-fun fun_app$f (A_stream_stream_bool_fun$ A_stream_stream$ )Bool )
(declare-fun fun_app$g (A_stream_stream_a_stream_stream_bool_fun_fun$ A_stream_stream$ )A_stream_stream_bool_fun$ )
(declare-fun fun_app$h (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$i (A_stream_a_stream_bool_fun_fun$ A_stream$ )A_stream_bool_fun$ )
(declare-fun streams$a (A_stream_set$ )A_stream_stream_set$ )
(declare-fun streams$b (A_set$ )A_stream_set$ )
(assert (! (not (= (shd$ (fun_app$ (sdrop$ n$ )s$ ))(fun_app$a (snth$ s$ )n$ ))):named a0 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(! (= (fun_app$b (snth$a ?v0 )zero$ )(shd$a ?v0 )):pattern ((snth$a ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$a (snth$ ?v0 )zero$ )(shd$ ?v0 )):pattern ((snth$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ (sdrop$ zero$ )?v0 )?v0 ):pattern ((fun_app$ (sdrop$ zero$ )?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$a (snth$ (smap$ ?v0 ?v1 ))?v2 )(fun_app$c ?v0 (fun_app$b (snth$a ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$b (snth$a (smap$a ?v0 ?v1 ))?v2 )(fun_app$d ?v0 (fun_app$a (snth$ ?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$b (snth$a (smap$b ?v0 ?v1 ))?v2 )(fun_app$ ?v0 (fun_app$b (snth$a ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$a (snth$ (fun_app$ (smap$c ?v0 )?v1 ))?v2 )(fun_app$e ?v0 (fun_app$a (snth$ ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$c ?v0 (shd$a ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ ))(= (shd$a (smap$a ?v0 ?v1 ))(fun_app$d ?v0 (shd$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ ))(= (shd$a (smap$b ?v0 ?v1 ))(fun_app$ ?v0 (shd$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (fun_app$ (smap$c ?v0 )?v1 ))(fun_app$e ?v0 (shd$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ ))(= (member$ ?v0 (streams$ ?v1 ))(forall ((?v2 Nat$ ))(member$a (snth$b ?v0 ?v2 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(= (member$a ?v0 (streams$a ?v1 ))(forall ((?v2 Nat$ ))(member$b (fun_app$b (snth$a ?v0 )?v2 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(= (member$b ?v0 (streams$b ?v1 ))(forall ((?v2 Nat$ ))(member$c (fun_app$a (snth$ ?v0 )?v2 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ )(?v2 Nat$ ))(=> (member$ ?v0 (streams$ ?v1 ))(member$a (snth$b ?v0 ?v2 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 Nat$ ))(=> (member$a ?v0 (streams$a ?v1 ))(member$b (fun_app$b (snth$a ?v0 )?v2 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (member$b ?v0 (streams$b ?v1 ))(member$c (fun_app$a (snth$ ?v0 )?v2 )?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 Nat$ ))(member$a (snth$b ?v0 ?v1 )(sset$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 Nat$ ))(member$b (fun_app$b (snth$a ?v0 )?v1 )(sset$a ?v0 ))):named a19 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(member$c (fun_app$a (snth$ ?v0 )?v1 )(sset$b ?v0 ))):named a20 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ ))(=> (member$ ?v0 (streams$ ?v1 ))(member$a (shd$b ?v0 )?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (member$a ?v0 (streams$a ?v1 ))(member$b (shd$a ?v0 )?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (member$b ?v0 (streams$b ?v1 ))(member$c (shd$ ?v0 )?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ ))(member$a (shd$b ?v0 )(sset$ ?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(member$b (shd$a ?v0 )(sset$a ?v0 ))):named a25 ))
(assert (! (forall ((?v0 A_stream$ ))(member$c (shd$ ?v0 )(sset$b ?v0 ))):named a26 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ ))(=> (and (= (shd$a ?v0 )(shd$a ?v1 ))(= (stl$a ?v0 )(stl$a ?v1 )))(= ?v0 ?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream$ ))(=> (and (fun_app$f (fun_app$g ?v0 ?v1 )?v2 )(forall ((?v3 A_stream_stream$ )(?v4 A_stream_stream$ ))(=> (fun_app$f (fun_app$g ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(or (fun_app$f (fun_app$g ?v0 (stl$a ?v3 ))(stl$a ?v4 ))(= (stl$a ?v3 )(stl$a ?v4 )))))))(= ?v1 ?v2 ))):named a29 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$h (fun_app$i ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$h (fun_app$i ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$h (fun_app$i ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (fun_app$ (smap$c ?v0 )?v1 ))(fun_app$ (smap$c ?v0 )(stl$ ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$c ?v4 (sset$b ?v0 ))(and (member$c ?v5 (sset$b ?v1 ))(= (fun_app$e ?v2 ?v4 )(fun_app$e ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$ (smap$c ?v2 )?v0 )(fun_app$ (smap$c ?v3 )?v1 )))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$c ?v3 (sset$b ?v0 ))(= (fun_app$e ?v1 ?v3 )(fun_app$e ?v2 ?v3 ))))(= (fun_app$ (smap$c ?v1 )?v0 )(fun_app$ (smap$c ?v2 )?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$c ?v4 (sset$b ?v1 ))(= (fun_app$e ?v2 ?v4 )(fun_app$e ?v3 ?v4 )))))(= (fun_app$ (smap$c ?v2 )?v0 )(fun_app$ (smap$c ?v3 )?v1 )))):named a34 ))
(check-sat )
;(get-unsat-core )
