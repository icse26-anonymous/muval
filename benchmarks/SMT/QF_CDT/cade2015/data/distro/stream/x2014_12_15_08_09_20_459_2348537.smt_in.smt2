;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))(A_b_prod_list$ (nil$ )(cons$ (hd$ A_b_prod$ )(tl$ A_b_prod_list$ )))))
(declare-sort A_b_prod_stream$ 0)
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-fun shd$ (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$ (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$ (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-fun shd$b (B_stream$)B$)
(declare-fun stl$b (B_stream$)B_stream$)
(declare-fun sCons$b (B$ B_stream$ )B_stream$)
(declare-datatypes ()((A_list$ (nil$a )(cons$a (hd$a A$ )(tl$a A_list$ )))(B_list$ (nil$b )(cons$b (hd$b B$ )(tl$b B_list$ )))(A_a_prod$ (pair$a (fst$a A$ )(snd$a A$ )))))
(declare-sort A_a_prod_stream$ 0)
(declare-fun shd$c (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$c (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$c (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-datatypes ()((B_a_prod$ (pair$b (fst$b B$ )(snd$b A$ )))))
(declare-sort B_a_prod_stream$ 0)
(declare-fun shd$d (B_a_prod_stream$)B_a_prod$)
(declare-fun stl$d (B_a_prod_stream$)B_a_prod_stream$)
(declare-fun sCons$d (B_a_prod$ B_a_prod_stream$ )B_a_prod_stream$)
(declare-datatypes ()((B_b_prod$ (pair$c (fst$c B$ )(snd$c B$ )))))
(declare-sort B_b_prod_stream$ 0)
(declare-fun shd$e (B_b_prod_stream$)B_b_prod$)
(declare-fun stl$e (B_b_prod_stream$)B_b_prod_stream$)
(declare-fun sCons$e (B_b_prod$ B_b_prod_stream$ )B_b_prod_stream$)
(declare-datatypes ()((A_b_prod_a_prod$ (pair$d (fst$d A_b_prod$ )(snd$d A$ )))))
(declare-sort A_b_prod_a_prod_stream$ 0)
(declare-fun shd$f (A_b_prod_a_prod_stream$)A_b_prod_a_prod$)
(declare-fun stl$f (A_b_prod_a_prod_stream$)A_b_prod_a_prod_stream$)
(declare-fun sCons$f (A_b_prod_a_prod$ A_b_prod_a_prod_stream$ )A_b_prod_a_prod_stream$)
(declare-datatypes ()((A_b_prod_b_prod$ (pair$e (fst$e A_b_prod$ )(snd$e B$ )))))
(declare-sort A_b_prod_b_prod_stream$ 0)
(declare-fun shd$g (A_b_prod_b_prod_stream$)A_b_prod_b_prod$)
(declare-fun stl$g (A_b_prod_b_prod_stream$)A_b_prod_b_prod_stream$)
(declare-fun sCons$g (A_b_prod_b_prod$ A_b_prod_b_prod_stream$ )A_b_prod_b_prod_stream$)
(declare-datatypes ()((A_a_b_prod_prod$ (pair$f (fst$f A$ )(snd$f A_b_prod$ )))))
(declare-sort A_a_b_prod_prod_stream$ 0)
(declare-fun shd$h (A_a_b_prod_prod_stream$)A_a_b_prod_prod$)
(declare-fun stl$h (A_a_b_prod_prod_stream$)A_a_b_prod_prod_stream$)
(declare-fun sCons$h (A_a_b_prod_prod$ A_a_b_prod_prod_stream$ )A_a_b_prod_prod_stream$)
(declare-datatypes ()((B_a_b_prod_prod$ (pair$g (fst$g B$ )(snd$g A_b_prod$ )))))
(declare-sort B_a_b_prod_prod_stream$ 0)
(declare-fun shd$i (B_a_b_prod_prod_stream$)B_a_b_prod_prod$)
(declare-fun stl$i (B_a_b_prod_prod_stream$)B_a_b_prod_prod_stream$)
(declare-fun sCons$i (B_a_b_prod_prod$ B_a_b_prod_prod_stream$ )B_a_b_prod_prod_stream$)
(declare-datatypes ()((A_b_prod_a_b_prod_prod$ (pair$h (fst$h A_b_prod$ )(snd$h A_b_prod$ )))))
(declare-sort A_b_prod_a_b_prod_prod_stream$ 0)
(declare-fun shd$j (A_b_prod_a_b_prod_prod_stream$)A_b_prod_a_b_prod_prod$)
(declare-fun stl$j (A_b_prod_a_b_prod_prod_stream$)A_b_prod_a_b_prod_prod_stream$)
(declare-fun sCons$j (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_stream$ )A_b_prod_a_b_prod_prod_stream$)
(declare-datatypes ()((A_b_b_prod_prod$ (pair$i (fst$i A$ )(snd$i B_b_prod$ )))))
(declare-sort A_b_b_prod_prod_stream$ 0)
(declare-fun shd$k (A_b_b_prod_prod_stream$)A_b_b_prod_prod$)
(declare-fun stl$k (A_b_b_prod_prod_stream$)A_b_b_prod_prod_stream$)
(declare-fun sCons$k (A_b_b_prod_prod$ A_b_b_prod_prod_stream$ )A_b_b_prod_prod_stream$)
(declare-fun n$ ()Nat$ )
(declare-fun s1$ ()A_stream$ )
(declare-fun s2$ ()B_stream$ )
(declare-fun map$ (A_b_prod_a_b_prod_fun$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun min$ (Nat$ Nat$ )Nat$ )
(declare-fun zip$ (A_list$ B_list$ )A_b_prod_list$ )
(declare-fun map$a (A_a_b_prod_fun$ A_list$ )A_b_prod_list$ )
(declare-fun map$b (B_a_b_prod_fun$ B_list$ )A_b_prod_list$ )
(declare-fun map$c (A_b_prod_a_fun$ A_b_prod_list$ )A_list$ )
(declare-fun map$d (A_a_fun$ A_list$ )A_list$ )
(declare-fun map$e (B_a_fun$ B_list$ )A_list$ )
(declare-fun map$f (A_b_prod_b_fun$ A_b_prod_list$ )B_list$ )
(declare-fun map$g (A_b_fun$ A_list$ )B_list$ )
(declare-fun map$h (B_b_fun$ B_list$ )B_list$ )
(declare-fun size$ (A_b_prod_list$ )Nat$ )
(declare-fun smap$ (A_b_prod_a_b_prod_fun$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun snth$ (A_b_prod_stream$ Nat$ )A_b_prod$ )
(declare-fun szip$ (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun take$ (Nat$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun zero$ ()Nat$ )
(declare-fun cycle$ (A_b_prod_list$ )A_b_prod_stream$ )
(declare-fun sdrop$ (Nat$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun shift$ (A_b_prod_list$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun size$a (A_list$ )Nat$ )
(declare-fun size$b (B_list$ )Nat$ )
(declare-fun smap$a (A_a_b_prod_fun$ A_stream$ )A_b_prod_stream$ )
(declare-fun smap$b (B_a_b_prod_fun$ B_stream$ )A_b_prod_stream$ )
(declare-fun smap$c (A_b_prod_a_fun$ A_b_prod_stream$ )A_stream$ )
(declare-fun smap$d (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$e (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$f (A_b_prod_b_fun$ A_b_prod_stream$ )B_stream$ )
(declare-fun smap$g (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$h (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$i (B_b_prod_a_fun$ B_b_prod_stream$ )A_stream$ )
(declare-fun snth$a (A_stream$ Nat$ )A$ )
(declare-fun snth$b (B_stream$ Nat$ )B$ )
(declare-fun snth$c (A_a_prod_stream$ Nat$ )A_a_prod$ )
(declare-fun snth$d (B_a_prod_stream$ Nat$ )B_a_prod$ )
(declare-fun snth$e (B_b_prod_stream$ Nat$ )B_b_prod$ )
(declare-fun snth$f (A_b_prod_a_prod_stream$ Nat$ )A_b_prod_a_prod$ )
(declare-fun snth$g (A_b_prod_b_prod_stream$ Nat$ )A_b_prod_b_prod$ )
(declare-fun snth$h (A_a_b_prod_prod_stream$ Nat$ )A_a_b_prod_prod$ )
(declare-fun snth$i (B_a_b_prod_prod_stream$ Nat$ )B_a_b_prod_prod$ )
(declare-fun snth$j (A_b_prod_a_b_prod_prod_stream$ Nat$ )A_b_prod_a_b_prod_prod$ )
(declare-fun snth$k (A_b_b_prod_prod_stream$ Nat$ )A_b_b_prod_prod$ )
(declare-fun stake$ (Nat$ A_b_prod_stream$ )A_b_prod_list$ )
(declare-fun szip$a (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun szip$b (B_stream$ A_stream$ )B_a_prod_stream$ )
(declare-fun szip$c (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun szip$d (A_b_prod_stream$ A_stream$ )A_b_prod_a_prod_stream$ )
(declare-fun szip$e (A_b_prod_stream$ B_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun szip$f (A_stream$ A_b_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun szip$g (B_stream$ A_b_prod_stream$ )B_a_b_prod_prod_stream$ )
(declare-fun szip$h (A_b_prod_stream$ A_b_prod_stream$ )A_b_prod_a_b_prod_prod_stream$ )
(declare-fun szip$i (A_stream$ B_b_prod_stream$ )A_b_b_prod_prod_stream$ )
(declare-fun take$a (Nat$ A_list$ )A_list$ )
(declare-fun take$b (Nat$ B_list$ )B_list$ )
(declare-fun cycle$a (A_list$ )A_stream$ )
(declare-fun cycle$b (B_list$ )B_stream$ )
(declare-fun sdrop$a (Nat$ A_stream$ )A_stream$ )
(declare-fun sdrop$b (Nat$ B_stream$ )B_stream$ )
(declare-fun shift$a (A_list$ A_stream$ )A_stream$ )
(declare-fun shift$b (B_list$ B_stream$ )B_stream$ )
(declare-fun stake$a (Nat$ A_stream$ )A_list$ )
(declare-fun stake$b (Nat$ B_stream$ )B_list$ )
(declare-fun fun_app$ (B_b_fun$ B$ )B$ )
(declare-fun fun_app$a (B_a_fun$ B$ )A$ )
(declare-fun fun_app$b (A_b_fun$ A$ )B$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun fun_app$d (B_a_b_prod_fun$ B$ )A_b_prod$ )
(declare-fun fun_app$e (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$f (A_b_prod_b_fun$ A_b_prod$ )B$ )
(declare-fun fun_app$g (A_a_b_prod_fun$ A$ )A_b_prod$ )
(declare-fun fun_app$h (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$i (B_b_prod_a_fun$ B_b_prod$ )A$ )
(assert (! (not (= (stake$ n$ (szip$ s1$ s2$ ))(zip$ (stake$a n$ s1$ )(stake$b n$ s2$ )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ ))(= (size$ (stake$ ?v0 ?v1 ))?v0 )):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (size$a (stake$a ?v0 ?v1 ))?v0 )):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (size$b (stake$b ?v0 ?v1 ))?v0 )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ ))(= (shift$ (stake$ ?v0 ?v1 )(sdrop$ ?v0 ?v1 ))?v1 )):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shift$a (stake$a ?v0 ?v1 )(sdrop$a ?v0 ?v1 ))?v1 )):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (shift$b (stake$b ?v0 ?v1 )(sdrop$b ?v0 ?v1 ))?v1 )):named a6 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_stream$ ))(= (stl$ (szip$ ?v0 ?v1 ))(szip$ (stl$a ?v0 )(stl$b ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$c (szip$a ?v0 ?v1 ))(szip$a (stl$a ?v0 )(stl$a ?v1 )))):named a8 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_stream$ ))(= (stl$d (szip$b ?v0 ?v1 ))(szip$b (stl$b ?v0 )(stl$a ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (stl$e (szip$c ?v0 ?v1 ))(szip$c (stl$b ?v0 )(stl$b ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_stream$ ))(= (stl$f (szip$d ?v0 ?v1 ))(szip$d (stl$ ?v0 )(stl$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 B_stream$ ))(= (stl$g (szip$e ?v0 ?v1 ))(szip$e (stl$ ?v0 )(stl$b ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_b_prod_stream$ ))(= (stl$h (szip$f ?v0 ?v1 ))(szip$f (stl$a ?v0 )(stl$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_b_prod_stream$ ))(= (stl$i (szip$g ?v0 ?v1 ))(szip$g (stl$b ?v0 )(stl$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_stream$ ))(= (stl$j (szip$h ?v0 ?v1 ))(szip$h (stl$ ?v0 )(stl$ ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_b_prod_stream$ ))(= (stl$k (szip$i ?v0 ?v1 ))(szip$i (stl$a ?v0 )(stl$e ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ ))(= (= (stake$ ?v0 ?v1 )nil$ )(= ?v0 zero$ ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (= (stake$a ?v0 ?v1 )nil$a )(= ?v0 zero$ ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (= (stake$b ?v0 ?v1 )nil$b )(= ?v0 zero$ ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_b_prod_fun$ )(?v2 A_b_prod_stream$ ))(= (stake$ ?v0 (smap$ ?v1 ?v2 ))(map$ ?v1 (stake$ ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_b_prod_fun$ )(?v2 A_stream$ ))(= (stake$ ?v0 (smap$a ?v1 ?v2 ))(map$a ?v1 (stake$a ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_b_prod_fun$ )(?v2 B_stream$ ))(= (stake$ ?v0 (smap$b ?v1 ?v2 ))(map$b ?v1 (stake$b ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_stream$ ))(= (stake$a ?v0 (smap$c ?v1 ?v2 ))(map$c ?v1 (stake$ ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (stake$a ?v0 (smap$d ?v1 ?v2 ))(map$d ?v1 (stake$a ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_stream$ ))(= (stake$a ?v0 (smap$e ?v1 ?v2 ))(map$e ?v1 (stake$b ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_b_fun$ )(?v2 A_b_prod_stream$ ))(= (stake$b ?v0 (smap$f ?v1 ?v2 ))(map$f ?v1 (stake$ ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_stream$ ))(= (stake$b ?v0 (smap$g ?v1 ?v2 ))(map$g ?v1 (stake$a ?v0 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (stake$b ?v0 (smap$h ?v1 ?v2 ))(map$h ?v1 (stake$b ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(! (= (stake$ zero$ ?v0 )nil$ ):pattern ((stake$ zero$ ?v0 )))):named a29 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (stake$a zero$ ?v0 )nil$a ):pattern ((stake$a zero$ ?v0 )))):named a30 ))
(assert (! (forall ((?v0 B_stream$ ))(! (= (stake$b zero$ ?v0 )nil$b ):pattern ((stake$b zero$ ?v0 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_b_prod_stream$ ))(= (take$ ?v0 (stake$ ?v1 ?v2 ))(stake$ (min$ ?v0 ?v1 )?v2 ))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_stream$ ))(= (take$a ?v0 (stake$a ?v1 ?v2 ))(stake$a (min$ ?v0 ?v1 )?v2 ))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 B_stream$ ))(= (take$b ?v0 (stake$b ?v1 ?v2 ))(stake$b (min$ ?v0 ?v1 )?v2 ))):named a34 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$ (szip$ ?v0 ?v1 )?v2 )(pair$ (snth$a ?v0 ?v2 )(snth$b ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$c (szip$a ?v0 ?v1 )?v2 )(pair$a (snth$a ?v0 ?v2 )(snth$a ?v1 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$d (szip$b ?v0 ?v1 )?v2 )(pair$b (snth$b ?v0 ?v2 )(snth$a ?v1 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$e (szip$c ?v0 ?v1 )?v2 )(pair$c (snth$b ?v0 ?v2 )(snth$b ?v1 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$f (szip$d ?v0 ?v1 )?v2 )(pair$d (snth$ ?v0 ?v2 )(snth$a ?v1 ?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$g (szip$e ?v0 ?v1 )?v2 )(pair$e (snth$ ?v0 ?v2 )(snth$b ?v1 ?v2 )))):named a40 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (snth$h (szip$f ?v0 ?v1 )?v2 )(pair$f (snth$a ?v0 ?v2 )(snth$ ?v1 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (snth$i (szip$g ?v0 ?v1 )?v2 )(pair$g (snth$b ?v0 ?v2 )(snth$ ?v1 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (snth$j (szip$h ?v0 ?v1 )?v2 )(pair$h (snth$ ?v0 ?v2 )(snth$ ?v1 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_b_prod_stream$ )(?v2 Nat$ ))(= (snth$k (szip$i ?v0 ?v1 )?v2 )(pair$i (snth$a ?v0 ?v2 )(snth$e ?v1 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_stream$ ))(= (shd$ (szip$ ?v0 ?v1 ))(pair$ (shd$a ?v0 )(shd$b ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$c (szip$a ?v0 ?v1 ))(pair$a (shd$a ?v0 )(shd$a ?v1 )))):named a46 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_stream$ ))(= (shd$d (szip$b ?v0 ?v1 ))(pair$b (shd$b ?v0 )(shd$a ?v1 )))):named a47 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (shd$e (szip$c ?v0 ?v1 ))(pair$c (shd$b ?v0 )(shd$b ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_stream$ ))(= (shd$f (szip$d ?v0 ?v1 ))(pair$d (shd$ ?v0 )(shd$a ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 B_stream$ ))(= (shd$g (szip$e ?v0 ?v1 ))(pair$e (shd$ ?v0 )(shd$b ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_b_prod_stream$ ))(= (shd$h (szip$f ?v0 ?v1 ))(pair$f (shd$a ?v0 )(shd$ ?v1 )))):named a51 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_b_prod_stream$ ))(= (shd$i (szip$g ?v0 ?v1 ))(pair$g (shd$b ?v0 )(shd$ ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_stream$ ))(= (shd$j (szip$h ?v0 ?v1 ))(pair$h (shd$ ?v0 )(shd$ ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_b_prod_stream$ ))(= (shd$k (szip$i ?v0 ?v1 ))(pair$i (shd$a ?v0 )(shd$e ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (szip$ (sCons$a ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$ (pair$ ?v0 ?v2 )(szip$ ?v1 ?v3 ))):pattern ((szip$ (sCons$a ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a55 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (szip$a (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$c (pair$a ?v0 ?v2 )(szip$a ?v1 ?v3 ))):pattern ((szip$a (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a56 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (szip$b (sCons$b ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$d (pair$b ?v0 ?v2 )(szip$b ?v1 ?v3 ))):pattern ((szip$b (sCons$b ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a57 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (szip$c (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$e (pair$c ?v0 ?v2 )(szip$c ?v1 ?v3 ))):pattern ((szip$c (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a58 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(! (= (szip$f (sCons$a ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$h (pair$f ?v0 ?v2 )(szip$f ?v1 ?v3 ))):pattern ((szip$f (sCons$a ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a59 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(! (= (szip$g (sCons$b ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$i (pair$g ?v0 ?v2 )(szip$g ?v1 ?v3 ))):pattern ((szip$g (sCons$b ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a60 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (szip$d (sCons$ ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$f (pair$d ?v0 ?v2 )(szip$d ?v1 ?v3 ))):pattern ((szip$d (sCons$ ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a61 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (szip$e (sCons$ ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$g (pair$e ?v0 ?v2 )(szip$e ?v1 ?v3 ))):pattern ((szip$e (sCons$ ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a62 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(! (= (szip$h (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$j (pair$h ?v0 ?v2 )(szip$h ?v1 ?v3 ))):pattern ((szip$h (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a63 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 B_b_prod$ )(?v3 B_b_prod_stream$ ))(! (= (szip$i (sCons$a ?v0 ?v1 )(sCons$e ?v2 ?v3 ))(sCons$k (pair$i ?v0 ?v2 )(szip$i ?v1 ?v3 ))):pattern ((szip$i (sCons$a ?v0 ?v1 )(sCons$e ?v2 ?v3 ))))):named a64 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(=> (not (= ?v0 nil$ ))(= (stake$ (size$ ?v0 )(cycle$ ?v0 ))?v0 ))):named a65 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$a ))(= (stake$a (size$a ?v0 )(cycle$a ?v0 ))?v0 ))):named a66 ))
(assert (! (forall ((?v0 B_list$ ))(=> (not (= ?v0 nil$b ))(= (stake$b (size$b ?v0 )(cycle$b ?v0 ))?v0 ))):named a67 ))
(assert (! (forall ((?v0 B_a_b_prod_prod$ )(?v1 B_a_b_prod_prod_stream$ )(?v2 B_a_b_prod_prod$ )(?v3 B_a_b_prod_prod_stream$ ))(= (= (sCons$i ?v0 ?v1 )(sCons$i ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a68 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_stream$ )(?v2 B_b_prod$ )(?v3 B_b_prod_stream$ ))(= (= (sCons$e ?v0 ?v1 )(sCons$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a69 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod_stream$ )(?v2 B_a_prod$ )(?v3 B_a_prod_stream$ ))(= (= (sCons$d ?v0 ?v1 )(sCons$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a70 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_stream$ )(?v2 A_a_b_prod_prod$ )(?v3 A_a_b_prod_prod_stream$ ))(= (= (sCons$h ?v0 ?v1 )(sCons$h ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a71 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (sCons$c ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a72 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a73 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a74 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a75 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (= (shift$b ?v0 ?v1 )(shift$b ?v0 ?v2 ))(= ?v1 ?v2 ))):named a76 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$a ?v0 ?v1 )(shift$a ?v0 ?v2 ))(= ?v1 ?v2 ))):named a77 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a78 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (stl$b (smap$h ?v0 ?v1 ))(smap$h ?v0 (stl$b ?v1 )))):named a79 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (stl$a (smap$e ?v0 ?v1 ))(smap$e ?v0 (stl$b ?v1 )))):named a80 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (stl$b (smap$g ?v0 ?v1 ))(smap$g ?v0 (stl$a ?v1 )))):named a81 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$a (smap$d ?v0 ?v1 ))(smap$d ?v0 (stl$a ?v1 )))):named a82 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ ))(= (stl$ (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$b ?v1 )))):named a83 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ ))(= (stl$a (smap$c ?v0 ?v1 ))(smap$c ?v0 (stl$ ?v1 )))):named a84 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_stream$ ))(= (stl$b (smap$f ?v0 ?v1 ))(smap$f ?v0 (stl$ ?v1 )))):named a85 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$a ?v1 )))):named a86 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$ ?v1 )))):named a87 ))
(assert (! (forall ((?v0 B_b_prod_a_fun$ )(?v1 B_b_prod_stream$ ))(= (stl$a (smap$i ?v0 ?v1 ))(smap$i ?v0 (stl$e ?v1 )))):named a88 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (shd$b (smap$h ?v0 ?v1 ))(fun_app$ ?v0 (shd$b ?v1 )))):named a89 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (shd$a (smap$e ?v0 ?v1 ))(fun_app$a ?v0 (shd$b ?v1 )))):named a90 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (shd$b (smap$g ?v0 ?v1 ))(fun_app$b ?v0 (shd$a ?v1 )))):named a91 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$a (smap$d ?v0 ?v1 ))(fun_app$c ?v0 (shd$a ?v1 )))):named a92 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ ))(= (shd$ (smap$b ?v0 ?v1 ))(fun_app$d ?v0 (shd$b ?v1 )))):named a93 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ ))(= (shd$a (smap$c ?v0 ?v1 ))(fun_app$e ?v0 (shd$ ?v1 )))):named a94 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_stream$ ))(= (shd$b (smap$f ?v0 ?v1 ))(fun_app$f ?v0 (shd$ ?v1 )))):named a95 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$a ?v0 ?v1 ))(fun_app$g ?v0 (shd$a ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$h ?v0 (shd$ ?v1 )))):named a97 ))
(assert (! (forall ((?v0 B_b_prod_a_fun$ )(?v1 B_b_prod_stream$ ))(= (shd$a (smap$i ?v0 ?v1 ))(fun_app$i ?v0 (shd$e ?v1 )))):named a98 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$b (smap$h ?v0 ?v1 )?v2 )(fun_app$ ?v0 (snth$b ?v1 ?v2 )))):named a99 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$a (smap$e ?v0 ?v1 )?v2 )(fun_app$a ?v0 (snth$b ?v1 ?v2 )))):named a100 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$b (smap$g ?v0 ?v1 )?v2 )(fun_app$b ?v0 (snth$a ?v1 ?v2 )))):named a101 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$a (smap$d ?v0 ?v1 )?v2 )(fun_app$c ?v0 (snth$a ?v1 ?v2 )))):named a102 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$ (smap$b ?v0 ?v1 )?v2 )(fun_app$d ?v0 (snth$b ?v1 ?v2 )))):named a103 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (snth$a (smap$c ?v0 ?v1 )?v2 )(fun_app$e ?v0 (snth$ ?v1 ?v2 )))):named a104 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (snth$b (smap$f ?v0 ?v1 )?v2 )(fun_app$f ?v0 (snth$ ?v1 ?v2 )))):named a105 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$ (smap$a ?v0 ?v1 )?v2 )(fun_app$g ?v0 (snth$a ?v1 ?v2 )))):named a106 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (snth$ (smap$ ?v0 ?v1 )?v2 )(fun_app$h ?v0 (snth$ ?v1 ?v2 )))):named a107 ))
(assert (! (forall ((?v0 B_b_prod_a_fun$ )(?v1 B_b_prod_stream$ )(?v2 Nat$ ))(= (snth$a (smap$i ?v0 ?v1 )?v2 )(fun_app$i ?v0 (snth$e ?v1 ?v2 )))):named a108 ))
(check-sat )
;(get-unsat-core )
