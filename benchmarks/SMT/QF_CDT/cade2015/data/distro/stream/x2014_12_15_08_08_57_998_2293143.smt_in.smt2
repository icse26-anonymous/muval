;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-datatypes ()((Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun s1$ ()A_stream$ )
(declare-fun s2$ ()A_stream$ )
(declare-fun div$ (Nat$ Nat$ )Nat$ )
(declare-fun dvd$ (Nat$ Nat$ )Bool )
(declare-fun div$a (Int Int )Int )
(declare-fun dvd$a (Int Int )Bool )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun numeral$ (Num$ )Nat$ )
(declare-fun numeral$a (Num$ )Int )
(declare-fun sinterleave$ (A_stream$ A_stream$ )A_stream$ )
(assert (! (not (= (snth$ (sinterleave$ s1$ s2$ )n$ )(snth$ s1$ (div$ n$ (numeral$ (bit0$ one$ )))))):named a0 ))
(assert (! (dvd$ (numeral$ (bit0$ one$ ))n$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (= (div$ ?v0 (numeral$ (bit0$ one$ )))(div$ ?v1 (numeral$ (bit0$ one$ ))))(= (dvd$ (numeral$ (bit0$ one$ ))?v0 )(dvd$ (numeral$ (bit0$ one$ ))?v1 )))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (dvd$ ?v0 ?v1 )(dvd$ ?v0 ?v2 ))(= (dvd$ (div$ ?v1 ?v0 )(div$ ?v2 ?v0 ))(dvd$ ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (dvd$a ?v0 ?v1 )(dvd$a ?v0 ?v2 ))(= (dvd$a (div$a ?v1 ?v0 )(div$a ?v2 ?v0 ))(dvd$a ?v1 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a5 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a6 ))
(assert (! (forall ((?v0 Num$ ))(dvd$ (numeral$ (bit0$ one$ ))(numeral$ (bit0$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Num$ ))(dvd$a 2 (numeral$a (bit0$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(dvd$ ?v0 ?v0 )):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(dvd$ ?v0 ?v0 )):named a12 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$a ?v0 )(numeral$a ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Num$ ))(not (= one$ (bit0$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (div$a (numeral$a (bit0$ ?v0 ))(numeral$a (bit0$ ?v1 )))(div$a (numeral$a ?v0 )(numeral$a ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(not (and (dvd$ ?v0 ?v0 )(not (dvd$ ?v0 ?v0 ))))):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(not (and (dvd$ ?v0 ?v0 )(not (dvd$ ?v0 ?v0 ))))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (not (= ?v0 ?v1 ))(dvd$ ?v0 ?v1 ))(and (dvd$ ?v0 ?v1 )(not (dvd$ ?v1 ?v0 ))))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (not (= ?v0 ?v1 ))(dvd$ ?v1 ?v0 ))(and (dvd$ ?v1 ?v0 )(not (dvd$ ?v0 ?v1 ))))):named a20 ))
(check-sat )
;(get-unsat-core )
