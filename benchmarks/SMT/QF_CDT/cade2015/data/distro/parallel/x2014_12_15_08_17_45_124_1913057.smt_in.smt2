;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-datatypes ()((Dtree_dtree_prod$ (pair$ (fst$ Dtree$ )(snd$ Dtree$ )))(T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))))
(declare-fun par$ (Dtree_dtree_prod$ )Dtree$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tr2$ ()Dtree$ )
(declare-fun tr3$ ()Dtree$ )
(declare-fun trA$ ()Dtree$ )
(declare-fun trB$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun tr2a$ ()Dtree$ )
(declare-fun tr3a$ ()Dtree$ )
(declare-fun trB$a ()Dtree$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(assert (! (not (exists ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(and (= (par$ (pair$ (par$ (pair$ tr1$ tr2$ ))tr3$ ))(par$ (pair$ (par$ (pair$ ?v0 ?v1 ))?v2 )))(= trB$ (par$ (pair$ ?v0 (par$ (pair$ ?v1 ?v2 )))))))):named a0 ))
(assert (! (= trB$ (par$ (pair$ tr1$ (par$ (pair$ tr2$ tr3$ ))))):named a1 ))
(assert (! (member$ (inr$ tr1$ )(cont$ tr1a$ )):named a2 ))
(assert (! (member$ (inr$ tr2$ )(cont$ tr2a$ )):named a3 ))
(assert (! (member$ (inr$ tr3$ )(cont$ tr3a$ )):named a4 ))
(assert (! (exists ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(and (= trA$ (par$ (pair$ (par$ (pair$ ?v0 ?v1 ))?v2 )))(= trB$a (par$ (pair$ ?v0 (par$ (pair$ ?v1 ?v2 ))))))):named a5 ))
(assert (! (member$ (inr$ tr1$ )(cont$ tr1a$ )):named a6 ))
(assert (! (member$ (inr$ tr2$ )(cont$ tr2a$ )):named a7 ))
(assert (! (member$ (inr$ tr3$ )(cont$ tr3a$ )):named a8 ))
(assert (! (= trB$ (par$ (pair$ tr1$ (par$ (pair$ tr2$ tr3$ ))))):named a9 ))
(assert (! (member$ (inr$ trB$ )(cont$ (par$ (pair$ tr1a$ (par$ (pair$ tr2a$ tr3a$ )))))):named a10 ))
(assert (! (=> (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (= trB$ (par$ (pair$ ?v0 (par$ (pair$ ?v1 ?v2 )))))(and (member$ (inr$ ?v0 )(cont$ tr1a$ ))(and (member$ (inr$ ?v1 )(cont$ tr2a$ ))(member$ (inr$ ?v2 )(cont$ tr3a$ )))))false ))false ):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (par$ (pair$ ?v0 ?v1 ))(par$ (pair$ ?v1 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ ))(=> (forall ((?v1 Dtree$ )(?v2 Dtree$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= ?v0 ?v1 ))(not (= (inr$ ?v0 )(inr$ ?v1 ))))):named a19 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (member$ (inl$ ?v0 )(cont$ (par$ (pair$ ?v1 ?v2 ))))(or (member$ (inl$ ?v0 )(cont$ ?v1 ))(member$ (inl$ ?v0 )(cont$ ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ ))(=> (forall ((?v1 Dtree$ )(?v2 Dtree$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a21 ))
(check-sat )
;(get-unsat-core )
