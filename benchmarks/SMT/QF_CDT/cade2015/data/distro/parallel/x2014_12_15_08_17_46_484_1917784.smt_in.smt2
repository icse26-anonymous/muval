;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Dtree$ 0 )
(declare-datatypes ()((Dtree_dtree_prod$ (pair$ (fst$ Dtree$ )(snd$ Dtree$ )))))
(declare-fun par$ (Dtree_dtree_prod$ )Dtree$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tr2$ ()Dtree$ )
(declare-fun tr3$ ()Dtree$ )
(assert (! (not (= (par$ (pair$ (par$ (pair$ tr1$ tr2$ ))tr3$ ))(par$ (pair$ tr1$ (par$ (pair$ tr2$ tr3$ )))))):named a0 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (exists ((?v2 Dtree$ )(?v3 Dtree$ )(?v4 Dtree$ ))(and (= ?v0 (par$ (pair$ (par$ (pair$ ?v2 ?v3 ))?v4 )))(= ?v1 (par$ (pair$ ?v2 (par$ (pair$ ?v3 ?v4 )))))))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (par$ (pair$ ?v0 ?v1 ))(par$ (pair$ ?v1 ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ ))(=> (forall ((?v1 Dtree$ )(?v2 Dtree$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a3 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ ))(=> (forall ((?v1 Dtree$ )(?v2 Dtree$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a6 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ ))(exists ((?v1 Dtree$ )(?v2 Dtree$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a8 ))
(check-sat )
;(get-unsat-core )
