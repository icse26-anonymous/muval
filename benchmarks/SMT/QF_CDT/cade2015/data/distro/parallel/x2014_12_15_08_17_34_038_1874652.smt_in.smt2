;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_dtree_sum_fset$ 0 )
(declare-sort Dtree_dtree_prod_dtree_dtree_prod_bool_fun_fun$ 0 )
(declare-datatypes ()((Dtree_dtree_prod$ (pair$ (fst$ Dtree$ )(snd$ Dtree$ )))))
(declare-fun par$ (Dtree_dtree_prod$ )Dtree$ )
(declare-fun trA$ ()Dtree$ )
(declare-fun trB$ ()Dtree$ )
(declare-fun accp$ (Dtree_dtree_prod_dtree_dtree_prod_bool_fun_fun$ Dtree_dtree_prod$ )Bool )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun tr2a$ ()Dtree$ )
(declare-fun tr3a$ ()Dtree$ )
(declare-fun ccont$ (Dtree$ )T_dtree_sum_fset$ )
(declare-fun nNode$ (N$ T_dtree_sum_fset$ )Dtree$ )
(declare-fun nplus$ (N$ N$ )N$ )
(declare-fun par_r$ (Dtree_dtree_prod$ )N$ )
(declare-fun par_r_rel$ ()Dtree_dtree_prod_dtree_dtree_prod_bool_fun_fun$ )
(assert (! (not (= (nplus$ (nplus$ (root$ tr1a$ )(root$ tr2a$ ))(root$ tr3a$ ))(nplus$ (root$ tr1a$ )(nplus$ (root$ tr2a$ )(root$ tr3a$ ))))):named a0 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N$ ))(= (nplus$ (nplus$ ?v0 ?v1 )?v2 )(nplus$ ?v0 (nplus$ ?v1 ?v2 )))):named a1 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (nplus$ ?v0 ?v1 )(nplus$ ?v1 ?v0 ))):named a2 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(! (= (par_r$ (pair$ ?v0 ?v1 ))(nplus$ (root$ ?v0 )(root$ ?v1 ))):pattern ((pair$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ )(?v1 N$ ))(=> (and (= (par_r$ ?v0 )?v1 )(forall ((?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (= ?v0 (pair$ ?v2 ?v3 ))(= ?v1 (nplus$ (root$ ?v2 )(root$ ?v3 ))))false )))false )):named a4 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (root$ (node$ ?v0 ?v1 ))?v0 )):named a5 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (root$ (par$ (pair$ ?v0 ?v1 )))(nplus$ (root$ ?v0 )(root$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_fset$ ))(! (= (root$ (nNode$ ?v0 ?v1 ))?v0 ):pattern ((nNode$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(= (ccont$ ?v0 )(ccont$ ?v1 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ )(?v1 N$ ))(=> (and (= (par_r$ ?v0 )?v1 )(and (accp$ par_r_rel$ ?v0 )(forall ((?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (= ?v0 (pair$ ?v2 ?v3 ))(and (= ?v1 (nplus$ (root$ ?v2 )(root$ ?v3 )))(accp$ par_r_rel$ (pair$ ?v2 ?v3 ))))false ))))false )):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a10 ))
(assert (! (exists ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(and (= trA$ (par$ (pair$ (par$ (pair$ ?v0 ?v1 ))?v2 )))(= trB$ (par$ (pair$ ?v0 (par$ (pair$ ?v1 ?v2 ))))))):named a11 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_fset$ )(?v2 N$ )(?v3 T_dtree_sum_fset$ ))(= (= (nNode$ ?v0 ?v1 )(nNode$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 Dtree$ ))(= (nNode$ (root$ ?v0 )(ccont$ ?v0 ))?v0 )):named a13 ))
(check-sat )
;(get-unsat-core )
