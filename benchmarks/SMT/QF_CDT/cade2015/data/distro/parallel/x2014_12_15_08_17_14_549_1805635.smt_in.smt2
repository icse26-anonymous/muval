;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort T_set$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort Dtree_T_fun$ 0 )
(declare-sort T_dtree_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_dtree_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-datatypes ()((T_dtree_sum$ (inl$ (projl$ T$ ))(inr$ (projr$ Dtree$ )))(Dtree_dtree_prod$ (pair$ (fst$ Dtree$ )(snd$ Dtree$ )))))
(declare-fun uu$ ()T_T_dtree_sum_fun$ )
(declare-fun par$ (Dtree_dtree_prod$ )Dtree$ )
(declare-fun trA$ ()Dtree$ )
(declare-fun trB$ ()Dtree$ )
(declare-fun uua$ ()Dtree_T_dtree_sum_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun tr2a$ ()Dtree$ )
(declare-fun member$ (Dtree$ Dtree_set$ )Bool )
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$ )T_set$ )
(declare-fun fun_app$ (Dtree_T_dtree_sum_fun$ Dtree$ )T_dtree_sum$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun member$b (T$ T_set$ )Bool )
(declare-fun vimage$a (Dtree_T_dtree_sum_fun$ T_dtree_sum_set$ )Dtree_set$ )
(declare-fun vimage$b (Dtree_T_fun$ T_set$ )Dtree_set$ )
(declare-fun vimage$c (T_dtree_sum_T_fun$ T_set$ )T_dtree_sum_set$ )
(declare-fun vimage$d (T_dtree_fun$ Dtree_set$ )T_set$ )
(declare-fun vimage$e (T_T_fun$ T_set$ )T_set$ )
(declare-fun vimage$f (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun vimage$g (T_dtree_sum_dtree_fun$ Dtree_set$ )T_dtree_sum_set$ )
(declare-fun vimage$h (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$a (T_T_dtree_sum_fun$ T$ )T_dtree_sum$ )
(declare-fun fun_app$b (Dtree_T_fun$ Dtree$ )T$ )
(declare-fun fun_app$c (T_dtree_sum_T_fun$ T_dtree_sum$ )T$ )
(declare-fun fun_app$d (T_dtree_fun$ T$ )Dtree$ )
(declare-fun fun_app$e (T_T_fun$ T$ )T$ )
(declare-fun fun_app$f (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$g (T_dtree_sum_dtree_fun$ T_dtree_sum$ )Dtree$ )
(declare-fun fun_app$h (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$ uua$ ?v0 )(inr$ ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$a uu$ ?v0 )(inl$ ?v0 )):pattern ((fun_app$a uu$ ?v0 )))):named a1 ))
(assert (! (not (and (= (root$ tr1a$ )(root$ tr2a$ ))(and (= (vimage$ uu$ (cont$ tr1a$ ))(vimage$ uu$ (cont$ tr2a$ )))(and (forall ((?v0 Dtree$ ))(=> (member$ ?v0 (vimage$a uua$ (cont$ tr1a$ )))(exists ((?v1 Dtree$ ))(and (member$ ?v1 (vimage$a uua$ (cont$ tr2a$ )))(exists ((?v2 Dtree$ )(?v3 Dtree$ ))(and (= ?v0 (par$ (pair$ ?v2 ?v3 )))(= ?v1 (par$ (pair$ ?v3 ?v2 )))))))))(forall ((?v0 Dtree$ ))(=> (member$ ?v0 (vimage$a uua$ (cont$ tr2a$ )))(exists ((?v1 Dtree$ ))(and (member$ ?v1 (vimage$a uua$ (cont$ tr1a$ )))(exists ((?v2 Dtree$ )(?v3 Dtree$ ))(and (= ?v1 (par$ (pair$ ?v2 ?v3 )))(= ?v0 (par$ (pair$ ?v3 ?v2 ))))))))))))):named a2 ))
(assert (! (exists ((?v0 Dtree$ )(?v1 Dtree$ ))(and (= tr1a$ (par$ (pair$ ?v0 ?v1 )))(= tr2a$ (par$ (pair$ ?v1 ?v0 ))))):named a3 ))
(assert (! (exists ((?v0 Dtree$ )(?v1 Dtree$ ))(and (= trA$ (par$ (pair$ ?v0 ?v1 )))(= trB$ (par$ (pair$ ?v1 ?v0 ))))):named a4 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (member$a (inl$ ?v0 )(cont$ (par$ (pair$ ?v1 ?v2 ))))(or (member$a (inl$ ?v0 )(cont$ ?v1 ))(member$a (inl$ ?v0 )(cont$ ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ ))(=> (forall ((?v1 Dtree$ )(?v2 Dtree$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a6 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree$ ))(= (= (inl$ ?v0 )(inr$ ?v1 ))false )):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T$ ))(= (= (inr$ ?v0 )(inl$ ?v1 ))false )):named a8 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ ))(=> (and (= (vimage$ uu$ ?v0 )(vimage$ uu$ ?v1 ))(= (vimage$a uua$ ?v0 )(vimage$a uua$ ?v1 )))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_T_fun$ )(?v2 T_set$ ))(= (member$ ?v0 (vimage$b ?v1 ?v2 ))(member$b (fun_app$b ?v1 ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_fun$ )(?v2 T_set$ ))(= (member$a ?v0 (vimage$c ?v1 ?v2 ))(member$b (fun_app$c ?v1 ?v0 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 T$ )(?v1 T_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$b ?v0 (vimage$d ?v1 ?v2 ))(member$ (fun_app$d ?v1 ?v0 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T_set$ ))(= (member$b ?v0 (vimage$e ?v1 ?v2 ))(member$b (fun_app$e ?v1 ?v0 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$ ?v0 (vimage$f ?v1 ?v2 ))(member$ (fun_app$f ?v1 ?v0 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$a ?v0 (vimage$g ?v1 ?v2 ))(member$ (fun_app$g ?v1 ?v0 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (vimage$h ?v1 ?v2 ))(member$a (fun_app$h ?v1 ?v0 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b ?v0 (vimage$ ?v1 ?v2 ))(member$a (fun_app$a ?v1 ?v0 )?v2 ))):named a19 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (vimage$a ?v1 ?v2 ))(member$a (fun_app$ ?v1 ?v0 )?v2 ))):named a20 ))
(assert (! (forall ((?v0 T_dtree_fun$ )(?v1 T$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$d ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$b ?v1 (vimage$d ?v0 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 Dtree_T_fun$ )(?v1 Dtree$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= (fun_app$b ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$ ?v1 (vimage$b ?v0 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 T_dtree_sum_T_fun$ )(?v1 T_dtree_sum$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= (fun_app$c ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$a ?v1 (vimage$c ?v0 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= (fun_app$e ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$b ?v1 (vimage$e ?v0 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$f ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$ ?v1 (vimage$f ?v0 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$ )(?v1 T_dtree_sum$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$g ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$a ?v1 (vimage$g ?v0 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$h ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$a ?v1 (vimage$h ?v0 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ )(?v1 T$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$a ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$b ?v1 (vimage$ ?v0 ?v3 )))):named a28 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 Dtree$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$ ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$ ?v1 (vimage$a ?v0 ?v3 )))):named a29 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a32 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a33 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 Dtree_dtree_prod$ ))(exists ((?v1 Dtree$ )(?v2 Dtree$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a36 ))
(check-sat )
;(get-unsat-core )
