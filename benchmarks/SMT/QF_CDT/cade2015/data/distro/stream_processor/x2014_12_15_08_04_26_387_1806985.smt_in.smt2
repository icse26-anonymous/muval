;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort B_set$ 0 )
(declare-sort C_set$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort A_b_sp_nu$ 0 )
(declare-sort A_c_sp_nu$ 0 )
(declare-sort C_b_sp_nu$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort B_stream_set$ 0 )
(declare-sort C_stream_set$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_c_b_fun_fun$ 0 )
(declare-sort C_b_b_fun_fun$ 0 )
(declare-sort C_c_b_fun_fun$ 0 )
(declare-sort B_b_stream_fun$ 0 )
(declare-sort B_stream_b_fun$ 0 )
(declare-sort C_b_stream_fun$ 0 )
(declare-sort B_stream_bool_fun$ 0 )
(declare-sort C_stream_bool_fun$ 0 )
(declare-sort C_b_sp_nu_bool_fun$ 0 )
(declare-sort B_stream_stream_set$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu$ 0 )
(declare-sort B_b_b_stream_fun_fun$ 0 )
(declare-sort B_b_stream_b_fun_fun$ 0 )
(declare-sort B_c_b_stream_fun_fun$ 0 )
(declare-sort B_stream_b_b_fun_fun$ 0 )
(declare-sort B_stream_c_b_fun_fun$ 0 )
(declare-sort C_b_stream_b_fun_fun$ 0 )
(declare-sort B_stream_b_stream_fun$ 0 )
(declare-sort B_b_stream_bool_fun_fun$ 0 )
(declare-sort C_c_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_stream_bool_fun$ 0 )
(declare-sort C_c_b_c_b_sp_nu_sp_mu_fun$ 0 )
(declare-sort B_stream_stream_stream_set$ 0 )
(declare-sort B_stream_b_stream_bool_fun_fun$ 0 )
(declare-sort C_stream_c_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_stream_stream_bool_fun$ 0 )
(declare-sort B_stream_b_stream_b_stream_fun_fun$ 0 )
(declare-sort C_stream_b_stream_b_stream_fun_fun$ 0 )
(declare-sort B_stream_b_stream_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_stream_b_stream_b_stream_fun_fun$ 0 )
(declare-sort B_stream_stream_b_stream_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_stream_b_stream_stream_stream_bool_fun_fun$ 0 )
(declare-sort B_stream$ 0)
(declare-sort A_stream$ 0)
(declare-sort C_stream$ 0)
(declare-sort B_stream_stream$ 0)
(declare-sort B_stream_stream_stream$ 0)
(declare-fun shd$ (B_stream$)B$)
(declare-fun stl$ (B_stream$)B_stream$)
(declare-fun sCons$ (B$ B_stream$ )B_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-fun shd$b (C_stream$)C$)
(declare-fun stl$b (C_stream$)C_stream$)
(declare-fun sCons$b (C$ C_stream$ )C_stream$)
(declare-fun shd$c (B_stream_stream$)B_stream$)
(declare-fun stl$c (B_stream_stream$)B_stream_stream$)
(declare-fun sCons$c (B_stream$ B_stream_stream$ )B_stream_stream$)
(declare-fun shd$d (B_stream_stream_stream$)B_stream_stream$)
(declare-fun stl$d (B_stream_stream_stream$)B_stream_stream_stream$)
(declare-fun sCons$d (B_stream_stream$ B_stream_stream_stream$ )B_stream_stream_stream$)
(declare-datatypes ()((B_c_b_sp_nu_prod$ (pair$ (fst$ B$ )(snd$ C_b_sp_nu$ )))(B_c_b_sp_nu_prod_c_stream_prod$ (pair$a (fst$a B_c_b_sp_nu_prod$ )(snd$a C_stream$ )))))
(declare-fun b$ ()B$ )
(declare-fun sb$ ()A_stream$ )
(declare-fun sp$ ()C_b_sp_nu$ )
(declare-fun uu$ (B_stream_stream_set$ )B_stream_stream_bool_fun$ )
(declare-fun get$ (C_c_b_c_b_sp_nu_sp_mu_fun$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun out$ (C_b_sp_nu$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun put$ (B$ C_b_sp_nu$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun spb$ ()C_b_sp_nu$ )
(declare-fun uua$ (B_stream_set$ )B_stream_bool_fun$ )
(declare-fun uub$ (B_set$ )B_bool_fun$ )
(declare-fun smap$ (B_stream_b_fun$ B_stream_stream$ )B_stream$ )
(declare-fun sp_b$ ()A_c_sp_nu$ )
(declare-fun sset$ (B_stream_stream_stream$ )B_stream_stream_set$ )
(declare-fun smap$a (C_b_fun$ C_stream$ )B_stream$ )
(declare-fun smap$b (B_b_stream_fun$ B_stream$ )B_stream_stream$ )
(declare-fun smap$c (B_stream_b_stream_fun$ B_stream_stream$ )B_stream_stream$ )
(declare-fun smap$d (C_b_stream_fun$ C_stream$ )B_stream_stream$ )
(declare-fun smap$e (B_b_fun$ )B_stream_b_stream_fun$ )
(declare-fun smap2$ (B_b_b_fun_fun$ )B_stream_b_stream_b_stream_fun_fun$ )
(declare-fun sset$a (C_stream$ )C_set$ )
(declare-fun sset$b (B_stream_stream$ )B_stream_set$ )
(declare-fun sset$c (B_stream$ )B_set$ )
(declare-fun member$ (B_stream_stream$ B_stream_stream_set$ )Bool )
(declare-fun run_mu$ (C_b_c_b_sp_nu_sp_mu$ C_stream$ )B_c_b_sp_nu_prod_c_stream_prod$ )
(declare-fun run_nu$ (A_b_sp_nu$ A_stream$ )B_stream$ )
(declare-fun smap2$a (B_c_b_fun_fun$ B_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$b (C_b_b_fun_fun$ )C_stream_b_stream_b_stream_fun_fun$ )
(declare-fun smap2$c (C_c_b_fun_fun$ C_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$d (B_b_stream_b_fun_fun$ B_stream$ B_stream_stream$ )B_stream$ )
(declare-fun smap2$e (B_stream_b_b_fun_fun$ )B_stream_stream_b_stream_b_stream_fun_fun$ )
(declare-fun smap2$f (B_stream_c_b_fun_fun$ B_stream_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$g (C_b_stream_b_fun_fun$ C_stream$ B_stream_stream$ )B_stream$ )
(declare-fun smap2$h (B_b_b_stream_fun_fun$ B_stream$ B_stream$ )B_stream_stream$ )
(declare-fun smap2$i (B_c_b_stream_fun_fun$ B_stream$ C_stream$ )B_stream_stream$ )
(declare-fun collect$ (B_bool_fun$ )B_set$ )
(declare-fun fun_app$ (B_stream_stream_bool_fun$ B_stream_stream$ )Bool )
(declare-fun member$a (B_stream$ B_stream_set$ )Bool )
(declare-fun member$b (B$ B_set$ )Bool )
(declare-fun member$c (B_stream_stream_stream$ B_stream_stream_stream_set$ )Bool )
(declare-fun member$d (C_stream$ C_stream_set$ )Bool )
(declare-fun member$e (C$ C_set$ )Bool )
(declare-fun run_nu$a (C_b_sp_nu$ C_stream$ )B_stream$ )
(declare-fun run_nu$b (A_c_sp_nu$ A_stream$ )C_stream$ )
(declare-fun smember$ (B_stream$ )B_stream_stream_bool_fun$ )
(declare-fun streams$ (B_stream_stream_set$ )B_stream_stream_stream_set$ )
(declare-fun collect$a (B_stream_bool_fun$ )B_stream_set$ )
(declare-fun collect$b (B_stream_stream_bool_fun$ )B_stream_stream_set$ )
(declare-fun fun_app$a (B_stream_bool_fun$ B_stream$ )Bool )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$c (B_stream_stream_b_stream_stream_bool_fun_fun$ B_stream_stream$ )B_stream_stream_bool_fun$ )
(declare-fun fun_app$d (C_stream_bool_fun$ C_stream$ )Bool )
(declare-fun fun_app$e (C_stream_c_stream_bool_fun_fun$ C_stream$ )C_stream_bool_fun$ )
(declare-fun fun_app$f (B_stream_b_stream_bool_fun_fun$ B_stream$ )B_stream_bool_fun$ )
(declare-fun fun_app$g (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$h (B_stream_b_stream_fun$ B_stream$ )B_stream$ )
(declare-fun fun_app$i (C_c_b_c_b_sp_nu_sp_mu_fun$ C$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun fun_app$j (B_stream_stream_stream_bool_fun$ B_stream_stream_stream$ )Bool )
(declare-fun fun_app$k (B_stream_stream_b_stream_stream_stream_bool_fun_fun$ B_stream_stream$ )B_stream_stream_stream_bool_fun$ )
(declare-fun fun_app$l (C_c_stream_bool_fun_fun$ C$ )C_stream_bool_fun$ )
(declare-fun fun_app$m (B_stream_b_stream_stream_bool_fun_fun$ B_stream$ )B_stream_stream_bool_fun$ )
(declare-fun fun_app$n (B_b_stream_bool_fun_fun$ B$ )B_stream_bool_fun$ )
(declare-fun fun_app$o (B_stream_b_stream_b_stream_fun_fun$ B_stream$ )B_stream_b_stream_fun$ )
(declare-fun fun_app$p (B_b_fun$ B$ )B$ )
(declare-fun fun_app$q (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun fun_app$r (C_b_fun$ C$ )B$ )
(declare-fun fun_app$s (B_c_b_fun_fun$ B$ )C_b_fun$ )
(declare-fun fun_app$t (C_stream_b_stream_b_stream_fun_fun$ C_stream$ )B_stream_b_stream_fun$ )
(declare-fun fun_app$u (C_b_b_fun_fun$ C$ )B_b_fun$ )
(declare-fun fun_app$v (C_c_b_fun_fun$ C$ )C_b_fun$ )
(declare-fun fun_app$w (B_stream_b_fun$ B_stream$ )B$ )
(declare-fun fun_app$x (B_b_stream_b_fun_fun$ B$ )B_stream_b_fun$ )
(declare-fun fun_app$y (B_stream_stream_b_stream_b_stream_fun_fun$ B_stream_stream$ )B_stream_b_stream_fun$ )
(declare-fun fun_app$z (B_stream_b_b_fun_fun$ B_stream$ )B_b_fun$ )
(declare-fun smember$a (B$ )B_stream_bool_fun$ )
(declare-fun smember$b (B_stream_stream$ )B_stream_stream_stream_bool_fun$ )
(declare-fun streams$a (C_set$ )C_stream_set$ )
(declare-fun streams$b (B_stream_set$ )B_stream_stream_set$ )
(declare-fun streams$c (B_set$ )B_stream_set$ )
(declare-fun fun_app$aa (B_stream_c_b_fun_fun$ B_stream$ )C_b_fun$ )
(declare-fun fun_app$ab (C_b_stream_b_fun_fun$ C$ )B_stream_b_fun$ )
(declare-fun fun_app$ac (B_b_stream_fun$ B$ )B_stream$ )
(declare-fun fun_app$ad (B_b_b_stream_fun_fun$ B$ )B_b_stream_fun$ )
(declare-fun fun_app$ae (C_b_stream_fun$ C$ )B_stream$ )
(declare-fun fun_app$af (B_c_b_stream_fun_fun$ B$ )C_b_stream_fun$ )
(declare-fun fun_app$ag (C_b_sp_nu_bool_fun$ C_b_sp_nu$ )Bool )
(declare-fun pred_sp_mu$ (B_bool_fun$ C_b_sp_nu_bool_fun$ C_b_c_b_sp_nu_sp_mu$ )Bool )
(declare-fun pred_stream$ (B_stream_bool_fun$ )B_stream_stream_bool_fun$ )
(declare-fun sdrop_while$ (B_stream_bool_fun$ B_stream_stream$ )B_stream_stream$ )
(declare-fun sinterleave$ (C_stream$ C_stream$ )C_stream$ )
(declare-fun sp_nu_comp2$ (C_b_sp_nu$ A_c_sp_nu$ )A_b_sp_nu$ )
(declare-fun pred_stream$a (B_bool_fun$ )B_stream_bool_fun$ )
(declare-fun sdrop_while$a (C_bool_fun$ C_stream$ )C_stream$ )
(declare-fun sdrop_while$b (B_bool_fun$ )B_stream_b_stream_fun$ )
(declare-fun sinterleave$a (B_stream_stream$ B_stream_stream$ )B_stream_stream$ )
(declare-fun sinterleave$b (B_stream$ )B_stream_b_stream_fun$ )
(assert (! (forall ((?v0 B_stream_stream_set$ )(?v1 B_stream_stream$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 B_stream_set$ )(?v1 B_stream$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B$ ))(! (= (fun_app$b (uub$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$b (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (not (and (= (shd$ (run_nu$ (sp_nu_comp2$ spb$ sp_b$ )sb$ ))(shd$ (run_nu$a spb$ (run_nu$b sp_b$ sb$ ))))(exists ((?v0 C_b_sp_nu$ )(?v1 A_c_sp_nu$ )(?v2 A_stream$ ))(and (= (stl$ (run_nu$ (sp_nu_comp2$ spb$ sp_b$ )sb$ ))(run_nu$ (sp_nu_comp2$ ?v0 ?v1 )?v2 ))(= (stl$ (run_nu$a spb$ (run_nu$b sp_b$ sb$ )))(run_nu$a ?v0 (run_nu$b ?v1 ?v2 ))))))):named a3 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_stream$ ))(=> (and (= (shd$c ?v0 )(shd$c ?v1 ))(= (stl$c ?v0 )(stl$c ?v1 )))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_stream$ ))(=> (and (= (shd$b ?v0 )(shd$b ?v1 ))(= (stl$b ?v0 )(stl$b ?v1 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 B_stream_stream_b_stream_stream_bool_fun_fun$ )(?v1 B_stream_stream$ )(?v2 B_stream_stream$ ))(=> (and (fun_app$ (fun_app$c ?v0 ?v1 )?v2 )(forall ((?v3 B_stream_stream$ )(?v4 B_stream_stream$ ))(=> (fun_app$ (fun_app$c ?v0 ?v3 )?v4 )(and (= (shd$c ?v3 )(shd$c ?v4 ))(or (fun_app$ (fun_app$c ?v0 (stl$c ?v3 ))(stl$c ?v4 ))(= (stl$c ?v3 )(stl$c ?v4 )))))))(= ?v1 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 C_stream_c_stream_bool_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v3 C_stream$ )(?v4 C_stream$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(and (= (shd$b ?v3 )(shd$b ?v4 ))(or (fun_app$d (fun_app$e ?v0 (stl$b ?v3 ))(stl$b ?v4 ))(= (stl$b ?v3 )(stl$b ?v4 )))))))(= ?v1 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(=> (and (fun_app$a (fun_app$f ?v0 ?v1 )?v2 )(forall ((?v3 B_stream$ )(?v4 B_stream$ ))(=> (fun_app$a (fun_app$f ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$a (fun_app$f ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 B_stream_stream_b_stream_stream_bool_fun_fun$ )(?v1 B_stream_stream$ )(?v2 B_stream_stream$ ))(=> (and (fun_app$ (fun_app$c ?v0 ?v1 )?v2 )(forall ((?v3 B_stream_stream$ )(?v4 B_stream_stream$ ))(=> (fun_app$ (fun_app$c ?v0 ?v3 )?v4 )(and (= (shd$c ?v3 )(shd$c ?v4 ))(fun_app$ (fun_app$c ?v0 (stl$c ?v3 ))(stl$c ?v4 ))))))(= ?v1 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 C_stream_c_stream_bool_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v3 C_stream$ )(?v4 C_stream$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(and (= (shd$b ?v3 )(shd$b ?v4 ))(fun_app$d (fun_app$e ?v0 (stl$b ?v3 ))(stl$b ?v4 ))))))(= ?v1 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(=> (and (fun_app$a (fun_app$f ?v0 ?v1 )?v2 )(forall ((?v3 B_stream$ )(?v4 B_stream$ ))(=> (fun_app$a (fun_app$f ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$a (fun_app$f ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a12 ))
(assert (! (= (put$ b$ sp$ )(out$ spb$ )):named a13 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_stream_stream$ ))(= (sdrop_while$ ?v0 ?v1 )(ite (fun_app$a ?v0 (shd$c ?v1 ))(sdrop_while$ ?v0 (stl$c ?v1 ))?v1 ))):named a14 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_stream$ ))(= (sdrop_while$a ?v0 ?v1 )(ite (fun_app$g ?v0 (shd$b ?v1 ))(sdrop_while$a ?v0 (stl$b ?v1 ))?v1 ))):named a15 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_stream$ ))(= (fun_app$h (sdrop_while$b ?v0 )?v1 )(ite (fun_app$b ?v0 (shd$ ?v1 ))(fun_app$h (sdrop_while$b ?v0 )(stl$ ?v1 ))?v1 ))):named a16 ))
(assert (! (forall ((?v0 C_stream$ ))(= (sCons$b (shd$b ?v0 )(stl$b ?v0 ))?v0 )):named a17 ))
(assert (! (forall ((?v0 B_stream_stream$ ))(= (sCons$c (shd$c ?v0 )(stl$c ?v0 ))?v0 )):named a18 ))
(assert (! (forall ((?v0 B_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a19 ))
(assert (! (forall ((?v0 B_stream_stream_stream$ )(?v1 B_stream_stream_set$ ))(=> (and (member$c (stl$d ?v0 )(streams$ ?v1 ))(member$ (shd$d ?v0 )?v1 ))(member$c ?v0 (streams$ ?v1 )))):named a20 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (and (member$d (stl$b ?v0 )(streams$a ?v1 ))(member$e (shd$b ?v0 )?v1 ))(member$d ?v0 (streams$a ?v1 )))):named a21 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (and (member$ (stl$c ?v0 )(streams$b ?v1 ))(member$a (shd$c ?v0 )?v1 ))(member$ ?v0 (streams$b ?v1 )))):named a22 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (and (member$a (stl$ ?v0 )(streams$c ?v1 ))(member$b (shd$ ?v0 )?v1 ))(member$a ?v0 (streams$c ?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_stream_stream_stream$ )(?v1 B_stream_stream_set$ ))(=> (and (member$c ?v0 (streams$ ?v1 ))(=> (and (member$ (shd$d ?v0 )?v1 )(member$c (stl$d ?v0 )(streams$ ?v1 )))false ))false )):named a24 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (and (member$d ?v0 (streams$a ?v1 ))(=> (and (member$e (shd$b ?v0 )?v1 )(member$d (stl$b ?v0 )(streams$a ?v1 )))false ))false )):named a25 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (and (member$ ?v0 (streams$b ?v1 ))(=> (and (member$a (shd$c ?v0 )?v1 )(member$ (stl$c ?v0 )(streams$b ?v1 )))false ))false )):named a26 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (and (member$a ?v0 (streams$c ?v1 ))(=> (and (member$b (shd$ ?v0 )?v1 )(member$a (stl$ ?v0 )(streams$c ?v1 )))false ))false )):named a27 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C_stream$ ))(! (= (run_mu$ (get$ ?v0 )?v1 )(run_mu$ (fun_app$i ?v0 (shd$b ?v1 ))(stl$b ?v1 ))):pattern ((run_mu$ (get$ ?v0 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_stream_stream$ )(?v2 B_stream_stream_b_stream_stream_stream_bool_fun_fun$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v3 B_stream_stream_stream$ ))(fun_app$j (fun_app$k ?v2 (shd$d ?v3 ))?v3 ))(forall ((?v3 B_stream_stream_stream$ )(?v4 B_stream_stream$ ))(=> (and (member$ ?v4 (sset$ (stl$d ?v3 )))(fun_app$j (fun_app$k ?v2 ?v4 )(stl$d ?v3 )))(fun_app$j (fun_app$k ?v2 ?v4 )?v3 )))))(fun_app$j (fun_app$k ?v2 ?v0 )?v1 ))):named a29 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ )(?v2 C_c_stream_bool_fun_fun$ ))(=> (and (member$e ?v0 (sset$a ?v1 ))(and (forall ((?v3 C_stream$ ))(fun_app$d (fun_app$l ?v2 (shd$b ?v3 ))?v3 ))(forall ((?v3 C_stream$ )(?v4 C$ ))(=> (and (member$e ?v4 (sset$a (stl$b ?v3 )))(fun_app$d (fun_app$l ?v2 ?v4 )(stl$b ?v3 )))(fun_app$d (fun_app$l ?v2 ?v4 )?v3 )))))(fun_app$d (fun_app$l ?v2 ?v0 )?v1 ))):named a30 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ )(?v2 B_stream_b_stream_stream_bool_fun_fun$ ))(=> (and (member$a ?v0 (sset$b ?v1 ))(and (forall ((?v3 B_stream_stream$ ))(fun_app$ (fun_app$m ?v2 (shd$c ?v3 ))?v3 ))(forall ((?v3 B_stream_stream$ )(?v4 B_stream$ ))(=> (and (member$a ?v4 (sset$b (stl$c ?v3 )))(fun_app$ (fun_app$m ?v2 ?v4 )(stl$c ?v3 )))(fun_app$ (fun_app$m ?v2 ?v4 )?v3 )))))(fun_app$ (fun_app$m ?v2 ?v0 )?v1 ))):named a31 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B_b_stream_bool_fun_fun$ ))(=> (and (member$b ?v0 (sset$c ?v1 ))(and (forall ((?v3 B_stream$ ))(fun_app$a (fun_app$n ?v2 (shd$ ?v3 ))?v3 ))(forall ((?v3 B_stream$ )(?v4 B$ ))(=> (and (member$b ?v4 (sset$c (stl$ ?v3 )))(fun_app$a (fun_app$n ?v2 ?v4 )(stl$ ?v3 )))(fun_app$a (fun_app$n ?v2 ?v4 )?v3 )))))(fun_app$a (fun_app$n ?v2 ?v0 )?v1 ))):named a32 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C_c_b_c_b_sp_nu_sp_mu_fun$ ))(= (= (get$ ?v0 )(get$ ?v1 ))(= ?v0 ?v1 ))):named a33 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ )(?v2 B_stream$ )(?v3 B_stream_stream$ ))(= (= (sCons$c ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 B$ )(?v1 C_b_sp_nu$ )(?v2 B$ )(?v3 C_b_sp_nu$ ))(= (= (put$ ?v0 ?v1 )(put$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_stream_stream$ )(?v2 B_stream_stream_set$ ))(= (member$c (sCons$d ?v0 ?v1 )(streams$ ?v2 ))(and (member$ ?v0 ?v2 )(member$c ?v1 (streams$ ?v2 ))))):named a37 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ )(?v2 B_stream_set$ ))(= (member$ (sCons$c ?v0 ?v1 )(streams$b ?v2 ))(and (member$a ?v0 ?v2 )(member$ ?v1 (streams$b ?v2 ))))):named a38 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B_set$ ))(= (member$a (sCons$ ?v0 ?v1 )(streams$c ?v2 ))(and (member$b ?v0 ?v2 )(member$a ?v1 (streams$c ?v2 ))))):named a39 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_stream$ )(?v2 B_stream_stream$ ))(! (= (sdrop_while$ ?v0 (sCons$c ?v1 ?v2 ))(ite (fun_app$a ?v0 ?v1 )(sdrop_while$ ?v0 ?v2 )(sCons$c ?v1 ?v2 ))):pattern ((sdrop_while$ ?v0 (sCons$c ?v1 ?v2 ))))):named a40 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$h (sdrop_while$b ?v0 )(sCons$ ?v1 ?v2 ))(ite (fun_app$b ?v0 ?v1 )(fun_app$h (sdrop_while$b ?v0 )?v2 )(sCons$ ?v1 ?v2 ))):pattern ((fun_app$h (sdrop_while$b ?v0 )(sCons$ ?v1 ?v2 ))))):named a41 ))
(assert (! (forall ((?v0 B_stream_stream_stream$ )(?v1 B_stream_stream_set$ ))(= (member$c ?v0 (streams$ ?v1 ))(exists ((?v2 B_stream_stream$ )(?v3 B_stream_stream_stream$ ))(and (= ?v0 (sCons$d ?v2 ?v3 ))(and (member$ ?v2 ?v1 )(member$c ?v3 (streams$ ?v1 ))))))):named a42 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(= (member$ ?v0 (streams$b ?v1 ))(exists ((?v2 B_stream$ )(?v3 B_stream_stream$ ))(and (= ?v0 (sCons$c ?v2 ?v3 ))(and (member$a ?v2 ?v1 )(member$ ?v3 (streams$b ?v1 ))))))):named a43 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(= (member$a ?v0 (streams$c ?v1 ))(exists ((?v2 B$ )(?v3 B_stream$ ))(and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$b ?v2 ?v1 )(member$a ?v3 (streams$c ?v1 ))))))):named a44 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ ))(=> (and (forall ((?v1 C_c_b_c_b_sp_nu_sp_mu_fun$ ))(=> (= ?v0 (get$ ?v1 ))false ))(forall ((?v1 B$ )(?v2 C_b_sp_nu$ ))(=> (= ?v0 (put$ ?v1 ?v2 ))false )))false )):named a45 ))
(assert (! (forall ((?v0 B_stream_stream$ ))(=> (forall ((?v1 B_stream$ )(?v2 B_stream_stream$ ))(=> (= ?v0 (sCons$c ?v1 ?v2 ))false ))false )):named a46 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (forall ((?v1 B$ )(?v2 B_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a47 ))
(assert (! (forall ((?v0 C_b_sp_nu$ )(?v1 C_b_sp_nu$ ))(=> (= (out$ ?v0 )(out$ ?v1 ))(= ?v0 ?v1 ))):named a48 ))
(assert (! (forall ((?v0 B_stream_stream_stream$ )(?v1 B_stream_stream_set$ ))(=> (and (member$c ?v0 (streams$ ?v1 ))(forall ((?v2 B_stream_stream$ )(?v3 B_stream_stream_stream$ ))(=> (and (= ?v0 (sCons$d ?v2 ?v3 ))(and (member$ ?v2 ?v1 )(member$c ?v3 (streams$ ?v1 ))))false )))false )):named a49 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (and (member$ ?v0 (streams$b ?v1 ))(forall ((?v2 B_stream$ )(?v3 B_stream_stream$ ))(=> (and (= ?v0 (sCons$c ?v2 ?v3 ))(and (member$a ?v2 ?v1 )(member$ ?v3 (streams$b ?v1 ))))false )))false )):named a50 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (and (member$a ?v0 (streams$c ?v1 ))(forall ((?v2 B$ )(?v3 B_stream$ ))(=> (and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$b ?v2 ?v1 )(member$a ?v3 (streams$c ?v1 ))))false )))false )):named a51 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_stream_stream$ )(?v2 B_stream_stream_b_stream_stream_stream_bool_fun_fun$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v3 B_stream_stream$ )(?v4 B_stream_stream_stream$ ))(fun_app$j (fun_app$k ?v2 ?v3 )(sCons$d ?v3 ?v4 )))(forall ((?v3 B_stream_stream$ )(?v4 B_stream_stream_stream$ )(?v5 B_stream_stream$ ))(=> (and (member$ ?v5 (sset$ ?v4 ))(fun_app$j (fun_app$k ?v2 ?v5 )?v4 ))(fun_app$j (fun_app$k ?v2 ?v5 )(sCons$d ?v3 ?v4 ))))))(fun_app$j (fun_app$k ?v2 ?v0 )?v1 ))):named a52 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ )(?v2 B_stream_b_stream_stream_bool_fun_fun$ ))(=> (and (member$a ?v0 (sset$b ?v1 ))(and (forall ((?v3 B_stream$ )(?v4 B_stream_stream$ ))(fun_app$ (fun_app$m ?v2 ?v3 )(sCons$c ?v3 ?v4 )))(forall ((?v3 B_stream$ )(?v4 B_stream_stream$ )(?v5 B_stream$ ))(=> (and (member$a ?v5 (sset$b ?v4 ))(fun_app$ (fun_app$m ?v2 ?v5 )?v4 ))(fun_app$ (fun_app$m ?v2 ?v5 )(sCons$c ?v3 ?v4 ))))))(fun_app$ (fun_app$m ?v2 ?v0 )?v1 ))):named a53 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B_b_stream_bool_fun_fun$ ))(=> (and (member$b ?v0 (sset$c ?v1 ))(and (forall ((?v3 B$ )(?v4 B_stream$ ))(fun_app$a (fun_app$n ?v2 ?v3 )(sCons$ ?v3 ?v4 )))(forall ((?v3 B$ )(?v4 B_stream$ )(?v5 B$ ))(=> (and (member$b ?v5 (sset$c ?v4 ))(fun_app$a (fun_app$n ?v2 ?v5 )?v4 ))(fun_app$a (fun_app$n ?v2 ?v5 )(sCons$ ?v3 ?v4 ))))))(fun_app$a (fun_app$n ?v2 ?v0 )?v1 ))):named a54 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_stream_stream$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v2 B_stream_stream_stream$ ))(=> (= ?v1 (sCons$d ?v0 ?v2 ))false ))(forall ((?v2 B_stream_stream$ )(?v3 B_stream_stream_stream$ ))(=> (and (= ?v1 (sCons$d ?v2 ?v3 ))(member$ ?v0 (sset$ ?v3 )))false ))))false )):named a55 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ ))(=> (and (member$a ?v0 (sset$b ?v1 ))(and (forall ((?v2 B_stream_stream$ ))(=> (= ?v1 (sCons$c ?v0 ?v2 ))false ))(forall ((?v2 B_stream$ )(?v3 B_stream_stream$ ))(=> (and (= ?v1 (sCons$c ?v2 ?v3 ))(member$a ?v0 (sset$b ?v3 )))false ))))false )):named a56 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(=> (and (member$b ?v0 (sset$c ?v1 ))(and (forall ((?v2 B_stream$ ))(=> (= ?v1 (sCons$ ?v0 ?v2 ))false ))(forall ((?v2 B$ )(?v3 B_stream$ ))(=> (and (= ?v1 (sCons$ ?v2 ?v3 ))(member$b ?v0 (sset$c ?v3 )))false ))))false )):named a57 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_stream_stream$ )(?v2 B_stream_stream$ ))(=> (member$ ?v0 (sset$ ?v1 ))(member$ ?v0 (sset$ (sCons$d ?v2 ?v1 ))))):named a58 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ )(?v2 B_stream$ ))(=> (member$a ?v0 (sset$b ?v1 ))(member$a ?v0 (sset$b (sCons$c ?v2 ?v1 ))))):named a59 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ ))(=> (member$b ?v0 (sset$c ?v1 ))(member$b ?v0 (sset$c (sCons$ ?v2 ?v1 ))))):named a60 ))
(assert (! (forall ((?v0 B_stream_stream_stream_bool_fun$ )(?v1 B_stream_stream_stream$ )(?v2 B_stream_stream_set$ ))(=> (and (fun_app$j ?v0 ?v1 )(forall ((?v3 B_stream_stream_stream$ ))(=> (fun_app$j ?v0 ?v3 )(exists ((?v4 B_stream_stream$ )(?v5 B_stream_stream_stream$ ))(and (= ?v3 (sCons$d ?v4 ?v5 ))(and (member$ ?v4 ?v2 )(or (fun_app$j ?v0 ?v5 )(member$c ?v5 (streams$ ?v2 )))))))))(member$c ?v1 (streams$ ?v2 )))):named a61 ))
(assert (! (forall ((?v0 B_stream_stream_bool_fun$ )(?v1 B_stream_stream$ )(?v2 B_stream_set$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 B_stream_stream$ ))(=> (fun_app$ ?v0 ?v3 )(exists ((?v4 B_stream$ )(?v5 B_stream_stream$ ))(and (= ?v3 (sCons$c ?v4 ?v5 ))(and (member$a ?v4 ?v2 )(or (fun_app$ ?v0 ?v5 )(member$ ?v5 (streams$b ?v2 )))))))))(member$ ?v1 (streams$b ?v2 )))):named a62 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_stream$ )(?v2 B_set$ ))(=> (and (fun_app$a ?v0 ?v1 )(forall ((?v3 B_stream$ ))(=> (fun_app$a ?v0 ?v3 )(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v3 (sCons$ ?v4 ?v5 ))(and (member$b ?v4 ?v2 )(or (fun_app$a ?v0 ?v5 )(member$a ?v5 (streams$c ?v2 )))))))))(member$a ?v1 (streams$c ?v2 )))):named a63 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 B$ )(?v2 C_b_sp_nu$ ))(not (= (get$ ?v0 )(put$ ?v1 ?v2 )))):named a64 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_stream_stream$ ))(member$ ?v0 (sset$ (sCons$d ?v0 ?v1 )))):named a65 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ ))(member$a ?v0 (sset$b (sCons$c ?v0 ?v1 )))):named a66 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(member$b ?v0 (sset$c (sCons$ ?v0 ?v1 )))):named a67 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ ))(! (= (stl$b (sCons$b ?v0 ?v1 ))?v1 ):pattern ((sCons$b ?v0 ?v1 )))):named a68 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ ))(! (= (stl$c (sCons$c ?v0 ?v1 ))?v1 ):pattern ((sCons$c ?v0 ?v1 )))):named a69 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (stl$ (sCons$ ?v0 ?v1 ))?v1 ):pattern ((sCons$ ?v0 ?v1 )))):named a70 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ ))(! (= (shd$b (sCons$b ?v0 ?v1 ))?v0 ):pattern ((sCons$b ?v0 ?v1 )))):named a71 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ ))(! (= (shd$c (sCons$c ?v0 ?v1 ))?v0 ):pattern ((sCons$c ?v0 ?v1 )))):named a72 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (shd$ (sCons$ ?v0 ?v1 ))?v0 ):pattern ((sCons$ ?v0 ?v1 )))):named a73 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_stream_stream$ ))(=> (member$ ?v0 (sset$ (stl$d ?v1 )))(member$ ?v0 (sset$ ?v1 )))):named a74 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ ))(=> (member$e ?v0 (sset$a (stl$b ?v1 )))(member$e ?v0 (sset$a ?v1 )))):named a75 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ ))(=> (member$a ?v0 (sset$b (stl$c ?v1 )))(member$a ?v0 (sset$b ?v1 )))):named a76 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(=> (member$b ?v0 (sset$c (stl$ ?v1 )))(member$b ?v0 (sset$c ?v1 )))):named a77 ))
(assert (! (forall ((?v0 B_stream_stream_stream$ ))(member$ (shd$d ?v0 )(sset$ ?v0 ))):named a78 ))
(assert (! (forall ((?v0 C_stream$ ))(member$e (shd$b ?v0 )(sset$a ?v0 ))):named a79 ))
(assert (! (forall ((?v0 B_stream_stream$ ))(member$a (shd$c ?v0 )(sset$b ?v0 ))):named a80 ))
(assert (! (forall ((?v0 B_stream$ ))(member$b (shd$ ?v0 )(sset$c ?v0 ))):named a81 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (member$ ?v0 (streams$b ?v1 ))(member$ (stl$c ?v0 )(streams$b ?v1 )))):named a82 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (member$d ?v0 (streams$a ?v1 ))(member$d (stl$b ?v0 )(streams$a ?v1 )))):named a83 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (member$a ?v0 (streams$c ?v1 ))(member$a (stl$ ?v0 )(streams$c ?v1 )))):named a84 ))
(assert (! (forall ((?v0 B_stream_stream_stream$ )(?v1 B_stream_stream_set$ ))(=> (member$c ?v0 (streams$ ?v1 ))(member$ (shd$d ?v0 )?v1 ))):named a85 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (member$d ?v0 (streams$a ?v1 ))(member$e (shd$b ?v0 )?v1 ))):named a86 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (member$ ?v0 (streams$b ?v1 ))(member$a (shd$c ?v0 )?v1 ))):named a87 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (member$a ?v0 (streams$c ?v1 ))(member$b (shd$ ?v0 )?v1 ))):named a88 ))
(assert (! (forall ((?v0 C_stream$ ))(=> (=> (= ?v0 (sCons$b (shd$b ?v0 )(stl$b ?v0 )))false )false )):named a89 ))
(assert (! (forall ((?v0 B_stream_stream$ ))(=> (=> (= ?v0 (sCons$c (shd$c ?v0 )(stl$c ?v0 )))false )false )):named a90 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (=> (= ?v0 (sCons$ (shd$ ?v0 )(stl$ ?v0 )))false )false )):named a91 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ )(?v2 B_stream_stream$ ))(! (= (fun_app$ (smember$ ?v0 )(sCons$c ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$ (smember$ ?v0 )?v2 ))):pattern ((fun_app$ (smember$ ?v0 )(sCons$c ?v1 ?v2 ))))):named a92 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$a (smember$a ?v0 )(sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$a (smember$a ?v0 )?v2 ))):pattern ((fun_app$a (smember$a ?v0 )(sCons$ ?v1 ?v2 ))))):named a93 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_stream$ ))(= (sinterleave$ ?v0 ?v1 )(sCons$b (shd$b ?v0 )(sinterleave$ ?v1 (stl$b ?v0 ))))):named a94 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_stream$ ))(= (sinterleave$a ?v0 ?v1 )(sCons$c (shd$c ?v0 )(sinterleave$a ?v1 (stl$c ?v0 ))))):named a95 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (fun_app$h (sinterleave$b ?v0 )?v1 )(sCons$ (shd$ ?v0 )(fun_app$h (sinterleave$b ?v1 )(stl$ ?v0 ))))):named a96 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (fun_app$h (fun_app$o (smap2$ ?v0 )?v1 )?v2 )(sCons$ (fun_app$p (fun_app$q ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(fun_app$h (fun_app$o (smap2$ ?v0 )(stl$ ?v1 ))(stl$ ?v2 ))))):named a97 ))
(assert (! (forall ((?v0 B_c_b_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (smap2$a ?v0 ?v1 ?v2 )(sCons$ (fun_app$r (fun_app$s ?v0 (shd$ ?v1 ))(shd$b ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$b ?v2 ))))):named a98 ))
(assert (! (forall ((?v0 C_b_b_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (fun_app$h (fun_app$t (smap2$b ?v0 )?v1 )?v2 )(sCons$ (fun_app$p (fun_app$u ?v0 (shd$b ?v1 ))(shd$ ?v2 ))(fun_app$h (fun_app$t (smap2$b ?v0 )(stl$b ?v1 ))(stl$ ?v2 ))))):named a99 ))
(assert (! (forall ((?v0 C_c_b_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (smap2$c ?v0 ?v1 ?v2 )(sCons$ (fun_app$r (fun_app$v ?v0 (shd$b ?v1 ))(shd$b ?v2 ))(smap2$c ?v0 (stl$b ?v1 )(stl$b ?v2 ))))):named a100 ))
(assert (! (forall ((?v0 B_b_stream_b_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream_stream$ ))(= (smap2$d ?v0 ?v1 ?v2 )(sCons$ (fun_app$w (fun_app$x ?v0 (shd$ ?v1 ))(shd$c ?v2 ))(smap2$d ?v0 (stl$ ?v1 )(stl$c ?v2 ))))):named a101 ))
(assert (! (forall ((?v0 B_stream_b_b_fun_fun$ )(?v1 B_stream_stream$ )(?v2 B_stream$ ))(= (fun_app$h (fun_app$y (smap2$e ?v0 )?v1 )?v2 )(sCons$ (fun_app$p (fun_app$z ?v0 (shd$c ?v1 ))(shd$ ?v2 ))(fun_app$h (fun_app$y (smap2$e ?v0 )(stl$c ?v1 ))(stl$ ?v2 ))))):named a102 ))
(assert (! (forall ((?v0 B_stream_c_b_fun_fun$ )(?v1 B_stream_stream$ )(?v2 C_stream$ ))(= (smap2$f ?v0 ?v1 ?v2 )(sCons$ (fun_app$r (fun_app$aa ?v0 (shd$c ?v1 ))(shd$b ?v2 ))(smap2$f ?v0 (stl$c ?v1 )(stl$b ?v2 ))))):named a103 ))
(assert (! (forall ((?v0 C_b_stream_b_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream_stream$ ))(= (smap2$g ?v0 ?v1 ?v2 )(sCons$ (fun_app$w (fun_app$ab ?v0 (shd$b ?v1 ))(shd$c ?v2 ))(smap2$g ?v0 (stl$b ?v1 )(stl$c ?v2 ))))):named a104 ))
(assert (! (forall ((?v0 B_b_b_stream_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (smap2$h ?v0 ?v1 ?v2 )(sCons$c (fun_app$ac (fun_app$ad ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$h ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a105 ))
(assert (! (forall ((?v0 B_c_b_stream_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (smap2$i ?v0 ?v1 ?v2 )(sCons$c (fun_app$ae (fun_app$af ?v0 (shd$ ?v1 ))(shd$b ?v2 ))(smap2$i ?v0 (stl$ ?v1 )(stl$b ?v2 ))))):named a106 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_stream$ )(?v2 B_stream_stream$ ))(! (= (fun_app$ (pred_stream$ ?v0 )(sCons$c ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(fun_app$ (pred_stream$ ?v0 )?v2 ))):pattern ((fun_app$ (pred_stream$ ?v0 )(sCons$c ?v1 ?v2 ))))):named a107 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$a (pred_stream$a ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$a (pred_stream$a ?v0 )?v2 ))):pattern ((fun_app$a (pred_stream$a ?v0 )(sCons$ ?v1 ?v2 ))))):named a108 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 C_b_sp_nu_bool_fun$ )(?v2 B$ )(?v3 C_b_sp_nu$ ))(! (= (pred_sp_mu$ ?v0 ?v1 (put$ ?v2 ?v3 ))(and (fun_app$b ?v0 ?v2 )(fun_app$ag ?v1 ?v3 ))):pattern ((pred_sp_mu$ ?v0 ?v1 (put$ ?v2 ?v3 ))))):named a109 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_bool_fun$ ))(=> (forall ((?v2 B$ ))(= (fun_app$b ?v0 ?v2 )(fun_app$b ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a110 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_stream_bool_fun$ ))(=> (forall ((?v2 B_stream$ ))(= (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 )))(= (collect$a ?v0 )(collect$a ?v1 )))):named a111 ))
(assert (! (forall ((?v0 B_stream_stream_set$ ))(= (collect$b (uu$ ?v0 ))?v0 )):named a112 ))
(assert (! (forall ((?v0 B_stream_set$ ))(= (collect$a (uua$ ?v0 ))?v0 )):named a113 ))
(assert (! (forall ((?v0 B_set$ ))(= (collect$ (uub$ ?v0 ))?v0 )):named a114 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_stream_bool_fun$ ))(= (member$ ?v0 (collect$b ?v1 ))(fun_app$ ?v1 ?v0 ))):named a115 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_bool_fun$ ))(= (member$a ?v0 (collect$a ?v1 ))(fun_app$a ?v1 ?v0 ))):named a116 ))
(assert (! (forall ((?v0 B$ )(?v1 B_bool_fun$ ))(= (member$b ?v0 (collect$ ?v1 ))(fun_app$b ?v1 ?v0 ))):named a117 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_stream_stream$ ))(! (= (fun_app$j (smember$b ?v0 )?v1 )(member$ ?v0 (sset$ ?v1 ))):pattern ((fun_app$j (smember$b ?v0 )?v1 )))):named a118 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ ))(! (= (fun_app$ (smember$ ?v0 )?v1 )(member$a ?v0 (sset$b ?v1 ))):pattern ((fun_app$ (smember$ ?v0 )?v1 )))):named a119 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (fun_app$a (smember$a ?v0 )?v1 )(member$b ?v0 (sset$c ?v1 ))):pattern ((fun_app$a (smember$a ?v0 )?v1 )))):named a120 ))
(assert (! (forall ((?v0 B_stream_b_fun$ )(?v1 B_stream_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$w ?v0 (shd$c ?v1 ))?v2 )(= (smap$ ?v0 (stl$c ?v1 ))?v3 )))):named a121 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$a ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$r ?v0 (shd$b ?v1 ))?v2 )(= (smap$a ?v0 (stl$b ?v1 ))?v3 )))):named a122 ))
(assert (! (forall ((?v0 B_b_stream_fun$ )(?v1 B_stream$ )(?v2 B_stream$ )(?v3 B_stream_stream$ ))(= (= (smap$b ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= (fun_app$ac ?v0 (shd$ ?v1 ))?v2 )(= (smap$b ?v0 (stl$ ?v1 ))?v3 )))):named a123 ))
(assert (! (forall ((?v0 B_stream_b_stream_fun$ )(?v1 B_stream_stream$ )(?v2 B_stream$ )(?v3 B_stream_stream$ ))(= (= (smap$c ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= (fun_app$h ?v0 (shd$c ?v1 ))?v2 )(= (smap$c ?v0 (stl$c ?v1 ))?v3 )))):named a124 ))
(assert (! (forall ((?v0 C_b_stream_fun$ )(?v1 C_stream$ )(?v2 B_stream$ )(?v3 B_stream_stream$ ))(= (= (smap$d ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= (fun_app$ae ?v0 (shd$b ?v1 ))?v2 )(= (smap$d ?v0 (stl$b ?v1 ))?v3 )))):named a125 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (fun_app$h (smap$e ?v0 )?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$p ?v0 (shd$ ?v1 ))?v2 )(= (fun_app$h (smap$e ?v0 )(stl$ ?v1 ))?v3 )))):named a126 ))
(check-sat )
;(get-unsat-core )
