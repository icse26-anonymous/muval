;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-datatypes ()((Nibble$ (nibble0$ )(nibble1$ )(nibble2$ )(nibble3$ )(nibble4$ )(nibble5$ )(nibble6$ )(nibble7$ )(nibble8$ )(nibble9$ )(nibbleA$ )(nibbleB$ )(nibbleC$ )(nibbleD$ )(nibbleE$ )(nibbleF$ ))(Char$ (char$ (select$ Nibble$ )(selecta$ Nibble$ )))(Char_list$ (nil$ )(cons$ (hd$ Char$ )(tl$ Char_list$ )))))
(declare-sort Char_list_process$ 0)
(declare-fun prefOf$ (Char_list_process$)Char_list$)
(declare-fun contOf$ (Char_list_process$)Char_list_process$)
(declare-fun action$ (Char_list$ Char_list_process$ )Char_list_process$)
(declare-fun ch1Of$ (Char_list_process$)Char_list_process$)
(declare-fun ch2Of$ (Char_list_process$)Char_list_process$)
(declare-fun choice$ (Char_list_process$ Char_list_process$ )Char_list_process$)
(declare-fun x$ ()Char_list_process$ )
(declare-fun y$ ()Char_list_process$ )
(declare-fun ax$ ()Char_list_process$ )
(assert (! (not (= x$ (choice$ ax$ (action$ (cons$ (char$ nibble6$ nibble2$ )nil$ )x$ )))):named a0 ))
(assert (! (= y$ (action$ (cons$ (char$ nibble6$ nibble2$ )nil$ )x$ )):named a1 ))
(assert (! (= x$ (choice$ ax$ y$ )):named a2 ))
(check-sat )
;(get-unsat-core )
