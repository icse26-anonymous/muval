;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_tree_bool_fun$ 0 )
(declare-sort Nat_tree_nat_tree_bool_fun_fun$ 0 )
(declare-sort Nat_tree$ 0)
(declare-fun root$ (Nat_tree$)Nat$)
(declare-fun left$ (Nat_tree$)Nat_tree$)
(declare-fun right$ (Nat_tree$)Nat_tree$)
(declare-fun node$ (Nat$ Nat_tree$ Nat_tree$ )Nat_tree$)
(declare-fun xa$ ()Nat_tree$ )
(declare-fun num$ ()Nat_tree$ )
(declare-fun zero$ ()Nat$ )
(declare-fun fIXME_x$ ()Nat_tree$ )
(declare-fun fun_app$ (Nat_tree_bool_fun$ Nat_tree$ )Bool )
(declare-fun fun_app$a (Nat_tree_nat_tree_bool_fun_fun$ Nat_tree$ )Nat_tree_bool_fun$ )
(assert (! (not (and (= (root$ xa$ )(root$ fIXME_x$ ))(and (or (exists ((?v0 Nat_tree$ ))(and (= (left$ xa$ )?v0 )(and (= (left$ fIXME_x$ )fIXME_x$ )(= ?v0 (node$ zero$ num$ ?v0 )))))(= (left$ xa$ )(left$ fIXME_x$ )))(or (exists ((?v0 Nat_tree$ ))(and (= (right$ xa$ )?v0 )(and (= (right$ fIXME_x$ )fIXME_x$ )(= ?v0 (node$ zero$ num$ ?v0 )))))(= (right$ xa$ )(right$ fIXME_x$ )))))):named a0 ))
(assert (! (= xa$ (node$ zero$ num$ xa$ )):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ )(?v3 Nat$ )(?v4 Nat_tree$ )(?v5 Nat_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a2 ))
(assert (! (= (left$ num$ )num$ ):named a3 ))
(assert (! (forall ((?v0 Nat_tree$ ))(= (node$ (root$ ?v0 )(left$ ?v0 )(right$ ?v0 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(! (= (left$ (node$ ?v0 ?v1 ?v2 ))?v1 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(! (= (root$ (node$ ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(! (= (right$ (node$ ?v0 ?v1 ?v2 ))?v2 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a7 ))
(assert (! (= (root$ fIXME_x$ )zero$ ):named a8 ))
(assert (! (= (left$ fIXME_x$ )num$ ):named a9 ))
(assert (! (= fIXME_x$ (node$ zero$ num$ fIXME_x$ )):named a10 ))
(assert (! (= (right$ fIXME_x$ )fIXME_x$ ):named a11 ))
(assert (! (forall ((?v0 Nat_tree$ ))(=> (=> (= ?v0 (node$ (root$ ?v0 )(left$ ?v0 )(right$ ?v0 )))false )false )):named a12 ))
(assert (! (forall ((?v0 Nat_tree$ ))(=> (forall ((?v1 Nat$ )(?v2 Nat_tree$ )(?v3 Nat_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false ))false )):named a13 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(and (= (left$ ?v0 )(left$ ?v1 ))(= (right$ ?v0 )(right$ ?v1 ))))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat_tree_nat_tree_bool_fun_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 Nat_tree$ )(?v4 Nat_tree$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (or (fun_app$ (fun_app$a ?v0 (left$ ?v3 ))(left$ ?v4 ))(= (left$ ?v3 )(left$ ?v4 )))(or (fun_app$ (fun_app$a ?v0 (right$ ?v3 ))(right$ ?v4 ))(= (right$ ?v3 )(right$ ?v4 ))))))))(= ?v1 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat_tree_nat_tree_bool_fun_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 Nat_tree$ )(?v4 Nat_tree$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (fun_app$ (fun_app$a ?v0 (left$ ?v3 ))(left$ ?v4 ))(fun_app$ (fun_app$a ?v0 (right$ ?v3 ))(right$ ?v4 )))))))(= ?v1 ?v2 ))):named a16 ))
(check-sat )
;(get-unsat-core )
