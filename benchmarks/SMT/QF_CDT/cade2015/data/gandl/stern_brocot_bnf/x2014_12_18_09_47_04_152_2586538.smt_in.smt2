;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-datatypes ()((Nat_nat_prod$ (pair$ (fst$ Nat$ )(snd$ Nat$ )))(Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$ )(snd$a Nat_nat_prod$ )))(Dir$ (l$ )(r$ ))))
(declare-sort Nat_nat_prod_nat_nat_prod_prod_tree$ 0)
(declare-fun root$ (Nat_nat_prod_nat_nat_prod_prod_tree$)Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun left$ (Nat_nat_prod_nat_nat_prod_prod_tree$)Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun right$ (Nat_nat_prod_nat_nat_prod_prod_tree$)Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun node$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod_tree$ Nat_nat_prod_nat_nat_prod_prod_tree$ )Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-datatypes ()((Dir_list$ (nil$ )(cons$ (hd$ Dir$ )(tl$ Dir_list$ )))))
(declare-fun d$ ()Dir$ )
(declare-fun m$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun d$a ()Dir$ )
(declare-fun pm$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat$ )
(declare-fun one$ ()Nat$ )
(declare-fun p_m$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun pm$a ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun imat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun path$ ()Dir_list$ )
(declare-fun lLmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun uRmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun traverse_tree$ (Dir_list$ Nat_nat_prod_nat_nat_prod_prod_tree$ )Nat_nat_prod_nat_nat_prod_prod_tree$ )
(declare-fun stern_brocot_iterate_aux$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod_tree$ )
(assert (! (not (= (det$ p_m$ )one$ )):named a0 ))
(assert (! (not (= d$ d$a )):named a1 ))
(assert (! (= (det$ pm$ )one$ ):named a2 ))
(assert (! (= p_m$ (root$ (traverse_tree$ path$ (stern_brocot_iterate_aux$ imat$ )))):named a3 ))
(assert (! (= (det$ imat$ )one$ ):named a4 ))
(assert (! (= (det$ pm$a )one$ ):named a5 ))
(assert (! (= (det$ m$ )one$ ):named a6 ))
(assert (! (= (det$ lLmat$ )one$ ):named a7 ))
(assert (! (= (det$ uRmat$ )one$ ):named a8 ))
(assert (! (= one$ one$ ):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(= (= one$ ?v0 )(= ?v0 one$ ))):named a10 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ ?v0 lLmat$ ))one$ ))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ ?v0 uRmat$ ))one$ ))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ lLmat$ ?v0 ))one$ ))):named a13 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ uRmat$ ?v0 ))one$ ))):named a14 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Dir_list$ ))(exists ((?v2 Nat_nat_prod_nat_nat_prod_prod$ ))(and (= (mulmat$ ?v0 ?v2 )(root$ (traverse_tree$ ?v1 (stern_brocot_iterate_aux$ ?v0 ))))(= (det$ ?v2 )one$ )))):named a15 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ )(?v2 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ (mulmat$ ?v0 ?v1 )?v2 )(mulmat$ ?v0 (mulmat$ ?v1 ?v2 )))):named a16 ))
(check-sat )
;(get-unsat-core )
