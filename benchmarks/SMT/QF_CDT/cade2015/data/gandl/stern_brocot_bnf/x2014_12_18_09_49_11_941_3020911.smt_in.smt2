;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Num_num_fun$ 0 )
(declare-datatypes ()((Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))))
(declare-fun x$ ()Nat$ )
(declare-fun y$ ()Nat$ )
(declare-fun mod$ (Nat$ Nat$ )Nat$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun plus$a (Num$ Num$ )Num$ )
(declare-fun times$ (Nat$ Nat$ )Nat$ )
(declare-fun times$a (Num$ )Num_num_fun$ )
(declare-fun fun_app$ (Num_num_fun$ Num$ )Num$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun numeral$ (Num$ )Nat$ )
(assert (! (not (less_eq$ (times$ (numeral$ (bit0$ one$ ))(mod$ x$ y$ ))(plus$ x$ y$ ))):named a0 ))
(assert (! (less$ zero$ y$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$ (times$ ?v0 ?v1 )(times$ ?v0 ?v2 ))(=> (less$ zero$ ?v0 )(less_eq$ ?v1 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$ (times$ ?v0 ?v1 )(times$ ?v2 ?v1 ))(=> (less$ zero$ ?v1 )(less_eq$ ?v0 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$ (times$ ?v0 ?v1 )(times$ ?v0 ?v2 ))(and (less$ zero$ ?v0 )(less$ ?v1 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$ (times$ ?v0 ?v1 )(times$ ?v2 ?v1 ))(and (less$ zero$ ?v1 )(less$ ?v0 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (less$ zero$ (times$ ?v0 ?v1 ))(and (less$ zero$ ?v0 )(less$ zero$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (less$ zero$ (plus$ ?v0 ?v1 ))(or (less$ zero$ ?v0 )(less$ zero$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (mod$ (plus$ (times$ ?v0 ?v1 )?v2 )?v0 )(mod$ ?v2 ?v0 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (mod$ (plus$ (times$ ?v0 ?v1 )?v2 )?v1 )(mod$ ?v2 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (mod$ (plus$ ?v0 (times$ ?v1 ?v2 ))?v1 )(mod$ ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (mod$ (plus$ ?v0 (times$ ?v1 ?v2 ))?v2 )(mod$ ?v0 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (mod$ (times$ ?v0 ?v1 )?v1 )zero$ )):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (mod$ (times$ ?v0 ?v1 )?v0 )zero$ )):named a13 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(! (= (plus$a (bit0$ ?v0 )(bit0$ ?v1 ))(bit0$ (plus$a ?v0 ?v1 ))):pattern ((plus$a (bit0$ ?v0 )(bit0$ ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(! (= (fun_app$ (times$a (bit0$ ?v0 ))(bit0$ ?v1 ))(bit0$ (bit0$ (fun_app$ (times$a ?v0 )?v1 )))):pattern ((fun_app$ (times$a (bit0$ ?v0 ))(bit0$ ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Num$ ))(! (= (fun_app$ (times$a one$ )?v0 )?v0 ):pattern ((fun_app$ (times$a one$ )?v0 )))):named a17 ))
(assert (! (forall ((?v0 Num$ ))(! (= (fun_app$ (times$a ?v0 )one$ )?v0 ):pattern ((times$a ?v0 )))):named a18 ))
(check-sat )
;(get-unsat-core )
