;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_tree_bool_fun$ 0 )
(declare-sort A_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_fun$ 0 )
(declare-sort A_a_tree_bool_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_fun$ 0 )
(declare-sort A_tree_a_tree_bool_fun_fun$ 0 )
(declare-datatypes ()((Dir$ (l$ )(r$ ))(Dir_list$ (nil$ )(cons$ (hd$ Dir$ )(tl$ Dir_list$ )))))
(declare-sort A_tree$ 0)
(declare-sort A_a_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_fun_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_fun_tree$ 0)
(declare-sort A_a_fun_a_fun_a_fun_tree$ 0)
(declare-sort A_a_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_fun_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun select$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun$)
(declare-fun selecta$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun selectb$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun node$a (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$)
(declare-fun selectc$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun$)
(declare-fun selectd$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun selecte$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun node$b (A_a_a_fun_fun$ A_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$)
(declare-fun selectf$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun$)
(declare-fun selectg$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun selecth$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun node$c (A_a_fun_a_fun$ A_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$)
(declare-fun selecti$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selectj$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selectk$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$d (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun selectl$ (A_a_a_fun_fun_a_fun_tree$)A_a_a_fun_fun_a_fun$)
(declare-fun selectm$ (A_a_a_fun_fun_a_fun_tree$)A_a_a_fun_fun_a_fun_tree$)
(declare-fun selectn$ (A_a_a_fun_fun_a_fun_tree$)A_a_a_fun_fun_a_fun_tree$)
(declare-fun node$e (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun_a_fun_tree$ A_a_a_fun_fun_a_fun_tree$ )A_a_a_fun_fun_a_fun_tree$)
(declare-fun selecto$ (A_a_fun_a_fun_a_fun_tree$)A_a_fun_a_fun_a_fun$)
(declare-fun selectp$ (A_a_fun_a_fun_a_fun_tree$)A_a_fun_a_fun_a_fun_tree$)
(declare-fun selectq$ (A_a_fun_a_fun_a_fun_tree$)A_a_fun_a_fun_a_fun_tree$)
(declare-fun node$f (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_a_fun_tree$ )A_a_fun_a_fun_a_fun_tree$)
(declare-fun selectr$ (A_a_a_a_fun_fun_fun_tree$)A_a_a_a_fun_fun_fun$)
(declare-fun selects$ (A_a_a_a_fun_fun_fun_tree$)A_a_a_a_fun_fun_fun_tree$)
(declare-fun selectt$ (A_a_a_a_fun_fun_fun_tree$)A_a_a_a_fun_fun_fun_tree$)
(declare-fun node$g (A_a_a_a_fun_fun_fun$ A_a_a_a_fun_fun_fun_tree$ A_a_a_a_fun_fun_fun_tree$ )A_a_a_a_fun_fun_fun_tree$)
(declare-fun selectu$ (A_a_a_fun_a_fun_fun_tree$)A_a_a_fun_a_fun_fun$)
(declare-fun selectv$ (A_a_a_fun_a_fun_fun_tree$)A_a_a_fun_a_fun_fun_tree$)
(declare-fun selectw$ (A_a_a_fun_a_fun_fun_tree$)A_a_a_fun_a_fun_fun_tree$)
(declare-fun node$h (A_a_a_fun_a_fun_fun$ A_a_a_fun_a_fun_fun_tree$ A_a_a_fun_a_fun_fun_tree$ )A_a_a_fun_a_fun_fun_tree$)
(declare-fun selectx$ (A_a_fun_a_a_fun_fun_a_fun_tree$)A_a_fun_a_a_fun_fun_a_fun$)
(declare-fun selecty$ (A_a_fun_a_a_fun_fun_a_fun_tree$)A_a_fun_a_a_fun_fun_a_fun_tree$)
(declare-fun selectz$ (A_a_fun_a_a_fun_fun_a_fun_tree$)A_a_fun_a_a_fun_fun_a_fun_tree$)
(declare-fun node$i (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun_a_fun_tree$ A_a_fun_a_a_fun_fun_a_fun_tree$ )A_a_fun_a_a_fun_fun_a_fun_tree$)
(declare-fun selecua$ (A_a_a_fun_fun_a_a_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun selecub$ (A_a_a_fun_fun_a_a_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selecuc$ (A_a_a_fun_fun_a_a_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun node$j (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_a_a_fun_fun_tree$ )A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun p$ ()Dir_list$ )
(declare-fun ta$ ()A_tree$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_tree_bool_fun$ A_tree$ )Bool )
(declare-fun tree_ap$ (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun fun_app$a (A_a_tree_bool_fun_fun$ A$ )A_tree_bool_fun$ )
(declare-fun fun_app$b (A_tree_a_tree_bool_fun_fun$ A_tree$ )A_tree_bool_fun$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun fun_app$d (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$e (A_a_fun_a_fun$ A_a_fun$ )A$ )
(declare-fun fun_app$f (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun tree_ap$a (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$b (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$c (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$d (A_a_a_fun_fun_a_fun_tree$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun tree_ap$e (A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$f (A_a_a_a_fun_fun_fun_tree$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_ap$g (A_a_a_fun_a_fun_fun_tree$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_ap$h (A_a_fun_a_a_fun_fun_a_fun_tree$ A_a_fun_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun tree_ap$i (A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_pure$ (A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_pure$a (A_a_a_fun_fun$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_pure$b (A_a_fun_a_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_pure$c (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$d (A$ )A_tree$ )
(declare-fun tree_iterate$ (A_a_fun$ A_a_fun$ A$ )A_tree$ )
(declare-fun traverse_tree$ (Dir_list$ A_tree$ )A_tree$ )
(declare-fun traverse_tree$a (Dir_list$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun traverse_tree$b (Dir_list$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun traverse_tree$c (Dir_list$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun traverse_tree$d (Dir_list$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun traverse_tree$e (Dir_list$ A_a_a_fun_fun_a_fun_tree$ )A_a_a_fun_fun_a_fun_tree$ )
(declare-fun traverse_tree$f (Dir_list$ A_a_fun_a_fun_a_fun_tree$ )A_a_fun_a_fun_a_fun_tree$ )
(declare-fun traverse_tree$g (Dir_list$ A_a_a_a_fun_fun_fun_tree$ )A_a_a_a_fun_fun_fun_tree$ )
(declare-fun traverse_tree$h (Dir_list$ A_a_a_fun_a_fun_fun_tree$ )A_a_a_fun_a_fun_fun_tree$ )
(declare-fun traverse_tree$i (Dir_list$ A_a_fun_a_a_fun_fun_a_fun_tree$ )A_a_fun_a_a_fun_fun_a_fun_tree$ )
(declare-fun traverse_tree$j (Dir_list$ A_a_a_fun_fun_a_a_fun_fun_tree$ )A_a_a_fun_fun_a_a_fun_fun_tree$ )
(assert (! (not (exists ((?v0 Dir_list$ ))(= (root$ (traverse_tree$ p$ (right$ ta$ )))(root$ (traverse_tree$ ?v0 ta$ ))))):named a0 ))
(assert (! (member$ (root$ (traverse_tree$ p$ (right$ ta$ )))(set_tree$ (right$ ta$ ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (set_tree$ (right$ ?v1 )))(member$ ?v0 (set_tree$ ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (set_tree$ (right$ ?v1 )))(member$ ?v0 (set_tree$ ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_a_tree_bool_fun_fun$ ))(=> (and (member$ ?v0 (set_tree$ ?v1 ))(and (forall ((?v3 A_tree$ ))(fun_app$ (fun_app$a ?v2 (root$ ?v3 ))?v3 ))(and (forall ((?v3 A$ )(?v4 A_tree$ ))(=> (and (member$ ?v3 (set_tree$ (left$ ?v4 )))(fun_app$ (fun_app$a ?v2 ?v3 )(left$ ?v4 )))(fun_app$ (fun_app$a ?v2 ?v3 )?v4 )))(forall ((?v3 A$ )(?v4 A_tree$ ))(=> (and (member$ ?v3 (set_tree$ (right$ ?v4 )))(fun_app$ (fun_app$a ?v2 ?v3 )(right$ ?v4 )))(fun_app$ (fun_app$a ?v2 ?v3 )?v4 ))))))(fun_app$ (fun_app$a ?v2 ?v0 )?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(and (= (left$ ?v0 )(left$ ?v1 ))(= (right$ ?v0 )(right$ ?v1 ))))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree$ ))(=> (and (fun_app$ (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 A_tree$ )(?v4 A_tree$ ))(=> (fun_app$ (fun_app$b ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (or (fun_app$ (fun_app$b ?v0 (left$ ?v3 ))(left$ ?v4 ))(= (left$ ?v3 )(left$ ?v4 )))(or (fun_app$ (fun_app$b ?v0 (right$ ?v3 ))(right$ ?v4 ))(= (right$ ?v3 )(right$ ?v4 ))))))))(= ?v1 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree$ ))(=> (and (fun_app$ (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 A_tree$ )(?v4 A_tree$ ))(=> (fun_app$ (fun_app$b ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (fun_app$ (fun_app$b ?v0 (left$ ?v3 ))(left$ ?v4 ))(fun_app$ (fun_app$b ?v0 (right$ ?v3 ))(right$ ?v4 )))))))(= ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_a_fun_fun$ ))(= (traverse_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun$ ))(= (traverse_tree$b ?v0 (tree_pure$a ?v1 ))(tree_pure$a ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun$ ))(= (traverse_tree$c ?v0 (tree_pure$b ?v1 ))(tree_pure$b ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun$ ))(= (traverse_tree$d ?v0 (tree_pure$c ?v1 ))(tree_pure$c ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A$ ))(= (traverse_tree$ ?v0 (tree_pure$d ?v1 ))(tree_pure$d ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (right$ (tree_iterate$ ?v0 ?v1 ?v2 ))(tree_iterate$ ?v0 ?v1 (fun_app$c ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (root$ (tree_iterate$ ?v0 ?v1 ?v2 ))?v2 )):named a16 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$ ?v1 ?v2 ))(tree_ap$ (traverse_tree$d ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun_tree$ )(?v2 A_a_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$a ?v1 ?v2 ))(tree_ap$a (traverse_tree$c ?v0 ?v1 )(traverse_tree$d ?v0 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$d ?v0 (tree_ap$b ?v1 ?v2 ))(tree_ap$b (traverse_tree$b ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_a_fun_fun_tree$ )(?v2 A_a_fun_tree$ ))(= (traverse_tree$d ?v0 (tree_ap$c ?v1 ?v2 ))(tree_ap$c (traverse_tree$a ?v0 ?v1 )(traverse_tree$d ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun_a_fun_tree$ )(?v2 A_a_a_fun_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$d ?v1 ?v2 ))(tree_ap$d (traverse_tree$e ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun_a_fun_tree$ )(?v2 A_a_fun_a_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$e ?v1 ?v2 ))(tree_ap$e (traverse_tree$f ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_a_fun_fun_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$b ?v0 (tree_ap$f ?v1 ?v2 ))(tree_ap$f (traverse_tree$g ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_a_fun_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$c ?v0 (tree_ap$g ?v1 ?v2 ))(tree_ap$g (traverse_tree$h ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_a_fun_fun_a_fun_tree$ )(?v2 A_a_fun_a_a_fun_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$h ?v1 ?v2 ))(tree_ap$h (traverse_tree$i ?v0 ?v1 )(traverse_tree$a ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun_a_a_fun_fun_tree$ )(?v2 A_a_a_fun_fun_tree$ ))(= (traverse_tree$d ?v0 (tree_ap$i ?v1 ?v2 ))(tree_ap$i (traverse_tree$j ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$b (tree_pure$a ?v0 )(tree_pure$d ?v1 ))(tree_pure$c (fun_app$d ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$a (tree_pure$b ?v0 )(tree_pure$c ?v1 ))(tree_pure$d (fun_app$e ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$c (tree_pure$ ?v0 )(tree_pure$c ?v1 ))(tree_pure$c (fun_app$f ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$ (tree_pure$c ?v0 )(tree_pure$d ?v1 ))(tree_pure$d (fun_app$c ?v0 ?v1 )))):named a30 ))
(check-sat )
;(get-unsat-core )
