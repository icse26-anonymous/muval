;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun f$ ()A_a_fun$ )
(declare-fun x$ ()A$ )
(declare-fun xa$ ()A$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun xsa$ ()A_stream$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun fun_app$a (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun siterate$ (A_a_fun$ A$ )A_stream$ )
(declare-fun szip_with$ (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(assert (! (not (and (= (shd$ xsa$ )(shd$ (siterate$ f$ xa$ )))(exists ((?v0 A_stream$ )(?v1 A$ ))(and (= (stl$ xsa$ )?v0 )(and (= (stl$ (siterate$ f$ xa$ ))(siterate$ f$ ?v1 ))(= ?v0 (sCons$ ?v1 (smap$ f$ ?v0 )))))))):named a0 ))
(assert (! (= (smap$ f$ xsa$ )(sCons$ (fun_app$ f$ xa$ )(smap$ f$ (smap$ f$ xsa$ )))):named a1 ))
(assert (! (= xsa$ (sCons$ xa$ (smap$ f$ xsa$ ))):named a2 ))
(assert (! (= xs$ (sCons$ x$ (smap$ f$ xs$ ))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (smap$ ?v0 (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$ ?v0 (shd$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$ ?v0 (shd$ ?v1 ))?v2 )(= (smap$ ?v0 (stl$ ?v1 ))?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (=> (= ?v0 (sCons$ (shd$ ?v0 )(stl$ ?v0 )))false )false )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (smap$ ?v0 (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (siterate$ ?v0 ?v1 )(sCons$ ?v1 (siterate$ ?v0 (fun_app$ ?v0 ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (shd$ (siterate$ ?v0 ?v1 ))?v1 )):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (stl$ (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (szip_with$ ?v0 ?v1 ?v2 )(sCons$ (fun_app$ (fun_app$a ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(szip_with$ ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smap$ ?v0 (sCons$ ?v1 ?v2 ))(sCons$ (fun_app$ ?v0 ?v1 )(smap$ ?v0 ?v2 ))):pattern ((smap$ ?v0 (sCons$ ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$ (szip_with$ ?v0 ?v1 ?v2 ))(szip_with$ ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a17 ))
(check-sat )
;(get-unsat-core )
