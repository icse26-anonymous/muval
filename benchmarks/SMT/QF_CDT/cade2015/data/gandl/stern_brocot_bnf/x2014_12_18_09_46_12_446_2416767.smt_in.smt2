;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-datatypes ()((Nat_nat_prod$ (pair$ (fst$ Nat$ )(snd$ Nat$ )))(Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$ )(snd$a Nat_nat_prod$ )))))
(declare-sort Nat_tree$ 0)
(declare-sort Nat_tree_tree$ 0)
(declare-sort Nat_tree_tree_tree$ 0)
(declare-fun root$ (Nat_tree$)Nat$)
(declare-fun left$ (Nat_tree$)Nat_tree$)
(declare-fun right$ (Nat_tree$)Nat_tree$)
(declare-fun node$ (Nat$ Nat_tree$ Nat_tree$ )Nat_tree$)
(declare-fun root$a (Nat_tree_tree$)Nat_tree$)
(declare-fun left$a (Nat_tree_tree$)Nat_tree_tree$)
(declare-fun right$a (Nat_tree_tree$)Nat_tree_tree$)
(declare-fun node$a (Nat_tree$ Nat_tree_tree$ Nat_tree_tree$ )Nat_tree_tree$)
(declare-fun root$b (Nat_tree_tree_tree$)Nat_tree_tree$)
(declare-fun left$b (Nat_tree_tree_tree$)Nat_tree_tree_tree$)
(declare-fun right$b (Nat_tree_tree_tree$)Nat_tree_tree_tree$)
(declare-fun node$b (Nat_tree_tree$ Nat_tree_tree_tree$ Nat_tree_tree_tree$ )Nat_tree_tree_tree$)
(declare-fun x$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun y$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun z$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat$ )
(declare-fun one$ ()Nat$ )
(declare-fun imat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun one$a ()Nat_tree_tree$ )
(declare-fun one$b ()Nat_tree$ )
(declare-fun one$c ()Nat_tree_tree_tree$ )
(declare-fun lLmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun uRmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun of_nat$ (Nat$ )Nat_tree_tree$ )
(declare-fun mediant$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod$ )
(declare-fun of_bool$ (Bool )Nat_tree_tree$ )
(declare-fun of_nat$a (Nat$ )Nat_tree$ )
(declare-fun of_nat$b (Nat$ )Nat$ )
(declare-fun of_bool$a (Bool )Nat_tree$ )
(declare-fun of_bool$b (Bool )Nat$ )
(declare-fun tree_pure$ (Nat_tree_tree$ )Nat_tree_tree_tree$ )
(declare-fun tree_pure$a (Nat_tree$ )Nat_tree_tree$ )
(declare-fun tree_pure$b (Nat$ )Nat_tree$ )
(assert (! (not (= (mulmat$ (mulmat$ x$ y$ )z$ )(mulmat$ x$ (mulmat$ y$ z$ )))):named a0 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ ?v0 imat$ )?v0 )):named a1 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ imat$ ?v0 )?v0 )):named a2 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ ?v0 lLmat$ ))one$ ))):named a3 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ ?v0 uRmat$ ))one$ ))):named a4 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ lLmat$ ?v0 ))one$ ))):named a5 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ uRmat$ ?v0 ))one$ ))):named a6 ))
(assert (! (= (det$ imat$ )one$ ):named a7 ))
(assert (! (= (det$ lLmat$ )one$ ):named a8 ))
(assert (! (= (det$ uRmat$ )one$ ):named a9 ))
(assert (! (= one$ one$ ):named a10 ))
(assert (! (forall ((?v0 Nat_tree_tree$ ))(= (= one$a ?v0 )(= ?v0 one$a ))):named a11 ))
(assert (! (forall ((?v0 Nat_tree$ ))(= (= one$b ?v0 )(= ?v0 one$b ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(= (= one$ ?v0 )(= ?v0 one$ ))):named a13 ))
(assert (! (= (mediant$ imat$ )(pair$ one$ one$ )):named a14 ))
(assert (! (= (of_nat$ one$ )one$a ):named a15 ))
(assert (! (= (of_nat$a one$ )one$b ):named a16 ))
(assert (! (= (of_nat$b one$ )one$ ):named a17 ))
(assert (! (= one$c (tree_pure$ one$a )):named a18 ))
(assert (! (= one$a (tree_pure$a one$b )):named a19 ))
(assert (! (= one$b (tree_pure$b one$ )):named a20 ))
(assert (! (= (of_bool$ true )one$a ):named a21 ))
(assert (! (= (of_bool$a true )one$b ):named a22 ))
(assert (! (= (of_bool$b true )one$ ):named a23 ))
(check-sat )
;(get-unsat-core )
