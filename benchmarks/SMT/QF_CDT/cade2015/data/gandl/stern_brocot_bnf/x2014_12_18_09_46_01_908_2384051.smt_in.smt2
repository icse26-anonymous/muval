;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_dir_list_fun$ 0 )
(declare-sort Nat_nat_prod_set$ 0 )
(declare-sort Nat_nat_prod_bool_fun$ 0 )
(declare-sort Nat_nat_prod_nat_nat_prod_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_nat_prod$ (pair$ (fst$ Nat$ )(snd$ Nat$ )))(Dir$ (l$ )(r$ ))(Dir_list$ (nil$ )(cons$ (hd$ Dir$ )(tl$ Dir_list$ )))))
(declare-fun wfP$ (Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )Bool )
(declare-fun accp$ (Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )Nat_nat_prod_bool_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun member$ (Nat_nat_prod$ Nat_nat_prod_set$ )Bool )
(declare-fun mkPath$ (Nat$ )Nat_dir_list_fun$ )
(declare-fun fun_app$ (Nat_nat_prod_bool_fun$ Nat_nat_prod$ )Bool )
(declare-fun fun_app$a (Nat_nat_prod_nat_nat_prod_bool_fun_fun$ Nat_nat_prod$ )Nat_nat_prod_bool_fun$ )
(declare-fun fun_app$b (Nat_dir_list_fun$ Nat$ )Dir_list$ )
(declare-fun mkPath_rel$ ()Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )
(assert (! (not (forall ((?v0 Nat_nat_prod$ ))(fun_app$ (accp$ mkPath_rel$ )?v0 ))):named a0 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )(?v1 Nat_nat_prod$ ))(= (fun_app$ (accp$ ?v0 )?v1 )(exists ((?v2 Nat_nat_prod$ ))(and (= ?v1 ?v2 )(forall ((?v3 Nat_nat_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v2 )(fun_app$ (accp$ ?v0 )?v3 ))))))):named a1 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )(?v1 Nat_nat_prod$ ))(=> (forall ((?v2 Nat_nat_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v2 )?v1 )(fun_app$ (accp$ ?v0 )?v2 )))(fun_app$ (accp$ ?v0 )?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )(?v1 Nat_nat_prod$ )(?v2 Nat_nat_prod_bool_fun$ ))(=> (and (fun_app$ (accp$ ?v0 )?v1 )(forall ((?v3 Nat_nat_prod$ ))(=> (and (fun_app$ (accp$ ?v0 )?v3 )(forall ((?v4 Nat_nat_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v2 ?v4 ))))(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )(?v1 Nat_nat_prod$ )(?v2 Nat_nat_prod_bool_fun$ ))(=> (and (fun_app$ (accp$ ?v0 )?v1 )(forall ((?v3 Nat_nat_prod$ ))(=> (and (fun_app$ (accp$ ?v0 )?v3 )(forall ((?v4 Nat_nat_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v2 ?v4 ))))(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )(?v1 Nat_nat_prod$ ))(=> (and (fun_app$ (accp$ ?v0 )?v1 )(forall ((?v2 Nat_nat_prod$ ))(=> (and (= ?v1 ?v2 )(forall ((?v3 Nat_nat_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v2 )(fun_app$ (accp$ ?v0 )?v3 ))))false )))false )):named a5 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )(?v1 Nat_nat_prod$ )(?v2 Nat_nat_prod$ ))(=> (and (fun_app$ (accp$ ?v0 )?v1 )(fun_app$ (fun_app$a ?v0 ?v2 )?v1 ))(fun_app$ (accp$ ?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )(?v1 Nat_nat_prod$ ))(=> (and (not (fun_app$ (accp$ ?v0 )?v1 ))(forall ((?v2 Nat_nat_prod$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v2 )?v1 )(not (fun_app$ (accp$ ?v0 )?v2 )))false )))false )):named a7 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ ))(! (= (wfP$ ?v0 )(forall ((?v1 Nat_nat_prod$ ))(fun_app$ (accp$ ?v0 )?v1 ))):pattern ((wfP$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ ))(=> (forall ((?v1 Nat_nat_prod$ ))(fun_app$ (accp$ ?v0 )?v1 ))(wfP$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )(?v1 Nat_nat_prod$ ))(=> (wfP$ ?v0 )(fun_app$ (accp$ ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (=> (fun_app$ (accp$ mkPath_rel$ )(pair$ ?v0 zero$ ))(= (fun_app$b (mkPath$ ?v0 )zero$ )nil$ )):pattern ((mkPath$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(! (=> (fun_app$ (accp$ mkPath_rel$ )(pair$ zero$ ?v0 ))(= (fun_app$b (mkPath$ zero$ )?v0 )nil$ )):pattern ((fun_app$b (mkPath$ zero$ )?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ ))(= (wfP$ ?v0 )(forall ((?v1 Nat_nat_prod_set$ )(?v2 Nat_nat_prod$ ))(=> (member$ ?v2 ?v1 )(exists ((?v3 Nat_nat_prod$ ))(and (member$ ?v3 ?v1 )(forall ((?v4 Nat_nat_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(not (member$ ?v4 ?v1 )))))))))):named a13 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ ))(=> (forall ((?v1 Nat_nat_prod_bool_fun$ )(?v2 Nat_nat_prod$ ))(=> (forall ((?v3 Nat_nat_prod$ ))(=> (forall ((?v4 Nat_nat_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v1 ?v4 )))(fun_app$ ?v1 ?v3 )))(fun_app$ ?v1 ?v2 )))(wfP$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )(?v1 Nat_nat_prod_bool_fun$ )(?v2 Nat_nat_prod$ ))(=> (and (wfP$ ?v0 )(forall ((?v3 Nat_nat_prod$ ))(=> (forall ((?v4 Nat_nat_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v1 ?v4 )))(fun_app$ ?v1 ?v3 ))))(fun_app$ ?v1 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$ )(?v1 Nat_nat_prod_bool_fun$ )(?v2 Nat_nat_prod$ ))(=> (and (wfP$ ?v0 )(forall ((?v3 Nat_nat_prod$ ))(=> (forall ((?v4 Nat_nat_prod$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v1 ?v4 )))(fun_app$ ?v1 ?v3 ))))(fun_app$ ?v1 ?v2 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(check-sat )
;(get-unsat-core )
