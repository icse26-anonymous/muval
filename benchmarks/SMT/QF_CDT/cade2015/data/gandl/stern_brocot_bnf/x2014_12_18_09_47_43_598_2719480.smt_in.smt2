;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-sort A_stream_stream_stream$ 0)
(declare-sort A_stream_stream_stream_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (A_stream_stream$)A_stream$)
(declare-fun stl$a (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$a (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-fun shd$b (A_stream_stream_stream$)A_stream_stream$)
(declare-fun stl$b (A_stream_stream_stream$)A_stream_stream_stream$)
(declare-fun sCons$b (A_stream_stream$ A_stream_stream_stream$ )A_stream_stream_stream$)
(declare-fun shd$c (A_stream_stream_stream_stream$)A_stream_stream_stream$)
(declare-fun stl$c (A_stream_stream_stream_stream$)A_stream_stream_stream_stream$)
(declare-fun sCons$c (A_stream_stream_stream$ A_stream_stream_stream_stream$ )A_stream_stream_stream_stream$)
(declare-fun a$ ()A_stream$ )
(declare-fun b$ ()A_stream$ )
(declare-fun times$ (A_stream$ A_stream$ )A_stream$ )
(declare-fun times$a (A_stream_stream_stream$ A_stream_stream_stream$ )A_stream_stream_stream$ )
(declare-fun times$b (A$ A$ )A$ )
(declare-fun times$c (A_stream_stream$ A_stream_stream$ )A_stream_stream$ )
(declare-fun times$d (A_stream_stream_stream_stream$ A_stream_stream_stream_stream$ )A_stream_stream_stream_stream$ )
(assert (! (not (= (times$ a$ b$ )(times$ b$ a$ ))):named a0 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_stream$ )(?v2 A_stream_stream_stream$ ))(= (times$a (times$a ?v0 ?v1 )?v2 )(times$a ?v0 (times$a ?v1 ?v2 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (times$b (times$b ?v0 ?v1 )?v2 )(times$b ?v0 (times$b ?v1 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream$ ))(= (times$c (times$c ?v0 ?v1 )?v2 )(times$c ?v0 (times$c ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (times$ (times$ ?v0 ?v1 )?v2 )(times$ ?v0 (times$ ?v1 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (times$b (times$b ?v0 ?v1 )?v2 )(times$b ?v0 (times$b ?v1 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (times$b ?v0 (times$b ?v1 ?v2 ))(times$b ?v1 (times$b ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (times$b ?v0 ?v1 )(times$b ?v1 ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_stream_stream_stream_stream$ )(?v1 A_stream_stream_stream_stream$ ))(= (shd$c (times$d ?v0 ?v1 ))(times$a (shd$c ?v0 )(shd$c ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_stream$ ))(= (shd$b (times$a ?v0 ?v1 ))(times$c (shd$b ?v0 )(shd$b ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ ))(= (shd$a (times$c ?v0 ?v1 ))(times$ (shd$a ?v0 )(shd$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$ (times$ ?v0 ?v1 ))(times$b (shd$ ?v0 )(shd$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_stream$ ))(= (stl$b (times$a ?v0 ?v1 ))(times$a (stl$b ?v0 )(stl$b ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ ))(= (stl$a (times$c ?v0 ?v1 ))(times$c (stl$a ?v0 )(stl$a ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$ (times$ ?v0 ?v1 ))(times$ (stl$ ?v0 )(stl$ ?v1 )))):named a14 ))
(check-sat )
;(get-unsat-core )
