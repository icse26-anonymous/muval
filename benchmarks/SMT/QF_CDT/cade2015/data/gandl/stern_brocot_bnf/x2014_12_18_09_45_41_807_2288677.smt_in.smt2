;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort B_tree$ 0)
(declare-sort A_tree$ 0)
(declare-fun root$ (B_tree$)B$)
(declare-fun left$ (B_tree$)B_tree$)
(declare-fun right$ (B_tree$)B_tree$)
(declare-fun node$ (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun root$a (A_tree$)A$)
(declare-fun left$a (A_tree$)A_tree$)
(declare-fun right$a (A_tree$)A_tree$)
(declare-fun node$a (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun h$ ()A_b_fun$ )
(declare-fun l$ ()A_a_fun$ )
(declare-fun r$ ()A_a_fun$ )
(declare-fun x$ ()A$ )
(declare-fun l$a ()B_b_fun$ )
(declare-fun r$a ()B_b_fun$ )
(declare-fun comp$ (A_b_fun$ )A_a_fun_a_b_fun_fun$ )
(declare-fun comp$a (B_b_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun fun_app$ (A_b_fun$ A$ )B$ )
(declare-fun fun_app$a (A_a_fun_a_b_fun_fun$ A_a_fun$ )A_b_fun$ )
(declare-fun fun_app$b (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun fun_app$d (B_a_fun$ B$ )A$ )
(declare-fun fun_app$e (B_b_fun$ B$ )B$ )
(declare-fun map_tree$ (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun map_tree$a (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$b (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$c (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun tree_pure$ (A$ )A_tree$ )
(declare-fun tree_pure$a (B$ )B_tree$ )
(declare-fun tree_iterate$ (A_a_fun$ A_a_fun$ A$ )A_tree$ )
(declare-fun tree_iterate$a (B_b_fun$ B_b_fun$ B$ )B_tree$ )
(assert (! (not (= (map_tree$ h$ (tree_iterate$ l$ r$ x$ ))(tree_iterate$a l$a r$a (fun_app$ h$ x$ )))):named a0 ))
(assert (! (= (fun_app$a (comp$ h$ )l$ )(fun_app$b (comp$a l$a )h$ )):named a1 ))
(assert (! (= (fun_app$a (comp$ h$ )r$ )(fun_app$b (comp$a r$a )h$ )):named a2 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$c ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (map_tree$b ?v0 (tree_pure$a ?v1 ))(tree_pure$ (fun_app$d ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (map_tree$c ?v0 (tree_pure$a ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (tree_iterate$ ?v0 ?v1 ?v2 )(node$a ?v2 (tree_iterate$ ?v0 ?v1 (fun_app$c ?v0 ?v2 ))(tree_iterate$ ?v0 ?v1 (fun_app$c ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (tree_iterate$a ?v0 ?v1 ?v2 )(node$ ?v2 (tree_iterate$a ?v0 ?v1 (fun_app$e ?v0 ?v2 ))(tree_iterate$a ?v0 ?v1 (fun_app$e ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$c ?v0 ?v1 ))(fun_app$e ?v0 (root$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$d ?v0 (root$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$a ?v0 ?v1 ))(fun_app$c ?v0 (root$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a12 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$c ?v0 ?v1 ))(fun_app$e ?v0 (root$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$d ?v0 (root$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$a ?v0 ?v1 ))(fun_app$c ?v0 (root$a ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (root$a (tree_iterate$ ?v0 ?v1 ?v2 ))?v2 )):named a17 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (root$ (tree_iterate$a ?v0 ?v1 ?v2 ))?v2 )):named a18 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a19 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$ ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$a ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a22 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$ ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$a ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a26 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (right$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$ ?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$ ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$a ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (right$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$ ?v1 )))):named a31 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$a ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (left$a (tree_iterate$ ?v0 ?v1 ?v2 ))(tree_iterate$ ?v0 ?v1 (fun_app$c ?v0 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (left$ (tree_iterate$a ?v0 ?v1 ?v2 ))(tree_iterate$a ?v0 ?v1 (fun_app$e ?v0 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a37 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a38 ))
(assert (! (forall ((?v0 B_tree$ ))(= (node$ (root$ ?v0 )(left$ ?v0 )(right$ ?v0 ))?v0 )):named a39 ))
(assert (! (forall ((?v0 A_tree$ ))(= (node$a (root$a ?v0 )(left$a ?v0 )(right$a ?v0 ))?v0 )):named a40 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (tree_pure$ ?v0 )(tree_pure$ ?v1 ))(= ?v0 ?v1 ))):named a41 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tree_pure$a ?v0 )(tree_pure$a ?v1 ))(= ?v0 ?v1 ))):named a42 ))
(assert (! (forall ((?v0 A$ ))(! (= (tree_pure$ ?v0 )(node$a ?v0 (tree_pure$ ?v0 )(tree_pure$ ?v0 ))):pattern ((tree_pure$ ?v0 )))):named a43 ))
(assert (! (forall ((?v0 B$ ))(! (= (tree_pure$a ?v0 )(node$ ?v0 (tree_pure$a ?v0 )(tree_pure$a ?v0 ))):pattern ((tree_pure$a ?v0 )))):named a44 ))
(assert (! (forall ((?v0 A$ ))(= (left$a (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a45 ))
(assert (! (forall ((?v0 B$ ))(= (left$ (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a46 ))
(check-sat )
;(get-unsat-core )
