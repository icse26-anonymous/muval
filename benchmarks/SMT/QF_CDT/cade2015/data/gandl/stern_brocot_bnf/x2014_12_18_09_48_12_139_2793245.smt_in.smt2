;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_b_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_a_fun_b_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_b_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_fun$ 0 )
(declare-sort A_b_fun_b_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_a_fun_b_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_a_fun$ 0 )
(declare-sort B_b_fun_b_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort B_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun root$a (B_tree$)B$)
(declare-fun left$a (B_tree$)B_tree$)
(declare-fun right$a (B_tree$)B_tree$)
(declare-fun node$a (B$ B_tree$ B_tree$ )B_tree$)
(declare-datatypes ()((Dir$ (l$ )(r$ ))(Dir_list$ (nil$ )(cons$ (hd$ Dir$ )(tl$ Dir_list$ )))))
(declare-sort B_b_fun_tree$ 0)
(declare-sort A_b_fun_tree$ 0)
(declare-sort B_a_fun_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort B_a_a_fun_fun_tree$ 0)
(declare-sort A_b_b_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_tree$ 0)
(declare-sort A_a_b_fun_fun_tree$ 0)
(declare-sort A_a_fun_b_fun_tree$ 0)
(declare-sort B_a_fun_b_fun_tree$ 0)
(declare-sort A_b_fun_b_fun_tree$ 0)
(declare-sort B_b_fun_b_fun_tree$ 0)
(declare-sort A_a_fun_a_fun_tree$ 0)
(declare-sort B_a_fun_a_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_tree$ 0)
(declare-sort B_b_b_fun_fun_tree$ 0)
(declare-sort B_a_b_fun_fun_tree$ 0)
(declare-sort B_b_fun_a_fun_tree$ 0)
(declare-sort A_b_fun_a_fun_tree$ 0)
(declare-fun select$ (B_b_fun_tree$)B_b_fun$)
(declare-fun selecta$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun selectb$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun node$b (B_b_fun$ B_b_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$)
(declare-fun selectc$ (A_b_fun_tree$)A_b_fun$)
(declare-fun selectd$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun selecte$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun node$c (A_b_fun$ A_b_fun_tree$ A_b_fun_tree$ )A_b_fun_tree$)
(declare-fun selectf$ (B_a_fun_tree$)B_a_fun$)
(declare-fun selectg$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun selecth$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun node$d (B_a_fun$ B_a_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$)
(declare-fun selecti$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selectj$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selectk$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$e (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun selectl$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun$)
(declare-fun selectm$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun_tree$)
(declare-fun selectn$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun_tree$)
(declare-fun node$f (B_a_a_fun_fun$ B_a_a_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$)
(declare-fun selecto$ (A_b_b_fun_fun_tree$)A_b_b_fun_fun$)
(declare-fun selectp$ (A_b_b_fun_fun_tree$)A_b_b_fun_fun_tree$)
(declare-fun selectq$ (A_b_b_fun_fun_tree$)A_b_b_fun_fun_tree$)
(declare-fun node$g (A_b_b_fun_fun$ A_b_b_fun_fun_tree$ A_b_b_fun_fun_tree$ )A_b_b_fun_fun_tree$)
(declare-fun selectr$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun$)
(declare-fun selects$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun selectt$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun node$h (A_b_a_fun_fun$ A_b_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$)
(declare-fun selectu$ (A_a_b_fun_fun_tree$)A_a_b_fun_fun$)
(declare-fun selectv$ (A_a_b_fun_fun_tree$)A_a_b_fun_fun_tree$)
(declare-fun selectw$ (A_a_b_fun_fun_tree$)A_a_b_fun_fun_tree$)
(declare-fun node$i (A_a_b_fun_fun$ A_a_b_fun_fun_tree$ A_a_b_fun_fun_tree$ )A_a_b_fun_fun_tree$)
(declare-fun selectx$ (A_a_fun_b_fun_tree$)A_a_fun_b_fun$)
(declare-fun selecty$ (A_a_fun_b_fun_tree$)A_a_fun_b_fun_tree$)
(declare-fun selectz$ (A_a_fun_b_fun_tree$)A_a_fun_b_fun_tree$)
(declare-fun node$j (A_a_fun_b_fun$ A_a_fun_b_fun_tree$ A_a_fun_b_fun_tree$ )A_a_fun_b_fun_tree$)
(declare-fun selecua$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun$)
(declare-fun selecub$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun_tree$)
(declare-fun selecuc$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun_tree$)
(declare-fun node$k (B_a_fun_b_fun$ B_a_fun_b_fun_tree$ B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$)
(declare-fun selecud$ (A_b_fun_b_fun_tree$)A_b_fun_b_fun$)
(declare-fun selecue$ (A_b_fun_b_fun_tree$)A_b_fun_b_fun_tree$)
(declare-fun selecuf$ (A_b_fun_b_fun_tree$)A_b_fun_b_fun_tree$)
(declare-fun node$l (A_b_fun_b_fun$ A_b_fun_b_fun_tree$ A_b_fun_b_fun_tree$ )A_b_fun_b_fun_tree$)
(declare-fun selecug$ (B_b_fun_b_fun_tree$)B_b_fun_b_fun$)
(declare-fun selecuh$ (B_b_fun_b_fun_tree$)B_b_fun_b_fun_tree$)
(declare-fun selecui$ (B_b_fun_b_fun_tree$)B_b_fun_b_fun_tree$)
(declare-fun node$m (B_b_fun_b_fun$ B_b_fun_b_fun_tree$ B_b_fun_b_fun_tree$ )B_b_fun_b_fun_tree$)
(declare-fun selecuj$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun$)
(declare-fun selecuk$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun selecul$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun node$n (A_a_fun_a_fun$ A_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$)
(declare-fun selecum$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun$)
(declare-fun selecun$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun selecuo$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun node$o (B_a_fun_a_fun$ B_a_fun_a_fun_tree$ B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$)
(declare-fun selecup$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun$)
(declare-fun selecuq$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun selecur$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun node$p (A_a_a_fun_fun$ A_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$)
(declare-fun selecus$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun$)
(declare-fun selecut$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun selecuu$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun node$q (B_b_b_fun_fun$ B_b_b_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$)
(declare-fun selecuv$ (B_a_b_fun_fun_tree$)B_a_b_fun_fun$)
(declare-fun selecuw$ (B_a_b_fun_fun_tree$)B_a_b_fun_fun_tree$)
(declare-fun selecux$ (B_a_b_fun_fun_tree$)B_a_b_fun_fun_tree$)
(declare-fun node$r (B_a_b_fun_fun$ B_a_b_fun_fun_tree$ B_a_b_fun_fun_tree$ )B_a_b_fun_fun_tree$)
(declare-fun selecuy$ (B_b_fun_a_fun_tree$)B_b_fun_a_fun$)
(declare-fun selecuz$ (B_b_fun_a_fun_tree$)B_b_fun_a_fun_tree$)
(declare-fun selecva$ (B_b_fun_a_fun_tree$)B_b_fun_a_fun_tree$)
(declare-fun node$s (B_b_fun_a_fun$ B_b_fun_a_fun_tree$ B_b_fun_a_fun_tree$ )B_b_fun_a_fun_tree$)
(declare-fun selecvb$ (A_b_fun_a_fun_tree$)A_b_fun_a_fun$)
(declare-fun selecvc$ (A_b_fun_a_fun_tree$)A_b_fun_a_fun_tree$)
(declare-fun selecvd$ (A_b_fun_a_fun_tree$)A_b_fun_a_fun_tree$)
(declare-fun node$t (A_b_fun_a_fun$ A_b_fun_a_fun_tree$ A_b_fun_a_fun_tree$ )A_b_fun_a_fun_tree$)
(declare-fun f$ ()B_a_fun$ )
(declare-fun t$ ()B_tree$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (B_a_fun$ B$ )A$ )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun tree_ap$ (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun fun_app$b (A_b_fun$ A$ )B$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun fun_app$d (A_b_b_fun_fun$ A$ )B_b_fun$ )
(declare-fun fun_app$e (A_a_b_fun_fun$ A$ )A_b_fun$ )
(declare-fun fun_app$f (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$g (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$h (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun fun_app$i (B_a_b_fun_fun$ B$ )A_b_fun$ )
(declare-fun map_tree$ (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun tree_ap$a (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$b (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun tree_ap$c (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$d (A_a_fun_b_fun_tree$ A_a_fun_tree$ )B_tree$ )
(declare-fun tree_ap$e (B_a_fun_b_fun_tree$ B_a_fun_tree$ )B_tree$ )
(declare-fun tree_ap$f (A_b_fun_b_fun_tree$ A_b_fun_tree$ )B_tree$ )
(declare-fun tree_ap$g (B_b_fun_b_fun_tree$ B_b_fun_tree$ )B_tree$ )
(declare-fun tree_ap$h (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$i (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$j (A_b_b_fun_fun_tree$ A_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$k (A_a_b_fun_fun_tree$ A_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$l (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$m (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$n (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$o (B_a_b_fun_fun_tree$ B_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$p (B_b_fun_a_fun_tree$ B_b_fun_tree$ )A_tree$ )
(declare-fun tree_ap$q (A_b_fun_a_fun_tree$ A_b_fun_tree$ )A_tree$ )
(declare-fun map_tree$a (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$b (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun map_tree$c (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun map_tree$d (B_b_fun_a_fun$ B_b_fun_tree$ )A_tree$ )
(declare-fun map_tree$e (A_b_fun_a_fun$ A_b_fun_tree$ )A_tree$ )
(declare-fun map_tree$f (B_a_fun_a_fun$ B_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$g (A_a_fun_a_fun$ A_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$h (B_b_fun_b_fun$ B_b_fun_tree$ )B_tree$ )
(declare-fun map_tree$i (A_b_fun_b_fun$ A_b_fun_tree$ )B_tree$ )
(declare-fun map_tree$j (A_b_b_fun_fun$ A_tree$ )B_b_fun_tree$ )
(declare-fun map_tree$k (A_a_b_fun_fun$ A_tree$ )A_b_fun_tree$ )
(declare-fun map_tree$l (A_b_a_fun_fun$ A_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$m (A_a_a_fun_fun$ A_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$n (B_b_b_fun_fun$ B_tree$ )B_b_fun_tree$ )
(declare-fun map_tree$o (B_a_b_fun_fun$ B_tree$ )A_b_fun_tree$ )
(declare-fun set_tree$a (B_tree$ )B_set$ )
(declare-fun tree_chop$ (B_tree$ )B_tree$ )
(declare-fun tree_pure$ (B$ )B_tree$ )
(declare-fun tree_chop$a (A_tree$ )A_tree$ )
(declare-fun tree_chop$b (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_chop$c (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_chop$d (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun tree_chop$e (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_chop$f (B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_chop$g (A_b_b_fun_fun_tree$ )A_b_b_fun_fun_tree$ )
(declare-fun tree_chop$h (A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_chop$i (A_a_b_fun_fun_tree$ )A_a_b_fun_fun_tree$ )
(declare-fun tree_chop$j (A_a_fun_b_fun_tree$ )A_a_fun_b_fun_tree$ )
(declare-fun tree_chop$k (B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$ )
(declare-fun tree_chop$l (A_b_fun_b_fun_tree$ )A_b_fun_b_fun_tree$ )
(declare-fun tree_chop$m (B_b_fun_b_fun_tree$ )B_b_fun_b_fun_tree$ )
(declare-fun tree_chop$n (A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_chop$o (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_pure$a (A$ )A_tree$ )
(declare-fun tree_pure$b (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$c (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$d (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$e (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$f (B_a_a_fun_fun$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_pure$g (A_b_b_fun_fun$ )A_b_b_fun_fun_tree$ )
(declare-fun tree_pure$h (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_pure$i (A_a_b_fun_fun$ )A_a_b_fun_fun_tree$ )
(declare-fun tree_pure$j (A_a_a_fun_fun$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_pure$k (B_b_b_fun_fun$ )B_b_b_fun_fun_tree$ )
(declare-fun tree_pure$l (B_a_b_fun_fun$ )B_a_b_fun_fun_tree$ )
(declare-fun traverse_tree$ (Dir_list$ A_tree$ )A_tree$ )
(declare-fun traverse_tree$a (Dir_list$ B_tree$ )B_tree$ )
(declare-fun traverse_tree$b (Dir_list$ B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun traverse_tree$c (Dir_list$ A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun traverse_tree$d (Dir_list$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun traverse_tree$e (Dir_list$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun traverse_tree$f (Dir_list$ B_b_fun_a_fun_tree$ )B_b_fun_a_fun_tree$ )
(declare-fun traverse_tree$g (Dir_list$ A_b_fun_a_fun_tree$ )A_b_fun_a_fun_tree$ )
(declare-fun traverse_tree$h (Dir_list$ B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun traverse_tree$i (Dir_list$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun traverse_tree$j (Dir_list$ B_b_fun_b_fun_tree$ )B_b_fun_b_fun_tree$ )
(declare-fun traverse_tree$k (Dir_list$ A_b_fun_b_fun_tree$ )A_b_fun_b_fun_tree$ )
(assert (! (not (= (map_tree$ f$ (tree_chop$ t$ ))(tree_chop$a (map_tree$ f$ t$ )))):named a0 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun$ )(?v2 B_tree$ ))(= (traverse_tree$ ?v0 (map_tree$ ?v1 ?v2 ))(map_tree$ ?v1 (traverse_tree$a ?v0 ?v2 )))):named a1 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun$ )(?v2 A_tree$ ))(= (traverse_tree$ ?v0 (map_tree$a ?v1 ?v2 ))(map_tree$a ?v1 (traverse_tree$ ?v0 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun$ )(?v2 A_tree$ ))(= (traverse_tree$a ?v0 (map_tree$b ?v1 ?v2 ))(map_tree$b ?v1 (traverse_tree$ ?v0 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun$ )(?v2 B_tree$ ))(= (traverse_tree$a ?v0 (map_tree$c ?v1 ?v2 ))(map_tree$c ?v1 (traverse_tree$a ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun_a_fun$ )(?v2 B_b_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$d ?v1 ?v2 ))(map_tree$d ?v1 (traverse_tree$b ?v0 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun_a_fun$ )(?v2 A_b_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$e ?v1 ?v2 ))(map_tree$e ?v1 (traverse_tree$c ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_a_fun$ )(?v2 B_a_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$f ?v1 ?v2 ))(map_tree$f ?v1 (traverse_tree$d ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun$ )(?v2 A_a_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$g ?v1 ?v2 ))(map_tree$g ?v1 (traverse_tree$e ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun_b_fun$ )(?v2 B_b_fun_tree$ ))(= (traverse_tree$a ?v0 (map_tree$h ?v1 ?v2 ))(map_tree$h ?v1 (traverse_tree$b ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun_b_fun$ )(?v2 A_b_fun_tree$ ))(= (traverse_tree$a ?v0 (map_tree$i ?v1 ?v2 ))(map_tree$i ?v1 (traverse_tree$c ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 B$ ))(= (tree_chop$ (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A$ ))(= (tree_chop$a (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (tree_chop$b (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a13 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (tree_chop$c (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_b_fun$ ))(= (tree_chop$d (tree_pure$d ?v0 ))(tree_pure$d ?v0 ))):named a15 ))
(assert (! (forall ((?v0 B_b_fun$ ))(= (tree_chop$e (tree_pure$e ?v0 ))(tree_pure$e ?v0 ))):named a16 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ ))(= (tree_chop$f (tree_pure$f ?v0 ))(tree_pure$f ?v0 ))):named a17 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ ))(= (tree_chop$g (tree_pure$g ?v0 ))(tree_pure$g ?v0 ))):named a18 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ ))(= (tree_chop$h (tree_pure$h ?v0 ))(tree_pure$h ?v0 ))):named a19 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ ))(= (tree_chop$i (tree_pure$i ?v0 ))(tree_pure$i ?v0 ))):named a20 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$ ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$a ?v0 (tree_pure$a ?v1 ))(tree_pure$a (fun_app$a ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (map_tree$b ?v0 (tree_pure$a ?v1 ))(tree_pure$ (fun_app$b ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (map_tree$c ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$c ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A$ ))(= (map_tree$j ?v0 (tree_pure$a ?v1 ))(tree_pure$e (fun_app$d ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A$ ))(= (map_tree$k ?v0 (tree_pure$a ?v1 ))(tree_pure$d (fun_app$e ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (map_tree$l ?v0 (tree_pure$a ?v1 ))(tree_pure$c (fun_app$f ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (map_tree$m ?v0 (tree_pure$a ?v1 ))(tree_pure$b (fun_app$g ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B$ ))(= (map_tree$n ?v0 (tree_pure$ ?v1 ))(tree_pure$e (fun_app$h ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B$ ))(= (map_tree$o ?v0 (tree_pure$ ?v1 ))(tree_pure$d (fun_app$i ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (tree_chop$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (tree_chop$e ?v0 )(tree_chop$ ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (tree_chop$ (tree_ap$a ?v0 ?v1 ))(tree_ap$a (tree_chop$d ?v0 )(tree_chop$a ?v1 )))):named a32 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_chop$a (tree_ap$b ?v0 ?v1 ))(tree_ap$b (tree_chop$c ?v0 )(tree_chop$ ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_chop$a (tree_ap$c ?v0 ?v1 ))(tree_ap$c (tree_chop$b ?v0 )(tree_chop$a ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_fun_b_fun_tree$ )(?v1 A_a_fun_tree$ ))(= (tree_chop$ (tree_ap$d ?v0 ?v1 ))(tree_ap$d (tree_chop$j ?v0 )(tree_chop$b ?v1 )))):named a35 ))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (tree_chop$ (tree_ap$e ?v0 ?v1 ))(tree_ap$e (tree_chop$k ?v0 )(tree_chop$c ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_b_fun_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (tree_chop$ (tree_ap$f ?v0 ?v1 ))(tree_ap$f (tree_chop$l ?v0 )(tree_chop$d ?v1 )))):named a37 ))
(assert (! (forall ((?v0 B_b_fun_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(= (tree_chop$ (tree_ap$g ?v0 ?v1 ))(tree_ap$g (tree_chop$m ?v0 )(tree_chop$e ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(= (tree_chop$a (tree_ap$h ?v0 ?v1 ))(tree_ap$h (tree_chop$n ?v0 )(tree_chop$b ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (tree_chop$a (tree_ap$i ?v0 ?v1 ))(tree_ap$i (tree_chop$o ?v0 )(tree_chop$c ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$b ?v0 (root$ ?v1 )))):named a42 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$c ?v0 ?v1 ))(fun_app$c ?v0 (root$a ?v1 )))):named a43 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$b ?v0 (root$ ?v1 )))):named a46 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$c ?v0 ?v1 ))(fun_app$c ?v0 (root$a ?v1 )))):named a47 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$ (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$ ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$ ?v1 )))):named a50 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (right$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$a ?v1 )))):named a51 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$ (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$ ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$ ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (right$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$a ?v1 )))):named a55 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$ ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$ ?v1 )))):named a58 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$a ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$ ?v1 )))):named a61 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$ ?v1 )))):named a62 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$a ?v1 )))):named a63 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (set_tree$ ?v0 ))(and (member$ ?v5 (set_tree$ ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (map_tree$b ?v2 ?v0 )(map_tree$b ?v3 ?v1 )))(= ?v0 ?v1 ))):named a65 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (set_tree$ ?v0 ))(and (member$ ?v5 (set_tree$ ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (map_tree$a ?v2 ?v0 )(map_tree$a ?v3 ?v1 )))(= ?v0 ?v1 ))):named a66 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$a ?v4 (set_tree$a ?v0 ))(and (member$a ?v5 (set_tree$a ?v1 ))(= (fun_app$c ?v2 ?v4 )(fun_app$c ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (map_tree$c ?v2 ?v0 )(map_tree$c ?v3 ?v1 )))(= ?v0 ?v1 ))):named a67 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$a ?v4 (set_tree$a ?v0 ))(and (member$a ?v5 (set_tree$a ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (map_tree$ ?v2 ?v0 )(map_tree$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a68 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (set_tree$ ?v0 ))(= (fun_app$b ?v1 ?v3 )(fun_app$b ?v2 ?v3 ))))(= (map_tree$b ?v1 ?v0 )(map_tree$b ?v2 ?v0 )))):named a69 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (set_tree$ ?v0 ))(= (fun_app$a ?v1 ?v3 )(fun_app$a ?v2 ?v3 ))))(= (map_tree$a ?v1 ?v0 )(map_tree$a ?v2 ?v0 )))):named a70 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$a ?v3 (set_tree$a ?v0 ))(= (fun_app$c ?v1 ?v3 )(fun_app$c ?v2 ?v3 ))))(= (map_tree$c ?v1 ?v0 )(map_tree$c ?v2 ?v0 )))):named a71 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$a ?v3 (set_tree$a ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (map_tree$ ?v1 ?v0 )(map_tree$ ?v2 ?v0 )))):named a72 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$c (tree_pure$b ?v0 )(tree_pure$a ?v1 ))(tree_pure$a (fun_app$a ?v0 ?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$a (tree_pure$d ?v0 )(tree_pure$a ?v1 ))(tree_pure$ (fun_app$b ?v0 ?v1 )))):named a74 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$b (tree_pure$c ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$ ?v0 ?v1 )))):named a75 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$e ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$c ?v0 ?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A$ ))(= (tree_ap$j (tree_pure$g ?v0 )(tree_pure$a ?v1 ))(tree_pure$e (fun_app$d ?v0 ?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A$ ))(= (tree_ap$k (tree_pure$i ?v0 )(tree_pure$a ?v1 ))(tree_pure$d (fun_app$e ?v0 ?v1 )))):named a78 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$l (tree_pure$h ?v0 )(tree_pure$a ?v1 ))(tree_pure$c (fun_app$f ?v0 ?v1 )))):named a79 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$m (tree_pure$j ?v0 )(tree_pure$a ?v1 ))(tree_pure$b (fun_app$g ?v0 ?v1 )))):named a80 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B$ ))(= (tree_ap$n (tree_pure$k ?v0 )(tree_pure$ ?v1 ))(tree_pure$e (fun_app$h ?v0 ?v1 )))):named a81 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B$ ))(= (tree_ap$o (tree_pure$l ?v0 )(tree_pure$ ?v1 ))(tree_pure$d (fun_app$i ?v0 ?v1 )))):named a82 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$c ?v1 ?v2 ))(tree_ap$c (traverse_tree$e ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a83 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$b ?v1 ?v2 ))(tree_ap$b (traverse_tree$d ?v0 ?v1 )(traverse_tree$a ?v0 ?v2 )))):named a84 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$a ?v0 (tree_ap$a ?v1 ?v2 ))(tree_ap$a (traverse_tree$c ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a85 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (traverse_tree$a ?v0 (tree_ap$ ?v1 ?v2 ))(tree_ap$ (traverse_tree$b ?v0 ?v1 )(traverse_tree$a ?v0 ?v2 )))):named a86 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun_a_fun_tree$ )(?v2 B_b_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$p ?v1 ?v2 ))(tree_ap$p (traverse_tree$f ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a87 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun_a_fun_tree$ )(?v2 A_b_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$q ?v1 ?v2 ))(tree_ap$q (traverse_tree$g ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a88 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_a_fun_tree$ )(?v2 B_a_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$i ?v1 ?v2 ))(tree_ap$i (traverse_tree$h ?v0 ?v1 )(traverse_tree$d ?v0 ?v2 )))):named a89 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun_tree$ )(?v2 A_a_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$h ?v1 ?v2 ))(tree_ap$h (traverse_tree$i ?v0 ?v1 )(traverse_tree$e ?v0 ?v2 )))):named a90 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun_b_fun_tree$ )(?v2 B_b_fun_tree$ ))(= (traverse_tree$a ?v0 (tree_ap$g ?v1 ?v2 ))(tree_ap$g (traverse_tree$j ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a91 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun_b_fun_tree$ )(?v2 A_b_fun_tree$ ))(= (traverse_tree$a ?v0 (tree_ap$f ?v1 ?v2 ))(tree_ap$f (traverse_tree$k ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a92 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun$ ))(= (traverse_tree$b ?v0 (tree_pure$e ?v1 ))(tree_pure$e ?v1 ))):named a93 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun$ ))(= (traverse_tree$c ?v0 (tree_pure$d ?v1 ))(tree_pure$d ?v1 ))):named a94 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun$ ))(= (traverse_tree$d ?v0 (tree_pure$c ?v1 ))(tree_pure$c ?v1 ))):named a95 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun$ ))(= (traverse_tree$e ?v0 (tree_pure$b ?v1 ))(tree_pure$b ?v1 ))):named a96 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A$ ))(= (traverse_tree$ ?v0 (tree_pure$a ?v1 ))(tree_pure$a ?v1 ))):named a97 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B$ ))(= (traverse_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a98 ))
(check-sat )
;(get-unsat-core )
