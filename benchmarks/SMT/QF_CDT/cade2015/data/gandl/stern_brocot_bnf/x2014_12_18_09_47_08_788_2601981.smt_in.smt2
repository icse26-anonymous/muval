;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Dir_nat_nat_prod_nat_nat_prod_prod_fun$ 0 )
(declare-datatypes ()((Nat_nat_prod$ (pair$ (fst$ Nat$ )(snd$ Nat$ )))(Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$ )(snd$a Nat_nat_prod$ )))(Dir$ (l$ )(r$ ))(Dir_list$ (nil$ )(cons$ (hd$ Dir$ )(tl$ Dir_list$ )))))
(declare-sort Nat_nat_prod_nat_nat_prod_prod_tree$ 0)
(declare-fun root$ (Nat_nat_prod_nat_nat_prod_prod_tree$)Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun left$ (Nat_nat_prod_nat_nat_prod_prod_tree$)Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun right$ (Nat_nat_prod_nat_nat_prod_prod_tree$)Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun node$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod_tree$ Nat_nat_prod_nat_nat_prod_prod_tree$ )Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun d$ ()Dir$ )
(declare-fun m$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun d$a ()Dir$ )
(declare-fun ds$ ()Dir_list$ )
(declare-fun pm$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat$ )
(declare-fun ds$a ()Dir_list$ )
(declare-fun one$ ()Nat$ )
(declare-fun p_m$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun pm$a ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun imat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun p_m$a ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun path$ ()Dir_list$ )
(declare-fun pref$ ()Dir_list$ )
(declare-fun lLmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun path$a ()Dir_list$ )
(declare-fun uRmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun append$ (Dir_list$ Dir_list$ )Dir_list$ )
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun fun_app$ (Dir_nat_nat_prod_nat_nat_prod_prod_fun$ Dir$ )Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun case_dir$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$ )Dir_nat_nat_prod_nat_nat_prod_prod_fun$ )
(declare-fun traverse_tree$ (Dir_list$ Nat_nat_prod_nat_nat_prod_prod_tree$ )Nat_nat_prod_nat_nat_prod_prod_tree$ )
(declare-fun stern_brocot_iterate_aux$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod_tree$ )
(assert (! (not false ):named a0 ))
(assert (! (= (mulmat$ (fun_app$ (case_dir$ (mulmat$ m$ lLmat$ )(mulmat$ m$ uRmat$ ))d$ )pm$ )pm$a ):named a1 ))
(assert (! (= (mulmat$ (fun_app$ (case_dir$ (mulmat$ m$ lLmat$ )(mulmat$ m$ uRmat$ ))d$a )p_m$ )p_m$a ):named a2 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ )(?v2 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ (mulmat$ ?v0 ?v1 )?v2 )(mulmat$ ?v0 (mulmat$ ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Nat_nat_prod_nat_nat_prod_prod_tree$ ))(= (traverse_tree$ (append$ ?v0 ?v1 )?v2 )(traverse_tree$ ?v1 (traverse_tree$ ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ ?v0 imat$ )?v0 )):named a5 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ imat$ ?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ ))(! (= (fun_app$ (case_dir$ ?v0 ?v1 )l$ )?v0 ):pattern ((case_dir$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ ))(! (= (fun_app$ (case_dir$ ?v0 ?v1 )r$ )?v1 ):pattern ((case_dir$ ?v0 ?v1 )))):named a8 ))
(assert (! (not (= d$ d$a )):named a9 ))
(assert (! (= path$ (append$ pref$ (cons$ d$ ds$ ))):named a10 ))
(assert (! (= path$a (append$ pref$ (cons$ d$a ds$a ))):named a11 ))
(assert (! (forall ((?v0 Dir$ ))(=> (and (=> (= ?v0 l$ )false )(=> (= ?v0 r$ )false ))false )):named a12 ))
(assert (! (not (= l$ r$ )):named a13 ))
(assert (! (= (root$ (traverse_tree$ ds$ (stern_brocot_iterate_aux$ (fun_app$ (case_dir$ (mulmat$ m$ lLmat$ )(mulmat$ m$ uRmat$ ))d$ ))))pm$a ):named a14 ))
(assert (! (= (root$ (traverse_tree$ ds$a (stern_brocot_iterate_aux$ (fun_app$ (case_dir$ (mulmat$ m$ lLmat$ )(mulmat$ m$ uRmat$ ))d$a ))))p_m$a ):named a15 ))
(assert (! (=> (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (and (= (mulmat$ (fun_app$ (case_dir$ (mulmat$ m$ lLmat$ )(mulmat$ m$ uRmat$ ))d$a )?v0 )p_m$a )(= (det$ ?v0 )one$ ))false ))false ):named a16 ))
(assert (! (=> (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (and (= (mulmat$ (fun_app$ (case_dir$ (mulmat$ m$ lLmat$ )(mulmat$ m$ uRmat$ ))d$ )?v0 )pm$a )(= (det$ ?v0 )one$ ))false ))false ):named a17 ))
(check-sat )
;(get-unsat-core )
