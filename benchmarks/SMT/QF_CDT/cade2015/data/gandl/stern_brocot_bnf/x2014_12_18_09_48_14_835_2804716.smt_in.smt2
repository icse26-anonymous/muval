;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_a_fun_b_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort A_a_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_b_a_fun_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_a_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_a_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_a_fun_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun_b_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-sort A_tree$ 0)
(declare-sort B_a_fun_tree$ 0)
(declare-sort B_tree$ 0)
(declare-sort B_a_fun_stream$ 0)
(declare-sort B_stream$ 0)
(declare-sort A_a_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort A_b_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_tree$ 0)
(declare-sort B_a_a_fun_fun_tree$ 0)
(declare-sort B_b_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_tree$ 0)
(declare-sort B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_b_a_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_b_b_fun_fun_tree$ 0)
(declare-sort B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ 0)
(declare-sort A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort A_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_b_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_b_fun_fun_tree$ 0)
(declare-sort B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ 0)
(declare-sort B_b_fun_b_b_fun_fun_tree$ 0)
(declare-sort B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ 0)
(declare-sort A_b_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_a_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_a_fun_tree$ 0)
(declare-sort B_a_a_fun_a_fun_fun_tree$ 0)
(declare-sort B_a_a_fun_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_fun_tree$ 0)
(declare-sort B_b_fun_b_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_b_a_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_a_b_a_fun_fun_fun_tree$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun select$ (B_a_fun_tree$)B_a_fun$)
(declare-fun selecta$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun selectb$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun node$a (B_a_fun$ B_a_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$)
(declare-fun root$a (B_tree$)B$)
(declare-fun left$a (B_tree$)B_tree$)
(declare-fun right$a (B_tree$)B_tree$)
(declare-fun node$b (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun selectc$ (B_a_fun_stream$)B_a_fun$)
(declare-fun selectd$ (B_a_fun_stream$)B_a_fun_stream$)
(declare-fun sCons$a (B_a_fun$ B_a_fun_stream$ )B_a_fun_stream$)
(declare-fun shd$a (B_stream$)B$)
(declare-fun stl$a (B_stream$)B_stream$)
(declare-fun sCons$b (B$ B_stream$ )B_stream$)
(declare-fun selecte$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun$)
(declare-fun selectf$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun selectg$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun node$c (A_a_a_fun_fun$ A_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$)
(declare-fun selecth$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selecti$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selectj$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$d (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun selectk$ (A_b_fun_tree$)A_b_fun$)
(declare-fun selectl$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun selectm$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun node$e (A_b_fun$ A_b_fun_tree$ A_b_fun_tree$ )A_b_fun_tree$)
(declare-fun selectn$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun$)
(declare-fun selecto$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun selectp$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun node$f (B_b_a_fun_fun$ B_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$)
(declare-fun selectq$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun$)
(declare-fun selectr$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun_tree$)
(declare-fun selects$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun_tree$)
(declare-fun node$g (B_a_a_fun_fun$ B_a_a_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$)
(declare-fun selectt$ (B_b_fun_tree$)B_b_fun$)
(declare-fun selectu$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun selectv$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun node$h (B_b_fun$ B_b_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$)
(declare-fun selectw$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun$)
(declare-fun selectx$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun selecty$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun node$i (A_b_a_fun_fun$ A_b_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$)
(declare-fun selectz$ (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_a_b_a_fun_fun_fun$)
(declare-fun selecua$ (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selecub$ (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun node$j (B_a_a_fun_fun_a_b_a_fun_fun_fun$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selecuc$ (B_b_b_a_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun$)
(declare-fun selecud$ (B_b_b_a_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_tree$)
(declare-fun selecue$ (B_b_b_a_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_tree$)
(declare-fun node$k (B_b_b_a_fun_fun_fun$ B_b_b_a_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_b_a_fun_fun_fun_tree$)
(declare-fun selecuf$ (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$)
(declare-fun selecug$ (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecuh$ (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$l (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecui$ (B_a_b_a_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun$)
(declare-fun selecuj$ (B_a_b_a_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_tree$)
(declare-fun selecuk$ (B_a_b_a_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_tree$)
(declare-fun node$m (B_a_b_a_fun_fun_fun$ B_a_b_a_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )B_a_b_a_fun_fun_fun_tree$)
(declare-fun selecul$ (A_b_b_a_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun$)
(declare-fun selecum$ (A_b_b_a_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun_tree$)
(declare-fun selecun$ (A_b_b_a_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun_tree$)
(declare-fun node$n (A_b_b_a_fun_fun_fun$ A_b_b_a_fun_fun_fun_tree$ A_b_b_a_fun_fun_fun_tree$ )A_b_b_a_fun_fun_fun_tree$)
(declare-fun selecuo$ (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$)
(declare-fun selecup$ (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecuq$ (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$o (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecur$ (B_b_a_a_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun$)
(declare-fun selecus$ (B_b_a_a_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun_tree$)
(declare-fun selecut$ (B_b_a_a_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun_tree$)
(declare-fun node$p (B_b_a_a_fun_fun_fun$ B_b_a_a_fun_fun_fun_tree$ B_b_a_a_fun_fun_fun_tree$ )B_b_a_a_fun_fun_fun_tree$)
(declare-fun selecuu$ (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$)
(declare-fun selecuv$ (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)
(declare-fun selecuw$ (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)
(declare-fun node$q (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)
(declare-fun selecux$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun$)
(declare-fun selecuy$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun selecuz$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun node$r (B_b_b_fun_fun$ B_b_b_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$)
(declare-fun selecva$ (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_b_fun_fun_fun$)
(declare-fun selecvb$ (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)
(declare-fun selecvc$ (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)
(declare-fun node$s (B_b_b_fun_fun_b_b_b_fun_fun_fun$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)
(declare-fun selecvd$ (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$)
(declare-fun selecve$ (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecvf$ (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$t (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecvg$ (A_a_b_a_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun$)
(declare-fun selecvh$ (A_a_b_a_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_tree$)
(declare-fun selecvi$ (A_a_b_a_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_tree$)
(declare-fun node$u (A_a_b_a_fun_fun_fun$ A_a_b_a_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_tree$)
(declare-fun selecvj$ (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$)
(declare-fun selecvk$ (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecvl$ (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$v (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecvm$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_a_fun_fun_fun$)
(declare-fun selecvn$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun selecvo$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun node$w (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun selecvp$ (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_b_a_a_fun_fun_fun$)
(declare-fun selecvq$ (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun selecvr$ (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun node$x (A_b_a_fun_fun_b_a_a_fun_fun_fun$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun selecvs$ (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_a_fun_fun_fun$)
(declare-fun selecvt$ (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecvu$ (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun node$y (B_b_a_fun_fun_b_b_a_fun_fun_fun$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecvv$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun$)
(declare-fun selecvw$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun selecvx$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun node$z (B_a_fun_b_a_fun_fun$ B_a_fun_b_a_fun_fun_tree$ B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$)
(declare-fun selecvy$ (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$)
(declare-fun selecvz$ (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecwa$ (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$aa (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecwb$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun$)
(declare-fun selecwc$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun_tree$)
(declare-fun selecwd$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun_tree$)
(declare-fun node$ab (B_b_fun_b_a_fun_fun$ B_b_fun_b_a_fun_fun_tree$ B_b_fun_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$)
(declare-fun selecwe$ (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$)
(declare-fun selecwf$ (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecwg$ (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$ac (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecwh$ (B_a_b_fun_fun_tree$)B_a_b_fun_fun$)
(declare-fun selecwi$ (B_a_b_fun_fun_tree$)B_a_b_fun_fun_tree$)
(declare-fun selecwj$ (B_a_b_fun_fun_tree$)B_a_b_fun_fun_tree$)
(declare-fun node$ad (B_a_b_fun_fun$ B_a_b_fun_fun_tree$ B_a_b_fun_fun_tree$ )B_a_b_fun_fun_tree$)
(declare-fun selecwk$ (B_a_fun_b_b_fun_fun_tree$)B_a_fun_b_b_fun_fun$)
(declare-fun selecwl$ (B_a_fun_b_b_fun_fun_tree$)B_a_fun_b_b_fun_fun_tree$)
(declare-fun selecwm$ (B_a_fun_b_b_fun_fun_tree$)B_a_fun_b_b_fun_fun_tree$)
(declare-fun node$ae (B_a_fun_b_b_fun_fun$ B_a_fun_b_b_fun_fun_tree$ B_a_fun_b_b_fun_fun_tree$ )B_a_fun_b_b_fun_fun_tree$)
(declare-fun selecwn$ (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$)
(declare-fun selecwo$ (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwp$ (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun node$af (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwq$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun$)
(declare-fun selecwr$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun_tree$)
(declare-fun selecws$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun_tree$)
(declare-fun node$ag (B_b_fun_b_b_fun_fun$ B_b_fun_b_b_fun_fun_tree$ B_b_fun_b_b_fun_fun_tree$ )B_b_fun_b_b_fun_fun_tree$)
(declare-fun selecwt$ (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$)
(declare-fun selecwu$ (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwv$ (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun node$ah (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecww$ (A_b_fun_a_a_fun_fun_tree$)A_b_fun_a_a_fun_fun$)
(declare-fun selecwx$ (A_b_fun_a_a_fun_fun_tree$)A_b_fun_a_a_fun_fun_tree$)
(declare-fun selecwy$ (A_b_fun_a_a_fun_fun_tree$)A_b_fun_a_a_fun_fun_tree$)
(declare-fun node$ai (A_b_fun_a_a_fun_fun$ A_b_fun_a_a_fun_fun_tree$ A_b_fun_a_a_fun_fun_tree$ )A_b_fun_a_a_fun_fun_tree$)
(declare-fun selecwz$ (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$)
(declare-fun selecxa$ (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecxb$ (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$aj (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecxc$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun$)
(declare-fun selecxd$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun selecxe$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun node$ak (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$)
(declare-fun selecxf$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun selecxg$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecxh$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$al (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecxi$ (B_b_a_fun_a_fun_fun_tree$)B_b_a_fun_a_fun_fun$)
(declare-fun selecxj$ (B_b_a_fun_a_fun_fun_tree$)B_b_a_fun_a_fun_fun_tree$)
(declare-fun selecxk$ (B_b_a_fun_a_fun_fun_tree$)B_b_a_fun_a_fun_fun_tree$)
(declare-fun node$am (B_b_a_fun_a_fun_fun$ B_b_a_fun_a_fun_fun_tree$ B_b_a_fun_a_fun_fun_tree$ )B_b_a_fun_a_fun_fun_tree$)
(declare-fun selecxl$ (B_b_a_fun_fun_b_a_fun_fun_tree$)B_b_a_fun_fun_b_a_fun_fun$)
(declare-fun selecxm$ (B_b_a_fun_fun_b_a_fun_fun_tree$)B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecxn$ (B_b_a_fun_fun_b_a_fun_fun_tree$)B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun node$an (B_b_a_fun_fun_b_a_fun_fun$ B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_b_a_fun_fun_tree$ )B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecxo$ (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$)
(declare-fun selecxp$ (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecxq$ (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$ao (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecxr$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun$)
(declare-fun selecxs$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun selecxt$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun node$ap (B_a_fun_a_fun$ B_a_fun_a_fun_tree$ B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$)
(declare-fun selecxu$ (B_a_a_fun_a_fun_fun_tree$)B_a_a_fun_a_fun_fun$)
(declare-fun selecxv$ (B_a_a_fun_a_fun_fun_tree$)B_a_a_fun_a_fun_fun_tree$)
(declare-fun selecxw$ (B_a_a_fun_a_fun_fun_tree$)B_a_a_fun_a_fun_fun_tree$)
(declare-fun node$aq (B_a_a_fun_a_fun_fun$ B_a_a_fun_a_fun_fun_tree$ B_a_a_fun_a_fun_fun_tree$ )B_a_a_fun_a_fun_fun_tree$)
(declare-fun selecxx$ (B_a_a_fun_fun_b_a_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_fun$)
(declare-fun selecxy$ (B_a_a_fun_fun_b_a_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecxz$ (B_a_a_fun_fun_b_a_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun node$ar (B_a_a_fun_fun_b_a_fun_fun$ B_a_a_fun_fun_b_a_fun_fun_tree$ B_a_a_fun_fun_b_a_fun_fun_tree$ )B_a_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecya$ (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$)
(declare-fun selecyb$ (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecyc$ (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$as (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecyd$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun$)
(declare-fun selecye$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun selecyf$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun node$at (A_a_fun_a_fun$ A_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$)
(declare-fun selecyg$ (B_b_fun_b_b_a_fun_fun_fun_tree$)B_b_fun_b_b_a_fun_fun_fun$)
(declare-fun selecyh$ (B_b_fun_b_b_a_fun_fun_fun_tree$)B_b_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecyi$ (B_b_fun_b_b_a_fun_fun_fun_tree$)B_b_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun node$au (B_b_fun_b_b_a_fun_fun_fun$ B_b_fun_b_b_a_fun_fun_fun_tree$ B_b_fun_b_b_a_fun_fun_fun_tree$ )B_b_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecyj$ (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$)
(declare-fun selecyk$ (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecyl$ (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$av (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecym$ (B_a_fun_b_b_a_fun_fun_fun_tree$)B_a_fun_b_b_a_fun_fun_fun$)
(declare-fun selecyn$ (B_a_fun_b_b_a_fun_fun_fun_tree$)B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecyo$ (B_a_fun_b_b_a_fun_fun_fun_tree$)B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun node$aw (B_a_fun_b_b_a_fun_fun_fun$ B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_b_b_a_fun_fun_fun_tree$ )B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecyp$ (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$)
(declare-fun selecyq$ (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecyr$ (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$ax (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecys$ (A_a_fun_b_a_a_fun_fun_fun_tree$)A_a_fun_b_a_a_fun_fun_fun$)
(declare-fun selecyt$ (A_a_fun_b_a_a_fun_fun_fun_tree$)A_a_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun selecyu$ (A_a_fun_b_a_a_fun_fun_fun_tree$)A_a_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun node$ay (A_a_fun_b_a_a_fun_fun_fun$ A_a_fun_b_a_a_fun_fun_fun_tree$ A_a_fun_b_a_a_fun_fun_fun_tree$ )A_a_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun selecyv$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun$)
(declare-fun selecyw$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selecyx$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun node$az (B_a_fun_a_b_a_fun_fun_fun$ B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_a_b_a_fun_fun_fun_tree$ )B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-datatypes ()((Dir$ (l$ )(r$ ))(Dir_list$ (nil$ )(cons$ (hd$ Dir$ )(tl$ Dir_list$ )))))
(declare-sort B_a_fun_b_fun_tree$ 0)
(declare-sort B_a_fun_b_a_fun_fun_stream$ 0)
(declare-sort B_a_fun_b_fun_stream$ 0)
(declare-sort B_a_fun_a_fun_stream$ 0)
(declare-sort B_b_a_fun_fun_stream$ 0)
(declare-sort B_b_fun_stream$ 0)
(declare-sort A_b_a_fun_fun_stream$ 0)
(declare-sort A_b_fun_stream$ 0)
(declare-sort A_a_fun_stream$ 0)
(declare-fun selecyy$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun$)
(declare-fun selecyz$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun_tree$)
(declare-fun selecza$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun_tree$)
(declare-fun node$ba (B_a_fun_b_fun$ B_a_fun_b_fun_tree$ B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$)
(declare-fun seleczb$ (B_a_fun_b_a_fun_fun_stream$)B_a_fun_b_a_fun_fun$)
(declare-fun seleczc$ (B_a_fun_b_a_fun_fun_stream$)B_a_fun_b_a_fun_fun_stream$)
(declare-fun sCons$c (B_a_fun_b_a_fun_fun$ B_a_fun_b_a_fun_fun_stream$ )B_a_fun_b_a_fun_fun_stream$)
(declare-fun seleczd$ (B_a_fun_b_fun_stream$)B_a_fun_b_fun$)
(declare-fun selecze$ (B_a_fun_b_fun_stream$)B_a_fun_b_fun_stream$)
(declare-fun sCons$d (B_a_fun_b_fun$ B_a_fun_b_fun_stream$ )B_a_fun_b_fun_stream$)
(declare-fun seleczf$ (B_a_fun_a_fun_stream$)B_a_fun_a_fun$)
(declare-fun seleczg$ (B_a_fun_a_fun_stream$)B_a_fun_a_fun_stream$)
(declare-fun sCons$e (B_a_fun_a_fun$ B_a_fun_a_fun_stream$ )B_a_fun_a_fun_stream$)
(declare-fun seleczh$ (B_b_a_fun_fun_stream$)B_b_a_fun_fun$)
(declare-fun seleczi$ (B_b_a_fun_fun_stream$)B_b_a_fun_fun_stream$)
(declare-fun sCons$f (B_b_a_fun_fun$ B_b_a_fun_fun_stream$ )B_b_a_fun_fun_stream$)
(declare-fun seleczj$ (B_b_fun_stream$)B_b_fun$)
(declare-fun seleczk$ (B_b_fun_stream$)B_b_fun_stream$)
(declare-fun sCons$g (B_b_fun$ B_b_fun_stream$ )B_b_fun_stream$)
(declare-fun seleczl$ (A_b_a_fun_fun_stream$)A_b_a_fun_fun$)
(declare-fun seleczm$ (A_b_a_fun_fun_stream$)A_b_a_fun_fun_stream$)
(declare-fun sCons$h (A_b_a_fun_fun$ A_b_a_fun_fun_stream$ )A_b_a_fun_fun_stream$)
(declare-fun seleczn$ (A_b_fun_stream$)A_b_fun$)
(declare-fun seleczo$ (A_b_fun_stream$)A_b_fun_stream$)
(declare-fun sCons$i (A_b_fun$ A_b_fun_stream$ )A_b_fun_stream$)
(declare-fun seleczp$ (A_a_fun_stream$)A_a_fun$)
(declare-fun seleczq$ (A_a_fun_stream$)A_a_fun_stream$)
(declare-fun sCons$j (A_a_fun$ A_a_fun_stream$ )A_a_fun_stream$)
(declare-fun f$ ()B_a_fun_tree$ )
(declare-fun x$ ()B_tree$ )
(declare-fun shd$b (B_a_fun_stream$ )B_a_fun$ )
(declare-fun stl$b (B_a_fun_stream$ )B_a_fun_stream$ )
(declare-fun root$b (B_a_fun_tree$ )B_a_fun$ )
(declare-fun st_ap$ (B_a_fun_stream$ B_stream$ )A_stream$ )
(declare-fun st_ap$a (B_a_fun_b_a_fun_fun_stream$ B_a_fun_stream$ )B_a_fun_stream$ )
(declare-fun st_ap$b (B_a_fun_b_fun_stream$ B_a_fun_stream$ )B_stream$ )
(declare-fun st_ap$c (B_a_fun_a_fun_stream$ B_a_fun_stream$ )A_stream$ )
(declare-fun st_ap$d (B_b_a_fun_fun_stream$ B_stream$ )B_a_fun_stream$ )
(declare-fun st_ap$e (B_b_fun_stream$ B_stream$ )B_stream$ )
(declare-fun st_ap$f (A_b_a_fun_fun_stream$ A_stream$ )B_a_fun_stream$ )
(declare-fun st_ap$g (A_b_fun_stream$ A_stream$ )B_stream$ )
(declare-fun st_ap$h (A_a_fun_stream$ A_stream$ )A_stream$ )
(declare-fun stream$ (A_tree$ )A_stream$ )
(declare-fun tree_C$ ()B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$ ()B_a_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$ ()B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun fun_app$ (B_a_a_fun_fun$ B$ )A_a_fun$ )
(declare-fun stream$a (B_a_fun_tree$ )B_a_fun_stream$ )
(declare-fun stream$b (B_tree$ )B_stream$ )
(declare-fun tree_C$a ()B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$b ()B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$c ()B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$d ()B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )
(declare-fun tree_C$e ()A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$f ()A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$g ()A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )
(declare-fun tree_C$h ()A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_C$i ()B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$a ()A_a_fun_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_K$b ()B_b_b_fun_fun_tree$ )
(declare-fun tree_K$c ()B_a_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$d ()A_a_a_fun_fun_tree$ )
(declare-fun tree_K$e ()A_b_a_fun_fun_tree$ )
(declare-fun tree_S$a ()B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$b ()B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_S$c ()B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_S$d ()A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$e ()A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$f ()B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$g ()B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$h ()B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$i ()B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (B_b_fun$ B$ )B$ )
(declare-fun fun_app$b (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$c (B_a_fun_b_fun$ B_a_fun$ )B$ )
(declare-fun fun_app$d (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$e (B_a_fun_a_fun$ B_a_fun$ )A$ )
(declare-fun fun_app$f (A_b_fun$ A$ )B$ )
(declare-fun fun_app$g (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$h (A_a_fun$ A$ )A$ )
(declare-fun fun_app$i (B_a_fun$ B$ )A$ )
(declare-fun tree_ap$a (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$b (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$c (B_b_a_fun_fun_tree$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$d (B_a_a_fun_fun_tree$ B_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$e (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$f (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$g (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$h (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$i (B_b_b_a_fun_fun_fun_tree$ B_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$j (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$k (A_b_b_a_fun_fun_fun_tree$ A_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$l (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )A_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$m (B_a_b_a_fun_fun_fun_tree$ B_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$n (B_b_a_a_fun_fun_fun_tree$ B_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$o (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ B_b_a_a_fun_fun_fun_tree$ )B_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$p (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$q (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$ )
(declare-fun tree_ap$r (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ A_b_b_a_fun_fun_fun_tree$ )B_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$s (A_a_b_a_fun_fun_fun_tree$ A_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$t (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$u (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_ap$v (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$w (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$x (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$y (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$z (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$aa (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ab (B_a_fun_b_b_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$ac (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ B_a_b_fun_fun_tree$ )B_a_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$ad (B_a_b_fun_fun_tree$ B_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$ae (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$af (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$ag (A_b_fun_a_a_fun_fun_tree$ A_b_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$ah (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ai (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$aj (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ak (B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$al (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_a_fun_fun_tree$ )B_b_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$am (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$an (B_b_a_fun_a_fun_fun_tree$ B_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_ap$ao (B_a_a_fun_fun_b_a_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$ap (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_a_fun_fun_tree$ )B_a_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$aq (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$ar (B_a_a_fun_a_fun_fun_tree$ B_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_ap$as (B_b_fun_b_b_a_fun_fun_fun_tree$ B_b_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$at (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$au (B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$av (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )B_a_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$aw (A_a_fun_b_a_a_fun_fun_fun_tree$ A_a_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ax (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ay (B_a_fun_b_fun_tree$ B_a_fun_tree$ )B_tree$ )
(declare-fun tree_chop$ (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_pure$ (B$ )B_tree$ )
(declare-fun tree_chop$a (B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_chop$b (B_tree$ )B_tree$ )
(declare-fun tree_chop$c (A_tree$ )A_tree$ )
(declare-fun tree_chop$d (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_chop$e (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_chop$f (A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_chop$g (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_chop$h (B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_chop$i (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun tree_chop$j (B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$ )
(declare-fun tree_chop$k (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_pure$a (A$ )A_tree$ )
(declare-fun tree_pure$b (B_a_a_fun_fun$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_pure$c (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$d (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$e (B_b_a_fun_fun$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_pure$f (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$g (B_a_fun_b_fun$ )B_a_fun_b_fun_tree$ )
(declare-fun tree_pure$h (B_a_fun_b_a_fun_fun$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$i (B_a_fun_a_fun$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_pure$j (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$k (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun traverse_tree$ (Dir_list$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun traverse_tree$a (Dir_list$ B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun traverse_tree$b (Dir_list$ B_tree$ )B_tree$ )
(declare-fun traverse_tree$c (Dir_list$ A_tree$ )A_tree$ )
(declare-fun traverse_tree$d (Dir_list$ B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun traverse_tree$e (Dir_list$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun traverse_tree$f (Dir_list$ A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun traverse_tree$g (Dir_list$ B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun traverse_tree$h (Dir_list$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun traverse_tree$i (Dir_list$ A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun traverse_tree$j (Dir_list$ B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$ )
(declare-fun traverse_tree$k (Dir_list$ B_b_fun_tree$ )B_b_fun_tree$ )
(assert (! (not (= (stream$ (tree_ap$ f$ x$ ))(st_ap$ (stream$a f$ )(stream$b x$ )))):named a0 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_a_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$a ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$b ?v0 ?v2 )(tree_ap$b ?v1 ?v2 )))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$c ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$d ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$e ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$f ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$g ?v0 ?v2 )(tree_ap$g ?v1 ?v2 )))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$ ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 A_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$f (tree_ap$h tree_C$ ?v0 )?v1 )?v2 )(tree_ap$g (tree_ap$d ?v0 ?v2 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$c (tree_ap$i (tree_ap$j tree_C$a ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$i ?v0 ?v2 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ )(?v2 B_tree$ ))(= (tree_ap$c (tree_ap$k (tree_ap$l tree_C$b ?v0 )?v1 )?v2 )(tree_ap$f (tree_ap$m ?v0 ?v2 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 B_b_a_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$d (tree_ap$n (tree_ap$o tree_C$c ?v0 )?v1 )?v2 )(tree_ap$d (tree_ap$n ?v0 ?v2 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$p (tree_ap$q tree_C$d ?v0 )?v1 )?v2 )(tree_ap$e (tree_ap$p ?v0 ?v2 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_b_b_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 A_tree$ ))(= (tree_ap$f (tree_ap$m (tree_ap$r tree_C$e ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$k ?v0 ?v2 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (tree_ap$f (tree_ap$s (tree_ap$t tree_C$f ?v0 )?v1 )?v2 )(tree_ap$f (tree_ap$s ?v0 ?v2 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (tree_ap$g (tree_ap$a (tree_ap$u tree_C$g ?v0 )?v1 )?v2 )(tree_ap$g (tree_ap$a ?v0 ?v2 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 B_tree$ )(?v2 A_tree$ ))(= (tree_ap$g (tree_ap$d (tree_ap$v tree_C$h ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$f ?v0 ?v2 )?v1 ))):named a17 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$c (tree_ap$w tree_C$i ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$c ?v0 ?v2 )?v1 ))):named a18 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$x (tree_ap$y tree_S$ ?v0 )?v1 )?v2 )(tree_ap$g (tree_ap$d ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$z (tree_ap$aa tree_S$a ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$c ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$ab (tree_ap$ac tree_S$b ?v0 )?v1 )?v2 )(tree_ap$b (tree_ap$ad ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$ae (tree_ap$af tree_S$c ?v0 )?v1 )?v2 )(tree_ap$e (tree_ap$p ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$g (tree_ap$ag (tree_ap$ah tree_S$d ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$f ?v0 ?v2 )(tree_ap$b ?v1 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$g (tree_ap$ai (tree_ap$aj tree_S$e ?v0 )?v1 )?v2 )(tree_ap$g (tree_ap$a ?v0 ?v2 )(tree_ap$g ?v1 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ak (tree_ap$al tree_S$f ?v0 )?v1 )?v2 )(tree_ap$am (tree_ap$an ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 B_a_a_fun_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ao (tree_ap$ap tree_S$g ?v0 )?v1 )?v2 )(tree_ap$aq (tree_ap$ar ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$c (tree_ap$as (tree_ap$at tree_S$h ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$i ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$c (tree_ap$au (tree_ap$av tree_S$i ?v0 )?v1 )?v2 )(tree_ap$f (tree_ap$m ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$c (tree_ap$au tree_K$ ?v0 )?v1 )?v0 )):named a29 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_ap$aw tree_K$a ?v0 )?v1 )?v0 )):named a30 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_ap$p tree_K$b ?v0 )?v1 )?v0 )):named a31 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$f (tree_ap$ax tree_K$c ?v0 )?v1 )?v0 )):named a32 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (tree_ap$g (tree_ap$a tree_K$d ?v0 )?v1 )?v0 )):named a33 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_ap$f tree_K$e ?v0 )?v1 )?v0 )):named a34 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$c ?v0 (tree_pure$ ?v2 ))(tree_ap$c ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$d ?v0 (tree_pure$ ?v2 ))(tree_ap$d ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$e ?v0 (tree_pure$ ?v2 ))(tree_ap$e ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$f ?v0 (tree_pure$a ?v2 ))(tree_ap$f ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$g ?v0 (tree_pure$a ?v2 ))(tree_ap$g ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$ ?v0 (tree_pure$ ?v2 ))(tree_ap$ ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$d ?v1 ?v2 ))(tree_ap$d (traverse_tree$a ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$c ?v0 (tree_ap$g ?v1 ?v2 ))(tree_ap$g (traverse_tree$ ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_a_fun_tree$ )(?v2 B_a_fun_tree$ ))(= (traverse_tree$c ?v0 (tree_ap$am ?v1 ?v2 ))(tree_ap$am (traverse_tree$d ?v0 ?v1 )(traverse_tree$e ?v0 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_a_fun_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$e ?v0 (tree_ap$f ?v1 ?v2 ))(tree_ap$f (traverse_tree$f ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_b_a_fun_fun_tree$ )(?v2 B_a_fun_tree$ ))(= (traverse_tree$e ?v0 (tree_ap$x ?v1 ?v2 ))(tree_ap$x (traverse_tree$g ?v0 ?v1 )(traverse_tree$e ?v0 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (traverse_tree$e ?v0 (tree_ap$c ?v1 ?v2 ))(tree_ap$c (traverse_tree$h ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$b ?v0 (tree_ap$b ?v1 ?v2 ))(tree_ap$b (traverse_tree$i ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_b_fun_tree$ )(?v2 B_a_fun_tree$ ))(= (traverse_tree$b ?v0 (tree_ap$ay ?v1 ?v2 ))(tree_ap$ay (traverse_tree$j ?v0 ?v1 )(traverse_tree$e ?v0 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (traverse_tree$b ?v0 (tree_ap$e ?v1 ?v2 ))(tree_ap$e (traverse_tree$k ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (traverse_tree$c ?v0 (tree_ap$ ?v1 ?v2 ))(tree_ap$ (traverse_tree$e ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (tree_chop$ (tree_ap$d ?v0 ?v1 ))(tree_ap$d (tree_chop$a ?v0 )(tree_chop$b ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_chop$c (tree_ap$g ?v0 ?v1 ))(tree_ap$g (tree_chop$ ?v0 )(tree_chop$c ?v1 )))):named a52 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (tree_chop$c (tree_ap$am ?v0 ?v1 ))(tree_ap$am (tree_chop$d ?v0 )(tree_chop$e ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (tree_chop$e (tree_ap$f ?v0 ?v1 ))(tree_ap$f (tree_chop$f ?v0 )(tree_chop$c ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (tree_chop$e (tree_ap$x ?v0 ?v1 ))(tree_ap$x (tree_chop$g ?v0 )(tree_chop$e ?v1 )))):named a55 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (tree_chop$e (tree_ap$c ?v0 ?v1 ))(tree_ap$c (tree_chop$h ?v0 )(tree_chop$b ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (tree_chop$b (tree_ap$b ?v0 ?v1 ))(tree_ap$b (tree_chop$i ?v0 )(tree_chop$c ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (tree_chop$b (tree_ap$ay ?v0 ?v1 ))(tree_ap$ay (tree_chop$j ?v0 )(tree_chop$e ?v1 )))):named a58 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (tree_chop$b (tree_ap$e ?v0 ?v1 ))(tree_ap$e (tree_chop$k ?v0 )(tree_chop$b ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_chop$c (tree_ap$ ?v0 ?v1 ))(tree_ap$ (tree_chop$e ?v0 )(tree_chop$b ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_tree$ ))(= (stl$ (stream$ ?v0 ))(stream$ (tree_chop$c ?v0 )))):named a61 ))
(assert (! (forall ((?v0 B_a_fun_tree$ ))(= (stl$b (stream$a ?v0 ))(stream$a (tree_chop$e ?v0 )))):named a62 ))
(assert (! (forall ((?v0 B_tree$ ))(= (stl$a (stream$b ?v0 ))(stream$b (tree_chop$b ?v0 )))):named a63 ))
(assert (! (forall ((?v0 A_tree$ ))(= (shd$ (stream$ ?v0 ))(root$ ?v0 ))):named a64 ))
(assert (! (forall ((?v0 B_a_fun_tree$ ))(= (shd$b (stream$a ?v0 ))(root$b ?v0 ))):named a65 ))
(assert (! (forall ((?v0 B_tree$ ))(= (shd$a (stream$b ?v0 ))(root$a ?v0 ))):named a66 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$d (tree_pure$b ?v0 )(tree_pure$ ?v1 ))(tree_pure$c (fun_app$ ?v0 ?v1 )))):named a67 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$e (tree_pure$d ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$a ?v0 ?v1 )))):named a68 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$c (tree_pure$e ?v0 )(tree_pure$ ?v1 ))(tree_pure$f (fun_app$b ?v0 ?v1 )))):named a69 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$ay (tree_pure$g ?v0 )(tree_pure$f ?v1 ))(tree_pure$ (fun_app$c ?v0 ?v1 )))):named a70 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$x (tree_pure$h ?v0 )(tree_pure$f ?v1 ))(tree_pure$f (fun_app$d ?v0 ?v1 )))):named a71 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$am (tree_pure$i ?v0 )(tree_pure$f ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$b (tree_pure$j ?v0 )(tree_pure$a ?v1 ))(tree_pure$ (fun_app$f ?v0 ?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$f (tree_pure$k ?v0 )(tree_pure$a ?v1 ))(tree_pure$f (fun_app$g ?v0 ?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$g (tree_pure$c ?v0 )(tree_pure$a ?v1 ))(tree_pure$a (fun_app$h ?v0 ?v1 )))):named a75 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$f ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$i ?v0 ?v1 )))):named a76 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$d (tree_pure$b ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$d (fun_app$ ?v0 ?v1 )(tree_ap$d (tree_pure$b ?v0 )?v2 )(tree_ap$d (tree_pure$b ?v0 )?v3 )))):named a77 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$e (tree_pure$d ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$a ?v0 ?v1 )(tree_ap$e (tree_pure$d ?v0 )?v2 )(tree_ap$e (tree_pure$d ?v0 )?v3 )))):named a78 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$c (tree_pure$e ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$a (fun_app$b ?v0 ?v1 )(tree_ap$c (tree_pure$e ?v0 )?v2 )(tree_ap$c (tree_pure$e ?v0 )?v3 )))):named a79 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$b (tree_pure$j ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$b (fun_app$f ?v0 ?v1 )(tree_ap$b (tree_pure$j ?v0 )?v2 )(tree_ap$b (tree_pure$j ?v0 )?v3 )))):named a80 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$g (tree_pure$c ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$h ?v0 ?v1 )(tree_ap$g (tree_pure$c ?v0 )?v2 )(tree_ap$g (tree_pure$c ?v0 )?v3 )))):named a81 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$f (tree_pure$k ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$a (fun_app$g ?v0 ?v1 )(tree_ap$f (tree_pure$k ?v0 )?v2 )(tree_ap$f (tree_pure$k ?v0 )?v3 )))):named a82 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$ay (tree_pure$g ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$b (fun_app$c ?v0 ?v1 )(tree_ap$ay (tree_pure$g ?v0 )?v2 )(tree_ap$ay (tree_pure$g ?v0 )?v3 )))):named a83 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$am (tree_pure$i ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$ (fun_app$e ?v0 ?v1 )(tree_ap$am (tree_pure$i ?v0 )?v2 )(tree_ap$am (tree_pure$i ?v0 )?v3 )))):named a84 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$x (tree_pure$h ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$a (fun_app$d ?v0 ?v1 )(tree_ap$x (tree_pure$h ?v0 )?v2 )(tree_ap$x (tree_pure$h ?v0 )?v3 )))):named a85 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$ (tree_pure$f ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$i ?v0 ?v1 )(tree_ap$ (tree_pure$f ?v0 )?v2 )(tree_ap$ (tree_pure$f ?v0 )?v3 )))):named a86 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_a_a_fun_fun_tree$ )(?v2 B_a_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$d (node$g ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$d (fun_app$ ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$g ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a87 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$e (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$b (fun_app$a ?v0 ?v3 )(tree_ap$e ?v1 ?v4 )(tree_ap$e ?v2 ?v5 ))):pattern ((tree_ap$e (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a88 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_b_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$c (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$a (fun_app$b ?v0 ?v3 )(tree_ap$c ?v1 ?v4 )(tree_ap$c ?v2 ?v5 ))):pattern ((tree_ap$c (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a89 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$b (fun_app$f ?v0 ?v3 )(tree_ap$b ?v1 ?v4 )(tree_ap$b ?v2 ?v5 ))):pattern ((tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a90 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$g (node$d ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$ (fun_app$h ?v0 ?v3 )(tree_ap$g ?v1 ?v4 )(tree_ap$g ?v2 ?v5 ))):pattern ((tree_ap$g (node$d ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a91 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_b_a_fun_fun_tree$ )(?v2 A_b_a_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$a (fun_app$g ?v0 ?v3 )(tree_ap$f ?v1 ?v4 )(tree_ap$f ?v2 ?v5 ))):pattern ((tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a92 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_b_fun_tree$ )(?v2 B_a_fun_b_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$ay (node$ba ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$b (fun_app$c ?v0 ?v3 )(tree_ap$ay ?v1 ?v4 )(tree_ap$ay ?v2 ?v5 ))):pattern ((tree_ap$ay (node$ba ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a93 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_a_fun_tree$ )(?v2 B_a_fun_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$am (node$ap ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$ (fun_app$e ?v0 ?v3 )(tree_ap$am ?v1 ?v4 )(tree_ap$am ?v2 ?v5 ))):pattern ((tree_ap$am (node$ap ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a94 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_b_a_fun_fun_tree$ )(?v2 B_a_fun_b_a_fun_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$x (node$z ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$a (fun_app$d ?v0 ?v3 )(tree_ap$x ?v1 ?v4 )(tree_ap$x ?v2 ?v5 ))):pattern ((tree_ap$x (node$z ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a95 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$i ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a96 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_b_a_fun_fun_stream$ )(?v2 B_a_fun$ )(?v3 B_a_fun_stream$ ))(! (= (st_ap$a (sCons$c ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$a (fun_app$d ?v0 ?v2 )(st_ap$a ?v1 ?v3 ))):pattern ((st_ap$a (sCons$c ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a97 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_b_fun_stream$ )(?v2 B_a_fun$ )(?v3 B_a_fun_stream$ ))(! (= (st_ap$b (sCons$d ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$b (fun_app$c ?v0 ?v2 )(st_ap$b ?v1 ?v3 ))):pattern ((st_ap$b (sCons$d ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a98 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_a_fun_stream$ )(?v2 B_a_fun$ )(?v3 B_a_fun_stream$ ))(! (= (st_ap$c (sCons$e ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(sCons$ (fun_app$e ?v0 ?v2 )(st_ap$c ?v1 ?v3 ))):pattern ((st_ap$c (sCons$e ?v0 ?v1 )(sCons$a ?v2 ?v3 ))))):named a99 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_b_a_fun_fun_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (st_ap$d (sCons$f ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$a (fun_app$b ?v0 ?v2 )(st_ap$d ?v1 ?v3 ))):pattern ((st_ap$d (sCons$f ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a100 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (st_ap$e (sCons$g ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$b (fun_app$a ?v0 ?v2 )(st_ap$e ?v1 ?v3 ))):pattern ((st_ap$e (sCons$g ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a101 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_b_a_fun_fun_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (st_ap$f (sCons$h ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$a (fun_app$g ?v0 ?v2 )(st_ap$f ?v1 ?v3 ))):pattern ((st_ap$f (sCons$h ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a102 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (st_ap$g (sCons$i ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$b (fun_app$f ?v0 ?v2 )(st_ap$g ?v1 ?v3 ))):pattern ((st_ap$g (sCons$i ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a103 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (st_ap$h (sCons$j ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$ (fun_app$h ?v0 ?v2 )(st_ap$h ?v1 ?v3 ))):pattern ((st_ap$h (sCons$j ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a104 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_stream$ )(?v2 B$ )(?v3 B_stream$ ))(! (= (st_ap$ (sCons$a ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(sCons$ (fun_app$i ?v0 ?v2 )(st_ap$ ?v1 ?v3 ))):pattern ((st_ap$ (sCons$a ?v0 ?v1 )(sCons$b ?v2 ?v3 ))))):named a105 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$b ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a106 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a107 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a108 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A$ ))(= (traverse_tree$c ?v0 (tree_pure$a ?v1 ))(tree_pure$a ?v1 ))):named a109 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun$ ))(= (traverse_tree$e ?v0 (tree_pure$f ?v1 ))(tree_pure$f ?v1 ))):named a110 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B$ ))(= (traverse_tree$b ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a111 ))
(assert (! (forall ((?v0 B$ ))(= (tree_chop$b (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a112 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (tree_chop$e (tree_pure$f ?v0 ))(tree_pure$f ?v0 ))):named a113 ))
(assert (! (forall ((?v0 A$ ))(= (tree_chop$c (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a114 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tree_pure$ ?v0 )(tree_pure$ ?v1 ))(= ?v0 ?v1 ))):named a115 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun$ ))(= (= (tree_pure$f ?v0 )(tree_pure$f ?v1 ))(= ?v0 ?v1 ))):named a116 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (tree_pure$a ?v0 )(tree_pure$a ?v1 ))(= ?v0 ?v1 ))):named a117 ))
(check-sat )
;(get-unsat-core )
