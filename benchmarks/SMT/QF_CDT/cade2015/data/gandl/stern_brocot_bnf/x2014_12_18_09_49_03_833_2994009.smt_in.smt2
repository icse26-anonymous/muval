;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Int_int_fun$ 0 )
(declare-sort Int_tree$ 0)
(declare-fun root$ (Int_tree$)Int)
(declare-fun left$ (Int_tree$)Int_tree$)
(declare-fun right$ (Int_tree$)Int_tree$)
(declare-fun node$ (Int Int_tree$ Int_tree$ )Int_tree$)
(declare-fun num$ ()Int_tree$ )
(declare-fun fIXME_x$ ()Int_tree$ )
(declare-fun fun_app$ (Int_int_fun$ Int )Int )
(declare-fun map_tree$ (Int_int_fun$ Int_tree$ )Int_tree$ )
(declare-fun tree_pure$ (Int )Int_tree$ )
(declare-fun tree_iterate$ (Int_int_fun$ Int_int_fun$ Int )Int_tree$ )
(assert (! (not (= (root$ fIXME_x$ )0 )):named a0 ))
(assert (! (= 0 0 ):named a1 ))
(assert (! (forall ((?v0 Int ))(= (= 0 ?v0 )(= ?v0 0 ))):named a2 ))
(assert (! (= (root$ num$ )1 ):named a3 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_int_fun$ )(?v2 Int ))(= (root$ (tree_iterate$ ?v0 ?v1 ?v2 ))?v2 )):named a4 ))
(assert (! (forall ((?v0 Int ))(= (root$ (tree_pure$ ?v0 ))?v0 )):named a5 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$ ?v0 ?v1 )))):named a8 ))
(check-sat )
;(get-unsat-core )
