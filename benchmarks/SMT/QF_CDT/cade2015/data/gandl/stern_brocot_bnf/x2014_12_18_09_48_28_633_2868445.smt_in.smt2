;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_nat_fun_nat_fun$ 0 )
(declare-sort Nat_nat_nat_fun_fun$ 0 )
(declare-sort Nat_nat_fun_nat_fun_nat_fun$ 0 )
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0 )
(declare-sort Nat_nat_nat_fun_fun_nat_fun$ 0 )
(declare-sort Nat_nat_nat_fun_nat_fun_fun$ 0 )
(declare-sort Nat_nat_nat_nat_fun_fun_fun$ 0 )
(declare-sort Nat_nat_fun_nat_nat_fun_fun_nat_fun$ 0 )
(declare-sort Nat_nat_fun_nat_nat_nat_fun_fun_fun$ 0 )
(declare-sort Nat_nat_nat_fun_fun_nat_nat_fun_fun$ 0 )
(declare-sort Nat_nat_nat_fun_nat_nat_fun_fun_fun$ 0 )
(declare-sort Nat_tree$ 0)
(declare-sort Nat_nat_fun_nat_nat_fun_fun_tree$ 0)
(declare-sort Nat_nat_nat_fun_fun_tree$ 0)
(declare-sort Nat_nat_fun_nat_fun_tree$ 0)
(declare-sort Nat_nat_fun_tree$ 0)
(declare-sort Nat_nat_nat_fun_fun_nat_fun_tree$ 0)
(declare-sort Nat_nat_fun_nat_fun_nat_fun_tree$ 0)
(declare-sort Nat_nat_nat_nat_fun_fun_fun_tree$ 0)
(declare-sort Nat_nat_nat_fun_nat_fun_fun_tree$ 0)
(declare-sort Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$ 0)
(declare-sort Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$ 0)
(declare-sort Nat_nat_fun_nat_nat_fun_fun_stream$ 0)
(declare-sort Nat_nat_nat_fun_fun_stream$ 0)
(declare-sort Nat_nat_fun_nat_fun_stream$ 0)
(declare-sort Nat_nat_fun_stream$ 0)
(declare-sort Nat_stream$ 0)
(declare-fun root$ (Nat_tree$)Nat$)
(declare-fun left$ (Nat_tree$)Nat_tree$)
(declare-fun right$ (Nat_tree$)Nat_tree$)
(declare-fun node$ (Nat$ Nat_tree$ Nat_tree$ )Nat_tree$)
(declare-fun select$ (Nat_nat_fun_nat_nat_fun_fun_tree$)Nat_nat_fun_nat_nat_fun_fun$)
(declare-fun selecta$ (Nat_nat_fun_nat_nat_fun_fun_tree$)Nat_nat_fun_nat_nat_fun_fun_tree$)
(declare-fun selectb$ (Nat_nat_fun_nat_nat_fun_fun_tree$)Nat_nat_fun_nat_nat_fun_fun_tree$)
(declare-fun node$a (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun_nat_nat_fun_fun_tree$ Nat_nat_fun_nat_nat_fun_fun_tree$ )Nat_nat_fun_nat_nat_fun_fun_tree$)
(declare-fun selectc$ (Nat_nat_nat_fun_fun_tree$)Nat_nat_nat_fun_fun$)
(declare-fun selectd$ (Nat_nat_nat_fun_fun_tree$)Nat_nat_nat_fun_fun_tree$)
(declare-fun selecte$ (Nat_nat_nat_fun_fun_tree$)Nat_nat_nat_fun_fun_tree$)
(declare-fun node$b (Nat_nat_nat_fun_fun$ Nat_nat_nat_fun_fun_tree$ Nat_nat_nat_fun_fun_tree$ )Nat_nat_nat_fun_fun_tree$)
(declare-fun selectf$ (Nat_nat_fun_nat_fun_tree$)Nat_nat_fun_nat_fun$)
(declare-fun selectg$ (Nat_nat_fun_nat_fun_tree$)Nat_nat_fun_nat_fun_tree$)
(declare-fun selecth$ (Nat_nat_fun_nat_fun_tree$)Nat_nat_fun_nat_fun_tree$)
(declare-fun node$c (Nat_nat_fun_nat_fun$ Nat_nat_fun_nat_fun_tree$ Nat_nat_fun_nat_fun_tree$ )Nat_nat_fun_nat_fun_tree$)
(declare-fun selecti$ (Nat_nat_fun_tree$)Nat_nat_fun$)
(declare-fun selectj$ (Nat_nat_fun_tree$)Nat_nat_fun_tree$)
(declare-fun selectk$ (Nat_nat_fun_tree$)Nat_nat_fun_tree$)
(declare-fun node$d (Nat_nat_fun$ Nat_nat_fun_tree$ Nat_nat_fun_tree$ )Nat_nat_fun_tree$)
(declare-fun selectl$ (Nat_nat_nat_fun_fun_nat_fun_tree$)Nat_nat_nat_fun_fun_nat_fun$)
(declare-fun selectm$ (Nat_nat_nat_fun_fun_nat_fun_tree$)Nat_nat_nat_fun_fun_nat_fun_tree$)
(declare-fun selectn$ (Nat_nat_nat_fun_fun_nat_fun_tree$)Nat_nat_nat_fun_fun_nat_fun_tree$)
(declare-fun node$e (Nat_nat_nat_fun_fun_nat_fun$ Nat_nat_nat_fun_fun_nat_fun_tree$ Nat_nat_nat_fun_fun_nat_fun_tree$ )Nat_nat_nat_fun_fun_nat_fun_tree$)
(declare-fun selecto$ (Nat_nat_fun_nat_fun_nat_fun_tree$)Nat_nat_fun_nat_fun_nat_fun$)
(declare-fun selectp$ (Nat_nat_fun_nat_fun_nat_fun_tree$)Nat_nat_fun_nat_fun_nat_fun_tree$)
(declare-fun selectq$ (Nat_nat_fun_nat_fun_nat_fun_tree$)Nat_nat_fun_nat_fun_nat_fun_tree$)
(declare-fun node$f (Nat_nat_fun_nat_fun_nat_fun$ Nat_nat_fun_nat_fun_nat_fun_tree$ Nat_nat_fun_nat_fun_nat_fun_tree$ )Nat_nat_fun_nat_fun_nat_fun_tree$)
(declare-fun selectr$ (Nat_nat_nat_nat_fun_fun_fun_tree$)Nat_nat_nat_nat_fun_fun_fun$)
(declare-fun selects$ (Nat_nat_nat_nat_fun_fun_fun_tree$)Nat_nat_nat_nat_fun_fun_fun_tree$)
(declare-fun selectt$ (Nat_nat_nat_nat_fun_fun_fun_tree$)Nat_nat_nat_nat_fun_fun_fun_tree$)
(declare-fun node$g (Nat_nat_nat_nat_fun_fun_fun$ Nat_nat_nat_nat_fun_fun_fun_tree$ Nat_nat_nat_nat_fun_fun_fun_tree$ )Nat_nat_nat_nat_fun_fun_fun_tree$)
(declare-fun selectu$ (Nat_nat_nat_fun_nat_fun_fun_tree$)Nat_nat_nat_fun_nat_fun_fun$)
(declare-fun selectv$ (Nat_nat_nat_fun_nat_fun_fun_tree$)Nat_nat_nat_fun_nat_fun_fun_tree$)
(declare-fun selectw$ (Nat_nat_nat_fun_nat_fun_fun_tree$)Nat_nat_nat_fun_nat_fun_fun_tree$)
(declare-fun node$h (Nat_nat_nat_fun_nat_fun_fun$ Nat_nat_nat_fun_nat_fun_fun_tree$ Nat_nat_nat_fun_nat_fun_fun_tree$ )Nat_nat_nat_fun_nat_fun_fun_tree$)
(declare-fun selectx$ (Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$)Nat_nat_fun_nat_nat_fun_fun_nat_fun$)
(declare-fun selecty$ (Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$)Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$)
(declare-fun selectz$ (Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$)Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$)
(declare-fun node$i (Nat_nat_fun_nat_nat_fun_fun_nat_fun$ Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$ Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$ )Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$)
(declare-fun selecua$ (Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$)Nat_nat_nat_fun_fun_nat_nat_fun_fun$)
(declare-fun selecub$ (Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$)Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$)
(declare-fun selecuc$ (Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$)Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$)
(declare-fun node$j (Nat_nat_nat_fun_fun_nat_nat_fun_fun$ Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$ Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$ )Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$)
(declare-fun selecud$ (Nat_nat_fun_nat_nat_fun_fun_stream$)Nat_nat_fun_nat_nat_fun_fun$)
(declare-fun selecue$ (Nat_nat_fun_nat_nat_fun_fun_stream$)Nat_nat_fun_nat_nat_fun_fun_stream$)
(declare-fun sCons$ (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun_nat_nat_fun_fun_stream$ )Nat_nat_fun_nat_nat_fun_fun_stream$)
(declare-fun selecuf$ (Nat_nat_nat_fun_fun_stream$)Nat_nat_nat_fun_fun$)
(declare-fun selecug$ (Nat_nat_nat_fun_fun_stream$)Nat_nat_nat_fun_fun_stream$)
(declare-fun sCons$a (Nat_nat_nat_fun_fun$ Nat_nat_nat_fun_fun_stream$ )Nat_nat_nat_fun_fun_stream$)
(declare-fun selecuh$ (Nat_nat_fun_nat_fun_stream$)Nat_nat_fun_nat_fun$)
(declare-fun selecui$ (Nat_nat_fun_nat_fun_stream$)Nat_nat_fun_nat_fun_stream$)
(declare-fun sCons$b (Nat_nat_fun_nat_fun$ Nat_nat_fun_nat_fun_stream$ )Nat_nat_fun_nat_fun_stream$)
(declare-fun selecuj$ (Nat_nat_fun_stream$)Nat_nat_fun$)
(declare-fun selecuk$ (Nat_nat_fun_stream$)Nat_nat_fun_stream$)
(declare-fun sCons$c (Nat_nat_fun$ Nat_nat_fun_stream$ )Nat_nat_fun_stream$)
(declare-fun shd$ (Nat_stream$)Nat$)
(declare-fun stl$ (Nat_stream$)Nat_stream$)
(declare-fun sCons$d (Nat$ Nat_stream$ )Nat_stream$)
(declare-fun den$ ()Nat_tree$ )
(declare-fun num$ ()Nat_tree$ )
(declare-fun one$ ()Nat$ )
(declare-fun plus$ (Nat_tree$ Nat_tree$ )Nat_tree$ )
(declare-fun stl$a (Nat_nat_fun_nat_nat_fun_fun_stream$ )Nat_nat_fun_nat_nat_fun_fun_stream$ )
(declare-fun stl$b (Nat_nat_nat_fun_fun_stream$ )Nat_nat_nat_fun_fun_stream$ )
(declare-fun stl$c (Nat_nat_fun_nat_fun_stream$ )Nat_nat_fun_nat_fun_stream$ )
(declare-fun stl$d (Nat_nat_fun_stream$ )Nat_nat_fun_stream$ )
(declare-fun root$a (Nat_nat_fun_tree$ )Nat_nat_fun$ )
(declare-fun stream$ (Nat_nat_fun_nat_nat_fun_fun_tree$ )Nat_nat_fun_nat_nat_fun_fun_stream$ )
(declare-fun fun_app$ (Nat_nat_nat_fun_fun$ Nat$ )Nat_nat_fun$ )
(declare-fun stream$a (Nat_nat_nat_fun_fun_tree$ )Nat_nat_nat_fun_fun_stream$ )
(declare-fun stream$b (Nat_nat_fun_nat_fun_tree$ )Nat_nat_fun_nat_fun_stream$ )
(declare-fun stream$c (Nat_nat_fun_tree$ )Nat_nat_fun_stream$ )
(declare-fun stream$d (Nat_tree$ )Nat_stream$ )
(declare-fun tree_ap$ (Nat_nat_fun_tree$ Nat_tree$ )Nat_tree$ )
(declare-fun fun_app$a (Nat_nat_fun_nat_fun$ Nat_nat_fun$ )Nat$ )
(declare-fun fun_app$b (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$ )Nat_nat_fun$ )
(declare-fun fun_app$c (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun map_tree$ (Nat_nat_fun$ Nat_tree$ )Nat_tree$ )
(declare-fun tree_ap$a (Nat_nat_fun_nat_fun_tree$ Nat_nat_fun_tree$ )Nat_tree$ )
(declare-fun tree_ap$b (Nat_nat_nat_fun_fun_tree$ Nat_tree$ )Nat_nat_fun_tree$ )
(declare-fun tree_ap$c (Nat_nat_fun_nat_nat_fun_fun_tree$ Nat_nat_fun_tree$ )Nat_nat_fun_tree$ )
(declare-fun tree_ap$d (Nat_nat_nat_fun_fun_nat_fun_tree$ Nat_nat_nat_fun_fun_tree$ )Nat_tree$ )
(declare-fun tree_ap$e (Nat_nat_fun_nat_fun_nat_fun_tree$ Nat_nat_fun_nat_fun_tree$ )Nat_tree$ )
(declare-fun tree_ap$f (Nat_nat_nat_nat_fun_fun_fun_tree$ Nat_tree$ )Nat_nat_nat_fun_fun_tree$ )
(declare-fun tree_ap$g (Nat_nat_nat_fun_nat_fun_fun_tree$ Nat_tree$ )Nat_nat_fun_nat_fun_tree$ )
(declare-fun tree_ap$h (Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$ Nat_nat_fun_nat_nat_fun_fun_tree$ )Nat_tree$ )
(declare-fun tree_ap$i (Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$ Nat_nat_nat_fun_fun_tree$ )Nat_nat_fun_tree$ )
(declare-fun map_tree$a (Nat_nat_nat_fun_fun$ Nat_tree$ )Nat_nat_fun_tree$ )
(declare-fun map_tree$b (Nat_nat_fun_nat_fun$ Nat_nat_fun_tree$ )Nat_tree$ )
(declare-fun map_tree$c (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun_tree$ )Nat_nat_fun_tree$ )
(declare-fun map_tree$d (Nat_nat_nat_nat_fun_fun_fun$ Nat_tree$ )Nat_nat_nat_fun_fun_tree$ )
(declare-fun map_tree$e (Nat_nat_nat_fun_nat_fun_fun$ Nat_tree$ )Nat_nat_fun_nat_fun_tree$ )
(declare-fun map_tree$f (Nat_nat_nat_fun_fun_nat_fun$ Nat_nat_nat_fun_fun_tree$ )Nat_tree$ )
(declare-fun map_tree$g (Nat_nat_fun_nat_fun_nat_fun$ Nat_nat_fun_nat_fun_tree$ )Nat_tree$ )
(declare-fun map_tree$h (Nat_nat_nat_fun_nat_nat_fun_fun_fun$ Nat_tree$ )Nat_nat_fun_nat_nat_fun_fun_tree$ )
(declare-fun map_tree$i (Nat_nat_fun_nat_nat_nat_fun_fun_fun$ Nat_nat_fun_tree$ )Nat_nat_nat_fun_fun_tree$ )
(declare-fun tree_chop$ (Nat_tree$ )Nat_tree$ )
(declare-fun tree_pure$ (Nat_nat_fun_nat_nat_fun_fun$ )Nat_nat_fun_nat_nat_fun_fun_tree$ )
(declare-fun tree_chop$a (Nat_nat_fun_nat_nat_fun_fun_tree$ )Nat_nat_fun_nat_nat_fun_fun_tree$ )
(declare-fun tree_chop$b (Nat_nat_nat_fun_fun_tree$ )Nat_nat_nat_fun_fun_tree$ )
(declare-fun tree_chop$c (Nat_nat_fun_nat_fun_tree$ )Nat_nat_fun_nat_fun_tree$ )
(declare-fun tree_chop$d (Nat_nat_fun_tree$ )Nat_nat_fun_tree$ )
(declare-fun tree_chop$e (Nat_nat_nat_fun_fun_nat_fun_tree$ )Nat_nat_nat_fun_fun_nat_fun_tree$ )
(declare-fun tree_chop$f (Nat_nat_fun_nat_fun_nat_fun_tree$ )Nat_nat_fun_nat_fun_nat_fun_tree$ )
(declare-fun tree_chop$g (Nat_nat_nat_nat_fun_fun_fun_tree$ )Nat_nat_nat_nat_fun_fun_fun_tree$ )
(declare-fun tree_chop$h (Nat_nat_nat_fun_nat_fun_fun_tree$ )Nat_nat_nat_fun_nat_fun_fun_tree$ )
(declare-fun tree_chop$i (Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$ )Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$ )
(declare-fun tree_chop$j (Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$ )Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$ )
(declare-fun tree_pure$a (Nat_nat_nat_fun_fun$ )Nat_nat_nat_fun_fun_tree$ )
(declare-fun tree_pure$b (Nat_nat_fun_nat_fun$ )Nat_nat_fun_nat_fun_tree$ )
(declare-fun tree_pure$c (Nat_nat_fun$ )Nat_nat_fun_tree$ )
(declare-fun tree_pure$d (Nat$ )Nat_tree$ )
(assert (! (not (= den$ (tree_chop$ num$ ))):named a0 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_nat_fun_fun$ ))(= (tree_chop$a (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a1 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ ))(= (tree_chop$b (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a2 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_fun$ ))(= (tree_chop$c (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a3 ))
(assert (! (forall ((?v0 Nat_nat_fun$ ))(= (tree_chop$d (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (tree_chop$ (tree_pure$d ?v0 ))(tree_pure$d ?v0 ))):named a5 ))
(assert (! (= (right$ den$ )den$ ):named a6 ))
(assert (! (forall ((?v0 Nat_nat_fun_tree$ )(?v1 Nat_tree$ ))(= (tree_chop$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (tree_chop$d ?v0 )(tree_chop$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_fun_tree$ )(?v1 Nat_nat_fun_tree$ ))(= (tree_chop$ (tree_ap$a ?v0 ?v1 ))(tree_ap$a (tree_chop$c ?v0 )(tree_chop$d ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun_tree$ )(?v1 Nat_tree$ ))(= (tree_chop$d (tree_ap$b ?v0 ?v1 ))(tree_ap$b (tree_chop$b ?v0 )(tree_chop$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_nat_fun_fun_tree$ )(?v1 Nat_nat_fun_tree$ ))(= (tree_chop$d (tree_ap$c ?v0 ?v1 ))(tree_ap$c (tree_chop$a ?v0 )(tree_chop$d ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun_nat_fun_tree$ )(?v1 Nat_nat_nat_fun_fun_tree$ ))(= (tree_chop$ (tree_ap$d ?v0 ?v1 ))(tree_ap$d (tree_chop$e ?v0 )(tree_chop$b ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_fun_nat_fun_tree$ )(?v1 Nat_nat_fun_nat_fun_tree$ ))(= (tree_chop$ (tree_ap$e ?v0 ?v1 ))(tree_ap$e (tree_chop$f ?v0 )(tree_chop$c ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_nat_nat_fun_fun_fun_tree$ )(?v1 Nat_tree$ ))(= (tree_chop$b (tree_ap$f ?v0 ?v1 ))(tree_ap$f (tree_chop$g ?v0 )(tree_chop$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_nat_fun_fun_tree$ )(?v1 Nat_tree$ ))(= (tree_chop$c (tree_ap$g ?v0 ?v1 ))(tree_ap$g (tree_chop$h ?v0 )(tree_chop$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_nat_fun_fun_nat_fun_tree$ )(?v1 Nat_nat_fun_nat_nat_fun_fun_tree$ ))(= (tree_chop$ (tree_ap$h ?v0 ?v1 ))(tree_ap$h (tree_chop$i ?v0 )(tree_chop$a ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun_nat_nat_fun_fun_tree$ )(?v1 Nat_nat_nat_fun_fun_tree$ ))(= (tree_chop$d (tree_ap$i ?v0 ?v1 ))(tree_ap$i (tree_chop$j ?v0 )(tree_chop$b ?v1 )))):named a16 ))
(assert (! (= (left$ num$ )num$ ):named a17 ))
(assert (! (= (right$ num$ )(plus$ num$ den$ )):named a18 ))
(assert (! (= (left$ den$ )(plus$ num$ den$ )):named a19 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (map_tree$ ?v0 (tree_chop$ ?v1 ))(tree_chop$ (map_tree$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat_tree$ ))(= (map_tree$a ?v0 (tree_chop$ ?v1 ))(tree_chop$d (map_tree$a ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_fun$ )(?v1 Nat_nat_fun_tree$ ))(= (map_tree$b ?v0 (tree_chop$d ?v1 ))(tree_chop$ (map_tree$b ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_nat_fun_fun$ )(?v1 Nat_nat_fun_tree$ ))(= (map_tree$c ?v0 (tree_chop$d ?v1 ))(tree_chop$d (map_tree$c ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 Nat_nat_nat_nat_fun_fun_fun$ )(?v1 Nat_tree$ ))(= (map_tree$d ?v0 (tree_chop$ ?v1 ))(tree_chop$b (map_tree$d ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_nat_fun_fun$ )(?v1 Nat_tree$ ))(= (map_tree$e ?v0 (tree_chop$ ?v1 ))(tree_chop$c (map_tree$e ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun_nat_fun$ )(?v1 Nat_nat_nat_fun_fun_tree$ ))(= (map_tree$f ?v0 (tree_chop$b ?v1 ))(tree_chop$ (map_tree$f ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_fun_nat_fun$ )(?v1 Nat_nat_fun_nat_fun_tree$ ))(= (map_tree$g ?v0 (tree_chop$c ?v1 ))(tree_chop$ (map_tree$g ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_nat_nat_fun_fun_fun$ )(?v1 Nat_tree$ ))(= (map_tree$h ?v0 (tree_chop$ ?v1 ))(tree_chop$a (map_tree$h ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_nat_nat_fun_fun_fun$ )(?v1 Nat_nat_fun_tree$ ))(= (map_tree$i ?v0 (tree_chop$d ?v1 ))(tree_chop$b (map_tree$i ?v0 ?v1 )))):named a29 ))
(assert (! (= den$ (node$ one$ (plus$ num$ den$ )den$ )):named a30 ))
(assert (! (= num$ (node$ one$ num$ (plus$ num$ den$ ))):named a31 ))
(assert (! (= (root$ den$ )one$ ):named a32 ))
(assert (! (= (root$ num$ )one$ ):named a33 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_nat_fun_fun_tree$ ))(= (stl$a (stream$ ?v0 ))(stream$ (tree_chop$a ?v0 )))):named a34 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun_tree$ ))(= (stl$b (stream$a ?v0 ))(stream$a (tree_chop$b ?v0 )))):named a35 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_fun_tree$ ))(= (stl$c (stream$b ?v0 ))(stream$b (tree_chop$c ?v0 )))):named a36 ))
(assert (! (forall ((?v0 Nat_nat_fun_tree$ ))(= (stl$d (stream$c ?v0 ))(stream$c (tree_chop$d ?v0 )))):named a37 ))
(assert (! (forall ((?v0 Nat_tree$ ))(= (stl$ (stream$d ?v0 ))(stream$d (tree_chop$ ?v0 )))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ )(?v3 Nat$ )(?v4 Nat_tree$ )(?v5 Nat_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a39 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat$ ))(= (tree_ap$b (tree_pure$a ?v0 )(tree_pure$d ?v1 ))(tree_pure$c (fun_app$ ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_fun$ )(?v1 Nat_nat_fun$ ))(= (tree_ap$a (tree_pure$b ?v0 )(tree_pure$c ?v1 ))(tree_pure$d (fun_app$a ?v0 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_nat_fun_fun$ )(?v1 Nat_nat_fun$ ))(= (tree_ap$c (tree_pure$ ?v0 )(tree_pure$c ?v1 ))(tree_pure$c (fun_app$b ?v0 ?v1 )))):named a42 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (tree_ap$ (tree_pure$c ?v0 )(tree_pure$d ?v1 ))(tree_pure$d (fun_app$c ?v0 ?v1 )))):named a43 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_nat_fun_fun$ )(?v1 Nat_nat_fun_tree$ ))(= (root$a (map_tree$c ?v0 ?v1 ))(fun_app$b ?v0 (root$a ?v1 )))):named a44 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_fun$ )(?v1 Nat_nat_fun_tree$ ))(= (root$ (map_tree$b ?v0 ?v1 ))(fun_app$a ?v0 (root$a ?v1 )))):named a45 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat_tree$ ))(= (root$a (map_tree$a ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a46 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$c ?v0 (root$ ?v1 )))):named a47 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_nat_fun_fun$ )(?v1 Nat_nat_fun_tree$ ))(= (root$a (map_tree$c ?v0 ?v1 ))(fun_app$b ?v0 (root$a ?v1 )))):named a48 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_fun$ )(?v1 Nat_nat_fun_tree$ ))(= (root$ (map_tree$b ?v0 ?v1 ))(fun_app$a ?v0 (root$a ?v1 )))):named a49 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat_tree$ ))(= (root$a (map_tree$a ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a50 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$c ?v0 (root$ ?v1 )))):named a51 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_nat_fun_fun$ )(?v1 Nat_nat_fun$ ))(= (map_tree$c ?v0 (tree_pure$c ?v1 ))(tree_pure$c (fun_app$b ?v0 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_fun$ )(?v1 Nat_nat_fun$ ))(= (map_tree$b ?v0 (tree_pure$c ?v1 ))(tree_pure$d (fun_app$a ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat$ ))(= (map_tree$a ?v0 (tree_pure$d ?v1 ))(tree_pure$c (fun_app$ ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (map_tree$ ?v0 (tree_pure$d ?v1 ))(tree_pure$d (fun_app$c ?v0 ?v1 )))):named a55 ))
(check-sat )
;(get-unsat-core )
