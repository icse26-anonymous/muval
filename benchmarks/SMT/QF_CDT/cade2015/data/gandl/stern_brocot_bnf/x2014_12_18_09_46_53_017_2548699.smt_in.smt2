;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_prod_nat_nat_prod_fun$ 0 )
(declare-sort Dir_nat_nat_prod_nat_nat_prod_prod_fun$ 0 )
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ 0 )
(declare-datatypes ()((Nat_nat_prod$ (pair$ (fst$ Nat$ )(snd$ Nat$ )))(Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$ )(snd$a Nat_nat_prod$ )))))
(declare-sort Nat_nat_prod_nat_nat_prod_prod_tree$ 0)
(declare-fun root$ (Nat_nat_prod_nat_nat_prod_prod_tree$)Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun left$ (Nat_nat_prod_nat_nat_prod_prod_tree$)Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun right$ (Nat_nat_prod_nat_nat_prod_prod_tree$)Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun node$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod_tree$ Nat_nat_prod_nat_nat_prod_prod_tree$ )Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-datatypes ()((Dir$ (l$ )(r$ ))(Dir_list$ (nil$ )(cons$ (hd$ Dir$ )(tl$ Dir_list$ )))))
(declare-sort Nat_nat_prod_tree$ 0)
(declare-fun root$a (Nat_nat_prod_tree$)Nat_nat_prod$)
(declare-fun left$a (Nat_nat_prod_tree$)Nat_nat_prod_tree$)
(declare-fun right$a (Nat_nat_prod_tree$)Nat_nat_prod_tree$)
(declare-fun node$a (Nat_nat_prod$ Nat_nat_prod_tree$ Nat_nat_prod_tree$ )Nat_nat_prod_tree$)
(declare-fun d$ ()Dir$ )
(declare-fun m$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun ds$ ()Dir_list$ )
(declare-fun m$a ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat$ )
(declare-fun one$ ()Nat$ )
(declare-fun imat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun path$ ()Dir_list$ )
(declare-fun lLmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun path$a ()Dir_list$ )
(declare-fun uRmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun append$ (Dir_list$ Dir_list$ )Dir_list$ )
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ )
(declare-fun fun_app$ (Dir_nat_nat_prod_nat_nat_prod_prod_fun$ Dir$ )Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun case_dir$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$ )Dir_nat_nat_prod_nat_nat_prod_prod_fun$ )
(declare-fun fun_app$a (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun tree_pure$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod_tree$ )
(declare-fun tree_pure$a (Nat_nat_prod$ )Nat_nat_prod_tree$ )
(declare-fun tree_iterate$ (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod_tree$ )
(declare-fun traverse_tree$ (Dir_list$ Nat_nat_prod_nat_nat_prod_prod_tree$ )Nat_nat_prod_nat_nat_prod_prod_tree$ )
(declare-fun tree_iterate$a (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$ )Nat_nat_prod_tree$ )
(declare-fun traverse_tree$a (Dir_list$ Nat_nat_prod_tree$ )Nat_nat_prod_tree$ )
(declare-fun stern_brocot_iterate$ ()Nat_nat_prod_tree$ )
(declare-fun stern_brocot_iterate_aux$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod_tree$ )
(assert (! (not (= (root$ (traverse_tree$ ds$ (stern_brocot_iterate_aux$ (fun_app$ (case_dir$ (fun_app$a (mulmat$ m$ )lLmat$ )(fun_app$a (mulmat$ m$ )uRmat$ ))d$ ))))m$a )):named a0 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ )(?v2 Nat_nat_prod_nat_nat_prod_prod$ ))(= (fun_app$a (mulmat$ (fun_app$a (mulmat$ ?v0 )?v1 ))?v2 )(fun_app$a (mulmat$ ?v0 )(fun_app$a (mulmat$ ?v1 )?v2 )))):named a1 ))
(assert (! (= path$ (append$ path$a (append$ (cons$ d$ nil$ )ds$ ))):named a2 ))
(assert (! (= m$ (root$ (traverse_tree$ path$a (stern_brocot_iterate_aux$ imat$ )))):named a3 ))
(assert (! (= m$a (root$ (traverse_tree$ path$ (stern_brocot_iterate_aux$ imat$ )))):named a4 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Nat_nat_prod_nat_nat_prod_prod_tree$ ))(= (traverse_tree$ (append$ ?v0 ?v1 )?v2 )(traverse_tree$ ?v1 (traverse_tree$ ?v0 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Nat_nat_prod_tree$ ))(= (traverse_tree$a (append$ ?v0 ?v1 )?v2 )(traverse_tree$a ?v1 (traverse_tree$a ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (fun_app$a (mulmat$ ?v0 )imat$ )?v0 )):named a7 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (fun_app$a (mulmat$ imat$ )?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ ))(! (= (fun_app$ (case_dir$ ?v0 ?v1 )l$ )?v0 ):pattern ((case_dir$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ ))(! (= (fun_app$ (case_dir$ ?v0 ?v1 )r$ )?v1 ):pattern ((case_dir$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Dir_list$ ))(exists ((?v2 Nat_nat_prod_nat_nat_prod_prod$ ))(and (= (fun_app$a (mulmat$ ?v0 )?v2 )(root$ (traverse_tree$ ?v1 (stern_brocot_iterate_aux$ ?v0 ))))(= (det$ ?v2 )one$ )))):named a11 ))
(assert (! (= (det$ m$a )one$ ):named a12 ))
(assert (! (= (det$ m$ )one$ ):named a13 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ ))(= (traverse_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_nat_prod$ ))(= (traverse_tree$a ?v0 (tree_pure$a ?v1 ))(tree_pure$a ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ )(?v1 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ )(?v2 Nat_nat_prod_nat_nat_prod_prod$ ))(= (root$ (tree_iterate$ ?v0 ?v1 ?v2 ))?v2 )):named a16 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$ )(?v1 Nat_nat_prod_nat_nat_prod_fun$ )(?v2 Nat_nat_prod$ ))(= (root$a (tree_iterate$a ?v0 ?v1 ?v2 ))?v2 )):named a17 ))
(assert (! (= (root$a (traverse_tree$a path$a stern_brocot_iterate$ ))(root$a (traverse_tree$a path$ stern_brocot_iterate$ ))):named a18 ))
(check-sat )
;(get-unsat-core )
