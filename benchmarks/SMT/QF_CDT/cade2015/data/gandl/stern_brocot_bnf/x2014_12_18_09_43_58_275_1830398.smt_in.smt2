;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_a_fun_b_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_bool_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort B_a_fun_tree$ 0)
(declare-sort B_tree$ 0)
(declare-sort B_a_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_tree$ 0)
(declare-sort B_b_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_tree$ 0)
(declare-sort A_b_fun_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun select$ (B_a_fun_tree$)B_a_fun$)
(declare-fun selecta$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun selectb$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun node$a (B_a_fun$ B_a_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$)
(declare-fun root$a (B_tree$)B$)
(declare-fun left$a (B_tree$)B_tree$)
(declare-fun right$a (B_tree$)B_tree$)
(declare-fun node$b (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun selectc$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun$)
(declare-fun selectd$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun selecte$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun node$c (B_a_fun_b_a_fun_fun$ B_a_fun_b_a_fun_fun_tree$ B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$)
(declare-fun selectf$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun$)
(declare-fun selectg$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun selecth$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun node$d (B_b_a_fun_fun$ B_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$)
(declare-fun selecti$ (B_b_fun_tree$)B_b_fun$)
(declare-fun selectj$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun selectk$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun node$e (B_b_fun$ B_b_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$)
(declare-fun selectl$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun$)
(declare-fun selectm$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun selectn$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun node$f (A_b_a_fun_fun$ A_b_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$)
(declare-fun selecto$ (A_b_fun_tree$)A_b_fun$)
(declare-fun selectp$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun selectq$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun node$g (A_b_fun$ A_b_fun_tree$ A_b_fun_tree$ )A_b_fun_tree$)
(declare-fun selectr$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selects$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selectt$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$h (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun f$ ()B_a_fun$ )
(declare-fun l$ ()B_tree$ )
(declare-fun r$ ()B_tree$ )
(declare-fun x$ ()B$ )
(declare-fun left$b (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun left$c (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun root$b (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun$ )
(declare-fun root$c (B_a_fun_tree$ )B_a_fun$ )
(declare-fun right$b (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun right$c (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun fun_app$ (B_a_fun$ B$ )A$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (B_a_fun_bool_fun$ B_a_fun$ )Bool )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$e (A_a_fun$ A$ )A$ )
(declare-fun fun_app$f (A_b_fun$ A$ )B$ )
(declare-fun fun_app$g (B_b_fun$ B$ )B$ )
(declare-fun fun_app$h (B_a_fun_a_fun$ B_a_fun$ )A$ )
(declare-fun fun_app$i (B_a_fun_b_fun$ B_a_fun$ )B$ )
(declare-fun fun_app$j (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$k (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$l (A_b_a_fun_b_a_fun_fun_fun$ A$ )B_a_fun_b_a_fun_fun$ )
(declare-fun map_tree$ (B_b_a_fun_fun$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$a (B_b_a_fun_fun_tree$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$b (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$c (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$d (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$e (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$f (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$a (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun map_tree$b (A_b_a_fun_fun$ A_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$c (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun map_tree$d (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$e (B_a_fun_b_a_fun_fun$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$f (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$g (B_a_fun_a_fun$ B_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$h (B_a_fun_b_fun$ B_a_fun_tree$ )B_tree$ )
(declare-fun map_tree$i (A_b_a_fun_b_a_fun_fun_fun$ A_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun pred_tree$ (B_a_fun_bool_fun$ B_a_fun_tree$ )Bool )
(declare-fun tree_pure$ (B_a_fun$ )B_a_fun_tree$ )
(declare-fun pred_tree$a (B_bool_fun$ B_tree$ )Bool )
(declare-fun pred_tree$b (A_bool_fun$ A_tree$ )Bool )
(declare-fun tree_pure$a (B_a_fun_b_a_fun_fun$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$b (B$ )B_tree$ )
(declare-fun tree_pure$c (A$ )A_tree$ )
(declare-fun tree_pure$d (B_b_a_fun_fun$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_pure$e (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$f (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_pure$g (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$h (A_a_fun$ )A_a_fun_tree$ )
(assert (! (not (= (tree_ap$ (tree_pure$ f$ )(node$b x$ l$ r$ ))(node$ (fun_app$ f$ x$ )(tree_ap$ (tree_pure$ f$ )l$ )(tree_ap$ (tree_pure$ f$ )r$ )))):named a0 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$b ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a3 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ ))(! (= (tree_pure$a ?v0 )(node$c ?v0 (tree_pure$a ?v0 )(tree_pure$a ?v0 ))):pattern ((tree_pure$a ?v0 )))):named a4 ))
(assert (! (forall ((?v0 B$ ))(! (= (tree_pure$b ?v0 )(node$b ?v0 (tree_pure$b ?v0 )(tree_pure$b ?v0 ))):pattern ((tree_pure$b ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A$ ))(! (= (tree_pure$c ?v0 )(node$ ?v0 (tree_pure$c ?v0 )(tree_pure$c ?v0 ))):pattern ((tree_pure$c ?v0 )))):named a6 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (tree_pure$ ?v0 )(node$a ?v0 (tree_pure$ ?v0 )(tree_pure$ ?v0 ))):pattern ((tree_pure$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 B_a_fun_tree$ ))(=> (forall ((?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(=> (= ?v0 (node$a ?v1 ?v2 ?v3 ))false ))false )):named a8 ))
(assert (! (forall ((?v0 B_tree$ ))(=> (forall ((?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(=> (= ?v0 (node$b ?v1 ?v2 ?v3 ))false ))false )):named a9 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (forall ((?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false ))false )):named a10 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_tree$ ))(= (tree_ap$a (tree_pure$d ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (tree_ap$b (tree_pure$e ?v0 )?v1 )(map_tree$a ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$c (tree_pure$f ?v0 )?v1 )(map_tree$b ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (tree_ap$d (tree_pure$g ?v0 )?v1 )(map_tree$c ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (tree_ap$e (tree_pure$h ?v0 )?v1 )(map_tree$d ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_tree$ ))(= (tree_ap$f (tree_pure$a ?v0 )?v1 )(map_tree$e ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_pure$ ?v0 )?v1 )(map_tree$f ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 B_a_fun_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(! (= (pred_tree$ ?v0 (node$a ?v1 ?v2 ?v3 ))(and (fun_app$a ?v0 ?v1 )(and (pred_tree$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 )))):pattern ((pred_tree$ ?v0 (node$a ?v1 ?v2 ?v3 ))))):named a18 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(! (= (pred_tree$a ?v0 (node$b ?v1 ?v2 ?v3 ))(and (fun_app$b ?v0 ?v1 )(and (pred_tree$a ?v0 ?v2 )(pred_tree$a ?v0 ?v3 )))):pattern ((pred_tree$a ?v0 (node$b ?v1 ?v2 ?v3 ))))):named a19 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (pred_tree$b ?v0 (node$ ?v1 ?v2 ?v3 ))(and (fun_app$c ?v0 ?v1 )(and (pred_tree$b ?v0 ?v2 )(pred_tree$b ?v0 ?v3 )))):pattern ((pred_tree$b ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a20 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ ))(= (map_tree$e ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$d ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$d ?v0 (tree_pure$c ?v1 ))(tree_pure$c (fun_app$e ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (map_tree$c ?v0 (tree_pure$c ?v1 ))(tree_pure$b (fun_app$f ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (map_tree$a ?v0 (tree_pure$b ?v1 ))(tree_pure$b (fun_app$g ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (map_tree$f ?v0 (tree_pure$b ?v1 ))(tree_pure$c (fun_app$ ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ ))(= (map_tree$g ?v0 (tree_pure$ ?v1 ))(tree_pure$c (fun_app$h ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ ))(= (map_tree$h ?v0 (tree_pure$ ?v1 ))(tree_pure$b (fun_app$i ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (map_tree$b ?v0 (tree_pure$c ?v1 ))(tree_pure$ (fun_app$j ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (map_tree$ ?v0 (tree_pure$b ?v1 ))(tree_pure$ (fun_app$k ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_b_a_fun_b_a_fun_fun_fun$ )(?v1 A$ ))(= (map_tree$i ?v0 (tree_pure$c ?v1 ))(tree_pure$a (fun_app$l ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ ))(= (root$b (tree_pure$a ?v0 ))?v0 )):named a31 ))
(assert (! (forall ((?v0 A$ ))(= (root$ (tree_pure$c ?v0 ))?v0 )):named a32 ))
(assert (! (forall ((?v0 B$ ))(= (root$a (tree_pure$b ?v0 ))?v0 )):named a33 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (root$c (tree_pure$ ?v0 ))?v0 )):named a34 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ ))(= (left$b (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a35 ))
(assert (! (forall ((?v0 A$ ))(= (left$ (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a36 ))
(assert (! (forall ((?v0 B$ ))(= (left$a (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a37 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (left$c (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a38 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ ))(= (right$b (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a39 ))
(assert (! (forall ((?v0 A$ ))(= (right$ (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a40 ))
(assert (! (forall ((?v0 B$ ))(= (right$a (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a41 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (right$c (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a42 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ ))(! (= (root$c (node$a ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$a ?v0 ?v1 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ ))(! (= (root$a (node$b ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$b ?v0 ?v1 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (root$ (node$ ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ ))(! (= (left$c (node$a ?v0 ?v1 ?v2 ))?v1 ):pattern ((node$a ?v0 ?v1 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ ))(! (= (left$a (node$b ?v0 ?v1 ?v2 ))?v1 ):pattern ((node$b ?v0 ?v1 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (left$ (node$ ?v0 ?v1 ?v2 ))?v1 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ ))(! (= (right$c (node$a ?v0 ?v1 ?v2 ))?v2 ):pattern ((node$a ?v0 ?v1 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ ))(! (= (right$a (node$b ?v0 ?v1 ?v2 ))?v2 ):pattern ((node$b ?v0 ?v1 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (right$ (node$ ?v0 ?v1 ?v2 ))?v2 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a51 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (left$c (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$ ?v1 )))):named a52 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_tree$ ))(= (left$c (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a53 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_tree$ ))(= (left$ (map_tree$g ?v0 ?v1 ))(map_tree$g ?v0 (left$c ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$d ?v0 ?v1 ))(map_tree$d ?v0 (left$ ?v1 )))):named a55 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_tree$ ))(= (left$a (map_tree$h ?v0 ?v1 ))(map_tree$h ?v0 (left$c ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$a ?v1 )))):named a58 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (left$a ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_tree$ ))(= (left$c (map_tree$e ?v0 ?v1 ))(map_tree$e ?v0 (left$c ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (left$c (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$ ?v1 )))):named a61 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_tree$ ))(= (left$c (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a62 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_tree$ ))(= (left$ (map_tree$g ?v0 ?v1 ))(map_tree$g ?v0 (left$c ?v1 )))):named a63 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$d ?v0 ?v1 ))(map_tree$d ?v0 (left$ ?v1 )))):named a64 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_tree$ ))(= (left$a (map_tree$h ?v0 ?v1 ))(map_tree$h ?v0 (left$c ?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a66 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$a ?v1 )))):named a67 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (left$a ?v1 )))):named a68 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_tree$ ))(= (left$c (map_tree$e ?v0 ?v1 ))(map_tree$e ?v0 (left$c ?v1 )))):named a69 ))
(check-sat )
;(get-unsat-core )
