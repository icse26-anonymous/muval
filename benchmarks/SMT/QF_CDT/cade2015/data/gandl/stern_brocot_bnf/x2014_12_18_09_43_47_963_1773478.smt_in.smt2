;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_tree_bool_fun$ 0 )
(declare-sort A_a_tree_bool_fun_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun p$ (A$ A_tree$ )Bool )
(declare-fun t$ ()A_tree$ )
(declare-fun x$ ()A$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_tree_bool_fun$ A_tree$ )Bool )
(declare-fun fun_app$a (A_a_tree_bool_fun_fun$ A$ )A_tree_bool_fun$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(assert (! (not (member$ x$ (set_tree$ t$ ))):named a0 ))
(assert (! (member$ x$ (set_tree$ t$ )):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (and (member$ ?v0 (set_tree$ (left$ ?v1 )))(p$ ?v0 (left$ ?v1 )))(p$ ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (and (member$ ?v0 (set_tree$ (right$ ?v1 )))(p$ ?v0 (right$ ?v1 )))(p$ ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (set_tree$ (left$ ?v1 )))(member$ ?v0 (set_tree$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (set_tree$ (right$ ?v1 )))(member$ ?v0 (set_tree$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_a_tree_bool_fun_fun$ ))(=> (and (member$ ?v0 (set_tree$ ?v1 ))(and (forall ((?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(fun_app$ (fun_app$a ?v2 ?v3 )(node$ ?v3 ?v4 ?v5 )))(and (forall ((?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ )(?v6 A$ ))(=> (and (member$ ?v6 (set_tree$ ?v4 ))(fun_app$ (fun_app$a ?v2 ?v6 )?v4 ))(fun_app$ (fun_app$a ?v2 ?v6 )(node$ ?v3 ?v4 ?v5 ))))(forall ((?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ )(?v6 A$ ))(=> (and (member$ ?v6 (set_tree$ ?v5 ))(fun_app$ (fun_app$a ?v2 ?v6 )?v5 ))(fun_app$ (fun_app$a ?v2 ?v6 )(node$ ?v3 ?v4 ?v5 )))))))(fun_app$ (fun_app$a ?v2 ?v0 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (and (member$ ?v0 (set_tree$ ?v1 ))(and (forall ((?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v1 (node$ ?v0 ?v2 ?v3 ))false ))(and (forall ((?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ ))(=> (and (= ?v1 (node$ ?v2 ?v3 ?v4 ))(member$ ?v0 (set_tree$ ?v3 )))false ))(forall ((?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ ))(=> (and (= ?v1 (node$ ?v2 ?v3 ?v4 ))(member$ ?v0 (set_tree$ ?v4 )))false )))))false )):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(=> (member$ ?v0 (set_tree$ ?v1 ))(member$ ?v0 (set_tree$ (node$ ?v2 ?v1 ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(=> (member$ ?v0 (set_tree$ ?v1 ))(member$ ?v0 (set_tree$ (node$ ?v2 ?v3 ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(member$ ?v0 (set_tree$ (node$ ?v0 ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (set_tree$ ?v0 ))(and (member$ ?v5 (set_tree$ ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (map_tree$ ?v2 ?v0 )(map_tree$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (set_tree$ ?v0 ))(= (fun_app$b ?v1 ?v3 )(fun_app$b ?v2 ?v3 ))))(= (map_tree$ ?v1 ?v0 )(map_tree$ ?v2 ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_tree$ ))(p$ (root$ ?v0 )?v0 )):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$ ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
