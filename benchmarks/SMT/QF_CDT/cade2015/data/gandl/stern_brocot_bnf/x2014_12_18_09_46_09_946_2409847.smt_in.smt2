;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_prod_bool_fun$ 0 )
(declare-datatypes ()((Nat_nat_prod$ (pair$ (fst$ Nat$ )(snd$ Nat$ )))(Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$ )(snd$a Nat_nat_prod$ )))))
(declare-fun one$ ()Nat$ )
(declare-fun fmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun fun_app$ (Nat_nat_prod_bool_fun$ Nat_nat_prod$ )Bool )
(declare-fun mediant$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod$ )
(assert (! (not (= (mediant$ fmat$ )(pair$ one$ one$ ))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 Nat_nat_prod$ ))(=> (forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a3 ))
(assert (! (= one$ one$ ):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (= one$ ?v0 )(= ?v0 one$ ))):named a5 ))
(assert (! (forall ((?v0 Nat_nat_prod$ ))(=> (forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a6 ))
(assert (! (forall ((?v0 Nat_nat_prod$ ))(exists ((?v1 Nat$ )(?v2 Nat$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a8 ))
(assert (! (forall ((?v0 Nat_nat_prod$ ))(=> (forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a9 ))
(assert (! (forall ((?v0 Nat_nat_prod_bool_fun$ )(?v1 Nat_nat_prod$ ))(=> (forall ((?v2 Nat$ )(?v3 Nat$ ))(fun_app$ ?v0 (pair$ ?v2 ?v3 )))(fun_app$ ?v0 ?v1 ))):named a10 ))
(check-sat )
;(get-unsat-core )
