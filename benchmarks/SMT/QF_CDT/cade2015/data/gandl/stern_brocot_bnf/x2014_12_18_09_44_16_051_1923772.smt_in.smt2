;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun$ 0 )
(declare-sort B_c_fun_c_fun$ 0 )
(declare-sort C_a_c_fun_fun$ 0 )
(declare-sort C_a_fun_a_fun$ 0 )
(declare-sort C_b_c_fun_fun$ 0 )
(declare-sort C_c_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_c_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_c_fun_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun$ 0 )
(declare-sort C_b_c_fun_c_fun_fun$ 0 )
(declare-sort C_b_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_fun_c_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun_c_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_a_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_c_fun_fun_c_c_fun_fun$ 0 )
(declare-sort A_a_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_c_a_fun_c_a_fun_fun_fun$ 0 )
(declare-sort A_c_fun_b_a_fun_b_c_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_b_fun_b_c_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_c_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_c_fun_b_c_fun_b_c_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort B_a_fun_tree$ 0)
(declare-sort B_tree$ 0)
(declare-sort B_c_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_c_fun_tree$ 0)
(declare-sort B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_c_a_fun_fun_tree$ 0)
(declare-sort C_a_fun_tree$ 0)
(declare-sort C_tree$ 0)
(declare-sort B_b_fun_tree$ 0)
(declare-sort A_c_a_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_tree$ 0)
(declare-sort A_c_fun_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort B_b_b_fun_fun_tree$ 0)
(declare-sort C_a_fun_a_c_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_c_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_b_c_a_fun_fun_fun_tree$ 0)
(declare-sort C_b_c_fun_fun_tree$ 0)
(declare-sort C_a_fun_c_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort C_c_fun_tree$ 0)
(declare-sort C_c_fun_c_a_fun_fun_tree$ 0)
(declare-sort C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort C_b_fun_tree$ 0)
(declare-sort C_b_fun_c_a_fun_fun_tree$ 0)
(declare-sort B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort B_c_fun_b_c_fun_fun_tree$ 0)
(declare-sort C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_c_fun_fun_tree$ 0)
(declare-sort A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$ 0)
(declare-sort B_b_fun_b_c_fun_fun_tree$ 0)
(declare-sort B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_c_a_fun_fun_tree$ 0)
(declare-sort B_c_fun_b_c_a_fun_fun_fun_tree$ 0)
(declare-sort C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_a_fun_fun_tree$ 0)
(declare-sort C_b_c_fun_fun_c_c_fun_fun_tree$ 0)
(declare-sort C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$ 0)
(declare-sort C_b_c_fun_c_fun_fun_tree$ 0)
(declare-sort C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort A_c_a_fun_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_c_a_fun_a_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_fun_tree$ 0)
(declare-sort B_a_fun_a_fun_tree$ 0)
(declare-sort B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$ 0)
(declare-sort C_a_fun_a_fun_tree$ 0)
(declare-sort B_c_a_fun_fun_c_a_fun_fun_tree$ 0)
(declare-sort B_c_fun_c_fun_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun select$ (B_a_fun_tree$)B_a_fun$)
(declare-fun selecta$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun selectb$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun node$a (B_a_fun$ B_a_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$)
(declare-fun root$a (B_tree$)B$)
(declare-fun left$a (B_tree$)B_tree$)
(declare-fun right$a (B_tree$)B_tree$)
(declare-fun node$b (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun selectc$ (B_c_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun$)
(declare-fun selectd$ (B_c_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun_tree$)
(declare-fun selecte$ (B_c_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun_tree$)
(declare-fun node$c (B_c_fun_b_a_fun_fun$ B_c_fun_b_a_fun_fun_tree$ B_c_fun_b_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_tree$)
(declare-fun selectf$ (B_c_fun_tree$)B_c_fun$)
(declare-fun selectg$ (B_c_fun_tree$)B_c_fun_tree$)
(declare-fun selecth$ (B_c_fun_tree$)B_c_fun_tree$)
(declare-fun node$d (B_c_fun$ B_c_fun_tree$ B_c_fun_tree$ )B_c_fun_tree$)
(declare-fun selecti$ (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun$)
(declare-fun selectj$ (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun selectk$ (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$e (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ )B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun selectl$ (B_c_a_fun_fun_tree$)B_c_a_fun_fun$)
(declare-fun selectm$ (B_c_a_fun_fun_tree$)B_c_a_fun_fun_tree$)
(declare-fun selectn$ (B_c_a_fun_fun_tree$)B_c_a_fun_fun_tree$)
(declare-fun node$f (B_c_a_fun_fun$ B_c_a_fun_fun_tree$ B_c_a_fun_fun_tree$ )B_c_a_fun_fun_tree$)
(declare-fun selecto$ (C_a_fun_tree$)C_a_fun$)
(declare-fun selectp$ (C_a_fun_tree$)C_a_fun_tree$)
(declare-fun selectq$ (C_a_fun_tree$)C_a_fun_tree$)
(declare-fun node$g (C_a_fun$ C_a_fun_tree$ C_a_fun_tree$ )C_a_fun_tree$)
(declare-fun root$b (C_tree$)C$)
(declare-fun left$b (C_tree$)C_tree$)
(declare-fun right$b (C_tree$)C_tree$)
(declare-fun node$h (C$ C_tree$ C_tree$ )C_tree$)
(declare-fun selectr$ (B_b_fun_tree$)B_b_fun$)
(declare-fun selects$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun selectt$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun node$i (B_b_fun$ B_b_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$)
(declare-fun selectu$ (A_c_a_fun_fun_tree$)A_c_a_fun_fun$)
(declare-fun selectv$ (A_c_a_fun_fun_tree$)A_c_a_fun_fun_tree$)
(declare-fun selectw$ (A_c_a_fun_fun_tree$)A_c_a_fun_fun_tree$)
(declare-fun node$j (A_c_a_fun_fun$ A_c_a_fun_fun_tree$ A_c_a_fun_fun_tree$ )A_c_a_fun_fun_tree$)
(declare-fun selectx$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun$)
(declare-fun selecty$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun selectz$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun node$k (A_b_a_fun_fun$ A_b_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$)
(declare-fun selecua$ (A_c_fun_tree$)A_c_fun$)
(declare-fun selecub$ (A_c_fun_tree$)A_c_fun_tree$)
(declare-fun selecuc$ (A_c_fun_tree$)A_c_fun_tree$)
(declare-fun node$l (A_c_fun$ A_c_fun_tree$ A_c_fun_tree$ )A_c_fun_tree$)
(declare-fun selecud$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selecue$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selecuf$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$m (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun selecug$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun$)
(declare-fun selecuh$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun selecui$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun node$n (B_b_b_fun_fun$ B_b_b_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$)
(declare-fun selecuj$ (C_a_fun_a_c_a_fun_fun_fun_tree$)C_a_fun_a_c_a_fun_fun_fun$)
(declare-fun selecuk$ (C_a_fun_a_c_a_fun_fun_fun_tree$)C_a_fun_a_c_a_fun_fun_fun_tree$)
(declare-fun selecul$ (C_a_fun_a_c_a_fun_fun_fun_tree$)C_a_fun_a_c_a_fun_fun_fun_tree$)
(declare-fun node$o (C_a_fun_a_c_a_fun_fun_fun$ C_a_fun_a_c_a_fun_fun_fun_tree$ C_a_fun_a_c_a_fun_fun_fun_tree$ )C_a_fun_a_c_a_fun_fun_fun_tree$)
(declare-fun selecum$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun$)
(declare-fun selecun$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selecuo$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun node$p (B_a_fun_a_b_a_fun_fun_fun$ B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_a_b_a_fun_fun_fun_tree$ )B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selecup$ (C_a_c_fun_fun_tree$)C_a_c_fun_fun$)
(declare-fun selecuq$ (C_a_c_fun_fun_tree$)C_a_c_fun_fun_tree$)
(declare-fun selecur$ (C_a_c_fun_fun_tree$)C_a_c_fun_fun_tree$)
(declare-fun node$q (C_a_c_fun_fun$ C_a_c_fun_fun_tree$ C_a_c_fun_fun_tree$ )C_a_c_fun_fun_tree$)
(declare-fun selecus$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun$)
(declare-fun selecut$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun selecuu$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun node$r (A_a_a_fun_fun$ A_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$)
(declare-fun selecuv$ (B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_fun$)
(declare-fun selecuw$ (B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecux$ (B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$s (B_a_fun_b_c_fun_b_a_fun_fun_fun$ B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecuy$ (C_a_fun_b_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun$)
(declare-fun selecuz$ (C_a_fun_b_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun_tree$)
(declare-fun selecva$ (C_a_fun_b_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun_tree$)
(declare-fun node$t (C_a_fun_b_c_a_fun_fun_fun$ C_a_fun_b_c_a_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_fun_tree$)
(declare-fun selecvb$ (C_b_c_fun_fun_tree$)C_b_c_fun_fun$)
(declare-fun selecvc$ (C_b_c_fun_fun_tree$)C_b_c_fun_fun_tree$)
(declare-fun selecvd$ (C_b_c_fun_fun_tree$)C_b_c_fun_fun_tree$)
(declare-fun node$u (C_b_c_fun_fun$ C_b_c_fun_fun_tree$ C_b_c_fun_fun_tree$ )C_b_c_fun_fun_tree$)
(declare-fun selecve$ (C_a_fun_c_a_fun_fun_tree$)C_a_fun_c_a_fun_fun$)
(declare-fun selecvf$ (C_a_fun_c_a_fun_fun_tree$)C_a_fun_c_a_fun_fun_tree$)
(declare-fun selecvg$ (C_a_fun_c_a_fun_fun_tree$)C_a_fun_c_a_fun_fun_tree$)
(declare-fun node$v (C_a_fun_c_a_fun_fun$ C_a_fun_c_a_fun_fun_tree$ C_a_fun_c_a_fun_fun_tree$ )C_a_fun_c_a_fun_fun_tree$)
(declare-fun selecvh$ (A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)A_a_fun_c_a_fun_c_a_fun_fun_fun$)
(declare-fun selecvi$ (A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecvj$ (A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$w (A_a_fun_c_a_fun_c_a_fun_fun_fun$ A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ )A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecvk$ (C_c_fun_tree$)C_c_fun$)
(declare-fun selecvl$ (C_c_fun_tree$)C_c_fun_tree$)
(declare-fun selecvm$ (C_c_fun_tree$)C_c_fun_tree$)
(declare-fun node$x (C_c_fun$ C_c_fun_tree$ C_c_fun_tree$ )C_c_fun_tree$)
(declare-fun selecvn$ (C_c_fun_c_a_fun_fun_tree$)C_c_fun_c_a_fun_fun$)
(declare-fun selecvo$ (C_c_fun_c_a_fun_fun_tree$)C_c_fun_c_a_fun_fun_tree$)
(declare-fun selecvp$ (C_c_fun_c_a_fun_fun_tree$)C_c_fun_c_a_fun_fun_tree$)
(declare-fun node$y (C_c_fun_c_a_fun_fun$ C_c_fun_c_a_fun_fun_tree$ C_c_fun_c_a_fun_fun_tree$ )C_c_fun_c_a_fun_fun_tree$)
(declare-fun selecvq$ (C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)C_a_fun_c_c_fun_c_a_fun_fun_fun$)
(declare-fun selecvr$ (C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecvs$ (C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$z (C_a_fun_c_c_fun_c_a_fun_fun_fun$ C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ )C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecvt$ (C_b_fun_tree$)C_b_fun$)
(declare-fun selecvu$ (C_b_fun_tree$)C_b_fun_tree$)
(declare-fun selecvv$ (C_b_fun_tree$)C_b_fun_tree$)
(declare-fun node$aa (C_b_fun$ C_b_fun_tree$ C_b_fun_tree$ )C_b_fun_tree$)
(declare-fun selecvw$ (C_b_fun_c_a_fun_fun_tree$)C_b_fun_c_a_fun_fun$)
(declare-fun selecvx$ (C_b_fun_c_a_fun_fun_tree$)C_b_fun_c_a_fun_fun_tree$)
(declare-fun selecvy$ (C_b_fun_c_a_fun_fun_tree$)C_b_fun_c_a_fun_fun_tree$)
(declare-fun node$ab (C_b_fun_c_a_fun_fun$ C_b_fun_c_a_fun_fun_tree$ C_b_fun_c_a_fun_fun_tree$ )C_b_fun_c_a_fun_fun_tree$)
(declare-fun selecvz$ (B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)B_a_fun_c_b_fun_c_a_fun_fun_fun$)
(declare-fun selecwa$ (B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecwb$ (B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$ac (B_a_fun_c_b_fun_c_a_fun_fun_fun$ B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ )B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecwc$ (B_c_fun_b_c_fun_fun_tree$)B_c_fun_b_c_fun_fun$)
(declare-fun selecwd$ (B_c_fun_b_c_fun_fun_tree$)B_c_fun_b_c_fun_fun_tree$)
(declare-fun selecwe$ (B_c_fun_b_c_fun_fun_tree$)B_c_fun_b_c_fun_fun_tree$)
(declare-fun node$ad (B_c_fun_b_c_fun_fun$ B_c_fun_b_c_fun_fun_tree$ B_c_fun_b_c_fun_fun_tree$ )B_c_fun_b_c_fun_fun_tree$)
(declare-fun selecwf$ (C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$)C_c_fun_b_c_fun_b_c_fun_fun_fun$)
(declare-fun selecwg$ (C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$)C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$)
(declare-fun selecwh$ (C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$)C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$)
(declare-fun node$ae (C_c_fun_b_c_fun_b_c_fun_fun_fun$ C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$ C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$ )C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$)
(declare-fun selecwi$ (B_a_fun_b_c_fun_fun_tree$)B_a_fun_b_c_fun_fun$)
(declare-fun selecwj$ (B_a_fun_b_c_fun_fun_tree$)B_a_fun_b_c_fun_fun_tree$)
(declare-fun selecwk$ (B_a_fun_b_c_fun_fun_tree$)B_a_fun_b_c_fun_fun_tree$)
(declare-fun node$af (B_a_fun_b_c_fun_fun$ B_a_fun_b_c_fun_fun_tree$ B_a_fun_b_c_fun_fun_tree$ )B_a_fun_b_c_fun_fun_tree$)
(declare-fun selecwl$ (A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$)A_c_fun_b_a_fun_b_c_fun_fun_fun$)
(declare-fun selecwm$ (A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$)A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$)
(declare-fun selecwn$ (A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$)A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$)
(declare-fun node$ag (A_c_fun_b_a_fun_b_c_fun_fun_fun$ A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$ A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$ )A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$)
(declare-fun selecwo$ (B_b_fun_b_c_fun_fun_tree$)B_b_fun_b_c_fun_fun$)
(declare-fun selecwp$ (B_b_fun_b_c_fun_fun_tree$)B_b_fun_b_c_fun_fun_tree$)
(declare-fun selecwq$ (B_b_fun_b_c_fun_fun_tree$)B_b_fun_b_c_fun_fun_tree$)
(declare-fun node$ah (B_b_fun_b_c_fun_fun$ B_b_fun_b_c_fun_fun_tree$ B_b_fun_b_c_fun_fun_tree$ )B_b_fun_b_c_fun_fun_tree$)
(declare-fun selecwr$ (B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$)B_c_fun_b_b_fun_b_c_fun_fun_fun$)
(declare-fun selecws$ (B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$)B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$)
(declare-fun selecwt$ (B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$)B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$)
(declare-fun node$ai (B_c_fun_b_b_fun_b_c_fun_fun_fun$ B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$ B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$ )B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$)
(declare-fun selecwu$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun$)
(declare-fun selecwv$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun selecww$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun node$aj (B_a_fun_b_a_fun_fun$ B_a_fun_b_a_fun_fun_tree$ B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$)
(declare-fun selecwx$ (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)A_a_fun_b_a_fun_b_a_fun_fun_fun$)
(declare-fun selecwy$ (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecwz$ (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$ak (A_a_fun_b_a_fun_b_a_fun_fun_fun$ A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecxa$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun$)
(declare-fun selecxb$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun_tree$)
(declare-fun selecxc$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun_tree$)
(declare-fun node$al (B_b_fun_b_a_fun_fun$ B_b_fun_b_a_fun_fun_tree$ B_b_fun_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$)
(declare-fun selecxd$ (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_b_fun_b_a_fun_fun_fun$)
(declare-fun selecxe$ (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecxf$ (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$am (B_a_fun_b_b_fun_b_a_fun_fun_fun$ B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecxg$ (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)C_a_fun_b_c_fun_b_a_fun_fun_fun$)
(declare-fun selecxh$ (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecxi$ (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$an (C_a_fun_b_c_fun_b_a_fun_fun_fun$ C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecxj$ (C_c_a_fun_fun_tree$)C_c_a_fun_fun$)
(declare-fun selecxk$ (C_c_a_fun_fun_tree$)C_c_a_fun_fun_tree$)
(declare-fun selecxl$ (C_c_a_fun_fun_tree$)C_c_a_fun_fun_tree$)
(declare-fun node$ao (C_c_a_fun_fun$ C_c_a_fun_fun_tree$ C_c_a_fun_fun_tree$ )C_c_a_fun_fun_tree$)
(declare-fun selecxm$ (B_c_fun_b_c_a_fun_fun_fun_tree$)B_c_fun_b_c_a_fun_fun_fun$)
(declare-fun selecxn$ (B_c_fun_b_c_a_fun_fun_fun_tree$)B_c_fun_b_c_a_fun_fun_fun_tree$)
(declare-fun selecxo$ (B_c_fun_b_c_a_fun_fun_fun_tree$)B_c_fun_b_c_a_fun_fun_fun_tree$)
(declare-fun node$ap (B_c_fun_b_c_a_fun_fun_fun$ B_c_fun_b_c_a_fun_fun_fun_tree$ B_c_fun_b_c_a_fun_fun_fun_tree$ )B_c_fun_b_c_a_fun_fun_fun_tree$)
(declare-fun selecxp$ (C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$)C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun$)
(declare-fun selecxq$ (C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$)C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$)
(declare-fun selecxr$ (C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$)C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$)
(declare-fun node$aq (C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun$ C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$ C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$ )C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$)
(declare-fun selecxs$ (A_b_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_fun$)
(declare-fun selecxt$ (A_b_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selecxu$ (A_b_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun node$ar (A_b_a_fun_fun_a_a_fun_fun$ A_b_a_fun_fun_a_a_fun_fun_tree$ A_b_a_fun_fun_a_a_fun_fun_tree$ )A_b_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selecxv$ (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$)
(declare-fun selecxw$ (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecxx$ (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$as (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecxy$ (A_b_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_fun$)
(declare-fun selecxz$ (A_b_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_fun_tree$)
(declare-fun selecya$ (A_b_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_fun_tree$)
(declare-fun node$at (A_b_a_fun_a_fun_fun$ A_b_a_fun_a_fun_fun_tree$ A_b_a_fun_a_fun_fun_tree$ )A_b_a_fun_a_fun_fun_tree$)
(declare-fun selecyb$ (C_b_c_fun_fun_c_c_fun_fun_tree$)C_b_c_fun_fun_c_c_fun_fun$)
(declare-fun selecyc$ (C_b_c_fun_fun_c_c_fun_fun_tree$)C_b_c_fun_fun_c_c_fun_fun_tree$)
(declare-fun selecyd$ (C_b_c_fun_fun_c_c_fun_fun_tree$)C_b_c_fun_fun_c_c_fun_fun_tree$)
(declare-fun node$au (C_b_c_fun_fun_c_c_fun_fun$ C_b_c_fun_fun_c_c_fun_fun_tree$ C_b_c_fun_fun_c_c_fun_fun_tree$ )C_b_c_fun_fun_c_c_fun_fun_tree$)
(declare-fun selecye$ (C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$)C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun$)
(declare-fun selecyf$ (C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$)C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$)
(declare-fun selecyg$ (C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$)C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$)
(declare-fun node$av (C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun$ C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$ C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$ )C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$)
(declare-fun selecyh$ (C_b_c_fun_c_fun_fun_tree$)C_b_c_fun_c_fun_fun$)
(declare-fun selecyi$ (C_b_c_fun_c_fun_fun_tree$)C_b_c_fun_c_fun_fun_tree$)
(declare-fun selecyj$ (C_b_c_fun_c_fun_fun_tree$)C_b_c_fun_c_fun_fun_tree$)
(declare-fun node$aw (C_b_c_fun_c_fun_fun$ C_b_c_fun_c_fun_fun_tree$ C_b_c_fun_c_fun_fun_tree$ )C_b_c_fun_c_fun_fun_tree$)
(declare-fun selecyk$ (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun$)
(declare-fun selecyl$ (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecym$ (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$ax (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun$ C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecyn$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun$)
(declare-fun selecyo$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)
(declare-fun selecyp$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)
(declare-fun node$ay (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)
(declare-fun selecyq$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun$)
(declare-fun selecyr$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecys$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$az (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecyt$ (A_c_a_fun_fun_a_a_fun_fun_tree$)A_c_a_fun_fun_a_a_fun_fun$)
(declare-fun selecyu$ (A_c_a_fun_fun_a_a_fun_fun_tree$)A_c_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selecyv$ (A_c_a_fun_fun_a_a_fun_fun_tree$)A_c_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun node$ba (A_c_a_fun_fun_a_a_fun_fun$ A_c_a_fun_fun_a_a_fun_fun_tree$ A_c_a_fun_fun_a_a_fun_fun_tree$ )A_c_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selecyw$ (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun$)
(declare-fun selecyx$ (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecyy$ (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$bb (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun$ A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ )A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecyz$ (A_c_a_fun_a_fun_fun_tree$)A_c_a_fun_a_fun_fun$)
(declare-fun selecza$ (A_c_a_fun_a_fun_fun_tree$)A_c_a_fun_a_fun_fun_tree$)
(declare-fun seleczb$ (A_c_a_fun_a_fun_fun_tree$)A_c_a_fun_a_fun_fun_tree$)
(declare-fun node$bc (A_c_a_fun_a_fun_fun$ A_c_a_fun_a_fun_fun_tree$ A_c_a_fun_a_fun_fun_tree$ )A_c_a_fun_a_fun_fun_tree$)
(declare-fun seleczc$ (B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun$)
(declare-fun seleczd$ (B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecze$ (B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$bd (B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun$ B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun seleczf$ (B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun$)
(declare-fun seleczg$ (B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)
(declare-fun seleczh$ (B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$be (B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ )B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)
(declare-fun seleczi$ (B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun$)
(declare-fun seleczj$ (B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun seleczk$ (B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$bf (B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$ )B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun seleczl$ (A_b_fun_tree$)A_b_fun$)
(declare-fun seleczm$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun seleczn$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun node$bg (A_b_fun$ A_b_fun_tree$ A_b_fun_tree$ )A_b_fun_tree$)
(declare-fun seleczo$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun$)
(declare-fun seleczp$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun seleczq$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun node$bh (B_a_fun_a_fun$ B_a_fun_a_fun_tree$ B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$)
(declare-fun seleczr$ (B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun_b_a_fun_fun$)
(declare-fun seleczs$ (B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun seleczt$ (B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun node$bi (B_c_fun_b_a_fun_fun_b_a_fun_fun$ B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$ B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun seleczu$ (C_a_fun_a_fun_tree$)C_a_fun_a_fun$)
(declare-fun seleczv$ (C_a_fun_a_fun_tree$)C_a_fun_a_fun_tree$)
(declare-fun seleczw$ (C_a_fun_a_fun_tree$)C_a_fun_a_fun_tree$)
(declare-fun node$bj (C_a_fun_a_fun$ C_a_fun_a_fun_tree$ C_a_fun_a_fun_tree$ )C_a_fun_a_fun_tree$)
(declare-fun seleczx$ (B_c_a_fun_fun_c_a_fun_fun_tree$)B_c_a_fun_fun_c_a_fun_fun$)
(declare-fun seleczy$ (B_c_a_fun_fun_c_a_fun_fun_tree$)B_c_a_fun_fun_c_a_fun_fun_tree$)
(declare-fun seleczz$ (B_c_a_fun_fun_c_a_fun_fun_tree$)B_c_a_fun_fun_c_a_fun_fun_tree$)
(declare-fun node$bk (B_c_a_fun_fun_c_a_fun_fun$ B_c_a_fun_fun_c_a_fun_fun_tree$ B_c_a_fun_fun_c_a_fun_fun_tree$ )B_c_a_fun_fun_c_a_fun_fun_tree$)
(declare-fun seledaa$ (B_c_fun_c_fun_tree$)B_c_fun_c_fun$)
(declare-fun seledab$ (B_c_fun_c_fun_tree$)B_c_fun_c_fun_tree$)
(declare-fun seledac$ (B_c_fun_c_fun_tree$)B_c_fun_c_fun_tree$)
(declare-fun node$bl (B_c_fun_c_fun$ B_c_fun_c_fun_tree$ B_c_fun_c_fun_tree$ )B_c_fun_c_fun_tree$)
(declare-fun u$ ()B_c_a_fun_fun_tree$ )
(declare-fun v$ ()B_c_fun_tree$ )
(declare-fun w$ ()B_tree$ )
(declare-fun uu$ (B_c_fun$ )B_c_fun_b_a_fun_fun_b_a_fun_fun$ )
(declare-fun uua$ (C$ )C_a_fun_a_fun$ )
(declare-fun uub$ (B$ )B_c_a_fun_fun_c_a_fun_fun$ )
(declare-fun uuc$ (B$ )B_c_fun_c_fun$ )
(declare-fun uud$ (B$ )B_a_fun_a_fun$ )
(declare-fun comp$ ()A_a_fun_c_a_fun_c_a_fun_fun_fun$ )
(declare-fun comp$a ()C_a_fun_c_c_fun_c_a_fun_fun_fun$ )
(declare-fun comp$b ()B_a_fun_c_b_fun_c_a_fun_fun_fun$ )
(declare-fun comp$c ()C_c_fun_b_c_fun_b_c_fun_fun_fun$ )
(declare-fun comp$d ()A_c_fun_b_a_fun_b_c_fun_fun_fun$ )
(declare-fun comp$e ()B_c_fun_b_b_fun_b_c_fun_fun_fun$ )
(declare-fun comp$f ()A_a_fun_b_a_fun_b_a_fun_fun_fun$ )
(declare-fun comp$g ()B_a_fun_b_b_fun_b_a_fun_fun_fun$ )
(declare-fun comp$h ()C_a_fun_b_c_fun_b_a_fun_fun_fun$ )
(declare-fun comp$i ()C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun$ )
(declare-fun left$c (C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun left$d (B_c_fun_tree$ )B_c_fun_tree$ )
(declare-fun left$e (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun left$f (B_c_a_fun_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun left$g (B_c_fun_b_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun left$h (C_c_fun_tree$ )C_c_fun_tree$ )
(declare-fun left$i (A_c_fun_tree$ )A_c_fun_tree$ )
(declare-fun left$j (C_b_fun_tree$ )C_b_fun_tree$ )
(declare-fun left$k (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun left$l (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun root$c (C_a_fun_tree$ )C_a_fun$ )
(declare-fun root$d (B_c_fun_tree$ )B_c_fun$ )
(declare-fun root$e (B_a_fun_tree$ )B_a_fun$ )
(declare-fun root$f (B_c_a_fun_fun_tree$ )B_c_a_fun_fun$ )
(declare-fun root$g (B_c_fun_b_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun$ )
(declare-fun root$h (C_c_fun_tree$ )C_c_fun$ )
(declare-fun root$i (A_c_fun_tree$ )A_c_fun$ )
(declare-fun root$j (C_b_fun_tree$ )C_b_fun$ )
(declare-fun root$k (B_b_fun_tree$ )B_b_fun$ )
(declare-fun root$l (A_b_fun_tree$ )A_b_fun$ )
(declare-fun right$c (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun right$d (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun right$e (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun right$f (B_c_fun_b_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun right$g (B_c_fun_tree$ )B_c_fun_tree$ )
(declare-fun right$h (C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun right$i (B_c_a_fun_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_I$ ()A_a_fun_tree$ )
(declare-fun tree_K$ ()B_b_b_fun_fun_tree$ )
(declare-fun tree_S$ ()B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ )
(declare-fun fun_app$ (B_c_fun_b_a_fun_fun_b_a_fun_fun$ B_c_fun_b_a_fun_fun$ )B_a_fun$ )
(declare-fun tree_I$a ()C_c_fun_tree$ )
(declare-fun tree_I$b ()C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_I$c ()B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_K$a ()C_a_fun_a_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$b ()B_a_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$c ()C_a_c_fun_fun_tree$ )
(declare-fun tree_K$d ()A_a_a_fun_fun_tree$ )
(declare-fun tree_K$e ()B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$f ()A_c_a_fun_fun_tree$ )
(declare-fun tree_K$g ()C_a_fun_b_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$h ()C_b_c_fun_fun_tree$ )
(declare-fun tree_K$i ()A_b_a_fun_fun_tree$ )
(declare-fun tree_K$j ()A_b_a_fun_a_fun_fun_tree$ )
(declare-fun tree_K$k ()C_b_c_fun_c_fun_fun_tree$ )
(declare-fun tree_K$l ()C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$m ()A_c_a_fun_a_fun_fun_tree$ )
(declare-fun tree_K$n ()B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$a ()A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$b ()C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$ )
(declare-fun tree_S$c ()C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$d ()A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$e ()B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (B_c_fun_b_a_fun_fun$ B_c_fun$ )B_a_fun$ )
(declare-fun fun_app$b (C_a_fun_a_fun$ C_a_fun$ )A$ )
(declare-fun fun_app$c (C_a_fun$ C$ )A$ )
(declare-fun fun_app$d (B_c_a_fun_fun_c_a_fun_fun$ B_c_a_fun_fun$ )C_a_fun$ )
(declare-fun fun_app$e (B_c_a_fun_fun$ B$ )C_a_fun$ )
(declare-fun fun_app$f (B_c_fun_c_fun$ B_c_fun$ )C$ )
(declare-fun fun_app$g (B_c_fun$ B$ )C$ )
(declare-fun fun_app$h (B_a_fun_a_fun$ B_a_fun$ )A$ )
(declare-fun fun_app$i (B_a_fun$ B$ )A$ )
(declare-fun fun_app$j (C_c_fun$ C$ )C$ )
(declare-fun fun_app$k (C_b_fun$ C$ )B$ )
(declare-fun fun_app$l (B_b_fun$ B$ )B$ )
(declare-fun fun_app$m (A_c_fun$ A$ )C$ )
(declare-fun fun_app$n (A_b_fun$ A$ )B$ )
(declare-fun map_tree$ (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun tree_ap$a (B_c_fun_b_a_fun_fun_tree$ B_c_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$b (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ B_c_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$c (C_a_fun_tree$ C_tree$ )A_tree$ )
(declare-fun tree_ap$d (B_c_a_fun_fun_tree$ B_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$e (B_c_fun_tree$ B_tree$ )C_tree$ )
(declare-fun tree_ap$f (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$g (A_c_a_fun_fun_tree$ A_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$h (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$i (A_c_fun_tree$ A_tree$ )C_tree$ )
(declare-fun tree_ap$j (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$k (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$l (C_a_fun_a_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )A_c_a_fun_fun_tree$ )
(declare-fun tree_ap$m (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$n (C_a_c_fun_fun_tree$ C_tree$ )A_c_fun_tree$ )
(declare-fun tree_ap$o (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$p (B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$q (C_a_fun_b_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_ap$r (C_b_c_fun_fun_tree$ C_tree$ )B_c_fun_tree$ )
(declare-fun tree_ap$s (C_a_fun_c_a_fun_fun_tree$ C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$t (A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ A_a_fun_tree$ )C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$u (C_c_fun_c_a_fun_fun_tree$ C_c_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$v (C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )C_c_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$w (C_c_fun_tree$ C_tree$ )C_tree$ )
(declare-fun tree_ap$x (C_b_fun_c_a_fun_fun_tree$ C_b_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$y (B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ B_a_fun_tree$ )C_b_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$z (C_b_fun_tree$ C_tree$ )B_tree$ )
(declare-fun map_tree$a (A_c_a_fun_fun$ A_tree$ )C_a_fun_tree$ )
(declare-fun map_tree$b (A_b_a_fun_fun$ A_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$c (A_c_fun$ A_tree$ )C_tree$ )
(declare-fun map_tree$d (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$e (B_c_fun_b_a_fun_fun$ B_c_fun_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$f (C_a_fun$ C_tree$ )A_tree$ )
(declare-fun map_tree$g (B_c_a_fun_fun$ B_tree$ )C_a_fun_tree$ )
(declare-fun map_tree$h (B_c_fun$ B_tree$ )C_tree$ )
(declare-fun map_tree$i (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun tree_ap$aa (B_c_fun_b_c_fun_fun_tree$ B_c_fun_tree$ )B_c_fun_tree$ )
(declare-fun tree_ap$ab (C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$ C_c_fun_tree$ )B_c_fun_b_c_fun_fun_tree$ )
(declare-fun tree_ap$ac (B_a_fun_b_c_fun_fun_tree$ B_a_fun_tree$ )B_c_fun_tree$ )
(declare-fun tree_ap$ad (A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$ A_c_fun_tree$ )B_a_fun_b_c_fun_fun_tree$ )
(declare-fun tree_ap$ae (B_b_fun_b_c_fun_fun_tree$ B_b_fun_tree$ )B_c_fun_tree$ )
(declare-fun tree_ap$af (B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$ B_c_fun_tree$ )B_b_fun_b_c_fun_fun_tree$ )
(declare-fun tree_ap$ag (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$ah (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ A_a_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ai (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$aj (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ak (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ C_a_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$al (B_c_fun_b_c_a_fun_fun_fun_tree$ B_c_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_ap$am (C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$ C_c_a_fun_fun_tree$ )B_c_fun_b_c_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$an (C_c_a_fun_fun_tree$ C_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$ao (A_b_a_fun_fun_a_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$ap (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_a_fun_fun_tree$ )A_b_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$aq (C_b_c_fun_fun_c_c_fun_fun_tree$ C_b_c_fun_fun_tree$ )C_c_fun_tree$ )
(declare-fun tree_ap$ar (C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$ C_b_c_fun_c_fun_fun_tree$ )C_b_c_fun_fun_c_c_fun_fun_tree$ )
(declare-fun tree_ap$as (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_fun_tree$ )C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$at (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$au (A_c_a_fun_fun_a_a_fun_fun_tree$ A_c_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$av (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ A_c_a_fun_a_fun_fun_tree$ )A_c_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$aw (B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ax (B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$ )B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$ay (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$az (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$ba (B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$ B_c_fun_b_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$bb (C_a_fun_a_fun_tree$ C_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$bc (B_c_a_fun_fun_c_a_fun_fun_tree$ B_c_a_fun_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$bd (B_c_fun_c_fun_tree$ B_c_fun_tree$ )C_tree$ )
(declare-fun tree_pure$ (A_a_fun_c_a_fun_c_a_fun_fun_fun$ )A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$a (C_a_fun_c_c_fun_c_a_fun_fun_fun$ )C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$b (B_a_fun_c_b_fun_c_a_fun_fun_fun$ )B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$c (C_c_fun_b_c_fun_b_c_fun_fun_fun$ )C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$ )
(declare-fun tree_pure$d (A_c_fun_b_a_fun_b_c_fun_fun_fun$ )A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$ )
(declare-fun tree_pure$e (B_c_fun_b_b_fun_b_c_fun_fun_fun$ )B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$ )
(declare-fun tree_pure$f (A_a_fun_b_a_fun_b_a_fun_fun_fun$ )A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$g (B_a_fun_b_b_fun_b_a_fun_fun_fun$ )B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$h (C_a_fun_b_c_fun_b_a_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$i (C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun$ )C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$j (B$ )B_tree$ )
(declare-fun tree_pure$k (A$ )A_tree$ )
(declare-fun tree_pure$l (B_c_fun$ )B_c_fun_tree$ )
(declare-fun tree_pure$m (C$ )C_tree$ )
(declare-fun tree_pure$n (C_a_fun$ )C_a_fun_tree$ )
(declare-fun tree_pure$o (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$p (B_c_a_fun_fun$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_pure$q (B_c_fun_b_a_fun_fun$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$r (C_c_fun$ )C_c_fun_tree$ )
(declare-fun tree_pure$s (C_b_fun$ )C_b_fun_tree$ )
(declare-fun tree_pure$t (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$u (A_c_fun$ )A_c_fun_tree$ )
(declare-fun tree_pure$v (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$w (A_c_a_fun_fun$ )A_c_a_fun_fun_tree$ )
(declare-fun tree_pure$x (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_pure$y (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$z (B_c_fun_b_a_fun_fun_b_a_fun_fun$ )B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$aa (C_a_fun_a_fun$ )C_a_fun_a_fun_tree$ )
(declare-fun tree_pure$ab (B_c_a_fun_fun_c_a_fun_fun$ )B_c_a_fun_fun_c_a_fun_fun_tree$ )
(declare-fun tree_pure$ac (B_c_fun_c_fun$ )B_c_fun_c_fun_tree$ )
(declare-fun tree_pure$ad (B_a_fun_a_fun$ )B_a_fun_a_fun_tree$ )
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_c_fun_b_a_fun_fun$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(fun_app$a ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 C$ )(?v1 C_a_fun$ ))(! (= (fun_app$b (uua$ ?v0 )?v1 )(fun_app$c ?v1 ?v0 )):pattern ((fun_app$b (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_c_a_fun_fun$ ))(! (= (fun_app$d (uub$ ?v0 )?v1 )(fun_app$e ?v1 ?v0 )):pattern ((fun_app$d (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 B_c_fun$ ))(! (= (fun_app$f (uuc$ ?v0 )?v1 )(fun_app$g ?v1 ?v0 )):pattern ((fun_app$f (uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_fun$ ))(! (= (fun_app$h (uud$ ?v0 )?v1 )(fun_app$i ?v1 ?v0 )):pattern ((fun_app$h (uud$ ?v0 )?v1 )))):named a4 ))
(assert (! (not (= (tree_ap$ (tree_ap$a (tree_ap$b tree_S$ u$ )v$ )w$ )(tree_ap$c (tree_ap$d u$ w$ )(tree_ap$e v$ w$ )))):named a5 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$f ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_c_a_fun_fun_tree$ )(?v1 A_c_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$g ?v0 ?v2 )(tree_ap$g ?v1 ?v2 )))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$h ?v0 ?v2 )(tree_ap$h ?v1 ?v2 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 A_c_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$i ?v0 ?v2 )(tree_ap$i ?v1 ?v2 )))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$j ?v0 ?v2 )(tree_ap$j ?v1 ?v2 )))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B_c_fun_tree$ ))(= (tree_ap$a ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_a_fun_tree$ ))(=> (forall ((?v2 C_tree$ ))(= (tree_ap$c ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$d ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_c_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$e ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$ ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (tree_ap$f (tree_ap$k tree_K$ ?v0 )?v1 )?v0 )):named a16 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$g (tree_ap$l tree_K$a ?v0 )?v1 )?v0 )):named a17 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$h (tree_ap$m tree_K$b ?v0 )?v1 )?v0 )):named a18 ))
(assert (! (forall ((?v0 C_tree$ )(?v1 A_tree$ ))(= (tree_ap$i (tree_ap$n tree_K$c ?v0 )?v1 )?v0 )):named a19 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (tree_ap$j (tree_ap$o tree_K$d ?v0 )?v1 )?v0 )):named a20 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_c_fun_tree$ ))(= (tree_ap$a (tree_ap$p tree_K$e ?v0 )?v1 )?v0 )):named a21 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 C_tree$ ))(= (tree_ap$c (tree_ap$g tree_K$f ?v0 )?v1 )?v0 )):named a22 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_ap$q tree_K$g ?v0 )?v1 )?v0 )):named a23 ))
(assert (! (forall ((?v0 C_tree$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_ap$r tree_K$h ?v0 )?v1 )?v0 )):named a24 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_ap$h tree_K$i ?v0 )?v1 )?v0 )):named a25 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 C_a_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$s (tree_ap$t (tree_pure$ comp$ )?v0 )?v1 )?v2 )(tree_ap$j ?v0 (tree_ap$c ?v1 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_c_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$u (tree_ap$v (tree_pure$a comp$a )?v0 )?v1 )?v2 )(tree_ap$c ?v0 (tree_ap$w ?v1 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 C_b_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$x (tree_ap$y (tree_pure$b comp$b )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$z ?v1 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 C_c_fun_tree$ )(?v1 B_c_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$aa (tree_ap$ab (tree_pure$c comp$c )?v0 )?v1 )?v2 )(tree_ap$w ?v0 (tree_ap$e ?v1 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$ac (tree_ap$ad (tree_pure$d comp$d )?v0 )?v1 )?v2 )(tree_ap$i ?v0 (tree_ap$ ?v1 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$ae (tree_ap$af (tree_pure$e comp$e )?v0 )?v1 )?v2 )(tree_ap$e ?v0 (tree_ap$f ?v1 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ag (tree_ap$ah (tree_pure$f comp$f )?v0 )?v1 )?v2 )(tree_ap$j ?v0 (tree_ap$ ?v1 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ai (tree_ap$aj (tree_pure$g comp$g )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$f ?v1 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 B_c_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$a (tree_ap$ak (tree_pure$h comp$h )?v0 )?v1 )?v2 )(tree_ap$c ?v0 (tree_ap$e ?v1 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 C_c_a_fun_fun_tree$ )(?v1 B_c_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$d (tree_ap$al (tree_ap$am (tree_pure$i comp$i )?v0 )?v1 )?v2 )(tree_ap$an ?v0 (tree_ap$e ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$f ?v0 (tree_pure$j ?v2 ))(tree_ap$f ?v1 (tree_pure$j ?v2 ))))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_c_a_fun_fun_tree$ )(?v1 A_c_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$g ?v0 (tree_pure$k ?v2 ))(tree_ap$g ?v1 (tree_pure$k ?v2 ))))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$h ?v0 (tree_pure$k ?v2 ))(tree_ap$h ?v1 (tree_pure$k ?v2 ))))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 A_c_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$i ?v0 (tree_pure$k ?v2 ))(tree_ap$i ?v1 (tree_pure$k ?v2 ))))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$j ?v0 (tree_pure$k ?v2 ))(tree_ap$j ?v1 (tree_pure$k ?v2 ))))(= ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B_c_fun$ ))(= (tree_ap$a ?v0 (tree_pure$l ?v2 ))(tree_ap$a ?v1 (tree_pure$l ?v2 ))))(= ?v0 ?v1 ))):named a41 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_a_fun_tree$ ))(=> (forall ((?v2 C$ ))(= (tree_ap$c ?v0 (tree_pure$m ?v2 ))(tree_ap$c ?v1 (tree_pure$m ?v2 ))))(= ?v0 ?v1 ))):named a42 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$d ?v0 (tree_pure$j ?v2 ))(tree_ap$d ?v1 (tree_pure$j ?v2 ))))(= ?v0 ?v1 ))):named a43 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_c_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$e ?v0 (tree_pure$j ?v2 ))(tree_ap$e ?v1 (tree_pure$j ?v2 ))))(= ?v0 ?v1 ))):named a44 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$ ?v0 (tree_pure$j ?v2 ))(tree_ap$ ?v1 (tree_pure$j ?v2 ))))(= ?v0 ?v1 ))):named a45 ))
(assert (! (= tree_I$ (tree_ap$ao (tree_ap$ap tree_S$a tree_K$j )tree_K$i )):named a46 ))
(assert (! (= tree_I$a (tree_ap$aq (tree_ap$ar tree_S$b tree_K$k )tree_K$h )):named a47 ))
(assert (! (= tree_I$b (tree_ap$as (tree_ap$at tree_S$c tree_K$l )tree_K$g )):named a48 ))
(assert (! (= tree_I$ (tree_ap$au (tree_ap$av tree_S$d tree_K$m )tree_K$f )):named a49 ))
(assert (! (= tree_I$c (tree_ap$aw (tree_ap$ax tree_S$e tree_K$n )tree_K$e )):named a50 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C$ ))(= (tree_ap$c (tree_pure$n ?v0 )(tree_pure$m ?v1 ))(tree_pure$k (fun_app$c ?v0 ?v1 )))):named a51 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B$ ))(= (tree_ap$e (tree_pure$l ?v0 )(tree_pure$j ?v1 ))(tree_pure$m (fun_app$g ?v0 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$o ?v0 )(tree_pure$j ?v1 ))(tree_pure$k (fun_app$i ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$d (tree_pure$p ?v0 )(tree_pure$j ?v1 ))(tree_pure$n (fun_app$e ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ )(?v1 B_c_fun$ ))(= (tree_ap$a (tree_pure$q ?v0 )(tree_pure$l ?v1 ))(tree_pure$o (fun_app$a ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ ))(= (tree_ap$w (tree_pure$r ?v0 )(tree_pure$m ?v1 ))(tree_pure$m (fun_app$j ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C$ ))(= (tree_ap$z (tree_pure$s ?v0 )(tree_pure$m ?v1 ))(tree_pure$j (fun_app$k ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$f (tree_pure$t ?v0 )(tree_pure$j ?v1 ))(tree_pure$j (fun_app$l ?v0 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A$ ))(= (tree_ap$i (tree_pure$u ?v0 )(tree_pure$k ?v1 ))(tree_pure$m (fun_app$m ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$ay (tree_pure$v ?v0 )(tree_pure$k ?v1 ))(tree_pure$j (fun_app$n ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$c (tree_pure$n ?v0 )(node$h ?v1 ?v2 ?v3 ))(node$ (fun_app$c ?v0 ?v1 )(tree_ap$c (tree_pure$n ?v0 )?v2 )(tree_ap$c (tree_pure$n ?v0 )?v3 )))):named a61 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$e (tree_pure$l ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$h (fun_app$g ?v0 ?v1 )(tree_ap$e (tree_pure$l ?v0 )?v2 )(tree_ap$e (tree_pure$l ?v0 )?v3 )))):named a62 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$ (tree_pure$o ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$i ?v0 ?v1 )(tree_ap$ (tree_pure$o ?v0 )?v2 )(tree_ap$ (tree_pure$o ?v0 )?v3 )))):named a63 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$d (tree_pure$p ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$g (fun_app$e ?v0 ?v1 )(tree_ap$d (tree_pure$p ?v0 )?v2 )(tree_ap$d (tree_pure$p ?v0 )?v3 )))):named a64 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ )(?v1 B_c_fun$ )(?v2 B_c_fun_tree$ )(?v3 B_c_fun_tree$ ))(= (tree_ap$a (tree_pure$q ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$a (fun_app$a ?v0 ?v1 )(tree_ap$a (tree_pure$q ?v0 )?v2 )(tree_ap$a (tree_pure$q ?v0 )?v3 )))):named a65 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$w (tree_pure$r ?v0 )(node$h ?v1 ?v2 ?v3 ))(node$h (fun_app$j ?v0 ?v1 )(tree_ap$w (tree_pure$r ?v0 )?v2 )(tree_ap$w (tree_pure$r ?v0 )?v3 )))):named a66 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$z (tree_pure$s ?v0 )(node$h ?v1 ?v2 ?v3 ))(node$b (fun_app$k ?v0 ?v1 )(tree_ap$z (tree_pure$s ?v0 )?v2 )(tree_ap$z (tree_pure$s ?v0 )?v3 )))):named a67 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$f (tree_pure$t ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$l ?v0 ?v1 )(tree_ap$f (tree_pure$t ?v0 )?v2 )(tree_ap$f (tree_pure$t ?v0 )?v3 )))):named a68 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$i (tree_pure$u ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$h (fun_app$m ?v0 ?v1 )(tree_ap$i (tree_pure$u ?v0 )?v2 )(tree_ap$i (tree_pure$u ?v0 )?v3 )))):named a69 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$ay (tree_pure$v ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$b (fun_app$n ?v0 ?v1 )(tree_ap$ay (tree_pure$v ?v0 )?v2 )(tree_ap$ay (tree_pure$v ?v0 )?v3 )))):named a70 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_a_fun_tree$ )(?v2 C_a_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$c (node$g ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))(node$ (fun_app$c ?v0 ?v3 )(tree_ap$c ?v1 ?v4 )(tree_ap$c ?v2 ?v5 ))):pattern ((tree_ap$c (node$g ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))))):named a71 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_c_fun_tree$ )(?v2 B_c_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$e (node$d ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$h (fun_app$g ?v0 ?v3 )(tree_ap$e ?v1 ?v4 )(tree_ap$e ?v2 ?v5 ))):pattern ((tree_ap$e (node$d ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a72 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$i ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a73 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_c_a_fun_fun_tree$ )(?v2 B_c_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$d (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$g (fun_app$e ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a74 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ )(?v1 B_c_fun_b_a_fun_fun_tree$ )(?v2 B_c_fun_b_a_fun_fun_tree$ )(?v3 B_c_fun$ )(?v4 B_c_fun_tree$ )(?v5 B_c_fun_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$a (fun_app$a ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a75 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_c_fun_tree$ )(?v2 C_c_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$w (node$x ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))(node$h (fun_app$j ?v0 ?v3 )(tree_ap$w ?v1 ?v4 )(tree_ap$w ?v2 ?v5 ))):pattern ((tree_ap$w (node$x ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))))):named a76 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_b_fun_tree$ )(?v2 C_b_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$z (node$aa ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))(node$b (fun_app$k ?v0 ?v3 )(tree_ap$z ?v1 ?v4 )(tree_ap$z ?v2 ?v5 ))):pattern ((tree_ap$z (node$aa ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))))):named a77 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$b (fun_app$l ?v0 ?v3 )(tree_ap$f ?v1 ?v4 )(tree_ap$f ?v2 ?v5 ))):pattern ((tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a78 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_c_fun_tree$ )(?v2 A_c_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$i (node$l ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$h (fun_app$m ?v0 ?v3 )(tree_ap$i ?v1 ?v4 )(tree_ap$i ?v2 ?v5 ))):pattern ((tree_ap$i (node$l ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a79 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$ay (node$bg ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$b (fun_app$n ?v0 ?v3 )(tree_ap$ay ?v1 ?v4 )(tree_ap$ay ?v2 ?v5 ))):pattern ((tree_ap$ay (node$bg ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a80 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (tree_ap$f (tree_pure$t ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a81 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$g (tree_pure$w ?v0 )?v1 )(map_tree$a ?v0 ?v1 ))):named a82 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$h (tree_pure$x ?v0 )?v1 )(map_tree$b ?v0 ?v1 ))):named a83 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_tree$ ))(= (tree_ap$i (tree_pure$u ?v0 )?v1 )(map_tree$c ?v0 ?v1 ))):named a84 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (tree_ap$j (tree_pure$y ?v0 )?v1 )(map_tree$d ?v0 ?v1 ))):named a85 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ )(?v1 B_c_fun_tree$ ))(= (tree_ap$a (tree_pure$q ?v0 )?v1 )(map_tree$e ?v0 ?v1 ))):named a86 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_tree$ ))(= (tree_ap$c (tree_pure$n ?v0 )?v1 )(map_tree$f ?v0 ?v1 ))):named a87 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_pure$p ?v0 )?v1 )(map_tree$g ?v0 ?v1 ))):named a88 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_pure$l ?v0 )?v1 )(map_tree$h ?v0 ?v1 ))):named a89 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_pure$o ?v0 )?v1 )(map_tree$i ?v0 ?v1 ))):named a90 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (root$ (tree_ap$c ?v0 ?v1 ))(fun_app$c (root$c ?v0 )(root$b ?v1 )))):named a91 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_tree$ ))(= (root$b (tree_ap$e ?v0 ?v1 ))(fun_app$g (root$d ?v0 )(root$a ?v1 )))):named a92 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (root$ (tree_ap$ ?v0 ?v1 ))(fun_app$i (root$e ?v0 )(root$a ?v1 )))):named a93 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$c (tree_ap$d ?v0 ?v1 ))(fun_app$e (root$f ?v0 )(root$a ?v1 )))):named a94 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun_tree$ ))(= (root$e (tree_ap$a ?v0 ?v1 ))(fun_app$a (root$g ?v0 )(root$d ?v1 )))):named a95 ))
(assert (! (forall ((?v0 C_c_fun_tree$ )(?v1 C_tree$ ))(= (root$b (tree_ap$w ?v0 ?v1 ))(fun_app$j (root$h ?v0 )(root$b ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 A_tree$ ))(= (root$b (tree_ap$i ?v0 ?v1 ))(fun_app$m (root$i ?v0 )(root$ ?v1 )))):named a97 ))
(assert (! (forall ((?v0 C_b_fun_tree$ )(?v1 C_tree$ ))(= (root$a (tree_ap$z ?v0 ?v1 ))(fun_app$k (root$j ?v0 )(root$b ?v1 )))):named a98 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (root$a (tree_ap$f ?v0 ?v1 ))(fun_app$l (root$k ?v0 )(root$a ?v1 )))):named a99 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (root$a (tree_ap$ay ?v0 ?v1 ))(fun_app$n (root$l ?v0 )(root$ ?v1 )))):named a100 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (left$ (tree_ap$c ?v0 ?v1 ))(tree_ap$c (left$c ?v0 )(left$b ?v1 )))):named a101 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_tree$ ))(= (left$b (tree_ap$e ?v0 ?v1 ))(tree_ap$e (left$d ?v0 )(left$a ?v1 )))):named a102 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (left$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (left$e ?v0 )(left$a ?v1 )))):named a103 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (left$c (tree_ap$d ?v0 ?v1 ))(tree_ap$d (left$f ?v0 )(left$a ?v1 )))):named a104 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun_tree$ ))(= (left$e (tree_ap$a ?v0 ?v1 ))(tree_ap$a (left$g ?v0 )(left$d ?v1 )))):named a105 ))
(assert (! (forall ((?v0 C_c_fun_tree$ )(?v1 C_tree$ ))(= (left$b (tree_ap$w ?v0 ?v1 ))(tree_ap$w (left$h ?v0 )(left$b ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 A_tree$ ))(= (left$b (tree_ap$i ?v0 ?v1 ))(tree_ap$i (left$i ?v0 )(left$ ?v1 )))):named a107 ))
(assert (! (forall ((?v0 C_b_fun_tree$ )(?v1 C_tree$ ))(= (left$a (tree_ap$z ?v0 ?v1 ))(tree_ap$z (left$j ?v0 )(left$b ?v1 )))):named a108 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (left$a (tree_ap$f ?v0 ?v1 ))(tree_ap$f (left$k ?v0 )(left$a ?v1 )))):named a109 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (left$a (tree_ap$ay ?v0 ?v1 ))(tree_ap$ay (left$l ?v0 )(left$ ?v1 )))):named a110 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (right$ (tree_ap$az ?v0 ?v1 ))(tree_ap$az (right$c ?v0 )(right$d ?v1 )))):named a111 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (right$ (tree_ap$j ?v0 ?v1 ))(tree_ap$j (right$e ?v0 )(right$ ?v1 )))):named a112 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun_tree$ ))(= (right$d (tree_ap$a ?v0 ?v1 ))(tree_ap$a (right$f ?v0 )(right$g ?v1 )))):named a113 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (right$ (tree_ap$c ?v0 ?v1 ))(tree_ap$c (right$h ?v0 )(right$b ?v1 )))):named a114 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (right$h (tree_ap$d ?v0 ?v1 ))(tree_ap$d (right$i ?v0 )(right$a ?v1 )))):named a115 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_tree$ ))(= (right$b (tree_ap$e ?v0 ?v1 ))(tree_ap$e (right$g ?v0 )(right$a ?v1 )))):named a116 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (right$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (right$d ?v0 )(right$a ?v1 )))):named a117 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun$ ))(= (tree_ap$a ?v0 (tree_pure$l ?v1 ))(tree_ap$ba (tree_pure$z (uu$ ?v1 ))?v0 ))):named a118 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C$ ))(= (tree_ap$c ?v0 (tree_pure$m ?v1 ))(tree_ap$bb (tree_pure$aa (uua$ ?v1 ))?v0 ))):named a119 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B$ ))(= (tree_ap$d ?v0 (tree_pure$j ?v1 ))(tree_ap$bc (tree_pure$ab (uub$ ?v1 ))?v0 ))):named a120 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B$ ))(= (tree_ap$e ?v0 (tree_pure$j ?v1 ))(tree_ap$bd (tree_pure$ac (uuc$ ?v1 ))?v0 ))):named a121 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B$ ))(= (tree_ap$ ?v0 (tree_pure$j ?v1 ))(tree_ap$az (tree_pure$ad (uud$ ?v1 ))?v0 ))):named a122 ))
(check-sat )
;(get-unsat-core )
