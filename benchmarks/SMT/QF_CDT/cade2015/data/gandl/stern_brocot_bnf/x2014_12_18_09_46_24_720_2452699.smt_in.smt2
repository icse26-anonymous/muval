;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rat$ 0 )
(declare-sort Nat_rat_fun$ 0 )
(declare-sort Nat_nat_rat_fun_fun$ 0 )
(declare-sort Nat_nat_nat_prod_fun$ 0 )
(declare-sort Nat_nat_nat_nat_prod_fun_fun$ 0 )
(declare-datatypes ()((Nat_nat_prod$ (pair$ (fst$ Nat$ )(snd$ Nat$ )))(Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$ )(snd$a Nat_nat_prod$ )))))
(declare-fun x$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun y$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun uu$ ()Nat_nat_rat_fun_fun$ )
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat$ )
(declare-fun one$ ()Nat$ )
(declare-fun uua$ (Nat_nat_nat_nat_prod_fun_fun$ Nat_nat_nat_nat_prod_fun_fun$ )Nat_nat_nat_nat_prod_fun_fun$ )
(declare-fun uub$ (Nat_nat_rat_fun_fun$ Nat_nat_nat_nat_prod_fun_fun$ )Nat_nat_rat_fun_fun$ )
(declare-fun imat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun less$ (Rat$ Rat$ )Bool )
(declare-fun zero$ ()Nat$ )
(declare-fun fract$ (Int Int )Rat$ )
(declare-fun lLmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun of_nat$ (Nat$ )Int )
(declare-fun fun_app$ (Nat_rat_fun$ Nat$ )Rat$ )
(declare-fun mediant$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod$ )
(declare-fun of_nat$a (Nat$ )Rat$ )
(declare-fun of_nat$b (Nat$ )Nat$ )
(declare-fun fun_app$a (Nat_nat_rat_fun_fun$ Nat$ )Nat_rat_fun$ )
(declare-fun fun_app$b (Nat_nat_nat_prod_fun$ Nat$ )Nat_nat_prod$ )
(declare-fun fun_app$c (Nat_nat_nat_nat_prod_fun_fun$ Nat$ )Nat_nat_nat_prod_fun$ )
(declare-fun case_prod$ (Nat_nat_nat_nat_prod_fun_fun$ Nat_nat_prod$ )Nat_nat_prod$ )
(declare-fun case_prod$a (Nat_nat_rat_fun_fun$ Nat_nat_prod$ )Rat$ )
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(fract$ (of_nat$ ?v0 )(of_nat$ ?v1 ))):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$ )(?v1 Nat_nat_nat_nat_prod_fun_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(! (= (fun_app$b (fun_app$c (uua$ ?v0 ?v1 )?v2 )?v3 )(case_prod$ ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (uua$ ?v0 ?v1 )?v2 )?v3 )))):named a1 ))
(assert (! (forall ((?v0 Nat_nat_rat_fun_fun$ )(?v1 Nat_nat_nat_nat_prod_fun_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$a (uub$ ?v0 ?v1 )?v2 )?v3 )(case_prod$a ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uub$ ?v0 ?v1 )?v2 )?v3 )))):named a2 ))
(assert (! (not (less$ (case_prod$a uu$ (mediant$ (mulmat$ (mulmat$ x$ lLmat$ )y$ )))(case_prod$a uu$ (mediant$ x$ )))):named a3 ))
(assert (! (= (det$ x$ )one$ ):named a4 ))
(assert (! (= (det$ y$ )one$ ):named a5 ))
(assert (! (less$a zero$ (snd$ (mediant$ x$ ))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ )(?v2 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ (mulmat$ ?v0 ?v1 )?v2 )(mulmat$ ?v0 (mulmat$ ?v1 ?v2 )))):named a7 ))
(assert (! (less$a zero$ (snd$ (mediant$ (mulmat$ (mulmat$ x$ lLmat$ )y$ )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (less$ (of_nat$a ?v0 )(of_nat$a ?v1 ))(less$a ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (less$a (of_nat$b ?v0 )(of_nat$b ?v1 ))(less$a ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (< (of_nat$ ?v0 )(of_nat$ ?v1 ))(less$a ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$b ?v0 )(of_nat$b ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$a ?v0 )(of_nat$a ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$ ?v0 )(of_nat$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (= (det$ lLmat$ )one$ ):named a15 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ ?v0 lLmat$ ))one$ ))):named a16 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ lLmat$ ?v0 ))one$ ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (less$ (of_nat$a ?v0 )(of_nat$a ?v1 ))(less$a ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (less$a (of_nat$b ?v0 )(of_nat$b ?v1 ))(less$a ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (< (of_nat$ ?v0 )(of_nat$ ?v1 ))(less$a ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (less$a ?v0 ?v1 )(less$ (of_nat$a ?v0 )(of_nat$a ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (less$a ?v0 ?v1 )(less$a (of_nat$b ?v0 )(of_nat$b ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (less$a ?v0 ?v1 )(< (of_nat$ ?v0 )(of_nat$ ?v1 )))):named a23 ))
(assert (! (forall ((?v0 Rat$ ))(exists ((?v1 Nat$ ))(less$ ?v0 (of_nat$a ?v1 )))):named a24 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (less$a zero$ (snd$ (mediant$ ?v0 )))(less$a zero$ (snd$ (mediant$ (mulmat$ ?v0 lLmat$ )))))):named a25 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ ?v0 imat$ )?v0 )):named a26 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ imat$ ?v0 )?v0 )):named a27 ))
(assert (! (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$ )(?v1 Nat_nat_nat_nat_prod_fun_fun$ )(?v2 Nat_nat_prod$ ))(= (case_prod$ ?v0 (case_prod$ ?v1 ?v2 ))(case_prod$ (uua$ ?v0 ?v1 )?v2 ))):named a28 ))
(assert (! (forall ((?v0 Nat_nat_rat_fun_fun$ )(?v1 Nat_nat_nat_nat_prod_fun_fun$ )(?v2 Nat_nat_prod$ ))(= (case_prod$a ?v0 (case_prod$ ?v1 ?v2 ))(case_prod$a (uub$ ?v0 ?v1 )?v2 ))):named a29 ))
(check-sat )
;(get-unsat-core )
