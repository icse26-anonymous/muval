;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_b_b_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_a_fun$ 0 )
(declare-sort B_b_fun_b_fun$ 0 )
(declare-sort A_a_fun_bool_fun$ 0 )
(declare-sort A_b_fun_bool_fun$ 0 )
(declare-sort B_a_fun_bool_fun$ 0 )
(declare-sort B_b_fun_bool_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_b_b_fun_fun_bool_fun$ 0 )
(declare-sort B_b_b_fun_fun_bool_fun$ 0 )
(declare-sort A_b_b_fun_fun_a_b_b_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun_b_b_b_fun_fun_fun$ 0 )
(declare-sort B_tree$ 0)
(declare-sort A_tree$ 0)
(declare-sort B_b_b_fun_fun_tree$ 0)
(declare-sort B_a_fun_tree$ 0)
(declare-sort A_b_b_fun_fun_tree$ 0)
(declare-sort A_b_fun_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort B_b_fun_tree$ 0)
(declare-sort B_b_fun_b_fun_tree$ 0)
(declare-sort B_b_fun_a_fun_tree$ 0)
(declare-sort B_b_fun_b_b_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_tree$ 0)
(declare-fun root$ (B_tree$)B$)
(declare-fun left$ (B_tree$)B_tree$)
(declare-fun right$ (B_tree$)B_tree$)
(declare-fun node$ (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun root$a (A_tree$)A$)
(declare-fun left$a (A_tree$)A_tree$)
(declare-fun right$a (A_tree$)A_tree$)
(declare-fun node$a (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun select$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun$)
(declare-fun selecta$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun selectb$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun node$b (B_b_b_fun_fun$ B_b_b_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$)
(declare-fun selectc$ (B_a_fun_tree$)B_a_fun$)
(declare-fun selectd$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun selecte$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun node$c (B_a_fun$ B_a_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$)
(declare-fun selectf$ (A_b_b_fun_fun_tree$)A_b_b_fun_fun$)
(declare-fun selectg$ (A_b_b_fun_fun_tree$)A_b_b_fun_fun_tree$)
(declare-fun selecth$ (A_b_b_fun_fun_tree$)A_b_b_fun_fun_tree$)
(declare-fun node$d (A_b_b_fun_fun$ A_b_b_fun_fun_tree$ A_b_b_fun_fun_tree$ )A_b_b_fun_fun_tree$)
(declare-fun selecti$ (A_b_fun_tree$)A_b_fun$)
(declare-fun selectj$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun selectk$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun node$e (A_b_fun$ A_b_fun_tree$ A_b_fun_tree$ )A_b_fun_tree$)
(declare-fun selectl$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selectm$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selectn$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$f (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun selecto$ (B_b_fun_tree$)B_b_fun$)
(declare-fun selectp$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun selectq$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun node$g (B_b_fun$ B_b_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$)
(declare-fun selectr$ (B_b_fun_b_fun_tree$)B_b_fun_b_fun$)
(declare-fun selects$ (B_b_fun_b_fun_tree$)B_b_fun_b_fun_tree$)
(declare-fun selectt$ (B_b_fun_b_fun_tree$)B_b_fun_b_fun_tree$)
(declare-fun node$h (B_b_fun_b_fun$ B_b_fun_b_fun_tree$ B_b_fun_b_fun_tree$ )B_b_fun_b_fun_tree$)
(declare-fun selectu$ (B_b_fun_a_fun_tree$)B_b_fun_a_fun$)
(declare-fun selectv$ (B_b_fun_a_fun_tree$)B_b_fun_a_fun_tree$)
(declare-fun selectw$ (B_b_fun_a_fun_tree$)B_b_fun_a_fun_tree$)
(declare-fun node$i (B_b_fun_a_fun$ B_b_fun_a_fun_tree$ B_b_fun_a_fun_tree$ )B_b_fun_a_fun_tree$)
(declare-fun selectx$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun$)
(declare-fun selecty$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun_tree$)
(declare-fun selectz$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun_tree$)
(declare-fun node$j (B_b_fun_b_b_fun_fun$ B_b_fun_b_b_fun_fun_tree$ B_b_fun_b_b_fun_fun_tree$ )B_b_fun_b_b_fun_fun_tree$)
(declare-fun selecua$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun$)
(declare-fun selecub$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun selecuc$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun node$k (B_b_a_fun_fun$ B_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$)
(declare-fun h$ ()A_b_fun$ )
(declare-fun l$ ()A_a_fun$ )
(declare-fun r$ ()A_a_fun$ )
(declare-fun x$ ()A$ )
(declare-fun l$a ()B_b_fun$ )
(declare-fun r$a ()B_b_fun$ )
(declare-fun comp$ (A_b_fun$ )A_a_fun_a_b_fun_fun$ )
(declare-fun comp$a (B_b_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun left$b (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun root$b (B_b_fun_tree$ )B_b_fun$ )
(declare-fun fun_app$ (A_b_fun$ A$ )B$ )
(declare-fun tree_ap$ (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun fun_app$a (B_b_fun$ B$ )B$ )
(declare-fun fun_app$b (B_a_fun$ B$ )A$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun fun_app$d (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun fun_app$e (A_b_b_fun_fun$ A$ )B_b_fun$ )
(declare-fun fun_app$f (B_b_fun_b_fun$ B_b_fun$ )B$ )
(declare-fun fun_app$g (B_b_fun_a_fun$ B_b_fun$ )A$ )
(declare-fun fun_app$h (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$i (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$j (A_a_fun_a_b_fun_fun$ A_a_fun$ )A_b_fun$ )
(declare-fun fun_app$k (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$l (B_b_b_fun_fun_bool_fun$ B_b_b_fun_fun$ )Bool )
(declare-fun fun_app$m (B_a_fun_bool_fun$ B_a_fun$ )Bool )
(declare-fun fun_app$n (A_b_b_fun_fun_bool_fun$ A_b_b_fun_fun$ )Bool )
(declare-fun fun_app$o (A_b_fun_bool_fun$ A_b_fun$ )Bool )
(declare-fun fun_app$p (A_a_fun_bool_fun$ A_a_fun$ )Bool )
(declare-fun fun_app$q (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$r (B_b_fun_bool_fun$ B_b_fun$ )Bool )
(declare-fun fun_app$s (B_bool_fun$ B$ )Bool )
(declare-fun map_tree$ (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun tree_ap$a (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun tree_ap$b (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$c (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$d (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$e (A_b_b_fun_fun_tree$ A_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$f (B_b_fun_b_fun_tree$ B_b_fun_tree$ )B_tree$ )
(declare-fun tree_ap$g (B_b_fun_a_fun_tree$ B_b_fun_tree$ )A_tree$ )
(declare-fun tree_ap$h (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$i (B_b_a_fun_fun_tree$ B_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$a (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun map_tree$b (B_b_b_fun_fun_b_b_b_fun_fun_fun$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$ )
(declare-fun map_tree$c (B_a_fun_b_a_fun_fun$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$d (A_b_b_fun_fun_a_b_b_fun_fun_fun$ A_b_b_fun_fun_tree$ )A_b_b_fun_fun_tree$ )
(declare-fun map_tree$e (A_b_fun_a_b_fun_fun$ A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun map_tree$f (A_a_fun_a_a_fun_fun$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$g (B_b_fun_b_b_fun_fun$ B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun map_tree$h (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$i (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$j (B_b_b_fun_fun$ B_tree$ )B_b_fun_tree$ )
(declare-fun map_tree$k (A_b_b_fun_fun$ A_tree$ )B_b_fun_tree$ )
(declare-fun map_tree$l (B_b_fun_b_fun$ B_b_fun_tree$ )B_tree$ )
(declare-fun map_tree$m (B_b_fun_a_fun$ B_b_fun_tree$ )A_tree$ )
(declare-fun map_tree$n (B_b_a_fun_fun$ B_tree$ )B_a_fun_tree$ )
(declare-fun pred_tree$ (B_b_b_fun_fun_bool_fun$ B_b_b_fun_fun_tree$ )Bool )
(declare-fun tree_pure$ (B_b_fun$ )B_b_fun_tree$ )
(declare-fun pred_tree$a (B_a_fun_bool_fun$ B_a_fun_tree$ )Bool )
(declare-fun pred_tree$b (A_b_b_fun_fun_bool_fun$ A_b_b_fun_fun_tree$ )Bool )
(declare-fun pred_tree$c (A_b_fun_bool_fun$ A_b_fun_tree$ )Bool )
(declare-fun pred_tree$d (A_a_fun_bool_fun$ A_a_fun_tree$ )Bool )
(declare-fun pred_tree$e (A_bool_fun$ A_tree$ )Bool )
(declare-fun pred_tree$f (B_b_fun_bool_fun$ B_b_fun_tree$ )Bool )
(declare-fun pred_tree$g (B_bool_fun$ B_tree$ )Bool )
(declare-fun tree_pure$a (B$ )B_tree$ )
(declare-fun tree_pure$b (A$ )A_tree$ )
(declare-fun tree_pure$c (B_b_b_fun_fun$ )B_b_b_fun_fun_tree$ )
(declare-fun tree_pure$d (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$e (A_b_b_fun_fun$ )A_b_b_fun_fun_tree$ )
(declare-fun tree_pure$f (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$g (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_recurse$ (A_a_fun$ A_a_fun$ A$ )A_tree$ )
(declare-fun tree_recurse$a (B_b_b_fun_fun_b_b_b_fun_fun_fun$ B_b_b_fun_fun_b_b_b_fun_fun_fun$ B_b_b_fun_fun$ )B_b_b_fun_fun_tree$ )
(declare-fun tree_recurse$b (B_a_fun_b_a_fun_fun$ B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_recurse$c (A_b_b_fun_fun_a_b_b_fun_fun_fun$ A_b_b_fun_fun_a_b_b_fun_fun_fun$ A_b_b_fun_fun$ )A_b_b_fun_fun_tree$ )
(declare-fun tree_recurse$d (A_b_fun_a_b_fun_fun$ A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_recurse$e (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_recurse$f (B_b_fun_b_b_fun_fun$ B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_recurse$g (B_b_fun$ B_b_fun$ B$ )B_tree$ )
(assert (! (not (= (map_tree$ h$ (tree_recurse$ l$ r$ x$ ))(node$ (fun_app$ h$ x$ )(map_tree$a l$a (map_tree$ h$ (tree_recurse$ l$ r$ x$ )))(map_tree$a r$a (map_tree$ h$ (tree_recurse$ l$ r$ x$ )))))):named a0 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_b_b_fun_fun_tree$ )(?v2 B_b_b_fun_fun_tree$ )(?v3 B_b_b_fun_fun$ )(?v4 B_b_b_fun_fun_tree$ )(?v5 B_b_b_fun_fun_tree$ ))(= (= (node$b ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a1 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(= (= (node$c ?v0 ?v1 ?v2 )(node$c ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a2 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_b_b_fun_fun_tree$ )(?v2 A_b_b_fun_fun_tree$ )(?v3 A_b_b_fun_fun$ )(?v4 A_b_b_fun_fun_tree$ )(?v5 A_b_b_fun_fun_tree$ ))(= (= (node$d ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a3 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ )(?v3 A_b_fun$ )(?v4 A_b_fun_tree$ )(?v5 A_b_fun_tree$ ))(= (= (node$e ?v0 ?v1 ?v2 )(node$e ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a4 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(= (= (node$f ?v0 ?v1 ?v2 )(node$f ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a6 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B_b_fun$ )(?v4 B_b_fun_tree$ )(?v5 B_b_fun_tree$ ))(= (= (node$g ?v0 ?v1 ?v2 )(node$g ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a7 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a8 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_b_b_b_fun_fun_fun$ )(?v1 B_b_b_fun_fun_b_b_b_fun_fun_fun$ )(?v2 B_b_b_fun_fun$ ))(! (= (tree_recurse$a ?v0 ?v1 ?v2 )(node$b ?v2 (map_tree$b ?v0 (tree_recurse$a ?v0 ?v1 ?v2 ))(map_tree$b ?v1 (tree_recurse$a ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$a ?v0 ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_b_a_fun_fun$ )(?v2 B_a_fun$ ))(! (= (tree_recurse$b ?v0 ?v1 ?v2 )(node$c ?v2 (map_tree$c ?v0 (tree_recurse$b ?v0 ?v1 ?v2 ))(map_tree$c ?v1 (tree_recurse$b ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$b ?v0 ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_b_b_fun_fun_a_b_b_fun_fun_fun$ )(?v1 A_b_b_fun_fun_a_b_b_fun_fun_fun$ )(?v2 A_b_b_fun_fun$ ))(! (= (tree_recurse$c ?v0 ?v1 ?v2 )(node$d ?v2 (map_tree$d ?v0 (tree_recurse$c ?v0 ?v1 ?v2 ))(map_tree$d ?v1 (tree_recurse$c ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$c ?v0 ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$ )(?v1 A_b_fun_a_b_fun_fun$ )(?v2 A_b_fun$ ))(! (= (tree_recurse$d ?v0 ?v1 ?v2 )(node$e ?v2 (map_tree$e ?v0 (tree_recurse$d ?v0 ?v1 ?v2 ))(map_tree$e ?v1 (tree_recurse$d ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$d ?v0 ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun$ ))(! (= (tree_recurse$e ?v0 ?v1 ?v2 )(node$f ?v2 (map_tree$f ?v0 (tree_recurse$e ?v0 ?v1 ?v2 ))(map_tree$f ?v1 (tree_recurse$e ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$e ?v0 ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 B_b_fun_b_b_fun_fun$ )(?v1 B_b_fun_b_b_fun_fun$ )(?v2 B_b_fun$ ))(! (= (tree_recurse$f ?v0 ?v1 ?v2 )(node$g ?v2 (map_tree$g ?v0 (tree_recurse$f ?v0 ?v1 ?v2 ))(map_tree$g ?v1 (tree_recurse$f ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$f ?v0 ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (tree_recurse$ ?v0 ?v1 ?v2 )(node$a ?v2 (map_tree$h ?v0 (tree_recurse$ ?v0 ?v1 ?v2 ))(map_tree$h ?v1 (tree_recurse$ ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$ ?v0 ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (tree_recurse$g ?v0 ?v1 ?v2 )(node$ ?v2 (map_tree$a ?v0 (tree_recurse$g ?v0 ?v1 ?v2 ))(map_tree$a ?v1 (tree_recurse$g ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$g ?v0 ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (map_tree$ ?v0 (node$a ?v1 ?v2 ?v3 ))(node$ (fun_app$ ?v0 ?v1 )(map_tree$ ?v0 ?v2 )(map_tree$ ?v0 ?v3 ))):pattern ((map_tree$ ?v0 (node$a ?v1 ?v2 ?v3 ))))):named a17 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(! (= (map_tree$a ?v0 (node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$a ?v0 ?v1 )(map_tree$a ?v0 ?v2 )(map_tree$a ?v0 ?v3 ))):pattern ((map_tree$a ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a18 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(! (= (map_tree$i ?v0 (node$ ?v1 ?v2 ?v3 ))(node$a (fun_app$b ?v0 ?v1 )(map_tree$i ?v0 ?v2 )(map_tree$i ?v0 ?v3 ))):pattern ((map_tree$i ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a19 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (map_tree$h ?v0 (node$a ?v1 ?v2 ?v3 ))(node$a (fun_app$c ?v0 ?v1 )(map_tree$h ?v0 ?v2 )(map_tree$h ?v0 ?v3 ))):pattern ((map_tree$h ?v0 (node$a ?v1 ?v2 ?v3 ))))):named a20 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(! (= (map_tree$j ?v0 (node$ ?v1 ?v2 ?v3 ))(node$g (fun_app$d ?v0 ?v1 )(map_tree$j ?v0 ?v2 )(map_tree$j ?v0 ?v3 ))):pattern ((map_tree$j ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a21 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (map_tree$k ?v0 (node$a ?v1 ?v2 ?v3 ))(node$g (fun_app$e ?v0 ?v1 )(map_tree$k ?v0 ?v2 )(map_tree$k ?v0 ?v3 ))):pattern ((map_tree$k ?v0 (node$a ?v1 ?v2 ?v3 ))))):named a22 ))
(assert (! (forall ((?v0 B_b_fun_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun_tree$ )(?v3 B_b_fun_tree$ ))(! (= (map_tree$l ?v0 (node$g ?v1 ?v2 ?v3 ))(node$ (fun_app$f ?v0 ?v1 )(map_tree$l ?v0 ?v2 )(map_tree$l ?v0 ?v3 ))):pattern ((map_tree$l ?v0 (node$g ?v1 ?v2 ?v3 ))))):named a23 ))
(assert (! (forall ((?v0 B_b_fun_a_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun_tree$ )(?v3 B_b_fun_tree$ ))(! (= (map_tree$m ?v0 (node$g ?v1 ?v2 ?v3 ))(node$a (fun_app$g ?v0 ?v1 )(map_tree$m ?v0 ?v2 )(map_tree$m ?v0 ?v3 ))):pattern ((map_tree$m ?v0 (node$g ?v1 ?v2 ?v3 ))))):named a24 ))
(assert (! (forall ((?v0 B_b_fun_b_b_fun_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun_tree$ )(?v3 B_b_fun_tree$ ))(! (= (map_tree$g ?v0 (node$g ?v1 ?v2 ?v3 ))(node$g (fun_app$h ?v0 ?v1 )(map_tree$g ?v0 ?v2 )(map_tree$g ?v0 ?v3 ))):pattern ((map_tree$g ?v0 (node$g ?v1 ?v2 ?v3 ))))):named a25 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(! (= (map_tree$n ?v0 (node$ ?v1 ?v2 ?v3 ))(node$c (fun_app$i ?v0 ?v1 )(map_tree$n ?v0 ?v2 )(map_tree$n ?v0 ?v3 ))):pattern ((map_tree$n ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a26 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ ))(=> (forall ((?v1 B_b_b_fun_fun$ )(?v2 B_b_b_fun_fun_tree$ )(?v3 B_b_b_fun_fun_tree$ ))(=> (= ?v0 (node$b ?v1 ?v2 ?v3 ))false ))false )):named a27 ))
(assert (! (forall ((?v0 B_a_fun_tree$ ))(=> (forall ((?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(=> (= ?v0 (node$c ?v1 ?v2 ?v3 ))false ))false )):named a28 ))
(assert (! (forall ((?v0 A_b_b_fun_fun_tree$ ))(=> (forall ((?v1 A_b_b_fun_fun$ )(?v2 A_b_b_fun_fun_tree$ )(?v3 A_b_b_fun_fun_tree$ ))(=> (= ?v0 (node$d ?v1 ?v2 ?v3 ))false ))false )):named a29 ))
(assert (! (forall ((?v0 A_b_fun_tree$ ))(=> (forall ((?v1 A_b_fun$ )(?v2 A_b_fun_tree$ )(?v3 A_b_fun_tree$ ))(=> (= ?v0 (node$e ?v1 ?v2 ?v3 ))false ))false )):named a30 ))
(assert (! (forall ((?v0 A_a_fun_tree$ ))(=> (forall ((?v1 A_a_fun$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun_tree$ ))(=> (= ?v0 (node$f ?v1 ?v2 ?v3 ))false ))false )):named a31 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (forall ((?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (node$a ?v1 ?v2 ?v3 ))false ))false )):named a32 ))
(assert (! (forall ((?v0 B_b_fun_tree$ ))(=> (forall ((?v1 B_b_fun$ )(?v2 B_b_fun_tree$ )(?v3 B_b_fun_tree$ ))(=> (= ?v0 (node$g ?v1 ?v2 ?v3 ))false ))false )):named a33 ))
(assert (! (forall ((?v0 B_tree$ ))(=> (forall ((?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false ))false )):named a34 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ )(?v1 B_b_b_fun_fun$ )(?v2 B_b_b_fun_fun_b_b_b_fun_fun_fun$ )(?v3 B_b_b_fun_fun_b_b_b_fun_fun_fun$ ))(=> (= ?v0 (node$b ?v1 (map_tree$b ?v2 ?v0 )(map_tree$b ?v3 ?v0 )))(= ?v0 (tree_recurse$a ?v2 ?v3 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun$ )(?v2 B_a_fun_b_a_fun_fun$ )(?v3 B_a_fun_b_a_fun_fun$ ))(=> (= ?v0 (node$c ?v1 (map_tree$c ?v2 ?v0 )(map_tree$c ?v3 ?v0 )))(= ?v0 (tree_recurse$b ?v2 ?v3 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_b_b_fun_fun_tree$ )(?v1 A_b_b_fun_fun$ )(?v2 A_b_b_fun_fun_a_b_b_fun_fun_fun$ )(?v3 A_b_b_fun_fun_a_b_b_fun_fun_fun$ ))(=> (= ?v0 (node$d ?v1 (map_tree$d ?v2 ?v0 )(map_tree$d ?v3 ?v0 )))(= ?v0 (tree_recurse$c ?v2 ?v3 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_b_fun$ )(?v2 A_b_fun_a_b_fun_fun$ )(?v3 A_b_fun_a_b_fun_fun$ ))(=> (= ?v0 (node$e ?v1 (map_tree$e ?v2 ?v0 )(map_tree$e ?v3 ?v0 )))(= ?v0 (tree_recurse$d ?v2 ?v3 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun$ )(?v2 A_a_fun_a_a_fun_fun$ )(?v3 A_a_fun_a_a_fun_fun$ ))(=> (= ?v0 (node$f ?v1 (map_tree$f ?v2 ?v0 )(map_tree$f ?v3 ?v0 )))(= ?v0 (tree_recurse$e ?v2 ?v3 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun$ )(?v2 B_b_fun_b_b_fun_fun$ )(?v3 B_b_fun_b_b_fun_fun$ ))(=> (= ?v0 (node$g ?v1 (map_tree$g ?v2 ?v0 )(map_tree$g ?v3 ?v0 )))(= ?v0 (tree_recurse$f ?v2 ?v3 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (= ?v0 (node$a ?v1 (map_tree$h ?v2 ?v0 )(map_tree$h ?v3 ?v0 )))(= ?v0 (tree_recurse$ ?v2 ?v3 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (= ?v0 (node$ ?v1 (map_tree$a ?v2 ?v0 )(map_tree$a ?v3 ?v0 )))(= ?v0 (tree_recurse$g ?v2 ?v3 ?v1 )))):named a42 ))
(assert (! (= (fun_app$j (comp$ h$ )l$ )(fun_app$k (comp$a l$a )h$ )):named a43 ))
(assert (! (= (fun_app$j (comp$ h$ )r$ )(fun_app$k (comp$a r$a )h$ )):named a44 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_bool_fun$ )(?v1 B_b_b_fun_fun$ )(?v2 B_b_b_fun_fun_tree$ )(?v3 B_b_b_fun_fun_tree$ ))(! (= (pred_tree$ ?v0 (node$b ?v1 ?v2 ?v3 ))(and (fun_app$l ?v0 ?v1 )(and (pred_tree$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 )))):pattern ((pred_tree$ ?v0 (node$b ?v1 ?v2 ?v3 ))))):named a45 ))
(assert (! (forall ((?v0 B_a_fun_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(! (= (pred_tree$a ?v0 (node$c ?v1 ?v2 ?v3 ))(and (fun_app$m ?v0 ?v1 )(and (pred_tree$a ?v0 ?v2 )(pred_tree$a ?v0 ?v3 )))):pattern ((pred_tree$a ?v0 (node$c ?v1 ?v2 ?v3 ))))):named a46 ))
(assert (! (forall ((?v0 A_b_b_fun_fun_bool_fun$ )(?v1 A_b_b_fun_fun$ )(?v2 A_b_b_fun_fun_tree$ )(?v3 A_b_b_fun_fun_tree$ ))(! (= (pred_tree$b ?v0 (node$d ?v1 ?v2 ?v3 ))(and (fun_app$n ?v0 ?v1 )(and (pred_tree$b ?v0 ?v2 )(pred_tree$b ?v0 ?v3 )))):pattern ((pred_tree$b ?v0 (node$d ?v1 ?v2 ?v3 ))))):named a47 ))
(assert (! (forall ((?v0 A_b_fun_bool_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun_tree$ )(?v3 A_b_fun_tree$ ))(! (= (pred_tree$c ?v0 (node$e ?v1 ?v2 ?v3 ))(and (fun_app$o ?v0 ?v1 )(and (pred_tree$c ?v0 ?v2 )(pred_tree$c ?v0 ?v3 )))):pattern ((pred_tree$c ?v0 (node$e ?v1 ?v2 ?v3 ))))):named a48 ))
(assert (! (forall ((?v0 A_a_fun_bool_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun_tree$ ))(! (= (pred_tree$d ?v0 (node$f ?v1 ?v2 ?v3 ))(and (fun_app$p ?v0 ?v1 )(and (pred_tree$d ?v0 ?v2 )(pred_tree$d ?v0 ?v3 )))):pattern ((pred_tree$d ?v0 (node$f ?v1 ?v2 ?v3 ))))):named a49 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (pred_tree$e ?v0 (node$a ?v1 ?v2 ?v3 ))(and (fun_app$q ?v0 ?v1 )(and (pred_tree$e ?v0 ?v2 )(pred_tree$e ?v0 ?v3 )))):pattern ((pred_tree$e ?v0 (node$a ?v1 ?v2 ?v3 ))))):named a50 ))
(assert (! (forall ((?v0 B_b_fun_bool_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun_tree$ )(?v3 B_b_fun_tree$ ))(! (= (pred_tree$f ?v0 (node$g ?v1 ?v2 ?v3 ))(and (fun_app$r ?v0 ?v1 )(and (pred_tree$f ?v0 ?v2 )(pred_tree$f ?v0 ?v3 )))):pattern ((pred_tree$f ?v0 (node$g ?v1 ?v2 ?v3 ))))):named a51 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(! (= (pred_tree$g ?v0 (node$ ?v1 ?v2 ?v3 ))(and (fun_app$s ?v0 ?v1 )(and (pred_tree$g ?v0 ?v2 )(pred_tree$g ?v0 ?v3 )))):pattern ((pred_tree$g ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a52 ))
(assert (! (forall ((?v0 B_b_fun_b_b_fun_fun$ )(?v1 B_b_fun$ ))(= (map_tree$g ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$h ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 B_b_fun_b_fun$ )(?v1 B_b_fun$ ))(= (map_tree$l ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$f ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B_b_fun_a_fun$ )(?v1 B_b_fun$ ))(= (map_tree$m ?v0 (tree_pure$ ?v1 ))(tree_pure$b (fun_app$g ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B$ ))(= (map_tree$j ?v0 (tree_pure$a ?v1 ))(tree_pure$ (fun_app$d ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A$ ))(= (map_tree$k ?v0 (tree_pure$b ?v1 ))(tree_pure$ (fun_app$e ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (map_tree$i ?v0 (tree_pure$a ?v1 ))(tree_pure$b (fun_app$b ?v0 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$h ?v0 (tree_pure$b ?v1 ))(tree_pure$b (fun_app$c ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$b ?v1 ))(tree_pure$a (fun_app$ ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (map_tree$a ?v0 (tree_pure$a ?v1 ))(tree_pure$a (fun_app$a ?v0 ?v1 )))):named a61 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$ (node$g ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$ (fun_app$a ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$g ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a62 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$a (fun_app$b ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a63 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$ (fun_app$ ?v0 ?v3 )(tree_ap$b ?v1 ?v4 )(tree_ap$b ?v2 ?v5 ))):pattern ((tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a64 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$c (node$f ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$a (fun_app$c ?v0 ?v3 )(tree_ap$c ?v1 ?v4 )(tree_ap$c ?v2 ?v5 ))):pattern ((tree_ap$c (node$f ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a65 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_b_b_fun_fun_tree$ )(?v2 B_b_b_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$d (node$b ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$g (fun_app$d ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$b ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a66 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_b_b_fun_fun_tree$ )(?v2 A_b_b_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$e (node$d ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$g (fun_app$e ?v0 ?v3 )(tree_ap$e ?v1 ?v4 )(tree_ap$e ?v2 ?v5 ))):pattern ((tree_ap$e (node$d ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a67 ))
(assert (! (forall ((?v0 B_b_fun_b_fun$ )(?v1 B_b_fun_b_fun_tree$ )(?v2 B_b_fun_b_fun_tree$ )(?v3 B_b_fun$ )(?v4 B_b_fun_tree$ )(?v5 B_b_fun_tree$ ))(! (= (tree_ap$f (node$h ?v0 ?v1 ?v2 )(node$g ?v3 ?v4 ?v5 ))(node$ (fun_app$f ?v0 ?v3 )(tree_ap$f ?v1 ?v4 )(tree_ap$f ?v2 ?v5 ))):pattern ((tree_ap$f (node$h ?v0 ?v1 ?v2 )(node$g ?v3 ?v4 ?v5 ))))):named a68 ))
(assert (! (forall ((?v0 B_b_fun_a_fun$ )(?v1 B_b_fun_a_fun_tree$ )(?v2 B_b_fun_a_fun_tree$ )(?v3 B_b_fun$ )(?v4 B_b_fun_tree$ )(?v5 B_b_fun_tree$ ))(! (= (tree_ap$g (node$i ?v0 ?v1 ?v2 )(node$g ?v3 ?v4 ?v5 ))(node$a (fun_app$g ?v0 ?v3 )(tree_ap$g ?v1 ?v4 )(tree_ap$g ?v2 ?v5 ))):pattern ((tree_ap$g (node$i ?v0 ?v1 ?v2 )(node$g ?v3 ?v4 ?v5 ))))):named a69 ))
(assert (! (forall ((?v0 B_b_fun_b_b_fun_fun$ )(?v1 B_b_fun_b_b_fun_fun_tree$ )(?v2 B_b_fun_b_b_fun_fun_tree$ )(?v3 B_b_fun$ )(?v4 B_b_fun_tree$ )(?v5 B_b_fun_tree$ ))(! (= (tree_ap$h (node$j ?v0 ?v1 ?v2 )(node$g ?v3 ?v4 ?v5 ))(node$g (fun_app$h ?v0 ?v3 )(tree_ap$h ?v1 ?v4 )(tree_ap$h ?v2 ?v5 ))):pattern ((tree_ap$h (node$j ?v0 ?v1 ?v2 )(node$g ?v3 ?v4 ?v5 ))))):named a70 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_b_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$i (node$k ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$c (fun_app$i ?v0 ?v3 )(tree_ap$i ?v1 ?v4 )(tree_ap$i ?v2 ?v5 ))):pattern ((tree_ap$i (node$k ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a71 ))
(assert (! (forall ((?v0 B_b_fun_b_fun$ )(?v1 B_b_fun_tree$ ))(= (root$ (map_tree$l ?v0 ?v1 ))(fun_app$f ?v0 (root$b ?v1 )))):named a72 ))
(assert (! (forall ((?v0 B_b_fun_a_fun$ )(?v1 B_b_fun_tree$ ))(= (root$a (map_tree$m ?v0 ?v1 ))(fun_app$g ?v0 (root$b ?v1 )))):named a73 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_tree$ ))(= (root$b (map_tree$j ?v0 ?v1 ))(fun_app$d ?v0 (root$ ?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_tree$ ))(= (root$b (map_tree$k ?v0 ?v1 ))(fun_app$e ?v0 (root$a ?v1 )))):named a75 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$i ?v0 ?v1 ))(fun_app$b ?v0 (root$ ?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$h ?v0 ?v1 ))(fun_app$c ?v0 (root$a ?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a78 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a79 ))
(assert (! (forall ((?v0 B_b_fun_b_fun$ )(?v1 B_b_fun_tree$ ))(= (root$ (map_tree$l ?v0 ?v1 ))(fun_app$f ?v0 (root$b ?v1 )))):named a80 ))
(assert (! (forall ((?v0 B_b_fun_a_fun$ )(?v1 B_b_fun_tree$ ))(= (root$a (map_tree$m ?v0 ?v1 ))(fun_app$g ?v0 (root$b ?v1 )))):named a81 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_tree$ ))(= (root$b (map_tree$j ?v0 ?v1 ))(fun_app$d ?v0 (root$ ?v1 )))):named a82 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_tree$ ))(= (root$b (map_tree$k ?v0 ?v1 ))(fun_app$e ?v0 (root$a ?v1 )))):named a83 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$i ?v0 ?v1 ))(fun_app$b ?v0 (root$ ?v1 )))):named a84 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$h ?v0 ?v1 ))(fun_app$c ?v0 (root$a ?v1 )))):named a85 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a86 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a87 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ ))(! (= (tree_pure$c ?v0 )(node$b ?v0 (tree_pure$c ?v0 )(tree_pure$c ?v0 ))):pattern ((tree_pure$c ?v0 )))):named a88 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (tree_pure$d ?v0 )(node$c ?v0 (tree_pure$d ?v0 )(tree_pure$d ?v0 ))):pattern ((tree_pure$d ?v0 )))):named a89 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ ))(! (= (tree_pure$e ?v0 )(node$d ?v0 (tree_pure$e ?v0 )(tree_pure$e ?v0 ))):pattern ((tree_pure$e ?v0 )))):named a90 ))
(assert (! (forall ((?v0 A_b_fun$ ))(! (= (tree_pure$f ?v0 )(node$e ?v0 (tree_pure$f ?v0 )(tree_pure$f ?v0 ))):pattern ((tree_pure$f ?v0 )))):named a91 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (tree_pure$g ?v0 )(node$f ?v0 (tree_pure$g ?v0 )(tree_pure$g ?v0 ))):pattern ((tree_pure$g ?v0 )))):named a92 ))
(assert (! (forall ((?v0 B_b_fun$ ))(! (= (tree_pure$ ?v0 )(node$g ?v0 (tree_pure$ ?v0 )(tree_pure$ ?v0 ))):pattern ((tree_pure$ ?v0 )))):named a93 ))
(assert (! (forall ((?v0 A$ ))(! (= (tree_pure$b ?v0 )(node$a ?v0 (tree_pure$b ?v0 )(tree_pure$b ?v0 ))):pattern ((tree_pure$b ?v0 )))):named a94 ))
(assert (! (forall ((?v0 B$ ))(! (= (tree_pure$a ?v0 )(node$ ?v0 (tree_pure$a ?v0 )(tree_pure$a ?v0 ))):pattern ((tree_pure$a ?v0 )))):named a95 ))
(assert (! (forall ((?v0 B_b_fun_b_fun$ )(?v1 B_b_fun_tree$ ))(= (left$ (map_tree$l ?v0 ?v1 ))(map_tree$l ?v0 (left$b ?v1 )))):named a96 ))
(assert (! (forall ((?v0 B_b_fun_a_fun$ )(?v1 B_b_fun_tree$ ))(= (left$a (map_tree$m ?v0 ?v1 ))(map_tree$m ?v0 (left$b ?v1 )))):named a97 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_tree$ ))(= (left$b (map_tree$j ?v0 ?v1 ))(map_tree$j ?v0 (left$ ?v1 )))):named a98 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_tree$ ))(= (left$b (map_tree$k ?v0 ?v1 ))(map_tree$k ?v0 (left$a ?v1 )))):named a99 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$i ?v0 ?v1 ))(map_tree$i ?v0 (left$ ?v1 )))):named a100 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$h ?v0 ?v1 ))(map_tree$h ?v0 (left$a ?v1 )))):named a101 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a102 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$ ?v1 )))):named a103 ))
(check-sat )
;(get-unsat-core )
