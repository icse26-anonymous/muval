;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Int_tree$ 0)
(declare-fun root$ (Int_tree$)Int)
(declare-fun left$ (Int_tree$)Int_tree$)
(declare-fun right$ (Int_tree$)Int_tree$)
(declare-fun node$ (Int Int_tree$ Int_tree$ )Int_tree$)
(declare-datatypes ()((Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))))
(declare-fun den$ ()Int_tree$ )
(declare-fun mod$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun num$ ()Int_tree$ )
(declare-fun plus$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun minus$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun times$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun fIXME_x$ ()Int_tree$ )
(declare-fun numeral$ (Num$ )Int_tree$ )
(declare-fun tree_chop$ (Int_tree$ )Int_tree$ )
(assert (! (not (= (minus$ (plus$ (minus$ (plus$ num$ den$ )(tree_chop$ den$ ))(tree_chop$ den$ ))(times$ (numeral$ (bit0$ one$ ))fIXME_x$ ))(minus$ (plus$ num$ den$ )(times$ (numeral$ (bit0$ one$ ))(mod$ num$ den$ ))))):named a0 ))
(assert (! (= (tree_chop$ den$ )(minus$ (plus$ (minus$ (plus$ num$ den$ )(tree_chop$ den$ ))(tree_chop$ den$ ))(times$ (numeral$ (bit0$ one$ ))fIXME_x$ ))):named a1 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (mod$ (plus$ ?v0 ?v1 )?v1 )(mod$ ?v0 ?v1 ))):named a2 ))
(assert (! (= (minus$ (plus$ num$ den$ )(tree_chop$ den$ ))(times$ (numeral$ (bit0$ one$ ))fIXME_x$ )):named a3 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (tree_chop$ (plus$ ?v0 ?v1 ))(plus$ (tree_chop$ ?v0 )(tree_chop$ ?v1 )))):named a4 ))
(assert (! (= den$ (tree_chop$ num$ )):named a5 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ )(?v2 Num$ ))(= (times$ (minus$ ?v0 ?v1 )(numeral$ ?v2 ))(minus$ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 Num$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(= (times$ (numeral$ ?v0 )(minus$ ?v1 ?v2 ))(minus$ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ )(?v2 Num$ ))(= (times$ (plus$ ?v0 ?v1 )(numeral$ ?v2 ))(plus$ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 Num$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(= (times$ (numeral$ ?v0 )(plus$ ?v1 ?v2 ))(plus$ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a10 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a11 ))
(check-sat )
;(get-unsat-core )
