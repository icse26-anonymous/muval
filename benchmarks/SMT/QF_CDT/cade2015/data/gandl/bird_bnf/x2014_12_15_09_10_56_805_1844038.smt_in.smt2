;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_tree_a_tree_fun$ 0 )
(declare-sort B_tree_b_tree_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort B_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun root$a (B_tree$)B$)
(declare-fun left$a (B_tree$)B_tree$)
(declare-fun right$a (B_tree$)B_tree$)
(declare-fun node$a (B$ B_tree$ B_tree$ )B_tree$)
(declare-datatypes ()((Dir$ (l$ )(r$ ))(Dir_list$ (nil$ )(cons$ (hd$ Dir$ )(tl$ Dir_list$ )))))
(declare-fun f$ ()B_a_fun$ )
(declare-fun t$ ()B_tree$ )
(declare-fun even$ ()Bool )
(declare-fun fun_app$ (B_tree_b_tree_fun$ B_tree$ )B_tree$ )
(declare-fun fun_app$a (A_tree_a_tree_fun$ A_tree$ )A_tree$ )
(declare-fun fun_app$b (B_b_fun$ B$ )B$ )
(declare-fun fun_app$c (A_b_fun$ A$ )B$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun fun_app$e (B_a_fun$ B$ )A$ )
(declare-fun map_tree$ (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$a (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$b (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun map_tree$c (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun tree_chop$ (B_tree$ )B_tree$ )
(declare-fun tree_pure$ (B$ )B_tree$ )
(declare-fun odd_mirror$ ()B_tree_b_tree_fun$ )
(declare-fun tree_chop$a (A_tree$ )A_tree$ )
(declare-fun tree_pure$a (A$ )A_tree$ )
(declare-fun even_mirror$ ()B_tree_b_tree_fun$ )
(declare-fun odd_mirror$a ()A_tree_a_tree_fun$ )
(declare-fun even_mirror$a ()A_tree_a_tree_fun$ )
(declare-fun traverse_tree$ (Dir_list$ A_tree$ )A_tree$ )
(declare-fun traverse_tree$a (Dir_list$ B_tree$ )B_tree$ )
(declare-fun even_odd_mirror$ (Bool )B_tree_b_tree_fun$ )
(declare-fun even_odd_mirror$a (Bool )A_tree_a_tree_fun$ )
(assert (! (not (= (map_tree$ f$ (fun_app$ (even_odd_mirror$ even$ )t$ ))(fun_app$a (even_odd_mirror$a even$ )(map_tree$ f$ t$ )))):named a0 ))
(assert (! (= odd_mirror$ (even_odd_mirror$ false )):named a1 ))
(assert (! (= odd_mirror$a (even_odd_mirror$a false )):named a2 ))
(assert (! (= even_mirror$ (even_odd_mirror$ true )):named a3 ))
(assert (! (= even_mirror$a (even_odd_mirror$a true )):named a4 ))
(assert (! (forall ((?v0 Bool )(?v1 B_tree$ ))(= (root$a (fun_app$ (even_odd_mirror$ ?v0 )?v1 ))(root$a ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Bool )(?v1 A_tree$ ))(= (root$ (fun_app$a (even_odd_mirror$a ?v0 )?v1 ))(root$ ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun$ )(?v2 A_tree$ ))(= (traverse_tree$ ?v0 (map_tree$a ?v1 ?v2 ))(map_tree$a ?v1 (traverse_tree$ ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun$ )(?v2 A_tree$ ))(= (traverse_tree$a ?v0 (map_tree$b ?v1 ?v2 ))(map_tree$b ?v1 (traverse_tree$ ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun$ )(?v2 B_tree$ ))(= (traverse_tree$a ?v0 (map_tree$c ?v1 ?v2 ))(map_tree$c ?v1 (traverse_tree$a ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun$ )(?v2 B_tree$ ))(= (traverse_tree$ ?v0 (map_tree$ ?v1 ?v2 ))(map_tree$ ?v1 (traverse_tree$a ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (map_tree$c ?v0 (tree_chop$ ?v1 ))(tree_chop$ (map_tree$c ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (map_tree$b ?v0 (tree_chop$a ?v1 ))(tree_chop$ (map_tree$b ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (map_tree$a ?v0 (tree_chop$a ?v1 ))(tree_chop$a (map_tree$a ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (map_tree$ ?v0 (tree_chop$ ?v1 ))(tree_chop$a (map_tree$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (map_tree$c ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$b ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (map_tree$b ?v0 (tree_pure$a ?v1 ))(tree_pure$ (fun_app$c ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$a ?v0 (tree_pure$a ?v1 ))(tree_pure$a (fun_app$d ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$d ?v0 (root$ ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$c ?v0 (root$ ?v1 )))):named a20 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$c ?v0 ?v1 ))(fun_app$b ?v0 (root$a ?v1 )))):named a21 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$e ?v0 (root$a ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$d ?v0 (root$ ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$c ?v0 (root$ ?v1 )))):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$c ?v0 ?v1 ))(fun_app$b ?v0 (root$a ?v1 )))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$e ?v0 (root$a ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$ (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$ ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$ ?v1 )))):named a28 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (right$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$a ?v1 )))):named a29 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$ (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$ ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (right$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$a ?v1 )))):named a33 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$ ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$ ?v1 )))):named a36 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$a ?v1 )))):named a37 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$ ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$ ?v1 )))):named a40 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$a ?v1 )))):named a41 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a42 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A$ ))(= (traverse_tree$ ?v0 (tree_pure$a ?v1 ))(tree_pure$a ?v1 ))):named a43 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B$ ))(= (traverse_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a44 ))
(assert (! (forall ((?v0 B$ ))(= (tree_chop$ (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a45 ))
(assert (! (forall ((?v0 A$ ))(= (tree_chop$a (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a46 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tree_pure$ ?v0 )(tree_pure$ ?v1 ))(= ?v0 ?v1 ))):named a47 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (tree_pure$a ?v0 )(tree_pure$a ?v1 ))(= ?v0 ?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_tree$ ))(= (left$ (fun_app$a odd_mirror$a ?v0 ))(fun_app$a even_mirror$a (left$ ?v0 )))):named a49 ))
(assert (! (forall ((?v0 B_tree$ ))(= (left$a (fun_app$ odd_mirror$ ?v0 ))(fun_app$ even_mirror$ (left$a ?v0 )))):named a50 ))
(assert (! (forall ((?v0 A_tree$ ))(= (left$ (fun_app$a even_mirror$a ?v0 ))(fun_app$a odd_mirror$a (right$ ?v0 )))):named a51 ))
(assert (! (forall ((?v0 B_tree$ ))(= (left$a (fun_app$ even_mirror$ ?v0 ))(fun_app$ odd_mirror$ (right$a ?v0 )))):named a52 ))
(check-sat )
;(get-unsat-core )
