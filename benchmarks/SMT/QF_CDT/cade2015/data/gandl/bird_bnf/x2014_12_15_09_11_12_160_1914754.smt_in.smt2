;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun t$ ()A_tree$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()A$ )
(declare-fun z$ ()A$ )
(declare-fun ll$ ()A_a_fun$ )
(declare-fun lr$ ()A_a_fun$ )
(declare-fun rl$ ()A_a_fun$ )
(declare-fun rr$ ()A_a_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun mirror$ (A_tree$ )A_tree$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun tree_pure$ (A$ )A_tree$ )
(declare-fun odd_mirror$ (A_tree$ )A_tree$ )
(declare-fun even_mirror$ (A_tree$ )A_tree$ )
(declare-fun tree_iterate$ (A_a_fun$ A_a_fun$ A$ )A_tree$ )
(declare-fun even_odd_mirror$ (Bool A_tree$ )A_tree$ )
(assert (! (not (= (root$ t$ )x$ )):named a0 ))
(assert (! (= t$ (node$ x$ (node$ y$ (map_tree$ ll$ t$ )(map_tree$ lr$ t$ ))(node$ z$ (map_tree$ rl$ t$ )(map_tree$ rr$ t$ )))):named a1 ))
(assert (! (forall ((?v0 A_tree$ ))(= (root$ (odd_mirror$ ?v0 ))(root$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_tree$ ))(= (root$ (even_mirror$ ?v0 ))(root$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_tree$ ))(= (root$ (mirror$ ?v0 ))(root$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 Bool )(?v1 A_tree$ ))(= (root$ (even_odd_mirror$ ?v0 ?v1 ))(root$ ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (root$ (tree_iterate$ ?v0 ?v1 ?v2 ))?v2 )):named a6 ))
(assert (! (forall ((?v0 A$ ))(= (root$ (tree_pure$ ?v0 ))?v0 )):named a7 ))
(assert (! (forall ((?v0 A_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a13 ))
(check-sat )
;(get-unsat-core )
