;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_fun_set$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_tree_a_tree_fun$ 0 )
(declare-sort A_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_fun$ 0 )
(declare-sort A_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_fun$ 0 )
(declare-sort A_a_fun_tree_a_a_fun_tree_fun$ 0 )
(declare-sort A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_fun$ 0 )
(declare-sort A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-datatypes ()((Dir$ (l$ )(r$ ))(Dir_list$ (nil$ )(cons$ (hd$ Dir$ )(tl$ Dir_list$ )))))
(declare-sort A_a_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_fun_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_fun_tree$ 0)
(declare-sort A_a_fun_a_fun_a_fun_tree$ 0)
(declare-sort A_a_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_fun_tree$ 0)
(declare-fun select$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun$)
(declare-fun selecta$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun selectb$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun node$a (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$)
(declare-fun selectc$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun$)
(declare-fun selectd$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun selecte$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun node$b (A_a_a_fun_fun$ A_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$)
(declare-fun selectf$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun$)
(declare-fun selectg$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun selecth$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun node$c (A_a_fun_a_fun$ A_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$)
(declare-fun selecti$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selectj$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selectk$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$d (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun selectl$ (A_a_a_fun_fun_a_fun_tree$)A_a_a_fun_fun_a_fun$)
(declare-fun selectm$ (A_a_a_fun_fun_a_fun_tree$)A_a_a_fun_fun_a_fun_tree$)
(declare-fun selectn$ (A_a_a_fun_fun_a_fun_tree$)A_a_a_fun_fun_a_fun_tree$)
(declare-fun node$e (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun_a_fun_tree$ A_a_a_fun_fun_a_fun_tree$ )A_a_a_fun_fun_a_fun_tree$)
(declare-fun selecto$ (A_a_fun_a_fun_a_fun_tree$)A_a_fun_a_fun_a_fun$)
(declare-fun selectp$ (A_a_fun_a_fun_a_fun_tree$)A_a_fun_a_fun_a_fun_tree$)
(declare-fun selectq$ (A_a_fun_a_fun_a_fun_tree$)A_a_fun_a_fun_a_fun_tree$)
(declare-fun node$f (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_a_fun_tree$ )A_a_fun_a_fun_a_fun_tree$)
(declare-fun selectr$ (A_a_a_a_fun_fun_fun_tree$)A_a_a_a_fun_fun_fun$)
(declare-fun selects$ (A_a_a_a_fun_fun_fun_tree$)A_a_a_a_fun_fun_fun_tree$)
(declare-fun selectt$ (A_a_a_a_fun_fun_fun_tree$)A_a_a_a_fun_fun_fun_tree$)
(declare-fun node$g (A_a_a_a_fun_fun_fun$ A_a_a_a_fun_fun_fun_tree$ A_a_a_a_fun_fun_fun_tree$ )A_a_a_a_fun_fun_fun_tree$)
(declare-fun selectu$ (A_a_a_fun_a_fun_fun_tree$)A_a_a_fun_a_fun_fun$)
(declare-fun selectv$ (A_a_a_fun_a_fun_fun_tree$)A_a_a_fun_a_fun_fun_tree$)
(declare-fun selectw$ (A_a_a_fun_a_fun_fun_tree$)A_a_a_fun_a_fun_fun_tree$)
(declare-fun node$h (A_a_a_fun_a_fun_fun$ A_a_a_fun_a_fun_fun_tree$ A_a_a_fun_a_fun_fun_tree$ )A_a_a_fun_a_fun_fun_tree$)
(declare-fun selectx$ (A_a_fun_a_a_fun_fun_a_fun_tree$)A_a_fun_a_a_fun_fun_a_fun$)
(declare-fun selecty$ (A_a_fun_a_a_fun_fun_a_fun_tree$)A_a_fun_a_a_fun_fun_a_fun_tree$)
(declare-fun selectz$ (A_a_fun_a_a_fun_fun_a_fun_tree$)A_a_fun_a_a_fun_fun_a_fun_tree$)
(declare-fun node$i (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun_a_fun_tree$ A_a_fun_a_a_fun_fun_a_fun_tree$ )A_a_fun_a_a_fun_fun_a_fun_tree$)
(declare-fun selecua$ (A_a_a_fun_fun_a_a_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun selecub$ (A_a_a_fun_fun_a_a_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selecuc$ (A_a_a_fun_fun_a_a_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun node$j (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_a_a_fun_fun_tree$ )A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun t$ ()A_tree$ )
(declare-fun path$ ()Dir_list$ )
(declare-fun root$a (A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun$ )
(declare-fun root$b (A_a_a_fun_fun_tree$ )A_a_a_fun_fun$ )
(declare-fun root$c (A_a_fun_a_fun_tree$ )A_a_fun_a_fun$ )
(declare-fun root$d (A_a_fun_tree$ )A_a_fun$ )
(declare-fun member$ (A_a_fun$ A_a_fun_set$ )Bool )
(declare-fun mirror$ (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun fun_app$ (A_tree_a_tree_fun$ A_tree$ )A_tree$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun mirror$a (A_tree$ )A_tree$ )
(declare-fun tree_ap$ (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun fun_app$a (A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_fun$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun fun_app$b (A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_fun$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun fun_app$c (A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_fun$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun fun_app$d (A_a_fun_tree_a_a_fun_tree_fun$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun fun_app$e (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$f (A_a_fun_a_fun$ A_a_fun$ )A$ )
(declare-fun fun_app$g (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$h (A_a_fun$ A$ )A$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun set_tree$ (A_a_fun_tree$ )A_a_fun_set$ )
(declare-fun tree_ap$a (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$b (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$c (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$d (A_a_a_fun_fun_a_fun_tree$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun tree_ap$e (A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$f (A_a_a_a_fun_fun_fun_tree$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_ap$g (A_a_a_fun_a_fun_fun_tree$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_ap$h (A_a_fun_a_a_fun_fun_a_fun_tree$ A_a_fun_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun tree_ap$i (A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$a (A_a_a_fun_fun$ A_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$b (A_a_fun_a_fun$ A_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$c (A_a_fun_a_a_fun_fun$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$d (A_a_a_a_fun_fun_fun$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun map_tree$e (A_a_a_fun_a_fun_fun$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun map_tree$f (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun map_tree$g (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$h (A_a_a_fun_a_a_fun_fun_fun$ A_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun map_tree$i (A_a_fun_a_a_a_fun_fun_fun$ A_a_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun set_tree$a (A_tree$ )A_set$ )
(declare-fun tree_pure$ (A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun odd_mirror$ (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_pure$a (A_a_a_fun_fun$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_pure$b (A_a_fun_a_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_pure$c (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$d (A$ )A_tree$ )
(declare-fun even_mirror$ ()A_tree_a_tree_fun$ )
(declare-fun odd_mirror$a (A_tree$ )A_tree$ )
(declare-fun even_mirror$a ()A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_fun$ )
(declare-fun even_mirror$b ()A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_fun$ )
(declare-fun even_mirror$c ()A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_fun$ )
(declare-fun even_mirror$d ()A_a_fun_tree_a_a_fun_tree_fun$ )
(declare-fun even_mirror$e (A_a_a_fun_fun_a_fun_tree$ )A_a_a_fun_fun_a_fun_tree$ )
(declare-fun even_mirror$f (A_a_fun_a_fun_a_fun_tree$ )A_a_fun_a_fun_a_fun_tree$ )
(declare-fun even_mirror$g (A_a_a_a_fun_fun_fun_tree$ )A_a_a_a_fun_fun_fun_tree$ )
(declare-fun even_mirror$h (A_a_a_fun_a_fun_fun_tree$ )A_a_a_fun_a_fun_fun_tree$ )
(declare-fun even_mirror$i (A_a_fun_a_a_fun_fun_a_fun_tree$ )A_a_fun_a_a_fun_fun_a_fun_tree$ )
(declare-fun even_mirror$j (A_a_a_fun_fun_a_a_fun_fun_tree$ )A_a_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun traverse_tree$ (Dir_list$ A_tree$ )A_tree$ )
(declare-fun traverse_tree$a (Dir_list$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun even_odd_mirror$ (Bool )A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_fun$ )
(declare-fun odd_mirror_path$ (Dir_list$ )Dir_list$ )
(declare-fun even_mirror_path$ (Dir_list$ )Dir_list$ )
(declare-fun even_odd_mirror$a (Bool )A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_fun$ )
(declare-fun even_odd_mirror$b (Bool )A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_fun$ )
(declare-fun even_odd_mirror$c (Bool )A_a_fun_tree_a_a_fun_tree_fun$ )
(declare-fun even_odd_mirror$d (Bool )A_tree_a_tree_fun$ )
(assert (! (not (= (root$ (traverse_tree$ path$ (fun_app$ even_mirror$ t$ )))(root$ (traverse_tree$ (even_mirror_path$ path$ )t$ )))):named a0 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$ ))(= (root$a (fun_app$a even_mirror$a ?v0 ))(root$a ?v0 ))):named a1 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ ))(= (root$b (fun_app$b even_mirror$b ?v0 ))(root$b ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$ ))(= (root$c (fun_app$c even_mirror$c ?v0 ))(root$c ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_a_fun_tree$ ))(= (root$d (fun_app$d even_mirror$d ?v0 ))(root$d ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_tree$ ))(= (root$ (fun_app$ even_mirror$ ?v0 ))(root$ ?v0 ))):named a5 ))
(assert (! (= even_mirror$a (even_odd_mirror$ true )):named a6 ))
(assert (! (= even_mirror$b (even_odd_mirror$a true )):named a7 ))
(assert (! (= even_mirror$c (even_odd_mirror$b true )):named a8 ))
(assert (! (= even_mirror$d (even_odd_mirror$c true )):named a9 ))
(assert (! (= even_mirror$ (even_odd_mirror$d true )):named a10 ))
(assert (! (forall ((?v0 A_a_fun_tree$ ))(= (root$d (odd_mirror$ ?v0 ))(root$d ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_tree$ ))(= (root$ (odd_mirror$a ?v0 ))(root$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_a_fun_tree$ ))(= (root$d (mirror$ ?v0 ))(root$d ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_tree$ ))(= (root$ (mirror$a ?v0 ))(root$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 Bool )(?v1 A_a_fun_tree$ ))(= (root$d (fun_app$d (even_odd_mirror$c ?v0 )?v1 ))(root$d ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Bool )(?v1 A_tree$ ))(= (root$ (fun_app$ (even_odd_mirror$d ?v0 )?v1 ))(root$ ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ ))(=> (member$ ?v0 (set_tree$ ?v1 ))(exists ((?v2 Dir_list$ ))(= ?v0 (root$d (traverse_tree$a ?v2 ?v1 )))))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$a ?v0 (set_tree$a ?v1 ))(exists ((?v2 Dir_list$ ))(= ?v0 (root$ (traverse_tree$ ?v2 ?v1 )))))):named a18 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(= (fun_app$a even_mirror$a (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a19 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(= (fun_app$b even_mirror$b (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a20 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(= (fun_app$c even_mirror$c (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a21 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (fun_app$d even_mirror$d (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a22 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$ even_mirror$ (tree_pure$d ?v0 ))(tree_pure$d ?v0 ))):named a23 ))
(assert (! (= (even_mirror_path$ nil$ )nil$ ):named a24 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (fun_app$ even_mirror$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (fun_app$d even_mirror$d ?v0 )(fun_app$ even_mirror$ ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(= (fun_app$ even_mirror$ (tree_ap$a ?v0 ?v1 ))(tree_ap$a (fun_app$c even_mirror$c ?v0 )(fun_app$d even_mirror$d ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (fun_app$d even_mirror$d (tree_ap$b ?v0 ?v1 ))(tree_ap$b (fun_app$b even_mirror$b ?v0 )(fun_app$ even_mirror$ ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$ )(?v1 A_a_fun_tree$ ))(= (fun_app$d even_mirror$d (tree_ap$c ?v0 ?v1 ))(tree_ap$c (fun_app$a even_mirror$a ?v0 )(fun_app$d even_mirror$d ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun_tree$ )(?v1 A_a_a_fun_fun_tree$ ))(= (fun_app$ even_mirror$ (tree_ap$d ?v0 ?v1 ))(tree_ap$d (even_mirror$e ?v0 )(fun_app$b even_mirror$b ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun_tree$ )(?v1 A_a_fun_a_fun_tree$ ))(= (fun_app$ even_mirror$ (tree_ap$e ?v0 ?v1 ))(tree_ap$e (even_mirror$f ?v0 )(fun_app$c even_mirror$c ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun_tree$ )(?v1 A_tree$ ))(= (fun_app$b even_mirror$b (tree_ap$f ?v0 ?v1 ))(tree_ap$f (even_mirror$g ?v0 )(fun_app$ even_mirror$ ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (fun_app$c even_mirror$c (tree_ap$g ?v0 ?v1 ))(tree_ap$g (even_mirror$h ?v0 )(fun_app$ even_mirror$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun_tree$ )(?v1 A_a_fun_a_a_fun_fun_tree$ ))(= (fun_app$ even_mirror$ (tree_ap$h ?v0 ?v1 ))(tree_ap$h (even_mirror$i ?v0 )(fun_app$a even_mirror$a ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun_tree$ )(?v1 A_a_a_fun_fun_tree$ ))(= (fun_app$d even_mirror$d (tree_ap$i ?v0 ?v1 ))(tree_ap$i (even_mirror$j ?v0 )(fun_app$b even_mirror$b ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (map_tree$ ?v0 (fun_app$ even_mirror$ ?v1 ))(fun_app$ even_mirror$ (map_tree$ ?v0 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_tree$ ))(= (map_tree$a ?v0 (fun_app$ even_mirror$ ?v1 ))(fun_app$d even_mirror$d (map_tree$a ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_tree$ ))(= (map_tree$b ?v0 (fun_app$d even_mirror$d ?v1 ))(fun_app$ even_mirror$ (map_tree$b ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (map_tree$c ?v0 (fun_app$d even_mirror$d ?v1 ))(fun_app$d even_mirror$d (map_tree$c ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$ )(?v1 A_tree$ ))(= (map_tree$d ?v0 (fun_app$ even_mirror$ ?v1 ))(fun_app$b even_mirror$b (map_tree$d ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$ )(?v1 A_tree$ ))(= (map_tree$e ?v0 (fun_app$ even_mirror$ ?v1 ))(fun_app$c even_mirror$c (map_tree$e ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$ )(?v1 A_a_a_fun_fun_tree$ ))(= (map_tree$f ?v0 (fun_app$b even_mirror$b ?v1 ))(fun_app$ even_mirror$ (map_tree$f ?v0 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$ )(?v1 A_a_fun_a_fun_tree$ ))(= (map_tree$g ?v0 (fun_app$c even_mirror$c ?v1 ))(fun_app$ even_mirror$ (map_tree$g ?v0 ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$ )(?v1 A_tree$ ))(= (map_tree$h ?v0 (fun_app$ even_mirror$ ?v1 ))(fun_app$a even_mirror$a (map_tree$h ?v0 ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_a_fun_a_a_a_fun_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (map_tree$i ?v0 (fun_app$d even_mirror$d ?v1 ))(fun_app$b even_mirror$b (map_tree$i ?v0 ?v1 )))):named a44 ))
(assert (! (forall ((?v0 Dir$ )(?v1 Dir_list$ ))(= (odd_mirror_path$ (cons$ ?v0 ?v1 ))(cons$ ?v0 (even_mirror_path$ ?v1 )))):named a45 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun$ ))(= (traverse_tree$a ?v0 (tree_pure$c ?v1 ))(tree_pure$c ?v1 ))):named a46 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A$ ))(= (traverse_tree$ ?v0 (tree_pure$d ?v1 ))(tree_pure$d ?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$b (tree_pure$a ?v0 )(tree_pure$d ?v1 ))(tree_pure$c (fun_app$e ?v0 ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$a (tree_pure$b ?v0 )(tree_pure$c ?v1 ))(tree_pure$d (fun_app$f ?v0 ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$c (tree_pure$ ?v0 )(tree_pure$c ?v1 ))(tree_pure$c (fun_app$g ?v0 ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$ (tree_pure$c ?v0 )(tree_pure$d ?v1 ))(tree_pure$d (fun_app$h ?v0 ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (map_tree$c ?v0 (tree_pure$c ?v1 ))(tree_pure$c (fun_app$g ?v0 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (map_tree$b ?v0 (tree_pure$c ?v1 ))(tree_pure$d (fun_app$f ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (map_tree$a ?v0 (tree_pure$d ?v1 ))(tree_pure$c (fun_app$e ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$d ?v1 ))(tree_pure$d (fun_app$h ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (root$d (map_tree$c ?v0 ?v1 ))(fun_app$g ?v0 (root$d ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_tree$ ))(= (root$ (map_tree$b ?v0 ?v1 ))(fun_app$f ?v0 (root$d ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_tree$ ))(= (root$d (map_tree$a ?v0 ?v1 ))(fun_app$e ?v0 (root$ ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$h ?v0 (root$ ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (root$d (map_tree$c ?v0 ?v1 ))(fun_app$g ?v0 (root$d ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_tree$ ))(= (root$ (map_tree$b ?v0 ?v1 ))(fun_app$f ?v0 (root$d ?v1 )))):named a61 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_tree$ ))(= (root$d (map_tree$a ?v0 ?v1 ))(fun_app$e ?v0 (root$ ?v1 )))):named a62 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$h ?v0 (root$ ?v1 )))):named a63 ))
(check-sat )
;(get-unsat-core )
