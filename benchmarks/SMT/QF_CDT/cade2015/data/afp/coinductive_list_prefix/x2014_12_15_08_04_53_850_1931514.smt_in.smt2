;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun inf$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun zsa$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(assert (! (not (and (=> (lnull$ (inf$ ysa$ zsa$ ))(lnull$ xsa$ ))(=> (and (not (lnull$ xsa$ ))(not (lnull$ (inf$ ysa$ zsa$ ))))(and (= (lhd$ xsa$ )(lhd$ (inf$ ysa$ zsa$ )))(or (exists ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(and (= (ltl$ xsa$ )?v0 )(and (= (ltl$ (inf$ ysa$ zsa$ ))(inf$ ?v1 ?v2 ))(and (lprefix$ ?v0 ?v1 )(lprefix$ ?v0 ?v2 )))))(lprefix$ (ltl$ xsa$ )(ltl$ (inf$ ysa$ zsa$ )))))))):named a0 ))
(assert (! (lprefix$ xsa$ ysa$ ):named a1 ))
(assert (! (lprefix$ xsa$ zsa$ ):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (=> (not (lnull$ ?v0 ))(and (not (lnull$ ?v1 ))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(lprefix$ (ltl$ ?v0 )(ltl$ ?v1 )))))(lprefix$ ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (=> (lnull$ ?v4 )(lnull$ ?v3 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(or (fun_app$ (fun_app$a ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))(lprefix$ (ltl$ ?v3 )(ltl$ ?v4 )))))))))(lprefix$ ?v1 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(or (fun_app$ (fun_app$a ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))(= (ltl$ ?v3 )(ltl$ ?v4 )))))))))(= ?v1 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(fun_app$ (fun_app$a ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))))))))(= ?v1 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(not (lnull$ ?v0 )))(= (lhd$ ?v0 )(lhd$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a10 ))
(check-sat )
;(get-unsat-core )
