;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Ref$ 0 )
(declare-sort Ref_set$ 0 )
(declare-sort Ref_ref_fun$ 0 )
(declare-sort Dag_bool_fun$ 0 )
(declare-sort Ref_ref_ref_fun_fun$ 0 )
(declare-sort Ref_ref_ref_ref_fun_fun_fun$ 0 )
(declare-sort Ref_ref_fun_dag_bool_fun_fun$ 0 )
(declare-sort Ref_ref_fun_ref_ref_fun_dag_bool_fun_fun_fun$ 0 )
(declare-datatypes ()((Dag$ (tip$ )(node$ (select$ Dag$ )(selecta$ Ref$ )(selectb$ Dag$ )))))
(declare-fun l$ ()Ref_ref_fun$ )
(declare-fun p$ ()Ref$ )
(declare-fun r$ ()Ref_ref_fun$ )
(declare-fun t$ ()Dag$ )
(declare-fun l$a ()Ref_ref_fun$ )
(declare-fun p$a ()Ref$ )
(declare-fun r$a ()Ref_ref_fun$ )
(declare-fun dag$ (Ref$ )Ref_ref_fun_ref_ref_fun_dag_bool_fun_fun_fun$ )
(declare-fun dag$a (Dag$ )Bool )
(declare-fun null$ ()Ref$ )
(declare-fun member$ (Ref$ Ref_set$ )Bool )
(declare-fun set_of$ (Dag$ )Ref_set$ )
(declare-fun subdag$ (Dag$ )Dag_bool_fun$ )
(declare-fun fun_app$ (Ref_ref_fun$ Ref$ )Ref$ )
(declare-fun fun_upd$ (Ref_ref_fun$ )Ref_ref_ref_ref_fun_fun_fun$ )
(declare-fun fun_app$a (Dag_bool_fun$ Dag$ )Bool )
(declare-fun fun_app$b (Ref_ref_fun_dag_bool_fun_fun$ Ref_ref_fun$ )Dag_bool_fun$ )
(declare-fun fun_app$c (Ref_ref_fun_ref_ref_fun_dag_bool_fun_fun_fun$ Ref_ref_fun$ )Ref_ref_fun_dag_bool_fun_fun$ )
(declare-fun fun_app$d (Ref_ref_ref_fun_fun$ Ref$ )Ref_ref_fun$ )
(declare-fun fun_app$e (Ref_ref_ref_ref_fun_fun_fun$ Ref$ )Ref_ref_ref_fun_fun$ )
(assert (! (not (and (= p$ p$a )(forall ((?v0 Ref$ ))(=> (member$ ?v0 (set_of$ t$ ))(and (= (fun_app$ l$ ?v0 )(fun_app$ l$a ?v0 ))(= (fun_app$ r$ ?v0 )(fun_app$ r$a ?v0 ))))))):named a0 ))
(assert (! (fun_app$a (fun_app$b (fun_app$c (dag$ p$a )l$a )r$a )t$ ):named a1 ))
(assert (! (fun_app$a (fun_app$b (fun_app$c (dag$ p$ )l$ )r$ )t$ ):named a2 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag_bool_fun$ ))(=> (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v3 )(= (exists ((?v5 Dag$ ))(and (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v5 )(fun_app$a ?v4 ?v5 )))(fun_app$a ?v4 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag_bool_fun$ ))(=> (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v3 )(= (forall ((?v5 Dag$ ))(=> (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v5 )(fun_app$a ?v4 ?v5 )))(fun_app$a ?v4 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (fun_app$a (fun_app$b (fun_app$c (dag$ (fun_app$ ?v0 ?v1 ))?v2 )?v0 )?v3 )(not (member$ ?v1 (set_of$ ?v3 ))))):named a5 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (fun_app$a (fun_app$b (fun_app$c (dag$ (fun_app$ ?v0 ?v1 ))?v0 )?v2 )?v3 )(not (member$ ?v1 (set_of$ ?v3 ))))):named a6 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v3 )(fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v4 ))(= ?v3 ?v4 ))):named a7 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Ref_ref_fun$ )(?v5 Ref_ref_fun$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v3 )(forall ((?v6 Ref$ ))(=> (member$ ?v6 (set_of$ ?v3 ))(and (= (fun_app$ ?v4 ?v6 )(fun_app$ ?v1 ?v6 ))(= (fun_app$ ?v5 ?v6 )(fun_app$ ?v2 ?v6 ))))))(fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v4 )?v5 )?v3 ))):named a8 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Ref_ref_fun$ )(?v5 Ref_ref_fun$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v3 )(forall ((?v6 Ref$ ))(=> (member$ ?v6 (set_of$ ?v3 ))(and (= (fun_app$ ?v1 ?v6 )(fun_app$ ?v4 ?v6 ))(= (fun_app$ ?v2 ?v6 )(fun_app$ ?v5 ?v6 ))))))(fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v4 )?v5 )?v3 ))):named a9 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v3 )(exists ((?v4 Dag$ ))(and (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v4 )(forall ((?v5 Dag$ ))(=> (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v5 )(= ?v5 ?v4 ))))))):named a10 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Ref_ref_fun$ )(?v4 Ref_ref_fun$ )(?v5 Ref$ ))(=> (forall ((?v6 Ref$ ))(=> (member$ ?v6 (set_of$ ?v0 ))(and (= (fun_app$ ?v1 ?v6 )(fun_app$ ?v2 ?v6 ))(= (fun_app$ ?v3 ?v6 )(fun_app$ ?v4 ?v6 )))))(= (fun_app$a (fun_app$b (fun_app$c (dag$ ?v5 )?v1 )?v3 )?v0 )(fun_app$a (fun_app$b (fun_app$c (dag$ ?v5 )?v2 )?v4 )?v0 )))):named a11 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v3 )(not (member$ null$ (set_of$ ?v3 ))))):named a12 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Ref$ )(?v5 Ref$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v3 )(not (member$ ?v4 (set_of$ ?v3 ))))(fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )(fun_app$d (fun_app$e (fun_upd$ ?v1 )?v4 )?v5 ))?v2 )?v3 ))):named a13 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Ref$ )(?v5 Ref$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v3 )(not (member$ ?v4 (set_of$ ?v3 ))))(fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )(fun_app$d (fun_app$e (fun_upd$ ?v2 )?v4 )?v5 ))?v3 ))):named a14 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Dag$ )(?v2 Ref$ )(?v3 Ref_ref_fun$ )(?v4 Ref$ )(?v5 Ref_ref_fun$ ))(=> (not (member$ ?v0 (set_of$ ?v1 )))(= (fun_app$a (fun_app$b (fun_app$c (dag$ ?v2 )(fun_app$d (fun_app$e (fun_upd$ ?v3 )?v0 )?v4 ))?v5 )?v1 )(fun_app$a (fun_app$b (fun_app$c (dag$ ?v2 )?v3 )?v5 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Dag$ )(?v2 Ref$ )(?v3 Ref_ref_fun$ )(?v4 Ref_ref_fun$ )(?v5 Ref$ ))(=> (not (member$ ?v0 (set_of$ ?v1 )))(= (fun_app$a (fun_app$b (fun_app$c (dag$ ?v2 )?v3 )(fun_app$d (fun_app$e (fun_upd$ ?v4 )?v0 )?v5 ))?v1 )(fun_app$a (fun_app$b (fun_app$c (dag$ ?v2 )?v3 )?v4 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v3 )(dag$a ?v3 ))):named a17 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c (dag$ ?v0 )?v1 )?v2 )?v3 )(fun_app$a (subdag$ ?v3 )?v4 ))(exists ((?v5 Ref$ ))(fun_app$a (fun_app$b (fun_app$c (dag$ ?v5 )?v1 )?v2 )?v4 )))):named a18 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref_ref_fun$ )(?v2 Dag$ ))(= (fun_app$a (fun_app$b (fun_app$c (dag$ null$ )?v0 )?v1 )?v2 )(= ?v2 tip$ ))):named a19 ))
(check-sat )
;(get-unsat-core )
