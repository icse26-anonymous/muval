;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Ref$ 0 )
(declare-sort Ref_set$ 0 )
(declare-sort Ref_ref_fun$ 0 )
(declare-sort Dag_bool_fun$ 0 )
(declare-sort Ref_ref_fun_dag_bool_fun_fun$ 0 )
(declare-sort Ref_ref_fun_ref_ref_fun_dag_bool_fun_fun_fun$ 0 )
(declare-datatypes ()((Dag$ (tip$ )(node$ (select$ Dag$ )(selecta$ Ref$ )(selectb$ Dag$ )))))
(declare-fun l$ ()Ref_ref_fun$ )
(declare-fun p$ ()Ref$ )
(declare-fun r$ ()Ref_ref_fun$ )
(declare-fun t$ ()Dag$ )
(declare-fun dag$ (Ref$ )Ref_ref_fun_ref_ref_fun_dag_bool_fun_fun_fun$ )
(declare-fun the$ (Dag_bool_fun$ )Dag$ )
(declare-fun dag$a (Ref$ Ref_ref_fun$ Ref_ref_fun$ )Dag$ )
(declare-fun dag$b (Dag$ )Bool )
(declare-fun null$ ()Ref$ )
(declare-fun isDag$ (Ref$ Ref_ref_fun$ Ref_ref_fun$ )Bool )
(declare-fun member$ (Ref$ Ref_set$ )Bool )
(declare-fun set_of$ (Dag$ )Ref_set$ )
(declare-fun subdag$ (Dag$ )Dag_bool_fun$ )
(declare-fun fun_app$ (Dag_bool_fun$ Dag$ )Bool )
(declare-fun fun_app$a (Ref_ref_fun_dag_bool_fun_fun$ Ref_ref_fun$ )Dag_bool_fun$ )
(declare-fun fun_app$b (Ref_ref_fun_ref_ref_fun_dag_bool_fun_fun_fun$ Ref_ref_fun$ )Ref_ref_fun_dag_bool_fun_fun$ )
(declare-fun fun_app$c (Ref_ref_fun$ Ref$ )Ref$ )
(assert (! (not (= (fun_app$ (fun_app$a (fun_app$b (dag$ p$ )l$ )r$ )t$ )(and (isDag$ p$ l$ r$ )(= t$ (dag$a p$ l$ r$ ))))):named a0 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag_bool_fun$ ))(=> (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v3 )(= (exists ((?v5 Dag$ ))(and (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v5 )(fun_app$ ?v4 ?v5 )))(fun_app$ ?v4 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag_bool_fun$ ))(=> (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v3 )(= (forall ((?v5 Dag$ ))(=> (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v5 )(fun_app$ ?v4 ?v5 )))(fun_app$ ?v4 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ ))(! (= (isDag$ ?v0 ?v1 ?v2 )(exists ((?v3 Dag$ ))(fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v3 ))):pattern ((isDag$ ?v0 ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag$ ))(=> (and (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v4 ))(= ?v3 ?v4 ))):named a4 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v3 )(exists ((?v4 Dag$ ))(and (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v4 )(forall ((?v5 Dag$ ))(=> (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v5 )(= ?v5 ?v4 ))))))):named a5 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v3 )(dag$b ?v3 ))):named a6 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (fun_app$ (fun_app$a (fun_app$b (dag$ (fun_app$c ?v0 ?v1 ))?v2 )?v0 )?v3 )(not (member$ ?v1 (set_of$ ?v3 ))))):named a7 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (fun_app$ (fun_app$a (fun_app$b (dag$ (fun_app$c ?v0 ?v1 ))?v0 )?v2 )?v3 )(not (member$ ?v1 (set_of$ ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag$ ))(=> (and (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (subdag$ ?v3 )?v4 ))(exists ((?v5 Ref$ ))(fun_app$ (fun_app$a (fun_app$b (dag$ ?v5 )?v1 )?v2 )?v4 )))):named a9 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Ref$ )(?v5 Ref_ref_fun$ )(?v6 Ref_ref_fun$ ))(=> (and (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$a (fun_app$b (dag$ ?v4 )?v5 )?v6 )?v3 ))(and (= ?v4 ?v0 )(forall ((?v7 Ref$ ))(=> (member$ ?v7 (set_of$ ?v3 ))(and (= (fun_app$c ?v5 ?v7 )(fun_app$c ?v1 ?v7 ))(= (fun_app$c ?v6 ?v7 )(fun_app$c ?v2 ?v7 )))))))):named a10 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Ref_ref_fun$ )(?v5 Ref_ref_fun$ ))(=> (and (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v3 )(forall ((?v6 Ref$ ))(=> (member$ ?v6 (set_of$ ?v3 ))(and (= (fun_app$c ?v4 ?v6 )(fun_app$c ?v1 ?v6 ))(= (fun_app$c ?v5 ?v6 )(fun_app$c ?v2 ?v6 ))))))(fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v4 )?v5 )?v3 ))):named a11 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Ref_ref_fun$ )(?v5 Ref_ref_fun$ ))(=> (and (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v3 )(forall ((?v6 Ref$ ))(=> (member$ ?v6 (set_of$ ?v3 ))(and (= (fun_app$c ?v1 ?v6 )(fun_app$c ?v4 ?v6 ))(= (fun_app$c ?v2 ?v6 )(fun_app$c ?v5 ?v6 ))))))(fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v4 )?v5 )?v3 ))):named a12 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Ref_ref_fun$ )(?v4 Ref_ref_fun$ )(?v5 Ref$ ))(=> (forall ((?v6 Ref$ ))(=> (member$ ?v6 (set_of$ ?v0 ))(and (= (fun_app$c ?v1 ?v6 )(fun_app$c ?v2 ?v6 ))(= (fun_app$c ?v3 ?v6 )(fun_app$c ?v4 ?v6 )))))(= (fun_app$ (fun_app$a (fun_app$b (dag$ ?v5 )?v1 )?v3 )?v0 )(fun_app$ (fun_app$a (fun_app$b (dag$ ?v5 )?v2 )?v4 )?v0 )))):named a13 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref_ref_fun$ )(?v2 Dag$ ))(= (fun_app$ (fun_app$a (fun_app$b (dag$ null$ )?v0 )?v1 )?v2 )(= ?v2 tip$ ))):named a14 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ ))(! (= (dag$a ?v0 ?v1 ?v2 )(the$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 ))):pattern ((dag$a ?v0 ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (not (= ?v0 null$ ))(= (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )?v3 )(exists ((?v4 Dag$ )(?v5 Dag$ ))(and (= ?v3 (node$ ?v4 ?v0 ?v5 ))(and (fun_app$ (fun_app$a (fun_app$b (dag$ (fun_app$c ?v1 ?v0 ))?v1 )?v2 )?v4 )(fun_app$ (fun_app$a (fun_app$b (dag$ (fun_app$c ?v2 ?v0 ))?v1 )?v2 )?v5 ))))))):named a16 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ ))(! (= (fun_app$ (fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )tip$ )(= ?v0 null$ )):pattern ((fun_app$a (fun_app$b (dag$ ?v0 )?v1 )?v2 )))):named a17 ))
(check-sat )
;(get-unsat-core )
