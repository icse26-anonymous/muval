;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Ref$ 0 )
(declare-sort Dag_dag_fun$ 0 )
(declare-datatypes ()((Dag$ (tip$ )(node$ (select$ Dag$ )(selecta$ Ref$ )(selectb$ Dag$ )))))
(declare-fun a$ ()Ref$ )
(declare-fun l$ ()Dag$ )
(declare-fun r$ ()Dag$ )
(declare-fun x$ ()Dag$ )
(declare-fun less$ (Dag$ Dag$ )Bool )
(declare-fun fun_app$ (Dag_dag_fun$ Dag$ )Dag$ )
(assert (! (not (= (less$ x$ (node$ l$ a$ r$ ))(or (= x$ l$ )(or (= x$ r$ )(or (less$ x$ l$ )(less$ x$ r$ )))))):named a0 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ )(?v3 Dag$ )(?v4 Ref$ )(?v5 Dag$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a1 ))
(assert (! (forall ((?v0 Dag$ ))(not (less$ ?v0 tip$ ))):named a2 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag_dag_fun$ )(?v2 Dag$ )(?v3 Dag$ ))(=> (and (= ?v0 (fun_app$ ?v1 ?v2 ))(and (less$ ?v2 ?v3 )(forall ((?v4 Dag$ )(?v5 Dag$ ))(=> (less$ ?v4 ?v5 )(less$ (fun_app$ ?v1 ?v4 )(fun_app$ ?v1 ?v5 ))))))(less$ ?v0 (fun_app$ ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ )(?v2 Dag$ ))(=> (and (= ?v0 ?v1 )(less$ ?v1 ?v2 ))(less$ ?v0 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ ))(=> (and (less$ ?v0 ?v1 )(=> (not false )(less$ ?v1 ?v0 )))false )):named a5 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ )(?v2 Dag_dag_fun$ )(?v3 Dag$ ))(=> (and (less$ ?v0 ?v1 )(and (= (fun_app$ ?v2 ?v1 )?v3 )(forall ((?v4 Dag$ )(?v5 Dag$ ))(=> (less$ ?v4 ?v5 )(less$ (fun_app$ ?v2 ?v4 )(fun_app$ ?v2 ?v5 ))))))(less$ (fun_app$ ?v2 ?v0 )?v3 ))):named a6 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ ))(not (= tip$ (node$ ?v0 ?v1 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Dag$ ))(=> (and (=> (= ?v0 tip$ )false )(forall ((?v1 Dag$ )(?v2 Ref$ )(?v3 Dag$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false )))false )):named a8 ))
(check-sat )
;(get-unsat-core )
