;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Ref$ 0 )
(declare-sort Ref_set$ 0 )
(declare-datatypes ()((Dag$ (tip$ )(node$ (select$ Dag$ )(selecta$ Ref$ )(selectb$ Dag$ )))))
(declare-fun a$ ()Ref$ )
(declare-fun l$ ()Dag$ )
(declare-fun r$ ()Dag$ )
(declare-fun x$ ()Dag$ )
(declare-fun y$ ()Dag$ )
(declare-fun dag$ (Dag$ )Bool )
(declare-fun less$ (Ref_set$ Ref_set$ )Bool )
(declare-fun less$a (Dag$ Dag$ )Bool )
(declare-fun member$ (Ref$ Ref_set$ )Bool )
(declare-fun set_of$ (Dag$ )Ref_set$ )
(assert (! (not (less$ (set_of$ x$ )(set_of$ y$ ))):named a0 ))
(assert (! (or (= x$ l$ )(or (= x$ r$ )(or (less$a x$ l$ )(less$a x$ r$ )))):named a1 ))
(assert (! (less$a l$ y$ ):named a2 ))
(assert (! (less$a r$ y$ ):named a3 ))
(assert (! (dag$ y$ ):named a4 ))
(assert (! (not (member$ a$ (set_of$ l$ ))):named a5 ))
(assert (! (not (member$ a$ (set_of$ r$ ))):named a6 ))
(assert (! (less$a x$ y$ ):named a7 ))
(assert (! (less$ (set_of$ l$ )(set_of$ y$ )):named a8 ))
(assert (! (less$ (set_of$ r$ )(set_of$ y$ )):named a9 ))
(assert (! (=> (=> (and (less$ (set_of$ l$ )(set_of$ y$ ))(less$ (set_of$ r$ )(set_of$ y$ )))false )false ):named a10 ))
(assert (! (=> (=> (and (less$a l$ y$ )(less$a r$ y$ ))false )false ):named a11 ))
(assert (! (= y$ (node$ l$ a$ r$ )):named a12 ))
(assert (! (=> (=> (and (not (member$ a$ (set_of$ l$ )))(not (member$ a$ (set_of$ r$ ))))false )false ):named a13 ))
(assert (! (forall ((?v0 Ref_set$ )(?v1 Ref_set$ )(?v2 Ref$ ))(=> (and (less$ ?v0 ?v1 )(member$ ?v2 ?v0 ))(member$ ?v2 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Ref_set$ )(?v1 Ref_set$ )(?v2 Ref_set$ ))(=> (and (less$ ?v0 ?v1 )(less$ ?v1 ?v2 ))(less$ ?v0 ?v2 ))):named a15 ))
(check-sat )
;(get-unsat-core )
