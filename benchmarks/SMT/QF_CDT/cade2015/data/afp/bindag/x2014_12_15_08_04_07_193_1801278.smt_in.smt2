;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Ref$ 0 )
(declare-sort Ref_set$ 0 )
(declare-sort Ref_bool_fun$ 0 )
(declare-datatypes ()((Dag$ (tip$ )(node$ (select$ Dag$ )(selecta$ Ref$ )(selectb$ Dag$ )))))
(declare-fun x$ ()Dag$ )
(declare-fun y$ ()Dag$ )
(declare-fun less$ (Dag$ Dag$ )Bool )
(declare-fun member$ (Ref$ Ref_set$ )Bool )
(declare-fun set_of$ (Dag$ )Ref_set$ )
(declare-fun collect$ (Ref_bool_fun$ )Ref_set$ )
(declare-fun fun_app$ (Ref_bool_fun$ Ref$ )Bool )
(declare-fun less_eq$ (Ref_set$ Ref_set$ )Bool )
(declare-fun less_eq$a (Dag$ Dag$ )Bool )
(assert (! (not (less_eq$ (set_of$ x$ )(set_of$ y$ ))):named a0 ))
(assert (! (less_eq$a x$ y$ ):named a1 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ ))(=> (and (less_eq$a ?v0 ?v1 )(less_eq$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ )(?v2 Dag$ ))(=> (and (less_eq$a ?v0 ?v1 )(less_eq$a ?v1 ?v2 ))(less_eq$a ?v0 ?v2 ))):named a3 ))
(assert (! (forall ((?v0 Dag$ ))(less_eq$a ?v0 ?v0 )):named a4 ))
(assert (! (forall ((?v0 Ref_set$ )(?v1 Ref_set$ ))(=> (forall ((?v2 Ref$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Ref_set$ )(?v1 Ref_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Ref_set$ ))(less_eq$ ?v0 ?v0 )):named a7 ))
(assert (! (forall ((?v0 Dag$ ))(less_eq$a ?v0 ?v0 )):named a8 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ ))(=> (less$ ?v0 ?v1 )(less_eq$ (set_of$ ?v0 )(set_of$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Ref_set$ )(?v1 Ref_set$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Ref_set$ )(?v1 Ref_set$ ))(= (less_eq$ ?v0 ?v1 )(forall ((?v2 Ref$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 Ref_set$ )(?v1 Ref_set$ ))(= (less_eq$ ?v0 ?v1 )(forall ((?v2 Ref$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 Ref_bool_fun$ )(?v1 Ref_bool_fun$ ))(=> (forall ((?v2 Ref$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(less_eq$ (collect$ ?v0 )(collect$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Ref_set$ )(?v1 Ref_set$ ))(=> (and (= ?v0 ?v1 )(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))false ))false )):named a14 ))
(assert (! (forall ((?v0 Ref_set$ )(?v1 Ref_set$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))):named a15 ))
(assert (! (forall ((?v0 Ref_set$ )(?v1 Ref_set$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_set$ )(?v2 Ref_set$ ))(=> (and (member$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(member$ ?v0 ?v2 ))):named a17 ))
(check-sat )
;(get-unsat-core )
