;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_b_tllist_b_fun$ 0 )
(declare-sort A_c_tllist_c_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort B_a_c_tllist_fun$ 0 )
(declare-sort C_a_b_tllist_fun$ 0 )
(declare-sort C_a_c_tllist_fun$ 0 )
(declare-sort B_a_b_tllist_fun_a_b_tllist_fun$ 0 )
(declare-sort C_a_c_tllist_fun_a_c_tllist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_b_tllist$ 0)
(declare-sort A_c_tllist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun terminal$a (A_c_tllist$)C$)
(declare-fun tNil$a (C$ )A_c_tllist$)
(declare-fun thd$a (A_c_tllist$)A$)
(declare-fun ttl$a (A_c_tllist$)A_c_tllist$)
(declare-fun tCons$a (A$ A_c_tllist$ )A_c_tllist$)
(declare-fun f$ ()C_a_b_tllist_fun$ )
(declare-fun uu$ ()A_b_tllist_b_fun$ )
(declare-fun xs$ ()A_c_tllist$ )
(declare-fun uua$ ()A_c_tllist_c_fun$ )
(declare-fun uub$ ()B_a_b_tllist_fun$ )
(declare-fun uuc$ ()C_a_c_tllist_fun$ )
(declare-fun tcast$ (A_b_tllist$ )A_c_tllist$ )
(declare-fun tcast$a (A_b_tllist$ )A_b_tllist$ )
(declare-fun tcast$b (A_c_tllist$ )A_c_tllist$ )
(declare-fun tcast$c (A_c_tllist$ )A_b_tllist$ )
(declare-fun fun_app$ (A_c_tllist_c_fun$ A_c_tllist$ )C$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun tappend$ (A_c_tllist$ C_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun fun_app$a (A_b_tllist_b_fun$ A_b_tllist$ )B$ )
(declare-fun fun_app$b (C_a_c_tllist_fun$ C$ )A_c_tllist$ )
(declare-fun fun_app$c (B_a_b_tllist_fun$ B$ )A_b_tllist$ )
(declare-fun fun_app$d (C_a_b_tllist_fun$ C$ )A_b_tllist$ )
(declare-fun fun_app$e (B_a_b_tllist_fun_a_b_tllist_fun$ B_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun fun_app$f (B_a_c_tllist_fun$ B$ )A_c_tllist$ )
(declare-fun fun_app$g (C_a_c_tllist_fun_a_c_tllist_fun$ C_a_c_tllist_fun$ )A_c_tllist$ )
(declare-fun tappend$a (A_b_tllist$ )B_a_b_tllist_fun_a_b_tllist_fun$ )
(declare-fun tappend$b (A_b_tllist$ B_a_c_tllist_fun$ )A_c_tllist$ )
(declare-fun tappend$c (A_c_tllist$ )C_a_c_tllist_fun_a_c_tllist_fun$ )
(declare-fun terminal0$ ()A_b_tllist_b_fun$ )
(declare-fun terminal0$a ()A_c_tllist_c_fun$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(declare-fun llist_of_tllist$a (A_c_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$a (C$ A_llist$ )A_c_tllist$ )
(assert (! (forall ((?v0 A_c_tllist$ ))(! (= (fun_app$ uua$ ?v0 )(terminal$a ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$a uu$ ?v0 )(terminal$ ?v0 )):pattern ((fun_app$a uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 C$ ))(! (= (fun_app$b uuc$ ?v0 )(tNil$a ?v0 )):pattern ((fun_app$b uuc$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$c uub$ ?v0 )(tNil$ ?v0 )):pattern ((fun_app$c uub$ ?v0 )))):named a3 ))
(assert (! (not (= (llist_of_tllist$ (tappend$ xs$ f$ ))(lappend$ (llist_of_tllist$a xs$ )(llist_of_tllist$ (fun_app$d f$ (terminal$a xs$ )))))):named a4 ))
(assert (! (= terminal0$ uu$ ):named a5 ))
(assert (! (= terminal0$a uua$ ):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B_a_b_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$ (fun_app$e (tappend$a ?v0 )?v1 )))(and (lfinite$ (llist_of_tllist$ ?v0 ))(lfinite$ (llist_of_tllist$ (fun_app$c ?v1 (terminal$ ?v0 ))))))):named a8 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B_a_c_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$a (tappend$b ?v0 ?v1 )))(and (lfinite$ (llist_of_tllist$ ?v0 ))(lfinite$ (llist_of_tllist$a (fun_app$f ?v1 (terminal$ ?v0 ))))))):named a9 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_b_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$ (tappend$ ?v0 ?v1 )))(and (lfinite$ (llist_of_tllist$a ?v0 ))(lfinite$ (llist_of_tllist$ (fun_app$d ?v1 (terminal$a ?v0 ))))))):named a10 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_c_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$a (fun_app$g (tappend$c ?v0 )?v1 )))(and (lfinite$ (llist_of_tllist$a ?v0 ))(lfinite$ (llist_of_tllist$a (fun_app$b ?v1 (terminal$a ?v0 ))))))):named a11 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B_a_b_tllist_fun$ ))(= (terminal$ (fun_app$e (tappend$a ?v0 )?v1 ))(ite (lfinite$ (llist_of_tllist$ ?v0 ))(terminal$ (fun_app$c ?v1 (terminal$ ?v0 )))(terminal$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_c_tllist_fun$ ))(= (terminal$a (fun_app$g (tappend$c ?v0 )?v1 ))(ite (lfinite$ (llist_of_tllist$a ?v0 ))(terminal$a (fun_app$b ?v1 (terminal$a ?v0 )))(terminal$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (tllist_of_llist$ (terminal$ ?v0 )(llist_of_tllist$ ?v0 ))?v0 )):named a14 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(= (tllist_of_llist$a (terminal$a ?v0 )(llist_of_tllist$a ?v0 ))?v0 )):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_tllist$ )(?v2 C_a_c_tllist_fun$ ))(! (= (fun_app$g (tappend$c (tCons$a ?v0 ?v1 ))?v2 )(tCons$a ?v0 (fun_app$g (tappend$c ?v1 )?v2 ))):pattern ((fun_app$g (tappend$c (tCons$a ?v0 ?v1 ))?v2 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 B_a_c_tllist_fun$ ))(! (= (tappend$b (tCons$ ?v0 ?v1 )?v2 )(tCons$a ?v0 (tappend$b ?v1 ?v2 ))):pattern ((tappend$b (tCons$ ?v0 ?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 B_a_b_tllist_fun$ ))(! (= (fun_app$e (tappend$a (tCons$ ?v0 ?v1 ))?v2 )(tCons$ ?v0 (fun_app$e (tappend$a ?v1 )?v2 ))):pattern ((fun_app$e (tappend$a (tCons$ ?v0 ?v1 ))?v2 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_tllist$ )(?v2 C_a_b_tllist_fun$ ))(! (= (tappend$ (tCons$a ?v0 ?v1 )?v2 )(tCons$ ?v0 (tappend$ ?v1 ?v2 ))):pattern ((tappend$ (tCons$a ?v0 ?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_c_tllist_fun$ ))(! (= (tappend$b (tNil$ ?v0 )?v1 )(fun_app$f ?v1 ?v0 )):pattern ((tappend$b (tNil$ ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_b_tllist_fun$ ))(! (= (fun_app$e (tappend$a (tNil$ ?v0 ))?v1 )(fun_app$c ?v1 ?v0 )):pattern ((fun_app$e (tappend$a (tNil$ ?v0 ))?v1 )))):named a21 ))
(assert (! (forall ((?v0 C$ )(?v1 C_a_c_tllist_fun$ ))(! (= (fun_app$g (tappend$c (tNil$a ?v0 ))?v1 )(fun_app$b ?v1 ?v0 )):pattern ((fun_app$g (tappend$c (tNil$a ?v0 ))?v1 )))):named a22 ))
(assert (! (forall ((?v0 C$ )(?v1 C_a_b_tllist_fun$ ))(! (= (tappend$ (tNil$a ?v0 )?v1 )(fun_app$d ?v1 ?v0 )):pattern ((tappend$ (tNil$a ?v0 )?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$e (tappend$a ?v0 )uub$ )?v0 ):pattern ((tappend$a ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(! (= (fun_app$g (tappend$c ?v0 )uuc$ )?v0 ):pattern ((tappend$c ?v0 )))):named a25 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B_a_c_tllist_fun$ ))(! (=> (not (lfinite$ (llist_of_tllist$ ?v0 )))(= (tappend$b ?v0 ?v1 )(tcast$ ?v0 ))):pattern ((tappend$b ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B_a_b_tllist_fun$ ))(! (=> (not (lfinite$ (llist_of_tllist$ ?v0 )))(= (fun_app$e (tappend$a ?v0 )?v1 )(tcast$a ?v0 ))):pattern ((fun_app$e (tappend$a ?v0 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_c_tllist_fun$ ))(! (=> (not (lfinite$ (llist_of_tllist$a ?v0 )))(= (fun_app$g (tappend$c ?v0 )?v1 )(tcast$b ?v0 ))):pattern ((fun_app$g (tappend$c ?v0 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_b_tllist_fun$ ))(! (=> (not (lfinite$ (llist_of_tllist$a ?v0 )))(= (tappend$ ?v0 ?v1 )(tcast$c ?v0 ))):pattern ((tappend$ ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (terminal$ (ttl$ ?v0 ))(terminal$ ?v0 ))):named a30 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(= (terminal$a (ttl$a ?v0 ))(terminal$a ?v0 ))):named a31 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(= (= (tNil$a ?v0 )(tNil$a ?v1 ))(= ?v0 ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_tllist$ )(?v2 A$ )(?v3 A_c_tllist$ ))(= (= (tCons$a ?v0 ?v1 )(tCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a36 ))
(assert (! (forall ((?v0 C$ )(?v1 A_llist$ )(?v2 C$ )(?v3 A_llist$ ))(= (= (tllist_of_llist$a ?v0 ?v1 )(tllist_of_llist$a ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a37 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ )(?v2 B$ )(?v3 A_llist$ ))(= (= (tllist_of_llist$ ?v0 ?v1 )(tllist_of_llist$ ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a38 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_tllist$ ))(! (= (terminal$a (tCons$a ?v0 ?v1 ))(terminal$a ?v1 )):pattern ((tCons$a ?v0 ?v1 )))):named a40 ))
(check-sat )
;(get-unsat-core )
