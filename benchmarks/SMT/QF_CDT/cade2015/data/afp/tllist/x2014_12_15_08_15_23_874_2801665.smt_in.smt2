;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Unit_b_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort B_a_b_tllist_fun_a_b_tllist_fun$ 0 )
(declare-sort A_b_tllist$ 0)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()B_a_b_tllist_fun$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun tnth$ (A_b_tllist$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun tdropn$ (Nat$ A_b_tllist$ )A_b_tllist$ )
(declare-fun fun_app$ (B_a_b_tllist_fun$ B$ )A_b_tllist$ )
(declare-fun tappend$ (A_b_tllist$ )B_a_b_tllist_fun_a_b_tllist_fun$ )
(declare-fun tfilter$ (Unit_b_fun$ A_bool_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (B_a_b_tllist_fun_a_b_tllist_fun$ B_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun tfilter$a (B$ A_bool_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$ )Bool )
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ uu$ ?v0 )(tNil$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (tdropn$ (suc$ n$ )(tCons$ x$ xs$ ))(tdropn$ n$ xs$ ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(and (fun_app$a ?v0 ?v2 )(pred_tllist$ ?v0 ?v1 ?v3 ))):pattern ((pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 Nat$ ))(! (= (tnth$ (tCons$ ?v0 ?v1 )(suc$ ?v2 ))(tnth$ ?v1 ?v2 )):pattern ((tnth$ (tCons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Unit_b_fun$ )(?v1 A_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (tfilter$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(ite (fun_app$a ?v1 ?v2 )(tCons$ ?v2 (tfilter$ ?v0 ?v1 ?v3 ))(tfilter$ ?v0 ?v1 ?v3 ))):pattern ((tfilter$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (tfilter$a ?v0 ?v1 (tCons$ ?v2 ?v3 ))(ite (fun_app$a ?v1 ?v2 )(tCons$ ?v2 (tfilter$a ?v0 ?v1 ?v3 ))(tfilter$a ?v0 ?v1 ?v3 ))):pattern ((tfilter$a ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 B_a_b_tllist_fun$ ))(! (= (fun_app$b (tappend$ (tCons$ ?v0 ?v1 ))?v2 )(tCons$ ?v0 (fun_app$b (tappend$ ?v1 )?v2 ))):pattern ((fun_app$b (tappend$ (tCons$ ?v0 ?v1 ))?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (tdropn$ zero$ ?v0 )?v0 ):pattern ((tdropn$ zero$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B$ ))(! (= (tdropn$ ?v0 (tNil$ ?v1 ))(tNil$ ?v1 )):pattern ((tdropn$ ?v0 (tNil$ ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_b_tllist_fun$ ))(! (= (fun_app$b (tappend$ (tNil$ ?v0 ))?v1 )(fun_app$ ?v1 ?v0 )):pattern ((fun_app$b (tappend$ (tNil$ ?v0 ))?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$b (tappend$ ?v0 )uu$ )?v0 ):pattern ((tappend$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 B$ ))(! (= (tfilter$a ?v0 ?v1 (tNil$ ?v2 ))(tNil$ ?v2 )):pattern ((tfilter$a ?v0 ?v1 (tNil$ ?v2 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
