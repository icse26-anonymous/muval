;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort B_a_llist_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort B_nat_a_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort Bool_a_llist_fun$ 0 )
(declare-sort A_b_tllist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort Bool_a_b_tllist_fun$ 0 )
(declare-sort B_a_llist_b_prod_fun$ 0 )
(declare-sort B_b_a_llist_prod_fun$ 0 )
(declare-sort A_llist_nat_a_fun_fun$ 0 )
(declare-sort Nat_a_fun_a_llist_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun$ 0 )
(declare-sort B_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun$ 0 )
(declare-sort Nat_a_fun_nat_a_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_b_prod_fun$ 0 )
(declare-sort A_llist_b_a_llist_prod_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_fun$ 0 )
(declare-sort A_llist_b_a_b_tllist_fun_fun$ 0 )
(declare-sort A_llist_b_prod_nat_a_fun_fun$ 0 )
(declare-sort A_llist_nat_a_fun_b_prod_fun$ 0 )
(declare-sort B_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort Nat_a_fun_b_nat_a_fun_fun_fun$ 0 )
(declare-sort Nat_a_fun_b_prod_nat_a_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_fun_fun$ 0 )
(declare-sort A_llist_b_b_a_llist_prod_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun_bool_fun$ 0 )
(declare-sort B_a_llist_a_llist_b_prod_fun_fun$ 0 )
(declare-sort B_a_llist_b_a_llist_prod_fun_fun$ 0 )
(declare-sort Bool_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun$ 0 )
(declare-sort A_llist_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_nat_a_fun_b_prod_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_b_a_llist_bool_fun_fun_fun$ 0 )
(declare-sort B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_nat_a_fun_fun_fun$ 0 )
(declare-sort A_llist_nat_a_fun_fun_a_llist_nat_a_fun_fun_fun$ 0 )
(declare-sort B_a_llist_bool_fun_fun_b_a_llist_bool_fun_fun_fun$ 0 )
(declare-sort Nat_a_fun_a_llist_fun_nat_a_fun_nat_a_fun_fun_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort Nat_a_fun_nat_a_fun_fun_nat_a_fun_nat_a_fun_fun_fun$ 0 )
(declare-sort A_llist_a_llist_b_prod_fun_a_llist_nat_a_fun_fun_fun$ 0 )
(declare-sort A_llist_nat_a_fun_b_prod_fun_a_llist_nat_a_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_fun_a_llist_b_prod_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_b_prod_fun_a_llist_nat_a_fun_b_prod_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_fun_a_llist_b_prod_nat_a_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_nat_a_fun_fun_a_llist_b_prod_a_llist_fun_fun$ 0 )
(declare-sort B_a_llist_a_llist_b_prod_fun_fun_b_a_llist_bool_fun_fun_fun$ 0 )
(declare-sort B_a_llist_b_a_llist_prod_fun_fun_b_a_llist_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_nat_a_fun_fun_a_llist_b_prod_nat_a_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_nat_a_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_nat_a_fun_b_prod_fun_a_llist_b_prod_nat_a_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_nat_a_fun_b_prod_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_llist_b_prod$ (pair$ (fst$ A_llist$ )(snd$ B$ )))(B_a_llist_prod$ (pair$a (fst$a B$ )(snd$a A_llist$ )))(Nat_a_fun_b_prod$ (pair$b (select$ Nat_a_fun$ )(selecta$ B$ )))))
(declare-sort A_b_tllist$ 0)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun uu$ ()A_llist_b_prod_a_llist_fun$ )
(declare-fun uua$ (A_llist$ B$ )A_llist_b_bool_fun_fun$ )
(declare-fun uub$ ()A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uuc$ (Bool )B_a_llist_bool_fun_fun_b_a_llist_bool_fun_fun_fun$ )
(declare-fun uud$ (Bool A_llist_b_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uue$ ()Nat_a_fun_b_nat_a_fun_fun_fun$ )
(declare-fun uuf$ ()A_llist_b_a_llist_fun_fun$ )
(declare-fun uug$ (B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_prod_b_a_llist_bool_fun_fun_fun$ )
(declare-fun uuh$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_prod$ )A_llist_b_bool_fun_fun$ )
(declare-fun uui$ ()Nat_a_fun_nat_a_fun_fun$ )
(declare-fun uuj$ (A_llist$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun uuk$ (Nat_a_fun$ )A_llist_b_prod_nat_a_fun_fun$ )
(declare-fun uul$ (Nat_a_fun$ )Nat_a_fun_b_prod_nat_a_fun_fun$ )
(declare-fun uum$ (Nat_a_fun$ )Nat_a_fun_nat_a_fun_fun$ )
(declare-fun uun$ (Nat_a_fun$ )A_llist_nat_a_fun_fun$ )
(declare-fun uuo$ (A_llist_b_bool_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uup$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uuq$ (A_llist_b_bool_fun_fun$ )B_a_llist_a_llist_b_prod_fun_fun_b_a_llist_bool_fun_fun_fun$ )
(declare-fun uur$ (B_a_llist_bool_fun_fun$ A_llist_b_b_a_llist_prod_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uus$ (B_a_llist_bool_fun_fun$ )B_a_llist_b_a_llist_prod_fun_fun_b_a_llist_bool_fun_fun_fun$ )
(declare-fun uut$ (A_llist_b_a_llist_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_fun_fun$ )
(declare-fun uuu$ (A_llist_b_a_b_tllist_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_b_tllist_fun_fun$ )
(declare-fun uuv$ (A_llist_b_a_llist_b_prod_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun$ )
(declare-fun uuw$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ B_a_llist_a_llist_b_prod_fun_fun$ )B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uux$ (B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_b_a_llist_prod_fun_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uuy$ (Bool_bool_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uuz$ (A_llist_b_prod_bool_fun_bool_fun$ A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uva$ (Bool_a_llist_b_prod_bool_fun_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uvb$ (A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uvc$ (Bool_bool_fun$ )B_a_llist_bool_fun_fun_b_a_llist_bool_fun_fun_fun$ )
(declare-fun uvd$ (Bool_a_llist_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_a_llist_fun_fun$ )
(declare-fun uve$ (A_llist_bool_fun$ A_llist_b_a_llist_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uvf$ (Bool_a_b_tllist_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_a_b_tllist_fun_fun$ )
(declare-fun uvg$ (A_llist_a_llist_fun$ A_llist_b_a_llist_fun_fun$ )A_llist_b_a_llist_fun_fun$ )
(declare-fun uvh$ (A_b_tllist_bool_fun$ A_llist_b_a_b_tllist_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uvi$ ()A_llist_b_a_b_tllist_fun_fun$ )
(declare-fun uvj$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uvk$ (A_llist_b_bool_fun_fun$ )B_a_llist_bool_fun_fun$ )
(declare-fun uvl$ (B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uvm$ (B_a_llist_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun comp$ (A_llist_nat_a_fun_fun$ )A_llist_b_prod_a_llist_fun_a_llist_b_prod_nat_a_fun_fun_fun$ )
(declare-fun fst$b ()Nat_a_fun_b_prod_nat_a_fun_fun$ )
(declare-fun lnth$ ()A_llist_nat_a_fun_fun$ )
(declare-fun swap$ (A_llist_b_prod$ )B_a_llist_prod$ )
(declare-fun apfst$ (A_llist_nat_a_fun_fun$ )A_llist_b_prod_nat_a_fun_b_prod_fun$ )
(declare-fun comp$a (A_llist_b_prod_a_llist_fun$ )A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_fun_fun$ )
(declare-fun comp$b (A_llist_b_prod_nat_a_fun_fun$ )A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_nat_a_fun_fun_fun$ )
(declare-fun comp$c (Nat_a_fun_b_prod_nat_a_fun_fun$ )A_llist_b_prod_nat_a_fun_b_prod_fun_a_llist_b_prod_nat_a_fun_fun_fun$ )
(declare-fun comp$d (Nat_a_fun_nat_a_fun_fun$ )A_llist_nat_a_fun_fun_a_llist_nat_a_fun_fun_fun$ )
(declare-fun comp$e (Nat_a_fun_nat_a_fun_fun$ )A_llist_b_prod_nat_a_fun_fun_a_llist_b_prod_nat_a_fun_fun_fun$ )
(declare-fun comp$f (A_llist_a_llist_fun$ )A_llist_b_prod_a_llist_fun_a_llist_b_prod_a_llist_fun_fun$ )
(declare-fun comp$g (A_llist_nat_a_fun_fun$ )A_llist_a_llist_fun_a_llist_nat_a_fun_fun_fun$ )
(declare-fun comp$h (Nat_a_fun_nat_a_fun_fun$ )Nat_a_fun_nat_a_fun_fun_nat_a_fun_nat_a_fun_fun_fun$ )
(declare-fun comp$i (Nat_a_fun_a_llist_fun$ )A_llist_b_prod_nat_a_fun_fun_a_llist_b_prod_a_llist_fun_fun$ )
(declare-fun comp$j (A_llist_nat_a_fun_fun$ )Nat_a_fun_a_llist_fun_nat_a_fun_nat_a_fun_fun_fun$ )
(declare-fun comp$k (A_llist_b_prod_nat_a_fun_fun$ )A_llist_a_llist_b_prod_fun_a_llist_nat_a_fun_fun_fun$ )
(declare-fun comp$l (A_llist_a_llist_b_prod_fun$ )A_llist_b_prod_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$ )
(declare-fun comp$m (A_llist_b_prod_a_llist_b_prod_fun$ )A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$ )
(declare-fun comp$n (A_llist_b_prod_nat_a_fun_b_prod_fun$ )A_llist_a_llist_b_prod_fun_a_llist_nat_a_fun_b_prod_fun_fun$ )
(declare-fun comp$o (Nat_a_fun_b_prod_nat_a_fun_fun$ )A_llist_nat_a_fun_b_prod_fun_a_llist_nat_a_fun_fun_fun$ )
(declare-fun comp$p (A_llist_b_prod_nat_a_fun_b_prod_fun$ )A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_nat_a_fun_b_prod_fun_fun$ )
(declare-fun fstsp$ (A_llist_b_prod$ )A_llist_bool_fun$ )
(declare-fun prod1$ ()A_llist_b_prod$ )
(declare-fun prod2$ ()A_llist_b_prod$ )
(declare-fun reflp$ (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ )Bool )
(declare-fun swap$a (B_a_llist_prod$ )A_llist_b_prod$ )
(declare-fun apfst$a (A_llist_a_llist_fun$ )A_llist_b_prod_a_llist_b_prod_fun$ )
(declare-fun fun_app$ (A_llist_b_prod_a_llist_fun$ A_llist_b_prod$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (B_a_b_tllist_fun$ B$ )A_b_tllist$ )
(declare-fun fun_app$b (A_llist_b_a_b_tllist_fun_fun$ A_llist$ )B_a_b_tllist_fun$ )
(declare-fun fun_app$c (B_a_llist_b_prod_bool_fun_fun$ B$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$d (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist$ )B_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$e (A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$g (B_a_llist_bool_fun_fun$ B$ )A_llist_bool_fun$ )
(declare-fun fun_app$h (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$i (A_llist_b_bool_fun_fun$ A_llist$ )B_bool_fun$ )
(declare-fun fun_app$j (A_llist_a_llist_b_prod_bool_fun_fun$ A_llist$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$k (B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ B$ )A_llist_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$l (A_llist_b_prod_bool_fun$ A_llist_b_prod$ )Bool )
(declare-fun fun_app$m (A_llist_b_prod_b_a_llist_bool_fun_fun_fun$ A_llist_b_prod$ )B_a_llist_bool_fun_fun$ )
(declare-fun fun_app$n (B_a_llist_b_prod_fun$ B$ )A_llist_b_prod$ )
(declare-fun fun_app$o (A_llist_b_a_llist_b_prod_fun_fun$ A_llist$ )B_a_llist_b_prod_fun$ )
(declare-fun fun_app$p (B_a_llist_fun$ B$ )A_llist$ )
(declare-fun fun_app$q (A_llist_b_a_llist_fun_fun$ A_llist$ )B_a_llist_fun$ )
(declare-fun fun_app$r (A_llist_b_prod_a_llist_b_prod_fun$ A_llist_b_prod$ )A_llist_b_prod$ )
(declare-fun fun_app$s (B_a_llist_a_llist_b_prod_fun_fun_b_a_llist_bool_fun_fun_fun$ B_a_llist_a_llist_b_prod_fun_fun$ )B_a_llist_bool_fun_fun$ )
(declare-fun fun_app$t (A_llist_a_llist_b_prod_fun$ A_llist$ )A_llist_b_prod$ )
(declare-fun fun_app$u (B_a_llist_a_llist_b_prod_fun_fun$ B$ )A_llist_a_llist_b_prod_fun$ )
(declare-fun fun_app$v (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ A_llist_b_prod$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$w (A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$x (B_b_a_llist_prod_fun$ B$ )B_a_llist_prod$ )
(declare-fun fun_app$y (A_llist_b_b_a_llist_prod_fun_fun$ A_llist$ )B_b_a_llist_prod_fun$ )
(declare-fun fun_app$z (B_a_llist_b_a_llist_prod_fun_fun_b_a_llist_bool_fun_fun_fun$ B_a_llist_b_a_llist_prod_fun_fun$ )B_a_llist_bool_fun_fun$ )
(declare-fun case_prod$ ()A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$aa (A_llist_b_a_llist_prod_fun$ A_llist$ )B_a_llist_prod$ )
(declare-fun fun_app$ab (B_a_llist_b_a_llist_prod_fun_fun$ B$ )A_llist_b_a_llist_prod_fun$ )
(declare-fun fun_app$ac (B_a_llist_bool_fun_fun_b_a_llist_bool_fun_fun_fun$ B_a_llist_bool_fun_fun$ )B_a_llist_bool_fun_fun$ )
(declare-fun fun_app$ad (A_b_tllist_bool_fun$ A_b_tllist$ )Bool )
(declare-fun fun_app$ae (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$af (Bool_a_b_tllist_fun$ Bool )A_b_tllist$ )
(declare-fun fun_app$ag (Bool_a_llist_fun$ Bool )A_llist$ )
(declare-fun fun_app$ah (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$ai (Bool_a_llist_b_prod_bool_fun_fun$ Bool )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$aj (A_llist_b_prod_bool_fun_bool_fun$ A_llist_b_prod_bool_fun$ )Bool )
(declare-fun fun_app$ak (A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ A_llist_b_prod_bool_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$al (A_llist_nat_a_fun_fun$ A_llist$ )Nat_a_fun$ )
(declare-fun fun_app$am (A_llist_b_prod_nat_a_fun_fun$ A_llist_b_prod$ )Nat_a_fun$ )
(declare-fun fun_app$an (Nat_a_fun_b_prod_nat_a_fun_fun$ Nat_a_fun_b_prod$ )Nat_a_fun$ )
(declare-fun fun_app$ao (Nat_a_fun_nat_a_fun_fun$ Nat_a_fun$ )Nat_a_fun$ )
(declare-fun fun_app$ap (B_nat_a_fun_fun$ B$ )Nat_a_fun$ )
(declare-fun fun_app$aq (Nat_a_fun_b_nat_a_fun_fun_fun$ Nat_a_fun$ )B_nat_a_fun_fun$ )
(declare-fun fun_app$ar (A_llist_b_prod_a_llist_fun_a_llist_b_prod_nat_a_fun_fun_fun$ A_llist_b_prod_a_llist_fun$ )A_llist_b_prod_nat_a_fun_fun$ )
(declare-fun fun_app$as (A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_fun_fun$ A_llist_b_prod_a_llist_b_prod_fun$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun fun_app$at (A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_nat_a_fun_fun_fun$ A_llist_b_prod_a_llist_b_prod_fun$ )A_llist_b_prod_nat_a_fun_fun$ )
(declare-fun fun_app$au (A_llist_b_prod_nat_a_fun_b_prod_fun_a_llist_b_prod_nat_a_fun_fun_fun$ A_llist_b_prod_nat_a_fun_b_prod_fun$ )A_llist_b_prod_nat_a_fun_fun$ )
(declare-fun fun_app$av (A_llist_b_prod_nat_a_fun_b_prod_fun$ A_llist_b_prod$ )Nat_a_fun_b_prod$ )
(declare-fun fun_app$aw (A_llist_nat_a_fun_fun_a_llist_nat_a_fun_fun_fun$ A_llist_nat_a_fun_fun$ )A_llist_nat_a_fun_fun$ )
(declare-fun fun_app$ax (A_llist_b_prod_nat_a_fun_fun_a_llist_b_prod_nat_a_fun_fun_fun$ A_llist_b_prod_nat_a_fun_fun$ )A_llist_b_prod_nat_a_fun_fun$ )
(declare-fun fun_app$ay (A_llist_b_prod_a_llist_fun_a_llist_b_prod_a_llist_fun_fun$ A_llist_b_prod_a_llist_fun$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun fun_app$az (A_llist_a_llist_fun_a_llist_nat_a_fun_fun_fun$ A_llist_a_llist_fun$ )A_llist_nat_a_fun_fun$ )
(declare-fun fun_app$ba (Nat_a_fun_nat_a_fun_fun_nat_a_fun_nat_a_fun_fun_fun$ Nat_a_fun_nat_a_fun_fun$ )Nat_a_fun_nat_a_fun_fun$ )
(declare-fun fun_app$bb (A_llist_b_prod_nat_a_fun_fun_a_llist_b_prod_a_llist_fun_fun$ A_llist_b_prod_nat_a_fun_fun$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun fun_app$bc (Nat_a_fun_a_llist_fun_nat_a_fun_nat_a_fun_fun_fun$ Nat_a_fun_a_llist_fun$ )Nat_a_fun_nat_a_fun_fun$ )
(declare-fun fun_app$bd (A_llist_a_llist_b_prod_fun_a_llist_nat_a_fun_fun_fun$ A_llist_a_llist_b_prod_fun$ )A_llist_nat_a_fun_fun$ )
(declare-fun fun_app$be (A_llist_b_prod_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$ A_llist_b_prod_a_llist_fun$ )A_llist_b_prod_a_llist_b_prod_fun$ )
(declare-fun fun_app$bf (A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$ A_llist_b_prod_a_llist_b_prod_fun$ )A_llist_b_prod_a_llist_b_prod_fun$ )
(declare-fun fun_app$bg (A_llist_a_llist_b_prod_fun_a_llist_nat_a_fun_b_prod_fun_fun$ A_llist_a_llist_b_prod_fun$ )A_llist_nat_a_fun_b_prod_fun$ )
(declare-fun fun_app$bh (A_llist_nat_a_fun_b_prod_fun_a_llist_nat_a_fun_fun_fun$ A_llist_nat_a_fun_b_prod_fun$ )A_llist_nat_a_fun_fun$ )
(declare-fun fun_app$bi (A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_nat_a_fun_b_prod_fun_fun$ A_llist_b_prod_a_llist_b_prod_fun$ )A_llist_b_prod_nat_a_fun_b_prod_fun$ )
(declare-fun case_prod$a (A_llist_b_a_b_tllist_fun_fun$ A_llist_b_prod$ )A_b_tllist$ )
(declare-fun case_prod$b (A_llist_b_a_llist_fun_fun$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun case_prod$c (A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_prod_a_llist_b_prod_fun$ )
(declare-fun case_prod$d ()A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun case_prod$e (B_a_llist_bool_fun_fun$ B_a_llist_prod$ )Bool )
(declare-fun case_prod$f (B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ B_a_llist_prod$ )A_llist_b_prod_bool_fun$ )
(declare-fun case_prod$g (Nat_a_fun_b_nat_a_fun_fun_fun$ )Nat_a_fun_b_prod_nat_a_fun_fun$ )
(declare-fun case_prod$h (B_a_llist_a_llist_b_prod_fun_fun$ B_a_llist_prod$ )A_llist_b_prod$ )
(declare-fun case_prod$i (A_llist_b_b_a_llist_prod_fun_fun$ A_llist_b_prod$ )B_a_llist_prod$ )
(declare-fun case_prod$j (B_a_llist_b_a_llist_prod_fun_fun$ B_a_llist_prod$ )B_a_llist_prod$ )
(declare-fun internal_split$ ()A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun internal_split$a ()A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(assert (! (forall ((?v0 A_llist_b_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$a (fun_app$b uvi$ ?v0 )?v1 )(tllist_of_llist$ ?v1 ?v0 )):pattern ((fun_app$a (fun_app$b uvi$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$c (fun_app$d uub$ ?v0 )?v1 )(fun_app$e case_prod$ (uua$ ?v0 ?v1 ))):pattern ((fun_app$c (fun_app$d uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 B$ )(?v2 A_llist$ ))(! (= (fun_app$f (fun_app$g (uvk$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$i ?v0 ?v2 )?v1 )):pattern ((fun_app$f (fun_app$g (uvk$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 B$ )(?v2 A_llist$ ))(! (= (fun_app$j (fun_app$k (uvj$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d ?v0 ?v2 )?v1 )):pattern ((fun_app$j (fun_app$k (uvj$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B$ ))(! (= (fun_app$h (fun_app$i (uvm$ ?v0 )?v1 )?v2 )(fun_app$f (fun_app$g ?v0 ?v2 )?v1 )):pattern ((fun_app$h (fun_app$i (uvm$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$d (uvl$ ?v0 )?v1 )?v2 )(fun_app$j (fun_app$k ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$d (uvl$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uuh$ ?v0 ?v1 )?v2 )?v3 )(fun_app$l (fun_app$c (fun_app$d ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$h (fun_app$i (uuh$ ?v0 ?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 B$ )(?v3 A_llist$ ))(! (= (fun_app$f (fun_app$g (fun_app$m (uug$ ?v0 )?v1 )?v2 )?v3 )(fun_app$l (fun_app$j (fun_app$k ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$f (fun_app$g (fun_app$m (uug$ ?v0 )?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uua$ ?v0 ?v1 )?v2 )?v3 )(and (= ?v0 ?v2 )(=> (lfinite$ ?v2 )(= ?v1 ?v3 )))):pattern ((fun_app$h (fun_app$i (uua$ ?v0 ?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$a (fun_app$b (uuu$ ?v0 ?v1 )?v2 )?v3 )(case_prod$a ?v0 (fun_app$n (fun_app$o ?v1 ?v2 )?v3 ))):pattern ((fun_app$a (fun_app$b (uuu$ ?v0 ?v1 )?v2 )?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$p (fun_app$q (uut$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ (case_prod$b ?v0 )(fun_app$n (fun_app$o ?v1 ?v2 )?v3 ))):pattern ((fun_app$p (fun_app$q (uut$ ?v0 ?v1 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$n (fun_app$o (uuv$ ?v0 ?v1 )?v2 )?v3 )(fun_app$r (case_prod$c ?v0 )(fun_app$n (fun_app$o ?v1 ?v2 )?v3 ))):pattern ((fun_app$n (fun_app$o (uuv$ ?v0 ?v1 )?v2 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uuo$ ?v0 ?v1 )?v2 )?v3 )(fun_app$l (fun_app$e case_prod$ ?v0 )(fun_app$n (fun_app$o ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$i (uuo$ ?v0 ?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 B_a_llist_a_llist_b_prod_fun_fun$ )(?v2 B$ )(?v3 A_llist$ ))(! (= (fun_app$f (fun_app$g (fun_app$s (uuq$ ?v0 )?v1 )?v2 )?v3 )(fun_app$l (fun_app$e case_prod$ ?v0 )(fun_app$t (fun_app$u ?v1 ?v2 )?v3 ))):pattern ((fun_app$f (fun_app$g (fun_app$s (uuq$ ?v0 )?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$c (fun_app$d (uup$ ?v0 ?v1 )?v2 )?v3 )(fun_app$v (fun_app$w case_prod$d ?v0 )(fun_app$n (fun_app$o ?v1 ?v2 )?v3 ))):pattern ((fun_app$c (fun_app$d (uup$ ?v0 ?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 B_a_llist_a_llist_b_prod_fun_fun$ )(?v2 B$ )(?v3 A_llist$ ))(! (= (fun_app$j (fun_app$k (uuw$ ?v0 ?v1 )?v2 )?v3 )(fun_app$v (fun_app$w case_prod$d ?v0 )(fun_app$t (fun_app$u ?v1 ?v2 )?v3 ))):pattern ((fun_app$j (fun_app$k (uuw$ ?v0 ?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$ )(?v1 A_llist_b_b_a_llist_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uur$ ?v0 ?v1 )?v2 )?v3 )(case_prod$e ?v0 (fun_app$x (fun_app$y ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$i (uur$ ?v0 ?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$ )(?v1 B_a_llist_b_a_llist_prod_fun_fun$ )(?v2 B$ )(?v3 A_llist$ ))(! (= (fun_app$f (fun_app$g (fun_app$z (uus$ ?v0 )?v1 )?v2 )?v3 )(case_prod$e ?v0 (fun_app$aa (fun_app$ab ?v1 ?v2 )?v3 ))):pattern ((fun_app$f (fun_app$g (fun_app$z (uus$ ?v0 )?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_b_a_llist_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$c (fun_app$d (uux$ ?v0 ?v1 )?v2 )?v3 )(case_prod$f ?v0 (fun_app$x (fun_app$y ?v1 ?v2 )?v3 ))):pattern ((fun_app$c (fun_app$d (uux$ ?v0 ?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uud$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$h (fun_app$i ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$i (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 Bool )(?v1 B_a_llist_bool_fun_fun$ )(?v2 B$ )(?v3 A_llist$ ))(! (= (fun_app$f (fun_app$g (fun_app$ac (uuc$ ?v0 )?v1 )?v2 )?v3 )(and ?v0 (fun_app$f (fun_app$g ?v1 ?v2 )?v3 ))):pattern ((fun_app$f (fun_app$g (fun_app$ac (uuc$ ?v0 )?v1 )?v2 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_b_tllist_bool_fun$ )(?v1 A_llist_b_a_b_tllist_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uvh$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ad ?v0 (fun_app$a (fun_app$b ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$i (uvh$ ?v0 ?v1 )?v2 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_a_llist_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$p (fun_app$q (uvg$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ae ?v0 (fun_app$p (fun_app$q ?v1 ?v2 )?v3 ))):pattern ((fun_app$p (fun_app$q (uvg$ ?v0 ?v1 )?v2 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_b_a_llist_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uve$ ?v0 ?v1 )?v2 )?v3 )(fun_app$f ?v0 (fun_app$p (fun_app$q ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$i (uve$ ?v0 ?v1 )?v2 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 Bool_a_b_tllist_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$a (fun_app$b (uvf$ ?v0 ?v1 )?v2 )?v3 )(fun_app$af ?v0 (fun_app$h (fun_app$i ?v1 ?v2 )?v3 ))):pattern ((fun_app$a (fun_app$b (uvf$ ?v0 ?v1 )?v2 )?v3 )))):named a25 ))
(assert (! (forall ((?v0 Bool_a_llist_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$p (fun_app$q (uvd$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ag ?v0 (fun_app$h (fun_app$i ?v1 ?v2 )?v3 ))):pattern ((fun_app$p (fun_app$q (uvd$ ?v0 ?v1 )?v2 )?v3 )))):named a26 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uuy$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ah ?v0 (fun_app$h (fun_app$i ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$i (uuy$ ?v0 ?v1 )?v2 )?v3 )))):named a27 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 B_a_llist_bool_fun_fun$ )(?v2 B$ )(?v3 A_llist$ ))(! (= (fun_app$f (fun_app$g (fun_app$ac (uvc$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ah ?v0 (fun_app$f (fun_app$g ?v1 ?v2 )?v3 ))):pattern ((fun_app$f (fun_app$g (fun_app$ac (uvc$ ?v0 )?v1 )?v2 )?v3 )))):named a28 ))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_bool_fun_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$c (fun_app$d (uva$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ai ?v0 (fun_app$h (fun_app$i ?v1 ?v2 )?v3 ))):pattern ((fun_app$c (fun_app$d (uva$ ?v0 ?v1 )?v2 )?v3 )))):named a29 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_bool_fun$ )(?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uuz$ ?v0 ?v1 )?v2 )?v3 )(fun_app$aj ?v0 (fun_app$c (fun_app$d ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$i (uuz$ ?v0 ?v1 )?v2 )?v3 )))):named a30 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$c (fun_app$d (uvb$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ak ?v0 (fun_app$c (fun_app$d ?v1 ?v2 )?v3 ))):pattern ((fun_app$c (fun_app$d (uvb$ ?v0 ?v1 )?v2 )?v3 )))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_prod$ ))(! (= (fun_app$ (uuj$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uuj$ ?v0 )?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$p (fun_app$q uuf$ ?v0 )?v1 )?v0 ):pattern ((fun_app$p (fun_app$q uuf$ ?v0 )?v1 )))):named a33 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_llist$ ))(! (= (fun_app$al (uun$ ?v0 )?v1 )?v0 ):pattern ((fun_app$al (uun$ ?v0 )?v1 )))):named a34 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_llist_b_prod$ ))(! (= (fun_app$am (uuk$ ?v0 )?v1 )?v0 ):pattern ((fun_app$am (uuk$ ?v0 )?v1 )))):named a35 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun_b_prod$ ))(! (= (fun_app$an (uul$ ?v0 )?v1 )?v0 ):pattern ((fun_app$an (uul$ ?v0 )?v1 )))):named a36 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun$ ))(! (= (fun_app$ao (uum$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ao (uum$ ?v0 )?v1 )))):named a37 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 B$ ))(! (= (fun_app$ap (fun_app$aq uue$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ap (fun_app$aq uue$ ?v0 )?v1 )))):named a38 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(! (= (fun_app$ao uui$ ?v0 )?v0 ):pattern ((fun_app$ao uui$ ?v0 )))):named a39 ))
(assert (! (not (= (fun_app$am (fun_app$ar (comp$ lnth$ )uu$ )prod1$ )(fun_app$am (fun_app$ar (comp$ lnth$ )uu$ )prod2$ ))):named a40 ))
(assert (! (fun_app$l (fun_app$v (fun_app$w case_prod$d uub$ )prod1$ )prod2$ ):named a41 ))
(assert (! (forall ((?v0 Bool )(?v1 B_a_llist_bool_fun_fun$ )(?v2 B_a_llist_prod$ ))(= (case_prod$e (fun_app$ac (uuc$ ?v0 )?v1 )?v2 )(and ?v0 (case_prod$e ?v1 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$l (fun_app$e case_prod$ (uud$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$l (fun_app$e case_prod$ ?v1 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ (fun_app$as (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$as (comp$a ?v0 )?v1 )?v2 )))):named a44 ))
(assert (! (forall ((?v0 A_llist_b_prod_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$am (fun_app$at (comp$b ?v0 )?v1 )?v2 )(fun_app$am ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$am (fun_app$at (comp$b ?v0 )?v1 )?v2 )))):named a45 ))
(assert (! (forall ((?v0 Nat_a_fun_b_prod_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$am (fun_app$au (comp$c ?v0 )?v1 )?v2 )(fun_app$an ?v0 (fun_app$av ?v1 ?v2 ))):pattern ((fun_app$am (fun_app$au (comp$c ?v0 )?v1 )?v2 )))):named a46 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist$ ))(! (= (fun_app$al (fun_app$aw (comp$d ?v0 )?v1 )?v2 )(fun_app$ao ?v0 (fun_app$al ?v1 ?v2 ))):pattern ((fun_app$al (fun_app$aw (comp$d ?v0 )?v1 )?v2 )))):named a47 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$am (fun_app$ax (comp$e ?v0 )?v1 )?v2 )(fun_app$ao ?v0 (fun_app$am ?v1 ?v2 ))):pattern ((fun_app$am (fun_app$ax (comp$e ?v0 )?v1 )?v2 )))):named a48 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$am (fun_app$ar (comp$ ?v0 )?v1 )?v2 )(fun_app$al ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$am (fun_app$ar (comp$ ?v0 )?v1 )?v2 )))):named a49 ))
(assert (! (forall ((?v0 Nat_a_fun_b_prod$ ))(= (fun_app$an fst$b ?v0 )(fun_app$an (case_prod$g uue$ )?v0 ))):named a50 ))
(assert (! (forall ((?v0 A_llist_b_prod$ ))(= (fst$ ?v0 )(fun_app$ (case_prod$b uuf$ )?v0 ))):named a51 ))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 B_a_llist_prod$ )(?v2 A_llist_b_prod$ ))(= (fun_app$l (case_prod$f ?v0 ?v1 )?v2 )(case_prod$e (fun_app$m (uug$ ?v0 )?v2 )?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_prod$ ))(= (fun_app$l (fun_app$v (fun_app$w case_prod$d ?v0 )?v1 )?v2 )(fun_app$l (fun_app$e case_prod$ (uuh$ ?v0 ?v2 ))?v1 ))):named a53 ))
(assert (! (reflp$ (fun_app$w case_prod$d uub$ )):named a54 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ ))(= (fun_app$aw (comp$d uui$ )?v0 )?v0 )):named a55 ))
(assert (! (forall ((?v0 A_llist_b_prod_nat_a_fun_fun$ ))(= (fun_app$ax (comp$e uui$ )?v0 )?v0 )):named a56 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ (fun_app$as (comp$a (uuj$ ?v0 ))?v1 )?v2 )?v0 )):named a57 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$am (fun_app$at (comp$b (uuk$ ?v0 ))?v1 )?v2 )?v0 )):named a58 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_llist_b_prod_nat_a_fun_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$am (fun_app$au (comp$c (uul$ ?v0 ))?v1 )?v2 )?v0 )):named a59 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist$ ))(= (fun_app$al (fun_app$aw (comp$d (uum$ ?v0 ))?v1 )?v2 )?v0 )):named a60 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$am (fun_app$ax (comp$e (uum$ ?v0 ))?v1 )?v2 )?v0 )):named a61 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$am (fun_app$ar (comp$ (uun$ ?v0 ))?v1 )?v2 )?v0 )):named a62 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$l (fun_app$e case_prod$ ?v0 )(fun_app$r (case_prod$c ?v1 )?v2 ))(fun_app$l (fun_app$e case_prod$ (uuo$ ?v0 ?v1 ))?v2 ))):named a63 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$v (fun_app$w case_prod$d ?v0 )(fun_app$r (case_prod$c ?v1 )?v2 ))(fun_app$v (fun_app$w case_prod$d (uup$ ?v0 ?v1 ))?v2 ))):named a64 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 B_a_llist_a_llist_b_prod_fun_fun$ )(?v2 B_a_llist_prod$ ))(= (fun_app$l (fun_app$e case_prod$ ?v0 )(case_prod$h ?v1 ?v2 ))(case_prod$e (fun_app$s (uuq$ ?v0 )?v1 )?v2 ))):named a65 ))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$ )(?v1 A_llist_b_b_a_llist_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (case_prod$e ?v0 (case_prod$i ?v1 ?v2 ))(fun_app$l (fun_app$e case_prod$ (uur$ ?v0 ?v1 ))?v2 ))):named a66 ))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$ )(?v1 B_a_llist_b_a_llist_prod_fun_fun$ )(?v2 B_a_llist_prod$ ))(= (case_prod$e ?v0 (case_prod$j ?v1 ?v2 ))(case_prod$e (fun_app$z (uus$ ?v0 )?v1 )?v2 ))):named a67 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ (case_prod$b ?v0 )(fun_app$r (case_prod$c ?v1 )?v2 ))(fun_app$ (case_prod$b (uut$ ?v0 ?v1 ))?v2 ))):named a68 ))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (case_prod$a ?v0 (fun_app$r (case_prod$c ?v1 )?v2 ))(case_prod$a (uuu$ ?v0 ?v1 )?v2 ))):named a69 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$r (case_prod$c ?v0 )(fun_app$r (case_prod$c ?v1 )?v2 ))(fun_app$r (case_prod$c (uuv$ ?v0 ?v1 ))?v2 ))):named a70 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 B_a_llist_a_llist_b_prod_fun_fun$ )(?v2 B_a_llist_prod$ ))(= (fun_app$v (fun_app$w case_prod$d ?v0 )(case_prod$h ?v1 ?v2 ))(case_prod$f (uuw$ ?v0 ?v1 )?v2 ))):named a71 ))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_b_a_llist_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (case_prod$f ?v0 (case_prod$i ?v1 ?v2 ))(fun_app$v (fun_app$w case_prod$d (uux$ ?v0 ?v1 ))?v2 ))):named a72 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ah ?v0 (fun_app$l (fun_app$e case_prod$ ?v1 )?v2 ))(fun_app$l (fun_app$e case_prod$ (uuy$ ?v0 ?v1 ))?v2 ))):named a73 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_bool_fun$ )(?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$aj ?v0 (fun_app$v (fun_app$w case_prod$d ?v1 )?v2 ))(fun_app$l (fun_app$e case_prod$ (uuz$ ?v0 ?v1 ))?v2 ))):named a74 ))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_bool_fun_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ai ?v0 (fun_app$l (fun_app$e case_prod$ ?v1 )?v2 ))(fun_app$v (fun_app$w case_prod$d (uva$ ?v0 ?v1 ))?v2 ))):named a75 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ak ?v0 (fun_app$v (fun_app$w case_prod$d ?v1 )?v2 ))(fun_app$v (fun_app$w case_prod$d (uvb$ ?v0 ?v1 ))?v2 ))):named a76 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 B_a_llist_bool_fun_fun$ )(?v2 B_a_llist_prod$ ))(= (fun_app$ah ?v0 (case_prod$e ?v1 ?v2 ))(case_prod$e (fun_app$ac (uvc$ ?v0 )?v1 )?v2 ))):named a77 ))
(assert (! (forall ((?v0 Bool_a_llist_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ag ?v0 (fun_app$l (fun_app$e case_prod$ ?v1 )?v2 ))(fun_app$ (case_prod$b (uvd$ ?v0 ?v1 ))?v2 ))):named a78 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_b_a_llist_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$f ?v0 (fun_app$ (case_prod$b ?v1 )?v2 ))(fun_app$l (fun_app$e case_prod$ (uve$ ?v0 ?v1 ))?v2 ))):named a79 ))
(assert (! (forall ((?v0 Bool_a_b_tllist_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$af ?v0 (fun_app$l (fun_app$e case_prod$ ?v1 )?v2 ))(case_prod$a (uvf$ ?v0 ?v1 )?v2 ))):named a80 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_a_llist_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ae ?v0 (fun_app$ (case_prod$b ?v1 )?v2 ))(fun_app$ (case_prod$b (uvg$ ?v0 ?v1 ))?v2 ))):named a81 ))
(assert (! (forall ((?v0 A_b_tllist_bool_fun$ )(?v1 A_llist_b_a_b_tllist_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ad ?v0 (case_prod$a ?v1 ?v2 ))(fun_app$l (fun_app$e case_prod$ (uvh$ ?v0 ?v1 ))?v2 ))):named a82 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ ))(= (fun_app$ar (comp$ ?v0 )(fun_app$ay (comp$f ?v1 )?v2 ))(fun_app$ar (comp$ (fun_app$az (comp$g ?v0 )?v1 ))?v2 ))):named a83 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ ))(= (fun_app$ax (comp$e ?v0 )(fun_app$ar (comp$ ?v1 )?v2 ))(fun_app$ar (comp$ (fun_app$aw (comp$d ?v0 )?v1 ))?v2 ))):named a84 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_b_prod_fun$ ))(= (fun_app$ar (comp$ ?v0 )(fun_app$as (comp$a ?v1 )?v2 ))(fun_app$at (comp$b (fun_app$ar (comp$ ?v0 )?v1 ))?v2 ))):named a85 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist_a_llist_fun$ ))(= (fun_app$aw (comp$d ?v0 )(fun_app$az (comp$g ?v1 )?v2 ))(fun_app$az (comp$g (fun_app$aw (comp$d ?v0 )?v1 ))?v2 ))):named a86 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 Nat_a_fun_nat_a_fun_fun$ )(?v2 A_llist_nat_a_fun_fun$ ))(= (fun_app$aw (comp$d ?v0 )(fun_app$aw (comp$d ?v1 )?v2 ))(fun_app$aw (comp$d (fun_app$ba (comp$h ?v0 )?v1 ))?v2 ))):named a87 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_b_prod_fun$ ))(= (fun_app$ay (comp$f ?v0 )(fun_app$as (comp$a ?v1 )?v2 ))(fun_app$as (comp$a (fun_app$ay (comp$f ?v0 )?v1 ))?v2 ))):named a88 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 Nat_a_fun_a_llist_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ ))(= (fun_app$ar (comp$ ?v0 )(fun_app$bb (comp$i ?v1 )?v2 ))(fun_app$ax (comp$e (fun_app$bc (comp$j ?v0 )?v1 ))?v2 ))):named a89 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_a_llist_b_prod_fun$ ))(= (fun_app$aw (comp$d ?v0 )(fun_app$bd (comp$k ?v1 )?v2 ))(fun_app$bd (comp$k (fun_app$ax (comp$e ?v0 )?v1 ))?v2 ))):named a90 ))
(assert (! (forall ((?v0 Nat_a_fun_a_llist_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_b_prod_a_llist_b_prod_fun$ ))(= (fun_app$bb (comp$i ?v0 )(fun_app$at (comp$b ?v1 )?v2 ))(fun_app$as (comp$a (fun_app$bb (comp$i ?v0 )?v1 ))?v2 ))):named a91 ))
(assert (! (forall ((?v0 A_llist_b_prod_nat_a_fun_fun$ )(?v1 A_llist_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ ))(= (fun_app$at (comp$b ?v0 )(fun_app$be (comp$l ?v1 )?v2 ))(fun_app$ar (comp$ (fun_app$bd (comp$k ?v0 )?v1 ))?v2 ))):named a92 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ ))(= (fun_app$ar (comp$ (fun_app$az (comp$g ?v0 )?v1 ))?v2 )(fun_app$ar (comp$ ?v0 )(fun_app$ay (comp$f ?v1 )?v2 )))):named a93 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ ))(= (fun_app$ar (comp$ (fun_app$aw (comp$d ?v0 )?v1 ))?v2 )(fun_app$ax (comp$e ?v0 )(fun_app$ar (comp$ ?v1 )?v2 )))):named a94 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_b_prod_fun$ ))(= (fun_app$at (comp$b (fun_app$ar (comp$ ?v0 )?v1 ))?v2 )(fun_app$ar (comp$ ?v0 )(fun_app$as (comp$a ?v1 )?v2 )))):named a95 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist_a_llist_fun$ ))(= (fun_app$az (comp$g (fun_app$aw (comp$d ?v0 )?v1 ))?v2 )(fun_app$aw (comp$d ?v0 )(fun_app$az (comp$g ?v1 )?v2 )))):named a96 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 Nat_a_fun_nat_a_fun_fun$ )(?v2 A_llist_nat_a_fun_fun$ ))(= (fun_app$aw (comp$d (fun_app$ba (comp$h ?v0 )?v1 ))?v2 )(fun_app$aw (comp$d ?v0 )(fun_app$aw (comp$d ?v1 )?v2 )))):named a97 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_a_llist_b_prod_fun$ ))(= (fun_app$bd (comp$k (fun_app$ax (comp$e ?v0 )?v1 ))?v2 )(fun_app$aw (comp$d ?v0 )(fun_app$bd (comp$k ?v1 )?v2 )))):named a98 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_b_prod_fun$ ))(= (fun_app$as (comp$a (fun_app$ay (comp$f ?v0 )?v1 ))?v2 )(fun_app$ay (comp$f ?v0 )(fun_app$as (comp$a ?v1 )?v2 )))):named a99 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 Nat_a_fun_a_llist_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ ))(= (fun_app$ax (comp$e (fun_app$bc (comp$j ?v0 )?v1 ))?v2 )(fun_app$ar (comp$ ?v0 )(fun_app$bb (comp$i ?v1 )?v2 )))):named a100 ))
(assert (! (forall ((?v0 A_llist_b_prod_nat_a_fun_fun$ )(?v1 A_llist_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ ))(= (fun_app$ar (comp$ (fun_app$bd (comp$k ?v0 )?v1 ))?v2 )(fun_app$at (comp$b ?v0 )(fun_app$be (comp$l ?v1 )?v2 )))):named a101 ))
(assert (! (forall ((?v0 Nat_a_fun_a_llist_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_b_prod_a_llist_b_prod_fun$ ))(= (fun_app$as (comp$a (fun_app$bb (comp$i ?v0 )?v1 ))?v2 )(fun_app$bb (comp$i ?v0 )(fun_app$at (comp$b ?v1 )?v2 )))):named a102 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ (fun_app$as (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$as (comp$a ?v0 )?v1 )?v2 )))):named a103 ))
(assert (! (forall ((?v0 A_llist_b_prod_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$am (fun_app$at (comp$b ?v0 )?v1 )?v2 )(fun_app$am ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$am (fun_app$at (comp$b ?v0 )?v1 )?v2 )))):named a104 ))
(assert (! (forall ((?v0 Nat_a_fun_b_prod_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$am (fun_app$au (comp$c ?v0 )?v1 )?v2 )(fun_app$an ?v0 (fun_app$av ?v1 ?v2 ))):pattern ((fun_app$am (fun_app$au (comp$c ?v0 )?v1 )?v2 )))):named a105 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist$ ))(! (= (fun_app$al (fun_app$aw (comp$d ?v0 )?v1 )?v2 )(fun_app$ao ?v0 (fun_app$al ?v1 ?v2 ))):pattern ((fun_app$al (fun_app$aw (comp$d ?v0 )?v1 )?v2 )))):named a106 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$am (fun_app$ax (comp$e ?v0 )?v1 )?v2 )(fun_app$ao ?v0 (fun_app$am ?v1 ?v2 ))):pattern ((fun_app$am (fun_app$ax (comp$e ?v0 )?v1 )?v2 )))):named a107 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$am (fun_app$ar (comp$ ?v0 )?v1 )?v2 )(fun_app$al ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$am (fun_app$ar (comp$ ?v0 )?v1 )?v2 )))):named a108 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_a_llist_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$ (case_prod$b ?v2 )?v0 )(fun_app$ (case_prod$b ?v2 )?v1 )))):named a109 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_a_llist_b_prod_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$r (case_prod$c ?v2 )?v0 )(fun_app$r (case_prod$c ?v2 )?v1 )))):named a110 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_a_b_tllist_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$a ?v2 ?v0 )(case_prod$a ?v2 ?v1 )))):named a111 ))
(assert (! (forall ((?v0 B_a_llist_prod$ )(?v1 B_a_llist_prod$ )(?v2 B_a_llist_bool_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$e ?v2 ?v0 )(case_prod$e ?v2 ?v1 )))):named a112 ))
(assert (! (forall ((?v0 B_a_llist_prod$ )(?v1 B_a_llist_prod$ )(?v2 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$f ?v2 ?v0 )(case_prod$f ?v2 ?v1 )))):named a113 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$v (fun_app$w case_prod$d ?v2 )?v0 )(fun_app$v (fun_app$w case_prod$d ?v2 )?v1 )))):named a114 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_bool_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$l (fun_app$e case_prod$ ?v2 )?v0 )(fun_app$l (fun_app$e case_prod$ ?v2 )?v1 )))):named a115 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_b_prod$ ))(=> (= (fun_app$as (comp$a ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 (fun_app$r ?v1 ?v3 ))(fun_app$ ?v2 ?v3 )))):named a116 ))
(assert (! (forall ((?v0 A_llist_b_prod_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ )(?v3 A_llist_b_prod$ ))(=> (= (fun_app$at (comp$b ?v0 )?v1 )?v2 )(= (fun_app$am ?v0 (fun_app$r ?v1 ?v3 ))(fun_app$am ?v2 ?v3 )))):named a117 ))
(assert (! (forall ((?v0 Nat_a_fun_b_prod_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_b_prod_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ )(?v3 A_llist_b_prod$ ))(=> (= (fun_app$au (comp$c ?v0 )?v1 )?v2 )(= (fun_app$an ?v0 (fun_app$av ?v1 ?v3 ))(fun_app$am ?v2 ?v3 )))):named a118 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist$ ))(=> (= (fun_app$aw (comp$d ?v0 )?v1 )?v2 )(= (fun_app$ao ?v0 (fun_app$al ?v1 ?v3 ))(fun_app$al ?v2 ?v3 )))):named a119 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ )(?v3 A_llist_b_prod$ ))(=> (= (fun_app$ax (comp$e ?v0 )?v1 )?v2 )(= (fun_app$ao ?v0 (fun_app$am ?v1 ?v3 ))(fun_app$am ?v2 ?v3 )))):named a120 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ )(?v3 A_llist_b_prod$ ))(=> (= (fun_app$ar (comp$ ?v0 )?v1 )?v2 )(= (fun_app$al ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$am ?v2 ?v3 )))):named a121 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ ))(=> (= (fun_app$az (comp$g ?v0 )?v1 )?v2 )(= (fun_app$ar (comp$ ?v0 )(fun_app$ay (comp$f ?v1 )?v3 ))(fun_app$ar (comp$ ?v2 )?v3 )))):named a122 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ ))(=> (= (fun_app$aw (comp$d ?v0 )?v1 )?v2 )(= (fun_app$ax (comp$e ?v0 )(fun_app$ar (comp$ ?v1 )?v3 ))(fun_app$ar (comp$ ?v2 )?v3 )))):named a123 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_b_prod_fun$ ))(=> (= (fun_app$ar (comp$ ?v0 )?v1 )?v2 )(= (fun_app$ar (comp$ ?v0 )(fun_app$as (comp$a ?v1 )?v3 ))(fun_app$at (comp$b ?v2 )?v3 )))):named a124 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (= (fun_app$aw (comp$d ?v0 )?v1 )?v2 )(= (fun_app$aw (comp$d ?v0 )(fun_app$az (comp$g ?v1 )?v3 ))(fun_app$az (comp$g ?v2 )?v3 )))):named a125 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 Nat_a_fun_nat_a_fun_fun$ )(?v2 Nat_a_fun_nat_a_fun_fun$ )(?v3 A_llist_nat_a_fun_fun$ ))(=> (= (fun_app$ba (comp$h ?v0 )?v1 )?v2 )(= (fun_app$aw (comp$d ?v0 )(fun_app$aw (comp$d ?v1 )?v3 ))(fun_app$aw (comp$d ?v2 )?v3 )))):named a126 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_b_prod_a_llist_b_prod_fun$ ))(=> (= (fun_app$ay (comp$f ?v0 )?v1 )?v2 )(= (fun_app$ay (comp$f ?v0 )(fun_app$as (comp$a ?v1 )?v3 ))(fun_app$as (comp$a ?v2 )?v3 )))):named a127 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 Nat_a_fun_a_llist_fun$ )(?v2 Nat_a_fun_nat_a_fun_fun$ )(?v3 A_llist_b_prod_nat_a_fun_fun$ ))(=> (= (fun_app$bc (comp$j ?v0 )?v1 )?v2 )(= (fun_app$ar (comp$ ?v0 )(fun_app$bb (comp$i ?v1 )?v3 ))(fun_app$ax (comp$e ?v2 )?v3 )))):named a128 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ )(?v3 A_llist_a_llist_b_prod_fun$ ))(=> (= (fun_app$ax (comp$e ?v0 )?v1 )?v2 )(= (fun_app$aw (comp$d ?v0 )(fun_app$bd (comp$k ?v1 )?v3 ))(fun_app$bd (comp$k ?v2 )?v3 )))):named a129 ))
(assert (! (forall ((?v0 Nat_a_fun_a_llist_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_b_prod_a_llist_b_prod_fun$ ))(=> (= (fun_app$bb (comp$i ?v0 )?v1 )?v2 )(= (fun_app$bb (comp$i ?v0 )(fun_app$at (comp$b ?v1 )?v3 ))(fun_app$as (comp$a ?v2 )?v3 )))):named a130 ))
(assert (! (forall ((?v0 A_llist_b_prod_nat_a_fun_fun$ )(?v1 A_llist_a_llist_b_prod_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ ))(=> (= (fun_app$bd (comp$k ?v0 )?v1 )?v2 )(= (fun_app$at (comp$b ?v0 )(fun_app$be (comp$l ?v1 )?v3 ))(fun_app$ar (comp$ ?v2 )?v3 )))):named a131 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_nat_a_fun_fun$ ))(=> (= (fun_app$ay (comp$f ?v0 )?v1 )?v2 )(= (fun_app$ar (comp$ (fun_app$az (comp$g ?v3 )?v0 ))?v1 )(fun_app$ar (comp$ ?v3 )?v2 )))):named a132 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ )(?v3 Nat_a_fun_nat_a_fun_fun$ ))(=> (= (fun_app$ar (comp$ ?v0 )?v1 )?v2 )(= (fun_app$ar (comp$ (fun_app$aw (comp$d ?v3 )?v0 ))?v1 )(fun_app$ax (comp$e ?v3 )?v2 )))):named a133 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_nat_a_fun_fun$ ))(=> (= (fun_app$as (comp$a ?v0 )?v1 )?v2 )(= (fun_app$at (comp$b (fun_app$ar (comp$ ?v3 )?v0 ))?v1 )(fun_app$ar (comp$ ?v3 )?v2 )))):named a134 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 Nat_a_fun_nat_a_fun_fun$ ))(=> (= (fun_app$az (comp$g ?v0 )?v1 )?v2 )(= (fun_app$az (comp$g (fun_app$aw (comp$d ?v3 )?v0 ))?v1 )(fun_app$aw (comp$d ?v3 )?v2 )))):named a135 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 Nat_a_fun_nat_a_fun_fun$ ))(=> (= (fun_app$aw (comp$d ?v0 )?v1 )?v2 )(= (fun_app$aw (comp$d (fun_app$ba (comp$h ?v3 )?v0 ))?v1 )(fun_app$aw (comp$d ?v3 )?v2 )))):named a136 ))
(assert (! (forall ((?v0 A_llist_b_prod_nat_a_fun_fun$ )(?v1 A_llist_a_llist_b_prod_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 Nat_a_fun_nat_a_fun_fun$ ))(=> (= (fun_app$bd (comp$k ?v0 )?v1 )?v2 )(= (fun_app$bd (comp$k (fun_app$ax (comp$e ?v3 )?v0 ))?v1 )(fun_app$aw (comp$d ?v3 )?v2 )))):named a137 ))
(assert (! (forall ((?v0 Nat_a_fun_a_llist_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_nat_a_fun_fun$ ))(=> (= (fun_app$bb (comp$i ?v0 )?v1 )?v2 )(= (fun_app$ax (comp$e (fun_app$bc (comp$j ?v3 )?v0 ))?v1 )(fun_app$ar (comp$ ?v3 )?v2 )))):named a138 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (= (fun_app$as (comp$a ?v0 )?v1 )?v2 )(= (fun_app$as (comp$a (fun_app$ay (comp$f ?v3 )?v0 ))?v1 )(fun_app$ay (comp$f ?v3 )?v2 )))):named a139 ))
(assert (! (forall ((?v0 A_llist_a_llist_b_prod_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_b_prod_fun$ )(?v3 A_llist_b_prod_nat_a_fun_fun$ ))(=> (= (fun_app$be (comp$l ?v0 )?v1 )?v2 )(= (fun_app$ar (comp$ (fun_app$bd (comp$k ?v3 )?v0 ))?v1 )(fun_app$at (comp$b ?v3 )?v2 )))):named a140 ))
(assert (! (forall ((?v0 A_llist_b_prod_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ )(?v3 Nat_a_fun_a_llist_fun$ ))(=> (= (fun_app$at (comp$b ?v0 )?v1 )?v2 )(= (fun_app$as (comp$a (fun_app$bb (comp$i ?v3 )?v0 ))?v1 )(fun_app$bb (comp$i ?v3 )?v2 )))):named a141 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$ar (comp$ ?v0 )?v1 )(fun_app$ar (comp$ ?v2 )?v3 ))(= (fun_app$al ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$al ?v2 (fun_app$ ?v3 ?v4 ))))):named a142 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 Nat_a_fun_nat_a_fun_fun$ )(?v3 A_llist_nat_a_fun_fun$ )(?v4 A_llist$ ))(=> (= (fun_app$aw (comp$d ?v0 )?v1 )(fun_app$aw (comp$d ?v2 )?v3 ))(= (fun_app$ao ?v0 (fun_app$al ?v1 ?v4 ))(fun_app$ao ?v2 (fun_app$al ?v3 ?v4 ))))):named a143 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 Nat_a_fun_nat_a_fun_fun$ )(?v3 A_llist_b_prod_nat_a_fun_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$ar (comp$ ?v0 )?v1 )(fun_app$ax (comp$e ?v2 )?v3 ))(= (fun_app$al ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$ao ?v2 (fun_app$am ?v3 ?v4 ))))):named a144 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$ax (comp$e ?v0 )?v1 )(fun_app$ar (comp$ ?v2 )?v3 ))(= (fun_app$ao ?v0 (fun_app$am ?v1 ?v4 ))(fun_app$al ?v2 (fun_app$ ?v3 ?v4 ))))):named a145 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_b_prod_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$ar (comp$ ?v0 )?v1 )(fun_app$at (comp$b ?v2 )?v3 ))(= (fun_app$al ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$am ?v2 (fun_app$r ?v3 ?v4 ))))):named a146 ))
(assert (! (forall ((?v0 A_llist_b_prod_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$at (comp$b ?v0 )?v1 )(fun_app$ar (comp$ ?v2 )?v3 ))(= (fun_app$am ?v0 (fun_app$r ?v1 ?v4 ))(fun_app$al ?v2 (fun_app$ ?v3 ?v4 ))))):named a147 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 Nat_a_fun_nat_a_fun_fun$ )(?v3 A_llist_b_prod_nat_a_fun_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$ax (comp$e ?v0 )?v1 )(fun_app$ax (comp$e ?v2 )?v3 ))(= (fun_app$ao ?v0 (fun_app$am ?v1 ?v4 ))(fun_app$ao ?v2 (fun_app$am ?v3 ?v4 ))))):named a148 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 Nat_a_fun_b_prod_nat_a_fun_fun$ )(?v3 A_llist_b_prod_nat_a_fun_b_prod_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$ar (comp$ ?v0 )?v1 )(fun_app$au (comp$c ?v2 )?v3 ))(= (fun_app$al ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$an ?v2 (fun_app$av ?v3 ?v4 ))))):named a149 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_b_prod_a_llist_b_prod_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$as (comp$a ?v0 )?v1 )(fun_app$as (comp$a ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$r ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$r ?v3 ?v4 ))))):named a150 ))
(assert (! (forall ((?v0 A_llist_b_prod_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 Nat_a_fun_nat_a_fun_fun$ )(?v3 A_llist_b_prod_nat_a_fun_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$at (comp$b ?v0 )?v1 )(fun_app$ax (comp$e ?v2 )?v3 ))(= (fun_app$am ?v0 (fun_app$r ?v1 ?v4 ))(fun_app$ao ?v2 (fun_app$am ?v3 ?v4 ))))):named a151 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 A_llist_b_prod_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_b_prod_fun$ )(?v4 A_llist_b_prod_a_llist_b_prod_fun$ )(?v5 A_llist_b_prod_a_llist_b_prod_fun$ ))(=> (and (= (fun_app$ax (comp$e ?v0 )?v1 )(fun_app$at (comp$b ?v2 )?v3 ))(= (fun_app$bf (comp$m ?v3 )?v4 )?v5 ))(= (fun_app$ax (comp$e ?v0 )(fun_app$at (comp$b ?v1 )?v4 ))(fun_app$at (comp$b ?v2 )?v5 )))):named a152 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 Nat_a_fun_b_prod_nat_a_fun_fun$ )(?v3 A_llist_b_prod_nat_a_fun_b_prod_fun$ )(?v4 A_llist_a_llist_b_prod_fun$ )(?v5 A_llist_nat_a_fun_b_prod_fun$ ))(=> (and (= (fun_app$ax (comp$e ?v0 )?v1 )(fun_app$au (comp$c ?v2 )?v3 ))(= (fun_app$bg (comp$n ?v3 )?v4 )?v5 ))(= (fun_app$aw (comp$d ?v0 )(fun_app$bd (comp$k ?v1 )?v4 ))(fun_app$bh (comp$o ?v2 )?v5 )))):named a153 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 Nat_a_fun_b_prod_nat_a_fun_fun$ )(?v3 A_llist_b_prod_nat_a_fun_b_prod_fun$ )(?v4 A_llist_b_prod_a_llist_b_prod_fun$ )(?v5 A_llist_b_prod_nat_a_fun_b_prod_fun$ ))(=> (and (= (fun_app$ax (comp$e ?v0 )?v1 )(fun_app$au (comp$c ?v2 )?v3 ))(= (fun_app$bi (comp$p ?v3 )?v4 )?v5 ))(= (fun_app$ax (comp$e ?v0 )(fun_app$at (comp$b ?v1 )?v4 ))(fun_app$au (comp$c ?v2 )?v5 )))):named a154 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 Nat_a_fun_nat_a_fun_fun$ )(?v3 A_llist_b_prod_nat_a_fun_fun$ )(?v4 A_llist_a_llist_b_prod_fun$ )(?v5 A_llist_nat_a_fun_fun$ ))(=> (and (= (fun_app$ax (comp$e ?v0 )?v1 )(fun_app$ax (comp$e ?v2 )?v3 ))(= (fun_app$bd (comp$k ?v3 )?v4 )?v5 ))(= (fun_app$aw (comp$d ?v0 )(fun_app$bd (comp$k ?v1 )?v4 ))(fun_app$aw (comp$d ?v2 )?v5 )))):named a155 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_b_prod_nat_a_fun_fun$ )(?v2 Nat_a_fun_nat_a_fun_fun$ )(?v3 A_llist_b_prod_nat_a_fun_fun$ )(?v4 A_llist_b_prod_a_llist_b_prod_fun$ )(?v5 A_llist_b_prod_nat_a_fun_fun$ ))(=> (and (= (fun_app$ax (comp$e ?v0 )?v1 )(fun_app$ax (comp$e ?v2 )?v3 ))(= (fun_app$at (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$ax (comp$e ?v0 )(fun_app$at (comp$b ?v1 )?v4 ))(fun_app$ax (comp$e ?v2 )?v5 )))):named a156 ))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$ )(?v1 A_llist_nat_a_fun_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist_a_llist_fun$ )(?v4 A_llist_b_prod_a_llist_fun$ )(?v5 A_llist_b_prod_a_llist_fun$ ))(=> (and (= (fun_app$aw (comp$d ?v0 )?v1 )(fun_app$az (comp$g ?v2 )?v3 ))(= (fun_app$ay (comp$f ?v3 )?v4 )?v5 ))(= (fun_app$ax (comp$e ?v0 )(fun_app$ar (comp$ ?v1 )?v4 ))(fun_app$ar (comp$ ?v2 )?v5 )))):named a157 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 Nat_a_fun_nat_a_fun_fun$ )(?v3 A_llist_nat_a_fun_fun$ )(?v4 A_llist_b_prod_a_llist_fun$ )(?v5 A_llist_b_prod_nat_a_fun_fun$ ))(=> (and (= (fun_app$az (comp$g ?v0 )?v1 )(fun_app$aw (comp$d ?v2 )?v3 ))(= (fun_app$ar (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$ar (comp$ ?v0 )(fun_app$ay (comp$f ?v1 )?v4 ))(fun_app$ax (comp$e ?v2 )?v5 )))):named a158 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 A_llist_b_prod_a_llist_b_prod_fun$ )(?v5 A_llist_b_prod_a_llist_fun$ ))(=> (and (= (fun_app$ar (comp$ ?v0 )?v1 )(fun_app$ar (comp$ ?v2 )?v3 ))(= (fun_app$as (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$ar (comp$ ?v0 )(fun_app$as (comp$a ?v1 )?v4 ))(fun_app$ar (comp$ ?v2 )?v5 )))):named a159 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 A_llist_nat_a_fun_fun$ )(?v5 A_llist_nat_a_fun_fun$ ))(=> (and (= (fun_app$as (comp$a ?v0 )?v1 )(fun_app$ay (comp$f ?v2 )?v3 ))(= (fun_app$az (comp$g ?v4 )?v2 )?v5 ))(= (fun_app$at (comp$b (fun_app$ar (comp$ ?v4 )?v0 ))?v1 )(fun_app$ar (comp$ ?v5 )?v3 )))):named a160 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_b_prod_a_llist_b_prod_fun$ )(?v4 A_llist_nat_a_fun_fun$ )(?v5 A_llist_b_prod_nat_a_fun_fun$ ))(=> (and (= (fun_app$ay (comp$f ?v0 )?v1 )(fun_app$as (comp$a ?v2 )?v3 ))(= (fun_app$ar (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$ar (comp$ (fun_app$az (comp$g ?v4 )?v0 ))?v1 )(fun_app$at (comp$b ?v5 )?v3 )))):named a161 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 Nat_a_fun_nat_a_fun_fun$ )(?v5 A_llist_nat_a_fun_fun$ ))(=> (and (= (fun_app$ar (comp$ ?v0 )?v1 )(fun_app$ar (comp$ ?v2 )?v3 ))(= (fun_app$aw (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$ar (comp$ (fun_app$aw (comp$d ?v4 )?v0 ))?v1 )(fun_app$ar (comp$ ?v5 )?v3 )))):named a162 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_nat_a_fun_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ ))(=> (and (= (fun_app$ar (comp$ ?v0 )?v1 )(fun_app$ar (comp$ ?v2 )?v3 ))(=> (forall ((?v4 A_llist_b_prod$ ))(= (fun_app$al ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$al ?v2 (fun_app$ ?v3 ?v4 ))))false ))false )):named a163 ))
(assert (! (= internal_split$ case_prod$d ):named a164 ))
(assert (! (= internal_split$a case_prod$ ):named a165 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ ))(= (= (case_prod$a uvi$ ?v0 )(case_prod$a uvi$ ?v1 ))(fun_app$l (fun_app$v (fun_app$w case_prod$d uub$ )?v0 )?v1 ))):named a166 ))
(assert (! (forall ((?v0 A_llist_nat_a_fun_fun$ ))(= (fun_app$au (comp$c fst$b )(apfst$ ?v0 ))(fun_app$ar (comp$ ?v0 )uu$ ))):named a167 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ ))(= (fun_app$as (comp$a uu$ )(apfst$a ?v0 ))(fun_app$ay (comp$f ?v0 )uu$ ))):named a168 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ ))(= (case_prod$f (uvj$ ?v0 )(swap$ ?v1 ))(fun_app$v (fun_app$w case_prod$d ?v0 )?v1 ))):named a169 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_prod$ ))(= (case_prod$e (uvk$ ?v0 )(swap$ ?v1 ))(fun_app$l (fun_app$e case_prod$ ?v0 )?v1 ))):named a170 ))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 B_a_llist_prod$ ))(= (fun_app$v (fun_app$w case_prod$d (uvl$ ?v0 ))(swap$a ?v1 ))(case_prod$f ?v0 ?v1 ))):named a171 ))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$ )(?v1 B_a_llist_prod$ ))(= (fun_app$l (fun_app$e case_prod$ (uvm$ ?v0 ))(swap$a ?v1 ))(case_prod$e ?v0 ?v1 ))):named a172 ))
(assert (! (forall ((?v0 A_llist_b_prod$ ))(fun_app$f (fstsp$ ?v0 )(fst$ ?v0 ))):named a173 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist$ ))(=> (and (fun_app$f (fstsp$ ?v0 )?v1 )(=> (= ?v1 (fst$ ?v0 ))false ))false )):named a174 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist$ ))(! (= (fun_app$f (fstsp$ ?v0 )?v1 )(= ?v1 (fst$ ?v0 ))):pattern ((fun_app$f (fstsp$ ?v0 )?v1 )))):named a175 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_prod$ ))(= (fst$ (fun_app$r (apfst$a ?v0 )?v1 ))(fun_app$ae ?v0 (fst$ ?v1 )))):named a176 ))
(check-sat )
;(get-unsat-core )
