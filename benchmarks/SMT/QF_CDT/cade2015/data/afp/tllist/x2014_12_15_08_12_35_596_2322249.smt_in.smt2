;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_b_tllist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun is_TNil$ (A_b_tllist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(assert (! (not (lfinite$ (llist_of_tllist$ xs$ ))):named a0 ))
(assert (! (is_TNil$ xs$ ):named a1 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (and (=> (is_TNil$ ?v0 )false )(=> (not (is_TNil$ ?v0 ))false ))false )):named a2 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (and (=> (is_TNil$ ?v0 )false )(=> (not (is_TNil$ ?v0 ))false ))false )):named a3 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (not (lnull$ (llist_of_tllist$ ?v0 )))(not (is_TNil$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (lnull$ (llist_of_tllist$ ?v0 ))(is_TNil$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (= (llist_of_tllist$ ?v0 )lNil$ )(is_TNil$ ?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (=> (is_TNil$ ?v0 )(= (llist_of_tllist$ ?v0 )lNil$ )):pattern ((llist_of_tllist$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (not (is_TNil$ ?v0 ))(not (lnull$ (llist_of_tllist$ ?v0 ))))):named a8 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (is_TNil$ ?v0 )(lnull$ (llist_of_tllist$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a10 ))
(check-sat )
;(get-unsat-core )
