;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort C_set$ 0 )
(declare-sort D_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort C_d_fun$ 0 )
(declare-sort D_c_fun$ 0 )
(declare-sort D_d_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort C_d_prod_set$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort C_c_d_prod_fun$ 0 )
(declare-sort C_d_prod_c_fun$ 0 )
(declare-sort C_d_prod_d_fun$ 0 )
(declare-sort D_c_d_prod_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort C_d_bool_fun_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort D_c_bool_fun_fun$ 0 )
(declare-sort D_d_bool_fun_fun$ 0 )
(declare-sort D_llist_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort C_d_prod_bool_fun$ 0 )
(declare-sort A_b_prod_llist_set$ 0 )
(declare-sort C_d_prod_llist_set$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort C_d_prod_c_d_prod_fun$ 0 )
(declare-sort A_b_prod_llist_bool_fun$ 0 )
(declare-sort C_d_prod_llist_bool_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_fun$ 0 )
(declare-sort C_d_prod_llist_c_llist_fun$ 0 )
(declare-sort C_d_prod_llist_d_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_d_llist_bool_fun_fun$ 0 )
(declare-sort D_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort D_llist_d_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_set$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_set$ 0 )
(declare-sort C_d_prod_llist_c_llist_prod_set$ 0 )
(declare-sort C_d_prod_llist_d_llist_prod_set$ 0 )
(declare-sort A_b_prod_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_b_prod_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_a_b_prod_llist_bool_fun_fun$ 0 )
(declare-sort C_d_prod_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort C_d_prod_llist_d_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_c_d_prod_llist_bool_fun_fun$ 0 )
(declare-sort D_llist_c_d_prod_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_bool_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_bool_fun$ 0 )
(declare-sort C_d_prod_llist_c_llist_prod_bool_fun$ 0 )
(declare-sort C_d_prod_llist_d_llist_prod_bool_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_llist_set$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_llist_set$ 0 )
(declare-sort C_d_prod_llist_c_llist_prod_llist_set$ 0 )
(declare-sort C_d_prod_llist_d_llist_prod_llist_set$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_a_llist_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_b_llist_fun$ 0 )
(declare-sort C_d_prod_llist_c_llist_prod_c_llist_fun$ 0 )
(declare-sort C_d_prod_llist_d_llist_prod_d_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_llist_bool_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_llist_bool_fun$ 0 )
(declare-sort C_d_prod_llist_c_llist_prod_llist_bool_fun$ 0 )
(declare-sort C_d_prod_llist_d_llist_prod_llist_bool_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_a_b_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_a_b_prod_llist_fun$ 0 )
(declare-sort C_d_prod_llist_c_llist_prod_c_d_prod_llist_fun$ 0 )
(declare-sort C_d_prod_llist_d_llist_prod_c_d_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_llist_a_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_llist_b_llist_llist_bool_fun_fun$ 0 )
(declare-sort C_d_prod_llist_llist_c_llist_llist_bool_fun_fun$ 0 )
(declare-sort C_d_prod_llist_llist_d_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_llist_a_llist_llist_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_llist_b_llist_llist_fun$ 0 )
(declare-sort C_d_prod_llist_c_llist_prod_llist_c_llist_llist_fun$ 0 )
(declare-sort C_d_prod_llist_d_llist_prod_llist_d_llist_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_llist_a_llist_llist_prod_set$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_llist_b_llist_llist_prod_set$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_fun$ 0 )
(declare-sort C_d_prod_llist_c_llist_prod_llist_c_d_prod_llist_llist_fun$ 0 )
(declare-sort C_d_prod_llist_d_llist_prod_llist_c_d_prod_llist_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_llist_a_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_llist_b_llist_llist_bool_fun_fun$ 0 )
(declare-sort C_d_prod_llist_c_llist_prod_llist_c_llist_llist_bool_fun_fun$ 0 )
(declare-sort C_d_prod_llist_d_llist_prod_llist_d_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_llist_a_llist_llist_prod_bool_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_llist_b_llist_llist_prod_bool_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_prod_set$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_prod_set$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_llist_a_b_prod_llist_a_llist_prod_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_llist_a_b_prod_llist_b_llist_prod_llist_bool_fun_fun$ 0 )
(declare-sort C_d_prod_llist_c_llist_prod_llist_c_d_prod_llist_llist_bool_fun_fun$ 0 )
(declare-sort C_d_prod_llist_d_llist_prod_llist_c_d_prod_llist_llist_bool_fun_fun$ 0 )
(declare-sort C_d_prod_llist_llist_c_d_prod_llist_c_llist_prod_llist_bool_fun_fun$ 0 )
(declare-sort C_d_prod_llist_llist_c_d_prod_llist_d_llist_prod_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_prod_bool_fun$ 0 )
(declare-sort A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_prod_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-sort B_llist$ 0)
(declare-sort B_d_tllist$ 0)
(declare-fun lNil$a ()A_b_prod_llist$)
(declare-fun lhd$a (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$a (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$a (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun terminal$ (B_d_tllist$)D$)
(declare-fun tNil$ (D$ )B_d_tllist$)
(declare-fun thd$ (B_d_tllist$)B$)
(declare-fun ttl$ (B_d_tllist$)B_d_tllist$)
(declare-fun tCons$ (B$ B_d_tllist$ )B_d_tllist$)
(declare-datatypes ()((C_d_prod$ (pair$a (fst$a C$ )(snd$a D$ )))))
(declare-sort A_b_prod_c_d_prod_tllist$ 0)
(declare-sort A_c_tllist$ 0)
(declare-sort C_d_prod_llist$ 0)
(declare-sort D_llist$ 0)
(declare-fun terminal$a (A_b_prod_c_d_prod_tllist$)C_d_prod$)
(declare-fun tNil$a (C_d_prod$ )A_b_prod_c_d_prod_tllist$)
(declare-fun thd$a (A_b_prod_c_d_prod_tllist$)A_b_prod$)
(declare-fun ttl$a (A_b_prod_c_d_prod_tllist$)A_b_prod_c_d_prod_tllist$)
(declare-fun tCons$a (A_b_prod$ A_b_prod_c_d_prod_tllist$ )A_b_prod_c_d_prod_tllist$)
(declare-fun terminal$b (A_c_tllist$)C$)
(declare-fun tNil$b (C$ )A_c_tllist$)
(declare-fun thd$b (A_c_tllist$)A$)
(declare-fun ttl$b (A_c_tllist$)A_c_tllist$)
(declare-fun tCons$b (A$ A_c_tllist$ )A_c_tllist$)
(declare-fun lNil$c ()C_d_prod_llist$)
(declare-fun lhd$c (C_d_prod_llist$)C_d_prod$)
(declare-fun ltl$c (C_d_prod_llist$)C_d_prod_llist$)
(declare-fun lCons$c (C_d_prod$ C_d_prod_llist$ )C_d_prod_llist$)
(declare-fun lNil$d ()D_llist$)
(declare-fun lhd$d (D_llist$)D$)
(declare-fun ltl$d (D_llist$)D_llist$)
(declare-fun lCons$d (D$ D_llist$ )D_llist$)
(declare-datatypes ()((C_d_prod_llist_d_llist_prod$ (pair$b (fst$b C_d_prod_llist$ )(snd$b D_llist$ )))))
(declare-sort C_llist$ 0)
(declare-fun lNil$e ()C_llist$)
(declare-fun lhd$e (C_llist$)C$)
(declare-fun ltl$e (C_llist$)C_llist$)
(declare-fun lCons$e (C$ C_llist$ )C_llist$)
(declare-datatypes ()((C_d_prod_llist_c_llist_prod$ (pair$c (fst$c C_d_prod_llist$ )(snd$c C_llist$ )))(A_b_prod_llist_b_llist_prod$ (pair$d (fst$d A_b_prod_llist$ )(snd$d B_llist$ )))(A_b_prod_llist_a_llist_prod$ (pair$e (fst$e A_b_prod_llist$ )(snd$e A_llist$ )))))
(declare-sort A_b_prod_llist_llist$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_llist$ 0)
(declare-fun lNil$f ()A_b_prod_llist_llist$)
(declare-fun lhd$f (A_b_prod_llist_llist$)A_b_prod_llist$)
(declare-fun ltl$f (A_b_prod_llist_llist$)A_b_prod_llist_llist$)
(declare-fun lCons$f (A_b_prod_llist$ A_b_prod_llist_llist$ )A_b_prod_llist_llist$)
(declare-fun lNil$g ()A_b_prod_llist_a_llist_prod_llist$)
(declare-fun lhd$g (A_b_prod_llist_a_llist_prod_llist$)A_b_prod_llist_a_llist_prod$)
(declare-fun ltl$g (A_b_prod_llist_a_llist_prod_llist$)A_b_prod_llist_a_llist_prod_llist$)
(declare-fun lCons$g (A_b_prod_llist_a_llist_prod$ A_b_prod_llist_a_llist_prod_llist$ )A_b_prod_llist_a_llist_prod_llist$)
(declare-datatypes ()((A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_prod$ (pair$f (fst$f A_b_prod_llist_a_llist_prod_llist$ )(snd$f A_b_prod_llist_llist$ )))))
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$h ()A_llist_llist$)
(declare-fun lhd$h (A_llist_llist$)A_llist$)
(declare-fun ltl$h (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$h (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-datatypes ()((A_b_prod_llist_a_llist_prod_llist_a_llist_llist_prod$ (pair$g (fst$g A_b_prod_llist_a_llist_prod_llist$ )(snd$g A_llist_llist$ )))))
(declare-sort A_b_prod_llist_b_llist_prod_llist$ 0)
(declare-fun lNil$i ()A_b_prod_llist_b_llist_prod_llist$)
(declare-fun lhd$i (A_b_prod_llist_b_llist_prod_llist$)A_b_prod_llist_b_llist_prod$)
(declare-fun ltl$i (A_b_prod_llist_b_llist_prod_llist$)A_b_prod_llist_b_llist_prod_llist$)
(declare-fun lCons$i (A_b_prod_llist_b_llist_prod$ A_b_prod_llist_b_llist_prod_llist$ )A_b_prod_llist_b_llist_prod_llist$)
(declare-datatypes ()((A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_prod$ (pair$h (fst$h A_b_prod_llist_b_llist_prod_llist$ )(snd$h A_b_prod_llist_llist$ )))))
(declare-sort B_llist_llist$ 0)
(declare-fun lNil$j ()B_llist_llist$)
(declare-fun lhd$j (B_llist_llist$)B_llist$)
(declare-fun ltl$j (B_llist_llist$)B_llist_llist$)
(declare-fun lCons$j (B_llist$ B_llist_llist$ )B_llist_llist$)
(declare-datatypes ()((A_b_prod_llist_b_llist_prod_llist_b_llist_llist_prod$ (pair$i (fst$i A_b_prod_llist_b_llist_prod_llist$ )(snd$i B_llist_llist$ )))))
(declare-sort C_d_prod_llist_llist$ 0)
(declare-sort D_llist_llist$ 0)
(declare-sort C_d_prod_llist_d_llist_prod_llist$ 0)
(declare-sort C_llist_llist$ 0)
(declare-sort C_d_prod_llist_c_llist_prod_llist$ 0)
(declare-fun lNil$k ()C_d_prod_llist_llist$)
(declare-fun lhd$k (C_d_prod_llist_llist$)C_d_prod_llist$)
(declare-fun ltl$k (C_d_prod_llist_llist$)C_d_prod_llist_llist$)
(declare-fun lCons$k (C_d_prod_llist$ C_d_prod_llist_llist$ )C_d_prod_llist_llist$)
(declare-fun lNil$l ()D_llist_llist$)
(declare-fun lhd$l (D_llist_llist$)D_llist$)
(declare-fun ltl$l (D_llist_llist$)D_llist_llist$)
(declare-fun lCons$l (D_llist$ D_llist_llist$ )D_llist_llist$)
(declare-fun lNil$m ()C_d_prod_llist_d_llist_prod_llist$)
(declare-fun lhd$m (C_d_prod_llist_d_llist_prod_llist$)C_d_prod_llist_d_llist_prod$)
(declare-fun ltl$m (C_d_prod_llist_d_llist_prod_llist$)C_d_prod_llist_d_llist_prod_llist$)
(declare-fun lCons$m (C_d_prod_llist_d_llist_prod$ C_d_prod_llist_d_llist_prod_llist$ )C_d_prod_llist_d_llist_prod_llist$)
(declare-fun lNil$n ()C_llist_llist$)
(declare-fun lhd$n (C_llist_llist$)C_llist$)
(declare-fun ltl$n (C_llist_llist$)C_llist_llist$)
(declare-fun lCons$n (C_llist$ C_llist_llist$ )C_llist_llist$)
(declare-fun lNil$o ()C_d_prod_llist_c_llist_prod_llist$)
(declare-fun lhd$o (C_d_prod_llist_c_llist_prod_llist$)C_d_prod_llist_c_llist_prod$)
(declare-fun ltl$o (C_d_prod_llist_c_llist_prod_llist$)C_d_prod_llist_c_llist_prod_llist$)
(declare-fun lCons$o (C_d_prod_llist_c_llist_prod$ C_d_prod_llist_c_llist_prod_llist$ )C_d_prod_llist_c_llist_prod_llist$)
(declare-fun a$ ()A_llist$ )
(declare-fun b$ ()C$ )
(declare-fun y$ ()A_b_bool_fun_fun$ )
(declare-fun aa$ ()B_llist$ )
(declare-fun ba$ ()D$ )
(declare-fun bb$ ()A_b_prod_c_d_prod_tllist$ )
(declare-fun uu$ ()A_b_prod_llist_bool_fun$ )
(declare-fun ya$ ()C_d_bool_fun_fun$ )
(declare-fun grp$ (A_b_prod_llist_set$ A_b_prod_llist_a_llist_fun$ )A_b_prod_llist_a_llist_bool_fun_fun$ )
(declare-fun uua$ ()A_b_prod_a_fun$ )
(declare-fun uub$ ()A_b_prod_b_fun$ )
(declare-fun uuc$ ()C_d_prod_d_fun$ )
(declare-fun uud$ ()C_d_prod_c_fun$ )
(declare-fun uue$ ()A_b_prod_a_b_prod_fun$ )
(declare-fun uuf$ ()C_d_prod_c_d_prod_fun$ )
(declare-fun uug$ ()A_a_fun$ )
(declare-fun uuh$ ()C_c_fun$ )
(declare-fun uui$ ()B_b_fun$ )
(declare-fun uuj$ ()D_d_fun$ )
(declare-fun uuk$ (Bool C_d_prod_llist_d_llist_bool_fun_fun$ )C_d_prod_llist_d_llist_bool_fun_fun$ )
(declare-fun uul$ (Bool C_d_prod_llist_c_llist_bool_fun_fun$ )C_d_prod_llist_c_llist_bool_fun_fun$ )
(declare-fun uum$ (Bool A_b_prod_llist_b_llist_bool_fun_fun$ )A_b_prod_llist_b_llist_bool_fun_fun$ )
(declare-fun uun$ (Bool A_b_prod_llist_a_llist_bool_fun_fun$ )A_b_prod_llist_a_llist_bool_fun_fun$ )
(declare-fun uuo$ (Bool A_b_bool_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun uup$ (Bool C_d_bool_fun_fun$ )C_d_bool_fun_fun$ )
(declare-fun uuq$ (C_d_prod_llist_d_llist_bool_fun_fun$ )C_d_prod_llist_d_llist_prod_llist_bool_fun$ )
(declare-fun uur$ ()C_d_prod_llist_d_llist_prod_c_d_prod_llist_fun$ )
(declare-fun uus$ ()C_d_prod_llist_d_llist_prod_d_llist_fun$ )
(declare-fun uut$ (C_d_prod_llist_c_llist_bool_fun_fun$ )C_d_prod_llist_c_llist_prod_llist_bool_fun$ )
(declare-fun uuu$ ()C_d_prod_llist_c_llist_prod_c_d_prod_llist_fun$ )
(declare-fun uuv$ ()C_d_prod_llist_c_llist_prod_c_llist_fun$ )
(declare-fun uuw$ (A_b_prod_llist_b_llist_bool_fun_fun$ )A_b_prod_llist_b_llist_prod_llist_bool_fun$ )
(declare-fun uux$ ()A_b_prod_llist_b_llist_prod_a_b_prod_llist_fun$ )
(declare-fun uuy$ ()A_b_prod_llist_b_llist_prod_b_llist_fun$ )
(declare-fun uuz$ (A_b_prod_llist_a_llist_bool_fun_fun$ )A_b_prod_llist_a_llist_prod_llist_bool_fun$ )
(declare-fun uva$ ()A_b_prod_llist_a_llist_prod_a_b_prod_llist_fun$ )
(declare-fun uvb$ ()A_b_prod_llist_a_llist_prod_a_llist_fun$ )
(declare-fun uvc$ (A_b_bool_fun_fun$ )A_b_prod_llist_bool_fun$ )
(declare-fun uvd$ (C_d_bool_fun_fun$ )C_d_prod_llist_bool_fun$ )
(declare-fun grp$a (A_b_prod_llist_set$ A_b_prod_llist_b_llist_fun$ )A_b_prod_llist_b_llist_bool_fun_fun$ )
(declare-fun grp$b (C_set$ C_d_fun$ )C_d_bool_fun_fun$ )
(declare-fun grp$c (A_set$ A_b_fun$ )A_b_bool_fun_fun$ )
(declare-fun grp$d (C_d_prod_llist_set$ C_d_prod_llist_d_llist_fun$ )C_d_prod_llist_d_llist_bool_fun_fun$ )
(declare-fun grp$e (C_d_prod_llist_set$ C_d_prod_llist_c_llist_fun$ )C_d_prod_llist_c_llist_bool_fun_fun$ )
(declare-fun grp$f (A_b_prod_llist_a_llist_prod_llist_set$ A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_fun$ )A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_bool_fun_fun$ )
(declare-fun grp$g (A_b_prod_llist_a_llist_prod_llist_set$ A_b_prod_llist_a_llist_prod_llist_a_llist_llist_fun$ )A_b_prod_llist_a_llist_prod_llist_a_llist_llist_bool_fun_fun$ )
(declare-fun grp$h (A_b_prod_llist_b_llist_prod_llist_set$ A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_fun$ )A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_bool_fun_fun$ )
(declare-fun grp$i (A_b_prod_llist_b_llist_prod_llist_set$ A_b_prod_llist_b_llist_prod_llist_b_llist_llist_fun$ )A_b_prod_llist_b_llist_prod_llist_b_llist_llist_bool_fun_fun$ )
(declare-fun grp$j (C_d_prod_llist_d_llist_prod_llist_set$ C_d_prod_llist_d_llist_prod_llist_c_d_prod_llist_llist_fun$ )C_d_prod_llist_d_llist_prod_llist_c_d_prod_llist_llist_bool_fun_fun$ )
(declare-fun grp$k (C_d_prod_llist_d_llist_prod_llist_set$ C_d_prod_llist_d_llist_prod_llist_d_llist_llist_fun$ )C_d_prod_llist_d_llist_prod_llist_d_llist_llist_bool_fun_fun$ )
(declare-fun grp$l (C_d_prod_llist_c_llist_prod_llist_set$ C_d_prod_llist_c_llist_prod_llist_c_d_prod_llist_llist_fun$ )C_d_prod_llist_c_llist_prod_llist_c_d_prod_llist_llist_bool_fun_fun$ )
(declare-fun grp$m (C_d_prod_llist_c_llist_prod_llist_set$ C_d_prod_llist_c_llist_prod_llist_c_llist_llist_fun$ )C_d_prod_llist_c_llist_prod_llist_c_llist_llist_bool_fun_fun$ )
(declare-fun lmap$ (A_b_prod_a_fun$ )A_b_prod_llist_a_llist_fun$ )
(declare-fun lset$ (A_b_prod_llist$ )A_b_prod_set$ )
(declare-fun tmap$ (A_b_prod_b_fun$ C_d_prod_d_fun$ A_b_prod_c_d_prod_tllist$ )B_d_tllist$ )
(declare-fun tset$ (A_b_prod_c_d_prod_tllist$ )A_b_prod_set$ )
(declare-fun lmap$a (A_b_prod_b_fun$ )A_b_prod_llist_b_llist_fun$ )
(declare-fun lmap$b (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$c (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$d (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lmap$e (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$f (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$g (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$h (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$i (C_d_prod_llist_d_llist_prod_c_d_prod_llist_fun$ )C_d_prod_llist_d_llist_prod_llist_c_d_prod_llist_llist_fun$ )
(declare-fun lmap$j (C_d_prod_llist_d_llist_prod_d_llist_fun$ )C_d_prod_llist_d_llist_prod_llist_d_llist_llist_fun$ )
(declare-fun lmap$k (C_d_prod_llist_c_llist_prod_c_d_prod_llist_fun$ )C_d_prod_llist_c_llist_prod_llist_c_d_prod_llist_llist_fun$ )
(declare-fun lmap$l (C_d_prod_llist_c_llist_prod_c_llist_fun$ )C_d_prod_llist_c_llist_prod_llist_c_llist_llist_fun$ )
(declare-fun lmap$m (A_b_prod_llist_b_llist_prod_a_b_prod_llist_fun$ )A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_fun$ )
(declare-fun lmap$n (A_b_prod_llist_b_llist_prod_b_llist_fun$ )A_b_prod_llist_b_llist_prod_llist_b_llist_llist_fun$ )
(declare-fun lmap$o (A_b_prod_llist_a_llist_prod_a_b_prod_llist_fun$ )A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_fun$ )
(declare-fun lmap$p (A_b_prod_llist_a_llist_prod_a_llist_fun$ )A_b_prod_llist_a_llist_prod_llist_a_llist_llist_fun$ )
(declare-fun lmap$q (C_d_prod_c_fun$ )C_d_prod_llist_c_llist_fun$ )
(declare-fun lmap$r (C_d_prod_d_fun$ )C_d_prod_llist_d_llist_fun$ )
(declare-fun lset$a (C_d_prod_llist_d_llist_prod_llist$ )C_d_prod_llist_d_llist_prod_set$ )
(declare-fun lset$b (C_d_prod_llist_c_llist_prod_llist$ )C_d_prod_llist_c_llist_prod_set$ )
(declare-fun lset$c (A_b_prod_llist_b_llist_prod_llist$ )A_b_prod_llist_b_llist_prod_set$ )
(declare-fun lset$d (A_b_prod_llist_a_llist_prod_llist$ )A_b_prod_llist_a_llist_prod_set$ )
(declare-fun lset$e (C_d_prod_llist$ )C_d_prod_set$ )
(declare-fun lset$f (B_llist$ )B_set$ )
(declare-fun lset$g (A_llist$ )A_set$ )
(declare-fun tmap$a (A_b_prod_a_fun$ C_d_prod_c_fun$ A_b_prod_c_d_prod_tllist$ )A_c_tllist$ )
(declare-fun tmap$b (B_a_b_prod_fun$ D_c_d_prod_fun$ B_d_tllist$ )A_b_prod_c_d_prod_tllist$ )
(declare-fun tmap$c (A_a_b_prod_fun$ C_c_d_prod_fun$ A_c_tllist$ )A_b_prod_c_d_prod_tllist$ )
(declare-fun tmap$d (A_b_prod_a_b_prod_fun$ C_d_prod_c_d_prod_fun$ A_b_prod_c_d_prod_tllist$ )A_b_prod_c_d_prod_tllist$ )
(declare-fun tmap$e (B_b_fun$ D_d_fun$ B_d_tllist$ )B_d_tllist$ )
(declare-fun tmap$f (B_a_fun$ D_c_fun$ B_d_tllist$ )A_c_tllist$ )
(declare-fun tmap$g (A_b_fun$ C_d_fun$ A_c_tllist$ )B_d_tllist$ )
(declare-fun tmap$h (A_a_fun$ C_c_fun$ A_c_tllist$ )A_c_tllist$ )
(declare-fun tset$a (B_d_tllist$ )B_set$ )
(declare-fun tset$b (A_c_tllist$ )A_set$ )
(declare-fun member$ (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun collect$ (A_b_prod_bool_fun$ )A_b_prod_set$ )
(declare-fun fun_app$ (A_b_prod_llist_bool_fun$ A_b_prod_llist$ )Bool )
(declare-fun less_eq$ (A_b_prod_set$ A_b_prod_set$ )Bool )
(declare-fun member$a (C_d_prod$ C_d_prod_set$ )Bool )
(declare-fun member$b (B$ B_set$ )Bool )
(declare-fun member$c (D$ D_set$ )Bool )
(declare-fun member$d (A$ A_set$ )Bool )
(declare-fun member$e (C$ C_set$ )Bool )
(declare-fun member$f (A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_prod$ A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_prod_set$ )Bool )
(declare-fun member$g (A_b_prod_llist_a_llist_prod_llist$ A_b_prod_llist_a_llist_prod_llist_set$ )Bool )
(declare-fun member$h (A_b_prod_llist_a_llist_prod_llist_a_llist_llist_prod$ A_b_prod_llist_a_llist_prod_llist_a_llist_llist_prod_set$ )Bool )
(declare-fun member$i (A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_prod$ A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_prod_set$ )Bool )
(declare-fun member$j (A_b_prod_llist_b_llist_prod_llist$ A_b_prod_llist_b_llist_prod_llist_set$ )Bool )
(declare-fun member$k (A_b_prod_llist_b_llist_prod_llist_b_llist_llist_prod$ A_b_prod_llist_b_llist_prod_llist_b_llist_llist_prod_set$ )Bool )
(declare-fun member$l (C_d_prod_llist_c_llist_prod$ C_d_prod_llist_c_llist_prod_set$ )Bool )
(declare-fun member$m (C_d_prod_llist$ C_d_prod_llist_set$ )Bool )
(declare-fun member$n (C_d_prod_llist_d_llist_prod$ C_d_prod_llist_d_llist_prod_set$ )Bool )
(declare-fun member$o (A_b_prod_llist_a_llist_prod$ A_b_prod_llist_a_llist_prod_set$ )Bool )
(declare-fun member$p (A_b_prod_llist$ A_b_prod_llist_set$ )Bool )
(declare-fun member$q (A_b_prod_llist_b_llist_prod$ A_b_prod_llist_b_llist_prod_set$ )Bool )
(declare-fun collect$a (C_d_prod_llist_d_llist_prod_bool_fun$ )C_d_prod_llist_d_llist_prod_set$ )
(declare-fun collect$b (C_d_prod_llist_c_llist_prod_bool_fun$ )C_d_prod_llist_c_llist_prod_set$ )
(declare-fun collect$c (A_b_prod_llist_b_llist_prod_bool_fun$ )A_b_prod_llist_b_llist_prod_set$ )
(declare-fun collect$d (A_b_prod_llist_a_llist_prod_bool_fun$ )A_b_prod_llist_a_llist_prod_set$ )
(declare-fun collect$e (C_d_prod_bool_fun$ )C_d_prod_set$ )
(declare-fun collect$f (A_b_prod_llist_bool_fun$ )A_b_prod_llist_set$ )
(declare-fun collect$g (A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_prod_bool_fun$ )A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_prod_set$ )
(declare-fun collect$h (A_b_prod_llist_a_llist_prod_llist_a_llist_llist_prod_bool_fun$ )A_b_prod_llist_a_llist_prod_llist_a_llist_llist_prod_set$ )
(declare-fun collect$i (A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_prod_bool_fun$ )A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_prod_set$ )
(declare-fun collect$j (A_b_prod_llist_b_llist_prod_llist_b_llist_llist_prod_bool_fun$ )A_b_prod_llist_b_llist_prod_llist_b_llist_llist_prod_set$ )
(declare-fun collect$k (C_d_prod_llist_d_llist_prod_llist_bool_fun$ )C_d_prod_llist_d_llist_prod_llist_set$ )
(declare-fun collect$l (C_d_prod_llist_c_llist_prod_llist_bool_fun$ )C_d_prod_llist_c_llist_prod_llist_set$ )
(declare-fun collect$m (A_b_prod_llist_b_llist_prod_llist_bool_fun$ )A_b_prod_llist_b_llist_prod_llist_set$ )
(declare-fun collect$n (A_b_prod_llist_a_llist_prod_llist_bool_fun$ )A_b_prod_llist_a_llist_prod_llist_set$ )
(declare-fun collect$o (C_d_prod_llist_bool_fun$ )C_d_prod_llist_set$ )
(declare-fun fun_app$a (C_d_prod_llist_d_llist_prod_d_llist_fun$ C_d_prod_llist_d_llist_prod$ )D_llist$ )
(declare-fun fun_app$b (C_d_prod_llist_c_llist_prod_c_llist_fun$ C_d_prod_llist_c_llist_prod$ )C_llist$ )
(declare-fun fun_app$c (A_b_prod_llist_b_llist_prod_b_llist_fun$ A_b_prod_llist_b_llist_prod$ )B_llist$ )
(declare-fun fun_app$d (A_b_prod_llist_a_llist_prod_a_llist_fun$ A_b_prod_llist_a_llist_prod$ )A_llist$ )
(declare-fun fun_app$e (C_d_prod_d_fun$ C_d_prod$ )D$ )
(declare-fun fun_app$f (A_b_prod_b_fun$ A_b_prod$ )B$ )
(declare-fun fun_app$g (C_d_prod_llist_d_llist_prod_c_d_prod_llist_fun$ C_d_prod_llist_d_llist_prod$ )C_d_prod_llist$ )
(declare-fun fun_app$h (C_d_prod_llist_c_llist_prod_c_d_prod_llist_fun$ C_d_prod_llist_c_llist_prod$ )C_d_prod_llist$ )
(declare-fun fun_app$i (A_b_prod_llist_b_llist_prod_a_b_prod_llist_fun$ A_b_prod_llist_b_llist_prod$ )A_b_prod_llist$ )
(declare-fun fun_app$j (A_b_prod_llist_a_llist_prod_a_b_prod_llist_fun$ A_b_prod_llist_a_llist_prod$ )A_b_prod_llist$ )
(declare-fun fun_app$k (C_d_prod_c_fun$ C_d_prod$ )C$ )
(declare-fun fun_app$l (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$m (C_d_prod_llist_d_llist_prod_llist_bool_fun$ C_d_prod_llist_d_llist_prod_llist$ )Bool )
(declare-fun fun_app$n (C_d_prod_llist_c_llist_prod_llist_bool_fun$ C_d_prod_llist_c_llist_prod_llist$ )Bool )
(declare-fun fun_app$o (A_b_prod_llist_b_llist_prod_llist_bool_fun$ A_b_prod_llist_b_llist_prod_llist$ )Bool )
(declare-fun fun_app$p (A_b_prod_llist_a_llist_prod_llist_bool_fun$ A_b_prod_llist_a_llist_prod_llist$ )Bool )
(declare-fun fun_app$q (C_d_prod_llist_bool_fun$ C_d_prod_llist$ )Bool )
(declare-fun fun_app$r (D_llist_bool_fun$ D_llist$ )Bool )
(declare-fun fun_app$s (C_d_prod_llist_d_llist_bool_fun_fun$ C_d_prod_llist$ )D_llist_bool_fun$ )
(declare-fun fun_app$t (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun fun_app$u (C_d_prod_llist_c_llist_bool_fun_fun$ C_d_prod_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$v (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$w (A_b_prod_llist_b_llist_bool_fun_fun$ A_b_prod_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$x (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$y (A_b_prod_llist_a_llist_bool_fun_fun$ A_b_prod_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$z (D_bool_fun$ D$ )Bool )
(declare-fun less_eq$a (C_d_prod_llist_d_llist_prod_set$ C_d_prod_llist_d_llist_prod_set$ )Bool )
(declare-fun less_eq$b (C_d_prod_llist_c_llist_prod_set$ C_d_prod_llist_c_llist_prod_set$ )Bool )
(declare-fun less_eq$c (A_b_prod_llist_b_llist_prod_set$ A_b_prod_llist_b_llist_prod_set$ )Bool )
(declare-fun less_eq$d (A_b_prod_llist_a_llist_prod_set$ A_b_prod_llist_a_llist_prod_set$ )Bool )
(declare-fun less_eq$e (C_d_prod_set$ C_d_prod_set$ )Bool )
(declare-fun relcompp$ (A_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_b_llist_bool_fun_fun$ )A_llist_b_llist_bool_fun_fun$ )
(declare-fun case_prod$ (A_b_bool_fun_fun$ )A_b_prod_bool_fun$ )
(declare-fun conversep$ (A_b_prod_llist_a_llist_bool_fun_fun$ )A_llist_a_b_prod_llist_bool_fun_fun$ )
(declare-fun fun_app$aa (C_d_bool_fun_fun$ C$ )D_bool_fun$ )
(declare-fun fun_app$ab (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$ac (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$ad (C_d_prod_c_d_prod_fun$ C_d_prod$ )C_d_prod$ )
(declare-fun fun_app$ae (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$af (D_d_fun$ D$ )D$ )
(declare-fun fun_app$ag (C_c_fun$ C$ )C$ )
(declare-fun fun_app$ah (B_b_fun$ B$ )B$ )
(declare-fun fun_app$ai (A_a_fun$ A$ )A$ )
(declare-fun fun_app$aj (A_llist_b_llist_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$ak (D_c_d_prod_fun$ D$ )C_d_prod$ )
(declare-fun fun_app$al (C_c_d_prod_fun$ C$ )C_d_prod$ )
(declare-fun fun_app$am (A_b_prod_llist_b_llist_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun fun_app$an (A_b_prod_llist_a_llist_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun fun_app$ao (D_c_fun$ D$ )C$ )
(declare-fun fun_app$ap (C_d_fun$ C$ )D$ )
(declare-fun fun_app$aq (B_a_b_prod_fun$ B$ )A_b_prod$ )
(declare-fun fun_app$ar (A_a_b_prod_fun$ A$ )A_b_prod$ )
(declare-fun fun_app$as (A_b_fun$ A$ )B$ )
(declare-fun fun_app$at (B_a_fun$ B$ )A$ )
(declare-fun fun_app$au (C_d_prod_llist_d_llist_prod_bool_fun$ C_d_prod_llist_d_llist_prod$ )Bool )
(declare-fun fun_app$av (C_d_prod_llist_c_llist_prod_bool_fun$ C_d_prod_llist_c_llist_prod$ )Bool )
(declare-fun fun_app$aw (A_b_prod_llist_b_llist_prod_bool_fun$ A_b_prod_llist_b_llist_prod$ )Bool )
(declare-fun fun_app$ax (A_b_prod_llist_a_llist_prod_bool_fun$ A_b_prod_llist_a_llist_prod$ )Bool )
(declare-fun fun_app$ay (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$az (C_d_prod_bool_fun$ C_d_prod$ )Bool )
(declare-fun fun_app$ba (D_llist_c_d_prod_llist_bool_fun_fun$ D_llist$ )C_d_prod_llist_bool_fun$ )
(declare-fun fun_app$bb (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$bc (C_llist_c_d_prod_llist_bool_fun_fun$ C_llist$ )C_d_prod_llist_bool_fun$ )
(declare-fun fun_app$bd (B_llist_a_b_prod_llist_bool_fun_fun$ B_llist$ )A_b_prod_llist_bool_fun$ )
(declare-fun fun_app$be (A_llist_a_b_prod_llist_bool_fun_fun$ A_llist$ )A_b_prod_llist_bool_fun$ )
(declare-fun fun_app$bf (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$bg (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$bh (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$bi (D_c_bool_fun_fun$ D$ )C_bool_fun$ )
(declare-fun relcompp$a (B_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_a_llist_bool_fun_fun$ )B_llist_a_llist_bool_fun_fun$ )
(declare-fun relcompp$b (B_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_b_llist_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun relcompp$c (A_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun relcompp$d (D_c_bool_fun_fun$ C_d_bool_fun_fun$ )D_d_bool_fun_fun$ )
(declare-fun relcompp$e (B_a_bool_fun_fun$ A_b_bool_fun_fun$ )B_b_bool_fun_fun$ )
(declare-fun relcompp$f (D_llist_c_d_prod_llist_bool_fun_fun$ C_d_prod_llist_c_llist_bool_fun_fun$ )D_llist_c_llist_bool_fun_fun$ )
(declare-fun relcompp$g (D_llist_c_d_prod_llist_bool_fun_fun$ C_d_prod_llist_d_llist_bool_fun_fun$ )D_llist_d_llist_bool_fun_fun$ )
(declare-fun relcompp$h (C_llist_c_d_prod_llist_bool_fun_fun$ C_d_prod_llist_c_llist_bool_fun_fun$ )C_llist_c_llist_bool_fun_fun$ )
(declare-fun relcompp$i (C_llist_c_d_prod_llist_bool_fun_fun$ C_d_prod_llist_d_llist_bool_fun_fun$ )C_llist_d_llist_bool_fun_fun$ )
(declare-fun relcompp$j (C_d_prod_llist_llist_c_d_prod_llist_d_llist_prod_llist_bool_fun_fun$ C_d_prod_llist_d_llist_prod_llist_d_llist_llist_bool_fun_fun$ )C_d_prod_llist_llist_d_llist_llist_bool_fun_fun$ )
(declare-fun relcompp$k (C_d_prod_llist_llist_c_d_prod_llist_c_llist_prod_llist_bool_fun_fun$ C_d_prod_llist_c_llist_prod_llist_c_llist_llist_bool_fun_fun$ )C_d_prod_llist_llist_c_llist_llist_bool_fun_fun$ )
(declare-fun relcompp$l (A_b_prod_llist_llist_a_b_prod_llist_b_llist_prod_llist_bool_fun_fun$ A_b_prod_llist_b_llist_prod_llist_b_llist_llist_bool_fun_fun$ )A_b_prod_llist_llist_b_llist_llist_bool_fun_fun$ )
(declare-fun relcompp$m (A_b_prod_llist_llist_a_b_prod_llist_a_llist_prod_llist_bool_fun_fun$ A_b_prod_llist_a_llist_prod_llist_a_llist_llist_bool_fun_fun$ )A_b_prod_llist_llist_a_llist_llist_bool_fun_fun$ )
(declare-fun case_prod$a (C_d_prod_llist_d_llist_bool_fun_fun$ )C_d_prod_llist_d_llist_prod_bool_fun$ )
(declare-fun case_prod$b (C_d_prod_llist_c_llist_bool_fun_fun$ )C_d_prod_llist_c_llist_prod_bool_fun$ )
(declare-fun case_prod$c (A_b_prod_llist_b_llist_bool_fun_fun$ )A_b_prod_llist_b_llist_prod_bool_fun$ )
(declare-fun case_prod$d (A_b_prod_llist_a_llist_bool_fun_fun$ )A_b_prod_llist_a_llist_prod_bool_fun$ )
(declare-fun case_prod$e (C_d_bool_fun_fun$ )C_d_prod_bool_fun$ )
(declare-fun case_prod$f (A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_bool_fun_fun$ )A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_prod_bool_fun$ )
(declare-fun case_prod$g (A_b_prod_llist_a_llist_prod_llist_a_llist_llist_bool_fun_fun$ )A_b_prod_llist_a_llist_prod_llist_a_llist_llist_prod_bool_fun$ )
(declare-fun case_prod$h (A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_bool_fun_fun$ )A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_prod_bool_fun$ )
(declare-fun case_prod$i (A_b_prod_llist_b_llist_prod_llist_b_llist_llist_bool_fun_fun$ )A_b_prod_llist_b_llist_prod_llist_b_llist_llist_prod_bool_fun$ )
(declare-fun conversep$a (A_b_prod_llist_b_llist_bool_fun_fun$ )B_llist_a_b_prod_llist_bool_fun_fun$ )
(declare-fun conversep$b (C_d_bool_fun_fun$ )D_c_bool_fun_fun$ )
(declare-fun conversep$c (A_b_bool_fun_fun$ )B_a_bool_fun_fun$ )
(declare-fun conversep$d (C_d_prod_llist_d_llist_bool_fun_fun$ )D_llist_c_d_prod_llist_bool_fun_fun$ )
(declare-fun conversep$e (C_d_prod_llist_c_llist_bool_fun_fun$ )C_llist_c_d_prod_llist_bool_fun_fun$ )
(declare-fun conversep$f (C_d_prod_llist_d_llist_prod_llist_c_d_prod_llist_llist_bool_fun_fun$ )C_d_prod_llist_llist_c_d_prod_llist_d_llist_prod_llist_bool_fun_fun$ )
(declare-fun conversep$g (C_d_prod_llist_c_llist_prod_llist_c_d_prod_llist_llist_bool_fun_fun$ )C_d_prod_llist_llist_c_d_prod_llist_c_llist_prod_llist_bool_fun_fun$ )
(declare-fun conversep$h (A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_bool_fun_fun$ )A_b_prod_llist_llist_a_b_prod_llist_b_llist_prod_llist_bool_fun_fun$ )
(declare-fun conversep$i (A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_bool_fun_fun$ )A_b_prod_llist_llist_a_b_prod_llist_a_llist_prod_llist_bool_fun_fun$ )
(declare-fun llist_all2$ (C_d_prod_llist_d_llist_bool_fun_fun$ )C_d_prod_llist_llist_d_llist_llist_bool_fun_fun$ )
(declare-fun llist_all2$a (C_d_prod_llist_c_llist_bool_fun_fun$ )C_d_prod_llist_llist_c_llist_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (A_b_prod_llist_b_llist_bool_fun_fun$ )A_b_prod_llist_llist_b_llist_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (A_b_prod_llist_a_llist_bool_fun_fun$ )A_b_prod_llist_llist_a_llist_llist_bool_fun_fun$ )
(declare-fun llist_all2$d (A_b_bool_fun_fun$ )A_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$e (C_d_bool_fun_fun$ )C_llist_d_llist_bool_fun_fun$ )
(declare-fun set2_tllist$ (A_b_prod_c_d_prod_tllist$ )C_d_prod_set$ )
(declare-fun set2_tllist$a (B_d_tllist$ )D_set$ )
(declare-fun set2_tllist$b (A_c_tllist$ )C_set$ )
(declare-fun tllist_of_llist$ (D$ B_llist$ )B_d_tllist$ )
(declare-fun tllist_of_llist$a (C$ A_llist$ )A_c_tllist$ )
(declare-fun tllist_of_llist$b (C_d_prod$ A_b_prod_llist$ )A_b_prod_c_d_prod_tllist$ )
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$ uu$ ?v0 )(less_eq$ (lset$ ?v0 )(collect$ (case_prod$ y$ )))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 C_d_prod_llist_d_llist_prod$ ))(! (= (fun_app$a uus$ ?v0 )(snd$b ?v0 )):pattern ((fun_app$a uus$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 C_d_prod_llist_c_llist_prod$ ))(! (= (fun_app$b uuv$ ?v0 )(snd$c ?v0 )):pattern ((fun_app$b uuv$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_prod$ ))(! (= (fun_app$c uuy$ ?v0 )(snd$d ?v0 )):pattern ((fun_app$c uuy$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod$ ))(! (= (fun_app$d uvb$ ?v0 )(snd$e ?v0 )):pattern ((fun_app$d uvb$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 C_d_prod$ ))(! (= (fun_app$e uuc$ ?v0 )(snd$a ?v0 )):pattern ((fun_app$e uuc$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$f uub$ ?v0 )(snd$ ?v0 )):pattern ((fun_app$f uub$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 C_d_prod_llist_d_llist_prod$ ))(! (= (fun_app$g uur$ ?v0 )(fst$b ?v0 )):pattern ((fun_app$g uur$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 C_d_prod_llist_c_llist_prod$ ))(! (= (fun_app$h uuu$ ?v0 )(fst$c ?v0 )):pattern ((fun_app$h uuu$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_prod$ ))(! (= (fun_app$i uux$ ?v0 )(fst$d ?v0 )):pattern ((fun_app$i uux$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod$ ))(! (= (fun_app$j uva$ ?v0 )(fst$e ?v0 )):pattern ((fun_app$j uva$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 C_d_prod$ ))(! (= (fun_app$k uud$ ?v0 )(fst$a ?v0 )):pattern ((fun_app$k uud$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$l uua$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$l uua$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 C_d_prod_llist_d_llist_bool_fun_fun$ )(?v1 C_d_prod_llist_d_llist_prod_llist$ ))(! (= (fun_app$m (uuq$ ?v0 )?v1 )(less_eq$a (lset$a ?v1 )(collect$a (case_prod$a ?v0 )))):pattern ((fun_app$m (uuq$ ?v0 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 C_d_prod_llist_c_llist_bool_fun_fun$ )(?v1 C_d_prod_llist_c_llist_prod_llist$ ))(! (= (fun_app$n (uut$ ?v0 )?v1 )(less_eq$b (lset$b ?v1 )(collect$b (case_prod$b ?v0 )))):pattern ((fun_app$n (uut$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_b_llist_prod_llist$ ))(! (= (fun_app$o (uuw$ ?v0 )?v1 )(less_eq$c (lset$c ?v1 )(collect$c (case_prod$c ?v0 )))):pattern ((fun_app$o (uuw$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_llist_prod_llist$ ))(! (= (fun_app$p (uuz$ ?v0 )?v1 )(less_eq$d (lset$d ?v1 )(collect$d (case_prod$d ?v0 )))):pattern ((fun_app$p (uuz$ ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C_d_prod_llist$ ))(! (= (fun_app$q (uvd$ ?v0 )?v1 )(less_eq$e (lset$e ?v1 )(collect$e (case_prod$e ?v0 )))):pattern ((fun_app$q (uvd$ ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_prod_llist$ ))(! (= (fun_app$ (uvc$ ?v0 )?v1 )(less_eq$ (lset$ ?v1 )(collect$ (case_prod$ ?v0 )))):pattern ((fun_app$ (uvc$ ?v0 )?v1 )))):named a18 ))
(assert (! (forall ((?v0 Bool )(?v1 C_d_prod_llist_d_llist_bool_fun_fun$ )(?v2 C_d_prod_llist$ )(?v3 D_llist$ ))(! (= (fun_app$r (fun_app$s (uuk$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$r (fun_app$s ?v1 ?v2 )?v3 ))):pattern ((fun_app$r (fun_app$s (uuk$ ?v0 ?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 Bool )(?v1 C_d_prod_llist_c_llist_bool_fun_fun$ )(?v2 C_d_prod_llist$ )(?v3 C_llist$ ))(! (= (fun_app$t (fun_app$u (uul$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$t (fun_app$u ?v1 ?v2 )?v3 ))):pattern ((fun_app$t (fun_app$u (uul$ ?v0 ?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_prod_llist_b_llist_bool_fun_fun$ )(?v2 A_b_prod_llist$ )(?v3 B_llist$ ))(! (= (fun_app$v (fun_app$w (uum$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$v (fun_app$w ?v1 ?v2 )?v3 ))):pattern ((fun_app$v (fun_app$w (uum$ ?v0 ?v1 )?v2 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_prod_llist_a_llist_bool_fun_fun$ )(?v2 A_b_prod_llist$ )(?v3 A_llist$ ))(! (= (fun_app$x (fun_app$y (uun$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$x (fun_app$y ?v1 ?v2 )?v3 ))):pattern ((fun_app$x (fun_app$y (uun$ ?v0 ?v1 )?v2 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 Bool )(?v1 C_d_bool_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$z (fun_app$aa (uup$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$z (fun_app$aa ?v1 ?v2 )?v3 ))):pattern ((fun_app$z (fun_app$aa (uup$ ?v0 ?v1 )?v2 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_bool_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$ab (fun_app$ac (uuo$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$ab (fun_app$ac ?v1 ?v2 )?v3 ))):pattern ((fun_app$ab (fun_app$ac (uuo$ ?v0 ?v1 )?v2 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 C_d_prod$ ))(! (= (fun_app$ad uuf$ ?v0 )?v0 ):pattern ((fun_app$ad uuf$ ?v0 )))):named a25 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ae uue$ ?v0 )?v0 ):pattern ((fun_app$ae uue$ ?v0 )))):named a26 ))
(assert (! (forall ((?v0 D$ ))(! (= (fun_app$af uuj$ ?v0 )?v0 ):pattern ((fun_app$af uuj$ ?v0 )))):named a27 ))
(assert (! (forall ((?v0 C$ ))(! (= (fun_app$ag uuh$ ?v0 )?v0 ):pattern ((fun_app$ag uuh$ ?v0 )))):named a28 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ah uui$ ?v0 )?v0 ):pattern ((fun_app$ah uui$ ?v0 )))):named a29 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ai uug$ ?v0 )?v0 ):pattern ((fun_app$ai uug$ ?v0 )))):named a30 ))
(assert (! (not (fun_app$v (fun_app$aj (relcompp$ (conversep$ (grp$ (collect$f uu$ )(lmap$ uua$ )))(grp$a (collect$f uu$ )(lmap$a uub$ )))a$ )aa$ )):named a31 ))
(assert (! (= (tmap$ uub$ uuc$ bb$ )(tllist_of_llist$ ba$ aa$ )):named a32 ))
(assert (! (= (tmap$a uua$ uud$ bb$ )(tllist_of_llist$a b$ a$ )):named a33 ))
(assert (! (less_eq$ (tset$ bb$ )(collect$ (case_prod$ y$ ))):named a34 ))
(assert (! (less_eq$e (set2_tllist$ bb$ )(collect$e (case_prod$e ya$ ))):named a35 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 A_b_prod_llist$ ))(= (tset$ (tllist_of_llist$b ?v0 ?v1 ))(lset$ ?v1 ))):named a36 ))
(assert (! (forall ((?v0 D$ )(?v1 B_llist$ ))(= (tset$a (tllist_of_llist$ ?v0 ?v1 ))(lset$f ?v1 ))):named a37 ))
(assert (! (forall ((?v0 C$ )(?v1 A_llist$ ))(= (tset$b (tllist_of_llist$a ?v0 ?v1 ))(lset$g ?v1 ))):named a38 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 D_c_d_prod_fun$ )(?v2 D$ )(?v3 B_llist$ ))(= (tmap$b ?v0 ?v1 (tllist_of_llist$ ?v2 ?v3 ))(tllist_of_llist$b (fun_app$ak ?v1 ?v2 )(lmap$b ?v0 ?v3 )))):named a39 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 C_c_d_prod_fun$ )(?v2 C$ )(?v3 A_llist$ ))(= (tmap$c ?v0 ?v1 (tllist_of_llist$a ?v2 ?v3 ))(tllist_of_llist$b (fun_app$al ?v1 ?v2 )(lmap$c ?v0 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 C_d_prod_c_d_prod_fun$ )(?v2 C_d_prod$ )(?v3 A_b_prod_llist$ ))(= (tmap$d ?v0 ?v1 (tllist_of_llist$b ?v2 ?v3 ))(tllist_of_llist$b (fun_app$ad ?v1 ?v2 )(lmap$d ?v0 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 C_d_prod_d_fun$ )(?v2 C_d_prod$ )(?v3 A_b_prod_llist$ ))(= (tmap$ ?v0 ?v1 (tllist_of_llist$b ?v2 ?v3 ))(tllist_of_llist$ (fun_app$e ?v1 ?v2 )(fun_app$am (lmap$a ?v0 )?v3 )))):named a42 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 C_d_prod_c_fun$ )(?v2 C_d_prod$ )(?v3 A_b_prod_llist$ ))(= (tmap$a ?v0 ?v1 (tllist_of_llist$b ?v2 ?v3 ))(tllist_of_llist$a (fun_app$k ?v1 ?v2 )(fun_app$an (lmap$ ?v0 )?v3 )))):named a43 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 D_d_fun$ )(?v2 D$ )(?v3 B_llist$ ))(= (tmap$e ?v0 ?v1 (tllist_of_llist$ ?v2 ?v3 ))(tllist_of_llist$ (fun_app$af ?v1 ?v2 )(lmap$e ?v0 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 D_c_fun$ )(?v2 D$ )(?v3 B_llist$ ))(= (tmap$f ?v0 ?v1 (tllist_of_llist$ ?v2 ?v3 ))(tllist_of_llist$a (fun_app$ao ?v1 ?v2 )(lmap$f ?v0 ?v3 )))):named a45 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_d_fun$ )(?v2 C$ )(?v3 A_llist$ ))(= (tmap$g ?v0 ?v1 (tllist_of_llist$a ?v2 ?v3 ))(tllist_of_llist$ (fun_app$ap ?v1 ?v2 )(lmap$g ?v0 ?v3 )))):named a46 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_c_fun$ )(?v2 C$ )(?v3 A_llist$ ))(= (tmap$h ?v0 ?v1 (tllist_of_llist$a ?v2 ?v3 ))(tllist_of_llist$a (fun_app$ag ?v1 ?v2 )(lmap$h ?v0 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$ ))(= (tmap$d uue$ uuf$ ?v0 )?v0 )):named a48 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(= (tmap$h uug$ uuh$ ?v0 )?v0 )):named a49 ))
(assert (! (forall ((?v0 B_d_tllist$ ))(= (tmap$e uui$ uuj$ ?v0 )?v0 )):named a50 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$ )(?v1 A_b_prod_c_d_prod_tllist$ )(?v2 A_b_prod_a_b_prod_fun$ )(?v3 A_b_prod_a_b_prod_fun$ )(?v4 C_d_prod_c_d_prod_fun$ )(?v5 C_d_prod_c_d_prod_fun$ ))(=> (and (forall ((?v6 A_b_prod$ )(?v7 A_b_prod$ ))(=> (and (member$ ?v6 (tset$ ?v0 ))(and (member$ ?v7 (tset$ ?v1 ))(= (fun_app$ae ?v2 ?v6 )(fun_app$ae ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 C_d_prod$ )(?v7 C_d_prod$ ))(=> (and (member$a ?v6 (set2_tllist$ ?v0 ))(and (member$a ?v7 (set2_tllist$ ?v1 ))(= (fun_app$ad ?v4 ?v6 )(fun_app$ad ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (tmap$d ?v2 ?v4 ?v0 )(tmap$d ?v3 ?v5 ?v1 ))))(= ?v0 ?v1 ))):named a51 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_d_tllist$ )(?v2 B_a_b_prod_fun$ )(?v3 B_a_b_prod_fun$ )(?v4 D_c_d_prod_fun$ )(?v5 D_c_d_prod_fun$ ))(=> (and (forall ((?v6 B$ )(?v7 B$ ))(=> (and (member$b ?v6 (tset$a ?v0 ))(and (member$b ?v7 (tset$a ?v1 ))(= (fun_app$aq ?v2 ?v6 )(fun_app$aq ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 D$ )(?v7 D$ ))(=> (and (member$c ?v6 (set2_tllist$a ?v0 ))(and (member$c ?v7 (set2_tllist$a ?v1 ))(= (fun_app$ak ?v4 ?v6 )(fun_app$ak ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (tmap$b ?v2 ?v4 ?v0 )(tmap$b ?v3 ?v5 ?v1 ))))(= ?v0 ?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_c_tllist$ )(?v2 A_a_b_prod_fun$ )(?v3 A_a_b_prod_fun$ )(?v4 C_c_d_prod_fun$ )(?v5 C_c_d_prod_fun$ ))(=> (and (forall ((?v6 A$ )(?v7 A$ ))(=> (and (member$d ?v6 (tset$b ?v0 ))(and (member$d ?v7 (tset$b ?v1 ))(= (fun_app$ar ?v2 ?v6 )(fun_app$ar ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 C$ )(?v7 C$ ))(=> (and (member$e ?v6 (set2_tllist$b ?v0 ))(and (member$e ?v7 (set2_tllist$b ?v1 ))(= (fun_app$al ?v4 ?v6 )(fun_app$al ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (tmap$c ?v2 ?v4 ?v0 )(tmap$c ?v3 ?v5 ?v1 ))))(= ?v0 ?v1 ))):named a53 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_c_tllist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 C_c_fun$ )(?v5 C_c_fun$ ))(=> (and (forall ((?v6 A$ )(?v7 A$ ))(=> (and (member$d ?v6 (tset$b ?v0 ))(and (member$d ?v7 (tset$b ?v1 ))(= (fun_app$ai ?v2 ?v6 )(fun_app$ai ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 C$ )(?v7 C$ ))(=> (and (member$e ?v6 (set2_tllist$b ?v0 ))(and (member$e ?v7 (set2_tllist$b ?v1 ))(= (fun_app$ag ?v4 ?v6 )(fun_app$ag ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (tmap$h ?v2 ?v4 ?v0 )(tmap$h ?v3 ?v5 ?v1 ))))(= ?v0 ?v1 ))):named a54 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_c_tllist$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ )(?v4 C_d_fun$ )(?v5 C_d_fun$ ))(=> (and (forall ((?v6 A$ )(?v7 A$ ))(=> (and (member$d ?v6 (tset$b ?v0 ))(and (member$d ?v7 (tset$b ?v1 ))(= (fun_app$as ?v2 ?v6 )(fun_app$as ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 C$ )(?v7 C$ ))(=> (and (member$e ?v6 (set2_tllist$b ?v0 ))(and (member$e ?v7 (set2_tllist$b ?v1 ))(= (fun_app$ap ?v4 ?v6 )(fun_app$ap ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (tmap$g ?v2 ?v4 ?v0 )(tmap$g ?v3 ?v5 ?v1 ))))(= ?v0 ?v1 ))):named a55 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_d_tllist$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ )(?v4 D_c_fun$ )(?v5 D_c_fun$ ))(=> (and (forall ((?v6 B$ )(?v7 B$ ))(=> (and (member$b ?v6 (tset$a ?v0 ))(and (member$b ?v7 (tset$a ?v1 ))(= (fun_app$at ?v2 ?v6 )(fun_app$at ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 D$ )(?v7 D$ ))(=> (and (member$c ?v6 (set2_tllist$a ?v0 ))(and (member$c ?v7 (set2_tllist$a ?v1 ))(= (fun_app$ao ?v4 ?v6 )(fun_app$ao ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (tmap$f ?v2 ?v4 ?v0 )(tmap$f ?v3 ?v5 ?v1 ))))(= ?v0 ?v1 ))):named a56 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_d_tllist$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 D_d_fun$ )(?v5 D_d_fun$ ))(=> (and (forall ((?v6 B$ )(?v7 B$ ))(=> (and (member$b ?v6 (tset$a ?v0 ))(and (member$b ?v7 (tset$a ?v1 ))(= (fun_app$ah ?v2 ?v6 )(fun_app$ah ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 D$ )(?v7 D$ ))(=> (and (member$c ?v6 (set2_tllist$a ?v0 ))(and (member$c ?v7 (set2_tllist$a ?v1 ))(= (fun_app$af ?v4 ?v6 )(fun_app$af ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (tmap$e ?v2 ?v4 ?v0 )(tmap$e ?v3 ?v5 ?v1 ))))(= ?v0 ?v1 ))):named a57 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$ )(?v1 A_b_prod_c_d_prod_tllist$ )(?v2 A_b_prod_b_fun$ )(?v3 A_b_prod_b_fun$ )(?v4 C_d_prod_d_fun$ )(?v5 C_d_prod_d_fun$ ))(=> (and (forall ((?v6 A_b_prod$ )(?v7 A_b_prod$ ))(=> (and (member$ ?v6 (tset$ ?v0 ))(and (member$ ?v7 (tset$ ?v1 ))(= (fun_app$f ?v2 ?v6 )(fun_app$f ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 C_d_prod$ )(?v7 C_d_prod$ ))(=> (and (member$a ?v6 (set2_tllist$ ?v0 ))(and (member$a ?v7 (set2_tllist$ ?v1 ))(= (fun_app$e ?v4 ?v6 )(fun_app$e ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (tmap$ ?v2 ?v4 ?v0 )(tmap$ ?v3 ?v5 ?v1 ))))(= ?v0 ?v1 ))):named a58 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$ )(?v1 A_b_prod_c_d_prod_tllist$ )(?v2 A_b_prod_a_fun$ )(?v3 A_b_prod_a_fun$ )(?v4 C_d_prod_c_fun$ )(?v5 C_d_prod_c_fun$ ))(=> (and (forall ((?v6 A_b_prod$ )(?v7 A_b_prod$ ))(=> (and (member$ ?v6 (tset$ ?v0 ))(and (member$ ?v7 (tset$ ?v1 ))(= (fun_app$l ?v2 ?v6 )(fun_app$l ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 C_d_prod$ )(?v7 C_d_prod$ ))(=> (and (member$a ?v6 (set2_tllist$ ?v0 ))(and (member$a ?v7 (set2_tllist$ ?v1 ))(= (fun_app$k ?v4 ?v6 )(fun_app$k ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (tmap$a ?v2 ?v4 ?v0 )(tmap$a ?v3 ?v5 ?v1 ))))(= ?v0 ?v1 ))):named a59 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$ )(?v1 A_b_prod_a_b_prod_fun$ )(?v2 A_b_prod_a_b_prod_fun$ )(?v3 C_d_prod_c_d_prod_fun$ )(?v4 C_d_prod_c_d_prod_fun$ ))(=> (and (forall ((?v5 A_b_prod$ ))(=> (member$ ?v5 (tset$ ?v0 ))(= (fun_app$ae ?v1 ?v5 )(fun_app$ae ?v2 ?v5 ))))(forall ((?v5 C_d_prod$ ))(=> (member$a ?v5 (set2_tllist$ ?v0 ))(= (fun_app$ad ?v3 ?v5 )(fun_app$ad ?v4 ?v5 )))))(= (tmap$d ?v1 ?v3 ?v0 )(tmap$d ?v2 ?v4 ?v0 )))):named a60 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_a_b_prod_fun$ )(?v2 B_a_b_prod_fun$ )(?v3 D_c_d_prod_fun$ )(?v4 D_c_d_prod_fun$ ))(=> (and (forall ((?v5 B$ ))(=> (member$b ?v5 (tset$a ?v0 ))(= (fun_app$aq ?v1 ?v5 )(fun_app$aq ?v2 ?v5 ))))(forall ((?v5 D$ ))(=> (member$c ?v5 (set2_tllist$a ?v0 ))(= (fun_app$ak ?v3 ?v5 )(fun_app$ak ?v4 ?v5 )))))(= (tmap$b ?v1 ?v3 ?v0 )(tmap$b ?v2 ?v4 ?v0 )))):named a61 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_a_b_prod_fun$ )(?v2 A_a_b_prod_fun$ )(?v3 C_c_d_prod_fun$ )(?v4 C_c_d_prod_fun$ ))(=> (and (forall ((?v5 A$ ))(=> (member$d ?v5 (tset$b ?v0 ))(= (fun_app$ar ?v1 ?v5 )(fun_app$ar ?v2 ?v5 ))))(forall ((?v5 C$ ))(=> (member$e ?v5 (set2_tllist$b ?v0 ))(= (fun_app$al ?v3 ?v5 )(fun_app$al ?v4 ?v5 )))))(= (tmap$c ?v1 ?v3 ?v0 )(tmap$c ?v2 ?v4 ?v0 )))):named a62 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 C_c_fun$ )(?v4 C_c_fun$ ))(=> (and (forall ((?v5 A$ ))(=> (member$d ?v5 (tset$b ?v0 ))(= (fun_app$ai ?v1 ?v5 )(fun_app$ai ?v2 ?v5 ))))(forall ((?v5 C$ ))(=> (member$e ?v5 (set2_tllist$b ?v0 ))(= (fun_app$ag ?v3 ?v5 )(fun_app$ag ?v4 ?v5 )))))(= (tmap$h ?v1 ?v3 ?v0 )(tmap$h ?v2 ?v4 ?v0 )))):named a63 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 C_d_fun$ )(?v4 C_d_fun$ ))(=> (and (forall ((?v5 A$ ))(=> (member$d ?v5 (tset$b ?v0 ))(= (fun_app$as ?v1 ?v5 )(fun_app$as ?v2 ?v5 ))))(forall ((?v5 C$ ))(=> (member$e ?v5 (set2_tllist$b ?v0 ))(= (fun_app$ap ?v3 ?v5 )(fun_app$ap ?v4 ?v5 )))))(= (tmap$g ?v1 ?v3 ?v0 )(tmap$g ?v2 ?v4 ?v0 )))):named a64 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 D_c_fun$ )(?v4 D_c_fun$ ))(=> (and (forall ((?v5 B$ ))(=> (member$b ?v5 (tset$a ?v0 ))(= (fun_app$at ?v1 ?v5 )(fun_app$at ?v2 ?v5 ))))(forall ((?v5 D$ ))(=> (member$c ?v5 (set2_tllist$a ?v0 ))(= (fun_app$ao ?v3 ?v5 )(fun_app$ao ?v4 ?v5 )))))(= (tmap$f ?v1 ?v3 ?v0 )(tmap$f ?v2 ?v4 ?v0 )))):named a65 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 D_d_fun$ )(?v4 D_d_fun$ ))(=> (and (forall ((?v5 B$ ))(=> (member$b ?v5 (tset$a ?v0 ))(= (fun_app$ah ?v1 ?v5 )(fun_app$ah ?v2 ?v5 ))))(forall ((?v5 D$ ))(=> (member$c ?v5 (set2_tllist$a ?v0 ))(= (fun_app$af ?v3 ?v5 )(fun_app$af ?v4 ?v5 )))))(= (tmap$e ?v1 ?v3 ?v0 )(tmap$e ?v2 ?v4 ?v0 )))):named a66 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$ )(?v1 A_b_prod_b_fun$ )(?v2 A_b_prod_b_fun$ )(?v3 C_d_prod_d_fun$ )(?v4 C_d_prod_d_fun$ ))(=> (and (forall ((?v5 A_b_prod$ ))(=> (member$ ?v5 (tset$ ?v0 ))(= (fun_app$f ?v1 ?v5 )(fun_app$f ?v2 ?v5 ))))(forall ((?v5 C_d_prod$ ))(=> (member$a ?v5 (set2_tllist$ ?v0 ))(= (fun_app$e ?v3 ?v5 )(fun_app$e ?v4 ?v5 )))))(= (tmap$ ?v1 ?v3 ?v0 )(tmap$ ?v2 ?v4 ?v0 )))):named a67 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_a_fun$ )(?v3 C_d_prod_c_fun$ )(?v4 C_d_prod_c_fun$ ))(=> (and (forall ((?v5 A_b_prod$ ))(=> (member$ ?v5 (tset$ ?v0 ))(= (fun_app$l ?v1 ?v5 )(fun_app$l ?v2 ?v5 ))))(forall ((?v5 C_d_prod$ ))(=> (member$a ?v5 (set2_tllist$ ?v0 ))(= (fun_app$k ?v3 ?v5 )(fun_app$k ?v4 ?v5 )))))(= (tmap$a ?v1 ?v3 ?v0 )(tmap$a ?v2 ?v4 ?v0 )))):named a68 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$ )(?v1 A_b_prod_c_d_prod_tllist$ )(?v2 A_b_prod_a_b_prod_fun$ )(?v3 A_b_prod_a_b_prod_fun$ )(?v4 C_d_prod_c_d_prod_fun$ )(?v5 C_d_prod_c_d_prod_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 A_b_prod$ ))(=> (member$ ?v6 (tset$ ?v1 ))(= (fun_app$ae ?v2 ?v6 )(fun_app$ae ?v3 ?v6 ))))(forall ((?v6 C_d_prod$ ))(=> (member$a ?v6 (set2_tllist$ ?v1 ))(= (fun_app$ad ?v4 ?v6 )(fun_app$ad ?v5 ?v6 ))))))(= (tmap$d ?v2 ?v4 ?v0 )(tmap$d ?v3 ?v5 ?v1 )))):named a69 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_d_tllist$ )(?v2 B_a_b_prod_fun$ )(?v3 B_a_b_prod_fun$ )(?v4 D_c_d_prod_fun$ )(?v5 D_c_d_prod_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 B$ ))(=> (member$b ?v6 (tset$a ?v1 ))(= (fun_app$aq ?v2 ?v6 )(fun_app$aq ?v3 ?v6 ))))(forall ((?v6 D$ ))(=> (member$c ?v6 (set2_tllist$a ?v1 ))(= (fun_app$ak ?v4 ?v6 )(fun_app$ak ?v5 ?v6 ))))))(= (tmap$b ?v2 ?v4 ?v0 )(tmap$b ?v3 ?v5 ?v1 )))):named a70 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_c_tllist$ )(?v2 A_a_b_prod_fun$ )(?v3 A_a_b_prod_fun$ )(?v4 C_c_d_prod_fun$ )(?v5 C_c_d_prod_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 A$ ))(=> (member$d ?v6 (tset$b ?v1 ))(= (fun_app$ar ?v2 ?v6 )(fun_app$ar ?v3 ?v6 ))))(forall ((?v6 C$ ))(=> (member$e ?v6 (set2_tllist$b ?v1 ))(= (fun_app$al ?v4 ?v6 )(fun_app$al ?v5 ?v6 ))))))(= (tmap$c ?v2 ?v4 ?v0 )(tmap$c ?v3 ?v5 ?v1 )))):named a71 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_c_tllist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 C_c_fun$ )(?v5 C_c_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 A$ ))(=> (member$d ?v6 (tset$b ?v1 ))(= (fun_app$ai ?v2 ?v6 )(fun_app$ai ?v3 ?v6 ))))(forall ((?v6 C$ ))(=> (member$e ?v6 (set2_tllist$b ?v1 ))(= (fun_app$ag ?v4 ?v6 )(fun_app$ag ?v5 ?v6 ))))))(= (tmap$h ?v2 ?v4 ?v0 )(tmap$h ?v3 ?v5 ?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_c_tllist$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ )(?v4 C_d_fun$ )(?v5 C_d_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 A$ ))(=> (member$d ?v6 (tset$b ?v1 ))(= (fun_app$as ?v2 ?v6 )(fun_app$as ?v3 ?v6 ))))(forall ((?v6 C$ ))(=> (member$e ?v6 (set2_tllist$b ?v1 ))(= (fun_app$ap ?v4 ?v6 )(fun_app$ap ?v5 ?v6 ))))))(= (tmap$g ?v2 ?v4 ?v0 )(tmap$g ?v3 ?v5 ?v1 )))):named a73 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_d_tllist$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ )(?v4 D_c_fun$ )(?v5 D_c_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 B$ ))(=> (member$b ?v6 (tset$a ?v1 ))(= (fun_app$at ?v2 ?v6 )(fun_app$at ?v3 ?v6 ))))(forall ((?v6 D$ ))(=> (member$c ?v6 (set2_tllist$a ?v1 ))(= (fun_app$ao ?v4 ?v6 )(fun_app$ao ?v5 ?v6 ))))))(= (tmap$f ?v2 ?v4 ?v0 )(tmap$f ?v3 ?v5 ?v1 )))):named a74 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_d_tllist$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 D_d_fun$ )(?v5 D_d_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 B$ ))(=> (member$b ?v6 (tset$a ?v1 ))(= (fun_app$ah ?v2 ?v6 )(fun_app$ah ?v3 ?v6 ))))(forall ((?v6 D$ ))(=> (member$c ?v6 (set2_tllist$a ?v1 ))(= (fun_app$af ?v4 ?v6 )(fun_app$af ?v5 ?v6 ))))))(= (tmap$e ?v2 ?v4 ?v0 )(tmap$e ?v3 ?v5 ?v1 )))):named a75 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$ )(?v1 A_b_prod_c_d_prod_tllist$ )(?v2 A_b_prod_b_fun$ )(?v3 A_b_prod_b_fun$ )(?v4 C_d_prod_d_fun$ )(?v5 C_d_prod_d_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 A_b_prod$ ))(=> (member$ ?v6 (tset$ ?v1 ))(= (fun_app$f ?v2 ?v6 )(fun_app$f ?v3 ?v6 ))))(forall ((?v6 C_d_prod$ ))(=> (member$a ?v6 (set2_tllist$ ?v1 ))(= (fun_app$e ?v4 ?v6 )(fun_app$e ?v5 ?v6 ))))))(= (tmap$ ?v2 ?v4 ?v0 )(tmap$ ?v3 ?v5 ?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$ )(?v1 A_b_prod_c_d_prod_tllist$ )(?v2 A_b_prod_a_fun$ )(?v3 A_b_prod_a_fun$ )(?v4 C_d_prod_c_fun$ )(?v5 C_d_prod_c_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 A_b_prod$ ))(=> (member$ ?v6 (tset$ ?v1 ))(= (fun_app$l ?v2 ?v6 )(fun_app$l ?v3 ?v6 ))))(forall ((?v6 C_d_prod$ ))(=> (member$a ?v6 (set2_tllist$ ?v1 ))(= (fun_app$k ?v4 ?v6 )(fun_app$k ?v5 ?v6 ))))))(= (tmap$a ?v2 ?v4 ?v0 )(tmap$a ?v3 ?v5 ?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(= (lmap$d uue$ ?v0 )?v0 )):named a78 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lmap$e uui$ ?v0 )?v0 )):named a79 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lmap$h uug$ ?v0 )?v0 )):named a80 ))
(assert (! (forall ((?v0 Bool )(?v1 C_d_prod_llist_d_llist_bool_fun_fun$ )(?v2 C_d_prod_llist_d_llist_prod$ ))(= (fun_app$au (case_prod$a (uuk$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$au (case_prod$a ?v1 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 Bool )(?v1 C_d_prod_llist_c_llist_bool_fun_fun$ )(?v2 C_d_prod_llist_c_llist_prod$ ))(= (fun_app$av (case_prod$b (uul$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$av (case_prod$b ?v1 )?v2 )))):named a82 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_prod_llist_b_llist_bool_fun_fun$ )(?v2 A_b_prod_llist_b_llist_prod$ ))(= (fun_app$aw (case_prod$c (uum$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$aw (case_prod$c ?v1 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_prod_llist_a_llist_bool_fun_fun$ )(?v2 A_b_prod_llist_a_llist_prod$ ))(= (fun_app$ax (case_prod$d (uun$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$ax (case_prod$d ?v1 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$ay (case_prod$ (uuo$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$ay (case_prod$ ?v1 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 Bool )(?v1 C_d_bool_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$az (case_prod$e (uup$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$az (case_prod$e ?v1 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 C_d_prod_llist_d_llist_bool_fun_fun$ )(?v1 C_d_prod_llist_d_llist_prod$ ))(! (= (fun_app$au (case_prod$a ?v0 )?v1 )(fun_app$r (fun_app$s ?v0 (fst$b ?v1 ))(snd$b ?v1 ))):pattern ((fun_app$au (case_prod$a ?v0 )?v1 )))):named a87 ))
(assert (! (forall ((?v0 C_d_prod_llist_c_llist_bool_fun_fun$ )(?v1 C_d_prod_llist_c_llist_prod$ ))(! (= (fun_app$av (case_prod$b ?v0 )?v1 )(fun_app$t (fun_app$u ?v0 (fst$c ?v1 ))(snd$c ?v1 ))):pattern ((fun_app$av (case_prod$b ?v0 )?v1 )))):named a88 ))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_b_llist_prod$ ))(! (= (fun_app$aw (case_prod$c ?v0 )?v1 )(fun_app$v (fun_app$w ?v0 (fst$d ?v1 ))(snd$d ?v1 ))):pattern ((fun_app$aw (case_prod$c ?v0 )?v1 )))):named a89 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_llist_prod$ ))(! (= (fun_app$ax (case_prod$d ?v0 )?v1 )(fun_app$x (fun_app$y ?v0 (fst$e ?v1 ))(snd$e ?v1 ))):pattern ((fun_app$ax (case_prod$d ?v0 )?v1 )))):named a90 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$ay (case_prod$ ?v0 )?v1 )(fun_app$ab (fun_app$ac ?v0 (fst$ ?v1 ))(snd$ ?v1 ))):pattern ((fun_app$ay (case_prod$ ?v0 )?v1 )))):named a91 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C_d_prod$ ))(! (= (fun_app$az (case_prod$e ?v0 )?v1 )(fun_app$z (fun_app$aa ?v0 (fst$a ?v1 ))(snd$a ?v1 ))):pattern ((fun_app$az (case_prod$e ?v0 )?v1 )))):named a92 ))
(assert (! (forall ((?v0 C_d_prod_llist_d_llist_bool_fun_fun$ )(?v1 C_d_prod_llist_d_llist_prod$ ))(! (= (fun_app$au (case_prod$a ?v0 )?v1 )(fun_app$r (fun_app$s ?v0 (fst$b ?v1 ))(snd$b ?v1 ))):pattern ((fun_app$au (case_prod$a ?v0 )?v1 )))):named a93 ))
(assert (! (forall ((?v0 C_d_prod_llist_c_llist_bool_fun_fun$ )(?v1 C_d_prod_llist_c_llist_prod$ ))(! (= (fun_app$av (case_prod$b ?v0 )?v1 )(fun_app$t (fun_app$u ?v0 (fst$c ?v1 ))(snd$c ?v1 ))):pattern ((fun_app$av (case_prod$b ?v0 )?v1 )))):named a94 ))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_b_llist_prod$ ))(! (= (fun_app$aw (case_prod$c ?v0 )?v1 )(fun_app$v (fun_app$w ?v0 (fst$d ?v1 ))(snd$d ?v1 ))):pattern ((fun_app$aw (case_prod$c ?v0 )?v1 )))):named a95 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_llist_prod$ ))(! (= (fun_app$ax (case_prod$d ?v0 )?v1 )(fun_app$x (fun_app$y ?v0 (fst$e ?v1 ))(snd$e ?v1 ))):pattern ((fun_app$ax (case_prod$d ?v0 )?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$ay (case_prod$ ?v0 )?v1 )(fun_app$ab (fun_app$ac ?v0 (fst$ ?v1 ))(snd$ ?v1 ))):pattern ((fun_app$ay (case_prod$ ?v0 )?v1 )))):named a97 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C_d_prod$ ))(! (= (fun_app$az (case_prod$e ?v0 )?v1 )(fun_app$z (fun_app$aa ?v0 (fst$a ?v1 ))(snd$a ?v1 ))):pattern ((fun_app$az (case_prod$e ?v0 )?v1 )))):named a98 ))
(assert (! (forall ((?v0 D_llist_c_d_prod_llist_bool_fun_fun$ )(?v1 C_d_prod_llist_d_llist_prod$ )(?v2 Bool_bool_fun$ )(?v3 C_d_prod_llist_d_llist_bool_fun_fun$ ))(=> (and (fun_app$q (fun_app$ba ?v0 (snd$b ?v1 ))(fst$b ?v1 ))(forall ((?v4 C_d_prod_llist$ )(?v5 D_llist$ ))(=> (fun_app$q (fun_app$ba ?v0 ?v5 )?v4 )(fun_app$bb ?v2 (fun_app$r (fun_app$s ?v3 ?v4 )?v5 )))))(fun_app$bb ?v2 (fun_app$au (case_prod$a ?v3 )?v1 )))):named a99 ))
(assert (! (forall ((?v0 C_llist_c_d_prod_llist_bool_fun_fun$ )(?v1 C_d_prod_llist_c_llist_prod$ )(?v2 Bool_bool_fun$ )(?v3 C_d_prod_llist_c_llist_bool_fun_fun$ ))(=> (and (fun_app$q (fun_app$bc ?v0 (snd$c ?v1 ))(fst$c ?v1 ))(forall ((?v4 C_d_prod_llist$ )(?v5 C_llist$ ))(=> (fun_app$q (fun_app$bc ?v0 ?v5 )?v4 )(fun_app$bb ?v2 (fun_app$t (fun_app$u ?v3 ?v4 )?v5 )))))(fun_app$bb ?v2 (fun_app$av (case_prod$b ?v3 )?v1 )))):named a100 ))
(assert (! (forall ((?v0 B_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_b_llist_prod$ )(?v2 Bool_bool_fun$ )(?v3 A_b_prod_llist_b_llist_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$bd ?v0 (snd$d ?v1 ))(fst$d ?v1 ))(forall ((?v4 A_b_prod_llist$ )(?v5 B_llist$ ))(=> (fun_app$ (fun_app$bd ?v0 ?v5 )?v4 )(fun_app$bb ?v2 (fun_app$v (fun_app$w ?v3 ?v4 )?v5 )))))(fun_app$bb ?v2 (fun_app$aw (case_prod$c ?v3 )?v1 )))):named a101 ))
(assert (! (forall ((?v0 A_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_llist_prod$ )(?v2 Bool_bool_fun$ )(?v3 A_b_prod_llist_a_llist_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$be ?v0 (snd$e ?v1 ))(fst$e ?v1 ))(forall ((?v4 A_b_prod_llist$ )(?v5 A_llist$ ))(=> (fun_app$ (fun_app$be ?v0 ?v5 )?v4 )(fun_app$bb ?v2 (fun_app$x (fun_app$y ?v3 ?v4 )?v5 )))))(fun_app$bb ?v2 (fun_app$ax (case_prod$d ?v3 )?v1 )))):named a102 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A_b_prod$ )(?v2 Bool_bool_fun$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$bf (fun_app$bg ?v0 (snd$ ?v1 ))(fst$ ?v1 ))(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$bf (fun_app$bg ?v0 ?v5 )?v4 )(fun_app$bb ?v2 (fun_app$ab (fun_app$ac ?v3 ?v4 )?v5 )))))(fun_app$bb ?v2 (fun_app$ay (case_prod$ ?v3 )?v1 )))):named a103 ))
(assert (! (forall ((?v0 D_c_bool_fun_fun$ )(?v1 C_d_prod$ )(?v2 Bool_bool_fun$ )(?v3 C_d_bool_fun_fun$ ))(=> (and (fun_app$bh (fun_app$bi ?v0 (snd$a ?v1 ))(fst$a ?v1 ))(forall ((?v4 C$ )(?v5 D$ ))(=> (fun_app$bh (fun_app$bi ?v0 ?v5 )?v4 )(fun_app$bb ?v2 (fun_app$z (fun_app$aa ?v3 ?v4 )?v5 )))))(fun_app$bb ?v2 (fun_app$az (case_prod$e ?v3 )?v1 )))):named a104 ))
(assert (! (forall ((?v0 A_b_prod_llist_set$ )(?v1 A_b_prod_llist_set$ )(?v2 A_b_prod_llist_b_llist_fun$ )(?v3 A_b_prod_llist_a_llist_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$a (conversep$a (grp$a ?v0 ?v2 ))(grp$ ?v0 ?v3 ))(relcompp$a (conversep$a (grp$a ?v1 ?v2 ))(grp$ ?v1 ?v3 ))))):named a105 ))
(assert (! (forall ((?v0 A_b_prod_llist_set$ )(?v1 A_b_prod_llist_set$ )(?v2 A_b_prod_llist_b_llist_fun$ )(?v3 A_b_prod_llist_b_llist_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$b (conversep$a (grp$a ?v0 ?v2 ))(grp$a ?v0 ?v3 ))(relcompp$b (conversep$a (grp$a ?v1 ?v2 ))(grp$a ?v1 ?v3 ))))):named a106 ))
(assert (! (forall ((?v0 A_b_prod_llist_set$ )(?v1 A_b_prod_llist_set$ )(?v2 A_b_prod_llist_a_llist_fun$ )(?v3 A_b_prod_llist_a_llist_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$c (conversep$ (grp$ ?v0 ?v2 ))(grp$ ?v0 ?v3 ))(relcompp$c (conversep$ (grp$ ?v1 ?v2 ))(grp$ ?v1 ?v3 ))))):named a107 ))
(assert (! (forall ((?v0 A_b_prod_llist_set$ )(?v1 A_b_prod_llist_set$ )(?v2 A_b_prod_llist_a_llist_fun$ )(?v3 A_b_prod_llist_b_llist_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$ (conversep$ (grp$ ?v0 ?v2 ))(grp$a ?v0 ?v3 ))(relcompp$ (conversep$ (grp$ ?v1 ?v2 ))(grp$a ?v1 ?v3 ))))):named a108 ))
(assert (! (forall ((?v0 C_set$ )(?v1 C_set$ )(?v2 C_d_fun$ )(?v3 C_d_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$d (conversep$b (grp$b ?v0 ?v2 ))(grp$b ?v0 ?v3 ))(relcompp$d (conversep$b (grp$b ?v1 ?v2 ))(grp$b ?v1 ?v3 ))))):named a109 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$e (conversep$c (grp$c ?v0 ?v2 ))(grp$c ?v0 ?v3 ))(relcompp$e (conversep$c (grp$c ?v1 ?v2 ))(grp$c ?v1 ?v3 ))))):named a110 ))
(assert (! (forall ((?v0 C_d_prod_llist_set$ )(?v1 C_d_prod_llist_set$ )(?v2 C_d_prod_llist_d_llist_fun$ )(?v3 C_d_prod_llist_c_llist_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$f (conversep$d (grp$d ?v0 ?v2 ))(grp$e ?v0 ?v3 ))(relcompp$f (conversep$d (grp$d ?v1 ?v2 ))(grp$e ?v1 ?v3 ))))):named a111 ))
(assert (! (forall ((?v0 C_d_prod_llist_set$ )(?v1 C_d_prod_llist_set$ )(?v2 C_d_prod_llist_d_llist_fun$ )(?v3 C_d_prod_llist_d_llist_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$g (conversep$d (grp$d ?v0 ?v2 ))(grp$d ?v0 ?v3 ))(relcompp$g (conversep$d (grp$d ?v1 ?v2 ))(grp$d ?v1 ?v3 ))))):named a112 ))
(assert (! (forall ((?v0 C_d_prod_llist_set$ )(?v1 C_d_prod_llist_set$ )(?v2 C_d_prod_llist_c_llist_fun$ )(?v3 C_d_prod_llist_c_llist_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$h (conversep$e (grp$e ?v0 ?v2 ))(grp$e ?v0 ?v3 ))(relcompp$h (conversep$e (grp$e ?v1 ?v2 ))(grp$e ?v1 ?v3 ))))):named a113 ))
(assert (! (forall ((?v0 C_d_prod_llist_set$ )(?v1 C_d_prod_llist_set$ )(?v2 C_d_prod_llist_c_llist_fun$ )(?v3 C_d_prod_llist_d_llist_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$i (conversep$e (grp$e ?v0 ?v2 ))(grp$d ?v0 ?v3 ))(relcompp$i (conversep$e (grp$e ?v1 ?v2 ))(grp$d ?v1 ?v3 ))))):named a114 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_prod$ )(?v1 A_b_prod_llist_a_llist_prod_llist_set$ )(?v2 A_b_prod_llist_a_llist_prod_llist_a_b_prod_llist_llist_fun$ ))(=> (member$f ?v0 (collect$g (case_prod$f (grp$f ?v1 ?v2 ))))(member$g (fst$f ?v0 )?v1 ))):named a115 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod_llist_a_llist_llist_prod$ )(?v1 A_b_prod_llist_a_llist_prod_llist_set$ )(?v2 A_b_prod_llist_a_llist_prod_llist_a_llist_llist_fun$ ))(=> (member$h ?v0 (collect$h (case_prod$g (grp$g ?v1 ?v2 ))))(member$g (fst$g ?v0 )?v1 ))):named a116 ))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_prod$ )(?v1 A_b_prod_llist_b_llist_prod_llist_set$ )(?v2 A_b_prod_llist_b_llist_prod_llist_a_b_prod_llist_llist_fun$ ))(=> (member$i ?v0 (collect$i (case_prod$h (grp$h ?v1 ?v2 ))))(member$j (fst$h ?v0 )?v1 ))):named a117 ))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_prod_llist_b_llist_llist_prod$ )(?v1 A_b_prod_llist_b_llist_prod_llist_set$ )(?v2 A_b_prod_llist_b_llist_prod_llist_b_llist_llist_fun$ ))(=> (member$k ?v0 (collect$j (case_prod$i (grp$i ?v1 ?v2 ))))(member$j (fst$i ?v0 )?v1 ))):named a118 ))
(assert (! (forall ((?v0 C_d_prod_llist_c_llist_prod$ )(?v1 C_d_prod_llist_set$ )(?v2 C_d_prod_llist_c_llist_fun$ ))(=> (member$l ?v0 (collect$b (case_prod$b (grp$e ?v1 ?v2 ))))(member$m (fst$c ?v0 )?v1 ))):named a119 ))
(assert (! (forall ((?v0 C_d_prod_llist_d_llist_prod$ )(?v1 C_d_prod_llist_set$ )(?v2 C_d_prod_llist_d_llist_fun$ ))(=> (member$n ?v0 (collect$a (case_prod$a (grp$d ?v1 ?v2 ))))(member$m (fst$b ?v0 )?v1 ))):named a120 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod$ )(?v1 A_b_prod_llist_set$ )(?v2 A_b_prod_llist_a_llist_fun$ ))(=> (member$o ?v0 (collect$d (case_prod$d (grp$ ?v1 ?v2 ))))(member$p (fst$e ?v0 )?v1 ))):named a121 ))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_prod$ )(?v1 A_b_prod_llist_set$ )(?v2 A_b_prod_llist_b_llist_fun$ ))(=> (member$q ?v0 (collect$c (case_prod$c (grp$a ?v1 ?v2 ))))(member$p (fst$d ?v0 )?v1 ))):named a122 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_set$ )(?v2 A_b_fun$ ))(=> (member$ ?v0 (collect$ (case_prod$ (grp$c ?v1 ?v2 ))))(member$d (fst$ ?v0 )?v1 ))):named a123 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 C_set$ )(?v2 C_d_fun$ ))(=> (member$a ?v0 (collect$e (case_prod$e (grp$b ?v1 ?v2 ))))(member$e (fst$a ?v0 )?v1 ))):named a124 ))
(assert (! (forall ((?v0 C_d_prod_llist_d_llist_prod$ )(?v1 C_d_prod_llist_d_llist_bool_fun_fun$ ))(=> (member$n ?v0 (collect$a (case_prod$a ?v1 )))(fun_app$r (fun_app$s ?v1 (fst$b ?v0 ))(snd$b ?v0 )))):named a125 ))
(assert (! (forall ((?v0 C_d_prod_llist_c_llist_prod$ )(?v1 C_d_prod_llist_c_llist_bool_fun_fun$ ))(=> (member$l ?v0 (collect$b (case_prod$b ?v1 )))(fun_app$t (fun_app$u ?v1 (fst$c ?v0 ))(snd$c ?v0 )))):named a126 ))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_prod$ )(?v1 A_b_prod_llist_b_llist_bool_fun_fun$ ))(=> (member$q ?v0 (collect$c (case_prod$c ?v1 )))(fun_app$v (fun_app$w ?v1 (fst$d ?v0 ))(snd$d ?v0 )))):named a127 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod$ )(?v1 A_b_prod_llist_a_llist_bool_fun_fun$ ))(=> (member$o ?v0 (collect$d (case_prod$d ?v1 )))(fun_app$x (fun_app$y ?v1 (fst$e ?v0 ))(snd$e ?v0 )))):named a128 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_bool_fun_fun$ ))(=> (member$ ?v0 (collect$ (case_prod$ ?v1 )))(fun_app$ab (fun_app$ac ?v1 (fst$ ?v0 ))(snd$ ?v0 )))):named a129 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 C_d_bool_fun_fun$ ))(=> (member$a ?v0 (collect$e (case_prod$e ?v1 )))(fun_app$z (fun_app$aa ?v1 (fst$a ?v0 ))(snd$a ?v0 )))):named a130 ))
(assert (! (forall ((?v0 C_d_prod_llist_d_llist_bool_fun_fun$ ))(= (llist_all2$ ?v0 )(relcompp$j (conversep$f (grp$j (collect$k (uuq$ ?v0 ))(lmap$i uur$ )))(grp$k (collect$k (uuq$ ?v0 ))(lmap$j uus$ ))))):named a131 ))
(assert (! (forall ((?v0 C_d_prod_llist_c_llist_bool_fun_fun$ ))(= (llist_all2$a ?v0 )(relcompp$k (conversep$g (grp$l (collect$l (uut$ ?v0 ))(lmap$k uuu$ )))(grp$m (collect$l (uut$ ?v0 ))(lmap$l uuv$ ))))):named a132 ))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_bool_fun_fun$ ))(= (llist_all2$b ?v0 )(relcompp$l (conversep$h (grp$h (collect$m (uuw$ ?v0 ))(lmap$m uux$ )))(grp$i (collect$m (uuw$ ?v0 ))(lmap$n uuy$ ))))):named a133 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$ ))(= (llist_all2$c ?v0 )(relcompp$m (conversep$i (grp$f (collect$n (uuz$ ?v0 ))(lmap$o uva$ )))(grp$g (collect$n (uuz$ ?v0 ))(lmap$p uvb$ ))))):named a134 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ ))(= (llist_all2$d ?v0 )(relcompp$ (conversep$ (grp$ (collect$f (uvc$ ?v0 ))(lmap$ uua$ )))(grp$a (collect$f (uvc$ ?v0 ))(lmap$a uub$ ))))):named a135 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ ))(= (llist_all2$e ?v0 )(relcompp$i (conversep$e (grp$e (collect$o (uvd$ ?v0 ))(lmap$q uud$ )))(grp$d (collect$o (uvd$ ?v0 ))(lmap$r uuc$ ))))):named a136 ))
(check-sat )
;(get-unsat-core )
