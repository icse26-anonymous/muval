;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort E$ 0 )
(declare-sort F$ 0 )
(declare-sort Nat$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort E_bool_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort C_c_bool_fun_fun$ 0 )
(declare-sort C_e_bool_fun_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort E_c_bool_fun_fun$ 0 )
(declare-sort E_e_bool_fun_fun$ 0 )
(declare-sort E_llist_bool_fun$ 0 )
(declare-sort Bool_bool_bool_fun_fun$ 0 )
(declare-sort C_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_e_llist_bool_fun_fun$ 0 )
(declare-sort E_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort E_llist_e_llist_bool_fun_fun$ 0 )
(declare-sort C_llist$ 0)
(declare-sort E_llist$ 0)
(declare-fun lNil$ ()C_llist$)
(declare-fun lhd$ (C_llist$)C$)
(declare-fun ltl$ (C_llist$)C_llist$)
(declare-fun lCons$ (C$ C_llist$ )C_llist$)
(declare-fun lNil$a ()E_llist$)
(declare-fun lhd$a (E_llist$)E$)
(declare-fun ltl$a (E_llist$)E_llist$)
(declare-fun lCons$a (E$ E_llist$ )E_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun a$ ()C_llist$ )
(declare-fun b$ ()D$ )
(declare-fun aa$ ()E_llist$ )
(declare-fun ba$ ()F$ )
(declare-fun fa$ (C$ )A$ )
(declare-fun ga$ (D$ )B$ )
(declare-fun uu$ ()C_e_bool_fun_fun$ )
(declare-fun f_a$ (E$ )A$ )
(declare-fun g_a$ (F$ )B$ )
(declare-fun uua$ (C_c_bool_fun_fun$ C_c_bool_fun_fun$ )C_c_bool_fun_fun$ )
(declare-fun uub$ (E_c_bool_fun_fun$ E_c_bool_fun_fun$ )E_c_bool_fun_fun$ )
(declare-fun uuc$ (E_e_bool_fun_fun$ E_e_bool_fun_fun$ )E_e_bool_fun_fun$ )
(declare-fun uud$ (C_e_bool_fun_fun$ C_e_bool_fun_fun$ )C_e_bool_fun_fun$ )
(declare-fun uue$ ()C_c_bool_fun_fun$ )
(declare-fun uuf$ ()C_llist_c_llist_bool_fun_fun$ )
(declare-fun uug$ ()E_e_bool_fun_fun$ )
(declare-fun uuh$ ()E_llist_e_llist_bool_fun_fun$ )
(declare-fun uui$ ()Bool_bool_bool_fun_fun$ )
(declare-fun uuj$ ()C_c_bool_fun_fun$ )
(declare-fun uuk$ ()E_c_bool_fun_fun$ )
(declare-fun uul$ ()E_e_bool_fun_fun$ )
(declare-fun uum$ ()C_e_bool_fun_fun$ )
(declare-fun fun_app$ (E_bool_fun$ E$ )Bool )
(declare-fun lappend$ (E_llist$ E_llist$ )E_llist$ )
(declare-fun lfinite$ ()E_llist_bool_fun$ )
(declare-fun llength$ (C_llist$ )Enat$ )
(declare-fun rel_fun$ (E_llist_e_llist_bool_fun_fun$ Bool_bool_bool_fun_fun$ E_llist_bool_fun$ E_llist_bool_fun$ )Bool )
(declare-fun fun_app$a (C_e_bool_fun_fun$ C$ )E_bool_fun$ )
(declare-fun fun_app$b (E_llist_bool_fun$ E_llist$ )Bool )
(declare-fun fun_app$c (E_llist_e_llist_bool_fun_fun$ E_llist$ )E_llist_bool_fun$ )
(declare-fun fun_app$d (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun fun_app$e (C_llist_c_llist_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$f (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$g (Bool_bool_bool_fun_fun$ Bool )Bool_bool_fun$ )
(declare-fun fun_app$h (E_e_bool_fun_fun$ E$ )E_bool_fun$ )
(declare-fun fun_app$i (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$j (C_c_bool_fun_fun$ C$ )C_bool_fun$ )
(declare-fun fun_app$k (E_c_bool_fun_fun$ E$ )C_bool_fun$ )
(declare-fun fun_app$l (C_llist_e_llist_bool_fun_fun$ C_llist$ )E_llist_bool_fun$ )
(declare-fun fun_app$m (E_llist_c_llist_bool_fun_fun$ E_llist$ )C_llist_bool_fun$ )
(declare-fun lappend$a (C_llist$ C_llist$ )C_llist$ )
(declare-fun lfinite$a ()C_llist_bool_fun$ )
(declare-fun llength$a (E_llist$ )Enat$ )
(declare-fun rel_fun$a (E_llist_c_llist_bool_fun_fun$ Bool_bool_bool_fun_fun$ E_llist_bool_fun$ C_llist_bool_fun$ )Bool )
(declare-fun rel_fun$b (C_llist_c_llist_bool_fun_fun$ Bool_bool_bool_fun_fun$ C_llist_bool_fun$ C_llist_bool_fun$ )Bool )
(declare-fun rel_fun$c (C_llist_e_llist_bool_fun_fun$ Bool_bool_bool_fun_fun$ C_llist_bool_fun$ E_llist_bool_fun$ )Bool )
(declare-fun llist_all2$ (C_e_bool_fun_fun$ )C_llist_e_llist_bool_fun_fun$ )
(declare-fun llist_all2$a (E_e_bool_fun_fun$ )E_llist_e_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (E_c_bool_fun_fun$ )E_llist_c_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (C_c_bool_fun_fun$ )C_llist_c_llist_bool_fun_fun$ )
(declare-fun lstrict_prefix$ (E_llist$ )E_llist_bool_fun$ )
(declare-fun lstrict_prefix$a (C_llist$ )C_llist_bool_fun$ )
(assert (! (forall ((?v0 C$ )(?v1 E$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(= (fa$ ?v0 )(f_a$ ?v1 ))):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 E_llist$ )(?v1 E_llist$ ))(! (= (fun_app$b (fun_app$c uuh$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uuh$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(! (= (fun_app$d (fun_app$e uuf$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uuf$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(! (= (fun_app$f (fun_app$g uui$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uui$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 E$ )(?v1 E$ ))(! (= (fun_app$ (fun_app$h uug$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$h uug$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(! (= (fun_app$i (fun_app$j uue$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$i (fun_app$j uue$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 E_e_bool_fun_fun$ )(?v1 E_e_bool_fun_fun$ )(?v2 E$ )(?v3 E$ ))(! (= (fun_app$ (fun_app$h (uuc$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$ (fun_app$h ?v0 ?v2 )?v3 )(fun_app$ (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$h (uuc$ ?v0 ?v1 )?v2 )?v3 )))):named a6 ))
(assert (! (forall ((?v0 E_c_bool_fun_fun$ )(?v1 E_c_bool_fun_fun$ )(?v2 E$ )(?v3 C$ ))(! (= (fun_app$i (fun_app$k (uub$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$i (fun_app$k ?v0 ?v2 )?v3 )(fun_app$i (fun_app$k ?v1 ?v2 )?v3 ))):pattern ((fun_app$i (fun_app$k (uub$ ?v0 ?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_e_bool_fun_fun$ )(?v2 C$ )(?v3 E$ ))(! (= (fun_app$ (fun_app$a (uud$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$ (fun_app$a ?v0 ?v2 )?v3 )(fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 C$ )(?v3 C$ ))(! (= (fun_app$i (fun_app$j (uua$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$i (fun_app$j ?v0 ?v2 )?v3 )(fun_app$i (fun_app$j ?v1 ?v2 )?v3 ))):pattern ((fun_app$i (fun_app$j (uua$ ?v0 ?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 E$ )(?v1 E$ ))(! (= (fun_app$ (fun_app$h uul$ ?v0 )?v1 )true ):pattern ((fun_app$ (fun_app$h uul$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 E$ )(?v1 C$ ))(! (= (fun_app$i (fun_app$k uuk$ ?v0 )?v1 )true ):pattern ((fun_app$i (fun_app$k uuk$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 C$ )(?v1 E$ ))(! (= (fun_app$ (fun_app$a uum$ ?v0 )?v1 )true ):pattern ((fun_app$ (fun_app$a uum$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(! (= (fun_app$i (fun_app$j uuj$ ?v0 )?v1 )true ):pattern ((fun_app$i (fun_app$j uuj$ ?v0 )?v1 )))):named a13 ))
(assert (! (not (= (and (fun_app$b (fun_app$l (llist_all2$ uu$ )a$ )aa$ )(=> (fun_app$b lfinite$ aa$ )(= (ga$ b$ )(g_a$ ba$ ))))(and (fun_app$b (fun_app$l (llist_all2$ uu$ )a$ )aa$ )(=> (fun_app$d lfinite$a a$ )(= (ga$ b$ )(g_a$ ba$ )))))):named a14 ))
(assert (! (forall ((?v0 E_e_bool_fun_fun$ )(?v1 E_llist$ )(?v2 E_llist$ ))(=> (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(= (fun_app$b lfinite$ ?v1 )(fun_app$b lfinite$ ?v2 )))):named a15 ))
(assert (! (forall ((?v0 E_c_bool_fun_fun$ )(?v1 E_llist$ )(?v2 C_llist$ ))(=> (fun_app$d (fun_app$m (llist_all2$b ?v0 )?v1 )?v2 )(= (fun_app$b lfinite$ ?v1 )(fun_app$d lfinite$a ?v2 )))):named a16 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v1 )?v2 )(= (fun_app$d lfinite$a ?v1 )(fun_app$d lfinite$a ?v2 )))):named a17 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_llist$ )(?v2 E_llist$ ))(=> (fun_app$b (fun_app$l (llist_all2$ ?v0 )?v1 )?v2 )(= (fun_app$d lfinite$a ?v1 )(fun_app$b lfinite$ ?v2 )))):named a18 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 C_llist$ )(?v3 C_llist$ ))(= (fun_app$d (fun_app$e (llist_all2$c (uua$ ?v0 ?v1 ))?v2 )?v3 )(and (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v2 )?v3 )(fun_app$d (fun_app$e (llist_all2$c ?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 E_c_bool_fun_fun$ )(?v1 E_c_bool_fun_fun$ )(?v2 E_llist$ )(?v3 C_llist$ ))(= (fun_app$d (fun_app$m (llist_all2$b (uub$ ?v0 ?v1 ))?v2 )?v3 )(and (fun_app$d (fun_app$m (llist_all2$b ?v0 )?v2 )?v3 )(fun_app$d (fun_app$m (llist_all2$b ?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 E_e_bool_fun_fun$ )(?v1 E_e_bool_fun_fun$ )(?v2 E_llist$ )(?v3 E_llist$ ))(= (fun_app$b (fun_app$c (llist_all2$a (uuc$ ?v0 ?v1 ))?v2 )?v3 )(and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v2 )?v3 )(fun_app$b (fun_app$c (llist_all2$a ?v1 )?v2 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_e_bool_fun_fun$ )(?v2 C_llist$ )(?v3 E_llist$ ))(= (fun_app$b (fun_app$l (llist_all2$ (uud$ ?v0 ?v1 ))?v2 )?v3 )(and (fun_app$b (fun_app$l (llist_all2$ ?v0 )?v2 )?v3 )(fun_app$b (fun_app$l (llist_all2$ ?v1 )?v2 )?v3 )))):named a22 ))
(assert (! (= (llist_all2$c uue$ )uuf$ ):named a23 ))
(assert (! (= (llist_all2$a uug$ )uuh$ ):named a24 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 C_c_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v1 )?v2 )(forall ((?v4 C$ )(?v5 C$ ))(=> (fun_app$i (fun_app$j ?v0 ?v4 )?v5 )(fun_app$i (fun_app$j ?v3 ?v4 )?v5 ))))(fun_app$d (fun_app$e (llist_all2$c ?v3 )?v1 )?v2 ))):named a25 ))
(assert (! (forall ((?v0 E_c_bool_fun_fun$ )(?v1 E_llist$ )(?v2 C_llist$ )(?v3 E_c_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$m (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 E$ )(?v5 C$ ))(=> (fun_app$i (fun_app$k ?v0 ?v4 )?v5 )(fun_app$i (fun_app$k ?v3 ?v4 )?v5 ))))(fun_app$d (fun_app$m (llist_all2$b ?v3 )?v1 )?v2 ))):named a26 ))
(assert (! (forall ((?v0 E_e_bool_fun_fun$ )(?v1 E_llist$ )(?v2 E_llist$ )(?v3 E_e_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 E$ )(?v5 E$ ))(=> (fun_app$ (fun_app$h ?v0 ?v4 )?v5 )(fun_app$ (fun_app$h ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$a ?v3 )?v1 )?v2 ))):named a27 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_llist$ )(?v2 E_llist$ )(?v3 C_e_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$l (llist_all2$ ?v0 )?v1 )?v2 )(forall ((?v4 C$ )(?v5 E$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v5 )(fun_app$ (fun_app$a ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$l (llist_all2$ ?v3 )?v1 )?v2 ))):named a28 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 C_c_bool_fun_fun$ )(?v3 C_llist$ )(?v4 C_llist$ )(?v5 C_llist$ )(?v6 C_llist$ ))(=> (and (forall ((?v7 C$ )(?v8 C$ ))(=> (fun_app$i (fun_app$j ?v0 ?v7 )?v8 )(forall ((?v9 C$ )(?v10 C$ ))(=> (fun_app$i (fun_app$j ?v0 ?v9 )?v10 )(= (fun_app$i (fun_app$j ?v1 ?v7 )?v9 )(fun_app$i (fun_app$j ?v2 ?v8 )?v10 ))))))(and (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v3 )?v4 )(fun_app$d (fun_app$e (llist_all2$c ?v0 )?v5 )?v6 )))(= (fun_app$d (fun_app$e (llist_all2$c ?v1 )?v3 )?v5 )(fun_app$d (fun_app$e (llist_all2$c ?v2 )?v4 )?v6 )))):named a29 ))
(assert (! (forall ((?v0 E_c_bool_fun_fun$ )(?v1 E_e_bool_fun_fun$ )(?v2 C_c_bool_fun_fun$ )(?v3 E_llist$ )(?v4 C_llist$ )(?v5 E_llist$ )(?v6 C_llist$ ))(=> (and (forall ((?v7 E$ )(?v8 C$ ))(=> (fun_app$i (fun_app$k ?v0 ?v7 )?v8 )(forall ((?v9 E$ )(?v10 C$ ))(=> (fun_app$i (fun_app$k ?v0 ?v9 )?v10 )(= (fun_app$ (fun_app$h ?v1 ?v7 )?v9 )(fun_app$i (fun_app$j ?v2 ?v8 )?v10 ))))))(and (fun_app$d (fun_app$m (llist_all2$b ?v0 )?v3 )?v4 )(fun_app$d (fun_app$m (llist_all2$b ?v0 )?v5 )?v6 )))(= (fun_app$b (fun_app$c (llist_all2$a ?v1 )?v3 )?v5 )(fun_app$d (fun_app$e (llist_all2$c ?v2 )?v4 )?v6 )))):named a30 ))
(assert (! (forall ((?v0 E_e_bool_fun_fun$ )(?v1 E_e_bool_fun_fun$ )(?v2 E_e_bool_fun_fun$ )(?v3 E_llist$ )(?v4 E_llist$ )(?v5 E_llist$ )(?v6 E_llist$ ))(=> (and (forall ((?v7 E$ )(?v8 E$ ))(=> (fun_app$ (fun_app$h ?v0 ?v7 )?v8 )(forall ((?v9 E$ )(?v10 E$ ))(=> (fun_app$ (fun_app$h ?v0 ?v9 )?v10 )(= (fun_app$ (fun_app$h ?v1 ?v7 )?v9 )(fun_app$ (fun_app$h ?v2 ?v8 )?v10 ))))))(and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v3 )?v4 )(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v5 )?v6 )))(= (fun_app$b (fun_app$c (llist_all2$a ?v1 )?v3 )?v5 )(fun_app$b (fun_app$c (llist_all2$a ?v2 )?v4 )?v6 )))):named a31 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 E_e_bool_fun_fun$ )(?v3 C_llist$ )(?v4 E_llist$ )(?v5 C_llist$ )(?v6 E_llist$ ))(=> (and (forall ((?v7 C$ )(?v8 E$ ))(=> (fun_app$ (fun_app$a ?v0 ?v7 )?v8 )(forall ((?v9 C$ )(?v10 E$ ))(=> (fun_app$ (fun_app$a ?v0 ?v9 )?v10 )(= (fun_app$i (fun_app$j ?v1 ?v7 )?v9 )(fun_app$ (fun_app$h ?v2 ?v8 )?v10 ))))))(and (fun_app$b (fun_app$l (llist_all2$ ?v0 )?v3 )?v4 )(fun_app$b (fun_app$l (llist_all2$ ?v0 )?v5 )?v6 )))(= (fun_app$d (fun_app$e (llist_all2$c ?v1 )?v3 )?v5 )(fun_app$b (fun_app$c (llist_all2$a ?v2 )?v4 )?v6 )))):named a32 ))
(assert (! (forall ((?v0 E_e_bool_fun_fun$ )(?v1 E_llist$ )(?v2 E_llist$ )(?v3 E_llist$ )(?v4 E_llist$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(=> (and (fun_app$b lfinite$ ?v1 )(fun_app$b lfinite$ ?v2 ))(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v3 )?v4 )))(fun_app$b (fun_app$c (llist_all2$a ?v0 )(lappend$ ?v1 ?v3 ))(lappend$ ?v2 ?v4 )))):named a33 ))
(assert (! (forall ((?v0 E_c_bool_fun_fun$ )(?v1 E_llist$ )(?v2 C_llist$ )(?v3 E_llist$ )(?v4 C_llist$ ))(=> (and (fun_app$d (fun_app$m (llist_all2$b ?v0 )?v1 )?v2 )(=> (and (fun_app$b lfinite$ ?v1 )(fun_app$d lfinite$a ?v2 ))(fun_app$d (fun_app$m (llist_all2$b ?v0 )?v3 )?v4 )))(fun_app$d (fun_app$m (llist_all2$b ?v0 )(lappend$ ?v1 ?v3 ))(lappend$a ?v2 ?v4 )))):named a34 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 C_llist$ )(?v4 C_llist$ ))(=> (and (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v1 )?v2 )(=> (and (fun_app$d lfinite$a ?v1 )(fun_app$d lfinite$a ?v2 ))(fun_app$d (fun_app$e (llist_all2$c ?v0 )?v3 )?v4 )))(fun_app$d (fun_app$e (llist_all2$c ?v0 )(lappend$a ?v1 ?v3 ))(lappend$a ?v2 ?v4 )))):named a35 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_llist$ )(?v2 E_llist$ )(?v3 C_llist$ )(?v4 E_llist$ ))(=> (and (fun_app$b (fun_app$l (llist_all2$ ?v0 )?v1 )?v2 )(=> (and (fun_app$d lfinite$a ?v1 )(fun_app$b lfinite$ ?v2 ))(fun_app$b (fun_app$l (llist_all2$ ?v0 )?v3 )?v4 )))(fun_app$b (fun_app$l (llist_all2$ ?v0 )(lappend$a ?v1 ?v3 ))(lappend$ ?v2 ?v4 )))):named a36 ))
(assert (! (forall ((?v0 E_e_bool_fun_fun$ ))(rel_fun$ (llist_all2$a ?v0 )uui$ lfinite$ lfinite$ )):named a37 ))
(assert (! (forall ((?v0 E_c_bool_fun_fun$ ))(rel_fun$a (llist_all2$b ?v0 )uui$ lfinite$ lfinite$a )):named a38 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ ))(rel_fun$b (llist_all2$c ?v0 )uui$ lfinite$a lfinite$a )):named a39 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ ))(rel_fun$c (llist_all2$ ?v0 )uui$ lfinite$a lfinite$ )):named a40 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(= (fun_app$d (fun_app$e (llist_all2$c uuj$ )?v0 )?v1 )(= (llength$ ?v0 )(llength$ ?v1 )))):named a41 ))
(assert (! (forall ((?v0 E_llist$ )(?v1 C_llist$ ))(= (fun_app$d (fun_app$m (llist_all2$b uuk$ )?v0 )?v1 )(= (llength$a ?v0 )(llength$ ?v1 )))):named a42 ))
(assert (! (forall ((?v0 E_llist$ )(?v1 E_llist$ ))(= (fun_app$b (fun_app$c (llist_all2$a uul$ )?v0 )?v1 )(= (llength$a ?v0 )(llength$a ?v1 )))):named a43 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 E_llist$ ))(= (fun_app$b (fun_app$l (llist_all2$ uum$ )?v0 )?v1 )(= (llength$ ?v0 )(llength$a ?v1 )))):named a44 ))
(assert (! (forall ((?v0 E_llist$ )(?v1 E_llist$ ))(=> (fun_app$b (lstrict_prefix$ ?v0 )?v1 )(fun_app$b lfinite$ ?v0 ))):named a45 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(=> (fun_app$d (lstrict_prefix$a ?v0 )?v1 )(fun_app$d lfinite$a ?v0 ))):named a46 ))
(assert (! (forall ((?v0 E_llist$ )(?v1 E_llist$ ))(= (fun_app$b lfinite$ (lappend$ ?v0 ?v1 ))(and (fun_app$b lfinite$ ?v0 )(fun_app$b lfinite$ ?v1 )))):named a47 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(= (fun_app$d lfinite$a (lappend$a ?v0 ?v1 ))(and (fun_app$d lfinite$a ?v0 )(fun_app$d lfinite$a ?v1 )))):named a48 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(= (lappend$a (lappend$a ?v0 ?v1 )?v2 )(lappend$a ?v0 (lappend$a ?v1 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 E_llist$ )(?v1 E_llist$ )(?v2 E_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 C_llist_bool_fun$ )(?v1 C_llist$ ))(=> (forall ((?v2 C_llist$ ))(=> (forall ((?v3 C_llist$ ))(=> (fun_app$d (lstrict_prefix$a ?v3 )?v2 )(fun_app$d ?v0 ?v3 )))(fun_app$d ?v0 ?v2 )))(fun_app$d ?v0 ?v1 ))):named a51 ))
(assert (! (forall ((?v0 E_llist_bool_fun$ )(?v1 E_llist$ ))(=> (forall ((?v2 E_llist$ ))(=> (forall ((?v3 E_llist$ ))(=> (fun_app$b (lstrict_prefix$ ?v3 )?v2 )(fun_app$b ?v0 ?v3 )))(fun_app$b ?v0 ?v2 )))(fun_app$b ?v0 ?v1 ))):named a52 ))
(assert (! (forall ((?v0 E_llist$ )(?v1 E_llist$ )(?v2 E_llist$ )(?v3 E_llist$ ))(=> (= (llength$a ?v0 )(llength$a ?v1 ))(= (= (lappend$ ?v0 ?v2 )(lappend$ ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (fun_app$b lfinite$ ?v0 )(= ?v2 ?v3 )))))):named a53 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 C_llist$ ))(=> (= (llength$ ?v0 )(llength$ ?v1 ))(= (= (lappend$a ?v0 ?v2 )(lappend$a ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (fun_app$d lfinite$a ?v0 )(= ?v2 ?v3 )))))):named a54 ))
(assert (! (forall ((?v0 E_llist$ )(?v1 E_llist$ ))(! (=> (not (fun_app$b lfinite$ ?v0 ))(= (lappend$ ?v0 ?v1 )?v0 )):pattern ((lappend$ ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(! (=> (not (fun_app$d lfinite$a ?v0 ))(= (lappend$a ?v0 ?v1 )?v0 )):pattern ((lappend$a ?v0 ?v1 )))):named a56 ))
(check-sat )
;(get-unsat-core )
