;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort E$ 0 )
(declare-sort F$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort A_d_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_e_fun$ 0 )
(declare-sort B_f_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort E_bool_fun$ 0 )
(declare-sort F_bool_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort C_c_bool_fun_fun$ 0 )
(declare-sort C_e_bool_fun_fun$ 0 )
(declare-sort D_d_bool_fun_fun$ 0 )
(declare-sort D_f_bool_fun_fun$ 0 )
(declare-sort E_c_bool_fun_fun$ 0 )
(declare-sort E_e_bool_fun_fun$ 0 )
(declare-sort F_d_bool_fun_fun$ 0 )
(declare-sort F_f_bool_fun_fun$ 0 )
(declare-sort D_c_tllist_bool_fun$ 0 )
(declare-sort F_e_tllist_bool_fun$ 0 )
(declare-sort Bool_bool_bool_fun_fun$ 0 )
(declare-sort D_c_tllist_d_c_tllist_bool_fun_fun$ 0 )
(declare-sort F_e_tllist_f_e_tllist_bool_fun_fun$ 0 )
(declare-sort D_c_tllist$ 0)
(declare-sort F_e_tllist$ 0)
(declare-fun terminal$ (D_c_tllist$)C$)
(declare-fun tNil$ (C$ )D_c_tllist$)
(declare-fun thd$ (D_c_tllist$)D$)
(declare-fun ttl$ (D_c_tllist$)D_c_tllist$)
(declare-fun tCons$ (D$ D_c_tllist$ )D_c_tllist$)
(declare-fun terminal$a (F_e_tllist$)E$)
(declare-fun tNil$a (E$ )F_e_tllist$)
(declare-fun thd$a (F_e_tllist$)F$)
(declare-fun ttl$a (F_e_tllist$)F_e_tllist$)
(declare-fun tCons$a (F$ F_e_tllist$ )F_e_tllist$)
(declare-fun a$ ()A_b_bool_fun_fun$ )
(declare-fun b$ ()C_e_bool_fun_fun$ )
(declare-fun c$ ()D_f_bool_fun_fun$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()B$ )
(declare-fun uu$ ()Bool_bool_bool_fun_fun$ )
(declare-fun xa$ ()A$ )
(declare-fun ya$ ()B$ )
(declare-fun uua$ ()F_f_bool_fun_fun$ )
(declare-fun uub$ ()E_e_bool_fun_fun$ )
(declare-fun uuc$ ()F_e_tllist_f_e_tllist_bool_fun_fun$ )
(declare-fun uud$ ()D_d_bool_fun_fun$ )
(declare-fun uue$ ()C_c_bool_fun_fun$ )
(declare-fun uuf$ ()D_c_tllist_d_c_tllist_bool_fun_fun$ )
(declare-fun tHD1$ ()A_d_fun$ )
(declare-fun tHD2$ ()B_f_fun$ )
(declare-fun tTL1$ ()A_a_fun$ )
(declare-fun tTL2$ ()B_b_fun$ )
(declare-fun fun_app$ (F_e_tllist_bool_fun$ F_e_tllist$ )Bool )
(declare-fun is_TNil$ (D_c_tllist$ )Bool )
(declare-fun rel_fun$ (A_b_bool_fun_fun$ Bool_bool_bool_fun_fun$ A_bool_fun$ B_bool_fun$ )Bool )
(declare-fun fun_app$a (F_e_tllist_f_e_tllist_bool_fun_fun$ F_e_tllist$ )F_e_tllist_bool_fun$ )
(declare-fun fun_app$b (D_c_tllist_bool_fun$ D_c_tllist$ )Bool )
(declare-fun fun_app$c (D_c_tllist_d_c_tllist_bool_fun_fun$ D_c_tllist$ )D_c_tllist_bool_fun$ )
(declare-fun fun_app$d (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$e (Bool_bool_bool_fun_fun$ Bool )Bool_bool_fun$ )
(declare-fun fun_app$f (F_bool_fun$ F$ )Bool )
(declare-fun fun_app$g (F_f_bool_fun_fun$ F$ )F_bool_fun$ )
(declare-fun fun_app$h (E_bool_fun$ E$ )Bool )
(declare-fun fun_app$i (E_e_bool_fun_fun$ E$ )E_bool_fun$ )
(declare-fun fun_app$j (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$k (D_d_bool_fun_fun$ D$ )D_bool_fun$ )
(declare-fun fun_app$l (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$m (C_c_bool_fun_fun$ C$ )C_bool_fun$ )
(declare-fun fun_app$n (C_e_bool_fun_fun$ C$ )E_bool_fun$ )
(declare-fun fun_app$o (D_f_bool_fun_fun$ D$ )F_bool_fun$ )
(declare-fun fun_app$p (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$q (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$r (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$s (E_c_bool_fun_fun$ E$ )C_bool_fun$ )
(declare-fun fun_app$t (F_d_bool_fun_fun$ F$ )D_bool_fun$ )
(declare-fun iS_TNIL1$ ()A_bool_fun$ )
(declare-fun iS_TNIL2$ ()B_bool_fun$ )
(declare-fun is_TNil$a (F_e_tllist$ )Bool )
(declare-fun rel_fun$a (A_b_bool_fun_fun$ A_b_bool_fun_fun$ A_a_fun$ B_b_fun$ )Bool )
(declare-fun rel_fun$b (A_b_bool_fun_fun$ C_e_bool_fun_fun$ A_c_fun$ B_e_fun$ )Bool )
(declare-fun rel_fun$c (A_b_bool_fun_fun$ D_f_bool_fun_fun$ A_d_fun$ B_f_fun$ )Bool )
(declare-fun tERMINAL1$ ()A_c_fun$ )
(declare-fun tERMINAL2$ ()B_e_fun$ )
(declare-fun tllist_all2$ (D_f_bool_fun_fun$ C_e_bool_fun_fun$ D_c_tllist$ F_e_tllist$ )Bool )
(declare-fun tllist_all2$a (D_d_bool_fun_fun$ C_c_bool_fun_fun$ )D_c_tllist_d_c_tllist_bool_fun_fun$ )
(declare-fun tllist_all2$b (F_d_bool_fun_fun$ E_c_bool_fun_fun$ F_e_tllist$ D_c_tllist$ )Bool )
(declare-fun tllist_all2$c (F_f_bool_fun_fun$ E_e_bool_fun_fun$ )F_e_tllist_f_e_tllist_bool_fun_fun$ )
(declare-fun unfold_tllist$ (A_bool_fun$ A_c_fun$ A_d_fun$ A_a_fun$ A$ )D_c_tllist$ )
(declare-fun unfold_tllist$a (B_bool_fun$ B_e_fun$ B_f_fun$ B_b_fun$ B$ )F_e_tllist$ )
(assert (! (forall ((?v0 F_e_tllist$ )(?v1 F_e_tllist$ ))(! (= (fun_app$ (fun_app$a uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uuc$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 D_c_tllist$ )(?v1 D_c_tllist$ ))(! (= (fun_app$b (fun_app$c uuf$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uuf$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(! (= (fun_app$d (fun_app$e uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 F$ )(?v1 F$ ))(! (= (fun_app$f (fun_app$g uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uua$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 E$ )(?v1 E$ ))(! (= (fun_app$h (fun_app$i uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$h (fun_app$i uub$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 D$ )(?v1 D$ ))(! (= (fun_app$j (fun_app$k uud$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$j (fun_app$k uud$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(! (= (fun_app$l (fun_app$m uue$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$l (fun_app$m uue$ ?v0 )?v1 )))):named a6 ))
(assert (! (not (and (= (is_TNil$ (unfold_tllist$ iS_TNIL1$ tERMINAL1$ tHD1$ tTL1$ xa$ ))(is_TNil$a (unfold_tllist$a iS_TNIL2$ tERMINAL2$ tHD2$ tTL2$ ya$ )))(and (=> (and (is_TNil$ (unfold_tllist$ iS_TNIL1$ tERMINAL1$ tHD1$ tTL1$ xa$ ))(is_TNil$a (unfold_tllist$a iS_TNIL2$ tERMINAL2$ tHD2$ tTL2$ ya$ )))(fun_app$h (fun_app$n b$ (terminal$ (unfold_tllist$ iS_TNIL1$ tERMINAL1$ tHD1$ tTL1$ xa$ )))(terminal$a (unfold_tllist$a iS_TNIL2$ tERMINAL2$ tHD2$ tTL2$ ya$ ))))(=> (and (not (is_TNil$ (unfold_tllist$ iS_TNIL1$ tERMINAL1$ tHD1$ tTL1$ xa$ )))(not (is_TNil$a (unfold_tllist$a iS_TNIL2$ tERMINAL2$ tHD2$ tTL2$ ya$ ))))(and (fun_app$f (fun_app$o c$ (thd$ (unfold_tllist$ iS_TNIL1$ tERMINAL1$ tHD1$ tTL1$ xa$ )))(thd$a (unfold_tllist$a iS_TNIL2$ tERMINAL2$ tHD2$ tTL2$ ya$ )))(or (exists ((?v0 A$ )(?v1 B$ ))(and (= (ttl$ (unfold_tllist$ iS_TNIL1$ tERMINAL1$ tHD1$ tTL1$ xa$ ))(unfold_tllist$ iS_TNIL1$ tERMINAL1$ tHD1$ tTL1$ ?v0 ))(and (= (ttl$a (unfold_tllist$a iS_TNIL2$ tERMINAL2$ tHD2$ tTL2$ ya$ ))(unfold_tllist$a iS_TNIL2$ tERMINAL2$ tHD2$ tTL2$ ?v1 ))(fun_app$p (fun_app$q a$ ?v0 )?v1 ))))(tllist_all2$ c$ b$ (ttl$ (unfold_tllist$ iS_TNIL1$ tERMINAL1$ tHD1$ tTL1$ xa$ ))(ttl$a (unfold_tllist$a iS_TNIL2$ tERMINAL2$ tHD2$ tTL2$ ya$ ))))))))):named a7 ))
(assert (! (fun_app$p (fun_app$q a$ xa$ )ya$ ):named a8 ))
(assert (! (fun_app$p (fun_app$q a$ x$ )y$ ):named a9 ))
(assert (! (rel_fun$ a$ uu$ iS_TNIL1$ iS_TNIL2$ ):named a10 ))
(assert (! (rel_fun$a a$ a$ tTL1$ tTL2$ ):named a11 ))
(assert (! (rel_fun$b a$ b$ tERMINAL1$ tERMINAL2$ ):named a12 ))
(assert (! (rel_fun$c a$ c$ tHD1$ tHD2$ ):named a13 ))
(assert (! (forall ((?v0 D_c_tllist$ ))(= (terminal$ (ttl$ ?v0 ))(terminal$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 F_e_tllist$ ))(= (terminal$a (ttl$a ?v0 ))(terminal$a ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_c_fun$ )(?v2 A_d_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (not (is_TNil$ (unfold_tllist$ ?v0 ?v1 ?v2 ?v3 ?v4 )))(not (fun_app$r ?v0 ?v4 )))):named a16 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_e_fun$ )(?v2 B_f_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(= (not (is_TNil$a (unfold_tllist$a ?v0 ?v1 ?v2 ?v3 ?v4 )))(not (fun_app$p ?v0 ?v4 )))):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_c_fun$ )(?v2 A_d_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (is_TNil$ (unfold_tllist$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(fun_app$r ?v0 ?v4 ))):named a18 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_e_fun$ )(?v2 B_f_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(= (is_TNil$a (unfold_tllist$a ?v0 ?v1 ?v2 ?v3 ?v4 ))(fun_app$p ?v0 ?v4 ))):named a19 ))
(assert (! (forall ((?v0 D_d_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 D_c_tllist$ )(?v3 D_c_tllist$ ))(= (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1 )?v2 )?v3 )(and (= (is_TNil$ ?v2 )(is_TNil$ ?v3 ))(and (=> (and (is_TNil$ ?v2 )(is_TNil$ ?v3 ))(fun_app$l (fun_app$m ?v1 (terminal$ ?v2 ))(terminal$ ?v3 )))(=> (and (not (is_TNil$ ?v2 ))(not (is_TNil$ ?v3 )))(and (fun_app$j (fun_app$k ?v0 (thd$ ?v2 ))(thd$ ?v3 ))(fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1 )(ttl$ ?v2 ))(ttl$ ?v3 )))))))):named a20 ))
(assert (! (forall ((?v0 F_d_bool_fun_fun$ )(?v1 E_c_bool_fun_fun$ )(?v2 F_e_tllist$ )(?v3 D_c_tllist$ ))(= (tllist_all2$b ?v0 ?v1 ?v2 ?v3 )(and (= (is_TNil$a ?v2 )(is_TNil$ ?v3 ))(and (=> (and (is_TNil$a ?v2 )(is_TNil$ ?v3 ))(fun_app$l (fun_app$s ?v1 (terminal$a ?v2 ))(terminal$ ?v3 )))(=> (and (not (is_TNil$a ?v2 ))(not (is_TNil$ ?v3 )))(and (fun_app$j (fun_app$t ?v0 (thd$a ?v2 ))(thd$ ?v3 ))(tllist_all2$b ?v0 ?v1 (ttl$a ?v2 )(ttl$ ?v3 )))))))):named a21 ))
(assert (! (forall ((?v0 F_f_bool_fun_fun$ )(?v1 E_e_bool_fun_fun$ )(?v2 F_e_tllist$ )(?v3 F_e_tllist$ ))(= (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1 )?v2 )?v3 )(and (= (is_TNil$a ?v2 )(is_TNil$a ?v3 ))(and (=> (and (is_TNil$a ?v2 )(is_TNil$a ?v3 ))(fun_app$h (fun_app$i ?v1 (terminal$a ?v2 ))(terminal$a ?v3 )))(=> (and (not (is_TNil$a ?v2 ))(not (is_TNil$a ?v3 )))(and (fun_app$f (fun_app$g ?v0 (thd$a ?v2 ))(thd$a ?v3 ))(fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1 )(ttl$a ?v2 ))(ttl$a ?v3 )))))))):named a22 ))
(assert (! (forall ((?v0 D_f_bool_fun_fun$ )(?v1 C_e_bool_fun_fun$ )(?v2 D_c_tllist$ )(?v3 F_e_tllist$ ))(= (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(and (= (is_TNil$ ?v2 )(is_TNil$a ?v3 ))(and (=> (and (is_TNil$ ?v2 )(is_TNil$a ?v3 ))(fun_app$h (fun_app$n ?v1 (terminal$ ?v2 ))(terminal$a ?v3 )))(=> (and (not (is_TNil$ ?v2 ))(not (is_TNil$a ?v3 )))(and (fun_app$f (fun_app$o ?v0 (thd$ ?v2 ))(thd$a ?v3 ))(tllist_all2$ ?v0 ?v1 (ttl$ ?v2 )(ttl$a ?v3 )))))))):named a23 ))
(assert (! (= (tllist_all2$c uua$ uub$ )uuc$ ):named a24 ))
(assert (! (= (tllist_all2$a uud$ uue$ )uuf$ ):named a25 ))
(assert (! (forall ((?v0 D_c_tllist$ ))(=> (and (=> (is_TNil$ ?v0 )false )(=> (not (is_TNil$ ?v0 ))false ))false )):named a26 ))
(assert (! (forall ((?v0 F_e_tllist$ ))(=> (and (=> (is_TNil$a ?v0 )false )(=> (not (is_TNil$a ?v0 ))false ))false )):named a27 ))
(assert (! (forall ((?v0 D_c_tllist$ ))(=> (and (=> (is_TNil$ ?v0 )false )(=> (not (is_TNil$ ?v0 ))false ))false )):named a28 ))
(assert (! (forall ((?v0 F_e_tllist$ ))(=> (and (=> (is_TNil$a ?v0 )false )(=> (not (is_TNil$a ?v0 ))false ))false )):named a29 ))
(assert (! (forall ((?v0 F_f_bool_fun_fun$ )(?v1 E_e_bool_fun_fun$ )(?v2 F_e_tllist$ )(?v3 F_e_tllist$ )(?v4 F_f_bool_fun_fun$ )(?v5 E_e_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1 )?v2 )?v3 )(and (forall ((?v6 F$ )(?v7 F$ ))(=> (fun_app$f (fun_app$g ?v0 ?v6 )?v7 )(fun_app$f (fun_app$g ?v4 ?v6 )?v7 )))(forall ((?v6 E$ )(?v7 E$ ))(=> (fun_app$h (fun_app$i ?v1 ?v6 )?v7 )(fun_app$h (fun_app$i ?v5 ?v6 )?v7 )))))(fun_app$ (fun_app$a (tllist_all2$c ?v4 ?v5 )?v2 )?v3 ))):named a30 ))
(assert (! (forall ((?v0 F_d_bool_fun_fun$ )(?v1 E_c_bool_fun_fun$ )(?v2 F_e_tllist$ )(?v3 D_c_tllist$ )(?v4 F_d_bool_fun_fun$ )(?v5 E_c_bool_fun_fun$ ))(=> (and (tllist_all2$b ?v0 ?v1 ?v2 ?v3 )(and (forall ((?v6 F$ )(?v7 D$ ))(=> (fun_app$j (fun_app$t ?v0 ?v6 )?v7 )(fun_app$j (fun_app$t ?v4 ?v6 )?v7 )))(forall ((?v6 E$ )(?v7 C$ ))(=> (fun_app$l (fun_app$s ?v1 ?v6 )?v7 )(fun_app$l (fun_app$s ?v5 ?v6 )?v7 )))))(tllist_all2$b ?v4 ?v5 ?v2 ?v3 ))):named a31 ))
(assert (! (forall ((?v0 D_d_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 D_c_tllist$ )(?v3 D_c_tllist$ )(?v4 D_d_bool_fun_fun$ )(?v5 C_c_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1 )?v2 )?v3 )(and (forall ((?v6 D$ )(?v7 D$ ))(=> (fun_app$j (fun_app$k ?v0 ?v6 )?v7 )(fun_app$j (fun_app$k ?v4 ?v6 )?v7 )))(forall ((?v6 C$ )(?v7 C$ ))(=> (fun_app$l (fun_app$m ?v1 ?v6 )?v7 )(fun_app$l (fun_app$m ?v5 ?v6 )?v7 )))))(fun_app$b (fun_app$c (tllist_all2$a ?v4 ?v5 )?v2 )?v3 ))):named a32 ))
(assert (! (forall ((?v0 D_f_bool_fun_fun$ )(?v1 C_e_bool_fun_fun$ )(?v2 D_c_tllist$ )(?v3 F_e_tllist$ )(?v4 D_f_bool_fun_fun$ )(?v5 C_e_bool_fun_fun$ ))(=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(and (forall ((?v6 D$ )(?v7 F$ ))(=> (fun_app$f (fun_app$o ?v0 ?v6 )?v7 )(fun_app$f (fun_app$o ?v4 ?v6 )?v7 )))(forall ((?v6 C$ )(?v7 E$ ))(=> (fun_app$h (fun_app$n ?v1 ?v6 )?v7 )(fun_app$h (fun_app$n ?v5 ?v6 )?v7 )))))(tllist_all2$ ?v4 ?v5 ?v2 ?v3 ))):named a33 ))
(assert (! (forall ((?v0 D_d_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 D_c_tllist$ )(?v3 D_c_tllist$ ))(=> (and (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1 )?v2 )?v3 )(or (not (is_TNil$ ?v2 ))(not (is_TNil$ ?v3 ))))(fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1 )(ttl$ ?v2 ))(ttl$ ?v3 )))):named a34 ))
(assert (! (forall ((?v0 F_d_bool_fun_fun$ )(?v1 E_c_bool_fun_fun$ )(?v2 F_e_tllist$ )(?v3 D_c_tllist$ ))(=> (and (tllist_all2$b ?v0 ?v1 ?v2 ?v3 )(or (not (is_TNil$a ?v2 ))(not (is_TNil$ ?v3 ))))(tllist_all2$b ?v0 ?v1 (ttl$a ?v2 )(ttl$ ?v3 )))):named a35 ))
(assert (! (forall ((?v0 F_f_bool_fun_fun$ )(?v1 E_e_bool_fun_fun$ )(?v2 F_e_tllist$ )(?v3 F_e_tllist$ ))(=> (and (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1 )?v2 )?v3 )(or (not (is_TNil$a ?v2 ))(not (is_TNil$a ?v3 ))))(fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1 )(ttl$a ?v2 ))(ttl$a ?v3 )))):named a36 ))
(assert (! (forall ((?v0 D_f_bool_fun_fun$ )(?v1 C_e_bool_fun_fun$ )(?v2 D_c_tllist$ )(?v3 F_e_tllist$ ))(=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(or (not (is_TNil$ ?v2 ))(not (is_TNil$a ?v3 ))))(tllist_all2$ ?v0 ?v1 (ttl$ ?v2 )(ttl$a ?v3 )))):named a37 ))
(assert (! (forall ((?v0 D_d_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 D_c_tllist$ )(?v3 D_c_tllist$ ))(=> (and (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1 )?v2 )?v3 )(or (not (is_TNil$ ?v2 ))(not (is_TNil$ ?v3 ))))(fun_app$j (fun_app$k ?v0 (thd$ ?v2 ))(thd$ ?v3 )))):named a38 ))
(assert (! (forall ((?v0 F_d_bool_fun_fun$ )(?v1 E_c_bool_fun_fun$ )(?v2 F_e_tllist$ )(?v3 D_c_tllist$ ))(=> (and (tllist_all2$b ?v0 ?v1 ?v2 ?v3 )(or (not (is_TNil$a ?v2 ))(not (is_TNil$ ?v3 ))))(fun_app$j (fun_app$t ?v0 (thd$a ?v2 ))(thd$ ?v3 )))):named a39 ))
(assert (! (forall ((?v0 F_f_bool_fun_fun$ )(?v1 E_e_bool_fun_fun$ )(?v2 F_e_tllist$ )(?v3 F_e_tllist$ ))(=> (and (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1 )?v2 )?v3 )(or (not (is_TNil$a ?v2 ))(not (is_TNil$a ?v3 ))))(fun_app$f (fun_app$g ?v0 (thd$a ?v2 ))(thd$a ?v3 )))):named a40 ))
(assert (! (forall ((?v0 D_f_bool_fun_fun$ )(?v1 C_e_bool_fun_fun$ )(?v2 D_c_tllist$ )(?v3 F_e_tllist$ ))(=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(or (not (is_TNil$ ?v2 ))(not (is_TNil$a ?v3 ))))(fun_app$f (fun_app$o ?v0 (thd$ ?v2 ))(thd$a ?v3 )))):named a41 ))
(assert (! (forall ((?v0 D_d_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 D_c_tllist$ )(?v3 D_c_tllist$ ))(=> (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1 )?v2 )?v3 )(= (is_TNil$ ?v2 )(is_TNil$ ?v3 )))):named a42 ))
(assert (! (forall ((?v0 F_d_bool_fun_fun$ )(?v1 E_c_bool_fun_fun$ )(?v2 F_e_tllist$ )(?v3 D_c_tllist$ ))(=> (tllist_all2$b ?v0 ?v1 ?v2 ?v3 )(= (is_TNil$a ?v2 )(is_TNil$ ?v3 )))):named a43 ))
(assert (! (forall ((?v0 F_f_bool_fun_fun$ )(?v1 E_e_bool_fun_fun$ )(?v2 F_e_tllist$ )(?v3 F_e_tllist$ ))(=> (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1 )?v2 )?v3 )(= (is_TNil$a ?v2 )(is_TNil$a ?v3 )))):named a44 ))
(assert (! (forall ((?v0 D_f_bool_fun_fun$ )(?v1 C_e_bool_fun_fun$ )(?v2 D_c_tllist$ )(?v3 F_e_tllist$ ))(=> (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(= (is_TNil$ ?v2 )(is_TNil$a ?v3 )))):named a45 ))
(assert (! (forall ((?v0 D_c_tllist$ )(?v1 D_c_tllist$ ))(=> (and (= (is_TNil$ ?v0 )(is_TNil$ ?v1 ))(and (=> (and (is_TNil$ ?v0 )(is_TNil$ ?v1 ))(= (terminal$ ?v0 )(terminal$ ?v1 )))(=> (and (not (is_TNil$ ?v0 ))(not (is_TNil$ ?v1 )))(and (= (thd$ ?v0 )(thd$ ?v1 ))(= (ttl$ ?v0 )(ttl$ ?v1 ))))))(= ?v0 ?v1 ))):named a46 ))
(assert (! (forall ((?v0 F_e_tllist$ )(?v1 F_e_tllist$ ))(=> (and (= (is_TNil$a ?v0 )(is_TNil$a ?v1 ))(and (=> (and (is_TNil$a ?v0 )(is_TNil$a ?v1 ))(= (terminal$a ?v0 )(terminal$a ?v1 )))(=> (and (not (is_TNil$a ?v0 ))(not (is_TNil$a ?v1 )))(and (= (thd$a ?v0 )(thd$a ?v1 ))(= (ttl$a ?v0 )(ttl$a ?v1 ))))))(= ?v0 ?v1 ))):named a47 ))
(check-sat )
;(get-unsat-core )
