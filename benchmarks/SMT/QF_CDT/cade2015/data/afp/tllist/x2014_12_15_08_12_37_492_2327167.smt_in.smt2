;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_set_a_fun$ 0 )
(declare-sort B_set_b_fun$ 0 )
(declare-sort A_b_tllist_b_fun$ 0 )
(declare-sort A_a_b_tllist_b_fun_fun$ 0 )
(declare-sort A_b_tllist_b_bool_fun_fun$ 0 )
(declare-sort A_a_b_tllist_b_fun_fun_a_b_tllist_b_fun_fun$ 0 )
(declare-sort A_a_b_tllist_b_fun_fun_set_a_a_b_tllist_b_fun_fun_fun$ 0 )
(declare-sort A_b_tllist$ 0)
(declare-sort A_llist$ 0)
(declare-sort A_a_b_tllist_b_fun_fun_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_a_b_tllist_b_fun_fun_llist$)
(declare-fun select$ (A_a_b_tllist_b_fun_fun_llist$)A_a_b_tllist_b_fun_fun$)
(declare-fun selecta$ (A_a_b_tllist_b_fun_fun_llist$)A_a_b_tllist_b_fun_fun_llist$)
(declare-fun lCons$a (A_a_b_tllist_b_fun_fun$ A_a_b_tllist_b_fun_fun_llist$ )A_a_b_tllist_b_fun_fun_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun id$ ()B_b_fun$ )
(declare-fun uu$ ()A_b_tllist_b_fun$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun lhd$b (A_a_b_tllist_b_fun_fun_llist$ )A_a_b_tllist_b_fun_fun$ )
(declare-fun llast$ (A_a_b_tllist_b_fun_fun_llist$ )A_a_b_tllist_b_fun_fun$ )
(declare-fun llast$a (B_llist$ )B$ )
(declare-fun llast$b (A_llist$ )A$ )
(declare-fun fun_app$ (A_b_tllist_b_fun$ A_b_tllist$ )B$ )
(declare-fun is_TNil$ (A_b_tllist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun flat_lub$ (A$ )A_set_a_fun$ )
(declare-fun flat_ord$ (A$ A$ A$ )Bool )
(declare-fun fun_app$a (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$b (A_b_tllist_b_bool_fun_fun$ A_b_tllist$ )B_bool_fun$ )
(declare-fun fun_app$c (A_a_b_tllist_b_fun_fun_a_b_tllist_b_fun_fun$ A_a_b_tllist_b_fun_fun$ )A_b_tllist_b_fun$ )
(declare-fun lfinite$a (A_a_b_tllist_b_fun_fun_llist$ )Bool )
(declare-fun lfinite$b (B_llist$ )Bool )
(declare-fun flat_lub$a (A_a_b_tllist_b_fun_fun$ )A_a_b_tllist_b_fun_fun_set_a_a_b_tllist_b_fun_fun_fun$ )
(declare-fun flat_lub$b (B$ )B_set_b_fun$ )
(declare-fun flat_ord$a (A_a_b_tllist_b_fun_fun$ A_a_b_tllist_b_fun_fun$ A_a_b_tllist_b_fun_fun$ )Bool )
(declare-fun flat_ord$b (B$ B$ B$ )Bool )
(declare-fun terminal0$ ()A_b_tllist_b_fun$ )
(declare-fun undefined$ ()B$ )
(declare-fun undefined$a ()A_a_b_tllist_b_fun_fun$ )
(declare-fun undefined$b ()A$ )
(declare-fun case_tllist$ (B_b_fun$ )A_a_b_tllist_b_fun_fun_a_b_tllist_b_fun_fun$ )
(declare-fun lub_singleton$ (A_set_a_fun$ )Bool )
(declare-fun lub_singleton$a (A_a_b_tllist_b_fun_fun_set_a_a_b_tllist_b_fun_fun_fun$ )Bool )
(declare-fun lub_singleton$b (B_set_b_fun$ )Bool )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$ uu$ ?v0 )(terminal$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (fun_app$ terminal0$ xs$ )undefined$ )):named a1 ))
(assert (! (not (lfinite$ (llist_of_tllist$ xs$ ))):named a2 ))
(assert (! (= terminal0$ uu$ ):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(fun_app$ terminal0$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_a_b_tllist_b_fun_fun_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (llast$ ?v0 )undefined$a )):pattern ((llast$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 B_llist$ ))(! (=> (not (lfinite$b ?v0 ))(= (llast$a ?v0 )undefined$ )):pattern ((llast$a ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (llast$b ?v0 )undefined$b )):pattern ((llast$b ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_b_tllist_b_bool_fun_fun$ )(?v1 A_b_tllist$ )(?v2 B$ ))(=> (and (forall ((?v3 A_b_tllist_b_fun$ )(?v4 A_b_tllist$ )(?v5 B$ ))(=> (and (forall ((?v6 A_b_tllist$ )(?v7 B$ ))(=> (and (= (fun_app$ ?v3 ?v6 )?v7 )(not (= ?v7 undefined$ )))(fun_app$a (fun_app$b ?v0 ?v6 )?v7 )))(and (= (ite (is_TNil$ ?v4 )(fun_app$ (fun_app$c (case_tllist$ id$ )undefined$a )?v4 )(fun_app$ ?v3 (ttl$ ?v4 )))?v5 )(not (= ?v5 undefined$ ))))(fun_app$a (fun_app$b ?v0 ?v4 )?v5 )))(and (= (fun_app$ terminal0$ ?v1 )?v2 )(not (= ?v2 undefined$ ))))(fun_app$a (fun_app$b ?v0 ?v1 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (flat_ord$ undefined$b ?v0 ?v1 )(flat_ord$ undefined$b ?v1 ?v2 ))(flat_ord$ undefined$b ?v0 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_a_b_tllist_b_fun_fun$ )(?v1 A_a_b_tllist_b_fun_fun$ )(?v2 A_a_b_tllist_b_fun_fun$ ))(=> (and (flat_ord$a undefined$a ?v0 ?v1 )(flat_ord$a undefined$a ?v1 ?v2 ))(flat_ord$a undefined$a ?v0 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B$ ))(=> (and (flat_ord$b undefined$ ?v0 ?v1 )(flat_ord$b undefined$ ?v1 ?v2 ))(flat_ord$b undefined$ ?v0 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (flat_ord$ undefined$b ?v0 ?v1 )(flat_ord$ undefined$b ?v1 ?v0 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_a_b_tllist_b_fun_fun$ )(?v1 A_a_b_tllist_b_fun_fun$ ))(=> (and (flat_ord$a undefined$a ?v0 ?v1 )(flat_ord$a undefined$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(=> (and (flat_ord$b undefined$ ?v0 ?v1 )(flat_ord$b undefined$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A$ ))(flat_ord$ undefined$b ?v0 ?v0 )):named a15 ))
(assert (! (forall ((?v0 A_a_b_tllist_b_fun_fun$ ))(flat_ord$a undefined$a ?v0 ?v0 )):named a16 ))
(assert (! (forall ((?v0 B$ ))(flat_ord$b undefined$ ?v0 ?v0 )):named a17 ))
(assert (! (= (lhd$b lNil$a )undefined$a ):named a18 ))
(assert (! (= (lhd$ lNil$ )undefined$b ):named a19 ))
(assert (! (= (lhd$a lNil$b )undefined$ ):named a20 ))
(assert (! (lub_singleton$ (flat_lub$ undefined$b )):named a21 ))
(assert (! (lub_singleton$a (flat_lub$a undefined$a )):named a22 ))
(assert (! (lub_singleton$b (flat_lub$b undefined$ )):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a24 ))
(assert (! (= (lfinite$a lNil$a )true ):named a25 ))
(assert (! (= (lfinite$b lNil$b )true ):named a26 ))
(assert (! (= (lfinite$ lNil$ )true ):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (terminal$ (ttl$ ?v0 ))(terminal$ ?v0 ))):named a29 ))
(check-sat )
;(get-unsat-core )
