;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_tllist_a_fun$ 0 )
(declare-sort A_b_tllist_b_fun$ 0 )
(declare-sort B_a_tllist_a_fun$ 0 )
(declare-sort B_b_tllist_b_fun$ 0 )
(declare-sort B_a_tllist$ 0)
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort A_b_tllist$ 0)
(declare-sort A_a_tllist$ 0)
(declare-sort B_b_tllist$ 0)
(declare-fun terminal$ (B_a_tllist$)A$)
(declare-fun tNil$ (A$ )B_a_tllist$)
(declare-fun thd$ (B_a_tllist$)B$)
(declare-fun ttl$ (B_a_tllist$)B_a_tllist$)
(declare-fun tCons$ (B$ B_a_tllist$ )B_a_tllist$)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun terminal$a (A_b_tllist$)B$)
(declare-fun tNil$a (B$ )A_b_tllist$)
(declare-fun thd$a (A_b_tllist$)A$)
(declare-fun ttl$a (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$a (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun terminal$b (A_a_tllist$)A$)
(declare-fun tNil$b (A$ )A_a_tllist$)
(declare-fun thd$b (A_a_tllist$)A$)
(declare-fun ttl$b (A_a_tllist$)A_a_tllist$)
(declare-fun tCons$b (A$ A_a_tllist$ )A_a_tllist$)
(declare-fun terminal$c (B_b_tllist$)B$)
(declare-fun tNil$c (B$ )B_b_tllist$)
(declare-fun thd$c (B_b_tllist$)B$)
(declare-fun ttl$c (B_b_tllist$)B_b_tllist$)
(declare-fun tCons$c (B$ B_b_tllist$ )B_b_tllist$)
(declare-fun y$ ()A$ )
(declare-fun uu$ ()A_b_tllist_b_fun$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun uua$ ()A_a_tllist_a_fun$ )
(declare-fun uub$ ()B_b_tllist_b_fun$ )
(declare-fun uuc$ ()B_a_tllist_a_fun$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun llast$a (B_llist$ )B$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun fun_app$ (B_b_tllist_b_fun$ B_b_tllist$ )B$ )
(declare-fun lfinite$ (B_llist$ )Bool )
(declare-fun fun_app$a (B_a_tllist_a_fun$ B_a_tllist$ )A$ )
(declare-fun fun_app$b (A_b_tllist_b_fun$ A_b_tllist$ )B$ )
(declare-fun fun_app$c (A_a_tllist_a_fun$ A_a_tllist$ )A$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun terminal0$ ()A_b_tllist_b_fun$ )
(declare-fun undefined$ ()A$ )
(declare-fun terminal0$a ()A_a_tllist_a_fun$ )
(declare-fun terminal0$b ()B_b_tllist_b_fun$ )
(declare-fun terminal0$c ()B_a_tllist_a_fun$ )
(declare-fun undefined$a ()B$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(declare-fun llist_of_tllist$ (B_b_tllist$ )B_llist$ )
(declare-fun lstrict_prefix$a (B_llist$ B_llist$ )Bool )
(declare-fun tllist_of_llist$ (A$ B_llist$ )B_a_tllist$ )
(declare-fun llist_of_tllist$a (A_a_tllist$ )A_llist$ )
(declare-fun llist_of_tllist$b (A_b_tllist$ )A_llist$ )
(declare-fun llist_of_tllist$c (B_a_tllist$ )B_llist$ )
(declare-fun tllist_of_llist$a (B$ A_llist$ )A_b_tllist$ )
(declare-fun tllist_of_llist$b (A$ A_llist$ )A_a_tllist$ )
(declare-fun tllist_of_llist$c (B$ B_llist$ )B_b_tllist$ )
(assert (! (forall ((?v0 B_b_tllist$ ))(! (= (fun_app$ uub$ ?v0 )(terminal$c ?v0 )):pattern ((fun_app$ uub$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B_a_tllist$ ))(! (= (fun_app$a uuc$ ?v0 )(terminal$ ?v0 )):pattern ((fun_app$a uuc$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$b uu$ ?v0 )(terminal$a ?v0 )):pattern ((fun_app$b uu$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_a_tllist$ ))(! (= (fun_app$c uua$ ?v0 )(terminal$b ?v0 )):pattern ((fun_app$c uua$ ?v0 )))):named a3 ))
(assert (! (not (= (terminal$ (tllist_of_llist$ y$ xs$ ))(ite (lfinite$ xs$ )y$ undefined$ ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 B_llist$ )(?v2 A$ )(?v3 B_llist$ ))(= (= (tllist_of_llist$ ?v0 ?v1 )(tllist_of_llist$ ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(=> (lfinite$a ?v0 )(= (terminal$a (tllist_of_llist$a ?v1 ?v0 ))?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lfinite$a ?v0 )(= (terminal$b (tllist_of_llist$b ?v1 ?v0 ))?v1 ))):named a7 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ ))(=> (lfinite$ ?v0 )(= (terminal$c (tllist_of_llist$c ?v1 ?v0 ))?v1 ))):named a8 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A$ ))(=> (lfinite$ ?v0 )(= (terminal$ (tllist_of_llist$ ?v1 ?v0 ))?v1 ))):named a9 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 A$ )(?v3 A$ ))(=> (and (= ?v0 ?v1 )(=> (lfinite$ ?v1 )(= ?v2 ?v3 )))(= (tllist_of_llist$ ?v2 ?v0 )(tllist_of_llist$ ?v3 ?v1 )))):named a10 ))
(assert (! (= terminal0$ uu$ ):named a11 ))
(assert (! (= terminal0$a uua$ ):named a12 ))
(assert (! (= terminal0$b uub$ ):named a13 ))
(assert (! (= terminal0$c uuc$ ):named a14 ))
(assert (! (forall ((?v0 B_b_tllist$ ))(! (=> (not (lfinite$ (llist_of_tllist$ ?v0 )))(= (terminal$c ?v0 )undefined$a )):pattern ((terminal$c ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_a_tllist$ ))(! (=> (not (lfinite$a (llist_of_tllist$a ?v0 )))(= (terminal$b ?v0 )undefined$ )):pattern ((terminal$b ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (=> (not (lfinite$a (llist_of_tllist$b ?v0 )))(= (terminal$a ?v0 )undefined$a )):pattern ((terminal$a ?v0 )))):named a17 ))
(assert (! (forall ((?v0 B_a_tllist$ ))(! (=> (not (lfinite$ (llist_of_tllist$c ?v0 )))(= (terminal$ ?v0 )undefined$ )):pattern ((terminal$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (tllist_of_llist$a (terminal$a ?v0 )(llist_of_tllist$b ?v0 ))?v0 )):named a19 ))
(assert (! (forall ((?v0 A_a_tllist$ ))(= (tllist_of_llist$b (terminal$b ?v0 )(llist_of_tllist$a ?v0 ))?v0 )):named a20 ))
(assert (! (forall ((?v0 B_b_tllist$ ))(= (tllist_of_llist$c (terminal$c ?v0 )(llist_of_tllist$ ?v0 ))?v0 )):named a21 ))
(assert (! (forall ((?v0 B_a_tllist$ ))(= (tllist_of_llist$ (terminal$ ?v0 )(llist_of_tllist$c ?v0 ))?v0 )):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(=> (lnull$ ?v0 )(= (terminal$a (tllist_of_llist$a ?v1 ?v0 ))?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lnull$ ?v0 )(= (terminal$b (tllist_of_llist$b ?v1 ?v0 ))?v1 ))):named a24 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ ))(=> (lnull$a ?v0 )(= (terminal$c (tllist_of_llist$c ?v1 ?v0 ))?v1 ))):named a25 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A$ ))(=> (lnull$a ?v0 )(= (terminal$ (tllist_of_llist$ ?v1 ?v0 ))?v1 ))):named a26 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$b (tllist_of_llist$a ?v0 ?v1 ))?v1 )):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (llist_of_tllist$a (tllist_of_llist$b ?v0 ?v1 ))?v1 )):named a28 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$c ?v0 ?v1 ))?v1 )):named a29 ))
(assert (! (forall ((?v0 A$ )(?v1 B_llist$ ))(= (llist_of_tllist$c (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a30 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (llast$ ?v0 )undefined$ )):pattern ((llast$ ?v0 )))):named a31 ))
(assert (! (forall ((?v0 B_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (llast$a ?v0 )undefined$a )):pattern ((llast$a ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (terminal$a (ttl$a ?v0 ))(terminal$a ?v0 ))):named a33 ))
(assert (! (forall ((?v0 A_a_tllist$ ))(= (terminal$b (ttl$b ?v0 ))(terminal$b ?v0 ))):named a34 ))
(assert (! (forall ((?v0 B_b_tllist$ ))(= (terminal$c (ttl$c ?v0 ))(terminal$c ?v0 ))):named a35 ))
(assert (! (forall ((?v0 B_a_tllist$ ))(= (terminal$ (ttl$ ?v0 ))(terminal$ ?v0 ))):named a36 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$a (tCons$a ?v0 ?v1 ))(terminal$a ?v1 )):pattern ((tCons$a ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_tllist$ ))(! (= (terminal$b (tCons$b ?v0 ?v1 ))(terminal$b ?v1 )):pattern ((tCons$b ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 B$ )(?v1 B_b_tllist$ ))(! (= (terminal$c (tCons$c ?v0 ?v1 ))(terminal$c ?v1 )):pattern ((tCons$c ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 B$ ))(! (= (terminal$a (tNil$a ?v0 ))?v0 ):pattern ((tNil$a ?v0 )))):named a41 ))
(assert (! (forall ((?v0 A$ ))(! (= (terminal$b (tNil$b ?v0 ))?v0 ):pattern ((tNil$b ?v0 )))):named a42 ))
(assert (! (forall ((?v0 B$ ))(! (= (terminal$c (tNil$c ?v0 ))?v0 ):pattern ((tNil$c ?v0 )))):named a43 ))
(assert (! (forall ((?v0 A$ ))(! (= (terminal$ (tNil$ ?v0 ))?v0 ):pattern ((tNil$ ?v0 )))):named a44 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$a ?v0 ))):named a45 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lfinite$ ?v0 ))):named a46 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a47 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_tllist$ )(?v2 B$ )(?v3 B_a_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a48 ))
(check-sat )
;(get-unsat-core )
