;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Unit$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Unit_b_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_tllist_a_b_tllist_fun$ 0 )
(declare-sort A_llist_llist_b_tllist_a_llist_b_tllist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_b_tllist$ 0)
(declare-sort A_llist_b_tllist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_llist_b_tllist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_b_tllist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun terminal$a (A_llist_b_tllist$)B$)
(declare-fun tNil$a (B$ )A_llist_b_tllist$)
(declare-fun thd$a (A_llist_b_tllist$)A_llist$)
(declare-fun ttl$a (A_llist_b_tllist$)A_llist_b_tllist$)
(declare-fun tCons$a (A_llist$ A_llist_b_tllist$ )A_llist_b_tllist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun terminal$b (A_llist_llist_b_tllist$)B$)
(declare-fun tNil$b (B$ )A_llist_llist_b_tllist$)
(declare-fun thd$b (A_llist_llist_b_tllist$)A_llist_llist$)
(declare-fun ttl$b (A_llist_llist_b_tllist$)A_llist_llist_b_tllist$)
(declare-fun tCons$b (A_llist_llist$ A_llist_llist_b_tllist$ )A_llist_llist_b_tllist$)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun terminal$c (A_llist_llist_llist_b_tllist$)B$)
(declare-fun tNil$c (B$ )A_llist_llist_llist_b_tllist$)
(declare-fun thd$c (A_llist_llist_llist_b_tllist$)A_llist_llist_llist$)
(declare-fun ttl$c (A_llist_llist_llist_b_tllist$)A_llist_llist_llist_b_tllist$)
(declare-fun tCons$c (A_llist_llist_llist$ A_llist_llist_llist_b_tllist$ )A_llist_llist_llist_b_tllist$)
(declare-fun b$ ()B$ )
(declare-fun trs$ ()A_llist_b_tllist$ )
(declare-fun lmap$ (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun tmap$ (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tset$ (A_b_tllist$ )A_set$ )
(declare-fun lmap$a (A_llist_a_fun$ A_llist_llist$ )A_llist$ )
(declare-fun lmap$b (A_a_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun lmap$c (A_llist_a_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lset$a (A_llist_llist$ )A_llist_set$ )
(declare-fun tmap$a (A_llist_a_fun$ B_b_fun$ A_llist_b_tllist$ )A_b_tllist$ )
(declare-fun tmap$b (A_a_llist_fun$ B_b_fun$ A_b_tllist$ )A_llist_b_tllist$ )
(declare-fun tmap$c (A_llist_a_llist_fun$ B_b_fun$ A_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun tset$a (A_llist_b_tllist$ )A_llist_set$ )
(declare-fun unity$ ()Unit$ )
(declare-fun fun_app$ (A_llist_b_tllist_a_b_tllist_fun$ A_llist_b_tllist$ )A_b_tllist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun tconcat$ (B$ )A_llist_b_tllist_a_b_tllist_fun$ )
(declare-fun tfilter$ (B$ A_bool_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun fun_app$a (Unit_b_fun$ Unit$ )B$ )
(declare-fun fun_app$b (A_llist_llist_b_tllist_a_llist_b_tllist_fun$ A_llist_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$a (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lappendt$ (A_llist_llist$ A_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun lfilter$a (A_llist_bool_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun tconcat$a (Unit_b_fun$ )A_llist_llist_b_tllist_a_llist_b_tllist_fun$ )
(declare-fun tconcat$b (B$ )A_llist_llist_b_tllist_a_llist_b_tllist_fun$ )
(declare-fun tconcat$c (Unit_b_fun$ )A_llist_b_tllist_a_b_tllist_fun$ )
(declare-fun tconcat$d (B$ A_llist_llist_llist_b_tllist$ )A_llist_llist_b_tllist$ )
(declare-fun tfilter$a (B$ A_llist_bool_fun$ A_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun lappendt$a (A_llist$ A_b_tllist$ )A_b_tllist$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(declare-fun llist_of_tllist$a (A_llist_b_tllist$ )A_llist_llist$ )
(declare-fun llist_of_tllist$b (A_llist_llist_b_tllist$ )A_llist_llist_llist$ )
(declare-fun tllist_of_llist$a (B$ A_llist_llist$ )A_llist_b_tllist$ )
(assert (! (not (= (llist_of_tllist$ (fun_app$ (tconcat$ b$ )trs$ ))(lconcat$ (llist_of_tllist$a trs$ )))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist$ ))(= (llist_of_tllist$a (tllist_of_llist$a ?v0 ?v1 ))?v1 )):named a2 ))
(assert (! (forall ((?v0 Unit_b_fun$ ))(! (= (tconcat$a ?v0 )(tconcat$b (fun_app$a ?v0 unity$ ))):pattern ((tconcat$a ?v0 )))):named a3 ))
(assert (! (forall ((?v0 Unit_b_fun$ ))(! (= (tconcat$c ?v0 )(tconcat$ (fun_app$a ?v0 unity$ ))):pattern ((tconcat$c ?v0 )))):named a4 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_b_tllist$ ))(! (= (fun_app$b (tconcat$b ?v0 )(tCons$b ?v1 ?v2 ))(lappendt$ ?v1 (fun_app$b (tconcat$b ?v0 )?v2 ))):pattern ((fun_app$b (tconcat$b ?v0 )(tCons$b ?v1 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ )(?v2 A_llist_b_tllist$ ))(! (= (fun_app$ (tconcat$ ?v0 )(tCons$a ?v1 ?v2 ))(lappendt$a ?v1 (fun_app$ (tconcat$ ?v0 )?v2 ))):pattern ((fun_app$ (tconcat$ ?v0 )(tCons$a ?v1 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (tconcat$d ?v0 (tNil$c ?v1 ))(tNil$b ?v1 )):pattern ((tconcat$d ?v0 (tNil$c ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$b (tconcat$b ?v0 )(tNil$b ?v1 ))(tNil$a ?v1 )):pattern ((fun_app$b (tconcat$b ?v0 )(tNil$b ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$ (tconcat$ ?v0 )(tNil$a ?v1 ))(tNil$ ?v1 )):pattern ((fun_app$ (tconcat$ ?v0 )(tNil$a ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_tllist$ ))(= (llist_of_tllist$ (lappendt$a ?v0 ?v1 ))(fun_app$c (lappend$ ?v0 )(llist_of_tllist$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_b_tllist$ ))(= (llist_of_tllist$a (lappendt$ ?v0 ?v1 ))(lappend$a ?v0 (llist_of_tllist$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 A_b_tllist$ ))(= (llist_of_tllist$ (tfilter$ ?v0 ?v1 ?v2 ))(fun_app$c (lfilter$ ?v1 )(llist_of_tllist$ ?v2 )))):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist_b_tllist$ ))(= (llist_of_tllist$a (tfilter$a ?v0 ?v1 ?v2 ))(lfilter$a ?v1 (llist_of_tllist$a ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (lset$ (llist_of_tllist$ ?v0 ))(tset$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(= (lset$a (llist_of_tllist$a ?v0 ))(tset$a ?v0 ))):named a15 ))
(assert (! (forall ((?v0 B$ ))(! (= (llist_of_tllist$b (tNil$b ?v0 ))lNil$b ):pattern ((tNil$b ?v0 )))):named a16 ))
(assert (! (forall ((?v0 B$ ))(! (= (llist_of_tllist$ (tNil$ ?v0 ))lNil$ ):pattern ((tNil$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 B$ ))(! (= (llist_of_tllist$a (tNil$a ?v0 ))lNil$a ):pattern ((tNil$a ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (ltl$ (llist_of_tllist$ ?v0 ))(llist_of_tllist$ (ttl$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(= (ltl$a (llist_of_tllist$a ?v0 ))(llist_of_tllist$a (ttl$a ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (tllist_of_llist$ (terminal$ ?v0 )(llist_of_tllist$ ?v0 ))?v0 )):named a21 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(= (tllist_of_llist$a (terminal$a ?v0 )(llist_of_tllist$a ?v0 ))?v0 )):named a22 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_b_tllist$ ))(! (= (llist_of_tllist$b (tCons$b ?v0 ?v1 ))(lCons$b ?v0 (llist_of_tllist$b ?v1 ))):pattern ((tCons$b ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (llist_of_tllist$ (tCons$ ?v0 ?v1 ))(lCons$ ?v0 (llist_of_tllist$ ?v1 ))):pattern ((tCons$ ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_tllist$ ))(! (= (llist_of_tllist$a (tCons$a ?v0 ?v1 ))(lCons$a ?v0 (llist_of_tllist$a ?v1 ))):pattern ((tCons$a ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (llist_of_tllist$ (tmap$ ?v0 ?v1 ?v2 ))(fun_app$c (lmap$ ?v0 )(llist_of_tllist$ ?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 B_b_fun$ )(?v2 A_llist_b_tllist$ ))(= (llist_of_tllist$ (tmap$a ?v0 ?v1 ?v2 ))(lmap$a ?v0 (llist_of_tllist$a ?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (llist_of_tllist$a (tmap$b ?v0 ?v1 ?v2 ))(lmap$b ?v0 (llist_of_tllist$ ?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 A_llist_b_tllist$ ))(= (llist_of_tllist$a (tmap$c ?v0 ?v1 ?v2 ))(lmap$c ?v0 (llist_of_tllist$a ?v2 )))):named a29 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$b ?v0 )(tNil$b ?v1 ))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$a ?v0 )(tNil$a ?v1 ))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_b_tllist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_b_tllist$ ))(= (= (tCons$b ?v0 ?v1 )(tCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a33 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_tllist$ )(?v2 A_llist$ )(?v3 A_llist_b_tllist$ ))(= (= (tCons$a ?v0 ?v1 )(tCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_b_tllist$ ))(! (= (terminal$b (tCons$b ?v0 ?v1 ))(terminal$b ?v1 )):pattern ((tCons$b ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_tllist$ ))(! (= (terminal$a (tCons$a ?v0 ?v1 ))(terminal$a ?v1 )):pattern ((tCons$a ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(= (terminal$a (ttl$a ?v0 ))(terminal$a ?v0 ))):named a39 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (terminal$ (ttl$ ?v0 ))(terminal$ ?v0 ))):named a40 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 A_llist_b_tllist$ ))(= (ttl$a (tmap$c ?v0 ?v1 ?v2 ))(tmap$c ?v0 ?v1 (ttl$a ?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (ttl$a (tmap$b ?v0 ?v1 ?v2 ))(tmap$b ?v0 ?v1 (ttl$ ?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 B_b_fun$ )(?v2 A_llist_b_tllist$ ))(= (ttl$ (tmap$a ?v0 ?v1 ?v2 ))(tmap$a ?v0 ?v1 (ttl$a ?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (ttl$ (tmap$ ?v0 ?v1 ?v2 ))(tmap$ ?v0 ?v1 (ttl$ ?v2 )))):named a44 ))
(check-sat )
;(get-unsat-core )
