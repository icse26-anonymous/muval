;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort A_b_tllist$ 0)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun tmap$ (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tnth$ (A_b_tllist$ Nat$ )A$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun tdropn$ (Nat$ A_b_tllist$ )A_b_tllist$ )
(declare-fun fun_app$ (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun tlength$ (A_b_tllist$ )Enat$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$ )Bool )
(declare-fun tllist_all2$ (A_a_bool_fun_fun$ B_b_bool_fun_fun$ A_b_tllist$ A_b_tllist$ )Bool )
(assert (! (not (= (tCons$ (tnth$ xs$ n$ )(tdropn$ (suc$ n$ )xs$ ))(tdropn$ n$ xs$ ))):named a0 ))
(assert (! (less$ (enat$ n$ )(tlength$ xs$ )):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 Nat$ ))(! (= (tnth$ (tCons$ ?v0 ?v1 )(suc$ ?v2 ))(tnth$ ?v1 ?v2 )):pattern ((tnth$ (tCons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A_b_tllist$ ))(! (= (tdropn$ (suc$ ?v0 )(tCons$ ?v1 ?v2 ))(tdropn$ ?v0 ?v2 )):pattern ((tdropn$ (suc$ ?v0 )(tCons$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$ (fun_app$ ?v0 ?v3 )(fun_app$ ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(less$ (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$a (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(less$a (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(less$ (fun_app$ ?v0 ?v3 )(fun_app$ ?v0 (suc$ ?v3 ))))(= (less$ (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(less$a (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(= (less$a (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_tllist$ )(?v2 A_a_fun$ )(?v3 B_b_fun$ ))(=> (less$ (enat$ ?v0 )(tlength$ ?v1 ))(= (tnth$ (tmap$ ?v2 ?v3 ?v1 )?v0 )(fun_app$b ?v2 (tnth$ ?v1 ?v0 ))))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(and (fun_app$c ?v0 ?v2 )(pred_tllist$ ?v0 ?v1 ?v3 ))):pattern ((pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a14 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_tllist$ )(?v3 A_b_tllist$ )(?v4 Nat$ ))(=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(less$ (enat$ ?v4 )(tlength$ ?v3 )))(fun_app$c (fun_app$d ?v0 (tnth$ ?v2 ?v4 ))(tnth$ ?v3 ?v4 )))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_tllist$ )(?v3 A_b_tllist$ )(?v4 Nat$ ))(=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(less$ (enat$ ?v4 )(tlength$ ?v2 )))(fun_app$c (fun_app$d ?v0 (tnth$ ?v2 ?v4 ))(tnth$ ?v3 ?v4 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(less$a ?v0 (suc$ ?v0 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (less$a ?v0 ?v1 )(less$a (suc$ ?v0 )(suc$ ?v1 )))):named a18 ))
(check-sat )
;(get-unsat-core )
