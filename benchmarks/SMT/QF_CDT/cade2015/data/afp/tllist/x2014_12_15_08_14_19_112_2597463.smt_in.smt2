;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort C_d_fun$ 0 )
(declare-sort D_c_fun$ 0 )
(declare-sort D_d_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_c_tllist_c_fun$ 0 )
(declare-sort A_d_tllist_d_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_c_tllist_c_fun$ 0 )
(declare-sort B_d_tllist_d_fun$ 0 )
(declare-sort C_a_c_tllist_fun$ 0 )
(declare-sort C_a_d_tllist_fun$ 0 )
(declare-sort C_b_c_tllist_fun$ 0 )
(declare-sort C_b_d_tllist_fun$ 0 )
(declare-sort C_c_bool_fun_fun$ 0 )
(declare-sort C_d_bool_fun_fun$ 0 )
(declare-sort D_a_c_tllist_fun$ 0 )
(declare-sort D_a_d_tllist_fun$ 0 )
(declare-sort D_b_c_tllist_fun$ 0 )
(declare-sort D_b_d_tllist_fun$ 0 )
(declare-sort D_c_bool_fun_fun$ 0 )
(declare-sort D_d_bool_fun_fun$ 0 )
(declare-sort A_c_tllist_bool_fun$ 0 )
(declare-sort B_d_tllist_bool_fun$ 0 )
(declare-sort A_c_tllist_a_c_tllist_bool_fun_fun$ 0 )
(declare-sort B_d_tllist_b_d_tllist_bool_fun_fun$ 0 )
(declare-sort A_c_tllist$ 0)
(declare-sort B_d_tllist$ 0)
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort A_d_tllist$ 0)
(declare-sort B_c_tllist$ 0)
(declare-fun terminal$ (A_c_tllist$)C$)
(declare-fun tNil$ (C$ )A_c_tllist$)
(declare-fun thd$ (A_c_tllist$)A$)
(declare-fun ttl$ (A_c_tllist$)A_c_tllist$)
(declare-fun tCons$ (A$ A_c_tllist$ )A_c_tllist$)
(declare-fun terminal$a (B_d_tllist$)D$)
(declare-fun tNil$a (D$ )B_d_tllist$)
(declare-fun thd$a (B_d_tllist$)B$)
(declare-fun ttl$a (B_d_tllist$)B_d_tllist$)
(declare-fun tCons$a (B$ B_d_tllist$ )B_d_tllist$)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun terminal$b (A_d_tllist$)D$)
(declare-fun tNil$b (D$ )A_d_tllist$)
(declare-fun thd$b (A_d_tllist$)A$)
(declare-fun ttl$b (A_d_tllist$)A_d_tllist$)
(declare-fun tCons$b (A$ A_d_tllist$ )A_d_tllist$)
(declare-fun terminal$c (B_c_tllist$)C$)
(declare-fun tNil$c (C$ )B_c_tllist$)
(declare-fun thd$c (B_c_tllist$)B$)
(declare-fun ttl$c (B_c_tllist$)B_c_tllist$)
(declare-fun tCons$c (B$ B_c_tllist$ )B_c_tllist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun q$ ()C_d_bool_fun_fun$ )
(declare-fun uu$ ()B_b_bool_fun_fun$ )
(declare-fun xs$ ()A_c_tllist$ )
(declare-fun ys$ ()B_d_tllist$ )
(declare-fun uua$ ()D_d_bool_fun_fun$ )
(declare-fun uub$ ()B_d_tllist_b_d_tllist_bool_fun_fun$ )
(declare-fun uuc$ ()A_a_bool_fun_fun$ )
(declare-fun uud$ ()C_c_bool_fun_fun$ )
(declare-fun uue$ ()A_c_tllist_a_c_tllist_bool_fun_fun$ )
(declare-fun uuf$ ()A_d_tllist_d_fun$ )
(declare-fun uug$ ()B_c_tllist_c_fun$ )
(declare-fun uuh$ ()A_c_tllist_c_fun$ )
(declare-fun uui$ ()B_d_tllist_d_fun$ )
(declare-fun tmap$ (A_a_fun$ C_c_fun$ A_c_tllist$ )A_c_tllist$ )
(declare-fun tcast$ (B_d_tllist$ )B_d_tllist$ )
(declare-fun tmap$a (B_a_fun$ D_c_fun$ B_d_tllist$ )A_c_tllist$ )
(declare-fun tmap$b (A_b_fun$ C_d_fun$ A_c_tllist$ )B_d_tllist$ )
(declare-fun tmap$c (B_b_fun$ D_d_fun$ B_d_tllist$ )B_d_tllist$ )
(declare-fun tmap$d (A_a_fun$ D_c_fun$ A_d_tllist$ )A_c_tllist$ )
(declare-fun tmap$e (B_a_fun$ C_c_fun$ B_c_tllist$ )A_c_tllist$ )
(declare-fun tmap$f (A_b_fun$ D_d_fun$ A_d_tllist$ )B_d_tllist$ )
(declare-fun tmap$g (B_b_fun$ C_d_fun$ B_c_tllist$ )B_d_tllist$ )
(declare-fun tmap$h (A_a_fun$ C_d_fun$ A_c_tllist$ )A_d_tllist$ )
(declare-fun tmap$i (B_a_fun$ D_d_fun$ B_d_tllist$ )A_d_tllist$ )
(declare-fun tcast$a (A_c_tllist$ )A_c_tllist$ )
(declare-fun fun_app$ (B_d_tllist_d_fun$ B_d_tllist$ )D$ )
(declare-fun is_TNil$ (A_d_tllist$ )Bool )
(declare-fun lfinite$ (B_llist$ )Bool )
(declare-fun tappend$ (A_c_tllist$ C_a_d_tllist_fun$ )A_d_tllist$ )
(declare-fun tlength$ (B_d_tllist$ )Enat$ )
(declare-fun fun_app$a (B_c_tllist_c_fun$ B_c_tllist$ )C$ )
(declare-fun fun_app$b (A_d_tllist_d_fun$ A_d_tllist$ )D$ )
(declare-fun fun_app$c (A_c_tllist_c_fun$ A_c_tllist$ )C$ )
(declare-fun fun_app$d (B_d_tllist_bool_fun$ B_d_tllist$ )Bool )
(declare-fun fun_app$e (B_d_tllist_b_d_tllist_bool_fun_fun$ B_d_tllist$ )B_d_tllist_bool_fun$ )
(declare-fun fun_app$f (A_c_tllist_bool_fun$ A_c_tllist$ )Bool )
(declare-fun fun_app$g (A_c_tllist_a_c_tllist_bool_fun_fun$ A_c_tllist$ )A_c_tllist_bool_fun$ )
(declare-fun fun_app$h (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$i (D_d_bool_fun_fun$ D$ )D_bool_fun$ )
(declare-fun fun_app$j (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$k (C_c_bool_fun_fun$ C$ )C_bool_fun$ )
(declare-fun fun_app$l (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$m (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$n (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$o (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$p (C_d_bool_fun_fun$ C$ )D_bool_fun$ )
(declare-fun fun_app$q (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$r (D_c_bool_fun_fun$ D$ )C_bool_fun$ )
(declare-fun fun_app$s (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$t (C_a_d_tllist_fun$ C$ )A_d_tllist$ )
(declare-fun fun_app$u (D_b_c_tllist_fun$ D$ )B_c_tllist$ )
(declare-fun fun_app$v (D_a_c_tllist_fun$ D$ )A_c_tllist$ )
(declare-fun fun_app$w (D_a_d_tllist_fun$ D$ )A_d_tllist$ )
(declare-fun fun_app$x (C_b_d_tllist_fun$ C$ )B_d_tllist$ )
(declare-fun fun_app$y (C_b_c_tllist_fun$ C$ )B_c_tllist$ )
(declare-fun fun_app$z (C_a_c_tllist_fun$ C$ )A_c_tllist$ )
(declare-fun is_TNil$a (B_c_tllist$ )Bool )
(declare-fun is_TNil$b (A_c_tllist$ )Bool )
(declare-fun is_TNil$c (B_d_tllist$ )Bool )
(declare-fun lappendt$ (A_llist$ A_d_tllist$ )A_d_tllist$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun tappend$a (B_d_tllist$ D_b_c_tllist_fun$ )B_c_tllist$ )
(declare-fun tappend$b (A_d_tllist$ D_a_c_tllist_fun$ )A_c_tllist$ )
(declare-fun tappend$c (A_d_tllist$ D_a_d_tllist_fun$ )A_d_tllist$ )
(declare-fun tappend$d (B_c_tllist$ C_b_d_tllist_fun$ )B_d_tllist$ )
(declare-fun tappend$e (B_c_tllist$ C_b_c_tllist_fun$ )B_c_tllist$ )
(declare-fun tappend$f (A_c_tllist$ C_a_c_tllist_fun$ )A_c_tllist$ )
(declare-fun tappend$g (B_d_tllist$ D_b_d_tllist_fun$ )B_d_tllist$ )
(declare-fun tlength$a (A_c_tllist$ )Enat$ )
(declare-fun fun_app$aa (D_b_d_tllist_fun$ D$ )B_d_tllist$ )
(declare-fun fun_app$ab (C_c_fun$ C$ )C$ )
(declare-fun fun_app$ac (D_c_fun$ D$ )C$ )
(declare-fun fun_app$ad (C_d_fun$ C$ )D$ )
(declare-fun fun_app$ae (D_d_fun$ D$ )D$ )
(declare-fun lappendt$a (B_llist$ B_c_tllist$ )B_c_tllist$ )
(declare-fun lappendt$b (A_llist$ A_c_tllist$ )A_c_tllist$ )
(declare-fun lappendt$c (B_llist$ B_d_tllist$ )B_d_tllist$ )
(declare-fun terminal0$ ()A_d_tllist_d_fun$ )
(declare-fun undefined$ ()C$ )
(declare-fun terminal0$a ()B_c_tllist_c_fun$ )
(declare-fun terminal0$b ()A_c_tllist_c_fun$ )
(declare-fun terminal0$c ()B_d_tllist_d_fun$ )
(declare-fun undefined$a ()D$ )
(declare-fun tllist_all2$ (A_b_bool_fun_fun$ C_d_bool_fun_fun$ A_c_tllist$ B_d_tllist$ )Bool )
(declare-fun tllist_all2$a (B_b_bool_fun_fun$ D_d_bool_fun_fun$ )B_d_tllist_b_d_tllist_bool_fun_fun$ )
(declare-fun tllist_all2$b (A_a_bool_fun_fun$ C_c_bool_fun_fun$ )A_c_tllist_a_c_tllist_bool_fun_fun$ )
(declare-fun tllist_all2$c (B_a_bool_fun_fun$ D_c_bool_fun_fun$ B_d_tllist$ A_c_tllist$ )Bool )
(declare-fun tllist_all2$d (A_a_bool_fun_fun$ C_d_bool_fun_fun$ A_c_tllist$ A_d_tllist$ )Bool )
(declare-fun tllist_all2$e (A_b_bool_fun_fun$ C_c_bool_fun_fun$ A_c_tllist$ B_c_tllist$ )Bool )
(declare-fun tllist_all2$f (B_a_bool_fun_fun$ D_d_bool_fun_fun$ B_d_tllist$ A_d_tllist$ )Bool )
(declare-fun tllist_all2$g (B_b_bool_fun_fun$ D_c_bool_fun_fun$ B_d_tllist$ B_c_tllist$ )Bool )
(declare-fun tllist_all2$h (A_a_bool_fun_fun$ D_c_bool_fun_fun$ A_d_tllist$ A_c_tllist$ )Bool )
(declare-fun tllist_all2$i (A_b_bool_fun_fun$ D_d_bool_fun_fun$ A_d_tllist$ B_d_tllist$ )Bool )
(declare-fun llist_of_tllist$ (B_d_tllist$ )B_llist$ )
(declare-fun tllist_of_llist$ (D$ A_llist$ )A_d_tllist$ )
(declare-fun llist_of_tllist$a (A_c_tllist$ )A_llist$ )
(declare-fun llist_of_tllist$b (A_d_tllist$ )A_llist$ )
(declare-fun llist_of_tllist$c (B_c_tllist$ )B_llist$ )
(declare-fun tllist_of_llist$a (C$ B_llist$ )B_c_tllist$ )
(declare-fun tllist_of_llist$b (C$ A_llist$ )A_c_tllist$ )
(declare-fun tllist_of_llist$c (D$ B_llist$ )B_d_tllist$ )
(assert (! (forall ((?v0 B_d_tllist$ ))(! (= (fun_app$ uui$ ?v0 )(terminal$a ?v0 )):pattern ((fun_app$ uui$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B_c_tllist$ ))(! (= (fun_app$a uug$ ?v0 )(terminal$c ?v0 )):pattern ((fun_app$a uug$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_d_tllist$ ))(! (= (fun_app$b uuf$ ?v0 )(terminal$b ?v0 )):pattern ((fun_app$b uuf$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(! (= (fun_app$c uuh$ ?v0 )(terminal$ ?v0 )):pattern ((fun_app$c uuh$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_d_tllist$ ))(! (= (fun_app$d (fun_app$e uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uub$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_c_tllist$ ))(! (= (fun_app$f (fun_app$g uue$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uue$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 D$ )(?v1 D$ ))(! (= (fun_app$h (fun_app$i uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$h (fun_app$i uua$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(! (= (fun_app$j (fun_app$k uud$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$j (fun_app$k uud$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$l (fun_app$m uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$l (fun_app$m uu$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$n (fun_app$o uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$n (fun_app$o uuc$ ?v0 )?v1 )))):named a9 ))
(assert (! (not (fun_app$h (fun_app$p q$ (terminal$ xs$ ))(terminal$a ys$ ))):named a10 ))
(assert (! (tllist_all2$ p$ q$ xs$ ys$ ):named a11 ))
(assert (! (lfinite$ (llist_of_tllist$ ys$ )):named a12 ))
(assert (! (= (tllist_all2$a uu$ uua$ )uub$ ):named a13 ))
(assert (! (= (tllist_all2$b uuc$ uud$ )uue$ ):named a14 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 B_d_tllist$ )(?v4 B_b_bool_fun_fun$ )(?v5 D_d_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$e (tllist_all2$a ?v0 ?v1 )?v2 )?v3 )(and (forall ((?v6 B$ )(?v7 B$ ))(=> (fun_app$l (fun_app$m ?v0 ?v6 )?v7 )(fun_app$l (fun_app$m ?v4 ?v6 )?v7 )))(forall ((?v6 D$ )(?v7 D$ ))(=> (fun_app$h (fun_app$i ?v1 ?v6 )?v7 )(fun_app$h (fun_app$i ?v5 ?v6 )?v7 )))))(fun_app$d (fun_app$e (tllist_all2$a ?v4 ?v5 )?v2 )?v3 ))):named a15 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 D_c_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 A_c_tllist$ )(?v4 B_a_bool_fun_fun$ )(?v5 D_c_bool_fun_fun$ ))(=> (and (tllist_all2$c ?v0 ?v1 ?v2 ?v3 )(and (forall ((?v6 B$ )(?v7 A$ ))(=> (fun_app$n (fun_app$q ?v0 ?v6 )?v7 )(fun_app$n (fun_app$q ?v4 ?v6 )?v7 )))(forall ((?v6 D$ )(?v7 C$ ))(=> (fun_app$j (fun_app$r ?v1 ?v6 )?v7 )(fun_app$j (fun_app$r ?v5 ?v6 )?v7 )))))(tllist_all2$c ?v4 ?v5 ?v2 ?v3 ))):named a16 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 A_c_tllist$ )(?v4 A_a_bool_fun_fun$ )(?v5 C_c_bool_fun_fun$ ))(=> (and (fun_app$f (fun_app$g (tllist_all2$b ?v0 ?v1 )?v2 )?v3 )(and (forall ((?v6 A$ )(?v7 A$ ))(=> (fun_app$n (fun_app$o ?v0 ?v6 )?v7 )(fun_app$n (fun_app$o ?v4 ?v6 )?v7 )))(forall ((?v6 C$ )(?v7 C$ ))(=> (fun_app$j (fun_app$k ?v1 ?v6 )?v7 )(fun_app$j (fun_app$k ?v5 ?v6 )?v7 )))))(fun_app$f (fun_app$g (tllist_all2$b ?v4 ?v5 )?v2 )?v3 ))):named a17 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_d_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 B_d_tllist$ )(?v4 A_b_bool_fun_fun$ )(?v5 C_d_bool_fun_fun$ ))(=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(and (forall ((?v6 A$ )(?v7 B$ ))(=> (fun_app$l (fun_app$s ?v0 ?v6 )?v7 )(fun_app$l (fun_app$s ?v4 ?v6 )?v7 )))(forall ((?v6 C$ )(?v7 D$ ))(=> (fun_app$h (fun_app$p ?v1 ?v6 )?v7 )(fun_app$h (fun_app$p ?v5 ?v6 )?v7 )))))(tllist_all2$ ?v4 ?v5 ?v2 ?v3 ))):named a18 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 A_c_tllist$ ))(=> (and (fun_app$f (fun_app$g (tllist_all2$b ?v0 ?v1 )?v2 )?v3 )(lfinite$a (llist_of_tllist$a ?v2 )))(fun_app$j (fun_app$k ?v1 (terminal$ ?v2 ))(terminal$ ?v3 )))):named a19 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 D_c_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 A_c_tllist$ ))(=> (and (tllist_all2$c ?v0 ?v1 ?v2 ?v3 )(lfinite$ (llist_of_tllist$ ?v2 )))(fun_app$j (fun_app$r ?v1 (terminal$a ?v2 ))(terminal$ ?v3 )))):named a20 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 B_d_tllist$ ))(=> (and (fun_app$d (fun_app$e (tllist_all2$a ?v0 ?v1 )?v2 )?v3 )(lfinite$ (llist_of_tllist$ ?v2 )))(fun_app$h (fun_app$i ?v1 (terminal$a ?v2 ))(terminal$a ?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_d_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 B_d_tllist$ ))(=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(lfinite$a (llist_of_tllist$a ?v2 )))(fun_app$h (fun_app$p ?v1 (terminal$ ?v2 ))(terminal$a ?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 C_d_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 A_d_tllist$ ))(=> (and (tllist_all2$d ?v0 ?v1 ?v2 ?v3 )(lfinite$a (llist_of_tllist$a ?v2 )))(fun_app$h (fun_app$p ?v1 (terminal$ ?v2 ))(terminal$b ?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 B_c_tllist$ ))(=> (and (tllist_all2$e ?v0 ?v1 ?v2 ?v3 )(lfinite$a (llist_of_tllist$a ?v2 )))(fun_app$j (fun_app$k ?v1 (terminal$ ?v2 ))(terminal$c ?v3 )))):named a24 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 A_d_tllist$ ))(=> (and (tllist_all2$f ?v0 ?v1 ?v2 ?v3 )(lfinite$ (llist_of_tllist$ ?v2 )))(fun_app$h (fun_app$i ?v1 (terminal$a ?v2 ))(terminal$b ?v3 )))):named a25 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 D_c_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 B_c_tllist$ ))(=> (and (tllist_all2$g ?v0 ?v1 ?v2 ?v3 )(lfinite$ (llist_of_tllist$ ?v2 )))(fun_app$j (fun_app$r ?v1 (terminal$a ?v2 ))(terminal$c ?v3 )))):named a26 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 D_c_bool_fun_fun$ )(?v2 A_d_tllist$ )(?v3 A_c_tllist$ ))(=> (and (tllist_all2$h ?v0 ?v1 ?v2 ?v3 )(lfinite$a (llist_of_tllist$b ?v2 )))(fun_app$j (fun_app$r ?v1 (terminal$b ?v2 ))(terminal$ ?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 A_d_tllist$ )(?v3 B_d_tllist$ ))(=> (and (tllist_all2$i ?v0 ?v1 ?v2 ?v3 )(lfinite$a (llist_of_tllist$b ?v2 )))(fun_app$h (fun_app$i ?v1 (terminal$b ?v2 ))(terminal$a ?v3 )))):named a28 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 B_d_tllist$ ))(=> (fun_app$d (fun_app$e (tllist_all2$a ?v0 ?v1 )?v2 )?v3 )(= (lfinite$ (llist_of_tllist$ ?v2 ))(lfinite$ (llist_of_tllist$ ?v3 ))))):named a29 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_d_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 B_d_tllist$ ))(=> (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(= (lfinite$a (llist_of_tllist$a ?v2 ))(lfinite$ (llist_of_tllist$ ?v3 ))))):named a30 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 D_c_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 A_c_tllist$ ))(=> (tllist_all2$c ?v0 ?v1 ?v2 ?v3 )(= (lfinite$ (llist_of_tllist$ ?v2 ))(lfinite$a (llist_of_tllist$a ?v3 ))))):named a31 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 A_c_tllist$ ))(=> (fun_app$f (fun_app$g (tllist_all2$b ?v0 ?v1 )?v2 )?v3 )(= (lfinite$a (llist_of_tllist$a ?v2 ))(lfinite$a (llist_of_tllist$a ?v3 ))))):named a32 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 A_d_tllist$ ))(=> (tllist_all2$f ?v0 ?v1 ?v2 ?v3 )(= (lfinite$ (llist_of_tllist$ ?v2 ))(lfinite$a (llist_of_tllist$b ?v3 ))))):named a33 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 D_c_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 B_c_tllist$ ))(=> (tllist_all2$g ?v0 ?v1 ?v2 ?v3 )(= (lfinite$ (llist_of_tllist$ ?v2 ))(lfinite$ (llist_of_tllist$c ?v3 ))))):named a34 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 C_d_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 A_d_tllist$ ))(=> (tllist_all2$d ?v0 ?v1 ?v2 ?v3 )(= (lfinite$a (llist_of_tllist$a ?v2 ))(lfinite$a (llist_of_tllist$b ?v3 ))))):named a35 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 B_c_tllist$ ))(=> (tllist_all2$e ?v0 ?v1 ?v2 ?v3 )(= (lfinite$a (llist_of_tllist$a ?v2 ))(lfinite$ (llist_of_tllist$c ?v3 ))))):named a36 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 A_d_tllist$ )(?v3 B_d_tllist$ ))(=> (tllist_all2$i ?v0 ?v1 ?v2 ?v3 )(= (lfinite$a (llist_of_tllist$b ?v2 ))(lfinite$ (llist_of_tllist$ ?v3 ))))):named a37 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 D_c_bool_fun_fun$ )(?v2 A_d_tllist$ )(?v3 A_c_tllist$ ))(=> (tllist_all2$h ?v0 ?v1 ?v2 ?v3 )(= (lfinite$a (llist_of_tllist$b ?v2 ))(lfinite$a (llist_of_tllist$a ?v3 ))))):named a38 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_d_tllist$ ))(=> (lfinite$a ?v0 )(= (terminal$b (lappendt$ ?v0 ?v1 ))(terminal$b ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_c_tllist$ ))(=> (lfinite$ ?v0 )(= (terminal$c (lappendt$a ?v0 ?v1 ))(terminal$c ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_c_tllist$ ))(=> (lfinite$a ?v0 )(= (terminal$ (lappendt$b ?v0 ?v1 ))(terminal$ ?v1 )))):named a41 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_d_tllist$ ))(=> (lfinite$ ?v0 )(= (terminal$a (lappendt$c ?v0 ?v1 ))(terminal$a ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_d_tllist_fun$ ))(= (lfinite$a (llist_of_tllist$b (tappend$ ?v0 ?v1 )))(and (lfinite$a (llist_of_tllist$a ?v0 ))(lfinite$a (llist_of_tllist$b (fun_app$t ?v1 (terminal$ ?v0 ))))))):named a43 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 D_b_c_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$c (tappend$a ?v0 ?v1 )))(and (lfinite$ (llist_of_tllist$ ?v0 ))(lfinite$ (llist_of_tllist$c (fun_app$u ?v1 (terminal$a ?v0 ))))))):named a44 ))
(assert (! (forall ((?v0 A_d_tllist$ )(?v1 D_a_c_tllist_fun$ ))(= (lfinite$a (llist_of_tllist$a (tappend$b ?v0 ?v1 )))(and (lfinite$a (llist_of_tllist$b ?v0 ))(lfinite$a (llist_of_tllist$a (fun_app$v ?v1 (terminal$b ?v0 ))))))):named a45 ))
(assert (! (forall ((?v0 A_d_tllist$ )(?v1 D_a_d_tllist_fun$ ))(= (lfinite$a (llist_of_tllist$b (tappend$c ?v0 ?v1 )))(and (lfinite$a (llist_of_tllist$b ?v0 ))(lfinite$a (llist_of_tllist$b (fun_app$w ?v1 (terminal$b ?v0 ))))))):named a46 ))
(assert (! (forall ((?v0 B_c_tllist$ )(?v1 C_b_d_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$ (tappend$d ?v0 ?v1 )))(and (lfinite$ (llist_of_tllist$c ?v0 ))(lfinite$ (llist_of_tllist$ (fun_app$x ?v1 (terminal$c ?v0 ))))))):named a47 ))
(assert (! (forall ((?v0 B_c_tllist$ )(?v1 C_b_c_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$c (tappend$e ?v0 ?v1 )))(and (lfinite$ (llist_of_tllist$c ?v0 ))(lfinite$ (llist_of_tllist$c (fun_app$y ?v1 (terminal$c ?v0 ))))))):named a48 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_c_tllist_fun$ ))(= (lfinite$a (llist_of_tllist$a (tappend$f ?v0 ?v1 )))(and (lfinite$a (llist_of_tllist$a ?v0 ))(lfinite$a (llist_of_tllist$a (fun_app$z ?v1 (terminal$ ?v0 ))))))):named a49 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 D_b_d_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$ (tappend$g ?v0 ?v1 )))(and (lfinite$ (llist_of_tllist$ ?v0 ))(lfinite$ (llist_of_tllist$ (fun_app$aa ?v1 (terminal$a ?v0 ))))))):named a50 ))
(assert (! (forall ((?v0 A_d_tllist$ )(?v1 D_a_d_tllist_fun$ ))(= (terminal$b (tappend$c ?v0 ?v1 ))(ite (lfinite$a (llist_of_tllist$b ?v0 ))(terminal$b (fun_app$w ?v1 (terminal$b ?v0 )))(terminal$b ?v0 )))):named a51 ))
(assert (! (forall ((?v0 B_c_tllist$ )(?v1 C_b_c_tllist_fun$ ))(= (terminal$c (tappend$e ?v0 ?v1 ))(ite (lfinite$ (llist_of_tllist$c ?v0 ))(terminal$c (fun_app$y ?v1 (terminal$c ?v0 )))(terminal$c ?v0 )))):named a52 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_c_tllist_fun$ ))(= (terminal$ (tappend$f ?v0 ?v1 ))(ite (lfinite$a (llist_of_tllist$a ?v0 ))(terminal$ (fun_app$z ?v1 (terminal$ ?v0 )))(terminal$ ?v0 )))):named a53 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 D_b_d_tllist_fun$ ))(= (terminal$a (tappend$g ?v0 ?v1 ))(ite (lfinite$ (llist_of_tllist$ ?v0 ))(terminal$a (fun_app$aa ?v1 (terminal$a ?v0 )))(terminal$a ?v0 )))):named a54 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_a_fun$ )(?v2 C_c_fun$ ))(=> (lfinite$a (llist_of_tllist$a ?v0 ))(= (terminal$ (tmap$ ?v1 ?v2 ?v0 ))(fun_app$ab ?v2 (terminal$ ?v0 ))))):named a55 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_a_fun$ )(?v2 D_c_fun$ ))(=> (lfinite$ (llist_of_tllist$ ?v0 ))(= (terminal$ (tmap$a ?v1 ?v2 ?v0 ))(fun_app$ac ?v2 (terminal$a ?v0 ))))):named a56 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_b_fun$ )(?v2 C_d_fun$ ))(=> (lfinite$a (llist_of_tllist$a ?v0 ))(= (terminal$a (tmap$b ?v1 ?v2 ?v0 ))(fun_app$ad ?v2 (terminal$ ?v0 ))))):named a57 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_b_fun$ )(?v2 D_d_fun$ ))(=> (lfinite$ (llist_of_tllist$ ?v0 ))(= (terminal$a (tmap$c ?v1 ?v2 ?v0 ))(fun_app$ae ?v2 (terminal$a ?v0 ))))):named a58 ))
(assert (! (forall ((?v0 A_d_tllist$ )(?v1 A_a_fun$ )(?v2 D_c_fun$ ))(=> (lfinite$a (llist_of_tllist$b ?v0 ))(= (terminal$ (tmap$d ?v1 ?v2 ?v0 ))(fun_app$ac ?v2 (terminal$b ?v0 ))))):named a59 ))
(assert (! (forall ((?v0 B_c_tllist$ )(?v1 B_a_fun$ )(?v2 C_c_fun$ ))(=> (lfinite$ (llist_of_tllist$c ?v0 ))(= (terminal$ (tmap$e ?v1 ?v2 ?v0 ))(fun_app$ab ?v2 (terminal$c ?v0 ))))):named a60 ))
(assert (! (forall ((?v0 A_d_tllist$ )(?v1 A_b_fun$ )(?v2 D_d_fun$ ))(=> (lfinite$a (llist_of_tllist$b ?v0 ))(= (terminal$a (tmap$f ?v1 ?v2 ?v0 ))(fun_app$ae ?v2 (terminal$b ?v0 ))))):named a61 ))
(assert (! (forall ((?v0 B_c_tllist$ )(?v1 B_b_fun$ )(?v2 C_d_fun$ ))(=> (lfinite$ (llist_of_tllist$c ?v0 ))(= (terminal$a (tmap$g ?v1 ?v2 ?v0 ))(fun_app$ad ?v2 (terminal$c ?v0 ))))):named a62 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_a_fun$ )(?v2 C_d_fun$ ))(=> (lfinite$a (llist_of_tllist$a ?v0 ))(= (terminal$b (tmap$h ?v1 ?v2 ?v0 ))(fun_app$ad ?v2 (terminal$ ?v0 ))))):named a63 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_a_fun$ )(?v2 D_d_fun$ ))(=> (lfinite$ (llist_of_tllist$ ?v0 ))(= (terminal$b (tmap$i ?v1 ?v2 ?v0 ))(fun_app$ae ?v2 (terminal$a ?v0 ))))):named a64 ))
(assert (! (= terminal0$ uuf$ ):named a65 ))
(assert (! (= terminal0$a uug$ ):named a66 ))
(assert (! (= terminal0$b uuh$ ):named a67 ))
(assert (! (= terminal0$c uui$ ):named a68 ))
(assert (! (forall ((?v0 B_c_tllist$ ))(! (=> (not (lfinite$ (llist_of_tllist$c ?v0 )))(= (terminal$c ?v0 )undefined$ )):pattern ((terminal$c ?v0 )))):named a69 ))
(assert (! (forall ((?v0 A_d_tllist$ ))(! (=> (not (lfinite$a (llist_of_tllist$b ?v0 )))(= (terminal$b ?v0 )undefined$a )):pattern ((terminal$b ?v0 )))):named a70 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(! (=> (not (lfinite$a (llist_of_tllist$a ?v0 )))(= (terminal$ ?v0 )undefined$ )):pattern ((terminal$ ?v0 )))):named a71 ))
(assert (! (forall ((?v0 B_d_tllist$ ))(! (=> (not (lfinite$ (llist_of_tllist$ ?v0 )))(= (terminal$a ?v0 )undefined$a )):pattern ((terminal$a ?v0 )))):named a72 ))
(assert (! (forall ((?v0 A_d_tllist$ ))(= (tllist_of_llist$ (terminal$b ?v0 )(llist_of_tllist$b ?v0 ))?v0 )):named a73 ))
(assert (! (forall ((?v0 B_c_tllist$ ))(= (tllist_of_llist$a (terminal$c ?v0 )(llist_of_tllist$c ?v0 ))?v0 )):named a74 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(= (tllist_of_llist$b (terminal$ ?v0 )(llist_of_tllist$a ?v0 ))?v0 )):named a75 ))
(assert (! (forall ((?v0 B_d_tllist$ ))(= (tllist_of_llist$c (terminal$a ?v0 )(llist_of_tllist$ ?v0 ))?v0 )):named a76 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 B_d_tllist$ ))(=> (fun_app$d (fun_app$e (tllist_all2$a ?v0 ?v1 )?v2 )?v3 )(= (tlength$ ?v2 )(tlength$ ?v3 )))):named a77 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 D_c_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 A_c_tllist$ ))(=> (tllist_all2$c ?v0 ?v1 ?v2 ?v3 )(= (tlength$ ?v2 )(tlength$a ?v3 )))):named a78 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 A_c_tllist$ ))(=> (fun_app$f (fun_app$g (tllist_all2$b ?v0 ?v1 )?v2 )?v3 )(= (tlength$a ?v2 )(tlength$a ?v3 )))):named a79 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_d_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 B_d_tllist$ ))(=> (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(= (tlength$a ?v2 )(tlength$ ?v3 )))):named a80 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 D$ ))(=> (lfinite$a ?v0 )(= (terminal$b (tllist_of_llist$ ?v1 ?v0 ))?v1 ))):named a81 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 C$ ))(=> (lfinite$ ?v0 )(= (terminal$c (tllist_of_llist$a ?v1 ?v0 ))?v1 ))):named a82 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 C$ ))(=> (lfinite$a ?v0 )(= (terminal$ (tllist_of_llist$b ?v1 ?v0 ))?v1 ))):named a83 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 D$ ))(=> (lfinite$ ?v0 )(= (terminal$a (tllist_of_llist$c ?v1 ?v0 ))?v1 ))):named a84 ))
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 D_b_d_tllist_fun$ ))(! (=> (not (lfinite$ (llist_of_tllist$ ?v0 )))(= (tappend$g ?v0 ?v1 )(tcast$ ?v0 ))):pattern ((tappend$g ?v0 ?v1 )))):named a85 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_c_tllist_fun$ ))(! (=> (not (lfinite$a (llist_of_tllist$a ?v0 )))(= (tappend$f ?v0 ?v1 )(tcast$a ?v0 ))):pattern ((tappend$f ?v0 ?v1 )))):named a86 ))
(assert (! (forall ((?v0 A_d_tllist$ ))(=> (is_TNil$ ?v0 )(lfinite$a (llist_of_tllist$b ?v0 )))):named a87 ))
(assert (! (forall ((?v0 B_c_tllist$ ))(=> (is_TNil$a ?v0 )(lfinite$ (llist_of_tllist$c ?v0 )))):named a88 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(=> (is_TNil$b ?v0 )(lfinite$a (llist_of_tllist$a ?v0 )))):named a89 ))
(assert (! (forall ((?v0 B_d_tllist$ ))(=> (is_TNil$c ?v0 )(lfinite$ (llist_of_tllist$ ?v0 )))):named a90 ))
(assert (! (forall ((?v0 D$ )(?v1 B_llist$ )(?v2 D$ )(?v3 B_llist$ ))(= (= (tllist_of_llist$c ?v0 ?v1 )(tllist_of_llist$c ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a91 ))
(assert (! (forall ((?v0 C$ )(?v1 A_llist$ )(?v2 C$ )(?v3 A_llist$ ))(= (= (tllist_of_llist$b ?v0 ?v1 )(tllist_of_llist$b ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$a ?v3 )(= ?v0 ?v2 ))))):named a92 ))
(check-sat )
;(get-unsat-core )
