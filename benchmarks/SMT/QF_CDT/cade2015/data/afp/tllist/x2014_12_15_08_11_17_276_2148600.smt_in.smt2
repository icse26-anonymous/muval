;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_b_tllist$ 0)
(declare-sort A_llist$ 0)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun xsa$ ()A_b_tllist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun tmap$ (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tset$ (A_b_tllist$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun is_TNil$ (A_b_tllist$ )Bool )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(assert (! (not (member$ (thd$ xsa$ )(lset$ (llist_of_tllist$ xsa$ )))):named a0 ))
(assert (! (not (is_TNil$ xsa$ )):named a1 ))
(assert (! (member$ x$ (tset$ xs$ )):named a2 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (not (is_TNil$ ?v0 ))(= (lhd$ (llist_of_tllist$ ?v0 ))(thd$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (thd$ (tCons$ ?v0 ?v1 ))?v0 ):pattern ((tCons$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$ ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ ))(=> (not (is_TNil$ ?v0 ))(= (thd$ (tmap$ ?v1 ?v2 ?v0 ))(fun_app$ ?v1 (thd$ ?v0 ))))):named a7 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (not (is_TNil$ ?v0 ))(member$ (thd$ ?v0 )(tset$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (not (lnull$ (llist_of_tllist$ ?v0 )))(not (is_TNil$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (lnull$ (llist_of_tllist$ ?v0 ))(is_TNil$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (and (=> (is_TNil$ ?v0 )false )(=> (not (is_TNil$ ?v0 ))false ))false )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (is_TNil$ (tmap$ ?v0 ?v1 ?v2 ))(is_TNil$ ?v2 ))):named a13 ))
(check-sat )
;(get-unsat-core )
