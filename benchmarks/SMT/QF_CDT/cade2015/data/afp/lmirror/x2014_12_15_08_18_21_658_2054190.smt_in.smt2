;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun uub$ ()B_b_bool_fun_fun$ )
(declare-fun uuc$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lmap$a (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$b (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (B_llist$ )B_set$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun transp$ (A_a_bool_fun_fun$ )Bool )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun lmirror$ (A_llist$ )A_llist$ )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun transp$a (B_b_bool_fun_fun$ )Bool )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$h (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$i (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$j (Nat_b_fun$ Nat$ )B$ )
(declare-fun fun_app$k (Nat_a_fun$ Nat$ )A$ )
(declare-fun lmirror$a (B_llist$ )B_llist$ )
(declare-fun inf_llist$ (Nat_b_fun$ )B_llist$ )
(declare-fun inf_llist$a (Nat_a_fun$ )A_llist$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun lmirror_aux$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lmirror_aux$a (B_llist$ B_llist$ )B_llist$ )
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uuc$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$f (fun_app$g uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uu$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (fun_app$ (llist_all2$ p$ (lmirror$ xs$ ))(lmirror$a ys$ ))):named a4 ))
(assert (! (fun_app$ (llist_all2$ p$ xs$ )ys$ ):named a5 ))
(assert (! (= (llist_all2$a uu$ )uua$ ):named a6 ))
(assert (! (= (llist_all2$b uub$ )uuc$ ):named a7 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (fun_app$b (llist_all2$c ?v0 ?v1 )?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (fun_app$f (fun_app$h ?v0 ?v4 )?v5 )(fun_app$f (fun_app$h ?v3 ?v4 )?v5 ))))(fun_app$b (llist_all2$c ?v3 ?v1 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$a ?v3 )?v1 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v4 )?v5 )(fun_app$d (fun_app$e ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$b ?v3 )?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$d (fun_app$i ?v0 ?v4 )?v5 )(fun_app$d (fun_app$i ?v3 ?v4 )?v5 ))))(fun_app$ (llist_all2$ ?v3 ?v1 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 B_llist$ )(?v4 A_llist$ )(?v5 B_llist$ )(?v6 A_llist$ ))(=> (and (forall ((?v7 B$ )(?v8 A$ ))(=> (fun_app$f (fun_app$h ?v0 ?v7 )?v8 )(forall ((?v9 B$ )(?v10 A$ ))(=> (fun_app$f (fun_app$h ?v0 ?v9 )?v10 )(= (fun_app$d (fun_app$e ?v1 ?v7 )?v9 )(fun_app$f (fun_app$g ?v2 ?v8 )?v10 ))))))(and (fun_app$b (llist_all2$c ?v0 ?v3 )?v4 )(fun_app$b (llist_all2$c ?v0 ?v5 )?v6 )))(= (fun_app$ (fun_app$a (llist_all2$b ?v1 )?v3 )?v5 )(fun_app$b (fun_app$c (llist_all2$a ?v2 )?v4 )?v6 )))):named a12 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_llist$ )(?v4 A_llist$ )(?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (forall ((?v7 A$ )(?v8 A$ ))(=> (fun_app$f (fun_app$g ?v0 ?v7 )?v8 )(forall ((?v9 A$ )(?v10 A$ ))(=> (fun_app$f (fun_app$g ?v0 ?v9 )?v10 )(= (fun_app$f (fun_app$g ?v1 ?v7 )?v9 )(fun_app$f (fun_app$g ?v2 ?v8 )?v10 ))))))(and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v3 )?v4 )(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v5 )?v6 )))(= (fun_app$b (fun_app$c (llist_all2$a ?v1 )?v3 )?v5 )(fun_app$b (fun_app$c (llist_all2$a ?v2 )?v4 )?v6 )))):named a13 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 B_llist$ )(?v4 B_llist$ )(?v5 B_llist$ )(?v6 B_llist$ ))(=> (and (forall ((?v7 B$ )(?v8 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v7 )?v8 )(forall ((?v9 B$ )(?v10 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v9 )?v10 )(= (fun_app$d (fun_app$e ?v1 ?v7 )?v9 )(fun_app$d (fun_app$e ?v2 ?v8 )?v10 ))))))(and (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v3 )?v4 )(fun_app$ (fun_app$a (llist_all2$b ?v0 )?v5 )?v6 )))(= (fun_app$ (fun_app$a (llist_all2$b ?v1 )?v3 )?v5 )(fun_app$ (fun_app$a (llist_all2$b ?v2 )?v4 )?v6 )))):named a14 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 A_llist$ )(?v4 B_llist$ )(?v5 A_llist$ )(?v6 B_llist$ ))(=> (and (forall ((?v7 A$ )(?v8 B$ ))(=> (fun_app$d (fun_app$i ?v0 ?v7 )?v8 )(forall ((?v9 A$ )(?v10 B$ ))(=> (fun_app$d (fun_app$i ?v0 ?v9 )?v10 )(= (fun_app$f (fun_app$g ?v1 ?v7 )?v9 )(fun_app$d (fun_app$e ?v2 ?v8 )?v10 ))))))(and (fun_app$ (llist_all2$ ?v0 ?v3 )?v4 )(fun_app$ (llist_all2$ ?v0 ?v5 )?v6 )))(= (fun_app$b (fun_app$c (llist_all2$a ?v1 )?v3 )?v5 )(fun_app$ (fun_app$a (llist_all2$b ?v2 )?v4 )?v6 )))):named a15 ))
(assert (! (= (lmirror$ lNil$ )lNil$ ):named a16 ))
(assert (! (= (lmirror$a lNil$a )lNil$a ):named a17 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lnull$ (lmirror$ ?v0 ))(lnull$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lnull$a (lmirror$a ?v0 ))(lnull$a ?v0 ))):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lset$ (lmirror$ ?v0 ))(lset$ ?v0 ))):named a20 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lset$a (lmirror$a ?v0 ))(lset$a ?v0 ))):named a21 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v3 )?v4 ))(fun_app$b (fun_app$c (llist_all2$a ?v0 )(lmirror_aux$ ?v1 ?v3 ))(lmirror_aux$ ?v2 ?v4 )))):named a22 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ )(?v4 A_llist$ ))(=> (and (fun_app$b (llist_all2$c ?v0 ?v1 )?v2 )(fun_app$b (llist_all2$c ?v0 ?v3 )?v4 ))(fun_app$b (llist_all2$c ?v0 (lmirror_aux$a ?v1 ?v3 ))(lmirror_aux$ ?v2 ?v4 )))):named a23 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist$ )(?v4 B_llist$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (llist_all2$b ?v0 )?v3 )?v4 ))(fun_app$ (fun_app$a (llist_all2$b ?v0 )(lmirror_aux$a ?v1 ?v3 ))(lmirror_aux$a ?v2 ?v4 )))):named a24 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_llist$ )(?v4 B_llist$ ))(=> (and (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(fun_app$ (llist_all2$ ?v0 ?v3 )?v4 ))(fun_app$ (llist_all2$ ?v0 (lmirror_aux$ ?v1 ?v3 ))(lmirror_aux$a ?v2 ?v4 )))):named a25 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lmap$ ?v0 (lmirror$ ?v1 ))(lmirror$ (lmap$ ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lmap$a ?v0 (lmirror$ ?v1 ))(lmirror$a (lmap$a ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lmap$b ?v0 (lmirror$a ?v1 ))(lmirror$ (lmap$b ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lmap$c ?v0 (lmirror$a ?v1 ))(lmirror$a (lmap$c ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 Nat_b_fun$ )(?v2 Nat_a_fun$ ))(= (fun_app$b (llist_all2$c ?v0 (inf_llist$ ?v1 ))(inf_llist$a ?v2 ))(forall ((?v3 Nat$ ))(fun_app$f (fun_app$h ?v0 (fun_app$j ?v1 ?v3 ))(fun_app$k ?v2 ?v3 ))))):named a30 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 Nat_a_fun$ )(?v2 Nat_a_fun$ ))(= (fun_app$b (fun_app$c (llist_all2$a ?v0 )(inf_llist$a ?v1 ))(inf_llist$a ?v2 ))(forall ((?v3 Nat$ ))(fun_app$f (fun_app$g ?v0 (fun_app$k ?v1 ?v3 ))(fun_app$k ?v2 ?v3 ))))):named a31 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 Nat_b_fun$ )(?v2 Nat_b_fun$ ))(= (fun_app$ (fun_app$a (llist_all2$b ?v0 )(inf_llist$ ?v1 ))(inf_llist$ ?v2 ))(forall ((?v3 Nat$ ))(fun_app$d (fun_app$e ?v0 (fun_app$j ?v1 ?v3 ))(fun_app$j ?v2 ?v3 ))))):named a32 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 Nat_a_fun$ )(?v2 Nat_b_fun$ ))(= (fun_app$ (llist_all2$ ?v0 (inf_llist$a ?v1 ))(inf_llist$ ?v2 ))(forall ((?v3 Nat$ ))(fun_app$d (fun_app$i ?v0 (fun_app$k ?v1 ?v3 ))(fun_app$j ?v2 ?v3 ))))):named a33 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v2 )?v3 )(transp$ ?v0 )))(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v3 ))):named a34 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v2 )(and (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v2 )?v3 )(transp$a ?v0 )))(fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v3 ))):named a35 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$b (llist_all2$c ?v0 ?v1 )lNil$ )(= ?v1 lNil$a )):pattern ((llist_all2$c ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )lNil$ )(= ?v1 lNil$ )):pattern ((fun_app$c (llist_all2$a ?v0 )?v1 )))):named a37 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )lNil$a )(= ?v1 lNil$a )):pattern ((fun_app$a (llist_all2$b ?v0 )?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 ?v1 )lNil$a )(= ?v1 lNil$ )):pattern ((llist_all2$ ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (llist_all2$c ?v0 lNil$a )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$b (llist_all2$c ?v0 lNil$a )?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )?v1 )))):named a41 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$b ?v0 )lNil$a )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$ (fun_app$a (llist_all2$b ?v0 )lNil$a )?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 lNil$ )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$ (llist_all2$ ?v0 lNil$ )?v1 )))):named a43 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun$ ))(= (= (inf_llist$a ?v0 )(inf_llist$a ?v1 ))(= ?v0 ?v1 ))):named a44 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_b_fun$ ))(= (= (inf_llist$ ?v0 )(inf_llist$ ?v1 ))(= ?v0 ?v1 ))):named a45 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(= (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v1 ))(fun_app$f (fun_app$g ?v0 ?v2 )?v2 ))))):named a46 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(= (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v1 )(forall ((?v2 B$ ))(=> (member$a ?v2 (lset$a ?v1 ))(fun_app$d (fun_app$e ?v0 ?v2 )?v2 ))))):named a47 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$c ?v0 ?v1 ))(lnull$a ?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$a ?v0 ?v1 ))(lnull$ ?v1 ))):named a49 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$b ?v0 ?v1 ))(lnull$a ?v1 ))):named a50 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a51 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (lmirror_aux$ ?v0 ?v1 )))(or (not (lnull$ ?v1 ))(not (lnull$ ?v0 ))))):named a52 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$a (lmirror_aux$a ?v0 ?v1 )))(or (not (lnull$a ?v1 ))(not (lnull$a ?v0 ))))):named a53 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (lmirror_aux$ ?v0 ?v1 ))(and (lnull$ ?v1 )(lnull$ ?v0 )))):named a54 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$a (lmirror_aux$a ?v0 ?v1 ))(and (lnull$a ?v1 )(lnull$a ?v0 )))):named a55 ))
(check-sat )
;(get-unsat-core )
