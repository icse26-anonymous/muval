;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Num_num_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun times$ (Enat$ Enat$ )Enat$ )
(declare-fun times$a (Num$ )Num_num_fun$ )
(declare-fun fun_app$ (Num_num_fun$ Num$ )Num$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lmirror$ (A_llist$ )A_llist$ )
(declare-fun numeral$ (Num$ )Enat$ )
(assert (! (not (= (llength$ (lmirror$ xs$ ))(times$ (numeral$ (bit0$ one$ ))(llength$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a1 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a2 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ )(?v2 Enat$ ))(= (times$ (numeral$ ?v0 )(times$ (numeral$ ?v1 )?v2 ))(times$ (numeral$ (fun_app$ (times$a ?v0 )?v1 ))?v2 ))):named a3 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (times$ (numeral$ ?v0 )(numeral$ ?v1 ))(numeral$ (fun_app$ (times$a ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 Enat$ ))(= (times$ (numeral$ one$ )?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 Enat$ ))(= (times$ ?v0 (numeral$ one$ ))?v0 )):named a6 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Num$ ))(not (= one$ (bit0$ ?v0 )))):named a10 ))
(assert (! (= (= one$ one$ )true ):named a11 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(! (= (fun_app$ (times$a (bit0$ ?v0 ))(bit0$ ?v1 ))(bit0$ (bit0$ (fun_app$ (times$a ?v0 )?v1 )))):pattern ((fun_app$ (times$a (bit0$ ?v0 ))(bit0$ ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 Num$ ))(! (= (fun_app$ (times$a one$ )?v0 )?v0 ):pattern ((fun_app$ (times$a one$ )?v0 )))):named a13 ))
(assert (! (forall ((?v0 Num$ ))(! (= (fun_app$ (times$a ?v0 )one$ )?v0 ):pattern ((times$a ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ ))(= (times$ ?v0 (numeral$ (bit0$ one$ )))(plus$ ?v0 ?v0 ))):named a15 ))
(check-sat )
;(get-unsat-core )
