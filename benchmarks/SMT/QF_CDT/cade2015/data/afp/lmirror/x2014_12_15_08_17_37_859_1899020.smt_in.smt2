;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_a_prod_llist_bool_fun$ 0 )
(declare-sort A_a_a_prod_prod_llist_bool_fun$ 0 )
(declare-sort A_a_prod_a_prod_llist_bool_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_a_prod$ (pair$ (fst$ A$ )(snd$ A$ )))(A_a_prod_a_a_prod_prod$ (pair$a (fst$a A_a_prod$ )(snd$a A_a_prod$ )))))
(declare-sort A_a_prod_a_a_prod_prod_llist$ 0)
(declare-fun lNil$a ()A_a_prod_a_a_prod_prod_llist$)
(declare-fun lhd$a (A_a_prod_a_a_prod_prod_llist$)A_a_prod_a_a_prod_prod$)
(declare-fun ltl$a (A_a_prod_a_a_prod_prod_llist$)A_a_prod_a_a_prod_prod_llist$)
(declare-fun lCons$a (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$ )(snd$b A$ )))))
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$b ()A_a_prod_a_prod_llist$)
(declare-fun lhd$b (A_a_prod_a_prod_llist$)A_a_prod_a_prod$)
(declare-fun ltl$b (A_a_prod_a_prod_llist$)A_a_prod_a_prod_llist$)
(declare-fun lCons$b (A_a_prod_a_prod$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod$ (pair$c (fst$c A$ )(snd$c A_a_prod$ )))))
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$c ()A_a_a_prod_prod_llist$)
(declare-fun lhd$c (A_a_a_prod_prod_llist$)A_a_a_prod_prod$)
(declare-fun ltl$c (A_a_a_prod_prod_llist$)A_a_a_prod_prod_llist$)
(declare-fun lCons$c (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$)
(declare-fun lNil$d ()A_a_prod_llist$)
(declare-fun lhd$d (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$d (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$d (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_a_prod_prod$ (pair$d (fst$d A$ )(snd$d A_a_prod_a_prod$ )))))
(declare-sort A_a_a_prod_a_prod_prod_llist$ 0)
(declare-fun lNil$e ()A_a_a_prod_a_prod_prod_llist$)
(declare-fun lhd$e (A_a_a_prod_a_prod_prod_llist$)A_a_a_prod_a_prod_prod$)
(declare-fun ltl$e (A_a_a_prod_a_prod_prod_llist$)A_a_a_prod_a_prod_prod_llist$)
(declare-fun lCons$e (A_a_a_prod_a_prod_prod$ A_a_a_prod_a_prod_prod_llist$ )A_a_a_prod_a_prod_prod_llist$)
(declare-datatypes ()((A_a_a_a_prod_prod_prod$ (pair$e (fst$e A$ )(snd$e A_a_a_prod_prod$ )))))
(declare-sort A_a_a_a_prod_prod_prod_llist$ 0)
(declare-fun lNil$f ()A_a_a_a_prod_prod_prod_llist$)
(declare-fun lhd$f (A_a_a_a_prod_prod_prod_llist$)A_a_a_a_prod_prod_prod$)
(declare-fun ltl$f (A_a_a_a_prod_prod_prod_llist$)A_a_a_a_prod_prod_prod_llist$)
(declare-fun lCons$f (A_a_a_a_prod_prod_prod$ A_a_a_a_prod_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_prod_a_prod$ (pair$f (fst$f A_a_prod_a_prod$ )(snd$f A$ )))))
(declare-sort A_a_prod_a_prod_a_prod_llist$ 0)
(declare-fun lNil$g ()A_a_prod_a_prod_a_prod_llist$)
(declare-fun lhd$g (A_a_prod_a_prod_a_prod_llist$)A_a_prod_a_prod_a_prod$)
(declare-fun ltl$g (A_a_prod_a_prod_a_prod_llist$)A_a_prod_a_prod_a_prod_llist$)
(declare-fun lCons$g (A_a_prod_a_prod_a_prod$ A_a_prod_a_prod_a_prod_llist$ )A_a_prod_a_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod_a_prod$ (pair$g (fst$g A_a_a_prod_prod$ )(snd$g A$ )))))
(declare-sort A_a_a_prod_prod_a_prod_llist$ 0)
(declare-fun lNil$h ()A_a_a_prod_prod_a_prod_llist$)
(declare-fun lhd$h (A_a_a_prod_prod_a_prod_llist$)A_a_a_prod_prod_a_prod$)
(declare-fun ltl$h (A_a_a_prod_prod_a_prod_llist$)A_a_a_prod_prod_a_prod_llist$)
(declare-fun lCons$h (A_a_a_prod_prod_a_prod$ A_a_a_prod_prod_a_prod_llist$ )A_a_a_prod_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_a_a_prod_prod_prod$ (pair$h (fst$h A$ )(snd$h A_a_prod_a_a_prod_prod$ )))))
(declare-sort A_a_a_prod_a_a_prod_prod_prod_llist$ 0)
(declare-fun lNil$i ()A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lhd$i (A_a_a_prod_a_a_prod_prod_prod_llist$)A_a_a_prod_a_a_prod_prod_prod$)
(declare-fun ltl$i (A_a_a_prod_a_a_prod_prod_prod_llist$)A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lCons$i (A_a_a_prod_a_a_prod_prod_prod$ A_a_a_prod_a_a_prod_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_a_prod_a_prod_prod$ (pair$i (fst$i A_a_prod$ )(snd$i A_a_prod_a_prod$ )))))
(declare-sort A_a_prod_a_a_prod_a_prod_prod_llist$ 0)
(declare-fun lNil$j ()A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun lhd$j (A_a_prod_a_a_prod_a_prod_prod_llist$)A_a_prod_a_a_prod_a_prod_prod$)
(declare-fun ltl$j (A_a_prod_a_a_prod_a_prod_prod_llist$)A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun lCons$j (A_a_prod_a_a_prod_a_prod_prod$ A_a_prod_a_a_prod_a_prod_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun acc$ ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun acca$ ()A_llist$ )
(declare-fun lzip$ (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lzip$a (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$b (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$ )A_a_a_prod_a_prod_prod_llist$ )
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$ )A_a_prod_a_prod_a_prod_llist$ )
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$ )A_a_a_prod_prod_a_prod_llist$ )
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$ )
(declare-fun ldropn$ (Nat$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lnull$a (A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun lnull$b (A_a_prod_a_prod_llist$ )Bool )
(declare-fun lnull$c (A_a_a_prod_prod_llist$ )Bool )
(declare-fun lnull$d (A_a_prod_llist$ )Bool )
(declare-fun fun_app$ (A_a_prod_a_a_prod_prod_llist_bool_fun$ A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun ldropn$a (Nat$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun ldropn$b (Nat$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun ldropn$c (Nat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ldropn$d (Nat$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_a_prod_a_prod_llist_bool_fun$ A_a_prod_a_prod_llist$ )Bool )
(declare-fun fun_app$b (A_a_a_prod_prod_llist_bool_fun$ A_a_a_prod_prod_llist$ )Bool )
(declare-fun fun_app$c (A_a_prod_llist_bool_fun$ A_a_prod_llist$ )Bool )
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lfinite$a (A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$b (A_a_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$c (A_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$d (A_a_prod_llist$ )Bool )
(declare-fun lfinite$e (A_a_a_prod_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$f (A_a_a_a_prod_prod_prod_llist$ )Bool )
(declare-fun lfinite$g (A_a_prod_a_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$h (A_a_a_prod_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$i (A_a_a_prod_a_a_prod_prod_prod_llist$ )Bool )
(declare-fun lfinite$j (A_a_prod_a_a_prod_a_prod_prod_llist$ )Bool )
(declare-fun lmirror_aux$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lmirror_aux$a (A_a_prod_llist$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun lstrict_prefix$ (A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist_bool_fun$ )
(declare-fun lstrict_prefix$a (A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist_bool_fun$ )
(declare-fun lstrict_prefix$b (A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist_bool_fun$ )
(declare-fun lstrict_prefix$c (A_a_prod_llist$ )A_a_prod_llist_bool_fun$ )
(declare-fun lstrict_prefix$d (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (and (lfinite$ xsa$ )(lfinite$ acca$ ))):named a0 ))
(assert (! (lfinite$ (lmirror_aux$ acc$ xs$ )):named a1 ))
(assert (! (not (lnull$ (lmirror_aux$ acca$ xsa$ ))):named a2 ))
(assert (! (lfinite$ (lmirror_aux$ acca$ xsa$ )):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (= (ltl$ (lmirror_aux$ acca$ xsa$ ))(lmirror_aux$ ?v0 ?v1 ))(and (lfinite$ ?v1 )(lfinite$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ ))(= (lfinite$a (ltl$a ?v0 ))(lfinite$a ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ ))(= (lfinite$b (ltl$b ?v0 ))(lfinite$b ?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(= (lfinite$c (ltl$c ?v0 ))(lfinite$c ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(= (lfinite$d (ltl$d ?v0 ))(lfinite$d ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ ))(=> (lnull$a ?v0 )(lfinite$a ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ ))(=> (lnull$b ?v0 )(lfinite$b ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(=> (lnull$c ?v0 )(lfinite$c ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(=> (lnull$d ?v0 )(lfinite$d ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(lfinite$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(=> (and (=> (and (lnull$d ?v0 )(lnull$d ?v1 ))false )(=> (or (not (lnull$d ?v0 ))(not (lnull$d ?v1 )))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a16 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(= (not (lnull$d (lmirror_aux$a ?v0 ?v1 )))(or (not (lnull$d ?v1 ))(not (lnull$d ?v0 ))))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (lmirror_aux$ ?v0 ?v1 )))(or (not (lnull$ ?v1 ))(not (lnull$ ?v0 ))))):named a18 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(= (lnull$d (lmirror_aux$a ?v0 ?v1 ))(and (lnull$d ?v1 )(lnull$d ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (lmirror_aux$ ?v0 ?v1 ))(and (lnull$ ?v1 )(lnull$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ )(?v1 A_a_prod_a_a_prod_prod_llist_bool_fun$ ))(=> (and (lfinite$a ?v0 )(and (forall ((?v2 A_a_prod_a_a_prod_prod_llist$ ))(=> (lnull$a ?v2 )(fun_app$ ?v1 ?v2 )))(forall ((?v2 A_a_prod_a_a_prod_prod_llist$ ))(=> (and (lfinite$a ?v2 )(and (not (lnull$a ?v2 ))(fun_app$ ?v1 (ltl$a ?v2 ))))(fun_app$ ?v1 ?v2 )))))(fun_app$ ?v1 ?v0 ))):named a21 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ )(?v1 A_a_prod_a_prod_llist_bool_fun$ ))(=> (and (lfinite$b ?v0 )(and (forall ((?v2 A_a_prod_a_prod_llist$ ))(=> (lnull$b ?v2 )(fun_app$a ?v1 ?v2 )))(forall ((?v2 A_a_prod_a_prod_llist$ ))(=> (and (lfinite$b ?v2 )(and (not (lnull$b ?v2 ))(fun_app$a ?v1 (ltl$b ?v2 ))))(fun_app$a ?v1 ?v2 )))))(fun_app$a ?v1 ?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_a_a_prod_prod_llist_bool_fun$ ))(=> (and (lfinite$c ?v0 )(and (forall ((?v2 A_a_a_prod_prod_llist$ ))(=> (lnull$c ?v2 )(fun_app$b ?v1 ?v2 )))(forall ((?v2 A_a_a_prod_prod_llist$ ))(=> (and (lfinite$c ?v2 )(and (not (lnull$c ?v2 ))(fun_app$b ?v1 (ltl$c ?v2 ))))(fun_app$b ?v1 ?v2 )))))(fun_app$b ?v1 ?v0 ))):named a23 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist_bool_fun$ ))(=> (and (lfinite$d ?v0 )(and (forall ((?v2 A_a_prod_llist$ ))(=> (lnull$d ?v2 )(fun_app$c ?v1 ?v2 )))(forall ((?v2 A_a_prod_llist$ ))(=> (and (lfinite$d ?v2 )(and (not (lnull$d ?v2 ))(fun_app$c ?v1 (ltl$d ?v2 ))))(fun_app$c ?v1 ?v2 )))))(fun_app$c ?v1 ?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_bool_fun$ ))(=> (and (lfinite$ ?v0 )(and (forall ((?v2 A_llist$ ))(=> (lnull$ ?v2 )(fun_app$d ?v1 ?v2 )))(forall ((?v2 A_llist$ ))(=> (and (lfinite$ ?v2 )(and (not (lnull$ ?v2 ))(fun_app$d ?v1 (ltl$ ?v2 ))))(fun_app$d ?v1 ?v2 )))))(fun_app$d ?v1 ?v0 ))):named a25 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(=> (fun_app$ (lstrict_prefix$ ?v0 )?v1 )(lfinite$a ?v0 ))):named a26 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ )(?v1 A_a_prod_a_prod_llist$ ))(=> (fun_app$a (lstrict_prefix$a ?v0 )?v1 )(lfinite$b ?v0 ))):named a27 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_a_a_prod_prod_llist$ ))(=> (fun_app$b (lstrict_prefix$b ?v0 )?v1 )(lfinite$c ?v0 ))):named a28 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(=> (fun_app$c (lstrict_prefix$c ?v0 )?v1 )(lfinite$d ?v0 ))):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$d (lstrict_prefix$d ?v0 )?v1 )(lfinite$ ?v0 ))):named a30 ))
(assert (! (= (lfinite$a lNil$a )true ):named a31 ))
(assert (! (= (lfinite$b lNil$b )true ):named a32 ))
(assert (! (= (lfinite$c lNil$c )true ):named a33 ))
(assert (! (= (lfinite$d lNil$d )true ):named a34 ))
(assert (! (= (lfinite$ lNil$ )true ):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(= (lfinite$a (ldropn$ ?v0 ?v1 ))(lfinite$a ?v1 ))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_prod_llist$ ))(= (lfinite$b (ldropn$a ?v0 ?v1 ))(lfinite$b ?v1 ))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_prod_llist$ ))(= (lfinite$c (ldropn$b ?v0 ?v1 ))(lfinite$c ?v1 ))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ ))(= (lfinite$d (ldropn$c ?v0 ?v1 ))(lfinite$d ?v1 ))):named a39 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$d ?v0 ?v1 ))(lfinite$ ?v1 ))):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$d (lzip$ ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$c (lzip$a ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$d ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$b (lzip$b ?v0 ?v1 ))(or (lfinite$d ?v0 )(lfinite$ ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$a (lzip$c ?v0 ?v1 ))(or (lfinite$d ?v0 )(lfinite$d ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_a_prod_llist$ ))(= (lfinite$e (lzip$d ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$b ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_a_prod_prod_llist$ ))(= (lfinite$f (lzip$e ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$c ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$g (lzip$f ?v0 ?v1 ))(or (lfinite$b ?v0 )(lfinite$ ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$h (lzip$g ?v0 ?v1 ))(or (lfinite$c ?v0 )(lfinite$ ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(= (lfinite$i (lzip$h ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$a ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_a_prod_llist$ ))(= (lfinite$j (lzip$i ?v0 ?v1 ))(or (lfinite$d ?v0 )(lfinite$b ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_a_prod_a_prod$ )(?v1 A_a_prod_a_prod_llist$ ))(! (= (lfinite$b (lCons$b ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ ))(! (= (lfinite$c (lCons$c ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$c ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (lfinite$d (lCons$d ?v0 ?v1 ))(lfinite$d ?v1 )):pattern ((lCons$d ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_a_prod_a_prod$ )(?v1 A_a_prod_a_prod_llist$ ))(! (= (lfinite$b (lCons$b ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ ))(! (= (lfinite$c (lCons$c ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$c ?v0 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (lfinite$d (lCons$d ?v0 ?v1 ))(lfinite$d ?v1 )):pattern ((lCons$d ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(= (= (lCons$d ?v0 ?v1 )(lCons$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a61 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a62 ))
(check-sat )
;(get-unsat-core )
