;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lmirror$ (A_llist$ )A_llist$ )
(assert (! (not (= (ltl$ (lmirror$ xs$ ))(fun_app$ (lappend$ (lmirror$ (ltl$ xs$ )))(lCons$ (lhd$ xs$ )lNil$ )))):named a0 ))
(assert (! (not (lnull$ xs$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lnull$ (lmirror$ ?v0 ))(lnull$ ?v0 ))):named a2 ))
(assert (! (= (lmirror$ lNil$ )lNil$ ):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (lmirror$ (lCons$ ?v0 ?v1 ))(lCons$ ?v0 (fun_app$ (lappend$ (lmirror$ ?v1 ))(lCons$ ?v0 lNil$ ))))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lnull$ ?v0 ))(= (lCons$ (lhd$ ?v0 )(ltl$ ?v0 ))?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lhd$ (fun_app$ (lappend$ ?v0 )?v1 ))(ite (lnull$ ?v0 )(lhd$ ?v1 )(lhd$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$ (lappend$ ?v0 )?v1 ))(ite (lnull$ ?v0 )(ltl$ ?v1 )(fun_app$ (lappend$ (ltl$ ?v0 ))?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$ (lappend$ ?v0 )?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$ (lappend$ ?v1 )?v2 ))):pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(=> (= ?v0 (lCons$ (lhd$ ?v0 )(ltl$ ?v0 )))false ))false )):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))(and (not (= ?v0 lNil$ ))(and (= (lhd$ ?v0 )?v1 )(= (ltl$ ?v0 )?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (not (lnull$ ?v0 ))(= (fun_app$ (lappend$ (ltl$ ?v0 ))?v1 )(ltl$ (fun_app$ (lappend$ ?v0 )?v1 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a18 ))
(check-sat )
;(get-unsat-core )
