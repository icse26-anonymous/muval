;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun k$ ()Enat$ )
(declare-fun m$ ()Enat$ )
(declare-fun n$ ()Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun times$ (Enat$ Enat$ )Enat$ )
(declare-fun infinity$ ()Enat$ )
(assert (! (not (= (= (times$ k$ m$ )(times$ k$ n$ ))(or (= m$ n$ )(or (= k$ zero$ )(and (= k$ infinity$ )(and (not (= n$ zero$ ))(not (= m$ zero$ )))))))):named a0 ))
(assert (! (= (times$ infinity$ infinity$ )infinity$ ):named a1 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (times$ ?v0 ?v1 )zero$ )(or (= ?v0 zero$ )(= ?v1 zero$ )))):named a2 ))
(assert (! (forall ((?v0 Enat$ ))(= (times$ ?v0 zero$ )zero$ )):named a3 ))
(assert (! (forall ((?v0 Enat$ ))(= (times$ zero$ ?v0 )zero$ )):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (times$ ?v0 ?v1 )infinity$ )(or (and (= ?v0 infinity$ )(not (= ?v1 zero$ )))(and (= ?v1 infinity$ )(not (= ?v0 zero$ )))))):named a5 ))
(assert (! (not (= infinity$ zero$ )):named a6 ))
(assert (! (forall ((?v0 Enat$ ))(= (times$ ?v0 zero$ )zero$ )):named a7 ))
(assert (! (forall ((?v0 Enat$ ))(= (times$ zero$ ?v0 )zero$ )):named a8 ))
(assert (! (forall ((?v0 Enat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (times$ ?v0 ?v1 )(times$ ?v1 ?v0 ))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (times$ ?v0 ?v1 )(times$ ?v1 ?v0 ))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (times$ ?v0 (times$ ?v1 ?v2 ))(times$ ?v1 (times$ ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (times$ ?v0 (times$ ?v1 ?v2 ))(times$ ?v1 (times$ ?v0 ?v2 )))):named a13 ))
(check-sat )
;(get-unsat-core )
