;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_b_fun$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort Nat_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-sort A_b_prod_stream$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (B_stream$)B$)
(declare-fun stl$a (B_stream$)B_stream$)
(declare-fun sCons$a (B$ B_stream$ )B_stream$)
(declare-fun shd$b (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$b (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$b (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-fun uu$ ()A_b_prod_a_fun$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun ys$ ()B_stream$ )
(declare-fun uua$ ()A_b_prod_b_fun$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun smap$ (A_b_prod_a_fun$ A_b_prod_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ )Nat_a_fun$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun szip$ (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun lnth$a (B_llist$ )Nat_b_fun$ )
(declare-fun lnth$b (A_b_prod_llist$ )Nat_a_b_prod_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (B_llist$ )B_set$ )
(declare-fun lset$b (A_b_prod_llist$ )A_b_prod_set$ )
(declare-fun smap$a (A_b_prod_b_fun$ A_b_prod_stream$ )B_stream$ )
(declare-fun smap$b (A_b_prod_a_b_prod_fun$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$c (B_a_b_prod_fun$ B_stream$ )A_b_prod_stream$ )
(declare-fun smap$d (A_a_b_prod_fun$ A_stream$ )A_b_prod_stream$ )
(declare-fun smap$e (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$f (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$g (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$h (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun snth$a (B_stream$ )Nat_b_fun$ )
(declare-fun snth$b (A_b_prod_stream$ )Nat_a_b_prod_fun$ )
(declare-fun sset$a (B_stream$ )B_set$ )
(declare-fun sset$b (A_b_prod_stream$ )A_b_prod_set$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun lnull$b (A_b_prod_llist$ )Bool )
(declare-fun fun_app$ (A_b_prod_b_fun$ A_b_prod$ )B$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$b (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$c (B_a_b_prod_fun$ B$ )A_b_prod$ )
(declare-fun fun_app$d (A_a_b_prod_fun$ A$ )A_b_prod$ )
(declare-fun fun_app$e (B_b_fun$ B$ )B$ )
(declare-fun fun_app$f (A_b_fun$ A$ )B$ )
(declare-fun fun_app$g (B_a_fun$ B$ )A$ )
(declare-fun fun_app$h (A_a_fun$ A$ )A$ )
(declare-fun fun_app$i (Nat_a_b_prod_fun$ Nat$ )A_b_prod$ )
(declare-fun fun_app$j (Nat_b_fun$ Nat$ )B$ )
(declare-fun fun_app$k (Nat_a_fun$ Nat$ )A$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun lfinite$b (A_b_prod_llist$ )Bool )
(declare-fun siterate$ (A_a_fun$ A$ )A_stream$ )
(declare-fun iterates$a (B_b_fun$ B$ )B_llist$ )
(declare-fun iterates$b (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_llist$ )
(declare-fun siterate$a (B_b_fun$ B$ )B_stream$ )
(declare-fun siterate$b (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_stream$ )
(declare-fun llist_of_stream$ (A_stream$ )A_llist$ )
(declare-fun stream_of_llist$ (A_llist$ )A_stream$ )
(declare-fun llist_of_stream$a (B_stream$ )B_llist$ )
(declare-fun llist_of_stream$b (A_b_prod_stream$ )A_b_prod_llist$ )
(declare-fun stream_of_llist$a (B_llist$ )B_stream$ )
(declare-fun stream_of_llist$b (A_b_prod_llist$ )A_b_prod_stream$ )
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ uua$ ?v0 )(snd$ ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$a uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$a uu$ ?v0 )))):named a1 ))
(assert (! (not (= (lzip$ (llist_of_stream$ xs$ )(llist_of_stream$a ys$ ))(llist_of_stream$b (szip$ xs$ ys$ )))):named a2 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (llist_of_stream$ ?v0 )(llist_of_stream$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (= (llist_of_stream$a ?v0 )(llist_of_stream$a ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_stream$ ))(= (= (llist_of_stream$b ?v0 )(llist_of_stream$b ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a6 ))
(assert (! (forall ((?v0 B_stream$ ))(= (stream_of_llist$a (llist_of_stream$a ?v0 ))?v0 )):named a7 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (stream_of_llist$b (llist_of_stream$b ?v0 ))?v0 )):named a8 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a9 ))
(assert (! (forall ((?v0 B_stream$ ))(= (stream_of_llist$a (llist_of_stream$a ?v0 ))?v0 )):named a10 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (stream_of_llist$b (llist_of_stream$b ?v0 ))?v0 )):named a11 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lnull$ (llist_of_stream$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 B_stream$ ))(not (lnull$a (llist_of_stream$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(not (lnull$b (llist_of_stream$b ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lfinite$ (llist_of_stream$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 B_stream$ ))(not (lfinite$a (llist_of_stream$a ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(not (lfinite$b (llist_of_stream$b ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (llist_of_stream$ (siterate$ ?v0 ?v1 ))(iterates$ ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (llist_of_stream$a (siterate$a ?v0 ?v1 ))(iterates$a ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ ))(= (llist_of_stream$b (siterate$b ?v0 ?v1 ))(iterates$b ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$ ?v0 ))(= (llist_of_stream$ (stream_of_llist$ ?v0 ))?v0 ))):named a21 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (not (lfinite$a ?v0 ))(= (llist_of_stream$a (stream_of_llist$a ?v0 ))?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(=> (not (lfinite$b ?v0 ))(= (llist_of_stream$b (stream_of_llist$b ?v0 ))?v0 ))):named a23 ))
(assert (! (forall ((?v0 A_stream$ ))(= (lnth$ (llist_of_stream$ ?v0 ))(snth$ ?v0 ))):named a24 ))
(assert (! (forall ((?v0 B_stream$ ))(= (lnth$a (llist_of_stream$a ?v0 ))(snth$a ?v0 ))):named a25 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (lnth$b (llist_of_stream$b ?v0 ))(snth$b ?v0 ))):named a26 ))
(assert (! (forall ((?v0 A_stream$ ))(= (lset$ (llist_of_stream$ ?v0 ))(sset$ ?v0 ))):named a27 ))
(assert (! (forall ((?v0 B_stream$ ))(= (lset$a (llist_of_stream$a ?v0 ))(sset$a ?v0 ))):named a28 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (lset$b (llist_of_stream$b ?v0 ))(sset$b ?v0 ))):named a29 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(= (lCons$a ?v0 (llist_of_stream$ ?v1 ))(llist_of_stream$ (sCons$ ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(= (lCons$b ?v0 (llist_of_stream$a ?v1 ))(llist_of_stream$a (sCons$a ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ ))(= (lCons$ ?v0 (llist_of_stream$b ?v1 ))(llist_of_stream$b (sCons$b ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_stream$ ))(= (smap$ uu$ (szip$ ?v0 ?v1 ))?v0 )):named a33 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_stream$ ))(= (smap$a uua$ (szip$ ?v0 ?v1 ))?v1 )):named a34 ))
(assert (! (forall ((?v0 A_stream$ ))(= (lhd$a (llist_of_stream$ ?v0 ))(shd$ ?v0 ))):named a35 ))
(assert (! (forall ((?v0 B_stream$ ))(= (lhd$b (llist_of_stream$a ?v0 ))(shd$a ?v0 ))):named a36 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (lhd$ (llist_of_stream$b ?v0 ))(shd$b ?v0 ))):named a37 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(= (shd$b (stream_of_llist$b ?v0 ))(lhd$ ?v0 ))):named a38 ))
(assert (! (forall ((?v0 B_llist$ ))(= (shd$a (stream_of_llist$a ?v0 ))(lhd$b ?v0 ))):named a39 ))
(assert (! (forall ((?v0 A_llist$ ))(= (shd$ (stream_of_llist$ ?v0 ))(lhd$a ?v0 ))):named a40 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (smap$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(exists ((?v4 A_b_prod$ )(?v5 A_b_prod_stream$ ))(and (= ?v1 (sCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$b ?v0 ?v4 ))(= ?v3 (smap$b ?v0 ?v5 ))))))):named a41 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (smap$c ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$c ?v0 ?v4 ))(= ?v3 (smap$c ?v0 ?v5 ))))))):named a42 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (smap$d ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$d ?v0 ?v4 ))(= ?v3 (smap$d ?v0 ?v5 ))))))):named a43 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 A_b_prod$ )(?v5 A_b_prod_stream$ ))(and (= ?v1 (sCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$ ?v0 ?v4 ))(= ?v3 (smap$a ?v0 ?v5 ))))))):named a44 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$e ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$e ?v0 ?v4 ))(= ?v3 (smap$e ?v0 ?v5 ))))))):named a45 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$f ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$f ?v0 ?v4 ))(= ?v3 (smap$f ?v0 ?v5 ))))))):named a46 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A_b_prod$ )(?v5 A_b_prod_stream$ ))(and (= ?v1 (sCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$a ?v0 ?v4 ))(= ?v3 (smap$ ?v0 ?v5 ))))))):named a47 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$g ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$g ?v0 ?v4 ))(= ?v3 (smap$g ?v0 ?v5 ))))))):named a48 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$h ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$h ?v0 ?v4 ))(= ?v3 (smap$h ?v0 ?v5 ))))))):named a49 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (fun_app$i (snth$b (smap$b ?v0 ?v1 ))?v2 )(fun_app$b ?v0 (fun_app$i (snth$b ?v1 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (fun_app$i (snth$b (smap$c ?v0 ?v1 ))?v2 )(fun_app$c ?v0 (fun_app$j (snth$a ?v1 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$i (snth$b (smap$d ?v0 ?v1 ))?v2 )(fun_app$d ?v0 (fun_app$k (snth$ ?v1 )?v2 )))):named a52 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (fun_app$j (snth$a (smap$e ?v0 ?v1 ))?v2 )(fun_app$e ?v0 (fun_app$j (snth$a ?v1 )?v2 )))):named a53 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$j (snth$a (smap$f ?v0 ?v1 ))?v2 )(fun_app$f ?v0 (fun_app$k (snth$ ?v1 )?v2 )))):named a54 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (fun_app$k (snth$ (smap$g ?v0 ?v1 ))?v2 )(fun_app$g ?v0 (fun_app$j (snth$a ?v1 )?v2 )))):named a55 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$k (snth$ (smap$h ?v0 ?v1 ))?v2 )(fun_app$h ?v0 (fun_app$k (snth$ ?v1 )?v2 )))):named a56 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (fun_app$k (snth$ (smap$ ?v0 ?v1 ))?v2 )(fun_app$a ?v0 (fun_app$i (snth$b ?v1 )?v2 )))):named a57 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (fun_app$j (snth$a (smap$a ?v0 ?v1 ))?v2 )(fun_app$ ?v0 (fun_app$i (snth$b ?v1 )?v2 )))):named a58 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ ))(= (shd$b (smap$b ?v0 ?v1 ))(fun_app$b ?v0 (shd$b ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ ))(= (shd$b (smap$c ?v0 ?v1 ))(fun_app$c ?v0 (shd$a ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ ))(= (shd$b (smap$d ?v0 ?v1 ))(fun_app$d ?v0 (shd$ ?v1 )))):named a61 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (shd$a (smap$e ?v0 ?v1 ))(fun_app$e ?v0 (shd$a ?v1 )))):named a62 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (shd$a (smap$f ?v0 ?v1 ))(fun_app$f ?v0 (shd$ ?v1 )))):named a63 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (shd$ (smap$g ?v0 ?v1 ))(fun_app$g ?v0 (shd$a ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$h ?v0 ?v1 ))(fun_app$h ?v0 (shd$ ?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$a ?v0 (shd$b ?v1 )))):named a66 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_stream$ ))(= (shd$a (smap$a ?v0 ?v1 ))(fun_app$ ?v0 (shd$b ?v1 )))):named a67 ))
(check-sat )
;(get-unsat-core )
