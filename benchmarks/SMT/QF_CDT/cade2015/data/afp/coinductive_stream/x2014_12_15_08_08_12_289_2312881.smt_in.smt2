;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_a_stream_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort Nat_a_stream_fun$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_stream_stream_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_stream_stream_a_fun$ 0 )
(declare-sort Nat_a_fun_nat_a_fun_fun$ 0 )
(declare-sort A_stream_stream_stream_set$ 0 )
(declare-sort A_a_prod_a_a_stream_prod_fun$ 0 )
(declare-sort A_a_prod_a_stream_a_prod_fun$ 0 )
(declare-sort A_a_stream_prod_a_a_prod_fun$ 0 )
(declare-sort A_stream_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_stream_a_stream_stream_fun$ 0 )
(declare-sort A_stream_stream_a_stream_fun$ 0 )
(declare-sort Nat_a_fun_nat_a_stream_fun_fun$ 0 )
(declare-sort Nat_a_stream_fun_nat_a_fun_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_fun$ 0 )
(declare-sort Nat_a_stream_fun_nat_a_stream_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (A_stream_stream$)A_stream$)
(declare-fun stl$a (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$a (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-datatypes ()((A_a_prod$ (pair$ (fst$ A$ )(snd$ A$ )))))
(declare-sort A_a_prod_stream$ 0)
(declare-sort A_stream_stream_stream$ 0)
(declare-sort A_llist$ 0)
(declare-fun shd$b (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$b (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$b (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-fun shd$c (A_stream_stream_stream$)A_stream_stream$)
(declare-fun stl$c (A_stream_stream_stream$)A_stream_stream_stream$)
(declare-fun sCons$c (A_stream_stream$ A_stream_stream_stream$ )A_stream_stream_stream$)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_a_stream_prod$ (pair$a (fst$a A$ )(snd$a A_stream$ )))))
(declare-sort A_a_stream_prod_stream$ 0)
(declare-fun shd$d (A_a_stream_prod_stream$)A_a_stream_prod$)
(declare-fun stl$d (A_a_stream_prod_stream$)A_a_stream_prod_stream$)
(declare-fun sCons$d (A_a_stream_prod$ A_a_stream_prod_stream$ )A_a_stream_prod_stream$)
(declare-datatypes ()((A_stream_a_prod$ (pair$b (fst$b A_stream$ )(snd$b A$ )))))
(declare-sort A_stream_a_prod_stream$ 0)
(declare-fun shd$e (A_stream_a_prod_stream$)A_stream_a_prod$)
(declare-fun stl$e (A_stream_a_prod_stream$)A_stream_a_prod_stream$)
(declare-fun sCons$e (A_stream_a_prod$ A_stream_a_prod_stream$ )A_stream_a_prod_stream$)
(declare-datatypes ()((A_a_a_prod_prod$ (pair$c (fst$c A$ )(snd$c A_a_prod$ )))))
(declare-sort A_a_a_prod_prod_stream$ 0)
(declare-fun shd$f (A_a_a_prod_prod_stream$)A_a_a_prod_prod$)
(declare-fun stl$f (A_a_a_prod_prod_stream$)A_a_a_prod_prod_stream$)
(declare-fun sCons$f (A_a_a_prod_prod$ A_a_a_prod_prod_stream$ )A_a_a_prod_prod_stream$)
(declare-datatypes ()((A_a_prod_a_prod$ (pair$d (fst$d A_a_prod$ )(snd$d A$ )))))
(declare-sort A_a_prod_a_prod_stream$ 0)
(declare-fun shd$g (A_a_prod_a_prod_stream$)A_a_prod_a_prod$)
(declare-fun stl$g (A_a_prod_a_prod_stream$)A_a_prod_a_prod_stream$)
(declare-fun sCons$g (A_a_prod_a_prod$ A_a_prod_a_prod_stream$ )A_a_prod_a_prod_stream$)
(declare-datatypes ()((A_a_prod_a_a_prod_prod$ (pair$e (fst$e A_a_prod$ )(snd$e A_a_prod$ )))))
(declare-sort A_a_prod_a_a_prod_prod_stream$ 0)
(declare-fun shd$h (A_a_prod_a_a_prod_prod_stream$)A_a_prod_a_a_prod_prod$)
(declare-fun stl$h (A_a_prod_a_a_prod_prod_stream$)A_a_prod_a_a_prod_prod_stream$)
(declare-fun sCons$h (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_stream$ )A_a_prod_a_a_prod_prod_stream$)
(declare-fun f$ ()A_a_fun$ )
(declare-fun x$ ()A$ )
(declare-fun id$ ()A_a_fun$ )
(declare-fun id$a ()A_stream_a_stream_fun$ )
(declare-fun comp$ (A_stream_a_stream_fun$ )Nat_a_stream_fun_nat_a_stream_fun_fun$ )
(declare-fun smap$ (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun snth$ (A_stream_stream$ )Nat_a_stream_fun$ )
(declare-fun szip$ (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun apfst$ (A_a_fun$ )A_a_prod_a_a_prod_fun$ )
(declare-fun apsnd$ (A_a_fun$ )A_a_prod_a_a_prod_fun$ )
(declare-fun comp$a (A_stream_a_fun$ )Nat_a_stream_fun_nat_a_fun_fun$ )
(declare-fun comp$b (A_a_stream_fun$ )Nat_a_fun_nat_a_stream_fun_fun$ )
(declare-fun comp$c (A_a_fun$ )Nat_a_fun_nat_a_fun_fun$ )
(declare-fun sdrop$ (Nat$ )A_stream_a_stream_fun$ )
(declare-fun smap$a (A_stream_a_stream_fun$ )A_stream_stream_a_stream_stream_fun$ )
(declare-fun smap$b (A_a_stream_fun$ )A_stream_a_stream_stream_fun$ )
(declare-fun smap$c (A_stream_a_fun$ )A_stream_stream_a_stream_fun$ )
(declare-fun smap$d (A_a_prod_a_fun$ A_a_prod_stream$ )A_stream$ )
(declare-fun smap$e (A_a_a_prod_fun$ A_stream$ )A_a_prod_stream$ )
(declare-fun smap$f (A_a_prod_a_a_prod_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap$g (A_stream_stream_a_stream_stream_fun$ A_stream_stream_stream$ )A_stream_stream_stream$ )
(declare-fun smap$h (A_stream_stream_a_fun$ A_stream_stream_stream$ )A_stream$ )
(declare-fun smap$i (A_stream_stream_a_stream_fun$ A_stream_stream_stream$ )A_stream_stream$ )
(declare-fun smap$j (A_a_stream_stream_fun$ A_stream$ )A_stream_stream_stream$ )
(declare-fun smap$k (A_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream_stream$ )
(declare-fun smap$l (A_a_prod_a_a_stream_prod_fun$ A_a_prod_stream$ )A_a_stream_prod_stream$ )
(declare-fun smap$m (A_a_stream_prod_a_a_prod_fun$ A_a_stream_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap$n (A_a_prod_a_stream_a_prod_fun$ A_a_prod_stream$ )A_stream_a_prod_stream$ )
(declare-fun smap$o (A_stream_a_prod_a_a_prod_fun$ A_stream_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun snth$a (A_stream$ )Nat_a_fun$ )
(declare-fun snth$b (A_a_prod_stream$ Nat$ )A_a_prod$ )
(declare-fun szip$a (A_stream$ A_stream_stream$ )A_a_stream_prod_stream$ )
(declare-fun szip$b (A_stream_stream$ A_stream$ )A_stream_a_prod_stream$ )
(declare-fun szip$c (A_stream$ A_a_prod_stream$ )A_a_a_prod_prod_stream$ )
(declare-fun szip$d (A_a_prod_stream$ A_stream$ )A_a_prod_a_prod_stream$ )
(declare-fun szip$e (A_a_prod_stream$ A_a_prod_stream$ )A_a_prod_a_a_prod_prod_stream$ )
(declare-fun apfst$a (A_a_stream_fun$ )A_a_prod_a_stream_a_prod_fun$ )
(declare-fun apfst$b (A_stream_a_fun$ )A_stream_a_prod_a_a_prod_fun$ )
(declare-fun apsnd$a (A_a_stream_fun$ )A_a_prod_a_a_stream_prod_fun$ )
(declare-fun apsnd$b (A_stream_a_fun$ )A_a_stream_prod_a_a_prod_fun$ )
(declare-fun member$ (A_stream_stream_stream$ A_stream_stream_stream_set$ )Bool )
(declare-fun of_seq$ (Nat_a_stream_fun$ )A_stream_stream$ )
(declare-fun sdrop$a (Nat$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun sdrop$b (Nat$ )A_stream_stream_a_stream_stream_fun$ )
(declare-fun sdrop$c (Nat$ A_a_a_prod_prod_stream$ )A_a_a_prod_prod_stream$ )
(declare-fun sdrop$d (Nat$ A_a_prod_a_prod_stream$ )A_a_prod_a_prod_stream$ )
(declare-fun sdrop$e (Nat$ A_a_prod_a_a_prod_prod_stream$ )A_a_prod_a_a_prod_prod_stream$ )
(declare-fun fun_app$ (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun member$a (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$b (A$ A_set$ )Bool )
(declare-fun member$c (A_stream$ A_stream_set$ )Bool )
(declare-fun of_seq$a (Nat_a_fun$ )A_stream$ )
(declare-fun streams$ (A_stream_stream_set$ )A_stream_stream_stream_set$ )
(declare-fun fun_app$a (A_a_stream_fun$ A$ )A_stream$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_stream_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream$ )
(declare-fun fun_app$d (A_stream_a_stream_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun fun_app$e (A_stream_stream_a_stream_fun$ A_stream_stream$ )A_stream$ )
(declare-fun fun_app$f (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$g (Nat_a_stream_fun$ Nat$ )A_stream$ )
(declare-fun fun_app$h (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$i (A_stream_stream_a_fun$ A_stream_stream$ )A$ )
(declare-fun fun_app$j (A_a_stream_stream_fun$ A$ )A_stream_stream$ )
(declare-fun fun_app$k (Nat_a_stream_fun_nat_a_stream_fun_fun$ Nat_a_stream_fun$ )Nat_a_stream_fun$ )
(declare-fun fun_app$l (Nat_a_stream_fun_nat_a_fun_fun$ Nat_a_stream_fun$ )Nat_a_fun$ )
(declare-fun fun_app$m (Nat_a_fun_nat_a_stream_fun_fun$ Nat_a_fun$ )Nat_a_stream_fun$ )
(declare-fun fun_app$n (Nat_a_fun_nat_a_fun_fun$ Nat_a_fun$ )Nat_a_fun$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun siterate$ (A_a_fun$ )A_a_stream_fun$ )
(declare-fun streams$a (A_set$ )A_stream_set$ )
(declare-fun streams$b (A_stream_set$ )A_stream_stream_set$ )
(declare-fun siterate$a (A_stream_a_stream_fun$ )A_stream_a_stream_stream_fun$ )
(declare-fun llist_of_stream$ (A_stream$ )A_llist$ )
(assert (! (not (= (fun_app$ (smap$ f$ )(fun_app$a (siterate$ f$ )x$ ))(fun_app$a (siterate$ f$ )(fun_app$b f$ x$ )))):named a0 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ ))(= (fun_app$c (smap$a ?v0 )(fun_app$d (siterate$a ?v0 )?v1 ))(fun_app$d (siterate$a ?v0 )(fun_app$ ?v0 ?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$ (smap$ ?v0 )(fun_app$a (siterate$ ?v0 )?v1 ))(fun_app$a (siterate$ ?v0 )(fun_app$b ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A$ ))(= (fun_app$d (smap$b ?v0 )(fun_app$a (siterate$ id$ )?v1 ))(fun_app$d (siterate$a id$a )(fun_app$a ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream$ ))(= (fun_app$e (smap$c ?v0 )(fun_app$d (siterate$a id$a )?v1 ))(fun_app$a (siterate$ id$ )(fun_app$f ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ ))(= (fun_app$c (smap$a ?v0 )(fun_app$d (siterate$a id$a )?v1 ))(fun_app$d (siterate$a id$a )(fun_app$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$ (smap$ ?v0 )(fun_app$a (siterate$ id$ )?v1 ))(fun_app$a (siterate$ id$ )(fun_app$b ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$a (siterate$ ?v0 )?v1 )(sCons$ ?v1 (fun_app$a (siterate$ ?v0 )(fun_app$b ?v0 ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ )(?v3 A_stream_stream$ ))(= (= (fun_app$c (smap$a ?v0 )?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 A_stream$ )(?v5 A_stream_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$ ?v0 ?v4 ))(= ?v3 (fun_app$c (smap$a ?v0 )?v5 ))))))):named a8 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_stream_stream$ ))(= (= (fun_app$d (smap$b ?v0 )?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$a ?v0 ?v4 ))(= ?v3 (fun_app$d (smap$b ?v0 )?v5 ))))))):named a9 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (fun_app$e (smap$c ?v0 )?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A_stream$ )(?v5 A_stream_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$f ?v0 ?v4 ))(= ?v3 (fun_app$e (smap$c ?v0 )?v5 ))))))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (fun_app$ (smap$ ?v0 )?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$b ?v0 ?v4 ))(= ?v3 (fun_app$ (smap$ ?v0 )?v5 ))))))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_fun$ )(?v2 A_a_prod_stream$ ))(= (fun_app$ (sdrop$ ?v0 )(smap$d ?v1 ?v2 ))(smap$d ?v1 (sdrop$a ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_fun$ )(?v2 A_stream$ ))(= (sdrop$a ?v0 (smap$e ?v1 ?v2 ))(smap$e ?v1 (fun_app$ (sdrop$ ?v0 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_prod_fun$ )(?v2 A_a_prod_stream$ ))(= (sdrop$a ?v0 (smap$f ?v1 ?v2 ))(smap$f ?v1 (sdrop$a ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_stream_fun$ )(?v2 A_stream$ ))(= (fun_app$c (sdrop$b ?v0 )(fun_app$d (smap$b ?v1 )?v2 ))(fun_app$d (smap$b ?v1 )(fun_app$ (sdrop$ ?v0 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_a_fun$ )(?v2 A_stream_stream$ ))(= (fun_app$ (sdrop$ ?v0 )(fun_app$e (smap$c ?v1 )?v2 ))(fun_app$e (smap$c ?v1 )(fun_app$c (sdrop$b ?v0 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream_stream$ ))(= (fun_app$c (sdrop$b ?v0 )(fun_app$c (smap$a ?v1 )?v2 ))(fun_app$c (smap$a ?v1 )(fun_app$c (sdrop$b ?v0 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (fun_app$ (sdrop$ ?v0 )(fun_app$ (smap$ ?v1 )?v2 ))(fun_app$ (smap$ ?v1 )(fun_app$ (sdrop$ ?v0 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$g (snth$ (fun_app$d (smap$b ?v0 )?v1 ))?v2 )(fun_app$a ?v0 (fun_app$h (snth$a ?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$h (snth$a (fun_app$e (smap$c ?v0 )?v1 ))?v2 )(fun_app$f ?v0 (fun_app$g (snth$ ?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$g (snth$ (fun_app$c (smap$a ?v0 )?v1 ))?v2 )(fun_app$ ?v0 (fun_app$g (snth$ ?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$h (snth$a (fun_app$ (smap$ ?v0 )?v1 ))?v2 )(fun_app$b ?v0 (fun_app$h (snth$a ?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ )(?v2 A_stream_stream_a_stream_stream_fun$ )(?v3 A_stream_stream_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 A_stream_stream$ ))(=> (member$a ?v4 ?v1 )(member$a (fun_app$c ?v2 ?v4 )?v3 ))))(member$ (smap$g ?v2 ?v0 )(streams$ ?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ )(?v2 A_stream_stream_a_fun$ )(?v3 A_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 A_stream_stream$ ))(=> (member$a ?v4 ?v1 )(member$b (fun_app$i ?v2 ?v4 )?v3 ))))(member$c (smap$h ?v2 ?v0 )(streams$a ?v3 )))):named a24 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ )(?v2 A_stream_stream_a_stream_fun$ )(?v3 A_stream_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 A_stream_stream$ ))(=> (member$a ?v4 ?v1 )(member$c (fun_app$e ?v2 ?v4 )?v3 ))))(member$a (smap$i ?v2 ?v0 )(streams$b ?v3 )))):named a25 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 A_a_stream_stream_fun$ )(?v3 A_stream_stream_set$ ))(=> (and (member$c ?v0 (streams$a ?v1 ))(forall ((?v4 A$ ))(=> (member$b ?v4 ?v1 )(member$a (fun_app$j ?v2 ?v4 )?v3 ))))(member$ (smap$j ?v2 ?v0 )(streams$ ?v3 )))):named a26 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 A_stream_a_stream_stream_fun$ )(?v3 A_stream_stream_set$ ))(=> (and (member$a ?v0 (streams$b ?v1 ))(forall ((?v4 A_stream$ ))(=> (member$c ?v4 ?v1 )(member$a (fun_app$d ?v2 ?v4 )?v3 ))))(member$ (smap$k ?v2 ?v0 )(streams$ ?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 A_stream_a_stream_fun$ )(?v3 A_stream_set$ ))(=> (and (member$a ?v0 (streams$b ?v1 ))(forall ((?v4 A_stream$ ))(=> (member$c ?v4 ?v1 )(member$c (fun_app$ ?v2 ?v4 )?v3 ))))(member$a (fun_app$c (smap$a ?v2 )?v0 )(streams$b ?v3 )))):named a28 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 A_stream_a_fun$ )(?v3 A_set$ ))(=> (and (member$a ?v0 (streams$b ?v1 ))(forall ((?v4 A_stream$ ))(=> (member$c ?v4 ?v1 )(member$b (fun_app$f ?v2 ?v4 )?v3 ))))(member$c (fun_app$e (smap$c ?v2 )?v0 )(streams$a ?v3 )))):named a29 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 A_a_stream_fun$ )(?v3 A_stream_set$ ))(=> (and (member$c ?v0 (streams$a ?v1 ))(forall ((?v4 A$ ))(=> (member$b ?v4 ?v1 )(member$c (fun_app$a ?v2 ?v4 )?v3 ))))(member$a (fun_app$d (smap$b ?v2 )?v0 )(streams$b ?v3 )))):named a30 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 A_a_fun$ )(?v3 A_set$ ))(=> (and (member$c ?v0 (streams$a ?v1 ))(forall ((?v4 A$ ))(=> (member$b ?v4 ?v1 )(member$b (fun_app$b ?v2 ?v4 )?v3 ))))(member$c (fun_app$ (smap$ ?v2 )?v0 )(streams$a ?v3 )))):named a31 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (llist_of_stream$ (fun_app$a (siterate$ ?v0 )?v1 ))(iterates$ ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (szip$ ?v0 (fun_app$ (smap$ ?v1 )?v2 ))(smap$f (apsnd$ ?v1 )(szip$ ?v0 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_stream_fun$ )(?v2 A_stream$ ))(= (szip$a ?v0 (fun_app$d (smap$b ?v1 )?v2 ))(smap$l (apsnd$a ?v1 )(szip$ ?v0 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_a_fun$ )(?v2 A_stream_stream$ ))(= (szip$ ?v0 (fun_app$e (smap$c ?v1 )?v2 ))(smap$m (apsnd$b ?v1 )(szip$a ?v0 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (szip$ (fun_app$ (smap$ ?v0 )?v1 )?v2 )(smap$f (apfst$ ?v0 )(szip$ ?v1 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (szip$b (fun_app$d (smap$b ?v0 )?v1 )?v2 )(smap$n (apfst$a ?v0 )(szip$ ?v1 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ ))(= (szip$ (fun_app$e (smap$c ?v0 )?v1 )?v2 )(smap$o (apfst$b ?v0 )(szip$b ?v1 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ ))(= (shd$a (fun_app$d (smap$b ?v0 )?v1 ))(fun_app$a ?v0 (shd$ ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ ))(= (shd$ (fun_app$e (smap$c ?v0 )?v1 ))(fun_app$f ?v0 (shd$a ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ ))(= (shd$a (fun_app$c (smap$a ?v0 )?v1 ))(fun_app$ ?v0 (shd$a ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (fun_app$ (smap$ ?v0 )?v1 ))(fun_app$b ?v0 (shd$ ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 Nat_a_stream_fun$ ))(= (fun_app$c (smap$a ?v0 )(of_seq$ ?v1 ))(of_seq$ (fun_app$k (comp$ ?v0 )?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 Nat_a_stream_fun$ ))(= (fun_app$e (smap$c ?v0 )(of_seq$ ?v1 ))(of_seq$a (fun_app$l (comp$a ?v0 )?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 Nat_a_fun$ ))(= (fun_app$d (smap$b ?v0 )(of_seq$a ?v1 ))(of_seq$ (fun_app$m (comp$b ?v0 )?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 Nat_a_fun$ ))(= (fun_app$ (smap$ ?v0 )(of_seq$a ?v1 ))(of_seq$a (fun_app$n (comp$c ?v0 )?v1 )))):named a46 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ ))(= (sdrop$c ?v0 (szip$c ?v1 ?v2 ))(szip$c (fun_app$ (sdrop$ ?v0 )?v1 )(sdrop$a ?v0 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ ))(= (sdrop$d ?v0 (szip$d ?v1 ?v2 ))(szip$d (sdrop$a ?v0 ?v1 )(fun_app$ (sdrop$ ?v0 )?v2 )))):named a49 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(= (sdrop$e ?v0 (szip$e ?v1 ?v2 ))(szip$e (sdrop$a ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (sdrop$a ?v0 (szip$ ?v1 ?v2 ))(szip$ (fun_app$ (sdrop$ ?v0 )?v1 )(fun_app$ (sdrop$ ?v0 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(= (snth$a (of_seq$a ?v0 ))?v0 )):named a52 ))
(assert (! (forall ((?v0 A_stream$ ))(= (of_seq$a (snth$a ?v0 ))?v0 )):named a53 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ ))(= (shd$b (sdrop$a ?v0 ?v1 ))(snth$b ?v1 ?v0 ))):named a54 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$ (fun_app$ (sdrop$ ?v0 )?v1 ))(fun_app$h (snth$a ?v1 )?v0 ))):named a55 ))
(check-sat )
;(get-unsat-core )
