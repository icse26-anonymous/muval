;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_stream_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_a_stream_stream_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_stream_stream_a_fun$ 0 )
(declare-sort A_stream_a_stream_stream_fun$ 0 )
(declare-sort A_stream_stream_a_stream_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_fun$ 0 )
(declare-sort A_stream_stream_stream_a_stream_stream_stream_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-sort A_stream_stream_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (A_stream_stream$)A_stream$)
(declare-fun stl$a (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$a (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-fun shd$b (A_stream_stream_stream$)A_stream_stream$)
(declare-fun stl$b (A_stream_stream_stream$)A_stream_stream_stream$)
(declare-fun sCons$b (A_stream_stream$ A_stream_stream_stream$ )A_stream_stream_stream$)
(declare-fun f$ ()A_a_fun$ )
(declare-fun x$ ()A$ )
(declare-fun id$ ()A_stream_stream_a_stream_stream_fun$ )
(declare-fun id$a ()A_a_fun$ )
(declare-fun id$b ()A_stream_a_stream_fun$ )
(declare-fun id$c ()A_stream_stream_stream_a_stream_stream_stream_fun$ )
(declare-fun smap$ (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun smap$a (A_stream_a_stream_fun$ )A_stream_stream_a_stream_stream_fun$ )
(declare-fun smap$b (A_a_stream_fun$ )A_stream_a_stream_stream_fun$ )
(declare-fun smap$c (A_stream_a_fun$ )A_stream_stream_a_stream_fun$ )
(declare-fun smap$d (A_stream_stream_a_stream_stream_fun$ )A_stream_stream_stream_a_stream_stream_stream_fun$ )
(declare-fun smap$e (A_stream_stream_a_fun$ A_stream_stream_stream$ )A_stream$ )
(declare-fun smap$f (A_stream_stream_a_stream_fun$ A_stream_stream_stream$ )A_stream_stream$ )
(declare-fun smap$g (A_a_stream_stream_fun$ A_stream$ )A_stream_stream_stream$ )
(declare-fun smap$h (A_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream_stream$ )
(declare-fun fun_app$ (A_a_stream_fun$ A$ )A_stream$ )
(declare-fun smember$ (A$ A_stream$ )Bool )
(declare-fun fun_app$a (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$b (A_stream_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream$ )
(declare-fun fun_app$c (A_stream_a_stream_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun fun_app$e (A_stream_stream_a_stream_fun$ A_stream_stream$ )A_stream$ )
(declare-fun fun_app$f (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$g (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$h (A_stream_stream_stream_a_stream_stream_stream_fun$ A_stream_stream_stream$ )A_stream_stream_stream$ )
(declare-fun fun_app$i (A_stream_stream_a_fun$ A_stream_stream$ )A$ )
(declare-fun fun_app$j (A_a_stream_stream_fun$ A$ )A_stream_stream$ )
(declare-fun siterate$ (A_a_fun$ )A_a_stream_fun$ )
(declare-fun streamsp$ (A_bool_fun$ A_stream$ )Bool )
(declare-fun siterate$a (A_stream_a_stream_fun$ )A_stream_a_stream_stream_fun$ )
(declare-fun siterate$b (A_stream_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream_stream$ )
(declare-fun stream_all$ (A_bool_fun$ A_stream$ )Bool )
(declare-fun pred_stream$ (A_bool_fun$ A_stream$ )Bool )
(assert (! (not (= (fun_app$ (siterate$ f$ )x$ )(sCons$ x$ (fun_app$a (smap$ f$ )(fun_app$ (siterate$ f$ )x$ ))))):named a0 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ ))(= (fun_app$b (smap$a ?v0 )(fun_app$c (siterate$a ?v0 )?v1 ))(fun_app$c (siterate$a ?v0 )(fun_app$a ?v0 ?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$a (smap$ ?v0 )(fun_app$ (siterate$ ?v0 )?v1 ))(fun_app$ (siterate$ ?v0 )(fun_app$d ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ ))(= (fun_app$c (siterate$a ?v0 )?v1 )(sCons$a ?v1 (fun_app$c (siterate$a ?v0 )(fun_app$a ?v0 ?v1 ))))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$ (siterate$ ?v0 )?v1 )(sCons$ ?v1 (fun_app$ (siterate$ ?v0 )(fun_app$d ?v0 ?v1 ))))):named a4 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ )(?v3 A_stream_stream$ ))(= (= (fun_app$b (smap$a ?v0 )?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 A_stream$ )(?v5 A_stream_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$a ?v0 ?v4 ))(= ?v3 (fun_app$b (smap$a ?v0 )?v5 ))))))):named a5 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_stream_stream$ ))(= (= (fun_app$c (smap$b ?v0 )?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$ ?v0 ?v4 ))(= ?v3 (fun_app$c (smap$b ?v0 )?v5 ))))))):named a6 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (fun_app$e (smap$c ?v0 )?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A_stream$ )(?v5 A_stream_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$f ?v0 ?v4 ))(= ?v3 (fun_app$e (smap$c ?v0 )?v5 ))))))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (fun_app$a (smap$ ?v0 )?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$d ?v0 ?v4 ))(= ?v3 (fun_app$a (smap$ ?v0 )?v5 ))))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ ))(! (= (fun_app$b (smap$a ?v0 )(sCons$a ?v1 ?v2 ))(sCons$a (fun_app$a ?v0 ?v1 )(fun_app$b (smap$a ?v0 )?v2 ))):pattern ((fun_app$b (smap$a ?v0 )(sCons$a ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ ))(! (= (fun_app$e (smap$c ?v0 )(sCons$a ?v1 ?v2 ))(sCons$ (fun_app$f ?v0 ?v1 )(fun_app$e (smap$c ?v0 )?v2 ))):pattern ((fun_app$e (smap$c ?v0 )(sCons$a ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$c (smap$b ?v0 )(sCons$ ?v1 ?v2 ))(sCons$a (fun_app$ ?v0 ?v1 )(fun_app$c (smap$b ?v0 )?v2 ))):pattern ((fun_app$c (smap$b ?v0 )(sCons$ ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$a (smap$ ?v0 )(sCons$ ?v1 ?v2 ))(sCons$ (fun_app$d ?v0 ?v1 )(fun_app$a (smap$ ?v0 )?v2 ))):pattern ((fun_app$a (smap$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smember$ ?v0 (sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$ ?v0 ?v2 ))):pattern ((smember$ ?v0 (sCons$ ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (pred_stream$ ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$g ?v0 ?v1 )(pred_stream$ ?v0 ?v2 ))):pattern ((pred_stream$ ?v0 (sCons$ ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$ )(?v1 A_stream_stream$ ))(= (fun_app$h (smap$d ?v0 )(siterate$b id$ ?v1 ))(siterate$b id$ (fun_app$b ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_stream_stream_a_fun$ )(?v1 A_stream_stream$ ))(= (smap$e ?v0 (siterate$b id$ ?v1 ))(fun_app$ (siterate$ id$a )(fun_app$i ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$ )(?v1 A_stream_stream$ ))(= (smap$f ?v0 (siterate$b id$ ?v1 ))(fun_app$c (siterate$a id$b )(fun_app$e ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_a_stream_stream_fun$ )(?v1 A$ ))(= (smap$g ?v0 (fun_app$ (siterate$ id$a )?v1 ))(siterate$b id$ (fun_app$j ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$ )(?v1 A_stream$ ))(= (smap$h ?v0 (fun_app$c (siterate$a id$b )?v1 ))(siterate$b id$ (fun_app$c ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ ))(= (fun_app$b (smap$a ?v0 )(fun_app$c (siterate$a id$b )?v1 ))(fun_app$c (siterate$a id$b )(fun_app$a ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream$ ))(= (fun_app$e (smap$c ?v0 )(fun_app$c (siterate$a id$b )?v1 ))(fun_app$ (siterate$ id$a )(fun_app$f ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A$ ))(= (fun_app$c (smap$b ?v0 )(fun_app$ (siterate$ id$a )?v1 ))(fun_app$c (siterate$a id$b )(fun_app$ ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$a (smap$ ?v0 )(fun_app$ (siterate$ id$a )?v1 ))(fun_app$ (siterate$ id$a )(fun_app$d ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (stream_all$ ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$g ?v0 ?v1 )(stream_all$ ?v0 ?v2 ))):pattern ((stream_all$ ?v0 (sCons$ ?v1 ?v2 ))))):named a26 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (streamsp$ ?v0 ?v1 )(exists ((?v2 A$ )(?v3 A_stream$ ))(and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$g ?v0 ?v2 )(streamsp$ ?v0 ?v3 )))))):named a27 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(=> (and (streamsp$ ?v0 ?v1 )(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$g ?v0 ?v2 )(streamsp$ ?v0 ?v3 )))false )))false )):named a28 ))
(assert (! (= (smap$d id$ )id$c ):named a29 ))
(assert (! (= (smap$a id$b )id$ ):named a30 ))
(assert (! (= (smap$ id$a )id$b ):named a31 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ ))(= (fun_app$h (smap$d id$ )?v0 )?v0 )):named a32 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= (fun_app$b (smap$a id$b )?v0 )?v0 )):named a33 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$a (smap$ id$a )?v0 )?v0 )):named a34 ))
(check-sat )
;(get-unsat-core )
