;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_llist_a_stream_fun$ 0 )
(declare-sort A_stream_a_llist_fun$ 0 )
(declare-sort A_llist_a_stream_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_stream$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun uu$ ()A_llist_bool_fun$ )
(declare-fun uua$ (A_stream_a_llist_fun$ )A_llist_a_stream_bool_fun_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$b (A_llist_a_stream_bool_fun_fun$ A_llist$ )A_stream_bool_fun$ )
(declare-fun fun_app$c (A_stream_a_llist_fun$ A_stream$ )A_llist$ )
(declare-fun fun_app$d (A_llist_a_stream_fun$ A_llist$ )A_stream$ )
(declare-fun left_unique$ (A_llist_a_stream_bool_fun_fun$ )Bool )
(declare-fun right_unique$ (A_llist_a_stream_bool_fun_fun$ )Bool )
(declare-fun llist_of_stream$ ()A_stream_a_llist_fun$ )
(declare-fun stream_of_llist$ ()A_llist_a_stream_fun$ )
(declare-fun type_definition$ (A_stream_a_llist_fun$ A_llist_a_stream_fun$ A_llist_set$ )Bool )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uu$ ?v0 )(not (lfinite$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist$ )(?v2 A_stream$ ))(! (= (fun_app$a (fun_app$b (uua$ ?v0 )?v1 )?v2 )(= ?v1 (fun_app$c ?v0 ?v2 ))):pattern ((fun_app$a (fun_app$b (uua$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (not (type_definition$ llist_of_stream$ stream_of_llist$ (collect$ uu$ ))):named a2 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$d stream_of_llist$ (fun_app$c llist_of_stream$ ?v0 ))?v0 )):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$ ?v0 ))(= (fun_app$c llist_of_stream$ (fun_app$d stream_of_llist$ ?v0 ))?v0 ))):named a4 ))
(assert (! (type_definition$ llist_of_stream$ stream_of_llist$ (collect$ uu$ )):named a5 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lfinite$ (fun_app$c llist_of_stream$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist_a_stream_fun$ )(?v2 A_llist_set$ )(?v3 A_stream_bool_fun$ )(?v4 A_stream$ ))(=> (and (type_definition$ ?v0 ?v1 ?v2 )(forall ((?v5 A_llist$ ))(=> (member$ ?v5 ?v2 )(fun_app$a ?v3 (fun_app$d ?v1 ?v5 )))))(fun_app$a ?v3 ?v4 ))):named a7 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist_a_stream_fun$ )(?v2 A_llist_set$ )(?v3 A_stream$ ))(=> (and (type_definition$ ?v0 ?v1 ?v2 )(forall ((?v4 A_llist$ ))(=> (and (= ?v3 (fun_app$d ?v1 ?v4 ))(member$ ?v4 ?v2 ))false )))false )):named a8 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist_a_stream_fun$ )(?v2 A_llist_set$ )(?v3 A_llist$ )(?v4 A_llist_bool_fun$ ))(=> (and (type_definition$ ?v0 ?v1 ?v2 )(and (member$ ?v3 ?v2 )(forall ((?v5 A_stream$ ))(fun_app$ ?v4 (fun_app$c ?v0 ?v5 )))))(fun_app$ ?v4 ?v3 ))):named a9 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist_a_stream_fun$ )(?v2 A_llist_set$ )(?v3 A_llist$ ))(=> (and (type_definition$ ?v0 ?v1 ?v2 )(and (member$ ?v3 ?v2 )(forall ((?v4 A_stream$ ))(=> (= ?v3 (fun_app$c ?v0 ?v4 ))false ))))false )):named a10 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist_a_stream_fun$ )(?v2 A_llist_set$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (type_definition$ ?v0 ?v1 ?v2 )(and (member$ ?v3 ?v2 )(member$ ?v4 ?v2 )))(= (= (fun_app$d ?v1 ?v3 )(fun_app$d ?v1 ?v4 ))(= ?v3 ?v4 )))):named a11 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist_a_stream_fun$ )(?v2 A_llist_set$ )(?v3 A_llist$ ))(=> (and (type_definition$ ?v0 ?v1 ?v2 )(member$ ?v3 ?v2 ))(= (fun_app$c ?v0 (fun_app$d ?v1 ?v3 ))?v3 ))):named a12 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist_a_stream_fun$ )(?v2 A_llist_set$ )(?v3 A_stream$ )(?v4 A_stream$ ))(=> (type_definition$ ?v0 ?v1 ?v2 )(= (= (fun_app$c ?v0 ?v3 )(fun_app$c ?v0 ?v4 ))(= ?v3 ?v4 )))):named a13 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist_a_stream_fun$ )(?v2 A_llist_set$ )(?v3 A_stream$ ))(=> (type_definition$ ?v0 ?v1 ?v2 )(= (fun_app$d ?v1 (fun_app$c ?v0 ?v3 ))?v3 ))):named a14 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist_a_stream_fun$ )(?v2 A_llist_set$ )(?v3 A_stream$ ))(=> (type_definition$ ?v0 ?v1 ?v2 )(member$ (fun_app$c ?v0 ?v3 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lnull$ (fun_app$c llist_of_stream$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist_a_stream_fun$ )(?v2 A_llist_set$ )(?v3 A_llist_a_stream_bool_fun_fun$ ))(=> (and (type_definition$ ?v0 ?v1 ?v2 )(= ?v3 (uua$ ?v0 )))(left_unique$ ?v3 ))):named a17 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_llist_a_stream_fun$ )(?v2 A_llist_set$ )(?v3 A_llist_a_stream_bool_fun_fun$ ))(=> (and (type_definition$ ?v0 ?v1 ?v2 )(= ?v3 (uua$ ?v0 )))(right_unique$ ?v3 ))):named a18 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(lfinite$ ?v0 ))):named a19 ))
(check-sat )
;(get-unsat-core )
