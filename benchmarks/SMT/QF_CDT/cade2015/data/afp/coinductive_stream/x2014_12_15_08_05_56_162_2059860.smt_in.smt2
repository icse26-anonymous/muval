;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort B_a_llist_fun$ 0 )
(declare-sort A_a_stream_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_stream_b_fun$ 0 )
(declare-sort B_a_stream_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_llist_a_stream_fun$ 0 )
(declare-sort A_stream_a_llist_fun$ 0 )
(declare-sort B_a_llist_stream_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort B_a_stream_stream_fun$ 0 )
(declare-sort A_a_fun_a_a_llist_fun_fun$ 0 )
(declare-sort A_a_llist_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_llist_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_llist_fun_fun$ 0 )
(declare-sort B_a_llist_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_llist_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_stream_fun_fun$ 0 )
(declare-sort A_a_stream_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_stream_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_stream_fun_fun$ 0 )
(declare-sort B_a_stream_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_stream_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_stream_fun_fun$ 0 )
(declare-sort B_a_llist_fun_b_a_llist_fun_fun$ 0 )
(declare-sort B_a_llist_fun_b_a_stream_fun_fun$ 0 )
(declare-sort B_a_stream_fun_b_a_llist_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_llist_stream_fun_fun$ 0 )
(declare-sort B_a_stream_fun_b_a_stream_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_stream_stream_fun_fun$ 0 )
(declare-sort A_stream_stream_a_llist_stream_fun$ 0 )
(declare-sort A_stream_b_fun_a_stream_a_llist_fun_fun$ 0 )
(declare-sort A_stream_b_fun_a_stream_a_stream_fun_fun$ 0 )
(declare-sort B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$ 0 )
(declare-sort A_stream_a_llist_fun_a_stream_a_llist_fun_fun$ 0 )
(declare-sort B_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun_a_stream_a_llist_fun_fun$ 0 )
(declare-sort B_a_stream_stream_fun_b_a_llist_stream_fun_fun$ 0 )
(declare-sort B_a_llist_stream_fun_b_b_fun_b_a_llist_stream_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$ 0 )
(declare-sort B_a_stream_stream_fun_b_b_fun_b_a_stream_stream_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_a_llist_stream_fun_b_b_fun_b_a_llist_stream_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_a_stream_stream_fun_b_b_fun_b_a_stream_stream_fun_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-sort A_llist_stream$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (A_stream_stream$)A_stream$)
(declare-fun stl$a (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$a (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-fun shd$b (A_llist_stream$)A_llist$)
(declare-fun stl$b (A_llist_stream$)A_llist_stream$)
(declare-fun sCons$b (A_llist$ A_llist_stream$ )A_llist_stream$)
(declare-fun x$ ()B$ )
(declare-fun uu$ ()B_bool_fun$ )
(declare-fun uua$ ()A_stream_a_stream_fun$ )
(declare-fun uub$ ()A_a_fun$ )
(declare-fun uuc$ (A_llist$ )A_stream_a_llist_fun$ )
(declare-fun uud$ (A_stream$ )A_stream_a_stream_fun$ )
(declare-fun uue$ (A_llist$ )B_a_llist_fun$ )
(declare-fun uuf$ (A_stream$ )B_a_stream_fun$ )
(declare-fun uug$ (A$ )A_a_fun$ )
(declare-fun comp$ (A_stream_a_llist_fun$ )B_a_stream_fun_b_a_llist_fun_fun$ )
(declare-fun shd$c ()B_a_fun$ )
(declare-fun smap$ (A_stream_a_llist_fun$ )A_stream_stream_a_llist_stream_fun$ )
(declare-fun comp$a (A_stream_a_llist_fun$ )A_stream_a_stream_fun_a_stream_a_llist_fun_fun$ )
(declare-fun comp$b (A_stream_a_stream_fun$ )B_a_stream_fun_b_a_stream_fun_fun$ )
(declare-fun comp$c (B_a_llist_fun$ )B_b_fun_b_a_llist_fun_fun$ )
(declare-fun comp$d (B_a_stream_fun$ )B_b_fun_b_a_stream_fun_fun$ )
(declare-fun comp$e (A_a_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun comp$f (A_llist_a_llist_fun$ )B_a_llist_fun_b_a_llist_fun_fun$ )
(declare-fun comp$g (A_llist_a_llist_fun$ )A_stream_a_llist_fun_a_stream_a_llist_fun_fun$ )
(declare-fun comp$h (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun comp$i (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun comp$j (B_b_fun$ )B_b_fun_b_b_fun_fun$ )
(declare-fun comp$k (A_llist_a_stream_fun$ )B_a_llist_fun_b_a_stream_fun_fun$ )
(declare-fun comp$l (B_a_llist_fun$ )A_stream_b_fun_a_stream_a_llist_fun_fun$ )
(declare-fun comp$m (A_stream_b_fun$ )B_a_stream_fun_b_b_fun_fun$ )
(declare-fun comp$n (B_a_stream_fun$ )A_stream_b_fun_a_stream_a_stream_fun_fun$ )
(declare-fun comp$o (A_a_llist_fun$ )B_a_fun_b_a_llist_fun_fun$ )
(declare-fun comp$p (A_llist_a_fun$ )B_a_llist_fun_b_a_fun_fun$ )
(declare-fun comp$q (A_llist_a_fun$ )A_a_llist_fun_a_a_fun_fun$ )
(declare-fun comp$r (A_a_stream_fun$ )B_a_fun_b_a_stream_fun_fun$ )
(declare-fun comp$s (A_stream_a_fun$ )B_a_stream_fun_b_a_fun_fun$ )
(declare-fun comp$t (A_stream_a_fun$ )A_a_stream_fun_a_a_fun_fun$ )
(declare-fun comp$u (A_a_llist_fun$ )A_a_fun_a_a_llist_fun_fun$ )
(declare-fun comp$v (B_a_llist_fun$ )A_b_fun_a_a_llist_fun_fun$ )
(declare-fun comp$w (A_b_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun comp$x (A_a_stream_fun$ )A_a_fun_a_a_stream_fun_fun$ )
(declare-fun comp$y (B_a_stream_fun$ )A_b_fun_a_a_stream_fun_fun$ )
(declare-fun comp$z (A_stream_stream_a_llist_stream_fun$ )B_a_stream_stream_fun_b_a_llist_stream_fun_fun$ )
(declare-fun smap$a (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$ (A_stream_a_llist_fun$ A_stream$ )A_llist$ )
(declare-fun sTL_end$ ()B_b_fun$ )
(declare-fun fun_app$a (B_a_llist_fun$ B$ )A_llist$ )
(declare-fun fun_app$b (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$c (B_a_stream_fun$ B$ )A_stream$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun fun_app$e (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$f (B_b_fun_b_a_stream_fun_fun$ B_b_fun$ )B_a_stream_fun$ )
(declare-fun fun_app$g (B_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun$ B_a_stream_fun$ )B_b_fun_b_a_stream_fun_fun$ )
(declare-fun fun_app$h (B_bool_fun_b_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun_fun$ B_bool_fun$ )B_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun$ )
(declare-fun fun_app$i (B_b_fun_b_a_llist_fun_fun$ B_b_fun$ )B_a_llist_fun$ )
(declare-fun fun_app$j (B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$ B_a_llist_fun$ )B_b_fun_b_a_llist_fun_fun$ )
(declare-fun fun_app$k (B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$ B_bool_fun$ )B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$ )
(declare-fun fun_app$l (B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$ B_a_fun$ )B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$m (B_a_stream_fun_b_a_llist_fun_fun$ B_a_stream_fun$ )B_a_llist_fun$ )
(declare-fun fun_app$n (A_stream_a_stream_fun_a_stream_a_llist_fun_fun$ A_stream_a_stream_fun$ )A_stream_a_llist_fun$ )
(declare-fun fun_app$o (B_a_stream_fun_b_a_stream_fun_fun$ B_a_stream_fun$ )B_a_stream_fun$ )
(declare-fun fun_app$p (B_b_fun$ B$ )B$ )
(declare-fun fun_app$q (B_a_fun$ B$ )A$ )
(declare-fun fun_app$r (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$s (B_a_stream_stream_fun$ B$ )A_stream_stream$ )
(declare-fun fun_app$t (B_b_fun_b_a_stream_stream_fun_fun$ B_b_fun$ )B_a_stream_stream_fun$ )
(declare-fun fun_app$u (B_a_stream_stream_fun_b_b_fun_b_a_stream_stream_fun_fun_fun$ B_a_stream_stream_fun$ )B_b_fun_b_a_stream_stream_fun_fun$ )
(declare-fun fun_app$v (B_bool_fun_b_a_stream_stream_fun_b_b_fun_b_a_stream_stream_fun_fun_fun_fun$ B_bool_fun$ )B_a_stream_stream_fun_b_b_fun_b_a_stream_stream_fun_fun_fun$ )
(declare-fun fun_app$w (B_a_llist_stream_fun$ B$ )A_llist_stream$ )
(declare-fun fun_app$x (B_b_fun_b_a_llist_stream_fun_fun$ B_b_fun$ )B_a_llist_stream_fun$ )
(declare-fun fun_app$y (B_a_llist_stream_fun_b_b_fun_b_a_llist_stream_fun_fun_fun$ B_a_llist_stream_fun$ )B_b_fun_b_a_llist_stream_fun_fun$ )
(declare-fun fun_app$z (B_bool_fun_b_a_llist_stream_fun_b_b_fun_b_a_llist_stream_fun_fun_fun_fun$ B_bool_fun$ )B_a_llist_stream_fun_b_b_fun_b_a_llist_stream_fun_fun_fun$ )
(declare-fun sTL_more$ ()B_a_stream_fun$ )
(declare-fun cr_stream$ (A_llist$ A_stream$ )Bool )
(declare-fun endORmore$ ()B_bool_fun$ )
(declare-fun fun_app$aa (B_a_llist_fun_b_a_llist_fun_fun$ B_a_llist_fun$ )B_a_llist_fun$ )
(declare-fun fun_app$ab (A_stream_a_llist_fun_a_stream_a_llist_fun_fun$ A_stream_a_llist_fun$ )A_stream_a_llist_fun$ )
(declare-fun fun_app$ac (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun fun_app$ad (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$ae (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$af (B_a_llist_fun_b_a_stream_fun_fun$ B_a_llist_fun$ )B_a_stream_fun$ )
(declare-fun fun_app$ag (A_stream_b_fun_a_stream_a_llist_fun_fun$ A_stream_b_fun$ )A_stream_a_llist_fun$ )
(declare-fun fun_app$ah (B_a_stream_fun_b_b_fun_fun$ B_a_stream_fun$ )B_b_fun$ )
(declare-fun fun_app$ai (A_stream_b_fun_a_stream_a_stream_fun_fun$ A_stream_b_fun$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$aj (B_a_fun_b_a_llist_fun_fun$ B_a_fun$ )B_a_llist_fun$ )
(declare-fun fun_app$ak (B_a_llist_fun_b_a_fun_fun$ B_a_llist_fun$ )B_a_fun$ )
(declare-fun fun_app$al (A_a_llist_fun_a_a_fun_fun$ A_a_llist_fun$ )A_a_fun$ )
(declare-fun fun_app$am (B_a_fun_b_a_stream_fun_fun$ B_a_fun$ )B_a_stream_fun$ )
(declare-fun fun_app$an (B_a_stream_fun_b_a_fun_fun$ B_a_stream_fun$ )B_a_fun$ )
(declare-fun fun_app$ao (A_a_stream_fun_a_a_fun_fun$ A_a_stream_fun$ )A_a_fun$ )
(declare-fun fun_app$ap (A_a_fun_a_a_llist_fun_fun$ A_a_fun$ )A_a_llist_fun$ )
(declare-fun fun_app$aq (A_b_fun_a_a_llist_fun_fun$ A_b_fun$ )A_a_llist_fun$ )
(declare-fun fun_app$ar (B_a_fun_b_b_fun_fun$ B_a_fun$ )B_b_fun$ )
(declare-fun fun_app$as (A_a_fun_a_a_stream_fun_fun$ A_a_fun$ )A_a_stream_fun$ )
(declare-fun fun_app$at (A_b_fun_a_a_stream_fun_fun$ A_b_fun$ )A_a_stream_fun$ )
(declare-fun fun_app$au (B_a_stream_stream_fun_b_a_llist_stream_fun_fun$ B_a_stream_stream_fun$ )B_a_llist_stream_fun$ )
(declare-fun corec_llist$ (B_bool_fun$ )B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$ )
(declare-fun corec_stream$ (B_a_fun$ )B_bool_fun_b_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun_fun$ )
(declare-fun corec_stream$a (B_a_stream_fun$ )B_bool_fun_b_a_stream_stream_fun_b_b_fun_b_a_stream_stream_fun_fun_fun_fun$ )
(declare-fun corec_stream$b (B_a_llist_fun$ )B_bool_fun_b_a_llist_stream_fun_b_b_fun_b_a_llist_stream_fun_fun_fun_fun$ )
(declare-fun llist_of_stream$ ()A_stream_a_llist_fun$ )
(declare-fun stream_of_llist$ (A_llist$ )A_stream$ )
(assert (! (forall ((?v0 A_llist$ )(?v1 A_stream$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$a (uue$ ?v0 )?v1 )?v0 ):pattern ((fun_app$a (uue$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(! (= (fun_app$b (uud$ ?v0 )?v1 )?v0 ):pattern ((fun_app$b (uud$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B$ ))(! (= (fun_app$c (uuf$ ?v0 )?v1 )?v0 ):pattern ((fun_app$c (uuf$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$d (uug$ ?v0 )?v1 )?v0 ):pattern ((fun_app$d (uug$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$b uua$ ?v0 )?v0 ):pattern ((fun_app$b uua$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$d uub$ ?v0 )?v0 ):pattern ((fun_app$d uub$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$e uu$ ?v0 )false ):pattern ((fun_app$e uu$ ?v0 )))):named a7 ))
(assert (! (not (= (fun_app$ llist_of_stream$ (fun_app$c (fun_app$f (fun_app$g (fun_app$h (corec_stream$ shd$c )endORmore$ )sTL_more$ )sTL_end$ )x$ ))(fun_app$a (fun_app$i (fun_app$j (fun_app$k (fun_app$l (corec_llist$ uu$ )shd$c )endORmore$ )(fun_app$m (comp$ llist_of_stream$ )sTL_more$ ))sTL_end$ )x$ ))):named a8 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (fun_app$ llist_of_stream$ ?v0 )(fun_app$ llist_of_stream$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(! (= (fun_app$ (fun_app$n (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$n (comp$a ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 B_a_stream_fun$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$o (comp$b ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$o (comp$b ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$a (fun_app$i (comp$c ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$i (comp$c ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$f (comp$d ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$f (comp$d ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$q (fun_app$r (comp$e ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$q ?v1 ?v2 ))):pattern ((fun_app$q (fun_app$r (comp$e ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B$ ))(! (= (fun_app$a (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$m (comp$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_a_stream_fun$ ))(= (fun_app$o (comp$b uua$ )?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (fun_app$r (comp$e uub$ )?v0 )?v0 )):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(= (fun_app$ (fun_app$n (comp$a (uuc$ ?v0 ))?v1 )?v2 )?v0 )):named a18 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_a_stream_fun$ )(?v2 B$ ))(= (fun_app$c (fun_app$o (comp$b (uud$ ?v0 ))?v1 )?v2 )?v0 )):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (fun_app$a (fun_app$i (comp$c (uue$ ?v0 ))?v1 )?v2 )?v0 )):named a20 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (fun_app$c (fun_app$f (comp$d (uuf$ ?v0 ))?v1 )?v2 )?v0 )):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 B_a_fun$ )(?v2 B$ ))(= (fun_app$q (fun_app$r (comp$e (uug$ ?v0 ))?v1 )?v2 )?v0 )):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_a_stream_fun$ )(?v2 B$ ))(= (fun_app$a (fun_app$m (comp$ (uuc$ ?v0 ))?v1 )?v2 )?v0 )):named a23 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_bool_fun$ )(?v2 B_a_stream_stream_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(! (= (fun_app$s (fun_app$t (fun_app$u (fun_app$v (corec_stream$a ?v0 )?v1 )?v2 )?v3 )?v4 )(fun_app$s (fun_app$t (fun_app$u (fun_app$v (corec_stream$a ?v0 )?v1 )?v2 )?v3 )?v4 )):pattern ((fun_app$s (fun_app$t (fun_app$u (fun_app$v (corec_stream$a ?v0 )?v1 )?v2 )?v3 )?v4 )))):named a24 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_bool_fun$ )(?v2 B_a_llist_stream_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(! (= (fun_app$w (fun_app$x (fun_app$y (fun_app$z (corec_stream$b ?v0 )?v1 )?v2 )?v3 )?v4 )(fun_app$w (fun_app$x (fun_app$y (fun_app$z (corec_stream$b ?v0 )?v1 )?v2 )?v3 )?v4 )):pattern ((fun_app$w (fun_app$x (fun_app$y (fun_app$z (corec_stream$b ?v0 )?v1 )?v2 )?v3 )?v4 )))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_bool_fun$ )(?v2 B_a_stream_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(! (= (fun_app$c (fun_app$f (fun_app$g (fun_app$h (corec_stream$ ?v0 )?v1 )?v2 )?v3 )?v4 )(fun_app$c (fun_app$f (fun_app$g (fun_app$h (corec_stream$ ?v0 )?v1 )?v2 )?v3 )?v4 )):pattern ((fun_app$c (fun_app$f (fun_app$g (fun_app$h (corec_stream$ ?v0 )?v1 )?v2 )?v3 )?v4 )))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_stream$ ))(! (= (cr_stream$ ?v0 ?v1 )(= ?v0 (fun_app$ llist_of_stream$ ?v1 ))):pattern ((cr_stream$ ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_b_fun$ ))(= (fun_app$m (comp$ ?v0 )(fun_app$f (comp$d ?v1 )?v2 ))(fun_app$i (comp$c (fun_app$m (comp$ ?v0 )?v1 ))?v2 ))):named a28 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_stream_a_llist_fun$ )(?v2 B_a_stream_fun$ ))(= (fun_app$aa (comp$f ?v0 )(fun_app$m (comp$ ?v1 )?v2 ))(fun_app$m (comp$ (fun_app$ab (comp$g ?v0 )?v1 ))?v2 ))):named a29 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 B_a_stream_fun$ ))(= (fun_app$m (comp$ ?v0 )(fun_app$o (comp$b ?v1 )?v2 ))(fun_app$m (comp$ (fun_app$n (comp$a ?v0 )?v1 ))?v2 ))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$r (comp$e ?v0 )(fun_app$ac (comp$h ?v1 )?v2 ))(fun_app$ac (comp$h (fun_app$r (comp$e ?v0 )?v1 ))?v2 ))):named a31 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ ))(= (fun_app$r (comp$e ?v0 )(fun_app$r (comp$e ?v1 )?v2 ))(fun_app$r (comp$e (fun_app$ad (comp$i ?v0 )?v1 ))?v2 ))):named a32 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$i (comp$c ?v0 )(fun_app$ae (comp$j ?v1 )?v2 ))(fun_app$i (comp$c (fun_app$i (comp$c ?v0 )?v1 ))?v2 ))):named a33 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$f (comp$d ?v0 )(fun_app$ae (comp$j ?v1 )?v2 ))(fun_app$f (comp$d (fun_app$f (comp$d ?v0 )?v1 ))?v2 ))):named a34 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_a_llist_fun$ )(?v2 B_b_fun$ ))(= (fun_app$aa (comp$f ?v0 )(fun_app$i (comp$c ?v1 )?v2 ))(fun_app$i (comp$c (fun_app$aa (comp$f ?v0 )?v1 ))?v2 ))):named a35 ))
(assert (! (forall ((?v0 A_llist_a_stream_fun$ )(?v1 B_a_llist_fun$ )(?v2 B_b_fun$ ))(= (fun_app$af (comp$k ?v0 )(fun_app$i (comp$c ?v1 )?v2 ))(fun_app$f (comp$d (fun_app$af (comp$k ?v0 )?v1 ))?v2 ))):named a36 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_b_fun$ ))(= (fun_app$o (comp$b ?v0 )(fun_app$f (comp$d ?v1 )?v2 ))(fun_app$f (comp$d (fun_app$o (comp$b ?v0 )?v1 ))?v2 ))):named a37 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_b_fun$ ))(= (fun_app$i (comp$c (fun_app$m (comp$ ?v0 )?v1 ))?v2 )(fun_app$m (comp$ ?v0 )(fun_app$f (comp$d ?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_stream_a_llist_fun$ )(?v2 B_a_stream_fun$ ))(= (fun_app$m (comp$ (fun_app$ab (comp$g ?v0 )?v1 ))?v2 )(fun_app$aa (comp$f ?v0 )(fun_app$m (comp$ ?v1 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 B_a_stream_fun$ ))(= (fun_app$m (comp$ (fun_app$n (comp$a ?v0 )?v1 ))?v2 )(fun_app$m (comp$ ?v0 )(fun_app$o (comp$b ?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$ac (comp$h (fun_app$r (comp$e ?v0 )?v1 ))?v2 )(fun_app$r (comp$e ?v0 )(fun_app$ac (comp$h ?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ ))(= (fun_app$r (comp$e (fun_app$ad (comp$i ?v0 )?v1 ))?v2 )(fun_app$r (comp$e ?v0 )(fun_app$r (comp$e ?v1 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$i (comp$c (fun_app$i (comp$c ?v0 )?v1 ))?v2 )(fun_app$i (comp$c ?v0 )(fun_app$ae (comp$j ?v1 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$f (comp$d (fun_app$f (comp$d ?v0 )?v1 ))?v2 )(fun_app$f (comp$d ?v0 )(fun_app$ae (comp$j ?v1 )?v2 )))):named a44 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 A_stream_b_fun$ )(?v2 B_a_stream_fun$ ))(= (fun_app$m (comp$ (fun_app$ag (comp$l ?v0 )?v1 ))?v2 )(fun_app$i (comp$c ?v0 )(fun_app$ah (comp$m ?v1 )?v2 )))):named a45 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 A_stream_b_fun$ )(?v2 B_a_stream_fun$ ))(= (fun_app$o (comp$b (fun_app$ai (comp$n ?v0 )?v1 ))?v2 )(fun_app$f (comp$d ?v0 )(fun_app$ah (comp$m ?v1 )?v2 )))):named a46 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_a_llist_fun$ )(?v2 B_b_fun$ ))(= (fun_app$i (comp$c (fun_app$aa (comp$f ?v0 )?v1 ))?v2 )(fun_app$aa (comp$f ?v0 )(fun_app$i (comp$c ?v1 )?v2 )))):named a47 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(! (= (fun_app$ (fun_app$n (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$n (comp$a ?v0 )?v1 )?v2 )))):named a48 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 B_a_stream_fun$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$o (comp$b ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$o (comp$b ?v0 )?v1 )?v2 )))):named a49 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$a (fun_app$i (comp$c ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$i (comp$c ?v0 )?v1 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$f (comp$d ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$f (comp$d ?v0 )?v1 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$q (fun_app$r (comp$e ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$q ?v1 ?v2 ))):pattern ((fun_app$q (fun_app$r (comp$e ?v0 )?v1 )?v2 )))):named a52 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B$ ))(! (= (fun_app$a (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$m (comp$ ?v0 )?v1 )?v2 )))):named a53 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_a_llist_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$ ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$a ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a54 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 A_stream_a_stream_fun$ ))(=> (and (= (fun_app$n (comp$a ?v0 )?v1 )(fun_app$n (comp$a ?v2 )?v3 ))(=> (forall ((?v4 A_stream$ ))(= (fun_app$ ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a55 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 B_a_stream_fun$ )(?v2 A_stream_a_stream_fun$ )(?v3 B_a_stream_fun$ ))(=> (and (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$b ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a56 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_a_stream_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$f (comp$d ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$b ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a57 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 B_a_stream_fun$ ))(=> (and (= (fun_app$i (comp$c ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$a ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a58 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 B_a_llist_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$i (comp$c ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$a ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$a ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a59 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 A_stream_a_stream_fun$ )(?v3 B_a_stream_fun$ ))(=> (and (= (fun_app$f (comp$d ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$c ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a60 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B_a_stream_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$f (comp$d ?v0 )?v1 )(fun_app$f (comp$d ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$c ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a61 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$r (comp$e ?v0 )?v1 )(fun_app$r (comp$e ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$d ?v0 (fun_app$q ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$q ?v3 ?v4 ))))false ))false )):named a62 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 B_a_stream_fun$ ))(=> (and (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$ ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a63 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 A_stream_a_stream_fun$ )(?v3 B_a_stream_fun$ )(?v4 A_stream_a_llist_fun$ )(?v5 A_stream_a_llist_fun$ ))(=> (and (= (fun_app$f (comp$d ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(= (fun_app$n (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$i (comp$c (fun_app$m (comp$ ?v4 )?v0 ))?v1 )(fun_app$m (comp$ ?v5 )?v3 )))):named a64 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_a_stream_fun$ )(?v3 B_b_fun$ )(?v4 A_stream_a_llist_fun$ )(?v5 B_a_llist_fun$ ))(=> (and (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$f (comp$d ?v2 )?v3 ))(= (fun_app$m (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$m (comp$ (fun_app$n (comp$a ?v4 )?v0 ))?v1 )(fun_app$i (comp$c ?v5 )?v3 )))):named a65 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 B_a_stream_fun$ )(?v4 A_llist_a_llist_fun$ )(?v5 A_stream_a_llist_fun$ ))(=> (and (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(= (fun_app$ab (comp$g ?v4 )?v2 )?v5 ))(= (fun_app$m (comp$ (fun_app$ab (comp$g ?v4 )?v0 ))?v1 )(fun_app$m (comp$ ?v5 )?v3 )))):named a66 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 A_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$ac (comp$h ?v0 )?v1 )(fun_app$r (comp$e ?v2 )?v3 ))(= (fun_app$ad (comp$i ?v4 )?v2 )?v5 ))(= (fun_app$ac (comp$h (fun_app$r (comp$e ?v4 )?v0 ))?v1 )(fun_app$r (comp$e ?v5 )?v3 )))):named a67 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 A_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$r (comp$e ?v0 )?v1 )(fun_app$ac (comp$h ?v2 )?v3 ))(= (fun_app$r (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$r (comp$e (fun_app$ad (comp$i ?v4 )?v0 ))?v1 )(fun_app$ac (comp$h ?v5 )?v3 )))):named a68 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 A_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$r (comp$e ?v0 )?v1 )(fun_app$r (comp$e ?v2 )?v3 ))(= (fun_app$ad (comp$i ?v4 )?v2 )?v5 ))(= (fun_app$r (comp$e (fun_app$ad (comp$i ?v4 )?v0 ))?v1 )(fun_app$r (comp$e ?v5 )?v3 )))):named a69 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B_a_llist_fun$ )(?v5 B_a_llist_fun$ ))(=> (and (= (fun_app$ae (comp$j ?v0 )?v1 )(fun_app$ae (comp$j ?v2 )?v3 ))(= (fun_app$i (comp$c ?v4 )?v2 )?v5 ))(= (fun_app$i (comp$c (fun_app$i (comp$c ?v4 )?v0 ))?v1 )(fun_app$i (comp$c ?v5 )?v3 )))):named a70 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B_a_stream_fun$ )(?v5 B_a_stream_fun$ ))(=> (and (= (fun_app$ae (comp$j ?v0 )?v1 )(fun_app$ae (comp$j ?v2 )?v3 ))(= (fun_app$f (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$f (comp$d (fun_app$f (comp$d ?v4 )?v0 ))?v1 )(fun_app$f (comp$d ?v5 )?v3 )))):named a71 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 B_a_fun$ )(?v2 B_a_llist_fun$ )(?v3 B_b_fun$ )(?v4 A_llist_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$aj (comp$o ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(= (fun_app$ak (comp$p ?v4 )?v2 )?v5 ))(= (fun_app$r (comp$e (fun_app$al (comp$q ?v4 )?v0 ))?v1 )(fun_app$ac (comp$h ?v5 )?v3 )))):named a72 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 B_a_fun$ )(?v2 B_a_stream_fun$ )(?v3 B_b_fun$ )(?v4 A_stream_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$am (comp$r ?v0 )?v1 )(fun_app$f (comp$d ?v2 )?v3 ))(= (fun_app$an (comp$s ?v4 )?v2 )?v5 ))(= (fun_app$r (comp$e (fun_app$ao (comp$t ?v4 )?v0 ))?v1 )(fun_app$ac (comp$h ?v5 )?v3 )))):named a73 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 B_a_stream_fun$ )(?v4 B_b_fun$ )(?v5 B_a_stream_fun$ ))(=> (and (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(= (fun_app$f (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$m (comp$ ?v0 )(fun_app$f (comp$d ?v1 )?v4 ))(fun_app$m (comp$ ?v2 )?v5 )))):named a74 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_stream_a_llist_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 A_stream_a_stream_fun$ )(?v4 B_a_stream_fun$ )(?v5 B_a_stream_fun$ ))(=> (and (= (fun_app$ab (comp$g ?v0 )?v1 )(fun_app$n (comp$a ?v2 )?v3 ))(= (fun_app$o (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$aa (comp$f ?v0 )(fun_app$m (comp$ ?v1 )?v4 ))(fun_app$m (comp$ ?v2 )?v5 )))):named a75 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_stream_a_llist_fun$ )(?v4 B_a_stream_fun$ )(?v5 B_a_llist_fun$ ))(=> (and (= (fun_app$n (comp$a ?v0 )?v1 )(fun_app$ab (comp$g ?v2 )?v3 ))(= (fun_app$m (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$m (comp$ ?v0 )(fun_app$o (comp$b ?v1 )?v4 ))(fun_app$aa (comp$f ?v2 )?v5 )))):named a76 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$ad (comp$i ?v0 )?v1 )(fun_app$ad (comp$i ?v2 )?v3 ))(= (fun_app$r (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$r (comp$e ?v0 )(fun_app$r (comp$e ?v1 )?v4 ))(fun_app$r (comp$e ?v2 )?v5 )))):named a77 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B_b_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$r (comp$e ?v0 )?v1 )(fun_app$r (comp$e ?v2 )?v3 ))(= (fun_app$ac (comp$h ?v3 )?v4 )?v5 ))(= (fun_app$r (comp$e ?v0 )(fun_app$ac (comp$h ?v1 )?v4 ))(fun_app$r (comp$e ?v2 )?v5 )))):named a78 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_a_fun$ )(?v2 B_a_llist_fun$ )(?v3 A_b_fun$ )(?v4 B_a_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$ap (comp$u ?v0 )?v1 )(fun_app$aq (comp$v ?v2 )?v3 ))(= (fun_app$ar (comp$w ?v3 )?v4 )?v5 ))(= (fun_app$aj (comp$o ?v0 )(fun_app$r (comp$e ?v1 )?v4 ))(fun_app$i (comp$c ?v2 )?v5 )))):named a79 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_a_fun$ )(?v2 B_a_stream_fun$ )(?v3 A_b_fun$ )(?v4 B_a_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$as (comp$x ?v0 )?v1 )(fun_app$at (comp$y ?v2 )?v3 ))(= (fun_app$ar (comp$w ?v3 )?v4 )?v5 ))(= (fun_app$am (comp$r ?v0 )(fun_app$r (comp$e ?v1 )?v4 ))(fun_app$f (comp$d ?v2 )?v5 )))):named a80 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 A_b_fun$ )(?v2 A_a_llist_fun$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$aq (comp$v ?v0 )?v1 )(fun_app$ap (comp$u ?v2 )?v3 ))(= (fun_app$r (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$i (comp$c ?v0 )(fun_app$ar (comp$w ?v1 )?v4 ))(fun_app$aj (comp$o ?v2 )?v5 )))):named a81 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 A_b_fun$ )(?v2 A_a_stream_fun$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$at (comp$y ?v0 )?v1 )(fun_app$as (comp$x ?v2 )?v3 ))(= (fun_app$r (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$f (comp$d ?v0 )(fun_app$ar (comp$w ?v1 )?v4 ))(fun_app$am (comp$r ?v2 )?v5 )))):named a82 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 B_a_llist_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B_b_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$ak (comp$p ?v0 )?v1 )(fun_app$r (comp$e ?v2 )?v3 ))(= (fun_app$ac (comp$h ?v3 )?v4 )?v5 ))(= (fun_app$ak (comp$p ?v0 )(fun_app$i (comp$c ?v1 )?v4 ))(fun_app$r (comp$e ?v2 )?v5 )))):named a83 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_a_llist_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$a ?v2 (fun_app$p ?v3 ?v4 ))))):named a84 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 A_stream_a_stream_fun$ )(?v4 A_stream$ ))(=> (= (fun_app$n (comp$a ?v0 )?v1 )(fun_app$n (comp$a ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$b ?v3 ?v4 ))))):named a85 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 B_a_stream_fun$ )(?v2 A_stream_a_stream_fun$ )(?v3 B_a_stream_fun$ )(?v4 B$ ))(=> (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(= (fun_app$b ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$c ?v3 ?v4 ))))):named a86 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_a_stream_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$f (comp$d ?v2 )?v3 ))(= (fun_app$b ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$p ?v3 ?v4 ))))):named a87 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 B_a_stream_fun$ )(?v4 B$ ))(=> (= (fun_app$i (comp$c ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(= (fun_app$a ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$c ?v3 ?v4 ))))):named a88 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 B_a_llist_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$i (comp$c ?v0 )?v1 )(fun_app$i (comp$c ?v2 )?v3 ))(= (fun_app$a ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$a ?v2 (fun_app$p ?v3 ?v4 ))))):named a89 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 A_stream_a_stream_fun$ )(?v3 B_a_stream_fun$ )(?v4 B$ ))(=> (= (fun_app$f (comp$d ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$c ?v3 ?v4 ))))):named a90 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B_a_stream_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$f (comp$d ?v0 )?v1 )(fun_app$f (comp$d ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$p ?v3 ?v4 ))))):named a91 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$r (comp$e ?v0 )?v1 )(fun_app$r (comp$e ?v2 )?v3 ))(= (fun_app$d ?v0 (fun_app$q ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$q ?v3 ?v4 ))))):named a92 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 B_a_stream_fun$ )(?v4 B$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )(fun_app$m (comp$ ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$c ?v3 ?v4 ))))):named a93 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 A_stream$ ))(=> (= (fun_app$n (comp$a ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$ ?v2 ?v3 )))):named a94 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_a_stream_fun$ )(?v3 B$ ))(=> (= (fun_app$o (comp$b ?v0 )?v1 )?v2 )(= (fun_app$b ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a95 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 B_a_llist_fun$ )(?v3 B$ ))(=> (= (fun_app$i (comp$c ?v0 )?v1 )?v2 )(= (fun_app$a ?v0 (fun_app$p ?v1 ?v3 ))(fun_app$a ?v2 ?v3 )))):named a96 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B_a_stream_fun$ )(?v3 B$ ))(=> (= (fun_app$f (comp$d ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$p ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a97 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$r (comp$e ?v0 )?v1 )?v2 )(= (fun_app$d ?v0 (fun_app$q ?v1 ?v3 ))(fun_app$q ?v2 ?v3 )))):named a98 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_a_llist_fun$ )(?v3 B$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$a ?v2 ?v3 )))):named a99 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_a_llist_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )?v2 )(= (fun_app$m (comp$ ?v0 )(fun_app$f (comp$d ?v1 )?v3 ))(fun_app$i (comp$c ?v2 )?v3 )))):named a100 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_stream_a_llist_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 B_a_stream_fun$ ))(=> (= (fun_app$ab (comp$g ?v0 )?v1 )?v2 )(= (fun_app$aa (comp$f ?v0 )(fun_app$m (comp$ ?v1 )?v3 ))(fun_app$m (comp$ ?v2 )?v3 )))):named a101 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 B_a_stream_fun$ ))(=> (= (fun_app$n (comp$a ?v0 )?v1 )?v2 )(= (fun_app$m (comp$ ?v0 )(fun_app$o (comp$b ?v1 )?v3 ))(fun_app$m (comp$ ?v2 )?v3 )))):named a102 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$ad (comp$i ?v0 )?v1 )?v2 )(= (fun_app$r (comp$e ?v0 )(fun_app$r (comp$e ?v1 )?v3 ))(fun_app$r (comp$e ?v2 )?v3 )))):named a103 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$r (comp$e ?v0 )?v1 )?v2 )(= (fun_app$r (comp$e ?v0 )(fun_app$ac (comp$h ?v1 )?v3 ))(fun_app$ac (comp$h ?v2 )?v3 )))):named a104 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 B_a_llist_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$i (comp$c ?v0 )?v1 )?v2 )(= (fun_app$i (comp$c ?v0 )(fun_app$ae (comp$j ?v1 )?v3 ))(fun_app$i (comp$c ?v2 )?v3 )))):named a105 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B_a_stream_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$f (comp$d ?v0 )?v1 )?v2 )(= (fun_app$f (comp$d ?v0 )(fun_app$ae (comp$j ?v1 )?v3 ))(fun_app$f (comp$d ?v2 )?v3 )))):named a106 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_a_llist_fun$ )(?v2 B_a_llist_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$aa (comp$f ?v0 )?v1 )?v2 )(= (fun_app$aa (comp$f ?v0 )(fun_app$i (comp$c ?v1 )?v3 ))(fun_app$i (comp$c ?v2 )?v3 )))):named a107 ))
(assert (! (forall ((?v0 A_llist_a_stream_fun$ )(?v1 B_a_llist_fun$ )(?v2 B_a_stream_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$af (comp$k ?v0 )?v1 )?v2 )(= (fun_app$af (comp$k ?v0 )(fun_app$i (comp$c ?v1 )?v3 ))(fun_app$f (comp$d ?v2 )?v3 )))):named a108 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 A_stream_b_fun$ )(?v2 A_stream_a_llist_fun$ )(?v3 B_a_stream_fun$ ))(=> (= (fun_app$ag (comp$l ?v0 )?v1 )?v2 )(= (fun_app$i (comp$c ?v0 )(fun_app$ah (comp$m ?v1 )?v3 ))(fun_app$m (comp$ ?v2 )?v3 )))):named a109 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B_a_stream_fun$ )(?v3 A_stream_a_llist_fun$ ))(=> (= (fun_app$f (comp$d ?v0 )?v1 )?v2 )(= (fun_app$i (comp$c (fun_app$m (comp$ ?v3 )?v0 ))?v1 )(fun_app$m (comp$ ?v3 )?v2 )))):named a110 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_a_stream_fun$ )(?v3 A_stream_a_llist_fun$ ))(=> (= (fun_app$o (comp$b ?v0 )?v1 )?v2 )(= (fun_app$m (comp$ (fun_app$n (comp$a ?v3 )?v0 ))?v1 )(fun_app$m (comp$ ?v3 )?v2 )))):named a111 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (= (fun_app$m (comp$ ?v0 )?v1 )?v2 )(= (fun_app$m (comp$ (fun_app$ab (comp$g ?v3 )?v0 ))?v1 )(fun_app$aa (comp$f ?v3 )?v2 )))):named a112 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$ac (comp$h ?v0 )?v1 )?v2 )(= (fun_app$ac (comp$h (fun_app$r (comp$e ?v3 )?v0 ))?v1 )(fun_app$r (comp$e ?v3 )?v2 )))):named a113 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$r (comp$e ?v0 )?v1 )?v2 )(= (fun_app$r (comp$e (fun_app$ad (comp$i ?v3 )?v0 ))?v1 )(fun_app$r (comp$e ?v3 )?v2 )))):named a114 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_a_llist_fun$ ))(=> (= (fun_app$ae (comp$j ?v0 )?v1 )?v2 )(= (fun_app$i (comp$c (fun_app$i (comp$c ?v3 )?v0 ))?v1 )(fun_app$i (comp$c ?v3 )?v2 )))):named a115 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_a_stream_fun$ ))(=> (= (fun_app$ae (comp$j ?v0 )?v1 )?v2 )(= (fun_app$f (comp$d (fun_app$f (comp$d ?v3 )?v0 ))?v1 )(fun_app$f (comp$d ?v3 )?v2 )))):named a116 ))
(assert (! (forall ((?v0 A_stream_b_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_b_fun$ )(?v3 B_a_llist_fun$ ))(=> (= (fun_app$ah (comp$m ?v0 )?v1 )?v2 )(= (fun_app$m (comp$ (fun_app$ag (comp$l ?v3 )?v0 ))?v1 )(fun_app$i (comp$c ?v3 )?v2 )))):named a117 ))
(assert (! (forall ((?v0 A_stream_b_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_b_fun$ )(?v3 B_a_stream_fun$ ))(=> (= (fun_app$ah (comp$m ?v0 )?v1 )?v2 )(= (fun_app$o (comp$b (fun_app$ai (comp$n ?v3 )?v0 ))?v1 )(fun_app$f (comp$d ?v3 )?v2 )))):named a118 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 B_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (= (fun_app$i (comp$c ?v0 )?v1 )?v2 )(= (fun_app$i (comp$c (fun_app$aa (comp$f ?v3 )?v0 ))?v1 )(fun_app$aa (comp$f ?v3 )?v2 )))):named a119 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 A_stream_a_llist_fun$ )(?v4 A_stream_a_stream_fun$ )(?v5 A_stream$ ))(=> (= (fun_app$a ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$b ?v4 ?v5 )))(= (fun_app$a (fun_app$i (comp$c ?v0 )?v1 )?v2 )(fun_app$ (fun_app$n (comp$a ?v3 )?v4 )?v5 )))):named a120 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_a_llist_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(=> (= (fun_app$a ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$a ?v3 (fun_app$p ?v4 ?v5 )))(= (fun_app$a (fun_app$i (comp$c ?v0 )?v1 )?v2 )(fun_app$a (fun_app$i (comp$c ?v3 )?v4 )?v5 )))):named a121 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 A_stream_a_stream_fun$ )(?v4 B_a_stream_fun$ )(?v5 B$ ))(=> (= (fun_app$c ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$c ?v4 ?v5 )))(= (fun_app$c (fun_app$f (comp$d ?v0 )?v1 )?v2 )(fun_app$c (fun_app$o (comp$b ?v3 )?v4 )?v5 )))):named a122 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_a_stream_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(=> (= (fun_app$c ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$p ?v4 ?v5 )))(= (fun_app$c (fun_app$f (comp$d ?v0 )?v1 )?v2 )(fun_app$c (fun_app$f (comp$d ?v3 )?v4 )?v5 )))):named a123 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ )(?v5 B$ ))(=> (= (fun_app$d ?v0 (fun_app$q ?v1 ?v2 ))(fun_app$d ?v3 (fun_app$q ?v4 ?v5 )))(= (fun_app$q (fun_app$r (comp$e ?v0 )?v1 )?v2 )(fun_app$q (fun_app$r (comp$e ?v3 )?v4 )?v5 )))):named a124 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B$ )(?v3 A_stream_a_llist_fun$ )(?v4 B_a_stream_fun$ )(?v5 B$ ))(=> (= (fun_app$ ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$c ?v4 ?v5 )))(= (fun_app$a (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$m (comp$ ?v3 )?v4 )?v5 )))):named a125 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B$ )(?v3 A_stream_a_llist_fun$ )(?v4 B_a_stream_fun$ ))(=> (= (fun_app$ ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$a (fun_app$m (comp$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$m (comp$ ?v3 )?v4 )?v2 )))):named a126 ))
(assert (! (forall ((?v0 B_a_stream_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 A_stream_a_stream_fun$ )(?v4 B_a_stream_fun$ )(?v5 A_stream_a_llist_fun$ ))(=> (= (fun_app$c ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$b ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$a (fun_app$i (comp$c (fun_app$m (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$a (fun_app$m (comp$ (fun_app$n (comp$a ?v5 )?v3 ))?v4 )?v2 )))):named a127 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 B_a_stream_fun$ )(?v2 B$ )(?v3 B_a_stream_fun$ )(?v4 B_b_fun$ )(?v5 A_stream_a_llist_fun$ ))(=> (= (fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$p ?v4 ?v2 )))(= (fun_app$a (fun_app$m (comp$ (fun_app$n (comp$a ?v5 )?v0 ))?v1 )?v2 )(fun_app$a (fun_app$i (comp$c (fun_app$m (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a128 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (fun_app$ llist_of_stream$ ?v0 ))?v0 )):named a129 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (fun_app$ llist_of_stream$ ?v0 ))?v0 )):named a130 ))
(assert (! (forall ((?v0 A_stream_a_llist_fun$ )(?v1 B_a_stream_fun$ )(?v2 B_bool_fun$ )(?v3 B_a_stream_stream_fun$ )(?v4 B_b_fun$ ))(= (fun_app$au (comp$z (smap$ ?v0 ))(fun_app$t (fun_app$u (fun_app$v (corec_stream$a ?v1 )?v2 )?v3 )?v4 ))(fun_app$x (fun_app$y (fun_app$z (corec_stream$b (fun_app$m (comp$ ?v0 )?v1 ))?v2 )(fun_app$au (comp$z (smap$ ?v0 ))?v3 ))?v4 ))):named a131 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_bool_fun$ )(?v3 B_a_stream_fun$ )(?v4 B_b_fun$ ))(= (fun_app$o (comp$b (smap$a ?v0 ))(fun_app$f (fun_app$g (fun_app$h (corec_stream$ ?v1 )?v2 )?v3 )?v4 ))(fun_app$f (fun_app$g (fun_app$h (corec_stream$ (fun_app$r (comp$e ?v0 )?v1 ))?v2 )(fun_app$o (comp$b (smap$a ?v0 ))?v3 ))?v4 ))):named a132 ))
(check-sat )
;(get-unsat-core )
