;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_a_a_a_prod_fun_fun$ 0 )
(declare-sort A_a_a_prod_a_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_a_prod_stream_bool_fun$ 0 )
(declare-sort A_a_a_a_prod_prod_a_fun_fun$ 0 )
(declare-sort A_a_a_prod_a_a_prod_fun_fun$ 0 )
(declare-sort A_a_a_prod_a_prod_a_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_a_prod_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_a_fun_fun$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_fun$ 0 )
(declare-sort A_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort A_a_a_prod_prod_stream_bool_fun$ 0 )
(declare-sort A_a_prod_a_prod_stream_bool_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_a_a_prod_fun_fun$ 0 )
(declare-sort A_stream_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_stream_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_stream_bool_fun$ 0 )
(declare-sort A_stream_bool_fun_a_stream_bool_fun_fun$ 0 )
(declare-sort A_a_prod_stream_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_a_a_prod_prod_stream_a_a_a_prod_prod_fun$ 0 )
(declare-sort A_a_prod_a_prod_stream_a_a_prod_a_prod_fun$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_stream_a_a_prod_stream_a_a_prod_stream_fun_fun$ 0 )
(declare-sort A_a_a_prod_prod_stream_a_a_a_prod_prod_stream_fun$ 0 )
(declare-sort A_a_prod_a_prod_stream_a_a_prod_a_prod_stream_fun$ 0 )
(declare-sort A_a_prod_stream_bool_fun_a_a_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_stream_a_a_prod_stream_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_stream_a_a_prod_a_a_prod_prod_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_stream_a_a_prod_a_a_prod_prod_stream_fun$ 0 )
(declare-sort A_a_a_prod_prod_stream_bool_fun_a_a_a_prod_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_a_prod_a_prod_stream_bool_fun_a_a_prod_a_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_stream_fun_a_a_prod_stream_a_a_prod_stream_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_stream_bool_fun_a_a_prod_a_a_prod_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_stream$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-datatypes ()((A_a_prod$ (pair$ (fst$ A$ )(snd$ A$ )))))
(declare-sort A_a_prod_stream$ 0)
(declare-fun shd$a (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$a (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$a (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-datatypes ()((A_a_prod_a_a_prod_prod$ (pair$a (fst$a A_a_prod$ )(snd$a A_a_prod$ )))))
(declare-sort A_a_prod_a_a_prod_prod_stream$ 0)
(declare-fun shd$b (A_a_prod_a_a_prod_prod_stream$)A_a_prod_a_a_prod_prod$)
(declare-fun stl$b (A_a_prod_a_a_prod_prod_stream$)A_a_prod_a_a_prod_prod_stream$)
(declare-fun sCons$b (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_stream$ )A_a_prod_a_a_prod_prod_stream$)
(declare-datatypes ()((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$ )(snd$b A$ )))))
(declare-sort A_a_prod_a_prod_stream$ 0)
(declare-fun shd$c (A_a_prod_a_prod_stream$)A_a_prod_a_prod$)
(declare-fun stl$c (A_a_prod_a_prod_stream$)A_a_prod_a_prod_stream$)
(declare-fun sCons$c (A_a_prod_a_prod$ A_a_prod_a_prod_stream$ )A_a_prod_a_prod_stream$)
(declare-datatypes ()((A_a_a_prod_prod$ (pair$c (fst$c A$ )(snd$c A_a_prod$ )))))
(declare-sort A_a_a_prod_prod_stream$ 0)
(declare-fun shd$d (A_a_a_prod_prod_stream$)A_a_a_prod_prod$)
(declare-fun stl$d (A_a_a_prod_prod_stream$)A_a_a_prod_prod_stream$)
(declare-fun sCons$d (A_a_a_prod_prod$ A_a_a_prod_prod_stream$ )A_a_a_prod_prod_stream$)
(declare-datatypes ()((A_a_a_prod_a_prod_prod$ (pair$d (fst$d A$ )(snd$d A_a_prod_a_prod$ )))))
(declare-sort A_a_a_prod_a_prod_prod_stream$ 0)
(declare-fun shd$e (A_a_a_prod_a_prod_prod_stream$)A_a_a_prod_a_prod_prod$)
(declare-fun stl$e (A_a_a_prod_a_prod_prod_stream$)A_a_a_prod_a_prod_prod_stream$)
(declare-fun sCons$e (A_a_a_prod_a_prod_prod$ A_a_a_prod_a_prod_prod_stream$ )A_a_a_prod_a_prod_prod_stream$)
(declare-datatypes ()((A_a_a_a_prod_prod_prod$ (pair$e (fst$e A$ )(snd$e A_a_a_prod_prod$ )))))
(declare-sort A_a_a_a_prod_prod_prod_stream$ 0)
(declare-fun shd$f (A_a_a_a_prod_prod_prod_stream$)A_a_a_a_prod_prod_prod$)
(declare-fun stl$f (A_a_a_a_prod_prod_prod_stream$)A_a_a_a_prod_prod_prod_stream$)
(declare-fun sCons$f (A_a_a_a_prod_prod_prod$ A_a_a_a_prod_prod_prod_stream$ )A_a_a_a_prod_prod_prod_stream$)
(declare-datatypes ()((A_a_prod_a_prod_a_prod$ (pair$f (fst$f A_a_prod_a_prod$ )(snd$f A$ )))))
(declare-sort A_a_prod_a_prod_a_prod_stream$ 0)
(declare-fun shd$g (A_a_prod_a_prod_a_prod_stream$)A_a_prod_a_prod_a_prod$)
(declare-fun stl$g (A_a_prod_a_prod_a_prod_stream$)A_a_prod_a_prod_a_prod_stream$)
(declare-fun sCons$g (A_a_prod_a_prod_a_prod$ A_a_prod_a_prod_a_prod_stream$ )A_a_prod_a_prod_a_prod_stream$)
(declare-datatypes ()((A_a_a_prod_prod_a_prod$ (pair$g (fst$g A_a_a_prod_prod$ )(snd$g A$ )))))
(declare-sort A_a_a_prod_prod_a_prod_stream$ 0)
(declare-fun shd$h (A_a_a_prod_prod_a_prod_stream$)A_a_a_prod_prod_a_prod$)
(declare-fun stl$h (A_a_a_prod_prod_a_prod_stream$)A_a_a_prod_prod_a_prod_stream$)
(declare-fun sCons$h (A_a_a_prod_prod_a_prod$ A_a_a_prod_prod_a_prod_stream$ )A_a_a_prod_prod_a_prod_stream$)
(declare-datatypes ()((A_a_a_prod_a_a_prod_prod_prod$ (pair$h (fst$h A$ )(snd$h A_a_prod_a_a_prod_prod$ )))))
(declare-sort A_a_a_prod_a_a_prod_prod_prod_stream$ 0)
(declare-fun shd$i (A_a_a_prod_a_a_prod_prod_prod_stream$)A_a_a_prod_a_a_prod_prod_prod$)
(declare-fun stl$i (A_a_a_prod_a_a_prod_prod_prod_stream$)A_a_a_prod_a_a_prod_prod_prod_stream$)
(declare-fun sCons$i (A_a_a_prod_a_a_prod_prod_prod$ A_a_a_prod_a_a_prod_prod_prod_stream$ )A_a_a_prod_a_a_prod_prod_prod_stream$)
(declare-datatypes ()((A_a_prod_a_a_prod_a_prod_prod$ (pair$i (fst$i A_a_prod$ )(snd$i A_a_prod_a_prod$ )))))
(declare-sort A_a_prod_a_a_prod_a_prod_prod_stream$ 0)
(declare-fun shd$j (A_a_prod_a_a_prod_a_prod_prod_stream$)A_a_prod_a_a_prod_a_prod_prod$)
(declare-fun stl$j (A_a_prod_a_a_prod_a_prod_prod_stream$)A_a_prod_a_a_prod_a_prod_prod_stream$)
(declare-fun sCons$j (A_a_prod_a_a_prod_a_prod_prod$ A_a_prod_a_a_prod_a_prod_prod_stream$ )A_a_prod_a_a_prod_a_prod_prod_stream$)
(declare-fun uu$ ()A_a_prod_a_a_prod_prod_stream_a_a_prod_a_a_prod_prod_fun$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun uua$ ()A_a_prod_a_a_prod_prod_stream_a_a_prod_a_a_prod_prod_stream_fun$ )
(declare-fun uub$ ()A_a_prod_a_prod_stream_a_a_prod_a_prod_fun$ )
(declare-fun uuc$ ()A_a_prod_a_prod_stream_a_a_prod_a_prod_stream_fun$ )
(declare-fun uud$ ()A_a_a_prod_prod_stream_a_a_a_prod_prod_fun$ )
(declare-fun uue$ ()A_a_a_prod_prod_stream_a_a_a_prod_prod_stream_fun$ )
(declare-fun uuf$ ()A_a_prod_stream_a_a_prod_fun$ )
(declare-fun uug$ ()A_a_prod_stream_a_a_prod_stream_fun$ )
(declare-fun uuh$ ()A_stream_a_fun$ )
(declare-fun uui$ ()A_stream_a_stream_fun$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun szip$ (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun sdrop$ (Nat$ )A_stream_a_stream_fun$ )
(declare-fun smap2$ (A_a_a_fun_fun$ )A_stream_a_stream_a_stream_fun_fun$ )
(declare-fun snth$a (A_a_prod_stream$ Nat$ )A_a_prod$ )
(declare-fun szip$a (A_stream$ A_a_prod_stream$ )A_a_a_prod_prod_stream$ )
(declare-fun szip$b (A_a_prod_stream$ A_stream$ )A_a_prod_a_prod_stream$ )
(declare-fun szip$c (A_a_prod_stream$ A_a_prod_stream$ )A_a_prod_a_a_prod_prod_stream$ )
(declare-fun szip$d (A_stream$ A_a_prod_a_prod_stream$ )A_a_a_prod_a_prod_prod_stream$ )
(declare-fun szip$e (A_stream$ A_a_a_prod_prod_stream$ )A_a_a_a_prod_prod_prod_stream$ )
(declare-fun szip$f (A_a_prod_a_prod_stream$ A_stream$ )A_a_prod_a_prod_a_prod_stream$ )
(declare-fun szip$g (A_a_a_prod_prod_stream$ A_stream$ )A_a_a_prod_prod_a_prod_stream$ )
(declare-fun szip$h (A_stream$ A_a_prod_a_a_prod_prod_stream$ )A_a_a_prod_a_a_prod_prod_prod_stream$ )
(declare-fun szip$i (A_a_prod_stream$ A_a_prod_a_prod_stream$ )A_a_prod_a_a_prod_a_prod_prod_stream$ )
(declare-fun until$ (A_a_prod_a_a_prod_prod_stream_bool_fun$ )A_a_prod_a_a_prod_prod_stream_bool_fun_a_a_prod_a_a_prod_prod_stream_bool_fun_fun$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun sdrop$a (Nat$ )A_a_prod_stream_a_a_prod_stream_fun$ )
(declare-fun sdrop$b (Nat$ A_a_a_prod_prod_stream$ )A_a_a_prod_prod_stream$ )
(declare-fun sdrop$c (Nat$ A_a_prod_a_prod_stream$ )A_a_prod_a_prod_stream$ )
(declare-fun sdrop$d (Nat$ A_a_prod_a_a_prod_prod_stream$ )A_a_prod_a_a_prod_prod_stream$ )
(declare-fun smap2$a (A_a_a_prod_a_fun_fun$ A_stream$ A_a_prod_stream$ )A_stream$ )
(declare-fun smap2$b (A_a_prod_a_a_fun_fun$ )A_a_prod_stream_a_stream_a_stream_fun_fun$ )
(declare-fun smap2$c (A_a_a_a_prod_fun_fun$ A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun smap2$d (A_a_prod_a_a_prod_a_fun_fun$ A_a_prod_stream$ A_a_prod_stream$ )A_stream$ )
(declare-fun smap2$e (A_a_a_prod_a_a_prod_fun_fun$ )A_stream_a_a_prod_stream_a_a_prod_stream_fun_fun$ )
(declare-fun smap2$f (A_a_prod_a_a_a_prod_fun_fun$ A_a_prod_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun smap2$g (A_a_prod_a_a_prod_a_a_prod_fun_fun$ )A_a_prod_stream_a_a_prod_stream_a_a_prod_stream_fun_fun$ )
(declare-fun smap2$h (A_a_a_prod_a_prod_a_fun_fun$ A_stream$ A_a_prod_a_prod_stream$ )A_stream$ )
(declare-fun smap2$i (A_a_a_a_prod_prod_a_fun_fun$ A_stream$ A_a_a_prod_prod_stream$ )A_stream$ )
(declare-fun until$a (A_a_prod_a_prod_stream_bool_fun$ )A_a_prod_a_prod_stream_bool_fun_a_a_prod_a_prod_stream_bool_fun_fun$ )
(declare-fun until$b (A_a_a_prod_prod_stream_bool_fun$ )A_a_a_prod_prod_stream_bool_fun_a_a_a_prod_prod_stream_bool_fun_fun$ )
(declare-fun until$c (A_a_prod_stream_bool_fun$ )A_a_prod_stream_bool_fun_a_a_prod_stream_bool_fun_fun$ )
(declare-fun until$d (A_stream_bool_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun fun_app$ (A_a_prod_a_a_prod_prod_stream_a_a_prod_a_a_prod_prod_stream_fun$ A_a_prod_a_a_prod_prod_stream$ )A_a_prod_a_a_prod_prod_stream$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun sfilter$ (A_a_prod_bool_fun$ )A_a_prod_stream_a_a_prod_stream_fun$ )
(declare-fun smember$ (A$ )A_stream_bool_fun$ )
(declare-fun fun_app$a (A_a_prod_a_prod_stream_a_a_prod_a_prod_stream_fun$ A_a_prod_a_prod_stream$ )A_a_prod_a_prod_stream$ )
(declare-fun fun_app$b (A_a_a_prod_prod_stream_a_a_a_prod_prod_stream_fun$ A_a_a_prod_prod_stream$ )A_a_a_prod_prod_stream$ )
(declare-fun fun_app$c (A_a_prod_stream_a_a_prod_stream_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun fun_app$d (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$e (A_a_prod_a_a_prod_prod_stream_a_a_prod_a_a_prod_prod_fun$ A_a_prod_a_a_prod_prod_stream$ )A_a_prod_a_a_prod_prod$ )
(declare-fun fun_app$f (A_a_prod_a_prod_stream_a_a_prod_a_prod_fun$ A_a_prod_a_prod_stream$ )A_a_prod_a_prod$ )
(declare-fun fun_app$g (A_a_a_prod_prod_stream_a_a_a_prod_prod_fun$ A_a_a_prod_prod_stream$ )A_a_a_prod_prod$ )
(declare-fun fun_app$h (A_a_prod_stream_a_a_prod_fun$ A_a_prod_stream$ )A_a_prod$ )
(declare-fun fun_app$i (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$j (A_a_prod_stream_a_a_prod_stream_fun_a_a_prod_stream_a_a_prod_stream_fun_fun$ A_a_prod_stream_a_a_prod_stream_fun$ )A_a_prod_stream_a_a_prod_stream_fun$ )
(declare-fun fun_app$k (A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ A_stream_a_stream_fun$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$l (A_stream_a_stream_a_stream_fun_fun$ A_stream$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$m (A_a_prod_stream_a_stream_a_stream_fun_fun$ A_a_prod_stream$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$n (A_stream_a_a_prod_stream_a_a_prod_stream_fun_fun$ A_stream$ )A_a_prod_stream_a_a_prod_stream_fun$ )
(declare-fun fun_app$o (A_a_prod_stream_a_a_prod_stream_a_a_prod_stream_fun_fun$ A_a_prod_stream$ )A_a_prod_stream_a_a_prod_stream_fun$ )
(declare-fun fun_app$p (A_a_prod_a_a_prod_prod_stream_bool_fun$ A_a_prod_a_a_prod_prod_stream$ )Bool )
(declare-fun fun_app$q (A_a_prod_a_a_prod_prod_stream_bool_fun_a_a_prod_a_a_prod_prod_stream_bool_fun_fun$ A_a_prod_a_a_prod_prod_stream_bool_fun$ )A_a_prod_a_a_prod_prod_stream_bool_fun$ )
(declare-fun fun_app$r (A_a_prod_a_prod_stream_bool_fun$ A_a_prod_a_prod_stream$ )Bool )
(declare-fun fun_app$s (A_a_prod_a_prod_stream_bool_fun_a_a_prod_a_prod_stream_bool_fun_fun$ A_a_prod_a_prod_stream_bool_fun$ )A_a_prod_a_prod_stream_bool_fun$ )
(declare-fun fun_app$t (A_a_a_prod_prod_stream_bool_fun$ A_a_a_prod_prod_stream$ )Bool )
(declare-fun fun_app$u (A_a_a_prod_prod_stream_bool_fun_a_a_a_prod_prod_stream_bool_fun_fun$ A_a_a_prod_prod_stream_bool_fun$ )A_a_a_prod_prod_stream_bool_fun$ )
(declare-fun fun_app$v (A_a_prod_stream_bool_fun$ A_a_prod_stream$ )Bool )
(declare-fun fun_app$w (A_a_prod_stream_bool_fun_a_a_prod_stream_bool_fun_fun$ A_a_prod_stream_bool_fun$ )A_a_prod_stream_bool_fun$ )
(declare-fun fun_app$x (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$y (A_stream_bool_fun_a_stream_bool_fun_fun$ A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun fun_app$z (A_a_prod_a_fun$ A_a_prod$ )A$ )
(declare-fun sfilter$a (A_bool_fun$ )A_stream_a_stream_fun$ )
(declare-fun smember$a (A_a_prod$ )A_a_prod_stream_bool_fun$ )
(declare-fun fun_app$aa (A_a_prod_a_a_prod_a_fun_fun$ A_a_prod$ )A_a_prod_a_fun$ )
(declare-fun fun_app$ab (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod$ )
(declare-fun fun_app$ac (A_a_prod_a_a_prod_a_a_prod_fun_fun$ A_a_prod$ )A_a_prod_a_a_prod_fun$ )
(declare-fun fun_app$ad (A_a_a_prod_fun$ A$ )A_a_prod$ )
(declare-fun fun_app$ae (A_a_prod_a_a_a_prod_fun_fun$ A_a_prod$ )A_a_a_prod_fun$ )
(declare-fun fun_app$af (A_a_fun$ A$ )A$ )
(declare-fun fun_app$ag (A_a_prod_a_a_fun_fun$ A_a_prod$ )A_a_fun$ )
(declare-fun fun_app$ah (A_a_a_prod_a_a_prod_fun_fun$ A$ )A_a_prod_a_a_prod_fun$ )
(declare-fun fun_app$ai (A_a_a_prod_a_fun_fun$ A$ )A_a_prod_a_fun$ )
(declare-fun fun_app$aj (A_a_a_a_prod_fun_fun$ A$ )A_a_a_prod_fun$ )
(declare-fun fun_app$ak (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$al (A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ A_a_prod_stream$ )A_a_prod_stream_bool_fun$ )
(declare-fun fun_app$am (A_stream_a_stream_bool_fun_fun$ A_stream$ )A_stream_bool_fun$ )
(declare-fun fun_app$an (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun fun_app$ao (A_bool_fun$ A$ )Bool )
(declare-fun pred_stream$ (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun sdrop_while$ (A_a_prod_bool_fun$ )A_a_prod_stream_a_a_prod_stream_fun$ )
(declare-fun sinterleave$ (A_a_prod_a_a_prod_prod_stream$ A_a_prod_a_a_prod_prod_stream$ )A_a_prod_a_a_prod_prod_stream$ )
(declare-fun pred_stream$a (A_a_prod_bool_fun$ )A_a_prod_stream_bool_fun$ )
(declare-fun sdrop_while$a (A_bool_fun$ )A_stream_a_stream_fun$ )
(declare-fun sinterleave$a (A_a_prod_a_prod_stream$ A_a_prod_a_prod_stream$ )A_a_prod_a_prod_stream$ )
(declare-fun sinterleave$b (A_a_a_prod_prod_stream$ A_a_a_prod_prod_stream$ )A_a_a_prod_prod_stream$ )
(declare-fun sinterleave$c (A_a_prod_stream$ )A_a_prod_stream_a_a_prod_stream_fun$ )
(declare-fun sinterleave$d (A_stream$ )A_stream_a_stream_fun$ )
(declare-fun unfold_stream$ (A_a_prod_stream_a_a_prod_fun$ )A_a_prod_stream_a_a_prod_stream_fun_a_a_prod_stream_a_a_prod_stream_fun_fun$ )
(declare-fun unfold_stream$a (A_stream_a_fun$ )A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ )
(declare-fun unfold_stream$b (A_a_prod_a_a_prod_prod_stream_a_a_prod_a_a_prod_prod_fun$ A_a_prod_a_a_prod_prod_stream_a_a_prod_a_a_prod_prod_stream_fun$ A_a_prod_a_a_prod_prod_stream$ )A_a_prod_a_a_prod_prod_stream$ )
(declare-fun unfold_stream$c (A_a_prod_a_prod_stream_a_a_prod_a_prod_fun$ A_a_prod_a_prod_stream_a_a_prod_a_prod_stream_fun$ A_a_prod_a_prod_stream$ )A_a_prod_a_prod_stream$ )
(declare-fun unfold_stream$d (A_a_a_prod_prod_stream_a_a_a_prod_prod_fun$ A_a_a_prod_prod_stream_a_a_a_prod_prod_stream_fun$ A_a_a_prod_prod_stream$ )A_a_a_prod_prod_stream$ )
(declare-fun llist_of_stream$ (A_stream$ )A_llist$ )
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_stream$ ))(! (= (fun_app$ uua$ ?v0 )(stl$b ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_stream$ ))(! (= (fun_app$a uuc$ ?v0 )(stl$c ?v0 )):pattern ((fun_app$a uuc$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_stream$ ))(! (= (fun_app$b uue$ ?v0 )(stl$d ?v0 )):pattern ((fun_app$b uue$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(! (= (fun_app$c uug$ ?v0 )(stl$a ?v0 )):pattern ((fun_app$c uug$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$d uui$ ?v0 )(stl$ ?v0 )):pattern ((fun_app$d uui$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_stream$ ))(! (= (fun_app$e uu$ ?v0 )(shd$b ?v0 )):pattern ((fun_app$e uu$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_stream$ ))(! (= (fun_app$f uub$ ?v0 )(shd$c ?v0 )):pattern ((fun_app$f uub$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_stream$ ))(! (= (fun_app$g uud$ ?v0 )(shd$d ?v0 )):pattern ((fun_app$g uud$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(! (= (fun_app$h uuf$ ?v0 )(shd$a ?v0 )):pattern ((fun_app$h uuf$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$i uuh$ ?v0 )(shd$ ?v0 )):pattern ((fun_app$i uuh$ ?v0 )))):named a9 ))
(assert (! (not (= (ltl$ (llist_of_stream$ xs$ ))(llist_of_stream$ (stl$ xs$ )))):named a10 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lnull$ (llist_of_stream$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_fun$ )(?v1 A_a_prod_stream_a_a_prod_stream_fun$ )(?v2 A_a_prod_stream$ ))(= (stl$a (fun_app$c (fun_app$j (unfold_stream$ ?v0 )?v1 )?v2 ))(fun_app$c (fun_app$j (unfold_stream$ ?v0 )?v1 )(fun_app$c ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(= (stl$ (fun_app$d (fun_app$k (unfold_stream$a ?v0 )?v1 )?v2 ))(fun_app$d (fun_app$k (unfold_stream$a ?v0 )?v1 )(fun_app$d ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_stream$ )(?v1 A_a_prod_a_a_prod_prod_stream$ ))(= (stl$b (sinterleave$ ?v0 ?v1 ))(sinterleave$ ?v1 (stl$b ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_stream$ )(?v1 A_a_prod_a_prod_stream$ ))(= (stl$c (sinterleave$a ?v0 ?v1 ))(sinterleave$a ?v1 (stl$c ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_stream$ )(?v1 A_a_a_prod_prod_stream$ ))(= (stl$d (sinterleave$b ?v0 ?v1 ))(sinterleave$b ?v1 (stl$d ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(= (stl$a (fun_app$c (sinterleave$c ?v0 )?v1 ))(fun_app$c (sinterleave$c ?v1 )(stl$a ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$ (fun_app$d (sinterleave$d ?v0 )?v1 ))(fun_app$d (sinterleave$d ?v1 )(stl$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$ (fun_app$d (fun_app$l (smap2$ ?v0 )?v1 )?v2 ))(fun_app$d (fun_app$l (smap2$ ?v0 )(stl$ ?v1 ))(stl$ ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_a_a_prod_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ ))(= (stl$ (smap2$a ?v0 ?v1 ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$a ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_a_prod_a_a_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ ))(= (stl$ (fun_app$d (fun_app$m (smap2$b ?v0 )?v1 )?v2 ))(fun_app$d (fun_app$m (smap2$b ?v0 )(stl$a ?v1 ))(stl$ ?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$a (smap2$c ?v0 ?v1 ?v2 ))(smap2$c ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_a_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(= (stl$ (smap2$d ?v0 ?v1 ?v2 ))(smap2$d ?v0 (stl$a ?v1 )(stl$a ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_a_a_prod_a_a_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ ))(= (stl$a (fun_app$c (fun_app$n (smap2$e ?v0 )?v1 )?v2 ))(fun_app$c (fun_app$n (smap2$e ?v0 )(stl$ ?v1 ))(stl$a ?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_a_prod_a_a_a_prod_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ ))(= (stl$a (smap2$f ?v0 ?v1 ?v2 ))(smap2$f ?v0 (stl$a ?v1 )(stl$ ?v2 )))):named a25 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_a_a_prod_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(= (stl$a (fun_app$c (fun_app$o (smap2$g ?v0 )?v1 )?v2 ))(fun_app$c (fun_app$o (smap2$g ?v0 )(stl$a ?v1 ))(stl$a ?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_a_a_prod_a_prod_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_prod_a_prod_stream$ ))(= (stl$ (smap2$h ?v0 ?v1 ?v2 ))(smap2$h ?v0 (stl$ ?v1 )(stl$c ?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_a_a_a_prod_prod_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_a_prod_prod_stream$ ))(= (stl$ (smap2$i ?v0 ?v1 ?v2 ))(smap2$i ?v0 (stl$ ?v1 )(stl$d ?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_stream_bool_fun$ )(?v1 A_a_prod_a_a_prod_prod_stream_bool_fun$ )(?v2 A_a_prod_a_a_prod_prod_stream$ ))(= (fun_app$p (fun_app$q (until$ ?v0 )?v1 )?v2 )(or (exists ((?v3 A_a_prod_a_a_prod_prod_stream$ ))(and (= ?v2 ?v3 )(fun_app$p ?v1 ?v3 )))(exists ((?v3 A_a_prod_a_a_prod_prod_stream$ ))(and (= ?v2 ?v3 )(and (fun_app$p ?v0 ?v3 )(fun_app$p (fun_app$q (until$ ?v0 )?v1 )(stl$b ?v3 )))))))):named a29 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_stream_bool_fun$ )(?v1 A_a_prod_a_prod_stream_bool_fun$ )(?v2 A_a_prod_a_prod_stream$ ))(= (fun_app$r (fun_app$s (until$a ?v0 )?v1 )?v2 )(or (exists ((?v3 A_a_prod_a_prod_stream$ ))(and (= ?v2 ?v3 )(fun_app$r ?v1 ?v3 )))(exists ((?v3 A_a_prod_a_prod_stream$ ))(and (= ?v2 ?v3 )(and (fun_app$r ?v0 ?v3 )(fun_app$r (fun_app$s (until$a ?v0 )?v1 )(stl$c ?v3 )))))))):named a30 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_stream_bool_fun$ )(?v1 A_a_a_prod_prod_stream_bool_fun$ )(?v2 A_a_a_prod_prod_stream$ ))(= (fun_app$t (fun_app$u (until$b ?v0 )?v1 )?v2 )(or (exists ((?v3 A_a_a_prod_prod_stream$ ))(and (= ?v2 ?v3 )(fun_app$t ?v1 ?v3 )))(exists ((?v3 A_a_a_prod_prod_stream$ ))(and (= ?v2 ?v3 )(and (fun_app$t ?v0 ?v3 )(fun_app$t (fun_app$u (until$b ?v0 )?v1 )(stl$d ?v3 )))))))):named a31 ))
(assert (! (forall ((?v0 A_a_prod_stream_bool_fun$ )(?v1 A_a_prod_stream_bool_fun$ )(?v2 A_a_prod_stream$ ))(= (fun_app$v (fun_app$w (until$c ?v0 )?v1 )?v2 )(or (exists ((?v3 A_a_prod_stream$ ))(and (= ?v2 ?v3 )(fun_app$v ?v1 ?v3 )))(exists ((?v3 A_a_prod_stream$ ))(and (= ?v2 ?v3 )(and (fun_app$v ?v0 ?v3 )(fun_app$v (fun_app$w (until$c ?v0 )?v1 )(stl$a ?v3 )))))))):named a32 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(= (fun_app$x (fun_app$y (until$d ?v0 )?v1 )?v2 )(or (exists ((?v3 A_stream$ ))(and (= ?v2 ?v3 )(fun_app$x ?v1 ?v3 )))(exists ((?v3 A_stream$ ))(and (= ?v2 ?v3 )(and (fun_app$x ?v0 ?v3 )(fun_app$x (fun_app$y (until$d ?v0 )?v1 )(stl$ ?v3 )))))))):named a33 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_stream_bool_fun$ )(?v1 A_a_prod_a_a_prod_prod_stream_bool_fun$ )(?v2 A_a_prod_a_a_prod_prod_stream$ ))(=> (and (fun_app$p (fun_app$q (until$ ?v0 )?v1 )?v2 )(and (forall ((?v3 A_a_prod_a_a_prod_prod_stream$ ))(=> (and (= ?v2 ?v3 )(fun_app$p ?v1 ?v3 ))false ))(forall ((?v3 A_a_prod_a_a_prod_prod_stream$ ))(=> (and (= ?v2 ?v3 )(and (fun_app$p ?v0 ?v3 )(fun_app$p (fun_app$q (until$ ?v0 )?v1 )(stl$b ?v3 ))))false ))))false )):named a34 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_stream_bool_fun$ )(?v1 A_a_prod_a_prod_stream_bool_fun$ )(?v2 A_a_prod_a_prod_stream$ ))(=> (and (fun_app$r (fun_app$s (until$a ?v0 )?v1 )?v2 )(and (forall ((?v3 A_a_prod_a_prod_stream$ ))(=> (and (= ?v2 ?v3 )(fun_app$r ?v1 ?v3 ))false ))(forall ((?v3 A_a_prod_a_prod_stream$ ))(=> (and (= ?v2 ?v3 )(and (fun_app$r ?v0 ?v3 )(fun_app$r (fun_app$s (until$a ?v0 )?v1 )(stl$c ?v3 ))))false ))))false )):named a35 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_stream_bool_fun$ )(?v1 A_a_a_prod_prod_stream_bool_fun$ )(?v2 A_a_a_prod_prod_stream$ ))(=> (and (fun_app$t (fun_app$u (until$b ?v0 )?v1 )?v2 )(and (forall ((?v3 A_a_a_prod_prod_stream$ ))(=> (and (= ?v2 ?v3 )(fun_app$t ?v1 ?v3 ))false ))(forall ((?v3 A_a_a_prod_prod_stream$ ))(=> (and (= ?v2 ?v3 )(and (fun_app$t ?v0 ?v3 )(fun_app$t (fun_app$u (until$b ?v0 )?v1 )(stl$d ?v3 ))))false ))))false )):named a36 ))
(assert (! (forall ((?v0 A_a_prod_stream_bool_fun$ )(?v1 A_a_prod_stream_bool_fun$ )(?v2 A_a_prod_stream$ ))(=> (and (fun_app$v (fun_app$w (until$c ?v0 )?v1 )?v2 )(and (forall ((?v3 A_a_prod_stream$ ))(=> (and (= ?v2 ?v3 )(fun_app$v ?v1 ?v3 ))false ))(forall ((?v3 A_a_prod_stream$ ))(=> (and (= ?v2 ?v3 )(and (fun_app$v ?v0 ?v3 )(fun_app$v (fun_app$w (until$c ?v0 )?v1 )(stl$a ?v3 ))))false ))))false )):named a37 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(=> (and (fun_app$x (fun_app$y (until$d ?v0 )?v1 )?v2 )(and (forall ((?v3 A_stream$ ))(=> (and (= ?v2 ?v3 )(fun_app$x ?v1 ?v3 ))false ))(forall ((?v3 A_stream$ ))(=> (and (= ?v2 ?v3 )(and (fun_app$x ?v0 ?v3 )(fun_app$x (fun_app$y (until$d ?v0 )?v1 )(stl$ ?v3 ))))false ))))false )):named a38 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_stream_bool_fun$ )(?v1 A_a_prod_a_a_prod_prod_stream$ )(?v2 A_a_prod_a_a_prod_prod_stream_bool_fun$ )(?v3 A_a_prod_a_a_prod_prod_stream_bool_fun$ ))(=> (and (fun_app$p ?v0 ?v1 )(forall ((?v4 A_a_prod_a_a_prod_prod_stream$ ))(=> (fun_app$p ?v0 ?v4 )(or (exists ((?v5 A_a_prod_a_a_prod_prod_stream$ ))(and (= ?v4 ?v5 )(fun_app$p ?v2 ?v5 )))(exists ((?v5 A_a_prod_a_a_prod_prod_stream$ ))(and (= ?v4 ?v5 )(and (fun_app$p ?v3 ?v5 )(or (fun_app$p ?v0 (stl$b ?v5 ))(fun_app$p (fun_app$q (until$ ?v3 )?v2 )(stl$b ?v5 ))))))))))(fun_app$p (fun_app$q (until$ ?v3 )?v2 )?v1 ))):named a39 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_stream_bool_fun$ )(?v1 A_a_prod_a_prod_stream$ )(?v2 A_a_prod_a_prod_stream_bool_fun$ )(?v3 A_a_prod_a_prod_stream_bool_fun$ ))(=> (and (fun_app$r ?v0 ?v1 )(forall ((?v4 A_a_prod_a_prod_stream$ ))(=> (fun_app$r ?v0 ?v4 )(or (exists ((?v5 A_a_prod_a_prod_stream$ ))(and (= ?v4 ?v5 )(fun_app$r ?v2 ?v5 )))(exists ((?v5 A_a_prod_a_prod_stream$ ))(and (= ?v4 ?v5 )(and (fun_app$r ?v3 ?v5 )(or (fun_app$r ?v0 (stl$c ?v5 ))(fun_app$r (fun_app$s (until$a ?v3 )?v2 )(stl$c ?v5 ))))))))))(fun_app$r (fun_app$s (until$a ?v3 )?v2 )?v1 ))):named a40 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_stream_bool_fun$ )(?v1 A_a_a_prod_prod_stream$ )(?v2 A_a_a_prod_prod_stream_bool_fun$ )(?v3 A_a_a_prod_prod_stream_bool_fun$ ))(=> (and (fun_app$t ?v0 ?v1 )(forall ((?v4 A_a_a_prod_prod_stream$ ))(=> (fun_app$t ?v0 ?v4 )(or (exists ((?v5 A_a_a_prod_prod_stream$ ))(and (= ?v4 ?v5 )(fun_app$t ?v2 ?v5 )))(exists ((?v5 A_a_a_prod_prod_stream$ ))(and (= ?v4 ?v5 )(and (fun_app$t ?v3 ?v5 )(or (fun_app$t ?v0 (stl$d ?v5 ))(fun_app$t (fun_app$u (until$b ?v3 )?v2 )(stl$d ?v5 ))))))))))(fun_app$t (fun_app$u (until$b ?v3 )?v2 )?v1 ))):named a41 ))
(assert (! (forall ((?v0 A_a_prod_stream_bool_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream_bool_fun$ )(?v3 A_a_prod_stream_bool_fun$ ))(=> (and (fun_app$v ?v0 ?v1 )(forall ((?v4 A_a_prod_stream$ ))(=> (fun_app$v ?v0 ?v4 )(or (exists ((?v5 A_a_prod_stream$ ))(and (= ?v4 ?v5 )(fun_app$v ?v2 ?v5 )))(exists ((?v5 A_a_prod_stream$ ))(and (= ?v4 ?v5 )(and (fun_app$v ?v3 ?v5 )(or (fun_app$v ?v0 (stl$a ?v5 ))(fun_app$v (fun_app$w (until$c ?v3 )?v2 )(stl$a ?v5 ))))))))))(fun_app$v (fun_app$w (until$c ?v3 )?v2 )?v1 ))):named a42 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ )(?v3 A_stream_bool_fun$ ))(=> (and (fun_app$x ?v0 ?v1 )(forall ((?v4 A_stream$ ))(=> (fun_app$x ?v0 ?v4 )(or (exists ((?v5 A_stream$ ))(and (= ?v4 ?v5 )(fun_app$x ?v2 ?v5 )))(exists ((?v5 A_stream$ ))(and (= ?v4 ?v5 )(and (fun_app$x ?v3 ?v5 )(or (fun_app$x ?v0 (stl$ ?v5 ))(fun_app$x (fun_app$y (until$d ?v3 )?v2 )(stl$ ?v5 ))))))))))(fun_app$x (fun_app$y (until$d ?v3 )?v2 )?v1 ))):named a43 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_stream_bool_fun$ )(?v1 A_a_prod_a_a_prod_prod_stream$ )(?v2 A_a_prod_a_a_prod_prod_stream_bool_fun$ ))(=> (and (fun_app$p ?v0 ?v1 )(fun_app$p (fun_app$q (until$ ?v0 )?v2 )(stl$b ?v1 )))(fun_app$p (fun_app$q (until$ ?v0 )?v2 )?v1 ))):named a44 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_stream_bool_fun$ )(?v1 A_a_prod_a_prod_stream$ )(?v2 A_a_prod_a_prod_stream_bool_fun$ ))(=> (and (fun_app$r ?v0 ?v1 )(fun_app$r (fun_app$s (until$a ?v0 )?v2 )(stl$c ?v1 )))(fun_app$r (fun_app$s (until$a ?v0 )?v2 )?v1 ))):named a45 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_stream_bool_fun$ )(?v1 A_a_a_prod_prod_stream$ )(?v2 A_a_a_prod_prod_stream_bool_fun$ ))(=> (and (fun_app$t ?v0 ?v1 )(fun_app$t (fun_app$u (until$b ?v0 )?v2 )(stl$d ?v1 )))(fun_app$t (fun_app$u (until$b ?v0 )?v2 )?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_a_prod_stream_bool_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream_bool_fun$ ))(=> (and (fun_app$v ?v0 ?v1 )(fun_app$v (fun_app$w (until$c ?v0 )?v2 )(stl$a ?v1 )))(fun_app$v (fun_app$w (until$c ?v0 )?v2 )?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ ))(=> (and (fun_app$x ?v0 ?v1 )(fun_app$x (fun_app$y (until$d ?v0 )?v2 )(stl$ ?v1 )))(fun_app$x (fun_app$y (until$d ?v0 )?v2 )?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$a (szip$ ?v0 ?v1 ))(szip$ (stl$ ?v0 )(stl$ ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_prod_stream$ ))(= (stl$d (szip$a ?v0 ?v1 ))(szip$a (stl$ ?v0 )(stl$a ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_stream$ ))(= (stl$c (szip$b ?v0 ?v1 ))(szip$b (stl$a ?v0 )(stl$ ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(= (stl$b (szip$c ?v0 ?v1 ))(szip$c (stl$a ?v0 )(stl$a ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_prod_a_prod_stream$ ))(= (stl$e (szip$d ?v0 ?v1 ))(szip$d (stl$ ?v0 )(stl$c ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_a_prod_prod_stream$ ))(= (stl$f (szip$e ?v0 ?v1 ))(szip$e (stl$ ?v0 )(stl$d ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_stream$ )(?v1 A_stream$ ))(= (stl$g (szip$f ?v0 ?v1 ))(szip$f (stl$c ?v0 )(stl$ ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_stream$ )(?v1 A_stream$ ))(= (stl$h (szip$g ?v0 ?v1 ))(szip$g (stl$d ?v0 )(stl$ ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_prod_a_a_prod_prod_stream$ ))(= (stl$i (szip$h ?v0 ?v1 ))(szip$h (stl$ ?v0 )(stl$b ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_a_prod_stream$ ))(= (stl$j (szip$i ?v0 ?v1 ))(szip$i (stl$a ?v0 )(stl$c ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_a_prod_stream_bool_fun$ )(?v1 A_a_prod_stream_bool_fun$ )(?v2 A_a_prod_stream$ )(?v3 A_a_prod_stream_bool_fun$ )(?v4 A_a_prod_stream_bool_fun$ ))(=> (and (fun_app$v (fun_app$w (until$c ?v0 )?v1 )?v2 )(and (forall ((?v5 A_a_prod_stream$ ))(=> (fun_app$v ?v0 ?v5 )(fun_app$v ?v3 ?v5 )))(forall ((?v5 A_a_prod_stream$ ))(=> (fun_app$v ?v1 ?v5 )(fun_app$v ?v4 ?v5 )))))(fun_app$v (fun_app$w (until$c ?v3 )?v4 )?v2 ))):named a59 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ )(?v3 A_stream_bool_fun$ )(?v4 A_stream_bool_fun$ ))(=> (and (fun_app$x (fun_app$y (until$d ?v0 )?v1 )?v2 )(and (forall ((?v5 A_stream$ ))(=> (fun_app$x ?v0 ?v5 )(fun_app$x ?v3 ?v5 )))(forall ((?v5 A_stream$ ))(=> (fun_app$x ?v1 ?v5 )(fun_app$x ?v4 ?v5 )))))(fun_app$x (fun_app$y (until$d ?v3 )?v4 )?v2 ))):named a60 ))
(assert (! (forall ((?v0 A_a_prod_stream_bool_fun$ )(?v1 A_a_prod_stream_bool_fun$ )(?v2 A_a_prod_stream$ )(?v3 A_a_prod_stream_bool_fun$ ))(=> (and (fun_app$v (fun_app$w (until$c ?v0 )?v1 )?v2 )(forall ((?v4 A_a_prod_stream$ ))(=> (fun_app$v ?v1 ?v4 )(fun_app$v ?v3 ?v4 ))))(fun_app$v (fun_app$w (until$c ?v0 )?v3 )?v2 ))):named a61 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ )(?v3 A_stream_bool_fun$ ))(=> (and (fun_app$x (fun_app$y (until$d ?v0 )?v1 )?v2 )(forall ((?v4 A_stream$ ))(=> (fun_app$x ?v1 ?v4 )(fun_app$x ?v3 ?v4 ))))(fun_app$x (fun_app$y (until$d ?v0 )?v3 )?v2 ))):named a62 ))
(assert (! (forall ((?v0 A_a_prod_stream_bool_fun$ )(?v1 A_a_prod_stream_bool_fun$ )(?v2 A_a_prod_stream$ )(?v3 A_a_prod_stream_bool_fun$ ))(=> (and (fun_app$v (fun_app$w (until$c ?v0 )?v1 )?v2 )(forall ((?v4 A_a_prod_stream$ ))(=> (fun_app$v ?v0 ?v4 )(fun_app$v ?v3 ?v4 ))))(fun_app$v (fun_app$w (until$c ?v3 )?v1 )?v2 ))):named a63 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ )(?v3 A_stream_bool_fun$ ))(=> (and (fun_app$x (fun_app$y (until$d ?v0 )?v1 )?v2 )(forall ((?v4 A_stream$ ))(=> (fun_app$x ?v0 ?v4 )(fun_app$x ?v3 ?v4 ))))(fun_app$x (fun_app$y (until$d ?v3 )?v1 )?v2 ))):named a64 ))
(assert (! (forall ((?v0 A_a_prod_stream_bool_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream_bool_fun$ ))(=> (fun_app$v ?v0 ?v1 )(fun_app$v (fun_app$w (until$c ?v2 )?v0 )?v1 ))):named a65 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ ))(=> (fun_app$x ?v0 ?v1 )(fun_app$x (fun_app$y (until$d ?v2 )?v0 )?v1 ))):named a66 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(lnull$ (ltl$ ?v0 )))):named a67 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a68 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a69 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a70 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a71 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_prod_a_fun_fun$ )(?v2 A_a_prod_stream$ )(?v3 A_a_prod_stream$ ))(= (fun_app$d (sdrop$ ?v0 )(smap2$d ?v1 ?v2 ?v3 ))(smap2$d ?v1 (fun_app$c (sdrop$a ?v0 )?v2 )(fun_app$c (sdrop$a ?v0 )?v3 )))):named a72 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_prod_a_a_prod_fun_fun$ )(?v2 A_a_prod_stream$ )(?v3 A_a_prod_stream$ ))(= (fun_app$c (sdrop$a ?v0 )(fun_app$c (fun_app$o (smap2$g ?v1 )?v2 )?v3 ))(fun_app$c (fun_app$o (smap2$g ?v1 )(fun_app$c (sdrop$a ?v0 )?v2 ))(fun_app$c (sdrop$a ?v0 )?v3 )))):named a73 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_a_prod_fun_fun$ )(?v2 A_a_prod_stream$ )(?v3 A_stream$ ))(= (fun_app$c (sdrop$a ?v0 )(smap2$f ?v1 ?v2 ?v3 ))(smap2$f ?v1 (fun_app$c (sdrop$a ?v0 )?v2 )(fun_app$d (sdrop$ ?v0 )?v3 )))):named a74 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_fun_fun$ )(?v2 A_a_prod_stream$ )(?v3 A_stream$ ))(= (fun_app$d (sdrop$ ?v0 )(fun_app$d (fun_app$m (smap2$b ?v1 )?v2 )?v3 ))(fun_app$d (fun_app$m (smap2$b ?v1 )(fun_app$c (sdrop$a ?v0 )?v2 ))(fun_app$d (sdrop$ ?v0 )?v3 )))):named a75 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_a_a_prod_fun_fun$ )(?v2 A_stream$ )(?v3 A_a_prod_stream$ ))(= (fun_app$c (sdrop$a ?v0 )(fun_app$c (fun_app$n (smap2$e ?v1 )?v2 )?v3 ))(fun_app$c (fun_app$n (smap2$e ?v1 )(fun_app$d (sdrop$ ?v0 )?v2 ))(fun_app$c (sdrop$a ?v0 )?v3 )))):named a76 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_a_fun_fun$ )(?v2 A_stream$ )(?v3 A_a_prod_stream$ ))(= (fun_app$d (sdrop$ ?v0 )(smap2$a ?v1 ?v2 ?v3 ))(smap2$a ?v1 (fun_app$d (sdrop$ ?v0 )?v2 )(fun_app$c (sdrop$a ?v0 )?v3 )))):named a77 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_a_prod_fun_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (fun_app$c (sdrop$a ?v0 )(smap2$c ?v1 ?v2 ?v3 ))(smap2$c ?v1 (fun_app$d (sdrop$ ?v0 )?v2 )(fun_app$d (sdrop$ ?v0 )?v3 )))):named a78 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_fun_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (fun_app$d (sdrop$ ?v0 )(fun_app$d (fun_app$l (smap2$ ?v1 )?v2 )?v3 ))(fun_app$d (fun_app$l (smap2$ ?v1 )(fun_app$d (sdrop$ ?v0 )?v2 ))(fun_app$d (sdrop$ ?v0 )?v3 )))):named a79 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_a_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$d ?v0 ?v1 ?v2 )?v3 )(fun_app$z (fun_app$aa ?v0 (snth$a ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a80 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_a_a_prod_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ )(?v3 Nat$ ))(= (snth$a (fun_app$c (fun_app$o (smap2$g ?v0 )?v1 )?v2 )?v3 )(fun_app$ab (fun_app$ac ?v0 (snth$a ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a81 ))
(assert (! (forall ((?v0 A_a_prod_a_a_a_prod_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (snth$a (smap2$f ?v0 ?v1 ?v2 )?v3 )(fun_app$ad (fun_app$ae ?v0 (snth$a ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a82 ))
(assert (! (forall ((?v0 A_a_prod_a_a_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (snth$ (fun_app$d (fun_app$m (smap2$b ?v0 )?v1 )?v2 )?v3 )(fun_app$af (fun_app$ag ?v0 (snth$a ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a83 ))
(assert (! (forall ((?v0 A_a_a_prod_a_a_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ )(?v3 Nat$ ))(= (snth$a (fun_app$c (fun_app$n (smap2$e ?v0 )?v1 )?v2 )?v3 )(fun_app$ab (fun_app$ah ?v0 (snth$ ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a84 ))
(assert (! (forall ((?v0 A_a_a_prod_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$a ?v0 ?v1 ?v2 )?v3 )(fun_app$z (fun_app$ai ?v0 (snth$ ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a85 ))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (snth$a (smap2$c ?v0 ?v1 ?v2 )?v3 )(fun_app$ad (fun_app$aj ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a86 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (snth$ (fun_app$d (fun_app$l (smap2$ ?v0 )?v1 )?v2 )?v3 )(fun_app$af (fun_app$ak ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a87 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_fun$ )(?v1 A_a_prod_stream_a_a_prod_stream_fun$ )(?v2 A_a_prod_stream$ )(?v3 A_a_prod$ )(?v4 A_a_prod_stream$ ))(= (= (fun_app$c (fun_app$j (unfold_stream$ ?v0 )?v1 )?v2 )(sCons$a ?v3 ?v4 ))(and (= ?v3 (fun_app$h ?v0 ?v2 ))(= ?v4 (fun_app$c (fun_app$j (unfold_stream$ ?v0 )?v1 )(fun_app$c ?v1 ?v2 )))))):named a88 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(= (= (fun_app$d (fun_app$k (unfold_stream$a ?v0 )?v1 )?v2 )(sCons$ ?v3 ?v4 ))(and (= ?v3 (fun_app$i ?v0 ?v2 ))(= ?v4 (fun_app$d (fun_app$k (unfold_stream$a ?v0 )?v1 )(fun_app$d ?v1 ?v2 )))))):named a89 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_a_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ )(?v3 A_stream$ ))(= (= (smap2$d ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$z (fun_app$aa ?v0 (snth$a ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a90 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_a_a_prod_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ )(?v3 A_a_prod_stream$ ))(= (= (fun_app$c (fun_app$o (smap2$g ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$ab (fun_app$ac ?v0 (snth$a ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a91 ))
(assert (! (forall ((?v0 A_a_prod_a_a_a_prod_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ )(?v3 A_a_prod_stream$ ))(= (= (smap2$f ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$ad (fun_app$ae ?v0 (snth$a ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a92 ))
(assert (! (forall ((?v0 A_a_prod_a_a_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (= (fun_app$d (fun_app$m (smap2$b ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$af (fun_app$ag ?v0 (snth$a ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a93 ))
(assert (! (forall ((?v0 A_a_a_prod_a_a_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ )(?v3 A_a_prod_stream$ ))(= (= (fun_app$c (fun_app$n (smap2$e ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$ab (fun_app$ah ?v0 (snth$ ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a94 ))
(assert (! (forall ((?v0 A_a_a_prod_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ )(?v3 A_stream$ ))(= (= (smap2$a ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$z (fun_app$ai ?v0 (snth$ ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a95 ))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_a_prod_stream$ ))(= (= (smap2$c ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$ad (fun_app$aj ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a96 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (= (fun_app$d (fun_app$l (smap2$ ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$af (fun_app$ak ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a97 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (ltl$ (lappend$ ?v0 ?v1 ))(ite (lnull$ ?v0 )(ltl$ ?v1 )(lappend$ (ltl$ ?v0 )?v1 )))):named a98 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(= (shd$a (fun_app$c (sinterleave$c ?v0 )?v1 ))(shd$a ?v0 ))):named a99 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$ (fun_app$d (sinterleave$d ?v0 )?v1 ))(shd$ ?v0 ))):named a100 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$ )(?v1 A_a_prod_a_a_prod_prod_stream$ )(?v2 A_a_prod_a_a_prod_prod$ )(?v3 A_a_prod_a_a_prod_prod_stream$ ))(= (= (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a101 ))
(assert (! (forall ((?v0 A_a_prod_a_prod$ )(?v1 A_a_prod_a_prod_stream$ )(?v2 A_a_prod_a_prod$ )(?v3 A_a_prod_a_prod_stream$ ))(= (= (sCons$c ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a102 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_stream$ )(?v2 A_a_a_prod_prod$ )(?v3 A_a_a_prod_prod_stream$ ))(= (= (sCons$d ?v0 ?v1 )(sCons$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a103 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a104 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a105 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (lappend$ ?v0 ?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (lappend$ ?v0 ?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a107 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_stream$ ))(= (unfold_stream$b uu$ uua$ ?v0 )?v0 )):named a108 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_stream$ ))(= (unfold_stream$c uub$ uuc$ ?v0 )?v0 )):named a109 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_stream$ ))(= (unfold_stream$d uud$ uue$ ?v0 )?v0 )):named a110 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(= (fun_app$c (fun_app$j (unfold_stream$ uuf$ )uug$ )?v0 )?v0 )):named a111 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$d (fun_app$k (unfold_stream$a uuh$ )uui$ )?v0 )?v0 )):named a112 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ ))(= (sdrop$b ?v0 (szip$a ?v1 ?v2 ))(szip$a (fun_app$d (sdrop$ ?v0 )?v1 )(fun_app$c (sdrop$a ?v0 )?v2 )))):named a113 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ ))(= (sdrop$c ?v0 (szip$b ?v1 ?v2 ))(szip$b (fun_app$c (sdrop$a ?v0 )?v1 )(fun_app$d (sdrop$ ?v0 )?v2 )))):named a114 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(= (sdrop$d ?v0 (szip$c ?v1 ?v2 ))(szip$c (fun_app$c (sdrop$a ?v0 )?v1 )(fun_app$c (sdrop$a ?v0 )?v2 )))):named a115 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (fun_app$c (sdrop$a ?v0 )(szip$ ?v1 ?v2 ))(szip$ (fun_app$d (sdrop$ ?v0 )?v1 )(fun_app$d (sdrop$ ?v0 )?v2 )))):named a116 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_stream$ ))(= (sCons$d (shd$d ?v0 )(stl$d ?v0 ))?v0 )):named a117 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(= (sCons$a (shd$a ?v0 )(stl$a ?v0 ))?v0 )):named a118 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a119 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$ (fun_app$d (sdrop$ ?v0 )?v1 ))(snth$ ?v1 ?v0 ))):named a120 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (shd$ (sCons$ ?v0 ?v1 ))?v0 ):pattern ((sCons$ ?v0 ?v1 )))):named a121 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ ))(! (= (shd$a (sCons$a ?v0 ?v1 ))?v0 ):pattern ((sCons$a ?v0 ?v1 )))):named a122 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a123 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(=> (forall ((?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a124 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a125 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))(and (= (shd$a ?v0 )?v1 )(= (stl$a ?v0 )?v2 )))):named a126 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))(and (= (shd$ ?v0 )?v1 )(= (stl$ ?v0 )?v2 )))):named a127 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(=> (=> (= ?v0 (sCons$a (shd$a ?v0 )(stl$a ?v0 )))false )false )):named a128 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (=> (= ?v0 (sCons$ (shd$ ?v0 )(stl$ ?v0 )))false )false )):named a129 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (lnull$ ?v0 )(= (lappend$ ?v0 ?v1 )?v1 )):pattern ((lappend$ ?v0 ?v1 )))):named a130 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (lnull$ ?v0 )(= (lappend$ ?v1 ?v0 )?v1 )):pattern ((lappend$ ?v1 ?v0 )))):named a131 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lnull$ ?v0 )(lnull$ ?v1 ))(lnull$ (lappend$ ?v0 ?v1 )))):named a132 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(not (lnull$ (lappend$ ?v0 ?v1 ))))):named a133 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (fun_app$d (fun_app$l (smap2$ ?v0 )?v1 )?v2 )(sCons$ (fun_app$af (fun_app$ak ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(fun_app$d (fun_app$l (smap2$ ?v0 )(stl$ ?v1 ))(stl$ ?v2 ))))):named a134 ))
(assert (! (forall ((?v0 A_a_a_prod_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ ))(= (smap2$a ?v0 ?v1 ?v2 )(sCons$ (fun_app$z (fun_app$ai ?v0 (shd$ ?v1 ))(shd$a ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$a ?v2 ))))):named a135 ))
(assert (! (forall ((?v0 A_a_prod_a_a_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ ))(= (fun_app$d (fun_app$m (smap2$b ?v0 )?v1 )?v2 )(sCons$ (fun_app$af (fun_app$ag ?v0 (shd$a ?v1 ))(shd$ ?v2 ))(fun_app$d (fun_app$m (smap2$b ?v0 )(stl$a ?v1 ))(stl$ ?v2 ))))):named a136 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_a_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(= (smap2$d ?v0 ?v1 ?v2 )(sCons$ (fun_app$z (fun_app$aa ?v0 (shd$a ?v1 ))(shd$a ?v2 ))(smap2$d ?v0 (stl$a ?v1 )(stl$a ?v2 ))))):named a137 ))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (smap2$c ?v0 ?v1 ?v2 )(sCons$a (fun_app$ad (fun_app$aj ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$c ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a138 ))
(assert (! (forall ((?v0 A_a_a_prod_a_a_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ ))(= (fun_app$c (fun_app$n (smap2$e ?v0 )?v1 )?v2 )(sCons$a (fun_app$ab (fun_app$ah ?v0 (shd$ ?v1 ))(shd$a ?v2 ))(fun_app$c (fun_app$n (smap2$e ?v0 )(stl$ ?v1 ))(stl$a ?v2 ))))):named a139 ))
(assert (! (forall ((?v0 A_a_prod_a_a_a_prod_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ ))(= (smap2$f ?v0 ?v1 ?v2 )(sCons$a (fun_app$ad (fun_app$ae ?v0 (shd$a ?v1 ))(shd$ ?v2 ))(smap2$f ?v0 (stl$a ?v1 )(stl$ ?v2 ))))):named a140 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_a_a_prod_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(= (fun_app$c (fun_app$o (smap2$g ?v0 )?v1 )?v2 )(sCons$a (fun_app$ab (fun_app$ac ?v0 (shd$a ?v1 ))(shd$a ?v2 ))(fun_app$c (fun_app$o (smap2$g ?v0 )(stl$a ?v1 ))(stl$a ?v2 ))))):named a141 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(= (fun_app$c (sinterleave$c ?v0 )?v1 )(sCons$a (shd$a ?v0 )(fun_app$c (sinterleave$c ?v1 )(stl$a ?v0 ))))):named a142 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (fun_app$d (sinterleave$d ?v0 )?v1 )(sCons$ (shd$ ?v0 )(fun_app$d (sinterleave$d ?v1 )(stl$ ?v0 ))))):named a143 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ ))(! (= (stl$a (sCons$a ?v0 ?v1 ))?v1 ):pattern ((sCons$a ?v0 ?v1 )))):named a144 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (stl$ (sCons$ ?v0 ?v1 ))?v1 ):pattern ((sCons$ ?v0 ?v1 )))):named a145 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(=> (and (= (shd$a ?v0 )(shd$a ?v1 ))(= (stl$a ?v0 )(stl$a ?v1 )))(= ?v0 ?v1 ))):named a146 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a147 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(=> (and (fun_app$v (fun_app$al ?v0 ?v1 )?v2 )(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_stream$ ))(=> (fun_app$v (fun_app$al ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(or (fun_app$v (fun_app$al ?v0 (stl$a ?v3 ))(stl$a ?v4 ))(= (stl$a ?v3 )(stl$a ?v4 )))))))(= ?v1 ?v2 ))):named a148 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$x (fun_app$am ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$x (fun_app$am ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$x (fun_app$am ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a149 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(=> (and (fun_app$v (fun_app$al ?v0 ?v1 )?v2 )(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_stream$ ))(=> (fun_app$v (fun_app$al ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(fun_app$v (fun_app$al ?v0 (stl$a ?v3 ))(stl$a ?v4 ))))))(= ?v1 ?v2 ))):named a150 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$x (fun_app$am ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$x (fun_app$am ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$x (fun_app$am ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a151 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (not (lnull$ ?v0 ))(= (lappend$ (ltl$ ?v0 )?v1 )(ltl$ (lappend$ ?v0 ?v1 ))))):named a152 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (fun_app$d (fun_app$l (smap2$ ?v0 )(sCons$ ?v1 ?v2 ))(sCons$ ?v3 ?v4 ))(sCons$ (fun_app$af (fun_app$ak ?v0 ?v1 )?v3 )(fun_app$d (fun_app$l (smap2$ ?v0 )?v2 )?v4 ))):pattern ((fun_app$d (fun_app$l (smap2$ ?v0 )(sCons$ ?v1 ?v2 ))(sCons$ ?v3 ?v4 ))))):named a153 ))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$c ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$a (fun_app$ad (fun_app$aj ?v0 ?v1 )?v3 )(smap2$c ?v0 ?v2 ?v4 ))):pattern ((smap2$c ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a154 ))
(assert (! (forall ((?v0 A_a_a_prod_a_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A_a_prod$ )(?v4 A_a_prod_stream$ ))(! (= (smap2$a ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$ (fun_app$z (fun_app$ai ?v0 ?v1 )?v3 )(smap2$a ?v0 ?v2 ?v4 ))):pattern ((smap2$a ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a155 ))
(assert (! (forall ((?v0 A_a_a_prod_a_a_prod_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A_a_prod$ )(?v4 A_a_prod_stream$ ))(! (= (fun_app$c (fun_app$n (smap2$e ?v0 )(sCons$ ?v1 ?v2 ))(sCons$a ?v3 ?v4 ))(sCons$a (fun_app$ab (fun_app$ah ?v0 ?v1 )?v3 )(fun_app$c (fun_app$n (smap2$e ?v0 )?v2 )?v4 ))):pattern ((fun_app$c (fun_app$n (smap2$e ?v0 )(sCons$ ?v1 ?v2 ))(sCons$a ?v3 ?v4 ))))):named a156 ))
(assert (! (forall ((?v0 A_a_prod_a_a_fun_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (fun_app$d (fun_app$m (smap2$b ?v0 )(sCons$a ?v1 ?v2 ))(sCons$ ?v3 ?v4 ))(sCons$ (fun_app$af (fun_app$ag ?v0 ?v1 )?v3 )(fun_app$d (fun_app$m (smap2$b ?v0 )?v2 )?v4 ))):pattern ((fun_app$d (fun_app$m (smap2$b ?v0 )(sCons$a ?v1 ?v2 ))(sCons$ ?v3 ?v4 ))))):named a157 ))
(assert (! (forall ((?v0 A_a_prod_a_a_a_prod_fun_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$f ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$a (fun_app$ad (fun_app$ae ?v0 ?v1 )?v3 )(smap2$f ?v0 ?v2 ?v4 ))):pattern ((smap2$f ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a158 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_a_fun_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ )(?v3 A_a_prod$ )(?v4 A_a_prod_stream$ ))(! (= (smap2$d ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$ (fun_app$z (fun_app$aa ?v0 ?v1 )?v3 )(smap2$d ?v0 ?v2 ?v4 ))):pattern ((smap2$d ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a159 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_a_a_prod_fun_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ )(?v3 A_a_prod$ )(?v4 A_a_prod_stream$ ))(! (= (fun_app$c (fun_app$o (smap2$g ?v0 )(sCons$a ?v1 ?v2 ))(sCons$a ?v3 ?v4 ))(sCons$a (fun_app$ab (fun_app$ac ?v0 ?v1 )?v3 )(fun_app$c (fun_app$o (smap2$g ?v0 )?v2 )?v4 ))):pattern ((fun_app$c (fun_app$o (smap2$g ?v0 )(sCons$a ?v1 ?v2 ))(sCons$a ?v3 ?v4 ))))):named a160 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$ (fun_app$d (fun_app$l (smap2$ ?v0 )?v1 )?v2 ))(fun_app$af (fun_app$ak ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a161 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(= (fun_app$d (fun_app$k (unfold_stream$a ?v0 )?v1 )?v2 )(sCons$ (fun_app$i ?v0 ?v2 )(fun_app$d (fun_app$k (unfold_stream$a ?v0 )?v1 )(fun_app$d ?v1 ?v2 ))))):named a162 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ ))(= (fun_app$c (sdrop$a ?v0 )(stl$a ?v1 ))(stl$a (fun_app$c (sdrop$a ?v0 )?v1 )))):named a163 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (fun_app$d (sdrop$ ?v0 )(stl$ ?v1 ))(stl$ (fun_app$d (sdrop$ ?v0 )?v1 )))):named a164 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(= (shd$ (fun_app$d (fun_app$k (unfold_stream$a ?v0 )?v1 )?v2 ))(fun_app$i ?v0 ?v2 ))):named a165 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_stream$ ))(! (= (fun_app$d (sinterleave$d (sCons$ ?v0 ?v1 ))?v2 )(sCons$ ?v0 (fun_app$d (sinterleave$d ?v2 )?v1 ))):pattern ((fun_app$d (sinterleave$d (sCons$ ?v0 ?v1 ))?v2 )))):named a166 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(! (= (fun_app$c (sinterleave$c (sCons$a ?v0 ?v1 ))?v2 )(sCons$a ?v0 (fun_app$c (sinterleave$c ?v2 )?v1 ))):pattern ((fun_app$c (sinterleave$c (sCons$a ?v0 ?v1 ))?v2 )))):named a167 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$x (smember$ ?v0 )(sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$x (smember$ ?v0 )?v2 ))):pattern ((fun_app$x (smember$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a168 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (fun_app$v (smember$a ?v0 )(sCons$a ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$v (smember$a ?v0 )?v2 ))):pattern ((fun_app$v (smember$a ?v0 )(sCons$a ?v1 ?v2 ))))):named a169 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_stream$ ))(=> (fun_app$an ?v0 (shd$a ?v1 ))(= (fun_app$c (sfilter$ ?v0 )?v1 )(sCons$a (shd$a ?v1 )(fun_app$c (sfilter$ ?v0 )(stl$a ?v1 )))))):named a170 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(=> (fun_app$ao ?v0 (shd$ ?v1 ))(= (fun_app$d (sfilter$a ?v0 )?v1 )(sCons$ (shd$ ?v1 )(fun_app$d (sfilter$a ?v0 )(stl$ ?v1 )))))):named a171 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$x (pred_stream$ ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$ao ?v0 ?v1 )(fun_app$x (pred_stream$ ?v0 )?v2 ))):pattern ((fun_app$x (pred_stream$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a172 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (fun_app$v (pred_stream$a ?v0 )(sCons$a ?v1 ?v2 ))(and (fun_app$an ?v0 ?v1 )(fun_app$v (pred_stream$a ?v0 )?v2 ))):pattern ((fun_app$v (pred_stream$a ?v0 )(sCons$a ?v1 ?v2 ))))):named a173 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_stream$ ))(=> (not (fun_app$an ?v0 (shd$a ?v1 )))(= (fun_app$c (sfilter$ ?v0 )?v1 )(fun_app$c (sfilter$ ?v0 )(stl$a ?v1 ))))):named a174 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(=> (not (fun_app$ao ?v0 (shd$ ?v1 )))(= (fun_app$d (sfilter$a ?v0 )?v1 )(fun_app$d (sfilter$a ?v0 )(stl$ ?v1 ))))):named a175 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_stream$ ))(= (fun_app$c (sdrop_while$ ?v0 )?v1 )(ite (fun_app$an ?v0 (shd$a ?v1 ))(fun_app$c (sdrop_while$ ?v0 )(stl$a ?v1 ))?v1 ))):named a176 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$d (sdrop_while$a ?v0 )?v1 )(ite (fun_app$ao ?v0 (shd$ ?v1 ))(fun_app$d (sdrop_while$a ?v0 )(stl$ ?v1 ))?v1 ))):named a177 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_prod_stream$ ))(= (szip$a ?v0 ?v1 )(sCons$d (pair$c (shd$ ?v0 )(shd$a ?v1 ))(szip$a (stl$ ?v0 )(stl$a ?v1 ))))):named a178 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_stream$ ))(= (szip$b ?v0 ?v1 )(sCons$c (pair$b (shd$a ?v0 )(shd$ ?v1 ))(szip$b (stl$a ?v0 )(stl$ ?v1 ))))):named a179 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(= (szip$c ?v0 ?v1 )(sCons$b (pair$a (shd$a ?v0 )(shd$a ?v1 ))(szip$c (stl$a ?v0 )(stl$a ?v1 ))))):named a180 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (szip$ ?v0 ?v1 )(sCons$a (pair$ (shd$ ?v0 )(shd$ ?v1 ))(szip$ (stl$ ?v0 )(stl$ ?v1 ))))):named a181 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$a (szip$ ?v0 ?v1 )?v2 )(pair$ (snth$ ?v0 ?v2 )(snth$ ?v1 ?v2 )))):named a182 ))
(check-sat )
;(get-unsat-core )
