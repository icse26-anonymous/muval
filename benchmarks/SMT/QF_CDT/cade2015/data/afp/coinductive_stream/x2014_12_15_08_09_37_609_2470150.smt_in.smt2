;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_stream_bool_fun_a_stream_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun na$ ()Nat$ )
(declare-fun uu$ ()A_stream_bool_fun$ )
(declare-fun alw$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun less$a (Nat$ )Nat_bool_fun$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun until$ (A_stream_bool_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun sfirst$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$a (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$b (A_stream_bool_fun_a_stream_bool_fun_fun$ A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun fun_app$c (Nat_bool_fun$ Nat$ )Bool )
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ uu$ ?v0 )(not (fun_app$ p$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (not (fun_app$ p$ (sdrop$ na$ (stl$ omega$ ))))(fun_app$a (less$ (enat$ na$ ))(sfirst$ p$ (stl$ omega$ ))))):named a1 ))
(assert (! (=> (fun_app$ p$ omega$ )(fun_app$ p$ (stl$ omega$ ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(=> (fun_app$a (less$ (enat$ ?v0 ))(sfirst$ ?v1 ?v2 ))(not (fun_app$ ?v1 (sdrop$ ?v0 ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$a (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (fun_app$ (fun_app$b (until$ uu$ )(alw$ p$ ))?v0 )(= (fun_app$a (less$ (enat$ na$ ))(sfirst$ p$ ?v0 ))(not (fun_app$ p$ (sdrop$ na$ ?v0 )))))):named a7 ))
(assert (! (fun_app$ (fun_app$b (until$ uu$ )(alw$ p$ ))omega$ ):named a8 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$a (less$ ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$a (less$ ?v0 )?v1 )(fun_app$a (less$ ?v1 )?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$c (less$a ?v0 )?v1 )(fun_app$c (less$a ?v1 )?v0 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (fun_app$a (less$ ?v0 )?v1 ))(or (fun_app$a (less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (fun_app$c (less$a ?v0 )?v1 ))(or (fun_app$c (less$a ?v1 )?v0 )(= ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (=> (fun_app$a (less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$a (less$ ?v1 )?v0 )false )))false )):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (fun_app$c (less$a ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$c (less$a ?v1 )?v0 )false )))false )):named a15 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$a (less$ ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$c (less$a ?v3 )?v2 )(fun_app$c ?v0 ?v3 )))(fun_app$c ?v0 ?v2 )))(fun_app$c ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$a (less$ (enat$ ?v0 ))(enat$ ?v1 ))(fun_app$c (less$a ?v0 )?v1 )):pattern ((fun_app$a (less$ (enat$ ?v0 ))(enat$ ?v1 ))))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (and (fun_app$a (less$ ?v0 )(enat$ ?v1 ))(forall ((?v2 Nat$ ))(=> (and (= ?v0 (enat$ ?v2 ))(fun_app$c (less$a ?v2 )?v1 ))false )))false )):named a19 ))
(assert (! (forall ((?v0 Enat$ ))(not (fun_app$a (less$ ?v0 )?v0 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$c (less$a ?v0 )?v0 ))):named a21 ))
(check-sat )
;(get-unsat-core )
