;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun b$ ()B$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun comp$ (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun shd$a ()B_a_fun$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun stl$a ()B_b_fun$ )
(declare-fun fun_app$ (B_a_fun$ B$ )A$ )
(declare-fun smember$ (A$ A_stream$ )Bool )
(declare-fun fun_app$a (B_b_fun$ B$ )B$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun streamsp$ (A_bool_fun$ A_stream$ )Bool )
(declare-fun stream_all$ (A_bool_fun$ A_stream$ )Bool )
(declare-fun pred_stream$ (A_bool_fun$ A_stream$ )Bool )
(declare-fun unfold_stream$ (B_a_fun$ B_b_fun$ B$ )A_stream$ )
(assert (! (not (= (= (unfold_stream$ shd$a stl$a b$ )(sCons$ x$ xs$ ))(and (= x$ (fun_app$ shd$a b$ ))(= xs$ (unfold_stream$ shd$a stl$a (fun_app$a stl$a b$ )))))):named a0 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (unfold_stream$ ?v0 ?v1 ?v2 )(sCons$ (fun_app$ ?v0 ?v2 )(unfold_stream$ ?v0 ?v1 (fun_app$a ?v1 ?v2 ))))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smember$ ?v0 (sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$ ?v0 ?v2 ))):pattern ((smember$ ?v0 (sCons$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (pred_stream$ ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(pred_stream$ ?v0 ?v2 ))):pattern ((pred_stream$ ?v0 (sCons$ ?v1 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (shd$ (unfold_stream$ ?v0 ?v1 ?v2 ))(fun_app$ ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (unfold_stream$ ?v0 ?v1 (fun_app$a ?v1 ?v2 ))(unfold_stream$ (fun_app$c (comp$ ?v0 )?v1 )?v1 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (stl$ (unfold_stream$ ?v0 ?v1 ?v2 ))(unfold_stream$ ?v0 ?v1 (fun_app$a ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$d ?v0 ?v4 ))(= ?v3 (smap$ ?v0 ?v5 ))))))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (stream_all$ ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(stream_all$ ?v0 ?v2 ))):pattern ((stream_all$ ?v0 (sCons$ ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (streamsp$ ?v0 ?v1 )(exists ((?v2 A$ )(?v3 A_stream$ ))(and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$b ?v0 ?v2 )(streamsp$ ?v0 ?v3 )))))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(=> (and (streamsp$ ?v0 ?v1 )(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$b ?v0 ?v2 )(streamsp$ ?v0 ?v3 )))false )))false )):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$d ?v0 (shd$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$d ?v0 (shd$ ?v1 ))?v2 )(= (smap$ ?v0 (stl$ ?v1 ))?v3 )))):named a16 ))
(check-sat )
;(get-unsat-core )
