;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort Bool_stream$ 0 )
(declare-sort A_c_b_fun_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort A_b_prod_c_fun$ 0 )
(declare-sort A_c_prod_a_fun$ 0 )
(declare-sort A_c_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_a_c_prod_fun$ 0 )
(declare-sort C_a_b_prod_fun$ 0 )
(declare-sort C_a_c_prod_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_c_bool_fun_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort A_c_prod_bool_fun$ 0 )
(declare-sort A_b_a_b_prod_fun_fun$ 0 )
(declare-sort A_c_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_c_prod_fun$ 0 )
(declare-sort A_b_prod_b_b_prod_fun$ 0 )
(declare-sort A_b_prod_b_prod_b_fun$ 0 )
(declare-sort A_b_prod_b_prod_c_fun$ 0 )
(declare-sort A_b_prod_c_prod_b_fun$ 0 )
(declare-sort A_c_prod_a_b_prod_fun$ 0 )
(declare-sort A_c_prod_a_c_prod_fun$ 0 )
(declare-sort A_c_prod_b_c_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_b_prod_fun$ 0 )
(declare-sort A_b_prod_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_c_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_c_prod_a_c_prod_fun$ 0 )
(declare-sort A_c_prod_a_b_prod_c_prod_fun$ 0 )
(declare-sort C_b_prod_a_b_prod_b_prod_fun$ 0 )
(declare-sort C_c_prod_a_b_prod_c_prod_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_stream$ 0)
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-sort C_stream$ 0)
(declare-fun shd$ (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$ (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$ (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-fun shd$b (B_stream$)B$)
(declare-fun stl$b (B_stream$)B_stream$)
(declare-fun sCons$b (B$ B_stream$ )B_stream$)
(declare-fun shd$c (C_stream$)C$)
(declare-fun stl$c (C_stream$)C_stream$)
(declare-fun sCons$c (C$ C_stream$ )C_stream$)
(declare-datatypes ()((A_c_prod$ (pair$a (fst$a A$ )(snd$a C$ )))))
(declare-sort A_c_prod_stream$ 0)
(declare-fun shd$d (A_c_prod_stream$)A_c_prod$)
(declare-fun stl$d (A_c_prod_stream$)A_c_prod_stream$)
(declare-fun sCons$d (A_c_prod$ A_c_prod_stream$ )A_c_prod_stream$)
(declare-datatypes ()((A_b_prod_b_prod$ (pair$b (fst$b A_b_prod$ )(snd$b B$ )))))
(declare-sort A_b_prod_b_prod_stream$ 0)
(declare-fun shd$e (A_b_prod_b_prod_stream$)A_b_prod_b_prod$)
(declare-fun stl$e (A_b_prod_b_prod_stream$)A_b_prod_b_prod_stream$)
(declare-fun sCons$e (A_b_prod_b_prod$ A_b_prod_b_prod_stream$ )A_b_prod_b_prod_stream$)
(declare-datatypes ()((A_b_prod_c_prod$ (pair$c (fst$c A_b_prod$ )(snd$c C$ )))))
(declare-sort A_b_prod_c_prod_stream$ 0)
(declare-fun shd$f (A_b_prod_c_prod_stream$)A_b_prod_c_prod$)
(declare-fun stl$f (A_b_prod_c_prod_stream$)A_b_prod_c_prod_stream$)
(declare-fun sCons$f (A_b_prod_c_prod$ A_b_prod_c_prod_stream$ )A_b_prod_c_prod_stream$)
(declare-datatypes ()((B_b_prod$ (pair$d (fst$d B$ )(snd$d B$ )))))
(declare-sort B_b_prod_stream$ 0)
(declare-fun shd$g (B_b_prod_stream$)B_b_prod$)
(declare-fun stl$g (B_b_prod_stream$)B_b_prod_stream$)
(declare-fun sCons$g (B_b_prod$ B_b_prod_stream$ )B_b_prod_stream$)
(declare-datatypes ()((B_c_prod$ (pair$e (fst$e B$ )(snd$e C$ )))))
(declare-sort B_c_prod_stream$ 0)
(declare-fun shd$h (B_c_prod_stream$)B_c_prod$)
(declare-fun stl$h (B_c_prod_stream$)B_c_prod_stream$)
(declare-fun sCons$h (B_c_prod$ B_c_prod_stream$ )B_c_prod_stream$)
(declare-datatypes ()((C_c_prod$ (pair$f (fst$f C$ )(snd$f C$ )))))
(declare-sort C_c_prod_stream$ 0)
(declare-fun shd$i (C_c_prod_stream$)C_c_prod$)
(declare-fun stl$i (C_c_prod_stream$)C_c_prod_stream$)
(declare-fun sCons$i (C_c_prod$ C_c_prod_stream$ )C_c_prod_stream$)
(declare-datatypes ()((C_b_prod$ (pair$g (fst$g C$ )(snd$g B$ )))))
(declare-sort C_b_prod_stream$ 0)
(declare-fun shd$j (C_b_prod_stream$)C_b_prod$)
(declare-fun stl$j (C_b_prod_stream$)C_b_prod_stream$)
(declare-fun sCons$j (C_b_prod$ C_b_prod_stream$ )C_b_prod_stream$)
(declare-fun g$ ()C_b_fun$ )
(declare-fun uu$ (A_b_prod_a_b_prod_fun$ )A_b_prod_c_prod_a_b_prod_fun$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun ys$ ()C_stream$ )
(declare-fun uua$ (A_b_prod_a_b_prod_fun$ )A_b_prod_b_prod_a_b_prod_fun$ )
(declare-fun uub$ (A_b_fun$ )A_b_prod_b_fun$ )
(declare-fun uuc$ (A_a_fun$ )A_c_prod_a_fun$ )
(declare-fun uud$ (A_b_fun$ )A_c_prod_b_fun$ )
(declare-fun uue$ (A_a_fun$ )A_b_prod_a_fun$ )
(declare-fun uuf$ (A_a_b_prod_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun uug$ (A_a_b_prod_fun$ )A_c_prod_a_b_prod_fun$ )
(declare-fun uuh$ (C_b_fun$ )A_c_prod_b_fun$ )
(declare-fun uui$ (C_a_b_prod_fun$ )A_c_prod_a_b_prod_fun$ )
(declare-fun uuj$ (B_a_b_prod_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun uuk$ (B_c_fun$ )A_b_prod_c_fun$ )
(declare-fun uul$ (B_b_fun$ )A_b_prod_b_fun$ )
(declare-fun uum$ (C_b_fun$ )A_b_prod_c_prod_b_fun$ )
(declare-fun uun$ (B_c_fun$ )A_b_prod_b_prod_c_fun$ )
(declare-fun uuo$ (B_b_fun$ )A_b_prod_b_prod_b_fun$ )
(declare-fun uup$ (B_a_c_prod_fun$ )A_b_prod_a_c_prod_fun$ )
(declare-fun uuq$ (C_a_b_prod_fun$ )A_b_prod_c_prod_a_b_prod_fun$ )
(declare-fun uur$ ()B_b_fun$ )
(declare-fun uus$ ()A_b_prod_a_b_prod_fun$ )
(declare-fun uut$ ()A_a_fun$ )
(declare-fun smap$ (C_b_fun$ C_stream$ )B_stream$ )
(declare-fun snth$ (B_stream$ Nat$ )B$ )
(declare-fun szip$ (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun apfst$ (A_a_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun apsnd$ (C_b_fun$ )A_c_prod_a_b_prod_fun$ )
(declare-fun sdrop$ (Nat$ B_stream$ )B_stream$ )
(declare-fun smap$a (A_c_prod_a_b_prod_fun$ A_c_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$b (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$c (A_b_prod_a_b_prod_fun$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$d (A_c_prod_a_c_prod_fun$ A_c_prod_stream$ )A_c_prod_stream$ )
(declare-fun smap$e (A_a_b_prod_fun$ A_stream$ )A_b_prod_stream$ )
(declare-fun smap$f (A_b_prod_a_b_prod_b_prod_fun$ A_b_prod_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun smap$g (A_c_prod_a_b_prod_c_prod_fun$ A_c_prod_stream$ )A_b_prod_c_prod_stream$ )
(declare-fun smap$h (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$i (A_b_prod_b_b_prod_fun$ A_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun smap$j (A_c_prod_b_c_prod_fun$ A_c_prod_stream$ )B_c_prod_stream$ )
(declare-fun smap$k (A_b_prod_a_fun$ A_b_prod_stream$ )A_stream$ )
(declare-fun smap$l (A_b_prod_b_prod_a_b_prod_fun$ A_b_prod_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$m (A_b_prod_c_prod_a_c_prod_fun$ A_b_prod_c_prod_stream$ )A_c_prod_stream$ )
(declare-fun smap$n (C_a_b_prod_fun$ C_stream$ )A_b_prod_stream$ )
(declare-fun smap$o (C_c_prod_a_b_prod_c_prod_fun$ C_c_prod_stream$ )A_b_prod_c_prod_stream$ )
(declare-fun smap$p (C_b_prod_a_b_prod_b_prod_fun$ C_b_prod_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun smap$q (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$r (B_c_fun$ B_stream$ )C_stream$ )
(declare-fun smap$s (C_c_fun$ C_stream$ )C_stream$ )
(declare-fun smap$t (B_a_b_prod_fun$ B_stream$ )A_b_prod_stream$ )
(declare-fun smap$u (B_a_c_prod_fun$ B_stream$ )A_c_prod_stream$ )
(declare-fun smap$v (A_b_prod_bool_fun$ A_b_prod_stream$ )Bool_stream$ )
(declare-fun smap$w (A_c_prod_bool_fun$ A_c_prod_stream$ )Bool_stream$ )
(declare-fun smap$x (A_c_prod_b_fun$ A_c_prod_stream$ )B_stream$ )
(declare-fun smap$y (C_a_c_prod_fun$ C_stream$ )A_c_prod_stream$ )
(declare-fun smap$z (A_b_prod_b_fun$ A_b_prod_stream$ )B_stream$ )
(declare-fun smap2$ (A_b_bool_fun_fun$ A_stream$ B_stream$ )Bool_stream$ )
(declare-fun snth$a (C_stream$ Nat$ )C$ )
(declare-fun snth$b (A_b_prod_stream$ Nat$ )A_b_prod$ )
(declare-fun snth$c (A_c_prod_stream$ Nat$ )A_c_prod$ )
(declare-fun snth$d (A_stream$ Nat$ )A$ )
(declare-fun szip$a (A_stream$ C_stream$ )A_c_prod_stream$ )
(declare-fun szip$b (A_b_prod_stream$ B_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun szip$c (A_b_prod_stream$ C_stream$ )A_b_prod_c_prod_stream$ )
(declare-fun szip$d (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun szip$e (B_stream$ C_stream$ )B_c_prod_stream$ )
(declare-fun szip$f (C_stream$ C_stream$ )C_c_prod_stream$ )
(declare-fun szip$g (C_stream$ B_stream$ )C_b_prod_stream$ )
(declare-fun apfst$a (A_a_fun$ )A_c_prod_a_c_prod_fun$ )
(declare-fun apfst$b (A_a_b_prod_fun$ )A_b_prod_a_b_prod_b_prod_fun$ )
(declare-fun apfst$c (A_a_b_prod_fun$ )A_c_prod_a_b_prod_c_prod_fun$ )
(declare-fun apfst$d (A_b_fun$ )A_b_prod_b_b_prod_fun$ )
(declare-fun apfst$e (A_b_fun$ )A_c_prod_b_c_prod_fun$ )
(declare-fun apfst$f (A_b_prod_a_fun$ )A_b_prod_b_prod_a_b_prod_fun$ )
(declare-fun apfst$g (A_b_prod_a_fun$ )A_b_prod_c_prod_a_c_prod_fun$ )
(declare-fun apfst$h (C_a_b_prod_fun$ )C_c_prod_a_b_prod_c_prod_fun$ )
(declare-fun apfst$i (C_a_b_prod_fun$ )C_b_prod_a_b_prod_b_prod_fun$ )
(declare-fun apsnd$a (C_b_fun$ A_b_prod_c_prod$ )A_b_prod_b_prod$ )
(declare-fun apsnd$b (B_b_fun$ A_b_prod_b_prod$ )A_b_prod_b_prod$ )
(declare-fun apsnd$c (B_b_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun apsnd$d (B_c_fun$ A_b_prod_b_prod$ )A_b_prod_c_prod$ )
(declare-fun apsnd$e (B_c_fun$ A_b_prod$ )A_c_prod$ )
(declare-fun apsnd$f (C_c_fun$ A_b_prod_c_prod$ )A_b_prod_c_prod$ )
(declare-fun apsnd$g (C_c_fun$ A_c_prod$ )A_c_prod$ )
(declare-fun sdrop$a (Nat$ C_stream$ )C_stream$ )
(declare-fun sdrop$b (Nat$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun sdrop$c (Nat$ A_c_prod_stream$ )A_c_prod_stream$ )
(declare-fun sdrop$d (Nat$ A_stream$ )A_stream$ )
(declare-fun smap$aa (A_b_prod_c_prod_a_b_prod_fun$ A_b_prod_c_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$ab (A_c_prod_a_fun$ A_c_prod_stream$ )A_stream$ )
(declare-fun smap$ac (A_b_prod_c_fun$ A_b_prod_stream$ )C_stream$ )
(declare-fun smap$ad (A_b_prod_c_prod_b_fun$ A_b_prod_c_prod_stream$ )B_stream$ )
(declare-fun smap$ae (A_b_prod_b_prod_c_fun$ A_b_prod_b_prod_stream$ )C_stream$ )
(declare-fun smap$af (A_b_prod_b_prod_b_fun$ A_b_prod_b_prod_stream$ )B_stream$ )
(declare-fun smap$ag (A_b_prod_a_c_prod_fun$ A_b_prod_stream$ )A_c_prod_stream$ )
(declare-fun smap2$a (A_c_bool_fun_fun$ A_stream$ C_stream$ )Bool_stream$ )
(declare-fun smap2$b (A_c_b_fun_fun$ A_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$c (A_b_a_b_prod_fun_fun$ A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun smap2$d (A_c_a_b_prod_fun_fun$ A_stream$ C_stream$ )A_b_prod_stream$ )
(declare-fun fun_app$ (A_b_prod_c_prod_a_b_prod_fun$ A_b_prod_c_prod$ )A_b_prod$ )
(declare-fun fun_app$a (C_a_b_prod_fun$ C$ )A_b_prod$ )
(declare-fun fun_app$b (A_c_prod_a_b_prod_fun$ A_c_prod$ )A_b_prod$ )
(declare-fun fun_app$c (A_b_prod_c_prod_b_fun$ A_b_prod_c_prod$ )B$ )
(declare-fun fun_app$d (C_b_fun$ C$ )B$ )
(declare-fun fun_app$e (A_c_prod_b_fun$ A_c_prod$ )B$ )
(declare-fun fun_app$f (A_b_prod_a_c_prod_fun$ A_b_prod$ )A_c_prod$ )
(declare-fun fun_app$g (B_a_c_prod_fun$ B$ )A_c_prod$ )
(declare-fun fun_app$h (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$i (B_a_b_prod_fun$ B$ )A_b_prod$ )
(declare-fun fun_app$j (A_b_prod_b_prod_c_fun$ A_b_prod_b_prod$ )C$ )
(declare-fun fun_app$k (B_c_fun$ B$ )C$ )
(declare-fun fun_app$l (A_b_prod_c_fun$ A_b_prod$ )C$ )
(declare-fun fun_app$m (A_b_prod_b_prod_b_fun$ A_b_prod_b_prod$ )B$ )
(declare-fun fun_app$n (B_b_fun$ B$ )B$ )
(declare-fun fun_app$o (A_b_prod_b_fun$ A_b_prod$ )B$ )
(declare-fun fun_app$p (A_b_prod_b_prod_a_b_prod_fun$ A_b_prod_b_prod$ )A_b_prod$ )
(declare-fun fun_app$q (A_a_b_prod_fun$ A$ )A_b_prod$ )
(declare-fun fun_app$r (A_b_fun$ A$ )B$ )
(declare-fun fun_app$s (A_c_prod_a_fun$ A_c_prod$ )A$ )
(declare-fun fun_app$t (A_a_fun$ A$ )A$ )
(declare-fun fun_app$u (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$v (C_c_fun$ C$ )C$ )
(declare-fun fun_app$w (A_c_prod_a_b_prod_c_prod_fun$ A_c_prod$ )A_b_prod_c_prod$ )
(declare-fun fun_app$x (A_b_prod_a_b_prod_b_prod_fun$ A_b_prod$ )A_b_prod_b_prod$ )
(declare-fun fun_app$y (A_c_prod_a_c_prod_fun$ A_c_prod$ )A_c_prod$ )
(declare-fun fun_app$z (C_a_c_prod_fun$ C$ )A_c_prod$ )
(declare-fun case_prod$ (A_b_bool_fun_fun$ )A_b_prod_bool_fun$ )
(declare-fun fun_app$aa (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$ab (A_c_bool_fun_fun$ A$ )C_bool_fun$ )
(declare-fun fun_app$ac (A_c_prod_bool_fun$ A_c_prod$ )Bool )
(declare-fun fun_app$ad (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$ae (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$af (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun case_prod$a (A_c_bool_fun_fun$ )A_c_prod_bool_fun$ )
(declare-fun case_prod$b (A_c_b_fun_fun$ )A_c_prod_b_fun$ )
(declare-fun case_prod$c (A_b_a_b_prod_fun_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun case_prod$d (A_c_a_b_prod_fun_fun$ )A_c_prod_a_b_prod_fun$ )
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 A_b_prod_c_prod$ ))(! (= (fun_app$ (uuq$ ?v0 )?v1 )(fun_app$a ?v0 (snd$c ?v1 ))):pattern ((fun_app$ (uuq$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 A_c_prod$ ))(! (= (fun_app$b (uui$ ?v0 )?v1 )(fun_app$a ?v0 (snd$a ?v1 ))):pattern ((fun_app$b (uui$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 A_b_prod_c_prod$ ))(! (= (fun_app$c (uum$ ?v0 )?v1 )(fun_app$d ?v0 (snd$c ?v1 ))):pattern ((fun_app$c (uum$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 A_c_prod$ ))(! (= (fun_app$e (uuh$ ?v0 )?v1 )(fun_app$d ?v0 (snd$a ?v1 ))):pattern ((fun_app$e (uuh$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B_a_c_prod_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$f (uup$ ?v0 )?v1 )(fun_app$g ?v0 (snd$ ?v1 ))):pattern ((fun_app$f (uup$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$h (uuj$ ?v0 )?v1 )(fun_app$i ?v0 (snd$ ?v1 ))):pattern ((fun_app$h (uuj$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 A_b_prod_b_prod$ ))(! (= (fun_app$j (uun$ ?v0 )?v1 )(fun_app$k ?v0 (snd$b ?v1 ))):pattern ((fun_app$j (uun$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$l (uuk$ ?v0 )?v1 )(fun_app$k ?v0 (snd$ ?v1 ))):pattern ((fun_app$l (uuk$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_prod_b_prod$ ))(! (= (fun_app$m (uuo$ ?v0 )?v1 )(fun_app$n ?v0 (snd$b ?v1 ))):pattern ((fun_app$m (uuo$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$o (uul$ ?v0 )?v1 )(fun_app$n ?v0 (snd$ ?v1 ))):pattern ((fun_app$o (uul$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_c_prod$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(fun_app$h ?v0 (fst$c ?v1 ))):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_b_prod$ ))(! (= (fun_app$p (uua$ ?v0 )?v1 )(fun_app$h ?v0 (fst$b ?v1 ))):pattern ((fun_app$p (uua$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_c_prod$ ))(! (= (fun_app$b (uug$ ?v0 )?v1 )(fun_app$q ?v0 (fst$a ?v1 ))):pattern ((fun_app$b (uug$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$h (uuf$ ?v0 )?v1 )(fun_app$q ?v0 (fst$ ?v1 ))):pattern ((fun_app$h (uuf$ ?v0 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_c_prod$ ))(! (= (fun_app$e (uud$ ?v0 )?v1 )(fun_app$r ?v0 (fst$a ?v1 ))):pattern ((fun_app$e (uud$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$o (uub$ ?v0 )?v1 )(fun_app$r ?v0 (fst$ ?v1 ))):pattern ((fun_app$o (uub$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_c_prod$ ))(! (= (fun_app$s (uuc$ ?v0 )?v1 )(fun_app$t ?v0 (fst$a ?v1 ))):pattern ((fun_app$s (uuc$ ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$u (uue$ ?v0 )?v1 )(fun_app$t ?v0 (fst$ ?v1 ))):pattern ((fun_app$u (uue$ ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$h uus$ ?v0 )?v0 ):pattern ((fun_app$h uus$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$n uur$ ?v0 )?v0 ):pattern ((fun_app$n uur$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$t uut$ ?v0 )?v0 ):pattern ((fun_app$t uut$ ?v0 )))):named a20 ))
(assert (! (not (= (szip$ xs$ (smap$ g$ ys$ ))(smap$a (apsnd$ g$ )(szip$a xs$ ys$ )))):named a21 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (szip$ (smap$b ?v0 ?v1 )?v2 )(smap$c (apfst$ ?v0 )(szip$ ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (szip$a (smap$b ?v0 ?v1 )?v2 )(smap$d (apfst$a ?v0 )(szip$a ?v1 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (szip$b (smap$e ?v0 ?v1 )?v2 )(smap$f (apfst$b ?v0 )(szip$ ?v1 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (szip$c (smap$e ?v0 ?v1 )?v2 )(smap$g (apfst$c ?v0 )(szip$a ?v1 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (szip$d (smap$h ?v0 ?v1 )?v2 )(smap$i (apfst$d ?v0 )(szip$ ?v1 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (szip$e (smap$h ?v0 ?v1 )?v2 )(smap$j (apfst$e ?v0 )(szip$a ?v1 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 B_stream$ ))(= (szip$ (smap$k ?v0 ?v1 )?v2 )(smap$l (apfst$f ?v0 )(szip$b ?v1 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 C_stream$ ))(= (szip$a (smap$k ?v0 ?v1 )?v2 )(smap$m (apfst$g ?v0 )(szip$c ?v1 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (szip$c (smap$n ?v0 ?v1 )?v2 )(smap$o (apfst$h ?v0 )(szip$f ?v1 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (szip$b (smap$n ?v0 ?v1 )?v2 )(smap$p (apfst$i ?v0 )(szip$g ?v1 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(exists ((?v4 C$ )(?v5 C_stream$ ))(and (= ?v1 (sCons$c ?v4 ?v5 ))(and (= ?v2 (fun_app$d ?v0 ?v4 ))(= ?v3 (smap$ ?v0 ?v5 ))))))):named a32 ))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$ )(?v1 A_c_prod_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (smap$a ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A_c_prod$ )(?v5 A_c_prod_stream$ ))(and (= ?v1 (sCons$d ?v4 ?v5 ))(and (= ?v2 (fun_app$b ?v0 ?v4 ))(= ?v3 (smap$a ?v0 ?v5 ))))))):named a33 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$b ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$t ?v0 ?v4 ))(= ?v3 (smap$b ?v0 ?v5 ))))))):named a34 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$q ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$n ?v0 ?v4 ))(= ?v3 (smap$q ?v0 ?v5 ))))))):named a35 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (smap$r ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$k ?v0 ?v4 ))(= ?v3 (smap$r ?v0 ?v5 ))))))):named a36 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (smap$s ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(exists ((?v4 C$ )(?v5 C_stream$ ))(and (= ?v1 (sCons$c ?v4 ?v5 ))(and (= ?v2 (fun_app$v ?v0 ?v4 ))(= ?v3 (smap$s ?v0 ?v5 ))))))):named a37 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (smap$e ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$q ?v0 ?v4 ))(= ?v3 (smap$e ?v0 ?v5 ))))))):named a38 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (smap$t ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$i ?v0 ?v4 ))(= ?v3 (smap$t ?v0 ?v5 ))))))):named a39 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 C_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (smap$n ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 C$ )(?v5 C_stream$ ))(and (= ?v1 (sCons$c ?v4 ?v5 ))(and (= ?v2 (fun_app$a ?v0 ?v4 ))(= ?v3 (smap$n ?v0 ?v5 ))))))):named a40 ))
(assert (! (forall ((?v0 B_a_c_prod_fun$ )(?v1 B_stream$ )(?v2 A_c_prod$ )(?v3 A_c_prod_stream$ ))(= (= (smap$u ?v0 ?v1 )(sCons$d ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$g ?v0 ?v4 ))(= ?v3 (smap$u ?v0 ?v5 ))))))):named a41 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(! (= (smap2$ ?v0 ?v1 ?v2 )(smap$v (case_prod$ ?v0 )(szip$ ?v1 ?v2 ))):pattern ((smap2$ ?v0 ?v1 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(! (= (smap2$a ?v0 ?v1 ?v2 )(smap$w (case_prod$a ?v0 )(szip$a ?v1 ?v2 ))):pattern ((smap2$a ?v0 ?v1 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(! (= (smap2$b ?v0 ?v1 ?v2 )(smap$x (case_prod$b ?v0 )(szip$a ?v1 ?v2 ))):pattern ((smap2$b ?v0 ?v1 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(! (= (smap2$c ?v0 ?v1 ?v2 )(smap$c (case_prod$c ?v0 )(szip$ ?v1 ?v2 ))):pattern ((smap2$c ?v0 ?v1 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 A_c_a_b_prod_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(! (= (smap2$d ?v0 ?v1 ?v2 )(smap$a (case_prod$d ?v0 )(szip$a ?v1 ?v2 ))):pattern ((smap2$d ?v0 ?v1 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 A_a_b_prod_fun$ )(?v2 A_c_prod$ ))(= (apsnd$a ?v0 (fun_app$w (apfst$c ?v1 )?v2 ))(fun_app$x (apfst$b ?v1 )(fun_app$b (apsnd$ ?v0 )?v2 )))):named a47 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_a_b_prod_fun$ )(?v2 A_b_prod$ ))(= (apsnd$b ?v0 (fun_app$x (apfst$b ?v1 )?v2 ))(fun_app$x (apfst$b ?v1 )(fun_app$h (apsnd$c ?v0 )?v2 )))):named a48 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 A_a_b_prod_fun$ )(?v2 A_b_prod$ ))(= (apsnd$d ?v0 (fun_app$x (apfst$b ?v1 )?v2 ))(fun_app$w (apfst$c ?v1 )(apsnd$e ?v0 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 A_a_b_prod_fun$ )(?v2 A_c_prod$ ))(= (apsnd$f ?v0 (fun_app$w (apfst$c ?v1 )?v2 ))(fun_app$w (apfst$c ?v1 )(apsnd$g ?v0 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 A_a_fun$ )(?v2 A_c_prod$ ))(= (apsnd$g ?v0 (fun_app$y (apfst$a ?v1 )?v2 ))(fun_app$y (apfst$a ?v1 )(apsnd$g ?v0 ?v2 )))):named a51 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 A_a_fun$ )(?v2 A_b_prod$ ))(= (apsnd$e ?v0 (fun_app$h (apfst$ ?v1 )?v2 ))(fun_app$y (apfst$a ?v1 )(apsnd$e ?v0 ?v2 )))):named a52 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_prod$ ))(= (fun_app$h (apsnd$c ?v0 )(fun_app$h (apfst$ ?v1 )?v2 ))(fun_app$h (apfst$ ?v1 )(fun_app$h (apsnd$c ?v0 )?v2 )))):named a53 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 A_a_fun$ )(?v2 A_c_prod$ ))(= (fun_app$b (apsnd$ ?v0 )(fun_app$y (apfst$a ?v1 )?v2 ))(fun_app$h (apfst$ ?v1 )(fun_app$b (apsnd$ ?v0 )?v2 )))):named a54 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_b_fun$ )(?v2 C_stream$ ))(= (sdrop$ ?v0 (smap$ ?v1 ?v2 ))(smap$ ?v1 (sdrop$a ?v0 ?v2 )))):named a55 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_c_prod_a_b_prod_fun$ )(?v2 A_c_prod_stream$ ))(= (sdrop$b ?v0 (smap$a ?v1 ?v2 ))(smap$a ?v1 (sdrop$c ?v0 ?v2 )))):named a56 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (sdrop$ ?v0 (smap$q ?v1 ?v2 ))(smap$q ?v1 (sdrop$ ?v0 ?v2 )))):named a57 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_c_fun$ )(?v2 B_stream$ ))(= (sdrop$a ?v0 (smap$r ?v1 ?v2 ))(smap$r ?v1 (sdrop$ ?v0 ?v2 )))):named a58 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_c_fun$ )(?v2 C_stream$ ))(= (sdrop$a ?v0 (smap$s ?v1 ?v2 ))(smap$s ?v1 (sdrop$a ?v0 ?v2 )))):named a59 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (sdrop$d ?v0 (smap$b ?v1 ?v2 ))(smap$b ?v1 (sdrop$d ?v0 ?v2 )))):named a60 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_b_prod_fun$ )(?v2 B_stream$ ))(= (sdrop$b ?v0 (smap$t ?v1 ?v2 ))(smap$t ?v1 (sdrop$ ?v0 ?v2 )))):named a61 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_c_prod_fun$ )(?v2 B_stream$ ))(= (sdrop$c ?v0 (smap$u ?v1 ?v2 ))(smap$u ?v1 (sdrop$ ?v0 ?v2 )))):named a62 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_a_c_prod_fun$ )(?v2 C_stream$ ))(= (sdrop$c ?v0 (smap$y ?v1 ?v2 ))(smap$y ?v1 (sdrop$a ?v0 ?v2 )))):named a63 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_b_fun$ )(?v2 A_b_prod_stream$ ))(= (sdrop$ ?v0 (smap$z ?v1 ?v2 ))(smap$z ?v1 (sdrop$b ?v0 ?v2 )))):named a64 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 A$ )(?v2 C$ ))(! (= (apsnd$g ?v0 (pair$a ?v1 ?v2 ))(pair$a ?v1 (fun_app$v ?v0 ?v2 ))):pattern ((apsnd$g ?v0 (pair$a ?v1 ?v2 ))))):named a65 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (apsnd$e ?v0 (pair$ ?v1 ?v2 ))(pair$a ?v1 (fun_app$k ?v0 ?v2 ))):pattern ((apsnd$e ?v0 (pair$ ?v1 ?v2 ))))):named a66 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$h (apsnd$c ?v0 )(pair$ ?v1 ?v2 ))(pair$ ?v1 (fun_app$n ?v0 ?v2 ))):pattern ((fun_app$h (apsnd$c ?v0 )(pair$ ?v1 ?v2 ))))):named a67 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 A$ )(?v2 C$ ))(! (= (fun_app$b (apsnd$ ?v0 )(pair$a ?v1 ?v2 ))(pair$ ?v1 (fun_app$d ?v0 ?v2 ))):pattern ((fun_app$b (apsnd$ ?v0 )(pair$a ?v1 ?v2 ))))):named a68 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 C_stream$ ))(= (smap$aa (uu$ ?v0 )(szip$c ?v1 ?v2 ))(smap$c ?v0 ?v1 ))):named a69 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 B_stream$ ))(= (smap$l (uua$ ?v0 )(szip$b ?v1 ?v2 ))(smap$c ?v0 ?v1 ))):named a70 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap$z (uub$ ?v0 )(szip$ ?v1 ?v2 ))(smap$h ?v0 ?v1 ))):named a71 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (smap$ab (uuc$ ?v0 )(szip$a ?v1 ?v2 ))(smap$b ?v0 ?v1 ))):named a72 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (smap$x (uud$ ?v0 )(szip$a ?v1 ?v2 ))(smap$h ?v0 ?v1 ))):named a73 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap$k (uue$ ?v0 )(szip$ ?v1 ?v2 ))(smap$b ?v0 ?v1 ))):named a74 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap$c (uuf$ ?v0 )(szip$ ?v1 ?v2 ))(smap$e ?v0 ?v1 ))):named a75 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (smap$a (uug$ ?v0 )(szip$a ?v1 ?v2 ))(smap$e ?v0 ?v1 ))):named a76 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (smap$x (uuh$ ?v0 )(szip$a ?v1 ?v2 ))(smap$ ?v0 ?v2 ))):named a77 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (smap$a (uui$ ?v0 )(szip$a ?v1 ?v2 ))(smap$n ?v0 ?v2 ))):named a78 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap$c (uuj$ ?v0 )(szip$ ?v1 ?v2 ))(smap$t ?v0 ?v2 ))):named a79 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap$ac (uuk$ ?v0 )(szip$ ?v1 ?v2 ))(smap$r ?v0 ?v2 ))):named a80 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap$z (uul$ ?v0 )(szip$ ?v1 ?v2 ))(smap$q ?v0 ?v2 ))):named a81 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 A_b_prod_stream$ )(?v2 C_stream$ ))(= (smap$ad (uum$ ?v0 )(szip$c ?v1 ?v2 ))(smap$ ?v0 ?v2 ))):named a82 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 A_b_prod_stream$ )(?v2 B_stream$ ))(= (smap$ae (uun$ ?v0 )(szip$b ?v1 ?v2 ))(smap$r ?v0 ?v2 ))):named a83 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_prod_stream$ )(?v2 B_stream$ ))(= (smap$af (uuo$ ?v0 )(szip$b ?v1 ?v2 ))(smap$q ?v0 ?v2 ))):named a84 ))
(assert (! (forall ((?v0 B_a_c_prod_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap$ag (uup$ ?v0 )(szip$ ?v1 ?v2 ))(smap$u ?v0 ?v2 ))):named a85 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 C_stream$ ))(= (smap$aa (uuq$ ?v0 )(szip$c ?v1 ?v2 ))(smap$n ?v0 ?v2 ))):named a86 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$ (smap$ ?v0 ?v1 )?v2 )(fun_app$d ?v0 (snth$a ?v1 ?v2 )))):named a87 ))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$ )(?v1 A_c_prod_stream$ )(?v2 Nat$ ))(= (snth$b (smap$a ?v0 ?v1 )?v2 )(fun_app$b ?v0 (snth$c ?v1 ?v2 )))):named a88 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$ (smap$q ?v0 ?v1 )?v2 )(fun_app$n ?v0 (snth$ ?v1 ?v2 )))):named a89 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$a (smap$r ?v0 ?v1 )?v2 )(fun_app$k ?v0 (snth$ ?v1 ?v2 )))):named a90 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$a (smap$s ?v0 ?v1 )?v2 )(fun_app$v ?v0 (snth$a ?v1 ?v2 )))):named a91 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$d (smap$b ?v0 ?v1 )?v2 )(fun_app$t ?v0 (snth$d ?v1 ?v2 )))):named a92 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$b (smap$t ?v0 ?v1 )?v2 )(fun_app$i ?v0 (snth$ ?v1 ?v2 )))):named a93 ))
(assert (! (forall ((?v0 B_a_c_prod_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$c (smap$u ?v0 ?v1 )?v2 )(fun_app$g ?v0 (snth$ ?v1 ?v2 )))):named a94 ))
(assert (! (forall ((?v0 C_a_c_prod_fun$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$c (smap$y ?v0 ?v1 )?v2 )(fun_app$z ?v0 (snth$a ?v1 ?v2 )))):named a95 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_stream$ )(?v2 Nat$ ))(= (snth$ (smap$z ?v0 ?v1 )?v2 )(fun_app$o ?v0 (snth$b ?v1 ?v2 )))):named a96 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 A_c_prod$ ))(= (fst$a (apsnd$g ?v0 ?v1 ))(fst$a ?v1 ))):named a97 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 A_b_prod$ ))(= (fst$a (apsnd$e ?v0 ?v1 ))(fst$ ?v1 ))):named a98 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_prod$ ))(= (fst$ (fun_app$h (apsnd$c ?v0 )?v1 ))(fst$ ?v1 ))):named a99 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 A_c_prod$ ))(= (fst$ (fun_app$b (apsnd$ ?v0 )?v1 ))(fst$a ?v1 ))):named a100 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 A_c_prod$ )(?v2 C_c_fun$ ))(= (= (apsnd$g ?v0 ?v1 )(apsnd$g ?v2 ?v1 ))(= (fun_app$v ?v0 (snd$a ?v1 ))(fun_app$v ?v2 (snd$a ?v1 ))))):named a101 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_prod$ )(?v2 B_b_fun$ ))(= (= (fun_app$h (apsnd$c ?v0 )?v1 )(fun_app$h (apsnd$c ?v2 )?v1 ))(= (fun_app$n ?v0 (snd$ ?v1 ))(fun_app$n ?v2 (snd$ ?v1 ))))):named a102 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 A_b_prod$ )(?v2 B_c_fun$ ))(= (= (apsnd$e ?v0 ?v1 )(apsnd$e ?v2 ?v1 ))(= (fun_app$k ?v0 (snd$ ?v1 ))(fun_app$k ?v2 (snd$ ?v1 ))))):named a103 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 A_c_prod$ )(?v2 C_b_fun$ ))(= (= (fun_app$b (apsnd$ ?v0 )?v1 )(fun_app$b (apsnd$ ?v2 )?v1 ))(= (fun_app$d ?v0 (snd$a ?v1 ))(fun_app$d ?v2 (snd$a ?v1 ))))):named a104 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 A_c_prod$ ))(= (snd$a (apsnd$g ?v0 ?v1 ))(fun_app$v ?v0 (snd$a ?v1 )))):named a105 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 A_b_prod$ ))(= (snd$a (apsnd$e ?v0 ?v1 ))(fun_app$k ?v0 (snd$ ?v1 )))):named a106 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_prod$ ))(= (snd$ (fun_app$h (apsnd$c ?v0 )?v1 ))(fun_app$n ?v0 (snd$ ?v1 )))):named a107 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 A_c_prod$ ))(= (snd$ (fun_app$b (apsnd$ ?v0 )?v1 ))(fun_app$d ?v0 (snd$a ?v1 )))):named a108 ))
(assert (! (forall ((?v0 A$ )(?v1 C$ )(?v2 A$ )(?v3 C$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a109 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a110 ))
(assert (! (forall ((?v0 A$ )(?v1 C$ )(?v2 A$ )(?v3 C$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a111 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a112 ))
(assert (! (forall ((?v0 A_c_prod$ )(?v1 A_c_bool_fun_fun$ ))(=> (forall ((?v2 A$ )(?v3 C$ ))(=> (= ?v0 (pair$a ?v2 ?v3 ))(fun_app$aa (fun_app$ab ?v1 ?v2 )?v3 )))(fun_app$ac (case_prod$a ?v1 )?v0 ))):named a113 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_bool_fun_fun$ ))(=> (forall ((?v2 A$ )(?v3 B$ ))(=> (= ?v0 (pair$ ?v2 ?v3 ))(fun_app$ad (fun_app$ae ?v1 ?v2 )?v3 )))(fun_app$af (case_prod$ ?v1 )?v0 ))):named a114 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 A$ )(?v2 C$ ))(=> (fun_app$aa (fun_app$ab ?v0 ?v1 )?v2 )(fun_app$ac (case_prod$a ?v0 )(pair$a ?v1 ?v2 )))):named a115 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ ))(=> (fun_app$ad (fun_app$ae ?v0 ?v1 )?v2 )(fun_app$af (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a116 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 A$ )(?v2 C$ ))(=> (fun_app$aa (fun_app$ab ?v0 ?v1 )?v2 )(fun_app$ac (case_prod$a ?v0 )(pair$a ?v1 ?v2 )))):named a117 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ ))(=> (fun_app$ad (fun_app$ae ?v0 ?v1 )?v2 )(fun_app$af (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a118 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a119 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a120 ))
(assert (! (forall ((?v0 A_c_prod$ )(?v1 A_c_prod_stream$ )(?v2 A_c_prod$ )(?v3 A_c_prod_stream$ ))(= (= (sCons$d ?v0 ?v1 )(sCons$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a121 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a122 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (sCons$c ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a123 ))
(assert (! (forall ((?v0 B_stream$ ))(= (smap$q uur$ ?v0 )?v0 )):named a124 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (smap$c uus$ ?v0 )?v0 )):named a125 ))
(assert (! (forall ((?v0 A_stream$ ))(= (smap$b uut$ ?v0 )?v0 )):named a126 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A$ )(?v2 C$ ))(! (= (fun_app$w (apfst$c ?v0 )(pair$a ?v1 ?v2 ))(pair$c (fun_app$q ?v0 ?v1 )?v2 )):pattern ((fun_app$w (apfst$c ?v0 )(pair$a ?v1 ?v2 ))))):named a127 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$x (apfst$b ?v0 )(pair$ ?v1 ?v2 ))(pair$b (fun_app$q ?v0 ?v1 )?v2 )):pattern ((fun_app$x (apfst$b ?v0 )(pair$ ?v1 ?v2 ))))):named a128 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 C$ ))(! (= (fun_app$y (apfst$a ?v0 )(pair$a ?v1 ?v2 ))(pair$a (fun_app$t ?v0 ?v1 )?v2 )):pattern ((fun_app$y (apfst$a ?v0 )(pair$a ?v1 ?v2 ))))):named a129 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$h (apfst$ ?v0 )(pair$ ?v1 ?v2 ))(pair$ (fun_app$t ?v0 ?v1 )?v2 )):pattern ((fun_app$h (apfst$ ?v0 )(pair$ ?v1 ?v2 ))))):named a130 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_c_prod$ )(?v2 A_a_b_prod_fun$ ))(= (= (fun_app$w (apfst$c ?v0 )?v1 )(fun_app$w (apfst$c ?v2 )?v1 ))(= (fun_app$q ?v0 (fst$a ?v1 ))(fun_app$q ?v2 (fst$a ?v1 ))))):named a131 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_b_prod$ )(?v2 A_a_b_prod_fun$ ))(= (= (fun_app$x (apfst$b ?v0 )?v1 )(fun_app$x (apfst$b ?v2 )?v1 ))(= (fun_app$q ?v0 (fst$ ?v1 ))(fun_app$q ?v2 (fst$ ?v1 ))))):named a132 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_c_prod$ )(?v2 A_a_fun$ ))(= (= (fun_app$y (apfst$a ?v0 )?v1 )(fun_app$y (apfst$a ?v2 )?v1 ))(= (fun_app$t ?v0 (fst$a ?v1 ))(fun_app$t ?v2 (fst$a ?v1 ))))):named a133 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_prod$ )(?v2 A_a_fun$ ))(= (= (fun_app$h (apfst$ ?v0 )?v1 )(fun_app$h (apfst$ ?v2 )?v1 ))(= (fun_app$t ?v0 (fst$ ?v1 ))(fun_app$t ?v2 (fst$ ?v1 ))))):named a134 ))
(check-sat )
;(get-unsat-core )
