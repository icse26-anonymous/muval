;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort B_a_prod_a_fun$ 0 )
(declare-sort B_a_prod_b_fun$ 0 )
(declare-sort B_b_prod_a_fun$ 0 )
(declare-sort B_b_prod_b_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_a_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort B_a_prod_b_a_prod_fun$ 0 )
(declare-sort B_a_prod_b_b_prod_fun$ 0 )
(declare-sort B_b_prod_b_a_prod_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-sort B_stream$ 0)
(declare-sort A_stream$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun shd$ (B_stream$)B$)
(declare-fun stl$ (B_stream$)B_stream$)
(declare-fun sCons$ (B$ B_stream$ )B_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-datatypes ()((B_b_prod$ (pair$ (fst$ B$ )(snd$ B$ )))))
(declare-sort B_b_prod_stream$ 0)
(declare-fun shd$b (B_b_prod_stream$)B_b_prod$)
(declare-fun stl$b (B_b_prod_stream$)B_b_prod_stream$)
(declare-fun sCons$b (B_b_prod$ B_b_prod_stream$ )B_b_prod_stream$)
(declare-datatypes ()((B_a_prod$ (pair$a (fst$a B$ )(snd$a A$ )))))
(declare-sort B_a_prod_stream$ 0)
(declare-fun shd$c (B_a_prod_stream$)B_a_prod$)
(declare-fun stl$c (B_a_prod_stream$)B_a_prod_stream$)
(declare-fun sCons$c (B_a_prod$ B_a_prod_stream$ )B_a_prod_stream$)
(declare-datatypes ()((A_b_prod$ (pair$b (fst$b A$ )(snd$b B$ )))))
(declare-sort A_b_prod_stream$ 0)
(declare-fun shd$d (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$d (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$d (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-datatypes ()((A_a_prod$ (pair$c (fst$c A$ )(snd$c A$ )))))
(declare-sort A_a_prod_stream$ 0)
(declare-fun shd$e (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$e (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$e (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-datatypes ()((A_b_b_prod_prod$ (pair$d (fst$d A$ )(snd$d B_b_prod$ )))))
(declare-sort A_b_b_prod_prod_stream$ 0)
(declare-fun shd$f (A_b_b_prod_prod_stream$)A_b_b_prod_prod$)
(declare-fun stl$f (A_b_b_prod_prod_stream$)A_b_b_prod_prod_stream$)
(declare-fun sCons$f (A_b_b_prod_prod$ A_b_b_prod_prod_stream$ )A_b_b_prod_prod_stream$)
(declare-datatypes ()((A_b_a_prod_prod$ (pair$e (fst$e A$ )(snd$e B_a_prod$ )))))
(declare-sort A_b_a_prod_prod_stream$ 0)
(declare-fun shd$g (A_b_a_prod_prod_stream$)A_b_a_prod_prod$)
(declare-fun stl$g (A_b_a_prod_prod_stream$)A_b_a_prod_prod_stream$)
(declare-fun sCons$g (A_b_a_prod_prod$ A_b_a_prod_prod_stream$ )A_b_a_prod_prod_stream$)
(declare-datatypes ()((A_a_b_prod_prod$ (pair$f (fst$f A$ )(snd$f A_b_prod$ )))))
(declare-sort A_a_b_prod_prod_stream$ 0)
(declare-fun shd$h (A_a_b_prod_prod_stream$)A_a_b_prod_prod$)
(declare-fun stl$h (A_a_b_prod_prod_stream$)A_a_b_prod_prod_stream$)
(declare-fun sCons$h (A_a_b_prod_prod$ A_a_b_prod_prod_stream$ )A_a_b_prod_prod_stream$)
(declare-datatypes ()((A_a_a_prod_prod$ (pair$g (fst$g A$ )(snd$g A_a_prod$ )))))
(declare-sort A_a_a_prod_prod_stream$ 0)
(declare-fun shd$i (A_a_a_prod_prod_stream$)A_a_a_prod_prod$)
(declare-fun stl$i (A_a_a_prod_prod_stream$)A_a_a_prod_prod_stream$)
(declare-fun sCons$i (A_a_a_prod_prod$ A_a_a_prod_prod_stream$ )A_a_a_prod_prod_stream$)
(declare-datatypes ()((B_b_b_prod_prod$ (pair$h (fst$h B$ )(snd$h B_b_prod$ )))))
(declare-sort B_b_b_prod_prod_stream$ 0)
(declare-fun shd$j (B_b_b_prod_prod_stream$)B_b_b_prod_prod$)
(declare-fun stl$j (B_b_b_prod_prod_stream$)B_b_b_prod_prod_stream$)
(declare-fun sCons$j (B_b_b_prod_prod$ B_b_b_prod_prod_stream$ )B_b_b_prod_prod_stream$)
(declare-datatypes ()((B_b_a_prod_prod$ (pair$i (fst$i B$ )(snd$i B_a_prod$ )))))
(declare-sort B_b_a_prod_prod_stream$ 0)
(declare-fun shd$k (B_b_a_prod_prod_stream$)B_b_a_prod_prod$)
(declare-fun stl$k (B_b_a_prod_prod_stream$)B_b_a_prod_prod_stream$)
(declare-fun sCons$k (B_b_a_prod_prod$ B_b_a_prod_prod_stream$ )B_b_a_prod_prod_stream$)
(declare-fun f$ ()B_a_fun$ )
(declare-fun xs$ ()B_stream$ )
(declare-fun lmap$ (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun smap$ (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun szip$ (B_stream$ A_stream$ )B_a_prod_stream$ )
(declare-fun apsnd$ (B_a_fun$ )B_b_prod_b_a_prod_fun$ )
(declare-fun lmap$a (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun smap$a (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$b (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$c (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$d (B_b_prod_a_fun$ B_b_prod_stream$ )A_stream$ )
(declare-fun smap$e (B_a_prod_a_fun$ B_a_prod_stream$ )A_stream$ )
(declare-fun smap$f (A_b_prod_a_fun$ A_b_prod_stream$ )A_stream$ )
(declare-fun smap$g (A_a_prod_a_fun$ A_a_prod_stream$ )A_stream$ )
(declare-fun smap$h (B_b_prod_b_fun$ B_b_prod_stream$ )B_stream$ )
(declare-fun smap$i (B_a_prod_b_fun$ B_a_prod_stream$ )B_stream$ )
(declare-fun smap$j (B_b_prod_b_a_prod_fun$ B_b_prod_stream$ )B_a_prod_stream$ )
(declare-fun smap$k (A_b_prod_a_a_prod_fun$ A_b_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap$l (B_b_prod_b_b_prod_fun$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun smap$m (A_b_prod_a_b_prod_fun$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$n (B_a_prod_b_b_prod_fun$ B_a_prod_stream$ )B_b_prod_stream$ )
(declare-fun smap$o (A_a_prod_a_b_prod_fun$ A_a_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$p (B_a_prod_b_a_prod_fun$ B_a_prod_stream$ )B_a_prod_stream$ )
(declare-fun smap$q (A_a_prod_a_a_prod_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun snth$a (B_stream$ Nat$ )B$ )
(declare-fun szip$a (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun szip$b (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun szip$c (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun szip$d (A_stream$ B_b_prod_stream$ )A_b_b_prod_prod_stream$ )
(declare-fun szip$e (A_stream$ B_a_prod_stream$ )A_b_a_prod_prod_stream$ )
(declare-fun szip$f (A_stream$ A_b_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun szip$g (A_stream$ A_a_prod_stream$ )A_a_a_prod_prod_stream$ )
(declare-fun szip$h (B_stream$ B_b_prod_stream$ )B_b_b_prod_prod_stream$ )
(declare-fun szip$i (B_stream$ B_a_prod_stream$ )B_b_a_prod_prod_stream$ )
(declare-fun apsnd$a (B_a_fun$ )A_b_prod_a_a_prod_fun$ )
(declare-fun apsnd$b (B_b_fun$ )B_b_prod_b_b_prod_fun$ )
(declare-fun apsnd$c (B_b_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun apsnd$d (A_b_fun$ )B_a_prod_b_b_prod_fun$ )
(declare-fun apsnd$e (A_b_fun$ )A_a_prod_a_b_prod_fun$ )
(declare-fun apsnd$f (A_a_fun$ )B_a_prod_b_a_prod_fun$ )
(declare-fun apsnd$g (A_a_fun$ )A_a_prod_a_a_prod_fun$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun sdrop$a (Nat$ B_stream$ )B_stream$ )
(declare-fun sdrop$b (Nat$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun sdrop$c (Nat$ B_a_prod_stream$ )B_a_prod_stream$ )
(declare-fun sdrop$d (Nat$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun sdrop$e (Nat$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun sdrop$f (Nat$ A_b_b_prod_prod_stream$ )A_b_b_prod_prod_stream$ )
(declare-fun sdrop$g (Nat$ A_b_a_prod_prod_stream$ )A_b_a_prod_prod_stream$ )
(declare-fun sdrop$h (Nat$ A_a_b_prod_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun sdrop$i (Nat$ A_a_a_prod_prod_stream$ )A_a_a_prod_prod_stream$ )
(declare-fun sdrop$j (Nat$ B_b_b_prod_prod_stream$ )B_b_b_prod_prod_stream$ )
(declare-fun sdrop$k (Nat$ B_b_a_prod_prod_stream$ )B_b_a_prod_prod_stream$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun lfinite$ (B_llist$ )Bool )
(declare-fun fun_app$a (A_b_fun$ A$ )B$ )
(declare-fun fun_app$b (B_b_fun$ B$ )B$ )
(declare-fun fun_app$c (B_a_fun$ B$ )A$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun siterate$ (B_b_fun$ B$ )B_stream$ )
(declare-fun lsublist$a (B_llist$ Nat_set$ )B_llist$ )
(declare-fun siterate$a (A_a_fun$ A$ )A_stream$ )
(declare-fun lstrict_prefix$ (B_llist$ B_llist$ )Bool )
(declare-fun llist_of_stream$ (B_stream$ )B_llist$ )
(declare-fun lstrict_prefix$a (A_llist$ A_llist$ )Bool )
(declare-fun stream_of_llist$ (B_llist$ )B_stream$ )
(declare-fun llist_of_stream$a (A_stream$ )A_llist$ )
(declare-fun stream_of_llist$a (A_llist$ )A_stream$ )
(assert (! (not (= (lmap$ f$ (llist_of_stream$ xs$ ))(llist_of_stream$a (smap$ f$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (= (llist_of_stream$ ?v0 )(llist_of_stream$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (llist_of_stream$a ?v0 )(llist_of_stream$a ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 B_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a3 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$a (llist_of_stream$a ?v0 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 B_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a5 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$a (llist_of_stream$a ?v0 ))?v0 )):named a6 ))
(assert (! (forall ((?v0 B_stream$ ))(not (lnull$ (llist_of_stream$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lnull$a (llist_of_stream$a ?v0 )))):named a8 ))
(assert (! (forall ((?v0 B_stream$ ))(not (lfinite$ (llist_of_stream$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lfinite$a (llist_of_stream$a ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$ ?v0 ?v4 ))(= ?v3 (smap$a ?v0 ?v5 ))))))):named a11 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$b ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$a ?v0 ?v4 ))(= ?v3 (smap$b ?v0 ?v5 ))))))):named a12 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$c ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$b ?v0 ?v4 ))(= ?v3 (smap$c ?v0 ?v5 ))))))):named a13 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$c ?v0 ?v4 ))(= ?v3 (smap$ ?v0 ?v5 ))))))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$ (lmap$a ?v2 ?v0 )(lmap$a ?v2 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$ (lmap$b ?v2 ?v0 )(lmap$b ?v2 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$a (lmap$c ?v2 ?v0 )(lmap$c ?v2 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$a (lmap$ ?v2 ?v0 )(lmap$ ?v2 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 Nat_set$ ))(= (lsublist$ (lmap$c ?v0 ?v1 )?v2 )(lmap$c ?v0 (lsublist$ ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 Nat_set$ ))(= (lsublist$a (lmap$b ?v0 ?v1 )?v2 )(lmap$b ?v0 (lsublist$ ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 Nat_set$ ))(= (lsublist$a (lmap$a ?v0 ?v1 )?v2 )(lmap$a ?v0 (lsublist$a ?v1 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 Nat_set$ ))(= (lsublist$ (lmap$ ?v0 ?v1 )?v2 )(lmap$ ?v0 (lsublist$a ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_stream$ ))(= (sdrop$ ?v0 (smap$ ?v1 ?v2 ))(smap$ ?v1 (sdrop$a ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (sdrop$ ?v0 (smap$a ?v1 ?v2 ))(smap$a ?v1 (sdrop$ ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_stream$ ))(= (sdrop$a ?v0 (smap$b ?v1 ?v2 ))(smap$b ?v1 (sdrop$ ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (sdrop$a ?v0 (smap$c ?v1 ?v2 ))(smap$c ?v1 (sdrop$a ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_a_fun$ )(?v2 B_b_prod_stream$ ))(= (sdrop$ ?v0 (smap$d ?v1 ?v2 ))(smap$d ?v1 (sdrop$b ?v0 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_a_fun$ )(?v2 B_a_prod_stream$ ))(= (sdrop$ ?v0 (smap$e ?v1 ?v2 ))(smap$e ?v1 (sdrop$c ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_stream$ ))(= (sdrop$ ?v0 (smap$f ?v1 ?v2 ))(smap$f ?v1 (sdrop$d ?v0 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_fun$ )(?v2 A_a_prod_stream$ ))(= (sdrop$ ?v0 (smap$g ?v1 ?v2 ))(smap$g ?v1 (sdrop$e ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_b_fun$ )(?v2 B_b_prod_stream$ ))(= (sdrop$a ?v0 (smap$h ?v1 ?v2 ))(smap$h ?v1 (sdrop$b ?v0 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_b_fun$ )(?v2 B_a_prod_stream$ ))(= (sdrop$a ?v0 (smap$i ?v1 ?v2 ))(smap$i ?v1 (sdrop$c ?v0 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$ (smap$a ?v0 ?v1 )?v2 )(fun_app$ ?v0 (snth$ ?v1 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$a (smap$b ?v0 ?v1 )?v2 )(fun_app$a ?v0 (snth$ ?v1 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$a (smap$c ?v0 ?v1 )?v2 )(fun_app$b ?v0 (snth$a ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$ (smap$ ?v0 ?v1 )?v2 )(fun_app$c ?v0 (snth$a ?v1 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (not (lfinite$ ?v0 ))(= (llist_of_stream$ (stream_of_llist$ ?v0 ))?v0 ))):named a37 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$a ?v0 ))(= (llist_of_stream$a (stream_of_llist$a ?v0 ))?v0 ))):named a38 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (smap$c ?v0 (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$b ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (smap$a ?v0 (siterate$a ?v0 ?v1 ))(siterate$a ?v0 (fun_app$ ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_a_fun$ )(?v2 B_stream$ ))(= (szip$ ?v0 (smap$ ?v1 ?v2 ))(smap$j (apsnd$ ?v1 )(szip$a ?v0 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_a_fun$ )(?v2 B_stream$ ))(= (szip$b ?v0 (smap$ ?v1 ?v2 ))(smap$k (apsnd$a ?v1 )(szip$c ?v0 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (szip$a ?v0 (smap$c ?v1 ?v2 ))(smap$l (apsnd$b ?v1 )(szip$a ?v0 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (szip$c ?v0 (smap$c ?v1 ?v2 ))(smap$m (apsnd$c ?v1 )(szip$c ?v0 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_b_fun$ )(?v2 A_stream$ ))(= (szip$a ?v0 (smap$b ?v1 ?v2 ))(smap$n (apsnd$d ?v1 )(szip$ ?v0 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_b_fun$ )(?v2 A_stream$ ))(= (szip$c ?v0 (smap$b ?v1 ?v2 ))(smap$o (apsnd$e ?v1 )(szip$b ?v0 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (szip$ ?v0 (smap$a ?v1 ?v2 ))(smap$p (apsnd$f ?v1 )(szip$ ?v0 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (szip$b ?v0 (smap$a ?v1 ?v2 ))(smap$q (apsnd$g ?v1 )(szip$b ?v0 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a49 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a50 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$c ?v0 ?v1 ))(lnull$a ?v1 ))):named a51 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$b ?v0 ?v1 ))(lnull$a ?v1 ))):named a52 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$a ?v0 ?v1 ))(lnull$ ?v1 ))):named a53 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a54 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$a (lmap$c ?v0 ?v1 ))(lfinite$a ?v1 ))):named a55 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$b ?v0 ?v1 ))(lfinite$a ?v1 ))):named a56 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$ (lmap$a ?v0 ?v1 ))(lfinite$ ?v1 ))):named a57 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$a (lmap$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a58 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (sdrop$e ?v0 (szip$b ?v1 ?v2 ))(szip$b (sdrop$ ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a59 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (sdrop$d ?v0 (szip$c ?v1 ?v2 ))(szip$c (sdrop$ ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a60 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (sdrop$c ?v0 (szip$ ?v1 ?v2 ))(szip$ (sdrop$a ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a61 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (sdrop$b ?v0 (szip$a ?v1 ?v2 ))(szip$a (sdrop$a ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a62 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 B_b_prod_stream$ ))(= (sdrop$f ?v0 (szip$d ?v1 ?v2 ))(szip$d (sdrop$ ?v0 ?v1 )(sdrop$b ?v0 ?v2 )))):named a63 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 B_a_prod_stream$ ))(= (sdrop$g ?v0 (szip$e ?v1 ?v2 ))(szip$e (sdrop$ ?v0 ?v1 )(sdrop$c ?v0 ?v2 )))):named a64 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_b_prod_stream$ ))(= (sdrop$h ?v0 (szip$f ?v1 ?v2 ))(szip$f (sdrop$ ?v0 ?v1 )(sdrop$d ?v0 ?v2 )))):named a65 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ ))(= (sdrop$i ?v0 (szip$g ?v1 ?v2 ))(szip$g (sdrop$ ?v0 ?v1 )(sdrop$e ?v0 ?v2 )))):named a66 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 B_b_prod_stream$ ))(= (sdrop$j ?v0 (szip$h ?v1 ?v2 ))(szip$h (sdrop$a ?v0 ?v1 )(sdrop$b ?v0 ?v2 )))):named a67 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 B_a_prod_stream$ ))(= (sdrop$k ?v0 (szip$i ?v1 ?v2 ))(szip$i (sdrop$a ?v0 ?v1 )(sdrop$c ?v0 ?v2 )))):named a68 ))
(check-sat )
;(get-unsat-core )
