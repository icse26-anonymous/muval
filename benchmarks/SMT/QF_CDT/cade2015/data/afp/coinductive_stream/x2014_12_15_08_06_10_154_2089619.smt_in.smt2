;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-sort A_llist$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun xsa$ ()A_stream$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun sinterleave$ (A_stream$ A_stream$ )A_stream$ )
(declare-fun llist_of_stream$ (A_stream$ )A_llist$ )
(declare-fun stream_of_llist$ (A_llist$ )A_stream$ )
(assert (! (not (member$ (shd$ xsa$ )(lset$ (llist_of_stream$ xsa$ )))):named a0 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (llist_of_stream$ ?v0 )(llist_of_stream$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a2 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a3 ))
(assert (! (forall ((?v0 A_stream$ ))(= (lhd$ (llist_of_stream$ ?v0 ))(shd$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$ ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lnull$ (llist_of_stream$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lfinite$ (llist_of_stream$ ?v0 )))):named a7 ))
(assert (! (member$ x$ (sset$ xs$ )):named a8 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$ (sinterleave$ ?v0 ?v1 ))(shd$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(fun_app$ (lsetp$ ?v1 )?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (fun_app$ (lsetp$ ?v0 )?v1 )(member$ ?v1 (lset$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(= (shd$ (stream_of_llist$ ?v0 ))(lhd$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$ ?v0 ))(= (llist_of_stream$ (stream_of_llist$ ?v0 ))?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$ ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$ ?v1 (lhd$ ?v0 )))false ))false )):named a14 ))
(check-sat )
;(get-unsat-core )
