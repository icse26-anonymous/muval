;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort B_stream_bool_fun$ 0 )
(declare-sort A_b_prod_llist_set$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_llist_bool_fun$ 0 )
(declare-sort A_b_prod_stream_bool_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_b_prod_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_fun_a_b_prod_llist_a_llist_bool_fun_fun_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort A_b_prod_stream$ 0)
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun shd$ (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$ (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$ (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-fun shd$b (B_stream$)B$)
(declare-fun stl$b (B_stream$)B_stream$)
(declare-fun sCons$b (B$ B_stream$ )B_stream$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun b$ ()A_b_prod_stream$ )
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun y$ ()A_llist$ )
(declare-fun uu$ ()A_b_prod_llist_bool_fun$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun ya$ ()B_llist$ )
(declare-fun ys$ ()B_stream$ )
(declare-fun grp$ (A_b_prod_llist_set$ )A_b_prod_llist_a_llist_fun_a_b_prod_llist_a_llist_bool_fun_fun_fun$ )
(declare-fun uua$ ()A_b_prod_a_fun$ )
(declare-fun uub$ ()A_b_prod_b_fun$ )
(declare-fun uuc$ ()A_b_prod_llist_bool_fun$ )
(declare-fun uud$ ()A_llist_bool_fun$ )
(declare-fun uue$ ()B_llist_bool_fun$ )
(declare-fun lmap$ (A_b_prod_a_fun$ )A_b_prod_llist_a_llist_fun$ )
(declare-fun lset$ (A_b_prod_llist$ )A_b_prod_set$ )
(declare-fun smap$ (A_b_prod_b_fun$ A_b_prod_stream$ )B_stream$ )
(declare-fun sset$ (A_b_prod_stream$ )A_b_prod_set$ )
(declare-fun lmap$a (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$b (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$c (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$d (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$e (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$f (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$g (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$h (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lset$a (B_llist$ )B_set$ )
(declare-fun lset$b (A_llist$ )A_set$ )
(declare-fun smap$a (A_b_prod_a_fun$ A_b_prod_stream$ )A_stream$ )
(declare-fun smap$b (B_a_b_prod_fun$ B_stream$ )A_b_prod_stream$ )
(declare-fun smap$c (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$d (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$e (A_a_b_prod_fun$ A_stream$ )A_b_prod_stream$ )
(declare-fun smap$f (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$g (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$h (A_b_prod_a_b_prod_fun$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun sset$a (B_stream$ )B_set$ )
(declare-fun sset$b (A_stream$ )A_set$ )
(declare-fun member$ (A_b_prod_llist$ A_b_prod_llist_set$ )Bool )
(declare-fun collect$ (A_b_prod_bool_fun$ )A_b_prod_set$ )
(declare-fun fun_app$ (A_b_prod_llist_bool_fun$ A_b_prod_llist$ )Bool )
(declare-fun less_eq$ (A_b_prod_set$ A_b_prod_set$ )Bool )
(declare-fun lfinite$ (A_b_prod_llist$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun member$b (B_llist$ B_llist_set$ )Bool )
(declare-fun collect$a (A_b_prod_llist_bool_fun$ )A_b_prod_llist_set$ )
(declare-fun collect$b (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun collect$c (B_llist_bool_fun$ )B_llist_set$ )
(declare-fun fun_app$a (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_b_prod_b_fun$ A_b_prod$ )B$ )
(declare-fun fun_app$d (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$e (A_llist_a_b_prod_llist_bool_fun_fun$ A_llist$ )A_b_prod_llist_bool_fun$ )
(declare-fun fun_app$f (A_b_prod_llist_a_llist_fun_a_b_prod_llist_a_llist_bool_fun_fun_fun$ A_b_prod_llist_a_llist_fun$ )A_b_prod_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$g (A_b_prod_llist_a_llist_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun fun_app$h (A_b_prod_stream_bool_fun$ A_b_prod_stream$ )Bool )
(declare-fun fun_app$i (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$j (B_stream_bool_fun$ B_stream$ )Bool )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun lfinite$b (A_llist$ )Bool )
(declare-fun case_prod$ (A_b_bool_fun_fun$ )A_b_prod_bool_fun$ )
(declare-fun conversep$ (A_b_prod_llist_a_llist_bool_fun_fun$ )A_llist_a_b_prod_llist_bool_fun_fun$ )
(declare-fun llist_of_stream$ (A_b_prod_stream$ )A_b_prod_llist$ )
(declare-fun stream_of_llist$ (A_llist$ )A_stream$ )
(declare-fun llist_of_stream$a (A_stream$ )A_llist$ )
(declare-fun llist_of_stream$b (B_stream$ )B_llist$ )
(declare-fun stream_of_llist$a (B_llist$ )B_stream$ )
(declare-fun stream_of_llist$b (A_b_prod_llist$ )A_b_prod_stream$ )
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$ uu$ ?v0 )(less_eq$ (lset$ ?v0 )(collect$ (case_prod$ p$ )))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$ uuc$ ?v0 )(not (lfinite$ ?v0 ))):pattern ((fun_app$ uuc$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a uue$ ?v0 )(not (lfinite$a ?v0 ))):pattern ((fun_app$a uue$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b uud$ ?v0 )(not (lfinite$b ?v0 ))):pattern ((fun_app$b uud$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$c uub$ ?v0 )(snd$ ?v0 )):pattern ((fun_app$c uub$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$d uua$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$d uua$ ?v0 )))):named a5 ))
(assert (! (not (fun_app$ (fun_app$e (conversep$ (fun_app$f (grp$ (collect$a uu$ ))(lmap$ uua$ )))y$ )(llist_of_stream$ b$ ))):named a6 ))
(assert (! (= xs$ (stream_of_llist$ y$ )):named a7 ))
(assert (! (not (lfinite$b y$ )):named a8 ))
(assert (! (= ys$ (stream_of_llist$a ya$ )):named a9 ))
(assert (! (not (lfinite$a ya$ )):named a10 ))
(assert (! (= (smap$ uub$ b$ )(stream_of_llist$a ya$ )):named a11 ))
(assert (! (= (smap$a uua$ b$ )(stream_of_llist$ y$ )):named a12 ))
(assert (! (less_eq$ (sset$ b$ )(collect$ (case_prod$ p$ ))):named a13 ))
(assert (! (less_eq$ (sset$ b$ )(collect$ (case_prod$ p$ ))):named a14 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (stream_of_llist$b (llist_of_stream$ ?v0 ))?v0 )):named a15 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$a ?v0 ))?v0 )):named a16 ))
(assert (! (forall ((?v0 B_stream$ ))(= (stream_of_llist$a (llist_of_stream$b ?v0 ))?v0 )):named a17 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (stream_of_llist$b (llist_of_stream$ ?v0 ))?v0 )):named a18 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$a ?v0 ))?v0 )):named a19 ))
(assert (! (forall ((?v0 B_stream$ ))(= (stream_of_llist$a (llist_of_stream$b ?v0 ))?v0 )):named a20 ))
(assert (! (forall ((?v0 B_stream$ ))(= (lset$a (llist_of_stream$b ?v0 ))(sset$a ?v0 ))):named a21 ))
(assert (! (forall ((?v0 A_stream$ ))(= (lset$b (llist_of_stream$a ?v0 ))(sset$b ?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (lset$ (llist_of_stream$ ?v0 ))(sset$ ?v0 ))):named a23 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_stream$ ))(= (lmap$a ?v0 (llist_of_stream$b ?v1 ))(llist_of_stream$ (smap$b ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (lmap$b ?v0 (llist_of_stream$b ?v1 ))(llist_of_stream$b (smap$c ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (lmap$c ?v0 (llist_of_stream$b ?v1 ))(llist_of_stream$a (smap$d ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ ))(= (lmap$d ?v0 (llist_of_stream$a ?v1 ))(llist_of_stream$ (smap$e ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (lmap$e ?v0 (llist_of_stream$a ?v1 ))(llist_of_stream$b (smap$f ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (lmap$f ?v0 (llist_of_stream$a ?v1 ))(llist_of_stream$a (smap$g ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_stream$ ))(= (lmap$g ?v0 (llist_of_stream$ ?v1 ))(llist_of_stream$b (smap$ ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ ))(= (fun_app$g (lmap$ ?v0 )(llist_of_stream$ ?v1 ))(llist_of_stream$a (smap$a ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ ))(= (lmap$h ?v0 (llist_of_stream$ ?v1 ))(llist_of_stream$ (smap$h ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(=> (not (lfinite$ ?v0 ))(= (llist_of_stream$ (stream_of_llist$b ?v0 ))?v0 ))):named a33 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$b ?v0 ))(= (llist_of_stream$a (stream_of_llist$ ?v0 ))?v0 ))):named a34 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (not (lfinite$a ?v0 ))(= (llist_of_stream$b (stream_of_llist$a ?v0 ))?v0 ))):named a35 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(=> (and (not (lfinite$ ?v0 ))(not (lfinite$ ?v0 )))(= (sset$ (stream_of_llist$b ?v0 ))(lset$ ?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (not (lfinite$b ?v0 ))(not (lfinite$b ?v0 )))(= (sset$b (stream_of_llist$ ?v0 ))(lset$b ?v0 )))):named a37 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (not (lfinite$a ?v0 ))(not (lfinite$a ?v0 )))(= (sset$a (stream_of_llist$a ?v0 ))(lset$a ?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_b_prod_fun$ ))(=> (not (lfinite$b ?v0 ))(= (smap$e ?v1 (stream_of_llist$ ?v0 ))(stream_of_llist$b (lmap$d ?v1 ?v0 ))))):named a39 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_b_prod_fun$ ))(=> (not (lfinite$a ?v0 ))(= (smap$b ?v1 (stream_of_llist$a ?v0 ))(stream_of_llist$b (lmap$a ?v1 ?v0 ))))):named a40 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_a_b_prod_fun$ ))(=> (not (lfinite$ ?v0 ))(= (smap$h ?v1 (stream_of_llist$b ?v0 ))(stream_of_llist$b (lmap$h ?v1 ?v0 ))))):named a41 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_a_fun$ ))(=> (not (lfinite$ ?v0 ))(= (smap$a ?v1 (stream_of_llist$b ?v0 ))(stream_of_llist$ (fun_app$g (lmap$ ?v1 )?v0 ))))):named a42 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_b_fun$ ))(=> (not (lfinite$ ?v0 ))(= (smap$ ?v1 (stream_of_llist$b ?v0 ))(stream_of_llist$a (lmap$g ?v1 ?v0 ))))):named a43 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ ))(=> (not (lfinite$b ?v0 ))(= (smap$g ?v1 (stream_of_llist$ ?v0 ))(stream_of_llist$ (lmap$f ?v1 ?v0 ))))):named a44 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_fun$ ))(=> (not (lfinite$b ?v0 ))(= (smap$f ?v1 (stream_of_llist$ ?v0 ))(stream_of_llist$a (lmap$e ?v1 ?v0 ))))):named a45 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_fun$ ))(=> (not (lfinite$a ?v0 ))(= (smap$d ?v1 (stream_of_llist$a ?v0 ))(stream_of_llist$ (lmap$c ?v1 ?v0 ))))):named a46 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_b_fun$ ))(=> (not (lfinite$a ?v0 ))(= (smap$c ?v1 (stream_of_llist$a ?v0 ))(stream_of_llist$a (lmap$b ?v1 ?v0 ))))):named a47 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (= (llist_of_stream$b ?v0 )(llist_of_stream$b ?v1 ))(= ?v0 ?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (llist_of_stream$a ?v0 )(llist_of_stream$a ?v1 ))(= ?v0 ?v1 ))):named a49 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_stream$ ))(= (= (llist_of_stream$ ?v0 )(llist_of_stream$ ?v1 ))(= ?v0 ?v1 ))):named a50 ))
(assert (! (forall ((?v0 A_b_prod_stream_bool_fun$ )(?v1 A_b_prod_stream$ ))(=> (forall ((?v2 A_b_prod_llist$ ))(=> (member$ ?v2 (collect$a uuc$ ))(fun_app$h ?v0 (stream_of_llist$b ?v2 ))))(fun_app$h ?v0 ?v1 ))):named a51 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (forall ((?v2 A_llist$ ))(=> (member$a ?v2 (collect$b uud$ ))(fun_app$i ?v0 (stream_of_llist$ ?v2 ))))(fun_app$i ?v0 ?v1 ))):named a52 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_stream$ ))(=> (forall ((?v2 B_llist$ ))(=> (member$b ?v2 (collect$c uue$ ))(fun_app$j ?v0 (stream_of_llist$a ?v2 ))))(fun_app$j ?v0 ?v1 ))):named a53 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(=> (forall ((?v1 A_b_prod_llist$ ))(=> (and (= ?v0 (stream_of_llist$b ?v1 ))(member$ ?v1 (collect$a uuc$ )))false ))false )):named a54 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A_llist$ ))(=> (and (= ?v0 (stream_of_llist$ ?v1 ))(member$a ?v1 (collect$b uud$ )))false ))false )):named a55 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (forall ((?v1 B_llist$ ))(=> (and (= ?v0 (stream_of_llist$a ?v1 ))(member$b ?v1 (collect$c uue$ )))false ))false )):named a56 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_bool_fun$ ))(=> (and (member$a ?v0 (collect$b uud$ ))(forall ((?v2 A_stream$ ))(fun_app$b ?v1 (llist_of_stream$a ?v2 ))))(fun_app$b ?v1 ?v0 ))):named a57 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_bool_fun$ ))(=> (and (member$b ?v0 (collect$c uue$ ))(forall ((?v2 B_stream$ ))(fun_app$a ?v1 (llist_of_stream$b ?v2 ))))(fun_app$a ?v1 ?v0 ))):named a58 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist_bool_fun$ ))(=> (and (member$ ?v0 (collect$a uuc$ ))(forall ((?v2 A_b_prod_stream$ ))(fun_app$ ?v1 (llist_of_stream$ ?v2 ))))(fun_app$ ?v1 ?v0 ))):named a59 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (member$a ?v0 (collect$b uud$ ))(forall ((?v1 A_stream$ ))(=> (= ?v0 (llist_of_stream$a ?v1 ))false )))false )):named a60 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (member$b ?v0 (collect$c uue$ ))(forall ((?v1 B_stream$ ))(=> (= ?v0 (llist_of_stream$b ?v1 ))false )))false )):named a61 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(=> (and (member$ ?v0 (collect$a uuc$ ))(forall ((?v1 A_b_prod_stream$ ))(=> (= ?v0 (llist_of_stream$ ?v1 ))false )))false )):named a62 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (member$ ?v0 (collect$a uuc$ ))(member$ ?v1 (collect$a uuc$ )))(= (= (stream_of_llist$b ?v0 )(stream_of_llist$b ?v1 ))(= ?v0 ?v1 )))):named a63 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (member$a ?v0 (collect$b uud$ ))(member$a ?v1 (collect$b uud$ )))(= (= (stream_of_llist$ ?v0 )(stream_of_llist$ ?v1 ))(= ?v0 ?v1 )))):named a64 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (member$b ?v0 (collect$c uue$ ))(member$b ?v1 (collect$c uue$ )))(= (= (stream_of_llist$a ?v0 )(stream_of_llist$a ?v1 ))(= ?v0 ?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(=> (member$ ?v0 (collect$a uuc$ ))(= (llist_of_stream$ (stream_of_llist$b ?v0 ))?v0 ))):named a66 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$a ?v0 (collect$b uud$ ))(= (llist_of_stream$a (stream_of_llist$ ?v0 ))?v0 ))):named a67 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (member$b ?v0 (collect$c uue$ ))(= (llist_of_stream$b (stream_of_llist$a ?v0 ))?v0 ))):named a68 ))
(assert (! (forall ((?v0 A_stream$ ))(member$a (llist_of_stream$a ?v0 )(collect$b uud$ ))):named a69 ))
(assert (! (forall ((?v0 B_stream$ ))(member$b (llist_of_stream$b ?v0 )(collect$c uue$ ))):named a70 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(member$ (llist_of_stream$ ?v0 )(collect$a uuc$ ))):named a71 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lfinite$b (llist_of_stream$a ?v0 )))):named a72 ))
(assert (! (forall ((?v0 B_stream$ ))(not (lfinite$a (llist_of_stream$b ?v0 )))):named a73 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(not (lfinite$ (llist_of_stream$ ?v0 )))):named a74 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$d ?v0 ?v1 ))(lfinite$b ?v1 ))):named a75 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (lfinite$ (lmap$a ?v0 ?v1 ))(lfinite$a ?v1 ))):named a76 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$ (lmap$h ?v0 ?v1 ))(lfinite$ ?v1 ))):named a77 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$a (lmap$g ?v0 ?v1 ))(lfinite$ ?v1 ))):named a78 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$b (lmap$f ?v0 ?v1 ))(lfinite$b ?v1 ))):named a79 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$b (lmap$c ?v0 ?v1 ))(lfinite$a ?v1 ))):named a80 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$a (lmap$e ?v0 ?v1 ))(lfinite$b ?v1 ))):named a81 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$a (lmap$b ?v0 ?v1 ))(lfinite$a ?v1 ))):named a82 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$b (fun_app$g (lmap$ ?v0 )?v1 ))(lfinite$ ?v1 ))):named a83 ))
(check-sat )
;(get-unsat-core )
