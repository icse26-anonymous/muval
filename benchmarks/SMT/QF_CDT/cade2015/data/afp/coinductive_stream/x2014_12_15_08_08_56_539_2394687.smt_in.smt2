;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_stream_bool_fun_a_stream_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun ev$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uu$ ()A_stream_bool_fun$ )
(declare-fun alw$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uua$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uub$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uuc$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uud$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uue$ (A_stream_bool_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun uuf$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uug$ (A_stream_bool_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun scount$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$a (A_stream_bool_fun_a_stream_bool_fun_fun$ A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun fun_app$b (Enat_bool_fun$ Enat$ )Bool )
(declare-fun infinity$ ()Enat$ )
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ uu$ ?v0 )(not (fun_app$ p$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(not (fun_app$ (alw$ (uua$ ?v0 ))?v1 ))):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(not (fun_app$ (ev$ (uua$ ?v0 ))?v1 ))):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (= (fun_app$ (uud$ ?v0 )?v1 )(not (fun_app$ (alw$ ?v0 )?v1 ))):pattern ((fun_app$ (uud$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (= (fun_app$ (uuf$ ?v0 )?v1 )(not (fun_app$ (ev$ ?v0 )?v1 ))):pattern ((fun_app$ (uuf$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(not (fun_app$ ?v0 ?v1 ))):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(! (= (fun_app$ (fun_app$a (uue$ ?v0 )?v1 )?v2 )(=> (fun_app$ (alw$ ?v0 )?v2 )(fun_app$ (ev$ ?v1 )?v2 ))):pattern ((fun_app$ (fun_app$a (uue$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(! (= (fun_app$ (fun_app$a (uug$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uug$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (not (fun_app$b (less$ (scount$ p$ omega$ ))infinity$ )):named a8 ))
(assert (! (fun_app$ (ev$ (alw$ uu$ ))omega$ ):named a9 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (uub$ ?v0 )(ev$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (uuc$ ?v0 )(alw$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (less$ ?v0 )infinity$ )(not (= ?v0 infinity$ ))):pattern ((less$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (less$ infinity$ )?v0 )false ):pattern ((fun_app$b (less$ infinity$ )?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (ev$ (ev$ ?v0 ))(ev$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (alw$ (alw$ ?v0 ))(alw$ ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(= (not (fun_app$ (ev$ ?v0 )?v1 ))(fun_app$ (alw$ (uua$ ?v0 ))?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(= (not (fun_app$ (alw$ ?v0 )?v1 ))(fun_app$ (ev$ (uua$ ?v0 ))?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (uud$ ?v0 )(ev$ (uua$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(= (fun_app$ (alw$ (fun_app$a (uue$ ?v0 )?v1 ))?v2 )(=> (fun_app$ (ev$ (alw$ ?v0 ))?v2 )(fun_app$ (alw$ (ev$ ?v1 ))?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (uuf$ ?v0 )(alw$ (uua$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ ))(=> (and (fun_app$ (ev$ (alw$ ?v0 ))?v1 )(fun_app$ (ev$ (alw$ ?v2 ))?v1 ))(fun_app$ (ev$ (alw$ (fun_app$a (uug$ ?v0 )?v2 )))?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (fun_app$ (alw$ ?v0 )?v1 )(fun_app$ ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (fun_app$ (alw$ ?v0 )?v1 )(fun_app$ (alw$ (alw$ ?v0 ))?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ ))(=> (and (fun_app$ (alw$ ?v0 )?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$ (alw$ ?v2 )?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ )(?v3 A_stream_bool_fun$ ))(=> (and (fun_app$ (alw$ ?v0 )?v1 )(forall ((?v4 A_stream$ ))(=> (fun_app$ ?v0 ?v4 )(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (fun_app$ (alw$ ?v2 )?v1 )(fun_app$ (alw$ ?v3 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (forall ((?v2 A_stream$ ))(fun_app$ ?v0 ?v2 ))(fun_app$ (alw$ ?v0 )?v1 ))):named a26 ))
(check-sat )
;(get-unsat-core )
