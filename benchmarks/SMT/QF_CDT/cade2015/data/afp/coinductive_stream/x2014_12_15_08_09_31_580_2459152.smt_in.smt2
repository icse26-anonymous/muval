;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_stream_bool_fun_a_stream_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun uu$ ()A_stream_bool_fun$ )
(declare-fun alw$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uua$ ()A_stream_bool_fun$ )
(declare-fun uub$ (A_stream_bool_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun uuc$ (A_stream_bool_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun omega$ ()A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun until$ (A_stream_bool_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun sfirst$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$a (A_stream_bool_fun_a_stream_bool_fun_fun$ A_stream_bool_fun$ )A_stream_bool_fun$ )
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ uu$ ?v0 )(not (fun_app$ p$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(! (= (fun_app$ (fun_app$a (uuc$ ?v0 )?v1 )?v2 )(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uuc$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(! (= (fun_app$ (fun_app$a (uub$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uub$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ uua$ ?v0 )false ):pattern ((fun_app$ uua$ ?v0 )))):named a3 ))
(assert (! (not (= (less$ (enat$ n$ )(sfirst$ p$ omega$ ))(not (fun_app$ p$ (sdrop$ n$ omega$ ))))):named a4 ))
(assert (! (fun_app$ (fun_app$a (until$ uu$ )(alw$ p$ ))omega$ ):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(=> (less$ (enat$ ?v0 )(sfirst$ ?v1 ?v2 ))(not (fun_app$ ?v1 (sdrop$ ?v0 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (fun_app$a (until$ ?v0 )uua$ )(alw$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (alw$ (alw$ ?v0 ))(alw$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$ (alw$ ?v0 )?v1 )(forall ((?v2 Nat$ ))(fun_app$ ?v0 (sdrop$ ?v2 ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(=> (fun_app$ (alw$ ?v0 )?v1 )(fun_app$ (alw$ ?v0 )(sdrop$ ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(= (fun_app$ (alw$ (fun_app$a (uub$ ?v0 )?v1 ))?v2 )(and (fun_app$ (alw$ ?v0 )?v2 )(fun_app$ (alw$ ?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$ (alw$ uua$ )?v0 )false )):named a14 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ ))(=> (and (fun_app$ (alw$ ?v0 )?v1 )(fun_app$ (alw$ (fun_app$a (uuc$ ?v0 )?v2 ))?v1 ))(fun_app$ (alw$ ?v2 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ )(?v3 A_stream_bool_fun$ )(?v4 A_stream_bool_fun$ ))(=> (and (fun_app$ (fun_app$a (until$ ?v0 )?v1 )?v2 )(and (forall ((?v5 A_stream$ ))(=> (fun_app$ ?v0 ?v5 )(fun_app$ ?v3 ?v5 )))(forall ((?v5 A_stream$ ))(=> (fun_app$ ?v1 ?v5 )(fun_app$ ?v4 ?v5 )))))(fun_app$ (fun_app$a (until$ ?v3 )?v4 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ )(?v3 A_stream_bool_fun$ ))(=> (and (fun_app$ (fun_app$a (until$ ?v0 )?v1 )?v2 )(forall ((?v4 A_stream$ ))(=> (fun_app$ ?v1 ?v4 )(fun_app$ ?v3 ?v4 ))))(fun_app$ (fun_app$a (until$ ?v0 )?v3 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (fun_app$ (alw$ ?v0 )?v1 )(fun_app$ ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (fun_app$ (alw$ ?v0 )?v1 )(fun_app$ (alw$ (alw$ ?v0 ))?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ ))(=> (and (fun_app$ (alw$ ?v0 )?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$ (alw$ ?v2 )?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ )(?v3 A_stream_bool_fun$ ))(=> (and (fun_app$ (alw$ ?v0 )?v1 )(forall ((?v4 A_stream$ ))(=> (fun_app$ ?v0 ?v4 )(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (fun_app$ (alw$ ?v2 )?v1 )(fun_app$ (alw$ ?v3 )?v1 )))):named a21 ))
(check-sat )
;(get-unsat-core )
