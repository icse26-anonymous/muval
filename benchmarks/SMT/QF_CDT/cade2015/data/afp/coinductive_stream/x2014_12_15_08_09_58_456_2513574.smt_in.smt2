;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort Nat_a_stream_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ev_at$ (A_stream_bool_fun$ )Nat_a_stream_bool_fun_fun$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun zero$a ()Nat$ )
(declare-fun sfirst$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$a (Nat_a_stream_bool_fun_fun$ Nat$ )A_stream_bool_fun$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(assert (! (not (= (= (sfirst$ p$ omega$ )(enat$ n$ ))(fun_app$ (fun_app$a (ev_at$ p$ )n$ )omega$ ))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 Nat$ )(?v2 A_stream$ )(?v3 Nat$ ))(=> (and (fun_app$ (fun_app$a (ev_at$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (ev_at$ ?v0 )?v3 )?v2 ))(= ?v1 ?v3 ))):named a2 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (=> (fun_app$ ?v0 ?v1 )(= (sfirst$ ?v0 ?v1 )zero$ )):pattern ((sfirst$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(= (= (sfirst$ ?v0 ?v1 )zero$ )(fun_app$ ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(=> (less$ (enat$ ?v0 )(sfirst$ ?v1 ?v2 ))(not (fun_app$ ?v1 (sdrop$ ?v0 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (= (fun_app$ (fun_app$a (ev_at$ ?v0 )zero$a )?v1 )(fun_app$ ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a (ev_at$ ?v0 )zero$a )?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (the_enat$ (enat$ ?v0 ))?v0 ):pattern ((enat$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 Nat$ )(?v2 A_stream$ ))(=> (fun_app$ (fun_app$a (ev_at$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (sdrop$ ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ (fun_app$a (ev_at$ ?v0 )zero$a )?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (= (plus$ (enat$ ?v0 )?v1 )(plus$ (enat$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 Enat$ ))(= (less$ zero$ ?v0 )(not (= ?v0 zero$ )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ )(?v2 Enat$ ))(= (= (plus$ ?v0 (enat$ ?v1 ))(plus$ ?v2 (enat$ ?v1 )))(= ?v0 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less$ (plus$ (enat$ ?v0 )?v1 )(plus$ (enat$ ?v0 )?v2 ))(less$ ?v1 ?v2 ))):named a13 ))
(assert (! (= (the_enat$ zero$ )zero$a ):named a14 ))
(check-sat )
;(get-unsat-core )
