;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_tree$ 0 )
(declare-sort A_tree_fset$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun t$ ()A_tree$ )
(declare-fun cont$ (A_tree$ )A_tree_fset$ )
(declare-fun node$ (A$ A_tree_fset$ )A_tree$ )
(declare-fun root$ (A_tree$ )A$ )
(declare-fun ipath$ (A_tree$ A_stream$ )Bool )
(declare-fun konig$ (A_tree$ )A_stream$ )
(declare-fun fmember$ (A_tree$ A_tree_fset$ )Bool )
(declare-fun tfinite$ (A_tree$ )Bool )
(assert (! (not (ipath$ t$ (konig$ t$ ))):named a0 ))
(assert (! (not (tfinite$ t$ )):named a1 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_stream$ ))(=> (tfinite$ ?v0 )(not (ipath$ ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_tree$ ))(= (shd$ (konig$ ?v0 ))(root$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_tree$ ))(= (tfinite$ ?v0 )(exists ((?v1 A_tree$ ))(and (= ?v0 ?v1 )(forall ((?v2 A_tree$ ))(=> (fmember$ ?v2 (cont$ ?v1 ))(tfinite$ ?v2 ))))))):named a4 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (forall ((?v1 A_tree$ ))(=> (fmember$ ?v1 (cont$ ?v0 ))(tfinite$ ?v1 )))(tfinite$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (tfinite$ ?v0 )(forall ((?v1 A_tree$ ))(=> (and (= ?v0 ?v1 )(forall ((?v2 A_tree$ ))(=> (fmember$ ?v2 (cont$ ?v1 ))(tfinite$ ?v2 ))))false )))false )):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_fset$ )(?v2 A$ )(?v3 A_tree_fset$ ))(= (= (node$ ?v0 ?v1 )(node$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_tree$ ))(= (node$ (root$ ?v0 )(cont$ ?v0 ))?v0 )):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_fset$ ))(! (= (cont$ (node$ ?v0 ?v1 ))?v1 ):pattern ((node$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_fset$ ))(! (= (root$ (node$ ?v0 ?v1 ))?v0 ):pattern ((node$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (=> (= ?v0 (node$ (root$ ?v0 )(cont$ ?v0 )))false )false )):named a11 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (forall ((?v1 A$ )(?v2 A_tree_fset$ ))(=> (= ?v0 (node$ ?v1 ?v2 ))false ))false )):named a12 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_stream$ ))(= (ipath$ ?v0 ?v1 )(exists ((?v2 A_tree$ )(?v3 A_stream$ )(?v4 A_tree$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (root$ ?v2 )(shd$ ?v3 ))(and (fmember$ ?v4 (cont$ ?v2 ))(ipath$ ?v4 (stl$ ?v3 ))))))))):named a14 ))
(check-sat )
;(get-unsat-core )
