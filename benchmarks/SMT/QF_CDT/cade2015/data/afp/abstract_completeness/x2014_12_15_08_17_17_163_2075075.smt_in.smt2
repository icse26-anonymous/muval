;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-datatypes ()((State_rule_prod$ (pair$ (fst$ State$ )(snd$ Rule$ )))))
(declare-sort State_rule_prod_stream$ 0)
(declare-fun shd$a (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$a (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$a (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State_set$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun sa$ ()State$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun pos$ (Rule_stream$ Rule$ )Nat$ )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun ipath$ (State_rule_prod_tree$ State_rule_prod_stream$ )Bool )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun member$ (Rule$ Rule_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun stepsa$ ()State_rule_prod_stream$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Nat$ )Nat_bool_fun$ )
(declare-fun member$a (State$ State_set$ )Bool )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fun_app$a (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$b (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$c (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$d (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(assert (! (not (fun_app$ (less$ (minWait$ eff$ rsa$ sa$ ))(pos$ rsa$ r$ ))):named a0 ))
(assert (! (fair$ rules$ rs$ ):named a1 ))
(assert (! (fair$ rules$ rsa$ ):named a2 ))
(assert (! (member$ r$ (sset$ rules$ )):named a3 ))
(assert (! (enabled$ eff$ r$ sa$ ):named a4 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$a (fun_app$b (fun_app$c eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a5 ))
(assert (! (not (= (pos$ rsa$ r$ )(minWait$ eff$ rsa$ sa$ ))):named a6 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule$ )(?v2 State$ ))(=> (and (fair$ rules$ ?v0 )(and (member$ ?v1 (sset$ rules$ ))(enabled$ eff$ ?v1 ?v2 )))(fun_app$ (less_eq$ (minWait$ eff$ ?v0 ?v2 ))(pos$ ?v0 ?v1 )))):named a7 ))
(assert (! (member$a sa$ s$ ):named a8 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$a (fun_app$b (fun_app$c eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a9 ))
(assert (! (= (trim$ eff$ rsa$ sa$ )(sdrop$ (minWait$ eff$ rsa$ sa$ )rsa$ )):named a10 ))
(assert (! (ipath$ (mkTree$ eff$ rsa$ sa$ )stepsa$ ):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (less$ ?v1 )?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_nat_bool_fun_fun$ ))(=> (and (=> (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (fun_app$d ?v2 ?v1 )?v0 ))(and (=> (= ?v0 ?v1 )(fun_app$ (fun_app$d ?v2 ?v1 )?v0 ))(=> (fun_app$ (less$ ?v1 )?v0 )(fun_app$ (fun_app$d ?v2 ?v1 )?v0 ))))(fun_app$ (fun_app$d ?v2 ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (not (fun_app$ ?v0 ?v2 ))(exists ((?v3 Nat$ ))(and (fun_app$ (less$ ?v3 )?v2 )(not (fun_app$ ?v0 ?v3 ))))))(fun_app$ ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a15 ))
(check-sat )
;(get-unsat-core )
