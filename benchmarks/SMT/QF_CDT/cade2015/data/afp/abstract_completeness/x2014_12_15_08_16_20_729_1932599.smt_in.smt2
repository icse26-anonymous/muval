;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Rule_bool_fun$ 0 )
(declare-sort Rule_rule_fun$ 0 )
(declare-sort Rule_state_fun$ 0 )
(declare-sort State_rule_fun$ 0 )
(declare-sort State_state_fun$ 0 )
(declare-sort Rule_rule_prod_tree$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Rule_state_prod_tree$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_state_prod_tree$ 0 )
(declare-sort Rule_rule_rule_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_fun$ 0 )
(declare-sort Rule_rule_state_fun_fun$ 0 )
(declare-sort Rule_state_rule_fun_fun$ 0 )
(declare-sort State_rule_rule_fun_fun$ 0 )
(declare-sort Rule_state_rule_prod_fun$ 0 )
(declare-sort Rule_state_state_fun_fun$ 0 )
(declare-sort State_rule_prod_rule_fun$ 0 )
(declare-sort State_rule_state_fun_fun$ 0 )
(declare-sort State_state_rule_fun_fun$ 0 )
(declare-sort State_state_state_fun_fun$ 0 )
(declare-sort Rule_rule_rule_prod_prod_tree$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_rule_prod_prod_tree$ 0 )
(declare-sort State_rule_rule_prod_prod_tree$ 0 )
(declare-sort Rule_rule_prod_rule_rule_fun_fun$ 0 )
(declare-sort Rule_rule_rule_prod_rule_fun_fun$ 0 )
(declare-sort Rule_rule_rule_rule_prod_fun_fun$ 0 )
(declare-sort Rule_rule_state_rule_prod_fun_fun$ 0 )
(declare-sort Rule_state_rule_prod_rule_fun_fun$ 0 )
(declare-sort State_rule_prod_rule_rule_fun_fun$ 0 )
(declare-sort Rule_rule_rule_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_rule_rule_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_prod_rule_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_rule_prod_fun_fun$ 0 )
(declare-sort Rule_rule_rule_prod_rule_rule_prod_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_rule_prod_rule_rule_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_rule_prod_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_prod_rule_rule_prod_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-sort State_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun shd$a (State_stream$)State$)
(declare-fun stl$a (State_stream$)State_stream$)
(declare-fun sCons$a (State$ State_stream$ )State_stream$)
(declare-datatypes ()((State_rule_prod$ (pair$ (fst$ State$ )(snd$ Rule$ )))))
(declare-sort State_rule_prod_stream$ 0)
(declare-fun shd$b (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$b (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$b (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-datatypes ()((Rule_rule_prod$ (pair$a (fst$a Rule$ )(snd$a Rule$ )))(Rule_rule_prod_rule_rule_prod_prod$ (pair$b (fst$b Rule_rule_prod$ )(snd$b Rule_rule_prod$ )))))
(declare-sort Rule_rule_prod_rule_rule_prod_prod_stream$ 0)
(declare-fun shd$c (Rule_rule_prod_rule_rule_prod_prod_stream$)Rule_rule_prod_rule_rule_prod_prod$)
(declare-fun stl$c (Rule_rule_prod_rule_rule_prod_prod_stream$)Rule_rule_prod_rule_rule_prod_prod_stream$)
(declare-fun sCons$c (Rule_rule_prod_rule_rule_prod_prod$ Rule_rule_prod_rule_rule_prod_prod_stream$ )Rule_rule_prod_rule_rule_prod_prod_stream$)
(declare-datatypes ()((Rule_rule_prod_rule_prod$ (pair$c (fst$c Rule_rule_prod$ )(snd$c Rule$ )))))
(declare-sort Rule_rule_prod_rule_prod_stream$ 0)
(declare-fun shd$d (Rule_rule_prod_rule_prod_stream$)Rule_rule_prod_rule_prod$)
(declare-fun stl$d (Rule_rule_prod_rule_prod_stream$)Rule_rule_prod_rule_prod_stream$)
(declare-fun sCons$d (Rule_rule_prod_rule_prod$ Rule_rule_prod_rule_prod_stream$ )Rule_rule_prod_rule_prod_stream$)
(declare-datatypes ()((Rule_rule_rule_prod_prod$ (pair$d (fst$d Rule$ )(snd$d Rule_rule_prod$ )))))
(declare-sort Rule_rule_rule_prod_prod_stream$ 0)
(declare-sort Rule_rule_prod_stream$ 0)
(declare-fun shd$e (Rule_rule_rule_prod_prod_stream$)Rule_rule_rule_prod_prod$)
(declare-fun stl$e (Rule_rule_rule_prod_prod_stream$)Rule_rule_rule_prod_prod_stream$)
(declare-fun sCons$e (Rule_rule_rule_prod_prod$ Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream$)
(declare-fun shd$f (Rule_rule_prod_stream$)Rule_rule_prod$)
(declare-fun stl$f (Rule_rule_prod_stream$)Rule_rule_prod_stream$)
(declare-fun sCons$f (Rule_rule_prod$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$)
(declare-datatypes ()((State_state_prod$ (pair$e (fst$e State$ )(snd$e State$ )))))
(declare-sort State_state_prod_stream$ 0)
(declare-fun shd$g (State_state_prod_stream$)State_state_prod$)
(declare-fun stl$g (State_state_prod_stream$)State_state_prod_stream$)
(declare-fun sCons$g (State_state_prod$ State_state_prod_stream$ )State_state_prod_stream$)
(declare-datatypes ()((Rule_state_prod$ (pair$f (fst$f Rule$ )(snd$f State$ )))))
(declare-sort Rule_state_prod_stream$ 0)
(declare-fun shd$h (Rule_state_prod_stream$)Rule_state_prod$)
(declare-fun stl$h (Rule_state_prod_stream$)Rule_state_prod_stream$)
(declare-fun sCons$h (Rule_state_prod$ Rule_state_prod_stream$ )Rule_state_prod_stream$)
(declare-datatypes ()((State_state_rule_prod_prod$ (pair$g (fst$g State$ )(snd$g State_rule_prod$ )))))
(declare-sort State_state_rule_prod_prod_stream$ 0)
(declare-fun shd$i (State_state_rule_prod_prod_stream$)State_state_rule_prod_prod$)
(declare-fun stl$i (State_state_rule_prod_prod_stream$)State_state_rule_prod_prod_stream$)
(declare-fun sCons$i (State_state_rule_prod_prod$ State_state_rule_prod_prod_stream$ )State_state_rule_prod_prod_stream$)
(declare-datatypes ()((State_rule_rule_prod_prod$ (pair$h (fst$h State$ )(snd$h Rule_rule_prod$ )))))
(declare-sort State_rule_rule_prod_prod_stream$ 0)
(declare-fun shd$j (State_rule_rule_prod_prod_stream$)State_rule_rule_prod_prod$)
(declare-fun stl$j (State_rule_rule_prod_prod_stream$)State_rule_rule_prod_prod_stream$)
(declare-fun sCons$j (State_rule_rule_prod_prod$ State_rule_rule_prod_prod_stream$ )State_rule_rule_prod_prod_stream$)
(declare-datatypes ()((Rule_state_rule_prod_prod$ (pair$i (fst$i Rule$ )(snd$i State_rule_prod$ )))))
(declare-sort Rule_state_rule_prod_prod_stream$ 0)
(declare-fun shd$k (Rule_state_rule_prod_prod_stream$)Rule_state_rule_prod_prod$)
(declare-fun stl$k (Rule_state_rule_prod_prod_stream$)Rule_state_rule_prod_prod_stream$)
(declare-fun sCons$k (Rule_state_rule_prod_prod$ Rule_state_rule_prod_prod_stream$ )Rule_state_rule_prod_prod_stream$)
(declare-datatypes ()((Rule_rule_prod_state_prod$ (pair$j (fst$j Rule_rule_prod$ )(snd$j State$ )))))
(declare-sort Rule_rule_prod_state_prod_stream$ 0)
(declare-fun shd$l (Rule_rule_prod_state_prod_stream$)Rule_rule_prod_state_prod$)
(declare-fun stl$l (Rule_rule_prod_state_prod_stream$)Rule_rule_prod_state_prod_stream$)
(declare-fun sCons$l (Rule_rule_prod_state_prod$ Rule_rule_prod_state_prod_stream$ )Rule_rule_prod_state_prod_stream$)
(declare-datatypes ()((State_rule_prod_rule_prod$ (pair$k (fst$k State_rule_prod$ )(snd$k Rule$ )))))
(declare-sort State_rule_prod_rule_prod_stream$ 0)
(declare-fun shd$m (State_rule_prod_rule_prod_stream$)State_rule_prod_rule_prod$)
(declare-fun stl$m (State_rule_prod_rule_prod_stream$)State_rule_prod_rule_prod_stream$)
(declare-fun sCons$m (State_rule_prod_rule_prod$ State_rule_prod_rule_prod_stream$ )State_rule_prod_rule_prod_stream$)
(declare-datatypes ()((State_rule_prod_state_prod$ (pair$l (fst$l State_rule_prod$ )(snd$l State$ )))))
(declare-sort State_rule_prod_state_prod_stream$ 0)
(declare-fun shd$n (State_rule_prod_state_prod_stream$)State_rule_prod_state_prod$)
(declare-fun stl$n (State_rule_prod_state_prod_stream$)State_rule_prod_state_prod_stream$)
(declare-fun sCons$n (State_rule_prod_state_prod$ State_rule_prod_state_prod_stream$ )State_rule_prod_state_prod_stream$)
(declare-datatypes ()((State_rule_prod_state_rule_prod_prod$ (pair$m (fst$m State_rule_prod$ )(snd$m State_rule_prod$ )))))
(declare-sort State_rule_prod_state_rule_prod_prod_stream$ 0)
(declare-fun shd$o (State_rule_prod_state_rule_prod_prod_stream$)State_rule_prod_state_rule_prod_prod$)
(declare-fun stl$o (State_rule_prod_state_rule_prod_prod_stream$)State_rule_prod_state_rule_prod_prod_stream$)
(declare-fun sCons$o (State_rule_prod_state_rule_prod_prod$ State_rule_prod_state_rule_prod_prod_stream$ )State_rule_prod_state_rule_prod_prod_stream$)
(declare-datatypes ()((Rule_state_state_prod_prod$ (pair$n (fst$n Rule$ )(snd$n State_state_prod$ )))))
(declare-sort Rule_state_state_prod_prod_stream$ 0)
(declare-fun shd$p (Rule_state_state_prod_prod_stream$)Rule_state_state_prod_prod$)
(declare-fun stl$p (Rule_state_state_prod_prod_stream$)Rule_state_state_prod_prod_stream$)
(declare-fun sCons$p (Rule_state_state_prod_prod$ Rule_state_state_prod_prod_stream$ )Rule_state_state_prod_prod_stream$)
(declare-fun s$ ()State$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun uu$ (Rule_stream$ State$ )Nat_bool_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun uua$ (State$ )Rule_bool_fun$ )
(declare-fun uub$ (Rule_rule_rule_fset_bool_fun_fun_fun$ Rule$ )Rule_bool_fun$ )
(declare-fun uuc$ (Rule_state_state_fset_bool_fun_fun_fun$ State$ )Rule_bool_fun$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun root$ (State_rule_prod_tree$ )State_rule_prod$ )
(declare-fun snth$ (Rule_stream$ Nat$ )Rule$ )
(declare-fun szip$ (Rule_stream$ Rule_stream$ )Rule_rule_prod_stream$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun fair$a (State_stream$ State_stream$ )Bool )
(declare-fun fair$b (State_rule_prod_stream$ State_rule_prod_stream$ )Bool )
(declare-fun fair$c (Rule_rule_prod_rule_rule_prod_prod_stream$ Rule_rule_prod_rule_rule_prod_prod_stream$ )Bool )
(declare-fun fair$d (Rule_rule_prod_rule_prod_stream$ Rule_rule_prod_rule_prod_stream$ )Bool )
(declare-fun fair$e (Rule_rule_rule_prod_prod_stream$ Rule_rule_rule_prod_prod_stream$ )Bool )
(declare-fun fair$f (Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Bool )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun least$ (Nat_bool_fun$ )Nat$ )
(declare-fun root$a (State_rule_rule_prod_prod_tree$ )State_rule_rule_prod_prod$ )
(declare-fun root$b (Rule_rule_rule_prod_prod_tree$ )Rule_rule_rule_prod_prod$ )
(declare-fun root$c (Rule_state_rule_prod_prod_tree$ )Rule_state_rule_prod_prod$ )
(declare-fun root$d (State_state_prod_tree$ )State_state_prod$ )
(declare-fun root$e (Rule_state_prod_tree$ )Rule_state_prod$ )
(declare-fun root$f (Rule_rule_prod_tree$ )Rule_rule_prod$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun smap2$ (Rule_rule_rule_fun_fun$ Rule_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun snth$a (State_stream$ Nat$ )State$ )
(declare-fun snth$b (Rule_rule_prod_stream$ Nat$ )Rule_rule_prod$ )
(declare-fun snth$c (State_rule_prod_stream$ Nat$ )State_rule_prod$ )
(declare-fun snth$d (State_state_prod_stream$ Nat$ )State_state_prod$ )
(declare-fun snth$e (Rule_state_prod_stream$ Nat$ )Rule_state_prod$ )
(declare-fun snth$f (State_state_rule_prod_prod_stream$ Nat$ )State_state_rule_prod_prod$ )
(declare-fun snth$g (Rule_rule_prod_rule_prod_stream$ Nat$ )Rule_rule_prod_rule_prod$ )
(declare-fun snth$h (State_rule_rule_prod_prod_stream$ Nat$ )State_rule_rule_prod_prod$ )
(declare-fun snth$i (Rule_state_rule_prod_prod_stream$ Nat$ )Rule_state_rule_prod_prod$ )
(declare-fun snth$j (State_rule_prod_rule_prod_stream$ Nat$ )State_rule_prod_rule_prod$ )
(declare-fun snth$k (State_rule_prod_state_prod_stream$ Nat$ )State_rule_prod_state_prod$ )
(declare-fun snth$l (State_rule_prod_state_rule_prod_prod_stream$ Nat$ )State_rule_prod_state_rule_prod_prod$ )
(declare-fun snth$m (Rule_state_state_prod_prod_stream$ Nat$ )Rule_state_state_prod_prod$ )
(declare-fun szip$a (State_stream$ Rule_stream$ )State_rule_prod_stream$ )
(declare-fun szip$b (Rule_stream$ Rule_rule_prod_stream$ )Rule_rule_rule_prod_prod_stream$ )
(declare-fun szip$c (Rule_rule_prod_stream$ Rule_stream$ )Rule_rule_prod_rule_prod_stream$ )
(declare-fun szip$d (Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Rule_rule_prod_rule_rule_prod_prod_stream$ )
(declare-fun szip$e (Rule_stream$ State_stream$ )Rule_state_prod_stream$ )
(declare-fun szip$f (State_stream$ State_stream$ )State_state_prod_stream$ )
(declare-fun szip$g (Rule_stream$ State_rule_prod_stream$ )Rule_state_rule_prod_prod_stream$ )
(declare-fun szip$h (Rule_rule_prod_stream$ State_stream$ )Rule_rule_prod_state_prod_stream$ )
(declare-fun szip$i (State_stream$ Rule_rule_prod_stream$ )State_rule_rule_prod_prod_stream$ )
(declare-fun szip$j (State_rule_prod_stream$ Rule_stream$ )State_rule_prod_rule_prod_stream$ )
(declare-fun szip$k (State_rule_prod_stream$ State_stream$ )State_rule_prod_state_prod_stream$ )
(declare-fun szip$l (State_stream$ State_rule_prod_stream$ )State_state_rule_prod_prod_stream$ )
(declare-fun szip$m (State_rule_prod_stream$ State_rule_prod_stream$ )State_rule_prod_state_rule_prod_prod_stream$ )
(declare-fun szip$n (Rule_stream$ State_state_prod_stream$ )Rule_state_state_prod_prod_stream$ )
(declare-fun trim$a (Rule_rule_rule_fset_bool_fun_fun_fun$ Rule_stream$ Rule$ )Rule_stream$ )
(declare-fun trim$b (Rule_rule_prod_state_state_fset_bool_fun_fun_fun$ Rule_rule_prod_stream$ State$ )Rule_rule_prod_stream$ )
(declare-fun trim$c (Rule_rule_prod_rule_rule_fset_bool_fun_fun_fun$ Rule_rule_prod_stream$ Rule$ )Rule_rule_prod_stream$ )
(declare-fun trim$d (State_rule_prod_rule_rule_fset_bool_fun_fun_fun$ State_rule_prod_stream$ Rule$ )State_rule_prod_stream$ )
(declare-fun trim$e (State_state_state_fset_bool_fun_fun_fun$ State_stream$ State$ )State_stream$ )
(declare-fun trim$f (State_rule_rule_fset_bool_fun_fun_fun$ State_stream$ Rule$ )State_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun sdrop$a (Nat$ State_stream$ )State_stream$ )
(declare-fun sdrop$b (Nat$ State_rule_prod_stream$ )State_rule_prod_stream$ )
(declare-fun sdrop$c (Nat$ Rule_rule_prod_rule_rule_prod_prod_stream$ )Rule_rule_prod_rule_rule_prod_prod_stream$ )
(declare-fun sdrop$d (Nat$ Rule_rule_prod_rule_prod_stream$ )Rule_rule_prod_rule_prod_stream$ )
(declare-fun sdrop$e (Nat$ Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream$ )
(declare-fun sdrop$f (Nat$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun sdrop$g (Nat$ State_state_prod_stream$ )State_state_prod_stream$ )
(declare-fun sdrop$h (Nat$ Rule_state_prod_stream$ )Rule_state_prod_stream$ )
(declare-fun sdrop$i (Nat$ State_state_rule_prod_prod_stream$ )State_state_rule_prod_prod_stream$ )
(declare-fun sdrop$j (Nat$ State_rule_rule_prod_prod_stream$ )State_rule_rule_prod_prod_stream$ )
(declare-fun sdrop$k (Nat$ Rule_state_rule_prod_prod_stream$ )Rule_state_rule_prod_prod_stream$ )
(declare-fun sdrop$l (Nat$ Rule_rule_prod_state_prod_stream$ )Rule_rule_prod_state_prod_stream$ )
(declare-fun smap2$a (Rule_rule_rule_prod_rule_fun_fun$ Rule_stream$ Rule_rule_prod_stream$ )Rule_stream$ )
(declare-fun smap2$b (Rule_rule_prod_rule_rule_fun_fun$ Rule_rule_prod_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun smap2$c (Rule_rule_rule_rule_prod_fun_fun$ Rule_stream$ Rule_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$d (Rule_rule_prod_rule_rule_prod_rule_fun_fun$ Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Rule_stream$ )
(declare-fun smap2$e (Rule_rule_rule_prod_rule_rule_prod_fun_fun$ Rule_stream$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$f (Rule_rule_prod_rule_rule_rule_prod_fun_fun$ Rule_rule_prod_stream$ Rule_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$g (Rule_rule_prod_rule_rule_prod_rule_rule_prod_fun_fun$ Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$h (State_rule_rule_fun_fun$ State_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun smap2$i (State_state_rule_fun_fun$ State_stream$ State_stream$ )Rule_stream$ )
(declare-fun smap2$j (Rule_state_rule_fun_fun$ Rule_stream$ State_stream$ )Rule_stream$ )
(declare-fun smap2$k (Rule_rule_state_fun_fun$ Rule_stream$ Rule_stream$ )State_stream$ )
(declare-fun smap2$l (Rule_state_state_fun_fun$ Rule_stream$ State_stream$ )State_stream$ )
(declare-fun smap2$m (State_rule_state_fun_fun$ State_stream$ Rule_stream$ )State_stream$ )
(declare-fun smap2$n (State_state_state_fun_fun$ State_stream$ State_stream$ )State_stream$ )
(declare-fun smap2$o (Rule_state_rule_prod_rule_fun_fun$ Rule_stream$ State_rule_prod_stream$ )Rule_stream$ )
(declare-fun smap2$p (State_rule_prod_rule_rule_fun_fun$ State_rule_prod_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun smap2$q (Rule_rule_state_rule_prod_fun_fun$ Rule_stream$ Rule_stream$ )State_rule_prod_stream$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (Rule_bool_fun$ Rule$ )Bool )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(declare-fun mkTree$a (Rule_rule_prod_state_state_fset_bool_fun_fun_fun$ Rule_rule_prod_stream$ State$ )State_rule_rule_prod_prod_tree$ )
(declare-fun mkTree$b (Rule_rule_prod_rule_rule_fset_bool_fun_fun_fun$ Rule_rule_prod_stream$ Rule$ )Rule_rule_rule_prod_prod_tree$ )
(declare-fun mkTree$c (State_rule_prod_rule_rule_fset_bool_fun_fun_fun$ State_rule_prod_stream$ Rule$ )Rule_state_rule_prod_prod_tree$ )
(declare-fun mkTree$d (State_state_state_fset_bool_fun_fun_fun$ State_stream$ State$ )State_state_prod_tree$ )
(declare-fun mkTree$e (State_rule_rule_fset_bool_fun_fun_fun$ State_stream$ Rule$ )Rule_state_prod_tree$ )
(declare-fun mkTree$f (Rule_rule_rule_fset_bool_fun_fun_fun$ Rule_stream$ Rule$ )Rule_rule_prod_tree$ )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun enabled$a (Rule_rule_rule_fset_bool_fun_fun_fun$ Rule$ Rule$ )Bool )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$c (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$d (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$e (State_rule_fun$ State$ )Rule$ )
(declare-fun fun_app$f (Rule_state_rule_fun_fun$ Rule$ )State_rule_fun$ )
(declare-fun fun_app$g (Rule_rule_fun$ Rule$ )Rule$ )
(declare-fun fun_app$h (State_rule_rule_fun_fun$ State$ )Rule_rule_fun$ )
(declare-fun fun_app$i (State_state_rule_fun_fun$ State$ )State_rule_fun$ )
(declare-fun fun_app$j (Rule_state_fun$ Rule$ )State$ )
(declare-fun fun_app$k (Rule_rule_state_fun_fun$ Rule$ )Rule_state_fun$ )
(declare-fun fun_app$l (State_state_fun$ State$ )State$ )
(declare-fun fun_app$m (Rule_state_state_fun_fun$ Rule$ )State_state_fun$ )
(declare-fun fun_app$n (State_rule_state_fun_fun$ State$ )Rule_state_fun$ )
(declare-fun fun_app$o (State_state_state_fun_fun$ State$ )State_state_fun$ )
(declare-fun fun_app$p (Rule_rule_rule_fun_fun$ Rule$ )Rule_rule_fun$ )
(declare-fun fun_app$q (State_rule_prod_rule_fun$ State_rule_prod$ )Rule$ )
(declare-fun fun_app$r (Rule_state_rule_prod_rule_fun_fun$ Rule$ )State_rule_prod_rule_fun$ )
(declare-fun fun_app$s (State_rule_prod_rule_rule_fun_fun$ State_rule_prod$ )Rule_rule_fun$ )
(declare-fun fun_app$t (Rule_state_rule_prod_fun$ Rule$ )State_rule_prod$ )
(declare-fun fun_app$u (Rule_rule_state_rule_prod_fun_fun$ Rule$ )Rule_state_rule_prod_fun$ )
(declare-fun fun_app$v (Rule_rule_prod_rule_fun$ Rule_rule_prod$ )Rule$ )
(declare-fun fun_app$w (Rule_rule_rule_prod_rule_fun_fun$ Rule$ )Rule_rule_prod_rule_fun$ )
(declare-fun sdrop_while$ (Rule_bool_fun$ Rule_stream$ )Rule_stream$ )
(declare-fun sinterleave$ (State_rule_rule_prod_prod_stream$ State_rule_rule_prod_prod_stream$ )State_rule_rule_prod_prod_stream$ )
(declare-fun sinterleave$a (State_state_prod_stream$ State_state_prod_stream$ )State_state_prod_stream$ )
(declare-fun sinterleave$b (Rule_state_rule_prod_prod_stream$ Rule_state_rule_prod_prod_stream$ )Rule_state_rule_prod_prod_stream$ )
(declare-fun sinterleave$c (Rule_rule_rule_prod_prod_stream$ Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream$ )
(declare-fun sinterleave$d (Rule_state_prod_stream$ Rule_state_prod_stream$ )Rule_state_prod_stream$ )
(declare-fun sinterleave$e (Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun sinterleave$f (State_rule_prod_stream$ State_rule_prod_stream$ )State_rule_prod_stream$ )
(declare-fun sinterleave$g (State_stream$ State_stream$ )State_stream$ )
(declare-fun sinterleave$h (Rule_stream$ Rule_stream$ )Rule_stream$ )
(assert (! (forall ((?v0 State$ )(?v1 Rule$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(not (enabled$ eff$ ?v1 ?v0 ))):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ )(?v2 Nat$ ))(! (= (fun_app$a (uu$ ?v0 ?v1 )?v2 )(enabled$ eff$ (shd$ (sdrop$ ?v2 ?v0 ))?v1 )):pattern ((fun_app$a (uu$ ?v0 ?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 State$ )(?v2 Rule$ ))(! (= (fun_app$ (uuc$ ?v0 ?v1 )?v2 )(not (enabled$ ?v0 ?v2 ?v1 ))):pattern ((fun_app$ (uuc$ ?v0 ?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 Rule$ ))(! (= (fun_app$ (uub$ ?v0 ?v1 )?v2 )(not (enabled$a ?v0 ?v2 ?v1 ))):pattern ((fun_app$ (uub$ ?v0 ?v1 )?v2 )))):named a3 ))
(assert (! (not (exists ((?v0 Nat$ ))(enabled$ eff$ (shd$ (sdrop$ ?v0 rs$ ))s$ ))):named a4 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$b (fun_app$c (fun_app$d eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a5 ))
(assert (! (member$ s$ s$a ):named a6 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$b (fun_app$c (fun_app$d eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(! (= (enabled$ ?v0 ?v1 ?v2 )(exists ((?v3 State_fset$ ))(fun_app$b (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )?v3 ))):pattern ((enabled$ ?v0 ?v1 ?v2 )))):named a8 ))
(assert (! (fair$ rules$ rs$ ):named a9 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(=> (enabled$ ?v0 ?v1 ?v2 )(fun_app$b (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(pickEff$ ?v0 ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_stream$ )(?v2 Nat$ ))(=> (fair$a ?v0 ?v1 )(fair$a ?v0 (sdrop$a ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_rule_prod_stream$ )(?v2 Nat$ ))(=> (fair$b ?v0 ?v1 )(fair$b ?v0 (sdrop$b ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Rule_rule_prod_rule_rule_prod_prod_stream$ )(?v1 Rule_rule_prod_rule_rule_prod_prod_stream$ )(?v2 Nat$ ))(=> (fair$c ?v0 ?v1 )(fair$c ?v0 (sdrop$c ?v2 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Rule_rule_prod_rule_prod_stream$ )(?v1 Rule_rule_prod_rule_prod_stream$ )(?v2 Nat$ ))(=> (fair$d ?v0 ?v1 )(fair$d ?v0 (sdrop$d ?v2 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Rule_rule_rule_prod_prod_stream$ )(?v1 Rule_rule_rule_prod_prod_stream$ )(?v2 Nat$ ))(=> (fair$e ?v0 ?v1 )(fair$e ?v0 (sdrop$e ?v2 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream$ )(?v1 Rule_rule_prod_stream$ )(?v2 Nat$ ))(=> (fair$f ?v0 ?v1 )(fair$f ?v0 (sdrop$f ?v2 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(=> (fair$ ?v0 ?v1 )(fair$ ?v0 (sdrop$ ?v2 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (minWait$ eff$ ?v0 ?v1 )(least$ (uu$ ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ ))(= (shd$ (sdrop$ ?v0 ?v1 ))(snth$ ?v1 ?v0 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ ))(= (shd$a (sdrop$a ?v0 ?v1 ))(snth$a ?v1 ?v0 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_stream$ ))(= (shd$f (sdrop$f ?v0 ?v1 ))(snth$b ?v1 ?v0 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_prod_stream$ ))(= (shd$b (sdrop$b ?v0 ?v1 ))(snth$c ?v1 ?v0 ))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_state_prod_stream$ ))(= (shd$g (sdrop$g ?v0 ?v1 ))(snth$d ?v1 ?v0 ))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_state_prod_stream$ ))(= (shd$h (sdrop$h ?v0 ?v1 ))(snth$e ?v1 ?v0 ))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_state_rule_prod_prod_stream$ ))(= (shd$i (sdrop$i ?v0 ?v1 ))(snth$f ?v1 ?v0 ))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_prod_stream$ ))(= (shd$d (sdrop$d ?v0 ?v1 ))(snth$g ?v1 ?v0 ))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_rule_prod_prod_stream$ ))(= (shd$j (sdrop$j ?v0 ?v1 ))(snth$h ?v1 ?v0 ))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_state_rule_prod_prod_stream$ ))(= (shd$k (sdrop$k ?v0 ?v1 ))(snth$i ?v1 ?v0 ))):named a28 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(=> (fair$ rules$ ?v0 )(fair$ rules$ (sdrop$ ?v1 ?v0 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(= (sdrop$f ?v0 (szip$ ?v1 ?v2 ))(szip$ (sdrop$ ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 Rule_stream$ ))(= (sdrop$b ?v0 (szip$a ?v1 ?v2 ))(szip$a (sdrop$a ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (sdrop$e ?v0 (szip$b ?v1 ?v2 ))(szip$b (sdrop$ ?v0 ?v1 )(sdrop$f ?v0 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_stream$ )(?v2 Rule_stream$ ))(= (sdrop$d ?v0 (szip$c ?v1 ?v2 ))(szip$c (sdrop$f ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (sdrop$c ?v0 (szip$d ?v1 ?v2 ))(szip$d (sdrop$f ?v0 ?v1 )(sdrop$f ?v0 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 State_stream$ ))(= (sdrop$h ?v0 (szip$e ?v1 ?v2 ))(szip$e (sdrop$ ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 State_stream$ ))(= (sdrop$g ?v0 (szip$f ?v1 ?v2 ))(szip$f (sdrop$a ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ ))(= (sdrop$k ?v0 (szip$g ?v1 ?v2 ))(szip$g (sdrop$ ?v0 ?v1 )(sdrop$b ?v0 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_stream$ )(?v2 State_stream$ ))(= (sdrop$l ?v0 (szip$h ?v1 ?v2 ))(szip$h (sdrop$f ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (sdrop$j ?v0 (szip$i ?v1 ?v2 ))(szip$i (sdrop$a ?v0 ?v1 )(sdrop$f ?v0 ?v2 )))):named a39 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (sdrop$ ?v0 (smap2$ ?v1 ?v2 ?v3 ))(smap2$ ?v1 (sdrop$ ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_prod_rule_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$ ?v0 (smap2$a ?v1 ?v2 ?v3 ))(smap2$a ?v1 (sdrop$ ?v0 ?v2 )(sdrop$f ?v0 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_stream$ ))(= (sdrop$ ?v0 (smap2$b ?v1 ?v2 ?v3 ))(smap2$b ?v1 (sdrop$f ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_rule_prod_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (sdrop$f ?v0 (smap2$c ?v1 ?v2 ?v3 ))(smap2$c ?v1 (sdrop$ ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_prod_rule_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$ ?v0 (smap2$d ?v1 ?v2 ?v3 ))(smap2$d ?v1 (sdrop$f ?v0 ?v2 )(sdrop$f ?v0 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_prod_rule_rule_prod_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$f ?v0 (smap2$e ?v1 ?v2 ?v3 ))(smap2$e ?v1 (sdrop$ ?v0 ?v2 )(sdrop$f ?v0 ?v3 )))):named a45 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_rule_prod_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_stream$ ))(= (sdrop$f ?v0 (smap2$f ?v1 ?v2 ?v3 ))(smap2$f ?v1 (sdrop$f ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a46 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_prod_rule_rule_prod_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$f ?v0 (smap2$g ?v1 ?v2 ?v3 ))(smap2$g ?v1 (sdrop$f ?v0 ?v2 )(sdrop$f ?v0 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_rule_fun_fun$ )(?v2 State_stream$ )(?v3 Rule_stream$ ))(= (sdrop$ ?v0 (smap2$h ?v1 ?v2 ?v3 ))(smap2$h ?v1 (sdrop$a ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a48 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_state_rule_fun_fun$ )(?v2 State_stream$ )(?v3 State_stream$ ))(= (sdrop$ ?v0 (smap2$i ?v1 ?v2 ?v3 ))(smap2$i ?v1 (sdrop$a ?v0 ?v2 )(sdrop$a ?v0 ?v3 )))):named a49 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (root$ (mkTree$ eff$ ?v0 ?v1 ))(pair$ ?v1 (shd$ (trim$ eff$ ?v0 ?v1 ))))):named a50 ))
(assert (! (forall ((?v0 State_rule_rule_prod_prod_stream$ )(?v1 State_rule_rule_prod_prod_stream$ ))(= (shd$j (sinterleave$ ?v0 ?v1 ))(shd$j ?v0 ))):named a51 ))
(assert (! (forall ((?v0 State_state_prod_stream$ )(?v1 State_state_prod_stream$ ))(= (shd$g (sinterleave$a ?v0 ?v1 ))(shd$g ?v0 ))):named a52 ))
(assert (! (forall ((?v0 Rule_state_rule_prod_prod_stream$ )(?v1 Rule_state_rule_prod_prod_stream$ ))(= (shd$k (sinterleave$b ?v0 ?v1 ))(shd$k ?v0 ))):named a53 ))
(assert (! (forall ((?v0 Rule_rule_rule_prod_prod_stream$ )(?v1 Rule_rule_rule_prod_prod_stream$ ))(= (shd$e (sinterleave$c ?v0 ?v1 ))(shd$e ?v0 ))):named a54 ))
(assert (! (forall ((?v0 Rule_state_prod_stream$ )(?v1 Rule_state_prod_stream$ ))(= (shd$h (sinterleave$d ?v0 ?v1 ))(shd$h ?v0 ))):named a55 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream$ )(?v1 Rule_rule_prod_stream$ ))(= (shd$f (sinterleave$e ?v0 ?v1 ))(shd$f ?v0 ))):named a56 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_rule_prod_stream$ ))(= (shd$b (sinterleave$f ?v0 ?v1 ))(shd$b ?v0 ))):named a57 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_stream$ ))(= (shd$a (sinterleave$g ?v0 ?v1 ))(shd$a ?v0 ))):named a58 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(= (shd$ (sinterleave$h ?v0 ?v1 ))(shd$ ?v0 ))):named a59 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(! (=> (and (member$ ?v0 s$a )(fair$ rules$ ?v1 ))(= (trim$ eff$ ?v1 ?v0 )(sdrop$ (minWait$ eff$ ?v1 ?v0 )?v1 ))):pattern ((trim$ eff$ ?v1 ?v0 )))):named a60 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (trim$ eff$ ?v0 ?v1 )(sdrop_while$ (uua$ ?v1 )?v0 ))):named a61 ))
(assert (! (forall ((?v0 Rule_state_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$j ?v0 ?v1 ?v2 )?v3 )(fun_app$e (fun_app$f ?v0 (snth$ ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a62 ))
(assert (! (forall ((?v0 State_rule_rule_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$h ?v0 ?v1 ?v2 )?v3 )(fun_app$g (fun_app$h ?v0 (snth$a ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a63 ))
(assert (! (forall ((?v0 State_state_rule_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$i ?v0 ?v1 ?v2 )?v3 )(fun_app$e (fun_app$i ?v0 (snth$a ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a64 ))
(assert (! (forall ((?v0 Rule_rule_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$a (smap2$k ?v0 ?v1 ?v2 )?v3 )(fun_app$j (fun_app$k ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a65 ))
(assert (! (forall ((?v0 Rule_state_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$a (smap2$l ?v0 ?v1 ?v2 )?v3 )(fun_app$l (fun_app$m ?v0 (snth$ ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a66 ))
(assert (! (forall ((?v0 State_rule_state_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$a (smap2$m ?v0 ?v1 ?v2 )?v3 )(fun_app$j (fun_app$n ?v0 (snth$a ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a67 ))
(assert (! (forall ((?v0 State_state_state_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$a (smap2$n ?v0 ?v1 ?v2 )?v3 )(fun_app$l (fun_app$o ?v0 (snth$a ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a68 ))
(assert (! (forall ((?v0 Rule_rule_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$ ?v0 ?v1 ?v2 )?v3 )(fun_app$g (fun_app$p ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a69 ))
(assert (! (forall ((?v0 Rule_state_rule_prod_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$o ?v0 ?v1 ?v2 )?v3 )(fun_app$q (fun_app$r ?v0 (snth$ ?v1 ?v3 ))(snth$c ?v2 ?v3 )))):named a70 ))
(assert (! (forall ((?v0 State_rule_prod_rule_rule_fun_fun$ )(?v1 State_rule_prod_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$p ?v0 ?v1 ?v2 )?v3 )(fun_app$g (fun_app$s ?v0 (snth$c ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a71 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(= (snth$c (szip$a ?v0 ?v1 )?v2 )(pair$ (snth$a ?v0 ?v2 )(snth$ ?v1 ?v2 )))):named a72 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State_stream$ )(?v2 Nat$ ))(= (snth$e (szip$e ?v0 ?v1 )?v2 )(pair$f (snth$ ?v0 ?v2 )(snth$a ?v1 ?v2 )))):named a73 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_stream$ )(?v2 Nat$ ))(= (snth$d (szip$f ?v0 ?v1 )?v2 )(pair$e (snth$a ?v0 ?v2 )(snth$a ?v1 ?v2 )))):named a74 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(= (snth$b (szip$ ?v0 ?v1 )?v2 )(pair$a (snth$ ?v0 ?v2 )(snth$ ?v1 ?v2 )))):named a75 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State_rule_prod_stream$ )(?v2 Nat$ ))(= (snth$i (szip$g ?v0 ?v1 )?v2 )(pair$i (snth$ ?v0 ?v2 )(snth$c ?v1 ?v2 )))):named a76 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(= (snth$j (szip$j ?v0 ?v1 )?v2 )(pair$k (snth$c ?v0 ?v2 )(snth$ ?v1 ?v2 )))):named a77 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_stream$ )(?v2 Nat$ ))(= (snth$k (szip$k ?v0 ?v1 )?v2 )(pair$l (snth$c ?v0 ?v2 )(snth$a ?v1 ?v2 )))):named a78 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_rule_prod_stream$ )(?v2 Nat$ ))(= (snth$f (szip$l ?v0 ?v1 )?v2 )(pair$g (snth$a ?v0 ?v2 )(snth$c ?v1 ?v2 )))):named a79 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_rule_prod_stream$ )(?v2 Nat$ ))(= (snth$l (szip$m ?v0 ?v1 )?v2 )(pair$m (snth$c ?v0 ?v2 )(snth$c ?v1 ?v2 )))):named a80 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State_state_prod_stream$ )(?v2 Nat$ ))(= (snth$m (szip$n ?v0 ?v1 )?v2 )(pair$n (snth$ ?v0 ?v2 )(snth$d ?v1 ?v2 )))):named a81 ))
(assert (! (fair$ rules$ (fenum$ rules$ )):named a82 ))
(assert (! (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule$ ))(= (trim$a ?v0 ?v1 ?v2 )(sdrop_while$ (uub$ ?v0 ?v2 )?v1 ))):named a83 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State$ ))(= (trim$ ?v0 ?v1 ?v2 )(sdrop_while$ (uuc$ ?v0 ?v2 )?v1 ))):named a84 ))
(assert (! (forall ((?v0 Rule_rule_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 State_stream$ ))(= (= (smap2$k ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$j (fun_app$k ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a85 ))
(assert (! (forall ((?v0 Rule_state_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$j ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$e (fun_app$f ?v0 (snth$ ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a86 ))
(assert (! (forall ((?v0 Rule_state_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 State_stream$ ))(= (= (smap2$l ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$l (fun_app$m ?v0 (snth$ ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a87 ))
(assert (! (forall ((?v0 State_rule_rule_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$h ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$g (fun_app$h ?v0 (snth$a ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a88 ))
(assert (! (forall ((?v0 State_rule_state_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 State_stream$ ))(= (= (smap2$m ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$j (fun_app$n ?v0 (snth$a ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a89 ))
(assert (! (forall ((?v0 State_state_rule_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$i ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$e (fun_app$i ?v0 (snth$a ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a90 ))
(assert (! (forall ((?v0 State_state_state_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 State_stream$ ))(= (= (smap2$n ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$l (fun_app$o ?v0 (snth$a ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a91 ))
(assert (! (forall ((?v0 Rule_rule_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$ ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$g (fun_app$p ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a92 ))
(assert (! (forall ((?v0 Rule_rule_state_rule_prod_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 State_rule_prod_stream$ ))(= (= (smap2$q ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$t (fun_app$u ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$c ?v3 ?v4 ))))):named a93 ))
(assert (! (forall ((?v0 Rule_state_rule_prod_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$o ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$q (fun_app$r ?v0 (snth$ ?v1 ?v4 ))(snth$c ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a94 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 Rule_stream$ ))(= (shd$b (szip$a ?v0 ?v1 ))(pair$ (shd$a ?v0 )(shd$ ?v1 )))):named a95 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(= (shd$f (szip$ ?v0 ?v1 ))(pair$a (shd$ ?v0 )(shd$ ?v1 )))):named a96 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State_stream$ ))(= (shd$h (szip$e ?v0 ?v1 ))(pair$f (shd$ ?v0 )(shd$a ?v1 )))):named a97 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_stream$ ))(= (shd$g (szip$f ?v0 ?v1 ))(pair$e (shd$a ?v0 )(shd$a ?v1 )))):named a98 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_rule_prod_stream$ ))(= (shd$e (szip$b ?v0 ?v1 ))(pair$d (shd$ ?v0 )(shd$f ?v1 )))):named a99 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State_rule_prod_stream$ ))(= (shd$k (szip$g ?v0 ?v1 ))(pair$i (shd$ ?v0 )(shd$b ?v1 )))):named a100 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream$ )(?v1 Rule_stream$ ))(= (shd$d (szip$c ?v0 ?v1 ))(pair$c (shd$f ?v0 )(shd$ ?v1 )))):named a101 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream$ )(?v1 State_stream$ ))(= (shd$l (szip$h ?v0 ?v1 ))(pair$j (shd$f ?v0 )(shd$a ?v1 )))):named a102 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 Rule_stream$ ))(= (shd$m (szip$j ?v0 ?v1 ))(pair$k (shd$b ?v0 )(shd$ ?v1 )))):named a103 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_stream$ ))(= (shd$n (szip$k ?v0 ?v1 ))(pair$l (shd$b ?v0 )(shd$a ?v1 )))):named a104 ))
(assert (! (forall ((?v0 Rule_rule_prod_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_rule_prod_stream$ )(?v2 State$ ))(= (root$a (mkTree$a ?v0 ?v1 ?v2 ))(pair$h ?v2 (shd$f (trim$b ?v0 ?v1 ?v2 ))))):named a105 ))
(assert (! (forall ((?v0 Rule_rule_prod_rule_rule_fset_bool_fun_fun_fun$ )(?v1 Rule_rule_prod_stream$ )(?v2 Rule$ ))(= (root$b (mkTree$b ?v0 ?v1 ?v2 ))(pair$d ?v2 (shd$f (trim$c ?v0 ?v1 ?v2 ))))):named a106 ))
(assert (! (forall ((?v0 State_rule_prod_rule_rule_fset_bool_fun_fun_fun$ )(?v1 State_rule_prod_stream$ )(?v2 Rule$ ))(= (root$c (mkTree$c ?v0 ?v1 ?v2 ))(pair$i ?v2 (shd$b (trim$d ?v0 ?v1 ?v2 ))))):named a107 ))
(assert (! (forall ((?v0 State_state_state_fset_bool_fun_fun_fun$ )(?v1 State_stream$ )(?v2 State$ ))(= (root$d (mkTree$d ?v0 ?v1 ?v2 ))(pair$e ?v2 (shd$a (trim$e ?v0 ?v1 ?v2 ))))):named a108 ))
(assert (! (forall ((?v0 State_rule_rule_fset_bool_fun_fun_fun$ )(?v1 State_stream$ )(?v2 Rule$ ))(= (root$e (mkTree$e ?v0 ?v1 ?v2 ))(pair$f ?v2 (shd$a (trim$f ?v0 ?v1 ?v2 ))))):named a109 ))
(assert (! (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule$ ))(= (root$f (mkTree$f ?v0 ?v1 ?v2 ))(pair$a ?v2 (shd$ (trim$a ?v0 ?v1 ?v2 ))))):named a110 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State$ ))(= (root$ (mkTree$ ?v0 ?v1 ?v2 ))(pair$ ?v2 (shd$ (trim$ ?v0 ?v1 ?v2 ))))):named a111 ))
(assert (! (forall ((?v0 Rule_rule_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(= (shd$ (smap2$ ?v0 ?v1 ?v2 ))(fun_app$g (fun_app$p ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a112 ))
(assert (! (forall ((?v0 Rule_state_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ ))(= (shd$ (smap2$j ?v0 ?v1 ?v2 ))(fun_app$e (fun_app$f ?v0 (shd$ ?v1 ))(shd$a ?v2 )))):named a113 ))
(assert (! (forall ((?v0 State_rule_rule_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ ))(= (shd$ (smap2$h ?v0 ?v1 ?v2 ))(fun_app$g (fun_app$h ?v0 (shd$a ?v1 ))(shd$ ?v2 )))):named a114 ))
(assert (! (forall ((?v0 State_state_rule_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ ))(= (shd$ (smap2$i ?v0 ?v1 ?v2 ))(fun_app$e (fun_app$i ?v0 (shd$a ?v1 ))(shd$a ?v2 )))):named a115 ))
(assert (! (forall ((?v0 Rule_rule_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(= (shd$a (smap2$k ?v0 ?v1 ?v2 ))(fun_app$j (fun_app$k ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a116 ))
(assert (! (forall ((?v0 Rule_state_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ ))(= (shd$a (smap2$l ?v0 ?v1 ?v2 ))(fun_app$l (fun_app$m ?v0 (shd$ ?v1 ))(shd$a ?v2 )))):named a117 ))
(assert (! (forall ((?v0 State_rule_state_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ ))(= (shd$a (smap2$m ?v0 ?v1 ?v2 ))(fun_app$j (fun_app$n ?v0 (shd$a ?v1 ))(shd$ ?v2 )))):named a118 ))
(assert (! (forall ((?v0 State_state_state_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ ))(= (shd$a (smap2$n ?v0 ?v1 ?v2 ))(fun_app$l (fun_app$o ?v0 (shd$a ?v1 ))(shd$a ?v2 )))):named a119 ))
(assert (! (forall ((?v0 Rule_rule_rule_prod_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (shd$ (smap2$a ?v0 ?v1 ?v2 ))(fun_app$v (fun_app$w ?v0 (shd$ ?v1 ))(shd$f ?v2 )))):named a120 ))
(assert (! (forall ((?v0 Rule_state_rule_prod_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ ))(= (shd$ (smap2$o ?v0 ?v1 ?v2 ))(fun_app$q (fun_app$r ?v0 (shd$ ?v1 ))(shd$b ?v2 )))):named a121 ))
(check-sat )
;(get-unsat-core )
