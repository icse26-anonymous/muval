;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_rule_prod_tree_fset$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-datatypes ()((State_rule_prod$ (pair$ (fst$ State$ )(snd$ Rule$ )))))
(declare-sort State_rule_prod_stream$ 0)
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$ (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$ (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun shd$a (Rule_stream$)Rule$)
(declare-fun stl$a (Rule_stream$)Rule_stream$)
(declare-fun sCons$a (Rule$ Rule_stream$ )Rule_stream$)
(declare-datatypes ()((Rule_rule_prod$ (pair$a (fst$a Rule$ )(snd$a Rule$ )))))
(declare-sort Rule_rule_prod_stream$ 0)
(declare-sort State_stream$ 0)
(declare-fun shd$b (Rule_rule_prod_stream$)Rule_rule_prod$)
(declare-fun stl$b (Rule_rule_prod_stream$)Rule_rule_prod_stream$)
(declare-fun sCons$b (Rule_rule_prod$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$)
(declare-fun shd$c (State_stream$)State$)
(declare-fun stl$c (State_stream$)State_stream$)
(declare-fun sCons$c (State$ State_stream$ )State_stream$)
(declare-datatypes ()((Rule_state_rule_prod_prod$ (pair$b (fst$b Rule$ )(snd$b State_rule_prod$ )))))
(declare-sort Rule_state_rule_prod_prod_stream$ 0)
(declare-fun shd$d (Rule_state_rule_prod_prod_stream$)Rule_state_rule_prod_prod$)
(declare-fun stl$d (Rule_state_rule_prod_prod_stream$)Rule_state_rule_prod_prod_stream$)
(declare-fun sCons$d (Rule_state_rule_prod_prod$ Rule_state_rule_prod_prod_stream$ )Rule_state_rule_prod_prod_stream$)
(declare-datatypes ()((State_rule_prod_rule_prod$ (pair$c (fst$c State_rule_prod$ )(snd$c Rule$ )))))
(declare-sort State_rule_prod_rule_prod_stream$ 0)
(declare-fun shd$e (State_rule_prod_rule_prod_stream$)State_rule_prod_rule_prod$)
(declare-fun stl$e (State_rule_prod_rule_prod_stream$)State_rule_prod_rule_prod_stream$)
(declare-fun sCons$e (State_rule_prod_rule_prod$ State_rule_prod_rule_prod_stream$ )State_rule_prod_rule_prod_stream$)
(declare-datatypes ()((State_rule_prod_state_rule_prod_prod$ (pair$d (fst$d State_rule_prod$ )(snd$d State_rule_prod$ )))))
(declare-sort State_rule_prod_state_rule_prod_prod_stream$ 0)
(declare-fun shd$f (State_rule_prod_state_rule_prod_prod_stream$)State_rule_prod_state_rule_prod_prod$)
(declare-fun stl$f (State_rule_prod_state_rule_prod_prod_stream$)State_rule_prod_state_rule_prod_prod_stream$)
(declare-fun sCons$f (State_rule_prod_state_rule_prod_prod$ State_rule_prod_state_rule_prod_prod_stream$ )State_rule_prod_state_rule_prod_prod_stream$)
(declare-datatypes ()((Rule_state_prod$ (pair$e (fst$e Rule$ )(snd$e State$ )))))
(declare-sort Rule_state_prod_stream$ 0)
(declare-fun shd$g (Rule_state_prod_stream$)Rule_state_prod$)
(declare-fun stl$g (Rule_state_prod_stream$)Rule_state_prod_stream$)
(declare-fun sCons$g (Rule_state_prod$ Rule_state_prod_stream$ )Rule_state_prod_stream$)
(declare-datatypes ()((State_state_prod$ (pair$f (fst$f State$ )(snd$f State$ )))))
(declare-sort State_state_prod_stream$ 0)
(declare-fun shd$h (State_state_prod_stream$)State_state_prod$)
(declare-fun stl$h (State_state_prod_stream$)State_state_prod_stream$)
(declare-fun sCons$h (State_state_prod$ State_state_prod_stream$ )State_state_prod_stream$)
(declare-datatypes ()((Rule_rule_rule_prod_prod$ (pair$g (fst$g Rule$ )(snd$g Rule_rule_prod$ )))))
(declare-sort Rule_rule_rule_prod_prod_stream$ 0)
(declare-fun shd$i (Rule_rule_rule_prod_prod_stream$)Rule_rule_rule_prod_prod$)
(declare-fun stl$i (Rule_rule_rule_prod_prod_stream$)Rule_rule_rule_prod_prod_stream$)
(declare-fun sCons$i (Rule_rule_rule_prod_prod$ Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream$)
(declare-datatypes ()((State_rule_prod_state_prod$ (pair$h (fst$h State_rule_prod$ )(snd$h State$ )))))
(declare-sort State_rule_prod_state_prod_stream$ 0)
(declare-fun shd$j (State_rule_prod_state_prod_stream$)State_rule_prod_state_prod$)
(declare-fun stl$j (State_rule_prod_state_prod_stream$)State_rule_prod_state_prod_stream$)
(declare-fun sCons$j (State_rule_prod_state_prod$ State_rule_prod_state_prod_stream$ )State_rule_prod_state_prod_stream$)
(declare-datatypes ()((State_state_rule_prod_prod$ (pair$i (fst$i State$ )(snd$i State_rule_prod$ )))))
(declare-sort State_state_rule_prod_prod_stream$ 0)
(declare-fun shd$k (State_state_rule_prod_prod_stream$)State_state_rule_prod_prod$)
(declare-fun stl$k (State_state_rule_prod_prod_stream$)State_state_rule_prod_prod_stream$)
(declare-fun sCons$k (State_state_rule_prod_prod$ State_state_rule_prod_prod_stream$ )State_state_rule_prod_prod_stream$)
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()State_set$ )
(declare-fun t$ ()State_rule_prod_tree$ )
(declare-fun ma$ ()Nat$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State$ )
(declare-fun s$b ()State$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun cont$ (State_rule_prod_tree$ )State_rule_prod_tree_fset$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun root$ (State_rule_prod_tree$ )State_rule_prod$ )
(declare-fun szip$ (Rule_stream$ Rule_stream$ )Rule_rule_prod_stream$ )
(declare-fun ipath$ (State_rule_prod_tree$ State_rule_prod_stream$ )Bool )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun steps$ ()State_rule_prod_stream$ )
(declare-fun szip$a (State_stream$ Rule_stream$ )State_rule_prod_stream$ )
(declare-fun szip$b (Rule_stream$ State_rule_prod_stream$ )Rule_state_rule_prod_prod_stream$ )
(declare-fun szip$c (State_rule_prod_stream$ Rule_stream$ )State_rule_prod_rule_prod_stream$ )
(declare-fun szip$d (State_rule_prod_stream$ State_rule_prod_stream$ )State_rule_prod_state_rule_prod_prod_stream$ )
(declare-fun szip$e (Rule_stream$ State_stream$ )Rule_state_prod_stream$ )
(declare-fun szip$f (State_stream$ State_stream$ )State_state_prod_stream$ )
(declare-fun szip$g (Rule_stream$ Rule_rule_prod_stream$ )Rule_rule_rule_prod_prod_stream$ )
(declare-fun szip$h (State_rule_prod_stream$ State_stream$ )State_rule_prod_state_prod_stream$ )
(declare-fun szip$i (State_stream$ State_rule_prod_stream$ )State_state_rule_prod_prod_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun sdrop$a (Nat$ State_rule_prod_stream$ )State_rule_prod_stream$ )
(declare-fun sdrop$b (Nat$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun sdrop$c (Nat$ State_stream$ )State_stream$ )
(declare-fun sdrop$d (Nat$ Rule_state_rule_prod_prod_stream$ )Rule_state_rule_prod_prod_stream$ )
(declare-fun sdrop$e (Nat$ State_rule_prod_rule_prod_stream$ )State_rule_prod_rule_prod_stream$ )
(declare-fun sdrop$f (Nat$ State_rule_prod_state_rule_prod_prod_stream$ )State_rule_prod_state_rule_prod_prod_stream$ )
(declare-fun sdrop$g (Nat$ Rule_state_prod_stream$ )Rule_state_prod_stream$ )
(declare-fun sdrop$h (Nat$ State_state_prod_stream$ )State_state_prod_stream$ )
(declare-fun sdrop$i (Nat$ Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream$ )
(declare-fun sdrop$j (Nat$ State_rule_prod_state_prod_stream$ )State_rule_prod_state_prod_stream$ )
(declare-fun sdrop$k (Nat$ State_state_rule_prod_prod_stream$ )State_state_rule_prod_prod_stream$ )
(declare-fun stepsa$ ()State_rule_prod_stream$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fmember$ (State_rule_prod_tree$ State_rule_prod_tree_fset$ )Bool )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(assert (! (not (exists ((?v0 Nat$ )(?v1 State$ ))(and (member$ ?v1 s$ )(ipath$ (mkTree$ eff$ (sdrop$ ?v0 rsa$ )?v1 )(sdrop$a (suc$ ma$ )stepsa$ ))))):named a0 ))
(assert (! (member$ s$a s$ ):named a1 ))
(assert (! (member$ s$b s$ ):named a2 ))
(assert (! (ipath$ t$ (sdrop$a (suc$ ma$ )stepsa$ )):named a3 ))
(assert (! (ipath$ (mkTree$ eff$ rsa$ s$b )stepsa$ ):named a4 ))
(assert (! (=> (forall ((?v0 Nat$ )(?v1 State$ ))(=> (and (member$ ?v1 s$ )(ipath$ (mkTree$ eff$ (sdrop$ ?v0 rsa$ )?v1 )(sdrop$a ma$ stepsa$ )))false ))false ):named a5 ))
(assert (! (ipath$ (mkTree$ eff$ (sdrop$ n$ rsa$ )s$a )(sdrop$a ma$ stepsa$ )):named a6 ))
(assert (! (ipath$ (mkTree$ eff$ rs$ s$b )steps$ ):named a7 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (= (root$ (mkTree$ eff$ (sdrop$ n$ rsa$ )s$a ))(shd$ (sdrop$a ma$ stepsa$ ))):named a11 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State_rule_prod_stream$ ))(=> (and (member$ s$b s$ )(and (fair$ rules$ ?v0 )(ipath$ (mkTree$ eff$ ?v0 s$b )?v1 )))(exists ((?v2 Nat$ )(?v3 State$ ))(and (member$ ?v3 s$ )(ipath$ (mkTree$ eff$ (sdrop$ ?v2 ?v0 )?v3 )(sdrop$a ma$ ?v1 )))))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(= (sdrop$b ?v0 (szip$ ?v1 ?v2 ))(szip$ (sdrop$ ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 Rule_stream$ ))(= (sdrop$a ?v0 (szip$a ?v1 ?v2 ))(szip$a (sdrop$c ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ ))(= (sdrop$d ?v0 (szip$b ?v1 ?v2 ))(szip$b (sdrop$ ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_prod_stream$ )(?v2 Rule_stream$ ))(= (sdrop$e ?v0 (szip$c ?v1 ?v2 ))(szip$c (sdrop$a ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_stream$ ))(= (sdrop$f ?v0 (szip$d ?v1 ?v2 ))(szip$d (sdrop$a ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 State_stream$ ))(= (sdrop$g ?v0 (szip$e ?v1 ?v2 ))(szip$e (sdrop$ ?v0 ?v1 )(sdrop$c ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 State_stream$ ))(= (sdrop$h ?v0 (szip$f ?v1 ?v2 ))(szip$f (sdrop$c ?v0 ?v1 )(sdrop$c ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (sdrop$i ?v0 (szip$g ?v1 ?v2 ))(szip$g (sdrop$ ?v0 ?v1 )(sdrop$b ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_prod_stream$ )(?v2 State_stream$ ))(= (sdrop$j ?v0 (szip$h ?v1 ?v2 ))(szip$h (sdrop$a ?v0 ?v1 )(sdrop$c ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 State_rule_prod_stream$ ))(= (sdrop$k ?v0 (szip$i ?v1 ?v2 ))(szip$i (sdrop$c ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a24 ))
(assert (! (=> (forall ((?v0 State_rule_prod_tree$ ))(=> (and (= (root$ (mkTree$ eff$ (sdrop$ n$ rsa$ )s$a ))(shd$ (sdrop$a ma$ stepsa$ )))(and (fmember$ ?v0 (cont$ (mkTree$ eff$ (sdrop$ n$ rsa$ )s$a )))(ipath$ ?v0 (sdrop$a (suc$ ma$ )stepsa$ ))))false ))false ):named a25 ))
(check-sat )
;(get-unsat-core )
