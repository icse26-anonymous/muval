;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Rule$ 0 )
(declare-sort A_set$ 0 )
(declare-sort State$ 0 )
(declare-sort A_tree$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_tree_fset$ 0 )
(declare-sort State_rule_prod_set$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort A_state_rule_prod_fun$ 0 )
(declare-sort State_rule_prod_a_fun$ 0 )
(declare-sort State_rule_prod_tree_fset$ 0 )
(declare-sort State_rule_prod_state_rule_prod_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-datatypes ()((State_rule_prod$ (pair$ (fst$ State$ )(snd$ Rule$ )))))
(declare-sort State_rule_prod_stream$ 0)
(declare-fun shd$a (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$a (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$a (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun t$ ()State_rule_prod_tree$ )
(declare-fun st$ ()A_stream$ )
(declare-fun ta$ ()A_tree$ )
(declare-fun cont$ (State_rule_prod_tree$ )State_rule_prod_tree_fset$ )
(declare-fun node$ (State_rule_prod$ State_rule_prod_tree_fset$ )State_rule_prod_tree$ )
(declare-fun root$ (A_tree$ )A$ )
(declare-fun cont$a (A_tree$ )A_tree_fset$ )
(declare-fun ipath$ (A_tree$ A_stream$ )Bool )
(declare-fun konig$ (State_rule_prod_tree$ )State_rule_prod_stream$ )
(declare-fun node$a (A$ A_tree_fset$ )A_tree$ )
(declare-fun root$a (State_rule_prod_tree$ )State_rule_prod$ )
(declare-fun steps$ ()State_rule_prod_stream$ )
(declare-fun ipath$a (State_rule_prod_tree$ State_rule_prod_stream$ )Bool )
(declare-fun konig$a (A_tree$ )A_stream$ )
(declare-fun member$ (State_rule_prod$ State_rule_prod_set$ )Bool )
(declare-fun fmember$ (State_rule_prod_tree$ State_rule_prod_tree_fset$ )Bool )
(declare-fun fun_app$ (State_rule_prod_a_fun$ State_rule_prod$ )A$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun tfinite$ (A_tree$ )Bool )
(declare-fun fmember$a (A_tree$ A_tree_fset$ )Bool )
(declare-fun fun_app$a (A_state_rule_prod_fun$ A$ )State_rule_prod$ )
(declare-fun fun_app$b (State_rule_prod_state_rule_prod_fun$ State_rule_prod$ )State_rule_prod$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun map_tree$ (State_rule_prod_a_fun$ State_rule_prod_tree$ )A_tree$ )
(declare-fun set_tree$ (State_rule_prod_tree$ )State_rule_prod_set$ )
(declare-fun tfinite$a (State_rule_prod_tree$ )Bool )
(declare-fun map_tree$a (A_state_rule_prod_fun$ A_tree$ )State_rule_prod_tree$ )
(declare-fun map_tree$b (State_rule_prod_state_rule_prod_fun$ State_rule_prod_tree$ )State_rule_prod_tree$ )
(declare-fun map_tree$c (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun set_tree$a (A_tree$ )A_set$ )
(assert (! (not (= (root$ ta$ )(shd$ st$ ))):named a0 ))
(assert (! (ipath$ ta$ st$ ):named a1 ))
(assert (! (ipath$a t$ steps$ ):named a2 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ ))(= (shd$a (konig$ ?v0 ))(root$a ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_tree$ ))(= (shd$ (konig$a ?v0 ))(root$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_stream$ ))(=> (tfinite$ ?v0 )(not (ipath$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_stream$ ))(=> (tfinite$a ?v0 )(not (ipath$a ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ ))(member$ (root$a ?v0 )(set_tree$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_tree$ ))(member$a (root$ ?v0 )(set_tree$a ?v0 ))):named a8 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod_tree_fset$ ))(! (= (root$a (node$ ?v0 ?v1 ))?v0 ):pattern ((node$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_fset$ ))(! (= (root$ (node$a ?v0 ?v1 ))?v0 ):pattern ((node$a ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 State_rule_prod_a_fun$ )(?v1 State_rule_prod_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_state_rule_prod_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$a ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 State_rule_prod_state_rule_prod_fun$ )(?v1 State_rule_prod_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$b ?v0 (root$a ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$c ?v0 ?v1 ))(fun_app$c ?v0 (root$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_tree$ ))(=> (and (= (root$a ?v0 )(root$a ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(= (cont$a ?v0 )(cont$a ?v1 )))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (not (tfinite$ ?v0 ))(ipath$ ?v0 (konig$a ?v0 )))):named a17 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ ))(=> (not (tfinite$a ?v0 ))(ipath$a ?v0 (konig$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_stream$ ))(= (ipath$a ?v0 ?v1 )(exists ((?v2 State_rule_prod_tree$ )(?v3 State_rule_prod_stream$ )(?v4 State_rule_prod_tree$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (root$a ?v2 )(shd$a ?v3 ))(and (fmember$ ?v4 (cont$ ?v2 ))(ipath$a ?v4 (stl$a ?v3 ))))))))):named a19 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_stream$ ))(= (ipath$ ?v0 ?v1 )(exists ((?v2 A_tree$ )(?v3 A_stream$ )(?v4 A_tree$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (root$ ?v2 )(shd$ ?v3 ))(and (fmember$a ?v4 (cont$a ?v2 ))(ipath$ ?v4 (stl$ ?v3 ))))))))):named a20 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_tree$ ))(=> (and (= (root$a ?v0 )(shd$a ?v1 ))(and (fmember$ ?v2 (cont$ ?v0 ))(ipath$a ?v2 (stl$a ?v1 ))))(ipath$a ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_stream$ )(?v2 A_tree$ ))(=> (and (= (root$ ?v0 )(shd$ ?v1 ))(and (fmember$a ?v2 (cont$a ?v0 ))(ipath$ ?v2 (stl$ ?v1 ))))(ipath$ ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_stream$ ))(=> (and (ipath$a ?v0 ?v1 )(forall ((?v2 State_rule_prod_tree$ )(?v3 State_rule_prod_stream$ )(?v4 State_rule_prod_tree$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (root$a ?v2 )(shd$a ?v3 ))(and (fmember$ ?v4 (cont$ ?v2 ))(ipath$a ?v4 (stl$a ?v3 ))))))false )))false )):named a23 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_stream$ ))(=> (and (ipath$ ?v0 ?v1 )(forall ((?v2 A_tree$ )(?v3 A_stream$ )(?v4 A_tree$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (root$ ?v2 )(shd$ ?v3 ))(and (fmember$a ?v4 (cont$a ?v2 ))(ipath$ ?v4 (stl$ ?v3 ))))))false )))false )):named a24 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod_tree_fset$ )(?v2 State_rule_prod$ )(?v3 State_rule_prod_tree_fset$ ))(= (= (node$ ?v0 ?v1 )(node$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_fset$ )(?v2 A$ )(?v3 A_tree_fset$ ))(= (= (node$a ?v0 ?v1 )(node$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ ))(= (node$ (root$a ?v0 )(cont$ ?v0 ))?v0 )):named a27 ))
(assert (! (forall ((?v0 A_tree$ ))(= (node$a (root$ ?v0 )(cont$a ?v0 ))?v0 )):named a28 ))
(assert (! (forall ((?v0 A_tree$ ))(= (tfinite$ ?v0 )(exists ((?v1 A_tree$ ))(and (= ?v0 ?v1 )(forall ((?v2 A_tree$ ))(=> (fmember$a ?v2 (cont$a ?v1 ))(tfinite$ ?v2 ))))))):named a29 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ ))(= (tfinite$a ?v0 )(exists ((?v1 State_rule_prod_tree$ ))(and (= ?v0 ?v1 )(forall ((?v2 State_rule_prod_tree$ ))(=> (fmember$ ?v2 (cont$ ?v1 ))(tfinite$a ?v2 ))))))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_fset$ ))(! (= (cont$a (node$a ?v0 ?v1 ))?v1 ):pattern ((node$a ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod_tree_fset$ ))(! (= (cont$ (node$ ?v0 ?v1 ))?v1 ):pattern ((node$ ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_state_rule_prod_fun$ )(?v3 A_state_rule_prod_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (set_tree$a ?v0 ))(and (member$a ?v5 (set_tree$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (map_tree$a ?v2 ?v0 )(map_tree$a ?v3 ?v1 )))(= ?v0 ?v1 ))):named a33 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_tree$ )(?v2 State_rule_prod_state_rule_prod_fun$ )(?v3 State_rule_prod_state_rule_prod_fun$ ))(=> (and (forall ((?v4 State_rule_prod$ )(?v5 State_rule_prod$ ))(=> (and (member$ ?v4 (set_tree$ ?v0 ))(and (member$ ?v5 (set_tree$ ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (map_tree$b ?v2 ?v0 )(map_tree$b ?v3 ?v1 )))(= ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_tree$ )(?v2 State_rule_prod_a_fun$ )(?v3 State_rule_prod_a_fun$ ))(=> (and (forall ((?v4 State_rule_prod$ )(?v5 State_rule_prod$ ))(=> (and (member$ ?v4 (set_tree$ ?v0 ))(and (member$ ?v5 (set_tree$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (map_tree$ ?v2 ?v0 )(map_tree$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (set_tree$a ?v0 ))(and (member$a ?v5 (set_tree$a ?v1 ))(= (fun_app$c ?v2 ?v4 )(fun_app$c ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (map_tree$c ?v2 ?v0 )(map_tree$c ?v3 ?v1 )))(= ?v0 ?v1 ))):named a36 ))
(check-sat )
;(get-unsat-core )
