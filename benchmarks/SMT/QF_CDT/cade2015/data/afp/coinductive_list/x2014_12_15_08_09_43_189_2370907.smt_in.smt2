;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_a_llist_set_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun bot$ ()A_llist_set$ )
(declare-fun bot$a ()A_set$ )
(declare-fun bot$b ()A_llist_bool_fun$ )
(declare-fun bot$c ()Bool )
(declare-fun bot$d ()A_bool_fun$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun lset$ ()A_llist_a_set_fun$ )
(declare-fun lset$a ()A_llist_llist_a_llist_set_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lmember$ (A_llist$ )A_llist_llist_bool_fun$ )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$a (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$c (A_llist_llist_a_llist_set_fun$ A_llist_llist$ )A_llist_set$ )
(declare-fun fun_app$d (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun gen_lset$ (A_llist_set$ )A_llist_llist_a_llist_set_fun$ )
(declare-fun is_empty$ (A_set$ )Bool )
(declare-fun lmember$a (A$ )A_llist_bool_fun$ )
(declare-fun gen_lset$a (A_set$ )A_llist_a_set_fun$ )
(declare-fun is_empty$a (A_llist_set$ )Bool )
(declare-fun pred_llist$ (A_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun pred_llist$a (A_bool_fun$ )A_llist_bool_fun$ )
(assert (! (not (= (lSup$ bot$ )lNil$ )):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= (collect$ ?v0 )bot$a )(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a1 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(= (= (collect$a ?v0 )bot$ )(forall ((?v1 A_llist$ ))(not (fun_app$a ?v0 ?v1 ))))):named a2 ))
(assert (! (forall ((?v0 A_set$ ))(= (forall ((?v1 A$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$a ))):named a3 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (forall ((?v1 A_llist$ ))(not (member$a ?v1 ?v0 )))(= ?v0 bot$ ))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= bot$a (collect$ ?v0 ))(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(= (= bot$ (collect$a ?v0 ))(forall ((?v1 A_llist$ ))(not (fun_app$a ?v0 ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 A$ ))(= (member$ ?v0 bot$a )false )):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(= (member$a ?v0 bot$ )false )):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a bot$b ?v0 )bot$c ):pattern ((fun_app$a bot$b ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (lmember$ ?v0 )lNil$a )false ):pattern ((lmember$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (lmember$a ?v0 )lNil$ )false ):pattern ((lmember$a ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_set$ ))(= (exists ((?v1 A$ ))(member$ ?v1 ?v0 ))(not (= ?v0 bot$a )))):named a12 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (exists ((?v1 A_llist$ ))(member$a ?v1 ?v0 ))(not (= ?v0 bot$ )))):named a13 ))
(assert (! (forall ((?v0 A_set$ ))(=> (forall ((?v1 A$ ))(=> (member$ ?v1 ?v0 )false ))(= ?v0 bot$a ))):named a14 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )false ))(= ?v0 bot$ ))):named a15 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(=> (= ?v0 bot$a )(not (member$ ?v1 ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ ))(=> (= ?v0 bot$ )(not (member$a ?v1 ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 bot$a )false )):named a18 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$a ?v0 bot$ )false )):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a bot$b ?v0 )bot$c ):pattern ((fun_app$a bot$b ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_set$ ))(! (= (fun_app$c (gen_lset$ ?v0 )lNil$a )?v0 ):pattern ((gen_lset$ ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$d (gen_lset$a ?v0 )lNil$ )?v0 ):pattern ((gen_lset$a ?v0 )))):named a22 ))
(assert (! (= bot$a (collect$ bot$d )):named a23 ))
(assert (! (= bot$ (collect$a bot$b )):named a24 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (is_empty$ ?v0 )(= ?v0 bot$a )):pattern ((is_empty$ ?v0 )))):named a25 ))
(assert (! (forall ((?v0 A_llist_set$ ))(! (= (is_empty$a ?v0 )(= ?v0 bot$ )):pattern ((is_empty$a ?v0 )))):named a26 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ bot$d ?v0 )(member$ ?v0 bot$a )):pattern ((fun_app$ bot$d ?v0 )))):named a27 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a bot$b ?v0 )(member$a ?v0 bot$ )):pattern ((fun_app$a bot$b ?v0 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(pred_llist$ ?v0 lNil$a )):named a29 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(fun_app$a (pred_llist$a ?v0 )lNil$ )):named a30 ))
(assert (! (= lset$ (gen_lset$a bot$a )):named a31 ))
(assert (! (= lset$a (gen_lset$ bot$ )):named a32 ))
(check-sat )
;(get-unsat-core )
