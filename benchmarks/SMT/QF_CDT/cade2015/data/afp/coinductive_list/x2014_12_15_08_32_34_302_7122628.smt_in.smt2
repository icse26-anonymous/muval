;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-datatypes ()((A_llist_list$ (nil$ )(cons$ (hd$ A_llist$ )(tl$ A_llist_list$ )))))
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lnth$a (A_llist_llist_llist$ Nat$ )A_llist_llist$ )
(declare-fun lnth$b (A_llist$ Nat$ )A$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lmember$ (A_llist_llist$ A_llist_llist_llist$ )Bool )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun lappend$a (A_llist_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lappend$b (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(declare-fun lmember$a (A_llist$ )A_llist_llist_bool_fun$ )
(declare-fun lmember$b (A$ )A_llist_bool_fun$ )
(declare-fun pred_llist$ (A_llist_llist_bool_fun$ A_llist_llist_llist$ )Bool )
(declare-fun pred_llist$a (A_llist_bool_fun$ )A_llist_llist_bool_fun$ )
(declare-fun pred_llist$b (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist_llist_llist$ A_llist_llist_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_llist_llist$ )A_llist_llist_bool_fun$ )
(declare-fun lstrict_prefix$b (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (= (lnth$ (lappend$ (llist_of$ xss$ )(lCons$a (lCons$ x$ xs$ )xss$a ))(size$ xss$ ))(lCons$ x$ xs$ ))):named a0 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (lappend$a (lCons$b ?v0 ?v1 )?v2 )(lCons$b ?v0 (lappend$a ?v1 ?v2 ))):pattern ((lappend$a (lCons$b ?v0 ?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (lappend$ (lCons$a ?v0 ?v1 )?v2 )(lCons$a ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$a ?v0 ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$b (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$b ?v1 ?v2 ))):pattern ((lappend$b (lCons$ ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (= xssa$ (lappend$ (llist_of$ xss$ )(lCons$a (lCons$ x$ xs$ )xss$a ))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= (lappend$a (lappend$a ?v0 ?v1 )?v2 )(lappend$a ?v0 (lappend$a ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$b (lappend$b ?v0 ?v1 )?v2 )(lappend$b ?v0 (lappend$b ?v1 ?v2 )))):named a11 ))
(assert (! (= (lconcat$ xssa$ )(lCons$ x$ xs$a )):named a12 ))
(assert (! (= xs$a (lappend$b xs$ (lconcat$ xss$a ))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(! (= (lconcat$a (lCons$c ?v0 ?v1 ))(lappend$a ?v0 (lconcat$a ?v1 ))):pattern ((lCons$c ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lconcat$b (lCons$b ?v0 ?v1 ))(lappend$ ?v0 (lconcat$b ?v1 ))):pattern ((lCons$b ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lconcat$ (lCons$a ?v0 ?v1 ))(lappend$b ?v0 (lconcat$ ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (pred_llist$ ?v0 (lCons$b ?v1 ?v2 ))(and (fun_app$ ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$b ?v1 ?v2 ))))):named a17 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$ (pred_llist$a ?v0 )(lCons$a ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(fun_app$ (pred_llist$a ?v0 )?v2 ))):pattern ((fun_app$ (pred_llist$a ?v0 )(lCons$a ?v1 ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (pred_llist$b ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$a (pred_llist$b ?v0 )?v2 ))):pattern ((fun_app$a (pred_llist$b ?v0 )(lCons$ ?v1 ?v2 ))))):named a19 ))
(assert (! (lnull$ (lconcat$ (llist_of$ xss$ ))):named a20 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a21 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_llist_list$ ))(= (size$ ?v1 )?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(not (= ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (lmember$ ?v0 (lCons$b ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$ ?v0 ?v2 ))):pattern ((lmember$ ?v0 (lCons$b ?v1 ?v2 ))))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$ (lmember$a ?v0 )(lCons$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$ (lmember$a ?v0 )?v2 ))):pattern ((fun_app$ (lmember$a ?v0 )(lCons$a ?v1 ?v2 ))))):named a25 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (lmember$b ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$a (lmember$b ?v0 )?v2 ))):pattern ((fun_app$a (lmember$b ?v0 )(lCons$ ?v1 ?v2 ))))):named a26 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lnth$a (lCons$b ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$b ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lnth$ (lCons$a ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$b (lCons$ ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 Nat$ ))(! (= (lnth$a (lCons$b ?v0 ?v1 )(suc$ ?v2 ))(lnth$a ?v1 ?v2 )):pattern ((lnth$a (lCons$b ?v0 ?v1 )(suc$ ?v2 ))))):named a30 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 Nat$ ))(! (= (lnth$ (lCons$a ?v0 ?v1 )(suc$ ?v2 ))(lnth$ ?v1 ?v2 )):pattern ((lnth$ (lCons$a ?v0 ?v1 )(suc$ ?v2 ))))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (lnth$b (lCons$ ?v0 ?v1 )(suc$ ?v2 ))(lnth$b ?v1 ?v2 )):pattern ((lnth$b (lCons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a32 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(! (= (lstrict_prefix$ (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$ ?v1 ?v3 ))):pattern ((lstrict_prefix$ (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))))):named a33 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(! (= (fun_app$ (lstrict_prefix$a (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (lstrict_prefix$a ?v1 )?v3 ))):pattern ((fun_app$ (lstrict_prefix$a (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))))):named a34 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (lstrict_prefix$b (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$a (lstrict_prefix$b ?v1 )?v3 ))):pattern ((fun_app$a (lstrict_prefix$b (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a35 ))
(check-sat )
;(get-unsat-core )
