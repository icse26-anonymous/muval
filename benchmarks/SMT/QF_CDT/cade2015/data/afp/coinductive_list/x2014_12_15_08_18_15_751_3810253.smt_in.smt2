;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun n$ ()Enat$ )
(declare-fun n$a ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun n_a$ ()Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(assert (! (not (= (lhd$ (ldrop$ (enat$ (suc$ n_a$ ))xsa$ ))(lnth$ xsa$ (the_enat$ (enat$ (suc$ n_a$ )))))):named a0 ))
(assert (! (= n$ (enat$ n$a )):named a1 ))
(assert (! (less$ (enat$ (suc$ n_a$ ))(llength$ xsa$ )):named a2 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= n$ (enat$ ?v0 ))false ))false ):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (less$ (enat$ n_a$ )(llength$ ?v0 ))(= (lhd$ (ldrop$ (enat$ n_a$ )?v0 ))(lnth$ ?v0 (the_enat$ (enat$ n_a$ )))))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (the_enat$ (enat$ ?v0 ))?v0 ):pattern ((enat$ ?v0 )))):named a8 ))
(assert (! (less$ n$ (llength$ xs$ )):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lhd$ (iterates$ ?v0 ?v1 ))?v1 )):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))(lnth$ ?v1 ?v2 )):pattern ((lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(! (= (ldrop$ (enat$ ?v0 )?v1 )(ldropn$ ?v0 ?v1 )):pattern ((ldrop$ (enat$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (lhd$ (ldropn$ ?v0 ?v1 ))(lnth$ ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(check-sat )
;(get-unsat-core )
