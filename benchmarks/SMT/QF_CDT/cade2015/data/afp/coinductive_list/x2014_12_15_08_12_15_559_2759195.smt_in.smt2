;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort Enat_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort Enat_enat_enat_fun_fun$ 0 )
(declare-sort A_llist_enat_enat_fun_fun$ 0 )
(declare-sort Enat_a_llist_enat_fun_fun$ 0 )
(declare-sort Enat_enat_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_enat_a_llist_fun_fun$ 0 )
(declare-sort Enat_a_llist_a_llist_fun_fun$ 0 )
(declare-sort Enat_enat_fun_enat_enat_fun_fun$ 0 )
(declare-sort Enat_enat_fun_enat_a_llist_fun_fun$ 0 )
(declare-sort Enat_a_llist_fun_enat_a_llist_fun_fun$ 0 )
(declare-sort A_llist_enat_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort Enat_enat_enat_fun_fun_enat_enat_enat_fun_fun_fun$ 0 )
(declare-sort A_llist_enat_enat_fun_fun_enat_a_llist_enat_fun_fun_fun$ 0 )
(declare-sort Enat_enat_a_llist_fun_fun_enat_enat_a_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_enat_a_llist_fun_fun_enat_a_llist_a_llist_fun_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun f$ (Enat$ )Enat_a_llist_fun$ )
(declare-fun uu$ (Enat$ )Enat_a_llist_fun$ )
(declare-fun uua$ ()Enat_a_llist_fun$ )
(declare-fun uub$ ()Enat_a_llist_fun$ )
(declare-fun uuc$ (Enat_a_llist_fun$ )A_llist_enat_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uud$ (A_llist_a_llist_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uue$ (A_llist_a_llist_fun$ )Enat_a_llist_fun_enat_a_llist_fun_fun$ )
(declare-fun uuf$ (Enat_a_llist_fun$ )Enat_enat_fun_enat_a_llist_fun_fun$ )
(declare-fun uug$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun uuh$ (A_llist$ )Enat_a_llist_fun$ )
(declare-fun uui$ (Enat_enat_enat_fun_fun$ )Enat_enat_fun$ )
(declare-fun uuj$ (Enat_enat_enat_fun_fun$ )Enat_enat_enat_fun_fun$ )
(declare-fun uuk$ (Enat_enat_enat_fun_fun$ )Enat_enat_enat_fun_fun$ )
(declare-fun uul$ (Enat_enat_a_llist_fun_fun$ )Enat_a_llist_fun$ )
(declare-fun uum$ (Enat_enat_a_llist_fun_fun$ )Enat_enat_a_llist_fun_fun$ )
(declare-fun uun$ (Enat_enat_a_llist_fun_fun$ )A_llist_enat_a_llist_fun_fun$ )
(declare-fun uuo$ (A_llist_enat_enat_fun_fun$ )Enat_a_llist_enat_fun_fun$ )
(declare-fun uup$ (A_llist_enat_fun$ )A_llist_enat_enat_fun_fun_enat_a_llist_enat_fun_fun_fun$ )
(declare-fun uuq$ (Enat_enat_fun$ )Enat_enat_enat_fun_fun_enat_enat_enat_fun_fun_fun$ )
(declare-fun uur$ (A_llist_enat_a_llist_fun_fun$ )Enat_a_llist_a_llist_fun_fun$ )
(declare-fun uus$ (A_llist_a_llist_fun$ )A_llist_enat_a_llist_fun_fun_enat_a_llist_a_llist_fun_fun_fun$ )
(declare-fun uut$ (Enat_a_llist_fun$ )Enat_enat_a_llist_fun_fun_enat_enat_a_llist_fun_fun_fun$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun fun_app$ (Enat_a_llist_fun$ Enat$ )A_llist$ )
(declare-fun less_eq$ ()Enat_enat_bool_fun_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (Enat_a_llist_fun_enat_a_llist_fun_fun$ Enat_a_llist_fun$ )Enat_a_llist_fun$ )
(declare-fun fun_app$b (Enat_enat_a_llist_fun_fun$ Enat$ )Enat_a_llist_fun$ )
(declare-fun fun_app$c (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun fun_app$d (Enat_enat_enat_fun_fun$ Enat$ )Enat_enat_fun$ )
(declare-fun fun_app$e (A_llist_enat_a_llist_fun_fun$ A_llist$ )Enat_a_llist_fun$ )
(declare-fun fun_app$f (Enat_enat_fun_enat_enat_fun_fun$ Enat_enat_fun$ )Enat_enat_fun$ )
(declare-fun fun_app$g (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$h (Enat_a_llist_a_llist_fun_fun$ Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$i (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$j (Enat_a_llist_enat_fun_fun$ Enat$ )A_llist_enat_fun$ )
(declare-fun fun_app$k (A_llist_enat_enat_fun_fun$ A_llist$ )Enat_enat_fun$ )
(declare-fun fun_app$l (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$m (A_llist_enat_fun_a_llist_a_llist_fun_fun$ A_llist_enat_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$n (Enat_enat_fun_enat_a_llist_fun_fun$ Enat_enat_fun$ )Enat_a_llist_fun$ )
(declare-fun fun_app$o (A_llist_enat_a_llist_fun_fun_enat_a_llist_a_llist_fun_fun_fun$ A_llist_enat_a_llist_fun_fun$ )Enat_a_llist_a_llist_fun_fun$ )
(declare-fun fun_app$p (A_llist_enat_enat_fun_fun_enat_a_llist_enat_fun_fun_fun$ A_llist_enat_enat_fun_fun$ )Enat_a_llist_enat_fun_fun$ )
(declare-fun fun_app$q (Enat_enat_a_llist_fun_fun_enat_enat_a_llist_fun_fun_fun$ Enat_enat_a_llist_fun_fun$ )Enat_enat_a_llist_fun_fun$ )
(declare-fun fun_app$r (Enat_enat_enat_fun_fun_enat_enat_enat_fun_fun_fun$ Enat_enat_enat_fun_fun$ )Enat_enat_enat_fun_fun$ )
(declare-fun fun_app$s (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$t (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$u (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$v (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(declare-fun monotone$ (Enat_enat_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ Enat_a_llist_fun$ )Bool )
(declare-fun case_enat$ (A_llist$ )Enat_a_llist_fun_enat_a_llist_fun_fun$ )
(declare-fun monotone$a (A_llist_a_llist_bool_fun_fun$ Enat_enat_bool_fun_fun$ A_llist_enat_fun$ )Bool )
(declare-fun monotone$b (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun monotone$c (Enat_enat_bool_fun_fun$ Enat_enat_bool_fun_fun$ Enat_enat_fun$ )Bool )
(declare-fun case_enat$a (Enat$ )Enat_enat_fun_enat_enat_fun_fun$ )
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uua$ ?v0 )(fun_app$ (fun_app$a (case_enat$ lNil$ )(uu$ ?v0 ))?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uub$ ?v0 )(fun_app$ (f$ ?v0 )(eSuc$ ?v0 ))):pattern ((fun_app$ uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Enat_enat_a_llist_fun_fun$ )(?v1 Enat$ ))(! (= (fun_app$ (uul$ ?v0 )?v1 )(fun_app$ (fun_app$b ?v0 ?v1 )(eSuc$ ?v1 ))):pattern ((fun_app$ (uul$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$ )(?v1 Enat$ ))(! (= (fun_app$c (uui$ ?v0 )?v1 )(fun_app$c (fun_app$d ?v0 ?v1 )(eSuc$ ?v1 ))):pattern ((fun_app$c (uui$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(fun_app$ (f$ ?v1 )?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 Enat_enat_a_llist_fun_fun$ )(?v1 A_llist$ )(?v2 Enat$ ))(! (= (fun_app$ (fun_app$e (uun$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (case_enat$ ?v1 )(fun_app$b (uum$ ?v0 )?v2 ))?v2 )):pattern ((fun_app$ (fun_app$e (uun$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$d (uuk$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$f (case_enat$a ?v1 )(fun_app$d (uuj$ ?v0 )?v2 ))?v2 )):pattern ((fun_app$c (fun_app$d (uuk$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_enat_a_llist_fun_fun$ )(?v1 Enat$ )(?v2 A_llist$ ))(! (= (fun_app$g (fun_app$h (uur$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$e ?v0 ?v2 )?v1 )):pattern ((fun_app$g (fun_app$h (uur$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_enat_enat_fun_fun$ )(?v1 Enat$ )(?v2 A_llist$ ))(! (= (fun_app$i (fun_app$j (uuo$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$k ?v0 ?v2 )?v1 )):pattern ((fun_app$i (fun_app$j (uuo$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 Enat_enat_a_llist_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(! (= (fun_app$ (fun_app$b (uum$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$b ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$b (uum$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$d (uuj$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$d (uuj$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$g (fun_app$l (uud$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$l (uud$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 Enat_a_llist_fun$ )(?v2 Enat$ ))(! (= (fun_app$ (fun_app$a (uue$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uue$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Enat_a_llist_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist$ ))(! (= (fun_app$g (fun_app$m (uuc$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$m (uuc$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat_a_llist_fun$ )(?v1 Enat_enat_fun$ )(?v2 Enat$ ))(! (= (fun_app$ (fun_app$n (uuf$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$n (uuf$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_enat_a_llist_fun_fun$ )(?v2 Enat$ )(?v3 A_llist$ ))(! (= (fun_app$g (fun_app$h (fun_app$o (uus$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$a (case_enat$ (fun_app$g ?v0 ?v3 ))(fun_app$e ?v1 ?v3 ))?v2 )):pattern ((fun_app$g (fun_app$h (fun_app$o (uus$ ?v0 )?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_enat_enat_fun_fun$ )(?v2 Enat$ )(?v3 A_llist$ ))(! (= (fun_app$i (fun_app$j (fun_app$p (uup$ ?v0 )?v1 )?v2 )?v3 )(fun_app$c (fun_app$f (case_enat$a (fun_app$i ?v0 ?v3 ))(fun_app$k ?v1 ?v3 ))?v2 )):pattern ((fun_app$i (fun_app$j (fun_app$p (uup$ ?v0 )?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 Enat_a_llist_fun$ )(?v1 Enat_enat_a_llist_fun_fun$ )(?v2 Enat$ )(?v3 Enat$ ))(! (= (fun_app$ (fun_app$b (fun_app$q (uut$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$a (case_enat$ (fun_app$ ?v0 ?v3 ))(fun_app$b ?v1 ?v3 ))?v2 )):pattern ((fun_app$ (fun_app$b (fun_app$q (uut$ ?v0 )?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_enat_fun_fun$ )(?v2 Enat$ )(?v3 Enat$ ))(! (= (fun_app$c (fun_app$d (fun_app$r (uuq$ ?v0 )?v1 )?v2 )?v3 )(fun_app$c (fun_app$f (case_enat$a (fun_app$c ?v0 ?v3 ))(fun_app$d ?v1 ?v3 ))?v2 )):pattern ((fun_app$c (fun_app$d (fun_app$r (uuq$ ?v0 )?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$g (uug$ ?v0 )?v1 )?v0 ):pattern ((fun_app$g (uug$ ?v0 )?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(! (= (fun_app$ (uuh$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uuh$ ?v0 )?v1 )))):named a20 ))
(assert (! (not (monotone$ less_eq$ lprefix$ uua$ )):named a21 ))
(assert (! (monotone$ less_eq$ lprefix$ uub$ ):named a22 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$s (fun_app$t lprefix$ ?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$s (fun_app$t lprefix$ ?v0 )?v0 )):named a24 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$s (fun_app$t lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$s (fun_app$t lprefix$ lNil$ )?v0 )))):named a25 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (fun_app$u (fun_app$v less_eq$ ?v3 )?v4 )(fun_app$u (fun_app$v ?v0 ?v3 )?v4 )))(=> (fun_app$u (fun_app$v ?v0 ?v1 )?v2 )(fun_app$u (fun_app$v ?v0 ?v2 )?v1 )))(fun_app$u (fun_app$v ?v0 ?v2 )?v1 ))):named a26 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_enat_fun$ ))(=> (and (monotone$ ?v0 lprefix$ ?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$b ?v2 lprefix$ (fun_app$m (uuc$ ?v1 )?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (monotone$b ?v0 lprefix$ ?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$b ?v2 lprefix$ (fun_app$l (uud$ ?v1 )?v3 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 Enat_enat_bool_fun_fun$ )(?v3 Enat_a_llist_fun$ ))(=> (and (monotone$b ?v0 lprefix$ ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$ (fun_app$a (uue$ ?v1 )?v3 )))):named a29 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat_a_llist_fun$ )(?v2 Enat_enat_bool_fun_fun$ )(?v3 Enat_enat_fun$ ))(=> (and (monotone$ ?v0 lprefix$ ?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$ (fun_app$n (uuf$ ?v1 )?v3 )))):named a30 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$s (fun_app$t lprefix$ ?v0 )?v1 )(fun_app$s (fun_app$t lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$s (fun_app$t lprefix$ ?v0 )?v1 )(fun_app$s (fun_app$t lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$s (fun_app$t lprefix$ ?v0 )?v1 )(fun_app$s (fun_app$t lprefix$ ?v2 )?v1 ))(or (fun_app$s (fun_app$t lprefix$ ?v0 )?v2 )(fun_app$s (fun_app$t lprefix$ ?v2 )?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$s (fun_app$t lprefix$ ?v0 )?v1 )(fun_app$s (fun_app$t lprefix$ ?v1 )?v2 ))(fun_app$s (fun_app$t lprefix$ ?v0 )?v2 ))):named a34 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$s (fun_app$t lprefix$ ?v0 )?v1 )(fun_app$s (fun_app$t lprefix$ ?v1 )?v2 ))(fun_app$s (fun_app$t lprefix$ ?v0 )?v2 ))):named a35 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$b ?v0 lprefix$ (uug$ ?v1 ))):named a36 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$ ?v0 lprefix$ (uuh$ ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$s (fun_app$t lprefix$ lNil$ )?v0 )):named a38 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$u (fun_app$v less_eq$ (eSuc$ ?v0 ))(eSuc$ ?v1 ))(fun_app$u (fun_app$v less_eq$ ?v0 )?v1 ))):named a39 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat_enat_enat_fun_fun$ )(?v2 Enat$ ))(=> (and (monotone$c less_eq$ ?v0 (uui$ ?v1 ))(and (forall ((?v3 Enat$ ))(fun_app$u (fun_app$v ?v0 ?v2 )(fun_app$c (fun_app$d ?v1 ?v3 )(eSuc$ ?v3 ))))(fun_app$u (fun_app$v ?v0 ?v2 )?v2 )))(monotone$c less_eq$ ?v0 (fun_app$d (uuk$ ?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 Enat_enat_a_llist_fun_fun$ )(?v2 A_llist$ ))(=> (and (monotone$ less_eq$ ?v0 (uul$ ?v1 ))(and (forall ((?v3 Enat$ ))(fun_app$s (fun_app$t ?v0 ?v2 )(fun_app$ (fun_app$b ?v1 ?v3 )(eSuc$ ?v3 ))))(fun_app$s (fun_app$t ?v0 ?v2 )?v2 )))(monotone$ less_eq$ ?v0 (fun_app$e (uun$ ?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (eSuc$ ?v0 )(eSuc$ ?v1 ))(= ?v0 ?v1 ))):named a42 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (eSuc$ ?v0 )(eSuc$ ?v1 ))(= ?v0 ?v1 ))):named a43 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 Enat_enat_bool_fun_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_enat_enat_fun_fun$ )(?v4 Enat$ ))(=> (and (monotone$a ?v0 ?v1 ?v2 )(forall ((?v5 Enat$ ))(monotone$a ?v0 ?v1 (fun_app$j (uuo$ ?v3 )?v5 ))))(monotone$a ?v0 ?v1 (fun_app$j (fun_app$p (uup$ ?v2 )?v3 )?v4 )))):named a44 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat_enat_bool_fun_fun$ )(?v2 Enat_enat_fun$ )(?v3 Enat_enat_enat_fun_fun$ )(?v4 Enat$ ))(=> (and (monotone$c ?v0 ?v1 ?v2 )(forall ((?v5 Enat$ ))(monotone$c ?v0 ?v1 (fun_app$d (uuj$ ?v3 )?v5 ))))(monotone$c ?v0 ?v1 (fun_app$d (fun_app$r (uuq$ ?v2 )?v3 )?v4 )))):named a45 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_enat_a_llist_fun_fun$ )(?v4 Enat$ ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(forall ((?v5 Enat$ ))(monotone$b ?v0 ?v1 (fun_app$h (uur$ ?v3 )?v5 ))))(monotone$b ?v0 ?v1 (fun_app$h (fun_app$o (uus$ ?v2 )?v3 )?v4 )))):named a46 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 Enat_a_llist_fun$ )(?v3 Enat_enat_a_llist_fun_fun$ )(?v4 Enat$ ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(forall ((?v5 Enat$ ))(monotone$ ?v0 ?v1 (fun_app$b (uum$ ?v3 )?v5 ))))(monotone$ ?v0 ?v1 (fun_app$b (fun_app$q (uut$ ?v2 )?v3 )?v4 )))):named a47 ))
(check-sat )
;(get-unsat-core )
