;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_nat_bool_fun_fun$ 0 )
(declare-sort Nat_a_bool_fun_fun$ 0 )
(declare-sort A_nat_prod_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort A_a_a_prod_bool_fun_fun$ 0 )
(declare-sort A_a_nat_prod_bool_fun_fun$ 0 )
(declare-sort A_nat_prod_a_bool_fun_fun$ 0 )
(declare-sort A_a_nat_prod_prod_bool_fun$ 0 )
(declare-sort A_nat_prod_a_prod_bool_fun$ 0 )
(declare-sort A_a_a_nat_prod_prod_bool_fun_fun$ 0 )
(declare-sort A_a_nat_prod_a_prod_bool_fun_fun$ 0 )
(declare-sort A_nat_prod_a_nat_prod_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_nat_prod$ (pair$ (fst$ A$ )(snd$ Nat$ )))))
(declare-sort A_nat_prod_llist$ 0)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$a ()A_nat_prod_llist$)
(declare-fun lhd$a (A_nat_prod_llist$)A_nat_prod$)
(declare-fun ltl$a (A_nat_prod_llist$)A_nat_prod_llist$)
(declare-fun lCons$a (A_nat_prod$ A_nat_prod_llist$ )A_nat_prod_llist$)
(declare-fun lNil$b ()Nat_llist$)
(declare-fun lhd$b (Nat_llist$)Nat$)
(declare-fun ltl$b (Nat_llist$)Nat_llist$)
(declare-fun lCons$b (Nat$ Nat_llist$ )Nat_llist$)
(declare-datatypes ()((A_nat_prod_a_nat_prod_prod$ (pair$a (fst$a A_nat_prod$ )(snd$a A_nat_prod$ )))(A_nat_prod_a_prod$ (pair$b (fst$b A_nat_prod$ )(snd$b A$ )))(A_a_nat_prod_prod$ (pair$c (fst$c A$ )(snd$c A_nat_prod$ )))(A_a_prod$ (pair$d (fst$d A$ )(snd$d A$ )))))
(declare-sort A_a_prod_llist$ 0)
(declare-sort A_nat_prod_a_prod_llist$ 0)
(declare-sort A_a_nat_prod_prod_llist$ 0)
(declare-sort A_nat_prod_a_nat_prod_prod_llist$ 0)
(declare-fun lNil$c ()A_a_prod_llist$)
(declare-fun lhd$c (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$c (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$c (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-fun lNil$d ()A_nat_prod_a_prod_llist$)
(declare-fun lhd$d (A_nat_prod_a_prod_llist$)A_nat_prod_a_prod$)
(declare-fun ltl$d (A_nat_prod_a_prod_llist$)A_nat_prod_a_prod_llist$)
(declare-fun lCons$d (A_nat_prod_a_prod$ A_nat_prod_a_prod_llist$ )A_nat_prod_a_prod_llist$)
(declare-fun lNil$e ()A_a_nat_prod_prod_llist$)
(declare-fun lhd$e (A_a_nat_prod_prod_llist$)A_a_nat_prod_prod$)
(declare-fun ltl$e (A_a_nat_prod_prod_llist$)A_a_nat_prod_prod_llist$)
(declare-fun lCons$e (A_a_nat_prod_prod$ A_a_nat_prod_prod_llist$ )A_a_nat_prod_prod_llist$)
(declare-fun lNil$f ()A_nat_prod_a_nat_prod_prod_llist$)
(declare-fun lhd$f (A_nat_prod_a_nat_prod_prod_llist$)A_nat_prod_a_nat_prod_prod$)
(declare-fun ltl$f (A_nat_prod_a_nat_prod_prod_llist$)A_nat_prod_a_nat_prod_prod_llist$)
(declare-fun lCons$f (A_nat_prod_a_nat_prod_prod$ A_nat_prod_a_nat_prod_prod_llist$ )A_nat_prod_a_nat_prod_prod_llist$)
(declare-datatypes ()((Nat_a_prod$ (pair$e (fst$e Nat$ )(snd$e A$ )))))
(declare-sort Nat_a_prod_llist$ 0)
(declare-fun lNil$g ()Nat_a_prod_llist$)
(declare-fun lhd$g (Nat_a_prod_llist$)Nat_a_prod$)
(declare-fun ltl$g (Nat_a_prod_llist$)Nat_a_prod_llist$)
(declare-fun lCons$g (Nat_a_prod$ Nat_a_prod_llist$ )Nat_a_prod_llist$)
(declare-datatypes ()((Nat_nat_prod$ (pair$f (fst$f Nat$ )(snd$f Nat$ )))))
(declare-sort Nat_nat_prod_llist$ 0)
(declare-fun lNil$h ()Nat_nat_prod_llist$)
(declare-fun lhd$h (Nat_nat_prod_llist$)Nat_nat_prod$)
(declare-fun ltl$h (Nat_nat_prod_llist$)Nat_nat_prod_llist$)
(declare-fun lCons$h (Nat_nat_prod$ Nat_nat_prod_llist$ )Nat_nat_prod_llist$)
(declare-datatypes ()((A_a_prod_a_prod$ (pair$g (fst$g A_a_prod$ )(snd$g A$ )))))
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$i ()A_a_prod_a_prod_llist$)
(declare-fun lhd$i (A_a_prod_a_prod_llist$)A_a_prod_a_prod$)
(declare-fun ltl$i (A_a_prod_a_prod_llist$)A_a_prod_a_prod_llist$)
(declare-fun lCons$i (A_a_prod_a_prod$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$)
(declare-datatypes ()((A_a_prod_nat_prod$ (pair$h (fst$h A_a_prod$ )(snd$h Nat$ )))))
(declare-sort A_a_prod_nat_prod_llist$ 0)
(declare-fun lNil$j ()A_a_prod_nat_prod_llist$)
(declare-fun lhd$j (A_a_prod_nat_prod_llist$)A_a_prod_nat_prod$)
(declare-fun ltl$j (A_a_prod_nat_prod_llist$)A_a_prod_nat_prod_llist$)
(declare-fun lCons$j (A_a_prod_nat_prod$ A_a_prod_nat_prod_llist$ )A_a_prod_nat_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod$ (pair$i (fst$i A$ )(snd$i A_a_prod$ )))))
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-fun lNil$k ()A_a_a_prod_prod_llist$)
(declare-fun lhd$k (A_a_a_prod_prod_llist$)A_a_a_prod_prod$)
(declare-fun ltl$k (A_a_a_prod_prod_llist$)A_a_a_prod_prod_llist$)
(declare-fun lCons$k (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$)
(declare-datatypes ()((A_a_nat_prod_a_prod_prod$ (pair$j (fst$j A$ )(snd$j A_nat_prod_a_prod$ )))(A_a_a_nat_prod_prod_prod$ (pair$k (fst$k A$ )(snd$k A_a_nat_prod_prod$ )))))
(declare-fun a$ ()Nat_set$ )
(declare-fun uu$ ()A_nat_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun uua$ ()Nat_bool_fun$ )
(declare-fun uub$ ()Nat_bool_fun$ )
(declare-fun uuc$ (Bool A_nat_prod_a_nat_prod_bool_fun_fun$ )A_nat_prod_a_nat_prod_bool_fun_fun$ )
(declare-fun uud$ (Bool A_nat_prod_a_bool_fun_fun$ )A_nat_prod_a_bool_fun_fun$ )
(declare-fun uue$ (Bool A_a_nat_prod_bool_fun_fun$ )A_a_nat_prod_bool_fun_fun$ )
(declare-fun uuf$ (Bool A_a_bool_fun_fun$ )A_a_bool_fun_fun$ )
(declare-fun uug$ (Bool A_nat_bool_fun_fun$ )A_nat_bool_fun_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_nat_prod_llist$ Nat$ )A_nat_prod$ )
(declare-fun lzip$ (A_llist$ Nat_llist$ )A_nat_prod_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun lnth$b (Nat_llist$ Nat$ )Nat$ )
(declare-fun lnth$c (A_a_prod_llist$ Nat$ )A_a_prod$ )
(declare-fun lnth$d (A_nat_prod_a_prod_llist$ Nat$ )A_nat_prod_a_prod$ )
(declare-fun lnth$e (A_a_nat_prod_prod_llist$ Nat$ )A_a_nat_prod_prod$ )
(declare-fun lnth$f (A_nat_prod_a_nat_prod_prod_llist$ Nat$ )A_nat_prod_a_nat_prod_prod$ )
(declare-fun lnth$g (Nat_a_prod_llist$ Nat$ )Nat_a_prod$ )
(declare-fun lnth$h (Nat_nat_prod_llist$ Nat$ )Nat_nat_prod$ )
(declare-fun lnth$i (A_a_prod_a_prod_llist$ Nat$ )A_a_prod_a_prod$ )
(declare-fun lnth$j (A_a_prod_nat_prod_llist$ Nat$ )A_a_prod_nat_prod$ )
(declare-fun lnth$k (A_a_a_prod_prod_llist$ Nat$ )A_a_a_prod_prod$ )
(declare-fun lzip$a (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$b (A_nat_prod_llist$ A_llist$ )A_nat_prod_a_prod_llist$ )
(declare-fun lzip$c (A_llist$ A_nat_prod_llist$ )A_a_nat_prod_prod_llist$ )
(declare-fun lzip$d (A_nat_prod_llist$ A_nat_prod_llist$ )A_nat_prod_a_nat_prod_prod_llist$ )
(declare-fun lzip$e (Nat_llist$ A_llist$ )Nat_a_prod_llist$ )
(declare-fun lzip$f (Nat_llist$ Nat_llist$ )Nat_nat_prod_llist$ )
(declare-fun lzip$g (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$h (A_a_prod_llist$ Nat_llist$ )A_a_prod_nat_prod_llist$ )
(declare-fun lzip$i (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun zero$a ()Enat$ )
(declare-fun finite$ (Nat_set$ )Bool )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_nat_bool_fun_fun$ A$ )Nat_bool_fun$ )
(declare-fun fun_app$b (A_nat_prod_bool_fun$ A_nat_prod$ )Bool )
(declare-fun fun_app$c (A_nat_prod_a_nat_prod_bool_fun_fun$ A_nat_prod$ )A_nat_prod_bool_fun$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (A_nat_prod_a_bool_fun_fun$ A_nat_prod$ )A_bool_fun$ )
(declare-fun fun_app$f (A_a_nat_prod_bool_fun_fun$ A$ )A_nat_prod_bool_fun$ )
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$h (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$i (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$j (Nat_a_bool_fun_fun$ Nat$ )A_bool_fun$ )
(declare-fun fun_app$k (A_nat_prod_a_prod_bool_fun$ A_nat_prod_a_prod$ )Bool )
(declare-fun fun_app$l (A_a_nat_prod_a_prod_bool_fun_fun$ A$ )A_nat_prod_a_prod_bool_fun$ )
(declare-fun fun_app$m (A_a_nat_prod_prod_bool_fun$ A_a_nat_prod_prod$ )Bool )
(declare-fun fun_app$n (A_a_a_nat_prod_prod_bool_fun_fun$ A$ )A_a_nat_prod_prod_bool_fun$ )
(declare-fun fun_app$o (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun fun_app$p (A_a_a_prod_bool_fun_fun$ A$ )A_a_prod_bool_fun$ )
(declare-fun iterates$ (Nat_nat_fun$ Nat$ )Nat_llist$ )
(declare-fun llength$a (Nat_llist$ )Enat$ )
(declare-fun llength$b (A_nat_prod_llist$ )Enat$ )
(declare-fun llength$c (A_a_prod_llist$ )Enat$ )
(declare-fun case_prod$ (A_nat_bool_fun_fun$ A_nat_prod$ )Bool )
(declare-fun case_prod$a (A_nat_prod_a_nat_prod_bool_fun_fun$ A_nat_prod_a_nat_prod_prod$ )Bool )
(declare-fun case_prod$b (A_nat_prod_a_bool_fun_fun$ A_nat_prod_a_prod$ )Bool )
(declare-fun case_prod$c (A_a_nat_prod_bool_fun_fun$ A_a_nat_prod_prod$ )Bool )
(declare-fun case_prod$d (A_a_bool_fun_fun$ A_a_prod$ )Bool )
(declare-fun case_prod$e (Nat_nat_bool_fun_fun$ Nat_nat_prod$ )Bool )
(declare-fun case_prod$f (Nat_a_bool_fun_fun$ Nat_a_prod$ )Bool )
(declare-fun case_prod$g (A_a_nat_prod_a_prod_bool_fun_fun$ A_a_nat_prod_a_prod_prod$ )Bool )
(declare-fun case_prod$h (A_a_a_nat_prod_prod_bool_fun_fun$ A_a_a_nat_prod_prod_prod$ )Bool )
(declare-fun case_prod$i (A_a_a_prod_bool_fun_fun$ A_a_a_prod_prod$ )Bool )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uub$ ?v0 )(and (less$ (enat$ ?v0 )(llength$ xs$ ))(member$ ?v0 a$ ))):pattern ((fun_app$ uub$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(and (less$ (enat$ ?v0 )(llength$ xs$ ))(case_prod$ uu$ (lnth$ (lzip$ xs$ (iterates$ suc$ zero$ ))?v0 )))):pattern ((fun_app$ uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(member$ ?v1 a$ )):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_prod_a_nat_prod_bool_fun_fun$ )(?v2 A_nat_prod$ )(?v3 A_nat_prod$ ))(! (= (fun_app$b (fun_app$c (uuc$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (uuc$ ?v0 ?v1 )?v2 )?v3 )))):named a3 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_prod_a_bool_fun_fun$ )(?v2 A_nat_prod$ )(?v3 A$ ))(! (= (fun_app$d (fun_app$e (uud$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$d (fun_app$e ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$e (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a4 ))
(assert (! (forall ((?v0 Bool )(?v1 A_a_nat_prod_bool_fun_fun$ )(?v2 A$ )(?v3 A_nat_prod$ ))(! (= (fun_app$b (fun_app$f (uue$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$b (fun_app$f ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$f (uue$ ?v0 ?v1 )?v2 )?v3 )))):named a5 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_bool_fun_fun$ )(?v2 A$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$a (uug$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uug$ ?v0 ?v1 )?v2 )?v3 )))):named a6 ))
(assert (! (forall ((?v0 Bool )(?v1 A_a_bool_fun_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$d (fun_app$g (uuf$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$d (fun_app$g ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$g (uuf$ ?v0 ?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (not (= (collect$ uua$ )(collect$ uub$ ))):named a8 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_prod_a_nat_prod_bool_fun_fun$ )(?v2 A_nat_prod_a_nat_prod_prod$ ))(= (case_prod$a (uuc$ ?v0 ?v1 )?v2 )(and ?v0 (case_prod$a ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_prod_a_bool_fun_fun$ )(?v2 A_nat_prod_a_prod$ ))(= (case_prod$b (uud$ ?v0 ?v1 )?v2 )(and ?v0 (case_prod$b ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Bool )(?v1 A_a_nat_prod_bool_fun_fun$ )(?v2 A_a_nat_prod_prod$ ))(= (case_prod$c (uue$ ?v0 ?v1 )?v2 )(and ?v0 (case_prod$c ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Bool )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_prod$ ))(= (case_prod$d (uuf$ ?v0 ?v1 )?v2 )(and ?v0 (case_prod$d ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_bool_fun_fun$ )(?v2 A_nat_prod$ ))(= (case_prod$ (uug$ ?v0 ?v1 )?v2 )(and ?v0 (case_prod$ ?v1 ?v2 )))):named a13 ))
(assert (! (or (lfinite$ xs$ )(finite$ a$ )):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$h suc$ ?v0 )(fun_app$h suc$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$h suc$ ?v0 )(fun_app$h suc$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 Nat_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$a ?v2 )))(= (lnth$ (lzip$ ?v1 ?v2 )?v0 )(pair$ (lnth$a ?v1 ?v0 )(lnth$b ?v2 ?v0 ))))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$c (lzip$a ?v1 ?v2 )?v0 )(pair$d (lnth$a ?v1 ?v0 )(lnth$a ?v2 ?v0 ))))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_prod_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$b ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$d (lzip$b ?v1 ?v2 )?v0 )(pair$b (lnth$ ?v1 ?v0 )(lnth$a ?v2 ?v0 ))))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_nat_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$b ?v2 )))(= (lnth$e (lzip$c ?v1 ?v2 )?v0 )(pair$c (lnth$a ?v1 ?v0 )(lnth$ ?v2 ?v0 ))))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_prod_llist$ )(?v2 A_nat_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$b ?v1 ))(less$ (enat$ ?v0 )(llength$b ?v2 )))(= (lnth$f (lzip$d ?v1 ?v2 )?v0 )(pair$a (lnth$ ?v1 ?v0 )(lnth$ ?v2 ?v0 ))))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$a ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$g (lzip$e ?v1 ?v2 )?v0 )(pair$e (lnth$b ?v1 ?v0 )(lnth$a ?v2 ?v0 ))))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$a ?v1 ))(less$ (enat$ ?v0 )(llength$a ?v2 )))(= (lnth$h (lzip$f ?v1 ?v2 )?v0 )(pair$f (lnth$b ?v1 ?v0 )(lnth$b ?v2 ?v0 ))))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$c ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$i (lzip$g ?v1 ?v2 )?v0 )(pair$g (lnth$c ?v1 ?v0 )(lnth$a ?v2 ?v0 ))))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 Nat_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$c ?v1 ))(less$ (enat$ ?v0 )(llength$a ?v2 )))(= (lnth$j (lzip$h ?v1 ?v2 )?v0 )(pair$h (lnth$c ?v1 ?v0 )(lnth$b ?v2 ?v0 ))))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$c ?v2 )))(= (lnth$k (lzip$i ?v1 ?v2 )?v0 )(pair$i (lnth$a ?v1 ?v0 )(lnth$c ?v2 ?v0 ))))):named a27 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a28 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$h suc$ ?v1 ))false )))false )):named a29 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$h suc$ ?v1 ))false )))false )):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a32 ))
(assert (! (forall ((?v0 A$ )(?v1 A_nat_prod_a_prod$ )(?v2 A$ )(?v3 A_nat_prod_a_prod$ ))(= (= (pair$j ?v0 ?v1 )(pair$j ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a33 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_nat_prod_prod$ )(?v2 A$ )(?v3 A_a_nat_prod_prod$ ))(= (= (pair$k ?v0 ?v1 )(pair$k ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ )(?v2 A$ )(?v3 A_a_prod$ ))(= (= (pair$i ?v0 ?v1 )(pair$i ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a37 ))
(assert (! (forall ((?v0 A$ )(?v1 A_nat_prod$ )(?v2 A$ )(?v3 A_nat_prod$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a38 ))
(assert (! (forall ((?v0 A_nat_prod$ )(?v1 A$ )(?v2 A_nat_prod$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a39 ))
(assert (! (forall ((?v0 A_nat_prod$ )(?v1 A_nat_prod$ )(?v2 A_nat_prod$ )(?v3 A_nat_prod$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 A$ )(?v1 A_nat_prod_a_prod$ )(?v2 A$ )(?v3 A_nat_prod_a_prod$ ))(= (= (pair$j ?v0 ?v1 )(pair$j ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_nat_prod_prod$ )(?v2 A$ )(?v3 A_a_nat_prod_prod$ ))(= (= (pair$k ?v0 ?v1 )(pair$k ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ )(?v2 A$ )(?v3 A_a_prod$ ))(= (= (pair$i ?v0 ?v1 )(pair$i ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a45 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a46 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 A$ )(?v1 A_nat_prod$ )(?v2 A$ )(?v3 A_nat_prod$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a48 ))
(assert (! (forall ((?v0 A_nat_prod$ )(?v1 A$ )(?v2 A_nat_prod$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a49 ))
(assert (! (forall ((?v0 A_nat_prod$ )(?v1 A_nat_prod$ )(?v2 A_nat_prod$ )(?v3 A_nat_prod$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a50 ))
(assert (! (forall ((?v0 Enat$ ))(= (less$ zero$a ?v0 )(not (= ?v0 zero$a )))):named a51 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (fun_app$ (fun_app$i ?v0 ?v1 )?v2 )(case_prod$e ?v0 (pair$f ?v1 ?v2 )))):named a52 ))
(assert (! (forall ((?v0 Nat_a_bool_fun_fun$ )(?v1 Nat$ )(?v2 A$ ))(=> (fun_app$d (fun_app$j ?v0 ?v1 )?v2 )(case_prod$f ?v0 (pair$e ?v1 ?v2 )))):named a53 ))
(assert (! (forall ((?v0 A_a_nat_prod_a_prod_bool_fun_fun$ )(?v1 A$ )(?v2 A_nat_prod_a_prod$ ))(=> (fun_app$k (fun_app$l ?v0 ?v1 )?v2 )(case_prod$g ?v0 (pair$j ?v1 ?v2 )))):named a54 ))
(assert (! (forall ((?v0 A_a_a_nat_prod_prod_bool_fun_fun$ )(?v1 A$ )(?v2 A_a_nat_prod_prod$ ))(=> (fun_app$m (fun_app$n ?v0 ?v1 )?v2 )(case_prod$h ?v0 (pair$k ?v1 ?v2 )))):named a55 ))
(assert (! (forall ((?v0 A_a_a_prod_bool_fun_fun$ )(?v1 A$ )(?v2 A_a_prod$ ))(=> (fun_app$o (fun_app$p ?v0 ?v1 )?v2 )(case_prod$i ?v0 (pair$i ?v1 ?v2 )))):named a56 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$d (fun_app$g ?v0 ?v1 )?v2 )(case_prod$d ?v0 (pair$d ?v1 ?v2 )))):named a57 ))
(assert (! (forall ((?v0 A_a_nat_prod_bool_fun_fun$ )(?v1 A$ )(?v2 A_nat_prod$ ))(=> (fun_app$b (fun_app$f ?v0 ?v1 )?v2 )(case_prod$c ?v0 (pair$c ?v1 ?v2 )))):named a58 ))
(assert (! (forall ((?v0 A_nat_prod_a_bool_fun_fun$ )(?v1 A_nat_prod$ )(?v2 A$ ))(=> (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(case_prod$b ?v0 (pair$b ?v1 ?v2 )))):named a59 ))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_bool_fun_fun$ )(?v1 A_nat_prod$ )(?v2 A_nat_prod$ ))(=> (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(case_prod$a ?v0 (pair$a ?v1 ?v2 )))):named a60 ))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$ )(?v1 A$ )(?v2 Nat$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(case_prod$ ?v0 (pair$ ?v1 ?v2 )))):named a61 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (fun_app$ (fun_app$i ?v0 ?v1 )?v2 )(case_prod$e ?v0 (pair$f ?v1 ?v2 )))):named a62 ))
(assert (! (forall ((?v0 Nat_a_bool_fun_fun$ )(?v1 Nat$ )(?v2 A$ ))(=> (fun_app$d (fun_app$j ?v0 ?v1 )?v2 )(case_prod$f ?v0 (pair$e ?v1 ?v2 )))):named a63 ))
(assert (! (forall ((?v0 A_a_nat_prod_a_prod_bool_fun_fun$ )(?v1 A$ )(?v2 A_nat_prod_a_prod$ ))(=> (fun_app$k (fun_app$l ?v0 ?v1 )?v2 )(case_prod$g ?v0 (pair$j ?v1 ?v2 )))):named a64 ))
(assert (! (forall ((?v0 A_a_a_nat_prod_prod_bool_fun_fun$ )(?v1 A$ )(?v2 A_a_nat_prod_prod$ ))(=> (fun_app$m (fun_app$n ?v0 ?v1 )?v2 )(case_prod$h ?v0 (pair$k ?v1 ?v2 )))):named a65 ))
(assert (! (forall ((?v0 A_a_a_prod_bool_fun_fun$ )(?v1 A$ )(?v2 A_a_prod$ ))(=> (fun_app$o (fun_app$p ?v0 ?v1 )?v2 )(case_prod$i ?v0 (pair$i ?v1 ?v2 )))):named a66 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$d (fun_app$g ?v0 ?v1 )?v2 )(case_prod$d ?v0 (pair$d ?v1 ?v2 )))):named a67 ))
(assert (! (forall ((?v0 A_a_nat_prod_bool_fun_fun$ )(?v1 A$ )(?v2 A_nat_prod$ ))(=> (fun_app$b (fun_app$f ?v0 ?v1 )?v2 )(case_prod$c ?v0 (pair$c ?v1 ?v2 )))):named a68 ))
(assert (! (forall ((?v0 A_nat_prod_a_bool_fun_fun$ )(?v1 A_nat_prod$ )(?v2 A$ ))(=> (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(case_prod$b ?v0 (pair$b ?v1 ?v2 )))):named a69 ))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_bool_fun_fun$ )(?v1 A_nat_prod$ )(?v2 A_nat_prod$ ))(=> (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(case_prod$a ?v0 (pair$a ?v1 ?v2 )))):named a70 ))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$ )(?v1 A$ )(?v2 Nat$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(case_prod$ ?v0 (pair$ ?v1 ?v2 )))):named a71 ))
(check-sat )
;(get-unsat-core )
