;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$b (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(assert (! (not (less_eq$ (fun_app$ (llcp$ xs$ )ys$ )(min$ (llength$ xs$ )(llength$ ys$ )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$ (llcp$ ?v0 )?v1 )(fun_app$ (llcp$ ?v1 )?v0 ))):named a2 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$a (fun_app$b ?v0 ?v3 )?v4 )))(=> (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(fun_app$a (fun_app$b ?v0 ?v2 )?v1 )))(fun_app$a (fun_app$b ?v0 ?v2 )?v1 ))):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less_eq$ ?v0 (min$ ?v1 ?v2 ))(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ (min$ ?v0 ?v1 )?v1 )(min$ ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ ?v0 (min$ ?v0 ?v1 ))(min$ ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Enat$ ))(= (min$ ?v0 ?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 Enat$ ))(less_eq$ ?v0 ?v0 )):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ ?v0 ?v1 )(ite (less_eq$ ?v0 ?v1 )?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less_eq$ (min$ ?v0 ?v1 )?v2 )(or (less_eq$ ?v0 ?v2 )(less_eq$ ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (less_eq$ ?v0 ?v1 )(= (min$ ?v1 ?v0 )?v0 )):pattern ((less_eq$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (less_eq$ ?v0 ?v1 )(= (min$ ?v0 ?v1 )?v0 )):pattern ((less_eq$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (less_eq$ ?v0 ?v1 )(= ?v0 (min$ ?v0 ?v1 ))):pattern ((less_eq$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (= ?v0 (min$ ?v0 ?v1 ))(less_eq$ ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (less_eq$ ?v0 (min$ ?v1 ?v2 ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v0 ?v2 ))false ))false )):named a15 ))
(assert (! (forall ((?v0 Enat$ ))(less_eq$ ?v0 ?v0 )):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(or (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))):named a17 ))
(check-sat )
;(get-unsat-core )
