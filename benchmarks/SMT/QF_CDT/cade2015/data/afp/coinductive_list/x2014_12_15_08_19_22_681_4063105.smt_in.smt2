;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))(Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun us$ ()A_llist$ )
(declare-fun vs$ ()A_llist$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun xs$a ()A_list$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(assert (! (not (= ys$ vs$ )):named a0 ))
(assert (! (= xs$ (llist_of$ xs$a )):named a1 ))
(assert (! (= (lappend$ (llist_of$ xs$a )ys$ )(lappend$ (llist_of$ xs$a )vs$ )):named a2 ))
(assert (! (= (lappend$ xs$ ys$ )(lappend$ us$ vs$ )):named a3 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a5 ))
(assert (! (=> (forall ((?v0 A_list$ ))(=> (= xs$ (llist_of$ ?v0 ))false ))false ):named a6 ))
(assert (! (= xs$ us$ ):named a7 ))
(assert (! (lfinite$ xs$ ):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a9 ))
(assert (! (= (llength$ xs$ )(llength$ us$ )):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (lappend$ ?v0 ?v1 )?v0 )):pattern ((lappend$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lprefix$ (lappend$ ?v0 ?v1 )(lappend$ ?v0 ?v2 ))(=> (lfinite$ ?v0 )(lprefix$ ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (lappend$ (llist_of$ ?v0 )(llist_of$ ?v1 ))(llist_of$ (append$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (member$ ?v0 (lset$ (lappend$ ?v1 ?v2 )))(or (member$ ?v0 (lset$ ?v1 ))(and (lfinite$ ?v1 )(member$ ?v0 (lset$ ?v2 )))))):named a17 ))
(check-sat )
;(get-unsat-core )
