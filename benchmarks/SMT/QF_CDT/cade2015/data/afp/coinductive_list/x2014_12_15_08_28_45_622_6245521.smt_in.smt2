;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$c (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(assert (! (not (or (and (less_eq$ (llength$ xs$ )(llength$ ys$ ))(= (ltake$ (llength$ xs$ )ys$ )xs$ ))(exists ((?v0 Nat$ ))(and (less$ (enat$ ?v0 )(min$ (llength$ xs$ )(llength$ ys$ )))(and (= (ltake$ (enat$ ?v0 )xs$ )(ltake$ (enat$ ?v0 )ys$ ))(fun_app$ (fun_app$a r$ (lnth$ xs$ ?v0 ))(lnth$ ys$ ?v0 ))))))):named a0 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (ltake$ ?v0 (ltake$ ?v1 ?v2 ))(ltake$ (min$ ?v0 ?v1 )?v2 ))):named a1 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (llength$ (ltake$ ?v0 ?v1 ))(min$ ?v0 (llength$ ?v1 )))):named a2 ))
(assert (! (llexord$ r$ xs$ ys$ ):named a3 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$b (fun_app$c ?v0 ?v3 )?v4 )))(=> (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(fun_app$b (fun_app$c ?v0 ?v2 )?v1 )))(fun_app$b (fun_app$c ?v0 ?v2 )?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (and (= (ltake$ ?v0 ?v1 )(ltake$ ?v0 ?v2 ))(less_eq$ ?v3 ?v0 ))(= (ltake$ ?v3 ?v1 )(ltake$ ?v3 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )?v1 )(= (lnth$ (ltake$ ?v1 ?v2 )?v0 )(lnth$ ?v2 ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$ ?v0 )?v1 )(= (ltake$ ?v1 ?v0 )?v0 )):pattern ((ltake$ ?v1 ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less$ ?v0 (min$ ?v1 ?v2 ))(and (less$ ?v0 ?v1 )(less$ ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less_eq$ ?v0 (min$ ?v1 ?v2 ))(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (forall ((?v2 Nat$ ))(=> (less$ ?v0 (enat$ ?v2 ))(less$ ?v1 (enat$ ?v2 ))))(less_eq$ ?v1 ?v0 ))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ (min$ ?v0 ?v1 )?v1 )(min$ ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ ?v0 (min$ ?v0 ?v1 ))(min$ ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Enat$ ))(= (min$ ?v0 ?v0 )?v0 )):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Enat$ ))(less_eq$ ?v0 ?v0 )):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
