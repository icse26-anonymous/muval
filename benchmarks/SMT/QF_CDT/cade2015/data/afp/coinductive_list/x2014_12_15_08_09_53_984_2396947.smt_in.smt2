;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_set_a_llist_set_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun y$ ()A_llist_set$ )
(declare-fun bot$ ()A_llist_set$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun minus$ (A_llist_set$ )A_llist_set_a_llist_set_fun$ )
(declare-fun insert$ (A_llist$ A_llist_set$ )A_llist_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_set_a_llist_set_fun$ A_llist_set$ )A_llist_set$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(assert (! (not (= (lSup$ (fun_app$ (minus$ y$ )(insert$ lNil$ bot$ )))(lSup$ y$ ))):named a0 ))
(assert (! (= (lSup$ bot$ )lNil$ ):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lSup$ (insert$ ?v0 bot$ ))?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (lSup$ (insert$ lNil$ ?v0 ))(lSup$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(= (insert$ ?v0 (fun_app$ (minus$ ?v1 )(insert$ ?v0 bot$ )))(insert$ ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(=> (member$ ?v0 ?v1 )(= (fun_app$ (minus$ (insert$ ?v0 ?v2 ))?v1 )(fun_app$ (minus$ ?v2 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(=> (not (member$ ?v0 ?v1 ))(= (fun_app$ (minus$ ?v1 )(insert$ ?v0 ?v2 ))(fun_app$ (minus$ ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (fun_app$ (minus$ ?v0 )bot$ )?v0 )):named a7 ))
(assert (! (forall ((?v0 A_llist_set$ ))(! (= (fun_app$ (minus$ ?v0 )?v0 )bot$ ):pattern ((minus$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (fun_app$ (minus$ bot$ )?v0 )bot$ )):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(member$ ?v0 (insert$ ?v0 bot$ ))):named a10 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(= (fun_app$ (minus$ ?v0 )(insert$ ?v1 ?v2 ))(fun_app$ (minus$ (fun_app$ (minus$ ?v0 )(insert$ ?v1 bot$ )))?v2 ))):named a11 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(= (fun_app$ (minus$ ?v0 )(insert$ ?v1 ?v2 ))(fun_app$ (minus$ (fun_app$ (minus$ ?v0 )?v2 ))(insert$ ?v1 bot$ )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(=> (member$ ?v0 ?v1 )(= (insert$ ?v0 (fun_app$ (minus$ ?v1 )(insert$ ?v0 bot$ )))?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(=> (not (member$ ?v0 ?v1 ))(= (fun_app$ (minus$ (insert$ ?v0 ?v1 ))(insert$ ?v0 bot$ ))?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(= (member$ ?v0 (fun_app$ (minus$ ?v1 )?v2 ))(and (member$ ?v0 ?v1 )(not (member$ ?v0 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(= (member$ ?v0 bot$ )false )):named a16 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 A_llist$ ))(not (fun_app$a ?v0 ?v1 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
