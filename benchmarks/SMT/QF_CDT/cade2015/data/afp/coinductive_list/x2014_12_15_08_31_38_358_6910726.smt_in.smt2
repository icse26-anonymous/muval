;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_list_a_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_list_a_llist_fun$ 0 )
(declare-sort A_llist_a_list_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_list_a_list_list_fun$ 0 )
(declare-sort A_list_list_a_list_fun$ 0 )
(declare-sort A_list_a_llist_list_fun$ 0 )
(declare-sort A_llist_list_a_list_fun$ 0 )
(declare-sort A_list_list_a_list_list_fun$ 0 )
(declare-sort A_list_list_a_llist_list_fun$ 0 )
(declare-sort A_llist_list_a_list_list_fun$ 0 )
(declare-sort A_a_fun_a_list_a_list_fun_fun$ 0 )
(declare-sort A_llist_list_a_llist_list_fun$ 0 )
(declare-sort A_list_list_list_a_list_list_fun$ 0 )
(declare-sort A_list_list_a_llist_list_list_fun$ 0 )
(declare-sort A_list_list_list_a_llist_list_list_fun$ 0 )
(declare-sort A_a_list_fun_a_list_a_list_list_fun_fun$ 0 )
(declare-sort A_list_a_fun_a_list_list_a_list_fun_fun$ 0 )
(declare-sort A_a_llist_fun_a_list_a_llist_list_fun_fun$ 0 )
(declare-sort A_llist_a_fun_a_llist_list_a_list_fun_fun$ 0 )
(declare-sort A_list_a_list_fun_a_list_list_a_list_list_fun_fun$ 0 )
(declare-sort A_list_a_llist_fun_a_list_list_a_llist_list_fun_fun$ 0 )
(declare-sort A_list_list_a_list_fun_a_list_list_list_a_list_list_fun_fun$ 0 )
(declare-sort A_list_a_llist_list_fun_a_list_list_a_llist_list_list_fun_fun$ 0 )
(declare-sort A_list_list_a_llist_list_fun_a_list_list_list_a_llist_list_list_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-datatypes ()((A_llist_list$ (nil$ )(cons$ (hd$ A_llist$ )(tl$ A_llist_list$ )))(A_list$ (nil$a )(cons$a (hd$a A$ )(tl$a A_list$ )))(A_list_list$ (nil$b )(cons$b (hd$b A_list$ )(tl$b A_list_list$ )))(A_list_list_list$ (nil$c )(cons$c (hd$c A_list_list$ )(tl$c A_list_list_list$ )))))
(declare-sort A_list_list_llist$ 0)
(declare-fun lNil$b ()A_list_list_llist$)
(declare-fun lhd$b (A_list_list_llist$)A_list_list$)
(declare-fun ltl$b (A_list_list_llist$)A_list_list_llist$)
(declare-fun lCons$b (A_list_list$ A_list_list_llist$ )A_list_list_llist$)
(declare-datatypes ()((A_llist_list_list$ (nil$d )(cons$d (hd$d A_llist_list$ )(tl$d A_llist_list_list$ )))))
(declare-sort A_llist_list_llist$ 0)
(declare-sort A_list_llist$ 0)
(declare-fun lNil$c ()A_llist_list_llist$)
(declare-fun lhd$c (A_llist_list_llist$)A_llist_list$)
(declare-fun ltl$c (A_llist_list_llist$)A_llist_list_llist$)
(declare-fun lCons$c (A_llist_list$ A_llist_list_llist$ )A_llist_list_llist$)
(declare-fun lNil$d ()A_list_llist$)
(declare-fun lhd$d (A_list_llist$)A_list$)
(declare-fun ltl$d (A_list_llist$)A_list_llist$)
(declare-fun lCons$d (A_list$ A_list_llist$ )A_list_llist$)
(declare-datatypes ()((A_list_list_list_list$ (nil$e )(cons$e (hd$e A_list_list_list$ )(tl$e A_list_list_list_list$ )))(A_llist_list_list_list$ (nil$f )(cons$f (hd$f A_llist_list_list$ )(tl$f A_llist_list_list_list$ )))))
(declare-fun xs$ ()A_list_list$ )
(declare-fun map$ ()A_list_a_llist_fun_a_list_list_a_llist_list_fun_fun$ )
(declare-fun last$ (A_llist_list_list$ )A_llist_list$ )
(declare-fun lmap$ (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun map$a ()A_a_fun_a_list_a_list_fun_fun$ )
(declare-fun map$b ()A_list_a_list_fun_a_list_list_a_list_list_fun_fun$ )
(declare-fun map$c ()A_list_list_a_llist_list_fun_a_list_list_list_a_llist_list_list_fun_fun$ )
(declare-fun map$d ()A_a_list_fun_a_list_a_list_list_fun_fun$ )
(declare-fun map$e (A_list_a_list_list_fun$ A_list_list$ )A_list_list_list$ )
(declare-fun map$f ()A_list_a_fun_a_list_list_a_list_fun_fun$ )
(declare-fun map$g ()A_list_list_a_list_fun_a_list_list_list_a_list_list_fun_fun$ )
(declare-fun map$h ()A_llist_a_fun_a_llist_list_a_list_fun_fun$ )
(declare-fun map$i (A_llist_list_a_list_fun$ A_llist_list_list$ )A_list_list$ )
(declare-fun map$j ()A_a_llist_fun_a_list_a_llist_list_fun_fun$ )
(declare-fun map$k ()A_list_a_llist_list_fun_a_list_list_a_llist_list_list_fun_fun$ )
(declare-fun map$l (A_llist_a_list_fun$ )A_llist_list_a_list_list_fun$ )
(declare-fun map$m (A_llist_list_a_list_list_fun$ A_llist_list_list$ )A_list_list_list$ )
(declare-fun map$n (A_llist_a_llist_fun$ )A_llist_list_a_llist_list_fun$ )
(declare-fun map$o (A_llist_list_a_llist_list_fun$ A_llist_list_list$ )A_llist_list_list$ )
(declare-fun map$p (A_list_list_a_list_list_fun$ A_list_list_list$ )A_list_list_list$ )
(declare-fun map$q (A_list_list_list_a_llist_list_list_fun$ A_list_list_list_list$ )A_llist_list_list_list$ )
(declare-fun last$a (A_list_list$ )A_list$ )
(declare-fun last$b (A_llist_list$ )A_llist$ )
(declare-fun last$c (A_list$ )A$ )
(declare-fun llast$ (A_llist_list_llist$ )A_llist_list$ )
(declare-fun lmap$a (A_llist_a_fun$ A_llist_llist$ )A_llist$ )
(declare-fun lmap$b (A_a_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun lmap$c (A_list_a_llist_fun$ A_list_llist$ )A_llist_llist$ )
(declare-fun lmap$d (A_llist_a_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lmap$e (A_a_list_fun$ A_llist$ )A_list_llist$ )
(declare-fun lmap$f (A_list_a_fun$ A_list_llist$ )A_llist$ )
(declare-fun lmap$g (A_llist_a_list_fun$ A_llist_llist$ )A_list_llist$ )
(declare-fun lmap$h (A_list_a_list_fun$ A_list_llist$ )A_list_llist$ )
(declare-fun lmap$i (A_list_list_a_llist_list_fun$ A_list_list_llist$ )A_llist_list_llist$ )
(declare-fun concat$ (A_list_list$ )A_list$ )
(declare-fun llast$a (A_list_llist$ )A_list$ )
(declare-fun llast$b (A_llist_llist$ )A_llist$ )
(declare-fun llast$c (A_llist$ )A$ )
(declare-fun rotate$ (Nat$ A_llist_list$ )A_llist_list$ )
(declare-fun concat$a (A_list_list_list$ )A_list_list$ )
(declare-fun concat$b (A_llist_list_list$ )A_llist_list$ )
(declare-fun concat$c (A_list_list_list_list$ )A_list_list_list$ )
(declare-fun concat$d (A_llist_list_list_list$ )A_llist_list_list$ )
(declare-fun fun_app$ (A_list_list_a_llist_list_fun$ A_list_list$ )A_llist_list$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lfinite$ (A_list_list_llist$ )Bool )
(declare-fun list_of$ (A_list_list_llist$ )A_list_list_list$ )
(declare-fun rotate$a (Nat$ A_list_list$ )A_list_list$ )
(declare-fun rotate$b (Nat$ )A_list_a_list_fun$ )
(declare-fun rotate$c (Nat$ A_llist_list_list$ )A_llist_list_list$ )
(declare-fun rotate$d (Nat$ A_list_list_list$ )A_list_list_list$ )
(declare-fun fun_app$a (A_list_a_llist_fun_a_list_list_a_llist_list_fun_fun$ A_list_a_llist_fun$ )A_list_list_a_llist_list_fun$ )
(declare-fun fun_app$b (A_list_a_llist_fun$ A_list$ )A_llist$ )
(declare-fun fun_app$c (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun fun_app$d (A_a_fun_a_list_a_list_fun_fun$ A_a_fun$ )A_list_a_list_fun$ )
(declare-fun fun_app$e (A_list_list_a_list_list_fun$ A_list_list$ )A_list_list$ )
(declare-fun fun_app$f (A_list_a_list_fun_a_list_list_a_list_list_fun_fun$ A_list_a_list_fun$ )A_list_list_a_list_list_fun$ )
(declare-fun fun_app$g (A_list_list_list_a_llist_list_list_fun$ A_list_list_list$ )A_llist_list_list$ )
(declare-fun fun_app$h (A_list_list_a_llist_list_fun_a_list_list_list_a_llist_list_list_fun_fun$ A_list_list_a_llist_list_fun$ )A_list_list_list_a_llist_list_list_fun$ )
(declare-fun fun_app$i (A_list_a_list_list_fun$ A_list$ )A_list_list$ )
(declare-fun fun_app$j (A_a_list_fun_a_list_a_list_list_fun_fun$ A_a_list_fun$ )A_list_a_list_list_fun$ )
(declare-fun fun_app$k (A_list_list_a_list_fun$ A_list_list$ )A_list$ )
(declare-fun fun_app$l (A_list_a_fun_a_list_list_a_list_fun_fun$ A_list_a_fun$ )A_list_list_a_list_fun$ )
(declare-fun fun_app$m (A_list_list_list_a_list_list_fun$ A_list_list_list$ )A_list_list$ )
(declare-fun fun_app$n (A_list_list_a_list_fun_a_list_list_list_a_list_list_fun_fun$ A_list_list_a_list_fun$ )A_list_list_list_a_list_list_fun$ )
(declare-fun fun_app$o (A_llist_list_a_list_fun$ A_llist_list$ )A_list$ )
(declare-fun fun_app$p (A_llist_a_fun_a_llist_list_a_list_fun_fun$ A_llist_a_fun$ )A_llist_list_a_list_fun$ )
(declare-fun fun_app$q (A_list_a_llist_list_fun$ A_list$ )A_llist_list$ )
(declare-fun fun_app$r (A_a_llist_fun_a_list_a_llist_list_fun_fun$ A_a_llist_fun$ )A_list_a_llist_list_fun$ )
(declare-fun fun_app$s (A_list_list_a_llist_list_list_fun$ A_list_list$ )A_llist_list_list$ )
(declare-fun fun_app$t (A_list_a_llist_list_fun_a_list_list_a_llist_list_list_fun_fun$ A_list_a_llist_list_fun$ )A_list_list_a_llist_list_list_fun$ )
(declare-fun fun_app$u (A_llist_list_a_list_list_fun$ A_llist_list$ )A_list_list$ )
(declare-fun fun_app$v (A_llist_list_a_llist_list_fun$ A_llist_list$ )A_llist_list$ )
(declare-fun fun_app$w (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$x (A_a_list_fun$ A$ )A_list$ )
(declare-fun fun_app$y (A_a_fun$ A$ )A$ )
(declare-fun fun_app$z (A_a_llist_fun$ A$ )A_llist$ )
(declare-fun lfinite$a (A_llist_list_llist$ )Bool )
(declare-fun lfinite$b (A_list_llist$ )Bool )
(declare-fun lfinite$c (A_llist_llist$ )Bool )
(declare-fun lfinite$d (A_llist$ )Bool )
(declare-fun list_of$a (A_llist_list_llist$ )A_llist_list_list$ )
(declare-fun list_of$b (A_list_llist$ )A_list_list$ )
(declare-fun list_of$c (A_llist_llist$ )A_llist_list$ )
(declare-fun list_of$d (A_llist$ )A_list$ )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(declare-fun fun_app$aa (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$ab (A_llist_a_list_fun$ A_llist$ )A_list$ )
(declare-fun llist_of$a ()A_list_a_llist_fun$ )
(declare-fun llist_of$b (A_list_list_list$ )A_list_list_llist$ )
(declare-fun llist_of$c (A_llist_list_list$ )A_llist_list_llist$ )
(declare-fun llist_of$d (A_list_list$ )A_list_llist$ )
(declare-fun replicate$ (Nat$ A_list_list$ )A_list_list_list$ )
(declare-fun transpose$ (A_llist_list_list_list$ )A_llist_list_list_list$ )
(declare-fun replicate$a (Nat$ A_llist_list$ )A_llist_list_list$ )
(declare-fun replicate$b (Nat$ )A_a_list_fun$ )
(declare-fun replicate$c (Nat$ A_llist$ )A_llist_list$ )
(declare-fun replicate$d (Nat$ A_list$ )A_list_list$ )
(declare-fun transpose$a (A_list_list_list_list$ )A_list_list_list_list$ )
(declare-fun transpose$b (A_list_list$ )A_list_list$ )
(declare-fun transpose$c (A_llist_list_list$ )A_llist_list_list$ )
(declare-fun transpose$d (A_list_list_list$ )A_list_list_list$ )
(declare-fun map_tailrec$ ()A_list_a_llist_fun_a_list_list_a_llist_list_fun_fun$ )
(declare-fun map_tailrec$a ()A_a_fun_a_list_a_list_fun_fun$ )
(declare-fun map_tailrec$b ()A_llist_a_fun_a_llist_list_a_list_fun_fun$ )
(declare-fun map_tailrec$c ()A_a_llist_fun_a_list_a_llist_list_fun_fun$ )
(declare-fun map_tailrec$d ()A_list_a_list_fun_a_list_list_a_list_list_fun_fun$ )
(declare-fun map_tailrec$e ()A_list_list_a_llist_list_fun_a_list_list_list_a_llist_list_list_fun_fun$ )
(declare-fun map_tailrec$f ()A_list_a_fun_a_list_list_a_list_fun_fun$ )
(declare-fun map_tailrec$g ()A_a_list_fun_a_list_a_list_list_fun_fun$ )
(declare-fun map_tailrec$h ()A_list_list_a_list_fun_a_list_list_list_a_list_list_fun_fun$ )
(declare-fun map_tailrec$i ()A_list_a_llist_list_fun_a_list_list_a_llist_list_list_fun_fun$ )
(assert (! (not (= (lconcat$ (llist_of$ (fun_app$ (fun_app$a map$ llist_of$a )xs$ )))(fun_app$b llist_of$a (concat$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ ))(= (= (llist_of$b ?v0 )(llist_of$b ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_llist_list_list$ )(?v1 A_llist_list_list$ ))(= (= (llist_of$c ?v0 )(llist_of$c ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= (llist_of$d ?v0 )(llist_of$d ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$b llist_of$a ?v0 )(fun_app$b llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list_list$ ))(= (fun_app$c (fun_app$d map$a ?v0 )(concat$ ?v1 ))(concat$ (fun_app$e (fun_app$f map$b (fun_app$d map$a ?v0 ))?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 A_list_list_list$ ))(= (fun_app$ (fun_app$a map$ ?v0 )(concat$a ?v1 ))(concat$b (fun_app$g (fun_app$h map$c (fun_app$a map$ ?v0 ))?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_list_list$ ))(= (fun_app$i (fun_app$j map$d ?v0 )(concat$ ?v1 ))(concat$a (map$e (fun_app$j map$d ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_list_list$ ))(= (fun_app$k (fun_app$l map$f ?v0 )(concat$a ?v1 ))(concat$ (fun_app$m (fun_app$n map$g (fun_app$l map$f ?v0 ))?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_list_list$ ))(= (fun_app$o (fun_app$p map$h ?v0 )(concat$b ?v1 ))(concat$ (map$i (fun_app$p map$h ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_list_list$ ))(= (fun_app$q (fun_app$r map$j ?v0 )(concat$ ?v1 ))(concat$b (fun_app$s (fun_app$t map$k (fun_app$r map$j ?v0 ))?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_a_list_fun$ )(?v1 A_llist_list_list$ ))(= (fun_app$u (map$l ?v0 )(concat$b ?v1 ))(concat$a (map$m (map$l ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_list_list$ ))(= (fun_app$v (map$n ?v0 )(concat$b ?v1 ))(concat$b (map$o (map$n ?v0 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_list_list$ ))(= (fun_app$e (fun_app$f map$b ?v0 )(concat$a ?v1 ))(concat$a (map$p (fun_app$f map$b ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_list_list_a_llist_list_fun$ )(?v1 A_list_list_list_list$ ))(= (fun_app$g (fun_app$h map$c ?v0 )(concat$c ?v1 ))(concat$d (map$q (fun_app$h map$c ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (fun_app$w (lmap$ ?v0 )(fun_app$b llist_of$a ?v1 ))(fun_app$b llist_of$a (fun_app$c (fun_app$d map$a ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_list$ ))(= (lmap$a ?v0 (llist_of$ ?v1 ))(fun_app$b llist_of$a (fun_app$o (fun_app$p map$h ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_list$ ))(= (lmap$b ?v0 (fun_app$b llist_of$a ?v1 ))(llist_of$ (fun_app$q (fun_app$r map$j ?v0 )?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 A_list_list$ ))(= (lmap$c ?v0 (llist_of$d ?v1 ))(llist_of$ (fun_app$ (fun_app$a map$ ?v0 )?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_list$ ))(= (lmap$d ?v0 (llist_of$ ?v1 ))(llist_of$ (fun_app$v (map$n ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_list$ ))(= (lmap$e ?v0 (fun_app$b llist_of$a ?v1 ))(llist_of$d (fun_app$i (fun_app$j map$d ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_list$ ))(= (lmap$f ?v0 (llist_of$d ?v1 ))(fun_app$b llist_of$a (fun_app$k (fun_app$l map$f ?v0 )?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_a_list_fun$ )(?v1 A_llist_list$ ))(= (lmap$g ?v0 (llist_of$ ?v1 ))(llist_of$d (fun_app$u (map$l ?v0 )?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_list$ ))(= (lmap$h ?v0 (llist_of$d ?v1 ))(llist_of$d (fun_app$e (fun_app$f map$b ?v0 )?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_list_list_a_llist_list_fun$ )(?v1 A_list_list_list$ ))(= (lmap$i ?v0 (llist_of$b ?v1 ))(llist_of$c (fun_app$g (fun_app$h map$c ?v0 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(= (list_of$ (llist_of$b ?v0 ))?v0 )):named a26 ))
(assert (! (forall ((?v0 A_llist_list_list$ ))(= (list_of$a (llist_of$c ?v0 ))?v0 )):named a27 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (list_of$b (llist_of$d ?v0 ))?v0 )):named a28 ))
(assert (! (forall ((?v0 A_llist_list$ ))(= (list_of$c (llist_of$ ?v0 ))?v0 )):named a29 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$d (fun_app$b llist_of$a ?v0 ))?v0 )):named a30 ))
(assert (! (= map$ map_tailrec$ ):named a31 ))
(assert (! (= map$a map_tailrec$a ):named a32 ))
(assert (! (= map$h map_tailrec$b ):named a33 ))
(assert (! (= map$j map_tailrec$c ):named a34 ))
(assert (! (= map$b map_tailrec$d ):named a35 ))
(assert (! (= map$c map_tailrec$e ):named a36 ))
(assert (! (= map$f map_tailrec$f ):named a37 ))
(assert (! (= map$d map_tailrec$g ):named a38 ))
(assert (! (= map$g map_tailrec$h ):named a39 ))
(assert (! (= map$k map_tailrec$i ):named a40 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(lfinite$ (llist_of$b ?v0 ))):named a41 ))
(assert (! (forall ((?v0 A_llist_list_list$ ))(lfinite$a (llist_of$c ?v0 ))):named a42 ))
(assert (! (forall ((?v0 A_list_list$ ))(lfinite$b (llist_of$d ?v0 ))):named a43 ))
(assert (! (forall ((?v0 A_llist_list$ ))(lfinite$c (llist_of$ ?v0 ))):named a44 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$d (fun_app$b llist_of$a ?v0 ))):named a45 ))
(assert (! (forall ((?v0 A_llist_list_list$ ))(= (llast$ (llist_of$c ?v0 ))(last$ ?v0 ))):named a46 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (llast$a (llist_of$d ?v0 ))(last$a ?v0 ))):named a47 ))
(assert (! (forall ((?v0 A_llist_list$ ))(= (llast$b (llist_of$ ?v0 ))(last$b ?v0 ))):named a48 ))
(assert (! (forall ((?v0 A_list$ ))(= (llast$c (fun_app$b llist_of$a ?v0 ))(last$c ?v0 ))):named a49 ))
(assert (! (forall ((?v0 A_list_list_a_llist_list_fun$ )(?v1 Nat$ )(?v2 A_list_list$ ))(= (fun_app$g (fun_app$h map$c ?v0 )(replicate$ ?v1 ?v2 ))(replicate$a ?v1 (fun_app$ ?v0 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 Nat$ )(?v2 A$ ))(= (fun_app$c (fun_app$d map$a ?v0 )(fun_app$x (replicate$b ?v1 )?v2 ))(fun_app$x (replicate$b ?v1 )(fun_app$y ?v0 ?v2 )))):named a51 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 Nat$ )(?v2 A$ ))(= (fun_app$q (fun_app$r map$j ?v0 )(fun_app$x (replicate$b ?v1 )?v2 ))(replicate$c ?v1 (fun_app$z ?v0 ?v2 )))):named a52 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 Nat$ )(?v2 A_list$ ))(= (fun_app$e (fun_app$f map$b ?v0 )(replicate$d ?v1 ?v2 ))(replicate$d ?v1 (fun_app$c ?v0 ?v2 )))):named a53 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 Nat$ )(?v2 A_llist$ ))(= (fun_app$o (fun_app$p map$h ?v0 )(replicate$c ?v1 ?v2 ))(fun_app$x (replicate$b ?v1 )(fun_app$aa ?v0 ?v2 )))):named a54 ))
(assert (! (forall ((?v0 A_llist_a_list_fun$ )(?v1 Nat$ )(?v2 A_llist$ ))(= (fun_app$u (map$l ?v0 )(replicate$c ?v1 ?v2 ))(replicate$d ?v1 (fun_app$ab ?v0 ?v2 )))):named a55 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 Nat$ )(?v2 A_llist$ ))(= (fun_app$v (map$n ?v0 )(replicate$c ?v1 ?v2 ))(replicate$c ?v1 (fun_app$w ?v0 ?v2 )))):named a56 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 Nat$ )(?v2 A_list$ ))(= (fun_app$ (fun_app$a map$ ?v0 )(replicate$d ?v1 ?v2 ))(replicate$c ?v1 (fun_app$b ?v0 ?v2 )))):named a57 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_list$ ))(= (= (fun_app$v (map$n ?v0 )?v1 )nil$ )(= ?v1 nil$ ))):named a58 ))
(assert (! (forall ((?v0 A_llist_a_list_fun$ )(?v1 A_llist_list$ ))(= (= (fun_app$u (map$l ?v0 )?v1 )nil$b )(= ?v1 nil$ ))):named a59 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_list$ ))(= (= (fun_app$i (fun_app$j map$d ?v0 )?v1 )nil$b )(= ?v1 nil$a ))):named a60 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_list$ ))(= (= (fun_app$k (fun_app$l map$f ?v0 )?v1 )nil$a )(= ?v1 nil$b ))):named a61 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_list$ ))(= (= (fun_app$o (fun_app$p map$h ?v0 )?v1 )nil$a )(= ?v1 nil$ ))):named a62 ))
(assert (! (forall ((?v0 A_list_list_a_llist_list_fun$ )(?v1 A_list_list_list$ ))(= (= (fun_app$g (fun_app$h map$c ?v0 )?v1 )nil$d )(= ?v1 nil$c ))):named a63 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_list$ ))(= (= (fun_app$e (fun_app$f map$b ?v0 )?v1 )nil$b )(= ?v1 nil$b ))):named a64 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_list$ ))(= (= (fun_app$q (fun_app$r map$j ?v0 )?v1 )nil$ )(= ?v1 nil$a ))):named a65 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (= (fun_app$c (fun_app$d map$a ?v0 )?v1 )nil$a )(= ?v1 nil$a ))):named a66 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 A_list_list$ ))(= (= (fun_app$ (fun_app$a map$ ?v0 )?v1 )nil$ )(= ?v1 nil$b ))):named a67 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_list$ ))(= (= (fun_app$v (map$n ?v0 )?v1 )nil$ )(= ?v1 nil$ ))):named a68 ))
(assert (! (forall ((?v0 A_llist_a_list_fun$ )(?v1 A_llist_list$ ))(= (= (fun_app$u (map$l ?v0 )?v1 )nil$b )(= ?v1 nil$ ))):named a69 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_list$ ))(= (= (fun_app$i (fun_app$j map$d ?v0 )?v1 )nil$b )(= ?v1 nil$a ))):named a70 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_list$ ))(= (= (fun_app$k (fun_app$l map$f ?v0 )?v1 )nil$a )(= ?v1 nil$b ))):named a71 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_list$ ))(= (= (fun_app$o (fun_app$p map$h ?v0 )?v1 )nil$a )(= ?v1 nil$ ))):named a72 ))
(assert (! (forall ((?v0 A_list_list_a_llist_list_fun$ )(?v1 A_list_list_list$ ))(= (= (fun_app$g (fun_app$h map$c ?v0 )?v1 )nil$d )(= ?v1 nil$c ))):named a73 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_list$ ))(= (= (fun_app$e (fun_app$f map$b ?v0 )?v1 )nil$b )(= ?v1 nil$b ))):named a74 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_list$ ))(= (= (fun_app$q (fun_app$r map$j ?v0 )?v1 )nil$ )(= ?v1 nil$a ))):named a75 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (= (fun_app$c (fun_app$d map$a ?v0 )?v1 )nil$a )(= ?v1 nil$a ))):named a76 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 A_list_list$ ))(= (= (fun_app$ (fun_app$a map$ ?v0 )?v1 )nil$ )(= ?v1 nil$b ))):named a77 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_list$ ))(= (= nil$ (fun_app$v (map$n ?v0 )?v1 ))(= ?v1 nil$ ))):named a78 ))
(assert (! (forall ((?v0 A_llist_a_list_fun$ )(?v1 A_llist_list$ ))(= (= nil$b (fun_app$u (map$l ?v0 )?v1 ))(= ?v1 nil$ ))):named a79 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_list$ ))(= (= nil$b (fun_app$i (fun_app$j map$d ?v0 )?v1 ))(= ?v1 nil$a ))):named a80 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_list$ ))(= (= nil$a (fun_app$k (fun_app$l map$f ?v0 )?v1 ))(= ?v1 nil$b ))):named a81 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_list$ ))(= (= nil$a (fun_app$o (fun_app$p map$h ?v0 )?v1 ))(= ?v1 nil$ ))):named a82 ))
(assert (! (forall ((?v0 A_list_list_a_llist_list_fun$ )(?v1 A_list_list_list$ ))(= (= nil$d (fun_app$g (fun_app$h map$c ?v0 )?v1 ))(= ?v1 nil$c ))):named a83 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_list$ ))(= (= nil$b (fun_app$e (fun_app$f map$b ?v0 )?v1 ))(= ?v1 nil$b ))):named a84 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_list$ ))(= (= nil$ (fun_app$q (fun_app$r map$j ?v0 )?v1 ))(= ?v1 nil$a ))):named a85 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (= nil$a (fun_app$c (fun_app$d map$a ?v0 )?v1 ))(= ?v1 nil$a ))):named a86 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 A_list_list$ ))(= (= nil$ (fun_app$ (fun_app$a map$ ?v0 )?v1 ))(= ?v1 nil$b ))):named a87 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_list$ ))(= (rotate$ ?v0 (fun_app$v (map$n ?v1 )?v2 ))(fun_app$v (map$n ?v1 )(rotate$ ?v0 ?v2 )))):named a88 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_a_list_fun$ )(?v2 A_llist_list$ ))(= (rotate$a ?v0 (fun_app$u (map$l ?v1 )?v2 ))(fun_app$u (map$l ?v1 )(rotate$ ?v0 ?v2 )))):named a89 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_list$ ))(= (fun_app$c (rotate$b ?v0 )(fun_app$o (fun_app$p map$h ?v1 )?v2 ))(fun_app$o (fun_app$p map$h ?v1 )(rotate$ ?v0 ?v2 )))):named a90 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_list_a_llist_list_fun$ )(?v2 A_list_list_list$ ))(= (rotate$c ?v0 (fun_app$g (fun_app$h map$c ?v1 )?v2 ))(fun_app$g (fun_app$h map$c ?v1 )(rotate$d ?v0 ?v2 )))):named a91 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_a_list_fun$ )(?v2 A_list_list$ ))(= (rotate$a ?v0 (fun_app$e (fun_app$f map$b ?v1 )?v2 ))(fun_app$e (fun_app$f map$b ?v1 )(rotate$a ?v0 ?v2 )))):named a92 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_llist_fun$ )(?v2 A_list$ ))(= (rotate$ ?v0 (fun_app$q (fun_app$r map$j ?v1 )?v2 ))(fun_app$q (fun_app$r map$j ?v1 )(fun_app$c (rotate$b ?v0 )?v2 )))):named a93 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_list$ ))(= (fun_app$c (rotate$b ?v0 )(fun_app$c (fun_app$d map$a ?v1 )?v2 ))(fun_app$c (fun_app$d map$a ?v1 )(fun_app$c (rotate$b ?v0 )?v2 )))):named a94 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_a_llist_fun$ )(?v2 A_list_list$ ))(= (rotate$ ?v0 (fun_app$ (fun_app$a map$ ?v1 )?v2 ))(fun_app$ (fun_app$a map$ ?v1 )(rotate$a ?v0 ?v2 )))):named a95 ))
(assert (! (forall ((?v0 A_list_list_a_llist_list_fun$ )(?v1 A_list_list_list_list$ ))(= (transpose$ (map$q (fun_app$h map$c ?v0 )?v1 ))(map$q (fun_app$h map$c ?v0 )(transpose$a ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list_list$ ))(= (transpose$b (fun_app$e (fun_app$f map$b (fun_app$d map$a ?v0 ))?v1 ))(fun_app$e (fun_app$f map$b (fun_app$d map$a ?v0 ))(transpose$b ?v1 )))):named a97 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_list_list$ ))(= (transpose$b (map$i (fun_app$p map$h ?v0 )?v1 ))(map$i (fun_app$p map$h ?v0 )(transpose$c ?v1 )))):named a98 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_list_list$ ))(= (transpose$c (fun_app$s (fun_app$t map$k (fun_app$r map$j ?v0 ))?v1 ))(fun_app$s (fun_app$t map$k (fun_app$r map$j ?v0 ))(transpose$b ?v1 )))):named a99 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_list_list$ ))(= (transpose$c (map$o (map$n ?v0 )?v1 ))(map$o (map$n ?v0 )(transpose$c ?v1 )))):named a100 ))
(assert (! (forall ((?v0 A_llist_a_list_fun$ )(?v1 A_llist_list_list$ ))(= (transpose$d (map$m (map$l ?v0 )?v1 ))(map$m (map$l ?v0 )(transpose$c ?v1 )))):named a101 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_list_list$ ))(= (transpose$d (map$p (fun_app$f map$b ?v0 )?v1 ))(map$p (fun_app$f map$b ?v0 )(transpose$d ?v1 )))):named a102 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 A_list_list_list$ ))(= (transpose$c (fun_app$g (fun_app$h map$c (fun_app$a map$ ?v0 ))?v1 ))(fun_app$g (fun_app$h map$c (fun_app$a map$ ?v0 ))(transpose$d ?v1 )))):named a103 ))
(assert (! (forall ((?v0 Nat$ ))(= (concat$b (replicate$a ?v0 nil$ ))nil$ )):named a104 ))
(assert (! (forall ((?v0 Nat$ ))(= (concat$a (replicate$ ?v0 nil$b ))nil$b )):named a105 ))
(assert (! (forall ((?v0 Nat$ ))(= (concat$ (replicate$d ?v0 nil$a ))nil$a )):named a106 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$d (fun_app$w (lmap$ ?v0 )?v1 ))(lfinite$d ?v1 ))):named a107 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (lfinite$c (lmap$b ?v0 ?v1 ))(lfinite$d ?v1 ))):named a108 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$d (lmap$a ?v0 ?v1 ))(lfinite$c ?v1 ))):named a109 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$c (lmap$d ?v0 ?v1 ))(lfinite$c ?v1 ))):named a110 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 A_list_llist$ ))(= (lfinite$c (lmap$c ?v0 ?v1 ))(lfinite$b ?v1 ))):named a111 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_list$ ))(= (= (rotate$ ?v0 ?v1 )nil$ )(= ?v1 nil$ ))):named a112 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_list$ ))(= (= (rotate$a ?v0 ?v1 )nil$b )(= ?v1 nil$b ))):named a113 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (= (fun_app$c (rotate$b ?v0 )?v1 )nil$a )(= ?v1 nil$a ))):named a114 ))
(assert (! (forall ((?v0 A_list_llist$ ))(=> (lfinite$b ?v0 )(= (llist_of$d (list_of$b ?v0 ))?v0 ))):named a115 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (lfinite$c ?v0 )(= (llist_of$ (list_of$c ?v0 ))?v0 ))):named a116 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$d ?v0 )(= (fun_app$b llist_of$a (list_of$d ?v0 ))?v0 ))):named a117 ))
(check-sat )
;(get-unsat-core )
