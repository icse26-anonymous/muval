;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun x$ (A_llist$ B_llist$ )Bool )
(declare-fun na$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()B_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lnth$a (B_llist$ Nat$ )B$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun fun_app$ (B_bool_fun$ B$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(assert (! (not (fun_app$ (fun_app$a p$ (lnth$ xsa$ (suc$ na$ )))(lnth$a ysa$ (suc$ na$ )))):named a0 ))
(assert (! (x$ xs$ ys$ ):named a1 ))
(assert (! (x$ xsa$ ysa$ ):named a2 ))
(assert (! (= (lnull$ xsa$ )(lnull$a ysa$ )):named a3 ))
(assert (! (= (llength$ xsa$ )(llength$a ysa$ )):named a4 ))
(assert (! (less$ (enat$ (suc$ na$ ))(llength$ xsa$ )):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (and (less$ (enat$ na$ )(llength$ ?v0 ))(and (x$ ?v0 ?v1 )(= (llength$ ?v0 )(llength$a ?v1 ))))(fun_app$ (fun_app$a p$ (lnth$ ?v0 na$ ))(lnth$a ?v1 na$ )))):named a6 ))
(assert (! (=> (and (not (lnull$ xsa$ ))(not (lnull$a ysa$ )))(and (fun_app$ (fun_app$a p$ (lhd$ xsa$ ))(lhd$a ysa$ ))(or (x$ (ltl$ xsa$ )(ltl$a ysa$ ))(llist_all2$ p$ (ltl$ xsa$ )(ltl$a ysa$ ))))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (not (lnull$ ?v0 ))(= (lnth$ (ltl$ ?v0 )?v1 )(lnth$ ?v0 (suc$ ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Nat$ ))(=> (not (lnull$a ?v0 ))(= (lnth$a (ltl$a ?v0 )?v1 )(lnth$a ?v0 (suc$ ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (x$ ?v0 ?v1 )(= (lnull$ ?v0 )(lnull$a ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))(lnth$ ?v1 ?v2 )):pattern ((lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 Nat$ ))(! (= (lnth$a (lCons$a ?v0 ?v1 )(suc$ ?v2 ))(lnth$a ?v1 ?v2 )):pattern ((lnth$a (lCons$a ?v0 ?v1 )(suc$ ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (and (x$ ?v0 ?v1 )(and (not (lnull$ ?v0 ))(not (lnull$a ?v1 ))))(and (fun_app$ (fun_app$a p$ (lhd$ ?v0 ))(lhd$a ?v1 ))(or (x$ (ltl$ ?v0 )(ltl$a ?v1 ))(llist_all2$ p$ (ltl$ ?v0 )(ltl$a ?v1 )))))):named a17 ))
(check-sat )
;(get-unsat-core )
