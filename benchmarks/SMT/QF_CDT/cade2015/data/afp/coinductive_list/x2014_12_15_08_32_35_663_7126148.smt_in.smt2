;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-datatypes ()((A_llist_list$ (nil$ )(cons$ (hd$ A_llist$ )(tl$ A_llist_list$ )))))
(declare-sort A_llist_llist_llist$ 0)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lnth$a (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun lnth$b (A_llist_llist_llist$ Nat$ )A_llist_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lappend$a (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(assert (! (not (= (lnth$ (lconcat$ xssa$ )zero$ )(lnth$ (lnth$a xssa$ (size$ xss$ ))zero$ ))):named a0 ))
(assert (! (= (lconcat$ xssa$ )(lCons$ x$ xs$ )):named a1 ))
(assert (! (lnull$ (lconcat$ (llist_of$ xss$ ))):named a2 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= (lconcat$ xssa$ )(lCons$ ?v0 ?v1 ))false ))false ):named a3 ))
(assert (! (not (lnull$ (lconcat$ xssa$ ))):named a4 ))
(assert (! (= xssa$ (lappend$ (llist_of$ xss$ )(lCons$a (lCons$ x$ xs$a )xss$a ))):named a5 ))
(assert (! (= (lnth$a xssa$ (size$ xss$ ))(lCons$ x$ xs$a )):named a6 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lnth$b (lCons$b ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$b ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lnth$a (lCons$a ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a9 ))
(assert (! (= xs$ (lappend$a xs$a (lconcat$ xss$a ))):named a10 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lconcat$a (lCons$b ?v0 ?v1 ))(lappend$ ?v0 (lconcat$a ?v1 ))):pattern ((lCons$b ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lconcat$ (lCons$a ?v0 ?v1 ))(lappend$a ?v0 (lconcat$ ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_llist_list$ ))(= (size$ ?v1 )?v0 ))):named a18 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(not (= ?v0 ?v1 )))):named a19 ))
(assert (! (= zero$ zero$ ):named a20 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a21 ))
(check-sat )
;(get-unsat-core )
