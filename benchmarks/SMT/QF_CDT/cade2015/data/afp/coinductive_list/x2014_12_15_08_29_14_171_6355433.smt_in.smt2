;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun y$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun xs$a ()A_list$ )
(declare-fun xs$b ()A_list$ )
(declare-fun ys$a ()A_list$ )
(declare-fun zs$a ()A_list$ )
(declare-fun last$ (A_list$ )A$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun thesis$ ()Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A_list$ ))(=> (= ys$ (llist_of$ ?v0 ))thesis$ )):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (=> (forall ((?v0 A_list$ ))(=> (= zs$ (llist_of$ ?v0 ))false ))false ):named a3 ))
(assert (! (=> (forall ((?v0 A_list$ ))(=> (= xs$ (llist_of$ ?v0 ))false ))false ):named a4 ))
(assert (! (lfinite$ ys$ ):named a5 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a6 ))
(assert (! (= zs$ (llist_of$ zs$a )):named a7 ))
(assert (! (= (llist_of$ ys$a )(lappend$ zs$ (lCons$ y$ ys$ ))):named a8 ))
(assert (! (= xs$ (llist_of$ xs$a )):named a9 ))
(assert (! (lfinite$ (llist_of$ ys$a )):named a10 ))
(assert (! (lfinite$ (llist_of$ xs$b )):named a11 ))
(assert (! (llexord$ r$ (llist_of$ xs$b )(llist_of$ ys$a )):named a12 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_list$ ))(= (llast$ (llist_of$ ?v0 ))(last$ ?v0 ))):named a14 ))
(assert (! (lfinite$ zs$ ):named a15 ))
(assert (! (lfinite$ xs$ ):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 ?v1 ?v1 )):named a18 ))
(check-sat )
;(get-unsat-core )
