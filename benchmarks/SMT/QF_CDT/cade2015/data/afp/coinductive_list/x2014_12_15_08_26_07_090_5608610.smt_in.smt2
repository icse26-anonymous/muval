;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun f$ ()A_b_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lmap$ (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun ldrop$ (Enat$ B_llist$ )B_llist$ )
(declare-fun llast$ (B_llist$ )B$ )
(declare-fun lmap$a (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$b (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$c (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ltake$ (Enat$ B_llist$ )B_llist$ )
(declare-fun ldrop$a (Enat$ A_llist$ )A_llist$ )
(declare-fun ldropn$ (Nat$ B_llist$ )B_llist$ )
(declare-fun llast$a (A_llist$ )A$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun ltake$a (Enat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_b_fun$ A$ )B$ )
(declare-fun ldropn$a (Nat$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (B_llist$ )Enat$ )
(declare-fun fun_app$a (B_b_fun$ B$ )B$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun iterates$ (B_b_fun$ B$ )B_llist$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun llength$a (A_llist$ )Enat$ )
(declare-fun iterates$a (A_a_fun$ A$ )A_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(declare-fun lstrict_prefix$a (B_llist$ B_llist$ )Bool )
(assert (! (not (= (llast$ (lmap$ f$ xs$ ))(fun_app$ f$ (llast$a xs$ )))):named a0 ))
(assert (! (not (lnull$ xs$ )):named a1 ))
(assert (! (lfinite$ xs$ ):named a2 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$a ?v0 ?v1 ))(lnull$a ?v1 ))):named a3 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$b ?v0 ?v1 ))(lnull$a ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$c ?v0 ?v1 ))(lnull$ ?v1 ))):named a6 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$ (lmap$a ?v0 ?v1 ))(lfinite$a ?v1 ))):named a7 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$a (lmap$b ?v0 ?v1 ))(lfinite$a ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$c ?v0 ?v1 ))(lfinite$ ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$a (lmap$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$ (lmap$c ?v2 ?v0 )(lmap$c ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$ (lmap$a ?v2 ?v0 )(lmap$a ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$a (lmap$b ?v2 ?v0 )(lmap$b ?v2 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$a (lmap$ ?v2 ?v0 )(lmap$ ?v2 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (llast$ (lCons$ ?v0 (lCons$ ?v1 ?v2 )))(llast$ (lCons$ ?v1 ?v2 ))):pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (llast$a (lCons$a ?v0 (lCons$a ?v1 ?v2 )))(llast$a (lCons$a ?v1 ?v2 ))):pattern ((lCons$a ?v0 (lCons$a ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldropn$ ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ldropn$ ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldropn$a ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ldropn$ ?v0 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldropn$a ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ldropn$a ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ldropn$a ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldrop$ ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ldrop$ ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldrop$a ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ldrop$ ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldrop$a ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ldrop$a ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldrop$ ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ldrop$a ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (lmap$b ?v0 (iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$a ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lmap$c ?v0 (iterates$a ?v0 ?v1 ))(iterates$a ?v0 (fun_app$b ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$b ?v0 ?v1 ))(llength$ ?v1 ))):named a27 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$a ?v0 ?v1 ))(llength$ ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$c ?v0 ?v1 ))(llength$a ?v1 ))):named a29 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$a ?v1 ))):named a30 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$ (lmap$b ?v0 ?v1 ))(lmap$b ?v0 (ltl$ ?v1 )))):named a31 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$a (lmap$a ?v0 ?v1 ))(lmap$a ?v0 (ltl$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$a (lmap$c ?v0 ?v1 ))(lmap$c ?v0 (ltl$a ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$a ?v1 )))):named a34 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ltake$ ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ltake$ ?v0 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ltake$a ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ltake$ ?v0 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ltake$a ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ltake$a ?v0 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ltake$ ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ltake$a ?v0 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= (lmap$b ?v0 ?v1 )lNil$ )(= ?v1 lNil$ ))):named a39 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= (lmap$a ?v0 ?v1 )lNil$a )(= ?v1 lNil$ ))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (lmap$c ?v0 ?v1 )lNil$a )(= ?v1 lNil$a ))):named a41 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= (lmap$ ?v0 ?v1 )lNil$ )(= ?v1 lNil$a ))):named a42 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= lNil$ (lmap$b ?v0 ?v1 ))(= ?v1 lNil$ ))):named a43 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= lNil$a (lmap$a ?v0 ?v1 ))(= ?v1 lNil$ ))):named a44 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= lNil$a (lmap$c ?v0 ?v1 ))(= ?v1 lNil$a ))):named a45 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= lNil$ (lmap$ ?v0 ?v1 ))(= ?v1 lNil$a ))):named a46 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a48 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$a (lCons$ ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$a ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a50 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$a (lCons$ ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$a ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a52 ))
(check-sat )
;(get-unsat-core )
