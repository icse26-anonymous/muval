;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_llist_list$ (nil$ )(cons$ (hd$ A_llist$ )(tl$ A_llist_list$ )))))
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-fun m$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lnull$a (A_llist_llist_llist$ )Bool )
(declare-fun lnull$b (A_llist_llist$ )Bool )
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun llength$ (A_llist_llist$ )Enat$ )
(declare-fun lappend$a (A_llist_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lappend$b (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(assert (! (not (less$ (enat$ (plus$ m$ (size$ xss$ )))(llength$ (lappend$ (llist_of$ xss$ )(lCons$a (lCons$ x$ xs$ )xss$a ))))):named a0 ))
(assert (! (lnull$ (lconcat$ (llist_of$ xss$ ))):named a1 ))
(assert (! (less$ (enat$ m$ )(llength$ (lCons$a xs$ xss$a ))):named a2 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (lappend$a (lCons$b ?v0 ?v1 )?v2 )(lCons$b ?v0 (lappend$a ?v1 ?v2 ))):pattern ((lappend$a (lCons$b ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (lappend$ (lCons$a ?v0 ?v1 )?v2 )(lCons$a ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$a ?v0 ?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$b (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$b ?v1 ?v2 ))):pattern ((lappend$b (lCons$ ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_list$ ))(= (llength$ (llist_of$ ?v0 ))(enat$ (size$ ?v0 )))):named a10 ))
(assert (! (= xssa$ (lappend$ (llist_of$ xss$ )(lCons$a (lCons$ x$ xs$ )xss$a ))):named a11 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= (lappend$a (lappend$a ?v0 ?v1 )?v2 )(lappend$a ?v0 (lappend$a ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$b (lappend$b ?v0 ?v1 )?v2 )(lappend$b ?v0 (lappend$b ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(! (= (lconcat$a (lCons$c ?v0 ?v1 ))(lappend$a ?v0 (lconcat$a ?v1 ))):pattern ((lCons$c ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lconcat$b (lCons$b ?v0 ?v1 ))(lappend$ ?v0 (lconcat$b ?v1 ))):pattern ((lCons$b ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lconcat$ (lCons$a ?v0 ?v1 ))(lappend$b ?v0 (lconcat$ ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a17 ))
(assert (! (= xs$a (lconcat$ (lCons$a xs$ xss$a ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(less$a ?v0 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(less$a ?v1 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (not (lnull$a (lappend$a ?v0 ?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (not (lnull$b (lappend$ ?v0 ?v1 )))(or (not (lnull$b ?v0 ))(not (lnull$b ?v1 ))))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (lappend$b ?v0 ?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (lnull$a (lappend$a ?v0 ?v1 ))(and (lnull$a ?v0 )(lnull$a ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (lnull$b (lappend$ ?v0 ?v1 ))(and (lnull$b ?v0 )(lnull$b ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (lappend$b ?v0 ?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a26 ))
(assert (! (= (lconcat$ xssa$ )(lCons$ x$ xs$a )):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a29 ))
(check-sat )
;(get-unsat-core )
