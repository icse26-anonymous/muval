;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_enat_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-datatypes ()((A_llist_list$ (nil$ )(cons$ (hd$ A_llist$ )(tl$ A_llist_list$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_llist_a_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun lmap$a (A_llist_a_fun$ A_llist_llist$ )A_llist$ )
(declare-fun lmap$b (A_a_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun lmap$c (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun zero$a ()Enat$ )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun lprefix$ (A_llist_llist$ A_llist_llist$ )Bool )
(declare-fun fun_app$a (A_llist_llist_enat_fun$ A_llist_llist$ )Enat$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$c (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$d (A_a_llist_fun$ A$ )A_llist$ )
(declare-fun fun_app$e (A_a_fun$ A$ )A$ )
(declare-fun llength$a ()A_llist_llist_enat_fun$ )
(declare-fun lprefix$a (A_llist$ A_llist$ )Bool )
(declare-fun ldistinct$ (A_llist_llist$ )Bool )
(declare-fun ldistinct$a (A_llist$ )Bool )
(declare-fun gen_llength$ (Nat$ )A_llist_llist_enat_fun$ )
(declare-fun gen_llength$a (Nat$ )A_llist_enat_fun$ )
(assert (! (not (less$ (enat$ zero$ )(fun_app$ llength$ (lnth$ xssa$ (size$ xss$ ))))):named a0 ))
(assert (! (less$ (enat$ zero$ )(fun_app$ llength$ (lconcat$ xssa$ ))):named a1 ))
(assert (! (less$ (enat$ n$ )(fun_app$ llength$ (lconcat$ xss$a ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a4 ))
(assert (! (= (lnth$a (lconcat$ xssa$ )zero$ )(lnth$a (lnth$ xssa$ (size$ xss$ ))zero$ )):named a5 ))
(assert (! (not (less$a zero$ zero$ )):named a6 ))
(assert (! (= llength$a (gen_llength$ zero$ )):named a7 ))
(assert (! (= llength$ (gen_llength$a zero$ )):named a8 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (ldistinct$ ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(fun_app$a llength$a ?v0 ))(and (less$ (enat$ ?v2 )(fun_app$a llength$a ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$ ?v0 ?v1 )(lnth$ ?v0 ?v2 ))))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldistinct$a ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(fun_app$ llength$ ?v0 ))(and (less$ (enat$ ?v2 )(fun_app$ llength$ ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$a ?v0 ?v1 )(lnth$a ?v0 ?v2 ))))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_fun$ ))(=> (less$ (enat$ ?v0 )(fun_app$a llength$a ?v1 ))(= (lnth$ (lmap$ ?v2 ?v1 )?v0 )(fun_app$b ?v2 (lnth$ ?v1 ?v0 ))))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_fun$ ))(=> (less$ (enat$ ?v0 )(fun_app$a llength$a ?v1 ))(= (lnth$a (lmap$a ?v2 ?v1 )?v0 )(fun_app$c ?v2 (lnth$ ?v1 ?v0 ))))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_llist_fun$ ))(=> (less$ (enat$ ?v0 )(fun_app$ llength$ ?v1 ))(= (lnth$ (lmap$b ?v2 ?v1 )?v0 )(fun_app$d ?v2 (lnth$a ?v1 ?v0 ))))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (less$ (enat$ ?v0 )(fun_app$ llength$ ?v1 ))(= (lnth$a (fun_app$b (lmap$c ?v2 )?v1 )?v0 )(fun_app$e ?v2 (lnth$a ?v1 ?v0 ))))):named a14 ))
(assert (! (= (lnth$ xssa$ (size$ xss$ ))(lCons$ x$ xs$ )):named a15 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 Nat$ ))(=> (and (lprefix$ ?v0 ?v1 )(less$ (enat$ ?v2 )(fun_app$a llength$a ?v0 )))(= (lnth$ ?v0 ?v2 )(lnth$ ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat$ ))(=> (and (lprefix$a ?v0 ?v1 )(less$ (enat$ ?v2 )(fun_app$ llength$ ?v0 )))(= (lnth$a ?v0 ?v2 )(lnth$a ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a18 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(lprefix$ ?v0 ?v0 )):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a20 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(lprefix$ ?v0 ?v0 )):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 Enat$ ))(= (less$ zero$a ?v0 )(not (= ?v0 zero$a )))):named a23 ))
(check-sat )
;(get-unsat-core )
