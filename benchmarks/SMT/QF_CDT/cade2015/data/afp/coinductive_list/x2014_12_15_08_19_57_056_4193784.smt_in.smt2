;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun zero$a ()Enat$ )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$b (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(declare-fun infinity$ ()Enat$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun gen_llength$ (Nat$ )A_llist_enat_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (= (fun_app$ llength$ xs$ )(fun_app$ llength$ ys$ ))):named a0 ))
(assert (! (less_eq$ (fun_app$ llength$ xs$ )(fun_app$ llength$ ys$ )):named a1 ))
(assert (! (not (less$ (fun_app$ llength$ xs$ )(fun_app$ llength$ ys$ ))):named a2 ))
(assert (! (lstrict_prefix$ xs$ ys$ ):named a3 ))
(assert (! (not (= xs$ ys$ )):named a4 ))
(assert (! (lprefix$ xs$ ys$ ):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (fun_app$ llength$ (lmap$ ?v0 ?v1 ))(fun_app$ llength$ ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$a (fun_app$b ?v0 ?v3 )?v4 )))(=> (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(fun_app$a (fun_app$b ?v0 ?v2 )?v1 )))(fun_app$a (fun_app$b ?v0 ?v2 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(= (fun_app$ llength$ ?v0 )(fun_app$ llength$ ?v1 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lprefix$ ?v0 ?v1 )(less_eq$ (fun_app$ llength$ ?v0 )(fun_app$ llength$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (fun_app$ llength$ ?v0 )?v1 )(= (ltake$ ?v1 ?v0 )?v0 )):pattern ((ltake$ ?v1 ?v0 )))):named a10 ))
(assert (! (= llength$ (gen_llength$ zero$ )):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$ llength$ (iterates$ ?v0 ?v1 ))infinity$ )):named a12 ))
(assert (! (= (fun_app$ llength$ lNil$ )zero$a ):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (fun_app$ llength$ ?v0 )zero$a )(lnull$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (lnull$ ?v0 )(= (fun_app$ llength$ ?v0 )zero$a )):pattern ((fun_app$ llength$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$ llength$ (lappend$ ?v0 ?v1 ))(plus$ (fun_app$ llength$ ?v0 )(fun_app$ llength$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a17 ))
(check-sat )
;(get-unsat-core )
