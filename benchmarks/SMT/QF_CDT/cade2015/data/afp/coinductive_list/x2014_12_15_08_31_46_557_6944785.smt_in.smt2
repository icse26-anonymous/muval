;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_list_a_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_set$ 0 )
(declare-sort A_llist_list_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_list_a_llist_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_list_a_llist_llist_llist_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-datatypes ()((A_llist_list$ (nil$ )(cons$ (hd$ A_llist$ )(tl$ A_llist_list$ )))))
(declare-sort A_llist_llist_llist$ 0)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-datatypes ()((A_llist_llist_llist_list$ (nil$a )(cons$a (hd$a A_llist_llist_llist$ )(tl$a A_llist_llist_llist_list$ )))))
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-datatypes ()((A_list$ (nil$b )(cons$b (hd$b A$ )(tl$b A_list$ )))(A_llist_llist_list$ (nil$c )(cons$c (hd$c A_llist_llist$ )(tl$c A_llist_llist_list$ )))(A_llist_llist_llist_list_list$ (nil$d )(cons$d (hd$d A_llist_llist_llist_list$ )(tl$d A_llist_llist_llist_list_list$ )))))
(declare-sort A_llist_llist_llist_llist_llist$ 0)
(declare-fun lNil$d ()A_llist_llist_llist_llist_llist$)
(declare-fun lhd$d (A_llist_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun ltl$d (A_llist_llist_llist_llist_llist$)A_llist_llist_llist_llist_llist$)
(declare-fun lCons$d (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_llist$ )A_llist_llist_llist_llist_llist$)
(declare-datatypes ()((A_llist_llist_llist_llist_list$ (nil$e )(cons$e (hd$e A_llist_llist_llist_llist$ )(tl$e A_llist_llist_llist_llist_list$ )))(A_llist_llist_list_list$ (nil$f )(cons$f (hd$f A_llist_llist_list$ )(tl$f A_llist_llist_list_list$ )))(A_llist_list_list$ (nil$g )(cons$g (hd$g A_llist_list$ )(tl$g A_llist_list_list$ )))(A_list_list$ (nil$h )(cons$h (hd$h A_list$ )(tl$h A_list_list$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun map$ (A_llist_llist_llist_list_a_llist_llist_llist_llist_fun$ A_llist_llist_llist_list_list$ )A_llist_llist_llist_llist_list$ )
(declare-fun set$ (A_llist_list$ )A_llist_set$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun map$a (A_llist_llist_list_a_llist_llist_llist_fun$ A_llist_llist_list_list$ )A_llist_llist_llist_list$ )
(declare-fun map$b (A_llist_list_a_llist_llist_fun$ A_llist_list_list$ )A_llist_llist_list$ )
(declare-fun map$c (A_list_a_llist_fun$ A_list_list$ )A_llist_list$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun lnull$ ()A_llist_bool_fun$ )
(declare-fun concat$ (A_llist_llist_llist_list_list$ )A_llist_llist_llist_list$ )
(declare-fun lnull$a (A_llist_llist_llist$ )Bool )
(declare-fun lnull$b (A_llist_llist$ )Bool )
(declare-fun lnull$c (A_llist_llist_llist_llist$ )Bool )
(declare-fun member$ (A_llist_llist_llist$ A_llist_llist_llist_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun concat$a (A_llist_llist_list_list$ )A_llist_llist_list$ )
(declare-fun concat$b (A_llist_list_list$ )A_llist_list$ )
(declare-fun concat$c (A_list_list$ )A_list$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun less_eq$ (A_llist_set$ A_llist_set$ )Bool )
(declare-fun list_of$ (A_llist_llist_llist_llist$ )A_llist_llist_llist_list$ )
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun member$b (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$a (A_llist_list_a_llist_llist_fun$ A_llist_list$ )A_llist_llist$ )
(declare-fun fun_app$b (A_llist_llist_llist_list_a_llist_llist_llist_llist_fun$ A_llist_llist_llist_list$ )A_llist_llist_llist_llist$ )
(declare-fun fun_app$c (A_list_a_llist_fun$ A_list$ )A_llist$ )
(declare-fun fun_app$d (A_llist_llist_list_a_llist_llist_llist_fun$ A_llist_llist_list$ )A_llist_llist_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$c (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun list_of$a (A_llist$ )A_list$ )
(declare-fun list_of$b (A_llist_llist_llist$ )A_llist_llist_list$ )
(declare-fun list_of$c (A_llist_llist$ )A_llist_list$ )
(declare-fun llist_of$ ()A_llist_list_a_llist_llist_fun$ )
(declare-fun llist_of$a ()A_llist_llist_llist_list_a_llist_llist_llist_llist_fun$ )
(declare-fun llist_of$b ()A_list_a_llist_fun$ )
(declare-fun llist_of$c ()A_llist_llist_list_a_llist_llist_llist_fun$ )
(declare-fun llist_of$d (A_llist_llist_llist_llist_list$ )A_llist_llist_llist_llist_llist$ )
(assert (! (not (fun_app$ lnull$ (lconcat$ (fun_app$a llist_of$ xss$ )))):named a0 ))
(assert (! (forall ((?v0 A_llist_llist_llist_list$ )(?v1 A_llist_llist_llist_list$ ))(= (= (fun_app$b llist_of$a ?v0 )(fun_app$b llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$c llist_of$b ?v0 )(fun_app$c llist_of$b ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_llist_llist_list$ )(?v1 A_llist_llist_list$ ))(= (= (fun_app$d llist_of$c ?v0 )(fun_app$d llist_of$c ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (fun_app$a llist_of$ ?v0 )(fun_app$a llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (fun_app$ lnull$ ?v0 )(lnull$a ?v1 ))false )(=> (and (not (fun_app$ lnull$ ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a6 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(fun_app$ lnull$ ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (fun_app$ lnull$ ?v1 )))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$b ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a8 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (fun_app$ lnull$ ?v0 )(lnull$b ?v1 ))false )(=> (and (not (fun_app$ lnull$ ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a10 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(fun_app$ lnull$ ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (fun_app$ lnull$ ?v1 )))false ))false )):named a11 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(lnull$b ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (fun_app$ lnull$ ?v0 )(fun_app$ lnull$ ?v1 ))false )(=> (and (not (fun_app$ lnull$ ?v0 ))(not (fun_app$ lnull$ ?v1 )))false ))false )):named a13 ))
(assert (! (forall ((?v0 A_llist_llist_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist_llist_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 )))false )(=> (not (forall ((?v1 A_llist_llist_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 ))))false ))false )):named a14 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$b ?v1 )))false )(=> (not (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$b ?v1 ))))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$b ?v1 ?v0 )(fun_app$ lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$b ?v1 ?v0 )(fun_app$ lnull$ ?v1 ))))false ))false )):named a16 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (and (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a17 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (and (lnull$b ?v0 )(lnull$b ?v1 ))false )(=> (or (not (lnull$b ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (fun_app$ lnull$ ?v0 )(fun_app$ lnull$ ?v1 ))false )(=> (or (not (fun_app$ lnull$ ?v0 ))(not (fun_app$ lnull$ ?v1 )))false ))false )):named a19 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (and (=> (lnull$a ?v0 )false )(=> (not (lnull$a ?v0 ))false ))false )):named a20 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (and (=> (lnull$b ?v0 )false )(=> (not (lnull$b ?v0 ))false ))false )):named a21 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (fun_app$ lnull$ ?v0 )false )(=> (not (fun_app$ lnull$ ?v0 ))false ))false )):named a22 ))
(assert (! (less_eq$ (set$ xss$ )(collect$ lnull$ )):named a23 ))
(assert (! (forall ((?v0 A_llist_llist_llist_list$ ))(= (lnull$c (fun_app$b llist_of$a ?v0 ))(= ?v0 nil$a ))):named a24 ))
(assert (! (forall ((?v0 A_llist_llist_list$ ))(= (lnull$a (fun_app$d llist_of$c ?v0 ))(= ?v0 nil$c ))):named a25 ))
(assert (! (forall ((?v0 A_llist_list$ ))(= (lnull$b (fun_app$a llist_of$ ?v0 ))(= ?v0 nil$ ))):named a26 ))
(assert (! (forall ((?v0 A_list$ ))(= (fun_app$ lnull$ (fun_app$c llist_of$b ?v0 ))(= ?v0 nil$b ))):named a27 ))
(assert (! (forall ((?v0 A_llist_llist_llist_list$ ))(= (list_of$ (fun_app$b llist_of$a ?v0 ))?v0 )):named a28 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$a (fun_app$c llist_of$b ?v0 ))?v0 )):named a29 ))
(assert (! (forall ((?v0 A_llist_llist_list$ ))(= (list_of$b (fun_app$d llist_of$c ?v0 ))?v0 )):named a30 ))
(assert (! (forall ((?v0 A_llist_list$ ))(= (list_of$c (fun_app$a llist_of$ ?v0 ))?v0 )):named a31 ))
(assert (! (forall ((?v0 A_llist_llist_llist_list_list$ ))(= (lconcat$a (llist_of$d (map$ llist_of$a ?v0 )))(fun_app$b llist_of$a (concat$ ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_llist_llist_list_list$ ))(= (lconcat$b (fun_app$b llist_of$a (map$a llist_of$c ?v0 )))(fun_app$d llist_of$c (concat$a ?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_llist_list_list$ ))(= (lconcat$c (fun_app$d llist_of$c (map$b llist_of$ ?v0 )))(fun_app$a llist_of$ (concat$b ?v0 )))):named a34 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (lconcat$ (fun_app$a llist_of$ (map$c llist_of$b ?v0 )))(fun_app$c llist_of$b (concat$c ?v0 )))):named a35 ))
(assert (! (= xs$ (lappend$ xs$a (lconcat$ xss$a ))):named a36 ))
(check-sat )
;(get-unsat-core )
