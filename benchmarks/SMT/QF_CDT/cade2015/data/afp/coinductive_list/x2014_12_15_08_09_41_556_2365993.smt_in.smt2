;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun y$ ()A_llist_set$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun lmap$ (A_a_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun lset$ (A_llist_llist_llist$ )A_llist_llist_set$ )
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$ )Bool )
(declare-fun lSup$a (A_llist_llist_set$ )A_llist_llist$ )
(declare-fun lmap$a (A_llist_a_fun$ A_llist_llist$ )A_llist$ )
(declare-fun lmap$b (A_llist_a_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lmap$c (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (A_llist_llist$ )A_llist_set$ )
(declare-fun lset$b (A_llist$ )A_set$ )
(declare-fun lnull$a (A_llist_llist$ )Bool )
(declare-fun lnull$b (A_llist_llist_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun member$b (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_a_llist_fun$ A$ )A_llist$ )
(declare-fun fun_app$b (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$f (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$g (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$ )A_llist_llist_bool_fun$ )
(declare-fun lappend$a (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lprefix$a (A_llist_llist$ A_llist_llist$ )Bool )
(assert (! (not (= (lhd$ (lSup$ y$ ))(lhd$ xs$ ))):named a0 ))
(assert (! (member$ xs$ y$ ):named a1 ))
(assert (! (not (lnull$ xs$ )):named a2 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(= (lnull$a (lSup$a ?v0 ))(forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$a ?v1 ))))):named a3 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (lnull$ (lSup$ ?v0 ))(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))):named a4 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(= (not (lnull$a (lSup$a ?v0 )))(not (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$a ?v1 )))))):named a5 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (not (lnull$ (lSup$ ?v0 )))(not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$a ?v1 )))false )(=> (not (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$a ?v1 ))))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a8 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (and (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a10 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (and (=> (lnull$a ?v0 )false )(=> (not (lnull$a ?v0 ))false ))false )):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a12 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(=> (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$a ?v1 )))(lnull$a (lSup$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))(lnull$ (lSup$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(=> (not (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$a ?v1 ))))(not (lnull$a (lSup$a ?v0 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))(not (lnull$ (lSup$ ?v0 ))))):named a16 ))
(assert (! (chain$ lprefix$ y$ ):named a17 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (lhd$a (lappend$ ?v0 ?v1 ))(ite (lnull$a ?v0 )(lhd$a ?v1 )(lhd$a ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lhd$ (fun_app$ (lappend$a ?v0 )?v1 ))(ite (lnull$ ?v0 )(lhd$ ?v1 )(lhd$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_fun$ ))(=> (not (lnull$ ?v0 ))(= (lhd$a (lmap$ ?v1 ?v0 ))(fun_app$a ?v1 (lhd$ ?v0 ))))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_fun$ ))(=> (not (lnull$a ?v0 ))(= (lhd$ (lmap$a ?v1 ?v0 ))(fun_app$b ?v1 (lhd$a ?v0 ))))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_llist_fun$ ))(=> (not (lnull$a ?v0 ))(= (lhd$a (lmap$b ?v1 ?v0 ))(fun_app$ ?v1 (lhd$a ?v0 ))))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ ))(=> (not (lnull$ ?v0 ))(= (lhd$ (fun_app$ (lmap$c ?v1 )?v0 ))(fun_app$c ?v1 (lhd$ ?v0 ))))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(! (=> (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$a ?v1 )))(= (lSup$a ?v0 )lNil$a )):pattern ((lSup$a ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_llist_set$ ))(! (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))(= (lSup$ ?v0 )lNil$ )):pattern ((lSup$ ?v0 )))):named a25 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(not (lnull$a ?v0 )))(= (lhd$a ?v0 )(lhd$a ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$ ?v0 )?v1 )(not (lnull$ ?v0 )))(= (lhd$ ?v0 )(lhd$ ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (= (lnull$a ?v0 )(lnull$a ?v1 ))(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))(and (= (lhd$a ?v0 )(lhd$a ?v1 ))(= (ltl$a ?v0 )(ltl$a ?v1 )))))(= ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (fun_app$f (fun_app$g ?v0 ?v1 )?v2 )(forall ((?v3 A_llist_llist$ )(?v4 A_llist_llist$ ))(=> (fun_app$f (fun_app$g ?v0 ?v3 )?v4 )(and (= (lnull$a ?v3 )(lnull$a ?v4 ))(=> (and (not (lnull$a ?v3 ))(not (lnull$a ?v4 )))(and (= (lhd$a ?v3 )(lhd$a ?v4 ))(or (fun_app$f (fun_app$g ?v0 (ltl$a ?v3 ))(ltl$a ?v4 ))(= (ltl$a ?v3 )(ltl$a ?v4 )))))))))(= ?v1 ?v2 ))):named a30 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(or (fun_app$d (fun_app$e ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))(= (ltl$ ?v3 )(ltl$ ?v4 )))))))))(= ?v1 ?v2 ))):named a31 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (fun_app$f (fun_app$g ?v0 ?v1 )?v2 )(forall ((?v3 A_llist_llist$ )(?v4 A_llist_llist$ ))(=> (fun_app$f (fun_app$g ?v0 ?v3 )?v4 )(and (= (lnull$a ?v3 )(lnull$a ?v4 ))(=> (and (not (lnull$a ?v3 ))(not (lnull$a ?v4 )))(and (= (lhd$a ?v3 )(lhd$a ?v4 ))(fun_app$f (fun_app$g ?v0 (ltl$a ?v3 ))(ltl$a ?v4 ))))))))(= ?v1 ?v2 ))):named a32 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(fun_app$d (fun_app$e ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))))))))(= ?v1 ?v2 ))):named a33 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (not (lnull$b ?v0 ))(member$a (lhd$b ?v0 )(lset$ ?v0 )))):named a34 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (not (lnull$a ?v0 ))(member$ (lhd$a ?v0 )(lset$a ?v0 )))):named a35 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lnull$ ?v0 ))(member$b (lhd$ ?v0 )(lset$b ?v0 )))):named a36 ))
(check-sat )
;(get-unsat-core )
