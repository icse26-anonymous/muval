;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_list$ )
(declare-fun last$ (A_list$ )A$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun filter$ (A_bool_fun$ A_list$ )A_list$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun remove1$ (A$ A_list$ )A_list$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun removeAll$ (A$ A_list$ )A_list$ )
(assert (! (not (= (fun_app$ (lfilter$ p$ )(llist_of$ xs$ ))(llist_of$ (filter$ p$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$ (lfilter$ ?v0 )(fun_app$ (lfilter$ ?v0 )?v1 ))(fun_app$ (lfilter$ ?v0 )?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a3 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$ (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$a ?v0 ?v1 )(lCons$ ?v1 (fun_app$ (lfilter$ ?v0 )?v2 ))(fun_app$ (lfilter$ ?v0 )?v2 ))):pattern ((fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (=> (not (fun_app$a ?v0 ?v1 ))(= (fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(fun_app$ (lfilter$ ?v0 )?v2 ))):pattern ((fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (=> (fun_app$a ?v0 ?v1 )(= (fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v1 (fun_app$ (lfilter$ ?v0 )?v2 )))):pattern ((fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (lfinite$ ?v0 )(lfinite$ (fun_app$ (lfilter$ ?v1 )?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_list$ ))(=> (not (fun_app$a ?v0 ?v1 ))(= (removeAll$ ?v1 (filter$ ?v0 ?v2 ))(filter$ ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_list$ ))(=> (not (fun_app$a ?v0 ?v1 ))(= (remove1$ ?v1 (filter$ ?v0 ?v2 ))(filter$ ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_list$ ))(= (llast$ (llist_of$ ?v0 ))(last$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_list$ ))(= (filter$ ?v0 (remove1$ ?v1 ?v2 ))(remove1$ ?v1 (filter$ ?v0 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a16 ))
(check-sat )
;(get-unsat-core )
