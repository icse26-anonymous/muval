;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_fun_fun$ 0 )
(declare-sort A_a_llist_b_a_llist_fun_fun_fun$ 0 )
(declare-sort A_a_llist_b_a_llist_fun_fun_fun_a_llist_b_a_llist_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun f$ (A_llist$ )B_a_llist_fun$ )
(declare-fun uu$ ()B_a_llist_fun$ )
(declare-fun one$ ()B$ )
(declare-fun uua$ ()A_a_llist_b_a_llist_fun_fun_fun$ )
(declare-fun uub$ (B$ )A_a_llist_a_llist_fun_fun$ )
(declare-fun uuc$ ()A_llist_b_a_llist_fun_fun$ )
(declare-fun uud$ (A_bool_fun$ )A_a_llist_a_llist_fun_fun$ )
(declare-fun zero$ ()B$ )
(declare-fun minus$ (B$ B$ )B$ )
(declare-fun fun_app$ (B_a_llist_fun$ B$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$a (A_llist_b_a_llist_fun_fun$ A_llist$ )B_a_llist_fun$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$c (A_a_llist_a_llist_fun_fun$ A$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$d (A_a_llist_b_a_llist_fun_fun_fun$ A$ )A_llist_b_a_llist_fun_fun$ )
(declare-fun fun_app$e (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$f (A_a_llist_b_a_llist_fun_fun_fun_a_llist_b_a_llist_fun_fun_fun$ A_a_llist_b_a_llist_fun_fun_fun$ )A_llist_b_a_llist_fun_fun$ )
(declare-fun case_llist$ (A_llist$ A_a_llist_a_llist_fun_fun$ )A_llist_a_llist_fun$ )
(declare-fun case_llist$a (B_a_llist_fun$ )A_a_llist_b_a_llist_fun_fun_fun_a_llist_b_a_llist_fun_fun_fun$ )
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$ (fun_app$a uuc$ ?v0 )?v1 )(fun_app$b (case_llist$ lNil$ (uub$ ?v1 ))?v0 )):pattern ((fun_app$ (fun_app$a uuc$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (fun_app$c (uub$ ?v0 )?v1 )?v2 )(ite (= ?v0 zero$ )(lCons$ ?v1 ?v2 )(fun_app$ (f$ ?v2 )(minus$ ?v0 one$ )))):pattern ((fun_app$b (fun_app$c (uub$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 B$ ))(! (= (fun_app$ (fun_app$a (fun_app$d uua$ ?v0 )?v1 )?v2 )(ite (= ?v2 zero$ )(lCons$ ?v0 ?v1 )(fun_app$ (f$ ?v1 )(minus$ ?v2 one$ )))):pattern ((fun_app$ (fun_app$a (fun_app$d uua$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (fun_app$c (uud$ ?v0 )?v1 )?v2 )(ite (fun_app$e ?v0 ?v1 )(lCons$ ?v1 (lfilter$ ?v0 ?v2 ))(lfilter$ ?v0 ?v2 ))):pattern ((fun_app$b (fun_app$c (uud$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ uu$ ?v0 )lNil$ ):pattern ((fun_app$ uu$ ?v0 )))):named a4 ))
(assert (! (not (= (fun_app$f (case_llist$a uu$ )uua$ )uuc$ )):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 A_a_llist_b_a_llist_fun_fun_fun$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (fun_app$f (case_llist$a ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(fun_app$a (fun_app$d ?v1 ?v2 )?v3 )):pattern ((fun_app$a (fun_app$f (case_llist$a ?v0 )?v1 )(lCons$ ?v2 ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_a_llist_fun_fun$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$b (case_llist$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(fun_app$b (fun_app$c ?v1 ?v2 )?v3 )):pattern ((fun_app$b (case_llist$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 A_a_llist_b_a_llist_fun_fun_fun$ ))(! (= (fun_app$a (fun_app$f (case_llist$a ?v0 )?v1 )lNil$ )?v0 ):pattern ((fun_app$f (case_llist$a ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_a_llist_fun_fun$ ))(! (= (fun_app$b (case_llist$ ?v0 ?v1 )lNil$ )?v0 ):pattern ((case_llist$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (= lNil$ (lCons$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$ ?v0 ?v1 )(fun_app$b (case_llist$ lNil$ (uud$ ?v0 ))?v1 ))):named a14 ))
(check-sat )
;(get-unsat-core )
