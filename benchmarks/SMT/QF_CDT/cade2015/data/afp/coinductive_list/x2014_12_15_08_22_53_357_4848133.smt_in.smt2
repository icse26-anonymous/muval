;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun i$ ()Nat$ )
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (= (lnth$ (ltakeWhile$ p$ xs$ )i$ )(lnth$ xs$ i$ ))):named a0 ))
(assert (! (fun_app$ (less$ (enat$ i$ ))(llength$ (ltakeWhile$ p$ xs$ ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (fun_app$ (less$ (enat$ ?v0 ))(llength$ ?v1 ))(= (lnth$ (lmap$ ?v2 ?v1 )?v0 )(fun_app$a ?v2 (lnth$ ?v1 ?v0 ))))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat$ ))(=> (and (lprefix$ ?v0 ?v1 )(fun_app$ (less$ (enat$ ?v2 ))(llength$ ?v0 )))(= (lnth$ ?v0 ?v2 )(lnth$ ?v1 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$ (less$ (enat$ ?v0 ))(llength$ ?v1 ))(= (lnth$ (lappend$ ?v1 ?v2 )?v0 )(lnth$ ?v1 ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(exists ((?v2 Nat$ ))(and (fun_app$ (less$ (enat$ ?v2 ))(llength$ ?v1 ))(= (lnth$ ?v1 ?v2 )?v0 ))))):named a7 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(fun_app$ (less$ (llength$ ?v0 ))(llength$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (less$ ?v1 )?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (less$a ?v0 ?v1 )(less$a ?v1 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (fun_app$ (less$ ?v0 )?v1 ))(or (fun_app$ (less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (less$a ?v0 ?v1 ))(or (less$a ?v1 ?v0 )(= ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (=> (fun_app$ (less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$ (less$ ?v1 )?v0 )false )))false )):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (less$a ?v0 ?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (less$a ?v1 ?v0 )false )))false )):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (less$ (enat$ ?v0 ))(enat$ ?v1 ))(less$a ?v0 ?v1 )):pattern ((fun_app$ (less$ (enat$ ?v0 ))(enat$ ?v1 ))))):named a18 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a20 ))
(check-sat )
;(get-unsat-core )
