;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort B_a_prod_bool_fun$ 0 )
(declare-sort B_b_prod_bool_fun$ 0 )
(declare-sort A_a_a_prod_prod_bool_fun$ 0 )
(declare-sort A_a_b_prod_prod_bool_fun$ 0 )
(declare-sort A_b_a_prod_prod_bool_fun$ 0 )
(declare-sort A_b_b_prod_prod_bool_fun$ 0 )
(declare-sort B_a_b_prod_prod_bool_fun$ 0 )
(declare-sort A_a_a_b_prod_prod_prod_bool_fun$ 0 )
(declare-sort A_b_a_b_prod_prod_prod_bool_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-datatypes ()((B_b_prod$ (pair$a (fst$a B$ )(snd$a B$ )))))
(declare-sort B_b_prod_llist$ 0)
(declare-fun lNil$c ()B_b_prod_llist$)
(declare-fun lhd$c (B_b_prod_llist$)B_b_prod$)
(declare-fun ltl$c (B_b_prod_llist$)B_b_prod_llist$)
(declare-fun lCons$c (B_b_prod$ B_b_prod_llist$ )B_b_prod_llist$)
(declare-datatypes ()((B_a_prod$ (pair$b (fst$b B$ )(snd$b A$ )))))
(declare-sort B_a_prod_llist$ 0)
(declare-fun lNil$d ()B_a_prod_llist$)
(declare-fun lhd$d (B_a_prod_llist$)B_a_prod$)
(declare-fun ltl$d (B_a_prod_llist$)B_a_prod_llist$)
(declare-fun lCons$d (B_a_prod$ B_a_prod_llist$ )B_a_prod_llist$)
(declare-datatypes ()((A_a_prod$ (pair$c (fst$c A$ )(snd$c A$ )))))
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$e ()A_a_prod_llist$)
(declare-fun lhd$e (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$e (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$e (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((B_a_b_prod_prod$ (pair$d (fst$d B$ )(snd$d A_b_prod$ )))))
(declare-sort B_a_b_prod_prod_llist$ 0)
(declare-fun lNil$f ()B_a_b_prod_prod_llist$)
(declare-fun lhd$f (B_a_b_prod_prod_llist$)B_a_b_prod_prod$)
(declare-fun ltl$f (B_a_b_prod_prod_llist$)B_a_b_prod_prod_llist$)
(declare-fun lCons$f (B_a_b_prod_prod$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$)
(declare-datatypes ()((A_a_b_prod_prod$ (pair$e (fst$e A$ )(snd$e A_b_prod$ )))))
(declare-sort A_a_b_prod_prod_llist$ 0)
(declare-fun lNil$g ()A_a_b_prod_prod_llist$)
(declare-fun lhd$g (A_a_b_prod_prod_llist$)A_a_b_prod_prod$)
(declare-fun ltl$g (A_a_b_prod_prod_llist$)A_a_b_prod_prod_llist$)
(declare-fun lCons$g (A_a_b_prod_prod$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$)
(declare-datatypes ()((A_b_b_prod_prod$ (pair$f (fst$f A$ )(snd$f B_b_prod$ )))))
(declare-sort A_b_b_prod_prod_llist$ 0)
(declare-fun lNil$h ()A_b_b_prod_prod_llist$)
(declare-fun lhd$h (A_b_b_prod_prod_llist$)A_b_b_prod_prod$)
(declare-fun ltl$h (A_b_b_prod_prod_llist$)A_b_b_prod_prod_llist$)
(declare-fun lCons$h (A_b_b_prod_prod$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$)
(declare-datatypes ()((A_b_a_prod_prod$ (pair$g (fst$g A$ )(snd$g B_a_prod$ )))))
(declare-sort A_b_a_prod_prod_llist$ 0)
(declare-fun lNil$i ()A_b_a_prod_prod_llist$)
(declare-fun lhd$i (A_b_a_prod_prod_llist$)A_b_a_prod_prod$)
(declare-fun ltl$i (A_b_a_prod_prod_llist$)A_b_a_prod_prod_llist$)
(declare-fun lCons$i (A_b_a_prod_prod$ A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist$)
(declare-datatypes ()((A_b_prod_a_prod$ (pair$h (fst$h A_b_prod$ )(snd$h A$ )))))
(declare-sort A_b_prod_a_prod_llist$ 0)
(declare-fun lNil$j ()A_b_prod_a_prod_llist$)
(declare-fun lhd$j (A_b_prod_a_prod_llist$)A_b_prod_a_prod$)
(declare-fun ltl$j (A_b_prod_a_prod_llist$)A_b_prod_a_prod_llist$)
(declare-fun lCons$j (A_b_prod_a_prod$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$)
(declare-datatypes ()((A_b_prod_b_prod$ (pair$i (fst$i A_b_prod$ )(snd$i B$ )))))
(declare-sort A_b_prod_b_prod_llist$ 0)
(declare-fun lNil$k ()A_b_prod_b_prod_llist$)
(declare-fun lhd$k (A_b_prod_b_prod_llist$)A_b_prod_b_prod$)
(declare-fun ltl$k (A_b_prod_b_prod_llist$)A_b_prod_b_prod_llist$)
(declare-fun lCons$k (A_b_prod_b_prod$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$)
(declare-datatypes ()((A_b_prod_a_b_prod_prod$ (pair$j (fst$j A_b_prod$ )(snd$j A_b_prod$ )))))
(declare-sort A_b_prod_a_b_prod_prod_llist$ 0)
(declare-fun lNil$l ()A_b_prod_a_b_prod_prod_llist$)
(declare-fun lhd$l (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod$)
(declare-fun ltl$l (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod_llist$)
(declare-fun lCons$l (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod$ (pair$k (fst$k A$ )(snd$k A_a_prod$ )))(A_b_a_b_prod_prod_prod$ (pair$l (fst$l A$ )(snd$l B_a_b_prod_prod$ )))(A_a_a_b_prod_prod_prod$ (pair$m (fst$m A$ )(snd$m A_a_b_prod_prod$ )))))
(declare-fun z$ ()A_b_prod$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun zs$ ()A_b_prod_llist$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun lzip$a (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$b (B_llist$ A_llist$ )B_a_prod_llist$ )
(declare-fun lzip$c (B_llist$ B_llist$ )B_b_prod_llist$ )
(declare-fun lzip$d (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$e (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$f (A_llist$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lzip$g (B_llist$ A_b_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun fun_app$a (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$b (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$c (B_b_prod_bool_fun$ B_b_prod$ )Bool )
(declare-fun fun_app$d (B_a_prod_bool_fun$ B_a_prod$ )Bool )
(declare-fun fun_app$e (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun fun_app$f (B_a_b_prod_prod_bool_fun$ B_a_b_prod_prod$ )Bool )
(declare-fun fun_app$g (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod$ )Bool )
(declare-fun fun_app$h (A_b_b_prod_prod_bool_fun$ A_b_b_prod_prod$ )Bool )
(declare-fun fun_app$i (A_b_a_prod_prod_bool_fun$ A_b_a_prod_prod$ )Bool )
(declare-fun fun_app$j (A_b_a_b_prod_prod_prod_bool_fun$ A_b_a_b_prod_prod_prod$ )Bool )
(declare-fun fun_app$k (A_a_a_b_prod_prod_prod_bool_fun$ A_a_a_b_prod_prod_prod$ )Bool )
(declare-fun fun_app$l (A_a_a_prod_prod_bool_fun$ A_a_a_prod_prod$ )Bool )
(declare-fun lmember$a (B$ B_llist$ )Bool )
(declare-fun lmember$b (A_b_prod$ A_b_prod_llist$ )Bool )
(declare-fun lmember$c (B_b_prod$ B_b_prod_llist$ )Bool )
(declare-fun lmember$d (B_a_prod$ B_a_prod_llist$ )Bool )
(declare-fun lmember$e (A_a_prod$ A_a_prod_llist$ )Bool )
(declare-fun lmember$f (B_a_b_prod_prod$ B_a_b_prod_prod_llist$ )Bool )
(declare-fun lmember$g (A_a_b_prod_prod$ A_a_b_prod_prod_llist$ )Bool )
(declare-fun lmember$h (A_b_b_prod_prod$ A_b_b_prod_prod_llist$ )Bool )
(declare-fun lmember$i (A_b_a_prod_prod$ A_b_a_prod_prod_llist$ )Bool )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun pred_llist$a (B_bool_fun$ B_llist$ )Bool )
(declare-fun pred_llist$b (A_b_prod_bool_fun$ A_b_prod_llist$ )Bool )
(declare-fun pred_llist$c (B_b_prod_bool_fun$ B_b_prod_llist$ )Bool )
(declare-fun pred_llist$d (B_a_prod_bool_fun$ B_a_prod_llist$ )Bool )
(declare-fun pred_llist$e (A_a_prod_bool_fun$ A_a_prod_llist$ )Bool )
(declare-fun pred_llist$f (B_a_b_prod_prod_bool_fun$ B_a_b_prod_prod_llist$ )Bool )
(declare-fun pred_llist$g (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod_llist$ )Bool )
(declare-fun pred_llist$h (A_b_b_prod_prod_bool_fun$ A_b_b_prod_prod_llist$ )Bool )
(declare-fun pred_llist$i (A_b_a_prod_prod_bool_fun$ A_b_a_prod_prod_llist$ )Bool )
(assert (! (not (= (= (lzip$ xs$ ys$ )(lCons$ z$ zs$ ))(exists ((?v0 A$ )(?v1 A_llist$ )(?v2 B$ )(?v3 B_llist$ ))(and (= xs$ (lCons$a ?v0 ?v1 ))(and (= ys$ (lCons$b ?v2 ?v3 ))(and (= z$ (pair$ ?v0 ?v2 ))(= zs$ (lzip$ ?v1 ?v3 )))))))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_llist$ )(?v2 B_b_prod$ )(?v3 B_b_prod_llist$ ))(= (= (lCons$c ?v0 ?v1 )(lCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod$ )(?v3 B_a_prod_llist$ ))(= (= (lCons$d ?v0 ?v1 )(lCons$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(= (= (lCons$e ?v0 ?v1 )(lCons$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 B_a_b_prod_prod$ )(?v1 B_a_b_prod_prod_llist$ )(?v2 B_a_b_prod_prod$ )(?v3 B_a_b_prod_prod_llist$ ))(= (= (lCons$f ?v0 ?v1 )(lCons$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_llist$ )(?v2 A_a_b_prod_prod$ )(?v3 A_a_b_prod_prod_llist$ ))(= (= (lCons$g ?v0 ?v1 )(lCons$g ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_b_b_prod_prod$ )(?v1 A_b_b_prod_prod_llist$ )(?v2 A_b_b_prod_prod$ )(?v3 A_b_b_prod_prod_llist$ ))(= (= (lCons$h ?v0 ?v1 )(lCons$h ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_b_a_prod_prod$ )(?v1 A_b_a_prod_prod_llist$ )(?v2 A_b_a_prod_prod$ )(?v3 A_b_a_prod_prod_llist$ ))(= (= (lCons$i ?v0 ?v1 )(lCons$i ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lzip$a (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(lCons$e (pair$c ?v0 ?v2 )(lzip$a ?v1 ?v3 ))):pattern ((lzip$a (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (lzip$ (lCons$a ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(lCons$ (pair$ ?v0 ?v2 )(lzip$ ?v1 ?v3 ))):pattern ((lzip$ (lCons$a ?v0 ?v1 )(lCons$b ?v2 ?v3 ))))):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lzip$b (lCons$b ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(lCons$d (pair$b ?v0 ?v2 )(lzip$b ?v1 ?v3 ))):pattern ((lzip$b (lCons$b ?v0 ?v1 )(lCons$a ?v2 ?v3 ))))):named a13 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (lzip$c (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(lCons$c (pair$a ?v0 ?v2 )(lzip$c ?v1 ?v3 ))):pattern ((lzip$c (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))))):named a14 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lzip$d (lCons$ ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(lCons$j (pair$h ?v0 ?v2 )(lzip$d ?v1 ?v3 ))):pattern ((lzip$d (lCons$ ?v0 ?v1 )(lCons$a ?v2 ?v3 ))))):named a15 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (lzip$e (lCons$ ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(lCons$k (pair$i ?v0 ?v2 )(lzip$e ?v1 ?v3 ))):pattern ((lzip$e (lCons$ ?v0 ?v1 )(lCons$b ?v2 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(! (= (lzip$f (lCons$a ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(lCons$g (pair$e ?v0 ?v2 )(lzip$f ?v1 ?v3 ))):pattern ((lzip$f (lCons$a ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a17 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(! (= (lzip$g (lCons$b ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(lCons$f (pair$d ?v0 ?v2 )(lzip$g ?v1 ?v3 ))):pattern ((lzip$g (lCons$b ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a18 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(! (= (lzip$h (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(lCons$l (pair$j ?v0 ?v2 )(lzip$h ?v1 ?v3 ))):pattern ((lzip$h (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 B_b_prod$ )(?v3 B_b_prod_llist$ ))(! (= (lzip$i (lCons$a ?v0 ?v1 )(lCons$c ?v2 ?v3 ))(lCons$h (pair$f ?v0 ?v2 )(lzip$i ?v1 ?v3 ))):pattern ((lzip$i (lCons$a ?v0 ?v1 )(lCons$c ?v2 ?v3 ))))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B$ )(?v3 B$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 B$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_prod$ )(?v2 B$ )(?v3 A_b_prod$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_prod$ )(?v2 A$ )(?v3 B_b_prod$ ))(= (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 B_a_prod$ )(?v2 A$ )(?v3 B_a_prod$ ))(= (= (pair$g ?v0 ?v1 )(pair$g ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a28 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ )(?v2 A$ )(?v3 A_a_prod$ ))(= (= (pair$k ?v0 ?v1 )(pair$k ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a29 ))
(assert (! (forall ((?v0 A$ )(?v1 B_a_b_prod_prod$ )(?v2 A$ )(?v3 B_a_b_prod_prod$ ))(= (= (pair$l ?v0 ?v1 )(pair$l ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a31 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B$ )(?v3 B$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a32 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 B$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a33 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_prod$ )(?v2 B$ )(?v3 A_b_prod$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_prod$ )(?v2 A$ )(?v3 B_b_prod$ ))(= (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a37 ))
(assert (! (forall ((?v0 A$ )(?v1 B_a_prod$ )(?v2 A$ )(?v3 B_a_prod$ ))(= (= (pair$g ?v0 ?v1 )(pair$g ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a38 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ )(?v2 A$ )(?v3 A_a_prod$ ))(= (= (pair$k ?v0 ?v1 )(pair$k ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a39 ))
(assert (! (forall ((?v0 A$ )(?v1 B_a_b_prod_prod$ )(?v2 A$ )(?v3 B_a_b_prod_prod$ ))(= (= (pair$l ?v0 ?v1 )(pair$l ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$a ?v1 ?v2 ))(and (fun_app$ ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$a ?v1 ?v2 ))))):named a41 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (pred_llist$a ?v0 (lCons$b ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(pred_llist$a ?v0 ?v2 ))):pattern ((pred_llist$a ?v0 (lCons$b ?v1 ?v2 ))))):named a42 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_llist$ ))(! (= (pred_llist$b ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(pred_llist$b ?v0 ?v2 ))):pattern ((pred_llist$b ?v0 (lCons$ ?v1 ?v2 ))))):named a43 ))
(assert (! (forall ((?v0 B_b_prod_bool_fun$ )(?v1 B_b_prod$ )(?v2 B_b_prod_llist$ ))(! (= (pred_llist$c ?v0 (lCons$c ?v1 ?v2 ))(and (fun_app$c ?v0 ?v1 )(pred_llist$c ?v0 ?v2 ))):pattern ((pred_llist$c ?v0 (lCons$c ?v1 ?v2 ))))):named a44 ))
(assert (! (forall ((?v0 B_a_prod_bool_fun$ )(?v1 B_a_prod$ )(?v2 B_a_prod_llist$ ))(! (= (pred_llist$d ?v0 (lCons$d ?v1 ?v2 ))(and (fun_app$d ?v0 ?v1 )(pred_llist$d ?v0 ?v2 ))):pattern ((pred_llist$d ?v0 (lCons$d ?v1 ?v2 ))))):named a45 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_llist$ ))(! (= (pred_llist$e ?v0 (lCons$e ?v1 ?v2 ))(and (fun_app$e ?v0 ?v1 )(pred_llist$e ?v0 ?v2 ))):pattern ((pred_llist$e ?v0 (lCons$e ?v1 ?v2 ))))):named a46 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_bool_fun$ )(?v1 B_a_b_prod_prod$ )(?v2 B_a_b_prod_prod_llist$ ))(! (= (pred_llist$f ?v0 (lCons$f ?v1 ?v2 ))(and (fun_app$f ?v0 ?v1 )(pred_llist$f ?v0 ?v2 ))):pattern ((pred_llist$f ?v0 (lCons$f ?v1 ?v2 ))))):named a47 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$ )(?v1 A_a_b_prod_prod$ )(?v2 A_a_b_prod_prod_llist$ ))(! (= (pred_llist$g ?v0 (lCons$g ?v1 ?v2 ))(and (fun_app$g ?v0 ?v1 )(pred_llist$g ?v0 ?v2 ))):pattern ((pred_llist$g ?v0 (lCons$g ?v1 ?v2 ))))):named a48 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_bool_fun$ )(?v1 A_b_b_prod_prod$ )(?v2 A_b_b_prod_prod_llist$ ))(! (= (pred_llist$h ?v0 (lCons$h ?v1 ?v2 ))(and (fun_app$h ?v0 ?v1 )(pred_llist$h ?v0 ?v2 ))):pattern ((pred_llist$h ?v0 (lCons$h ?v1 ?v2 ))))):named a49 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_bool_fun$ )(?v1 A_b_a_prod_prod$ )(?v2 A_b_a_prod_prod_llist$ ))(! (= (pred_llist$i ?v0 (lCons$i ?v1 ?v2 ))(and (fun_app$i ?v0 ?v1 )(pred_llist$i ?v0 ?v2 ))):pattern ((pred_llist$i ?v0 (lCons$i ?v1 ?v2 ))))):named a50 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (lmember$ ?v0 (lCons$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$ ?v0 ?v2 ))):pattern ((lmember$ ?v0 (lCons$a ?v1 ?v2 ))))):named a51 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (lmember$a ?v0 (lCons$b ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$a ?v0 ?v2 ))):pattern ((lmember$a ?v0 (lCons$b ?v1 ?v2 ))))):named a52 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod_llist$ ))(! (= (lmember$b ?v0 (lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$b ?v0 ?v2 ))):pattern ((lmember$b ?v0 (lCons$ ?v1 ?v2 ))))):named a53 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod$ )(?v2 B_b_prod_llist$ ))(! (= (lmember$c ?v0 (lCons$c ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$c ?v0 ?v2 ))):pattern ((lmember$c ?v0 (lCons$c ?v1 ?v2 ))))):named a54 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod$ )(?v2 B_a_prod_llist$ ))(! (= (lmember$d ?v0 (lCons$d ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$d ?v0 ?v2 ))):pattern ((lmember$d ?v0 (lCons$d ?v1 ?v2 ))))):named a55 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod$ )(?v2 A_a_prod_llist$ ))(! (= (lmember$e ?v0 (lCons$e ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$e ?v0 ?v2 ))):pattern ((lmember$e ?v0 (lCons$e ?v1 ?v2 ))))):named a56 ))
(assert (! (forall ((?v0 B_a_b_prod_prod$ )(?v1 B_a_b_prod_prod$ )(?v2 B_a_b_prod_prod_llist$ ))(! (= (lmember$f ?v0 (lCons$f ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$f ?v0 ?v2 ))):pattern ((lmember$f ?v0 (lCons$f ?v1 ?v2 ))))):named a57 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod$ )(?v2 A_a_b_prod_prod_llist$ ))(! (= (lmember$g ?v0 (lCons$g ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$g ?v0 ?v2 ))):pattern ((lmember$g ?v0 (lCons$g ?v1 ?v2 ))))):named a58 ))
(assert (! (forall ((?v0 A_b_b_prod_prod$ )(?v1 A_b_b_prod_prod$ )(?v2 A_b_b_prod_prod_llist$ ))(! (= (lmember$h ?v0 (lCons$h ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$h ?v0 ?v2 ))):pattern ((lmember$h ?v0 (lCons$h ?v1 ?v2 ))))):named a59 ))
(assert (! (forall ((?v0 A_b_a_prod_prod$ )(?v1 A_b_a_prod_prod$ )(?v2 A_b_a_prod_prod_llist$ ))(! (= (lmember$i ?v0 (lCons$i ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$i ?v0 ?v2 ))):pattern ((lmember$i ?v0 (lCons$i ?v1 ?v2 ))))):named a60 ))
(assert (! (forall ((?v0 A_b_prod$ ))(=> (forall ((?v1 A$ )(?v2 B$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a61 ))
(assert (! (forall ((?v0 B_b_prod$ ))(=> (forall ((?v1 B$ )(?v2 B$ ))(=> (= ?v0 (pair$a ?v1 ?v2 ))false ))false )):named a62 ))
(assert (! (forall ((?v0 B_a_prod$ ))(=> (forall ((?v1 B$ )(?v2 A$ ))(=> (= ?v0 (pair$b ?v1 ?v2 ))false ))false )):named a63 ))
(assert (! (forall ((?v0 A_a_prod$ ))(=> (forall ((?v1 A$ )(?v2 A$ ))(=> (= ?v0 (pair$c ?v1 ?v2 ))false ))false )):named a64 ))
(assert (! (forall ((?v0 B_a_b_prod_prod$ ))(=> (forall ((?v1 B$ )(?v2 A_b_prod$ ))(=> (= ?v0 (pair$d ?v1 ?v2 ))false ))false )):named a65 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 A_b_prod$ ))(=> (= ?v0 (pair$e ?v1 ?v2 ))false ))false )):named a66 ))
(assert (! (forall ((?v0 A_b_b_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 B_b_prod$ ))(=> (= ?v0 (pair$f ?v1 ?v2 ))false ))false )):named a67 ))
(assert (! (forall ((?v0 A_b_a_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 B_a_prod$ ))(=> (= ?v0 (pair$g ?v1 ?v2 ))false ))false )):named a68 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 A_a_prod$ ))(=> (= ?v0 (pair$k ?v1 ?v2 ))false ))false )):named a69 ))
(assert (! (forall ((?v0 A_b_a_b_prod_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 B_a_b_prod_prod$ ))(=> (= ?v0 (pair$l ?v1 ?v2 ))false ))false )):named a70 ))
(assert (! (forall ((?v0 A_b_a_b_prod_prod_prod_bool_fun$ )(?v1 A_b_a_b_prod_prod_prod$ ))(=> (forall ((?v2 A$ )(?v3 B$ )(?v4 A$ )(?v5 B$ ))(fun_app$j ?v0 (pair$l ?v2 (pair$d ?v3 (pair$ ?v4 ?v5 )))))(fun_app$j ?v0 ?v1 ))):named a71 ))
(assert (! (forall ((?v0 A_a_a_b_prod_prod_prod_bool_fun$ )(?v1 A_a_a_b_prod_prod_prod$ ))(=> (forall ((?v2 A$ )(?v3 A$ )(?v4 A$ )(?v5 B$ ))(fun_app$k ?v0 (pair$m ?v2 (pair$e ?v3 (pair$ ?v4 ?v5 )))))(fun_app$k ?v0 ?v1 ))):named a72 ))
(assert (! (forall ((?v0 A_b_a_b_prod_prod_prod_bool_fun$ )(?v1 A_b_a_b_prod_prod_prod$ ))(=> (forall ((?v2 A$ )(?v3 B$ )(?v4 A_b_prod$ ))(fun_app$j ?v0 (pair$l ?v2 (pair$d ?v3 ?v4 ))))(fun_app$j ?v0 ?v1 ))):named a73 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_bool_fun$ )(?v1 A_b_b_prod_prod$ ))(=> (forall ((?v2 A$ )(?v3 B$ )(?v4 B$ ))(fun_app$h ?v0 (pair$f ?v2 (pair$a ?v3 ?v4 ))))(fun_app$h ?v0 ?v1 ))):named a74 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_bool_fun$ )(?v1 A_b_a_prod_prod$ ))(=> (forall ((?v2 A$ )(?v3 B$ )(?v4 A$ ))(fun_app$i ?v0 (pair$g ?v2 (pair$b ?v3 ?v4 ))))(fun_app$i ?v0 ?v1 ))):named a75 ))
(assert (! (forall ((?v0 A_a_a_b_prod_prod_prod_bool_fun$ )(?v1 A_a_a_b_prod_prod_prod$ ))(=> (forall ((?v2 A$ )(?v3 A$ )(?v4 A_b_prod$ ))(fun_app$k ?v0 (pair$m ?v2 (pair$e ?v3 ?v4 ))))(fun_app$k ?v0 ?v1 ))):named a76 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_bool_fun$ )(?v1 A_a_a_prod_prod$ ))(=> (forall ((?v2 A$ )(?v3 A$ )(?v4 A$ ))(fun_app$l ?v0 (pair$k ?v2 (pair$c ?v3 ?v4 ))))(fun_app$l ?v0 ?v1 ))):named a77 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_bool_fun$ )(?v1 B_a_b_prod_prod$ ))(=> (forall ((?v2 B$ )(?v3 A$ )(?v4 B$ ))(fun_app$f ?v0 (pair$d ?v2 (pair$ ?v3 ?v4 ))))(fun_app$f ?v0 ?v1 ))):named a78 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$ )(?v1 A_a_b_prod_prod$ ))(=> (forall ((?v2 A$ )(?v3 A$ )(?v4 B$ ))(fun_app$g ?v0 (pair$e ?v2 (pair$ ?v3 ?v4 ))))(fun_app$g ?v0 ?v1 ))):named a79 ))
(assert (! (forall ((?v0 A_b_prod$ ))(exists ((?v1 A$ )(?v2 B$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a80 ))
(assert (! (forall ((?v0 B_b_prod$ ))(exists ((?v1 B$ )(?v2 B$ ))(= ?v0 (pair$a ?v1 ?v2 )))):named a81 ))
(assert (! (forall ((?v0 B_a_prod$ ))(exists ((?v1 B$ )(?v2 A$ ))(= ?v0 (pair$b ?v1 ?v2 )))):named a82 ))
(assert (! (forall ((?v0 A_a_prod$ ))(exists ((?v1 A$ )(?v2 A$ ))(= ?v0 (pair$c ?v1 ?v2 )))):named a83 ))
(assert (! (forall ((?v0 B_a_b_prod_prod$ ))(exists ((?v1 B$ )(?v2 A_b_prod$ ))(= ?v0 (pair$d ?v1 ?v2 )))):named a84 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ ))(exists ((?v1 A$ )(?v2 A_b_prod$ ))(= ?v0 (pair$e ?v1 ?v2 )))):named a85 ))
(assert (! (forall ((?v0 A_b_b_prod_prod$ ))(exists ((?v1 A$ )(?v2 B_b_prod$ ))(= ?v0 (pair$f ?v1 ?v2 )))):named a86 ))
(assert (! (forall ((?v0 A_b_a_prod_prod$ ))(exists ((?v1 A$ )(?v2 B_a_prod$ ))(= ?v0 (pair$g ?v1 ?v2 )))):named a87 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ ))(exists ((?v1 A$ )(?v2 A_a_prod$ ))(= ?v0 (pair$k ?v1 ?v2 )))):named a88 ))
(assert (! (forall ((?v0 A_b_a_b_prod_prod_prod$ ))(exists ((?v1 A$ )(?v2 B_a_b_prod_prod$ ))(= ?v0 (pair$l ?v1 ?v2 )))):named a89 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a90 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B$ )(?v3 B$ ))(=> (and (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a91 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 B$ )(?v3 A$ ))(=> (and (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a92 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(=> (and (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a93 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_prod$ )(?v2 B$ )(?v3 A_b_prod$ ))(=> (and (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a94 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(=> (and (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a95 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_prod$ )(?v2 A$ )(?v3 B_b_prod$ ))(=> (and (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a96 ))
(assert (! (forall ((?v0 A$ )(?v1 B_a_prod$ )(?v2 A$ )(?v3 B_a_prod$ ))(=> (and (= (pair$g ?v0 ?v1 )(pair$g ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a97 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ )(?v2 A$ )(?v3 A_a_prod$ ))(=> (and (= (pair$k ?v0 ?v1 )(pair$k ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a98 ))
(assert (! (forall ((?v0 A$ )(?v1 B_a_b_prod_prod$ )(?v2 A$ )(?v3 B_a_b_prod_prod$ ))(=> (and (= (pair$l ?v0 ?v1 )(pair$l ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a99 ))
(assert (! (forall ((?v0 A_b_prod$ ))(=> (forall ((?v1 A$ )(?v2 B$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a100 ))
(assert (! (forall ((?v0 B_b_prod$ ))(=> (forall ((?v1 B$ )(?v2 B$ ))(=> (= ?v0 (pair$a ?v1 ?v2 ))false ))false )):named a101 ))
(assert (! (forall ((?v0 B_a_prod$ ))(=> (forall ((?v1 B$ )(?v2 A$ ))(=> (= ?v0 (pair$b ?v1 ?v2 ))false ))false )):named a102 ))
(assert (! (forall ((?v0 A_a_prod$ ))(=> (forall ((?v1 A$ )(?v2 A$ ))(=> (= ?v0 (pair$c ?v1 ?v2 ))false ))false )):named a103 ))
(assert (! (forall ((?v0 B_a_b_prod_prod$ ))(=> (forall ((?v1 B$ )(?v2 A_b_prod$ ))(=> (= ?v0 (pair$d ?v1 ?v2 ))false ))false )):named a104 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 A_b_prod$ ))(=> (= ?v0 (pair$e ?v1 ?v2 ))false ))false )):named a105 ))
(assert (! (forall ((?v0 A_b_b_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 B_b_prod$ ))(=> (= ?v0 (pair$f ?v1 ?v2 ))false ))false )):named a106 ))
(assert (! (forall ((?v0 A_b_a_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 B_a_prod$ ))(=> (= ?v0 (pair$g ?v1 ?v2 ))false ))false )):named a107 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 A_a_prod$ ))(=> (= ?v0 (pair$k ?v1 ?v2 ))false ))false )):named a108 ))
(assert (! (forall ((?v0 A_b_a_b_prod_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 B_a_b_prod_prod$ ))(=> (= ?v0 (pair$l ?v1 ?v2 ))false ))false )):named a109 ))
(check-sat )
;(get-unsat-core )
