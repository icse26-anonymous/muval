;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun n$ ()Enat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(declare-fun gen_llength$ (Nat$ )A_llist_enat_fun$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= n$ (enat$ ?v0 ))thesis$ )):named a1 ))
(assert (! (less$ n$ (llength$ xs$ )):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (the_enat$ (enat$ ?v0 ))?v0 ):pattern ((enat$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (= (llength$ ?v0 )(enat$ ?v1 ))(lfinite$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (gen_llength$ ?v0 )lNil$ )(enat$ ?v0 )):pattern ((gen_llength$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (= (plus$ (enat$ ?v0 )?v1 )(plus$ (enat$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a10 ))
(assert (! (= (lfinite$ lNil$ )true ):named a11 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ )(?v2 Enat$ ))(= (= (plus$ ?v0 (enat$ ?v1 ))(plus$ ?v2 (enat$ ?v1 )))(= ?v0 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less$ (plus$ (enat$ ?v0 )?v1 )(plus$ (enat$ ?v0 )?v2 ))(less$ ?v1 ?v2 ))):named a14 ))
(check-sat )
;(get-unsat-core )
