;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun m$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ldropn$ (Nat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$b (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(declare-fun fun_app$c (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$d (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$e (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun less_eq$a (Nat$ Nat$ )Bool )
(declare-fun gen_llength$ (Nat$ )A_llist_enat_fun$ )
(assert (! (not (= (fun_app$ (ldropn$ m$ )xs$ )lNil$ )):named a0 ))
(assert (! (less_eq$ (llength$ xs$ )(enat$ m$ )):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (= (fun_app$ (ldropn$ ?v0 )?v1 )lNil$ )(less_eq$ (llength$ ?v1 )(enat$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$a (fun_app$b ?v0 ?v3 )?v4 )))(=> (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(fun_app$a (fun_app$b ?v0 ?v2 )?v1 )))(fun_app$a (fun_app$b ?v0 ?v2 )?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (less_eq$a ?v3 ?v4 )(fun_app$c (fun_app$d ?v0 ?v3 )?v4 )))(=> (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(fun_app$c (fun_app$d ?v0 ?v2 )?v1 )))(fun_app$c (fun_app$d ?v0 ?v2 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Enat$ ))(less_eq$ ?v0 ?v0 )):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$a ?v0 ?v0 )):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less_eq$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (= (fun_app$ (ldrop$ ?v0 )?v1 )lNil$ )(less_eq$ (llength$ ?v1 )?v0 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$e (gen_llength$ ?v0 )lNil$ )(enat$ ?v0 )):pattern ((gen_llength$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (ldropn$ ?v0 )?v1 ))(less_eq$ (llength$ ?v1 )(enat$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$f (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= ?v0 ?v1 )(and (less_eq$a ?v0 ?v1 )(less_eq$a ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (=> (less_eq$ ?v0 ?v1 )false )(=> (less_eq$ ?v1 ?v0 )false ))false )):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (less_eq$a ?v0 ?v1 )false )(=> (less_eq$a ?v1 ?v0 )false ))false )):named a17 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$a (fun_app$b ?v0 ?v3 )?v4 )))(forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (fun_app$a (fun_app$b ?v0 ?v4 )?v3 )(fun_app$a (fun_app$b ?v0 ?v3 )?v4 ))))(fun_app$a (fun_app$b ?v0 ?v1 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (less_eq$a ?v3 ?v4 )(fun_app$c (fun_app$d ?v0 ?v3 )?v4 )))(forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$c (fun_app$d ?v0 ?v4 )?v3 )(fun_app$c (fun_app$d ?v0 ?v3 )?v4 ))))(fun_app$c (fun_app$d ?v0 ?v1 )?v2 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less_eq$ (enat$ ?v0 )(enat$ ?v1 ))(less_eq$a ?v0 ?v1 )):pattern ((less_eq$ (enat$ ?v0 )(enat$ ?v1 ))))):named a20 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a21 ))
(check-sat )
;(get-unsat-core )
