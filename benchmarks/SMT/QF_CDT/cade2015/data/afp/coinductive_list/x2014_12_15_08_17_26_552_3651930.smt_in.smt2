;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun y$ ()A$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun less$a (Nat$ )Nat_bool_fun$ )
(declare-fun zero$a ()Enat$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$b (Nat_bool_fun$ Nat$ )Bool )
(declare-fun size_enat$ (Enat$ )Nat$ )
(declare-fun gen_llength$ (Nat$ )A_llist_enat_fun$ )
(assert (! (not (fun_app$ (less$ (enat$ zero$ ))(fun_app$a llength$ xsa$ ))):named a0 ))
(assert (! (= (ldropn$ zero$ xsa$ )(lCons$ y$ ys$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (ldropn$ zero$ ?v0 )?v0 ):pattern ((ldropn$ zero$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a4 ))
(assert (! (not (fun_app$b (less$a zero$ )zero$ )):named a5 ))
(assert (! (= llength$ (gen_llength$ zero$ )):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (size_enat$ (enat$ ?v0 ))zero$ ):pattern ((enat$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (= zero$ zero$ ):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b (less$a ?v0 )zero$ )false ):pattern ((less$a ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (fun_app$b (less$a zero$ )?v0 ))(= ?v0 zero$ ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (= ?v0 zero$ ))(fun_app$b (less$a zero$ )?v0 ))):named a14 ))
(assert (! (forall ((?v0 Enat$ ))(= (fun_app$ (less$ zero$a )?v0 )(not (= ?v0 zero$a )))):named a15 ))
(check-sat )
;(get-unsat-core )
