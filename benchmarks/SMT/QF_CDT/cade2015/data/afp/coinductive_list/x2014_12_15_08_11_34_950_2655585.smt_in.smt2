;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort D_d_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort C_llist_d_fun$ 0 )
(declare-sort D_c_llist_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort D_d_bool_fun_fun$ 0 )
(declare-sort C_c_llist_d_fun_fun$ 0 )
(declare-sort C_llist_c_llist_fun$ 0 )
(declare-sort C_llist_d_d_fun_fun$ 0 )
(declare-sort C_c_llist_d_d_fun_fun_fun$ 0 )
(declare-sort C_llist_c_llist_d_fun_fun$ 0 )
(declare-sort D_c_c_llist_d_fun_fun_fun$ 0 )
(declare-sort D_d_fun_d_c_llist_fun_fun$ 0 )
(declare-sort C_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort C_c_llist_c_llist_d_fun_fun_fun$ 0 )
(declare-sort C_llist_c_c_llist_d_fun_fun_fun$ 0 )
(declare-sort D_c_llist_fun_d_c_llist_fun_fun$ 0 )
(declare-sort C_c_llist_d_fun_fun_c_llist_d_fun_fun$ 0 )
(declare-sort C_llist_d_fun_c_llist_c_llist_fun_fun$ 0 )
(declare-sort C_llist_c_llist_fun_c_llist_c_llist_fun_fun$ 0 )
(declare-sort D_c_c_llist_d_fun_fun_fun_c_llist_d_d_fun_fun_fun$ 0 )
(declare-sort C_llist_c_c_llist_d_fun_fun_fun_c_llist_c_llist_d_fun_fun_fun$ 0 )
(declare-sort C_llist$ 0)
(declare-fun lNil$ ()C_llist$)
(declare-fun lhd$ (C_llist$)C$)
(declare-fun ltl$ (C_llist$)C_llist$)
(declare-fun lCons$ (C$ C_llist$ )C_llist$)
(declare-fun f$ (C$ )C_llist_c_llist_d_fun_fun$ )
(declare-fun uu$ ()C_c_llist_d_fun_fun$ )
(declare-fun bot$ ()D$ )
(declare-fun uua$ (D_c_c_llist_d_fun_fun_fun$ )C_c_llist_d_d_fun_fun_fun$ )
(declare-fun uub$ (D_d_fun$ )D_c_c_llist_d_fun_fun_fun_c_llist_d_d_fun_fun_fun$ )
(declare-fun uuc$ (C_llist_c_c_llist_d_fun_fun_fun$ )C_c_llist_c_llist_d_fun_fun_fun$ )
(declare-fun uud$ (C_llist_d_fun$ )C_llist_c_c_llist_d_fun_fun_fun_c_llist_c_llist_d_fun_fun_fun$ )
(declare-fun uue$ (D_c_llist_fun$ )D_d_fun_d_c_llist_fun_fun$ )
(declare-fun uuf$ (C_llist_c_llist_fun$ )D_c_llist_fun_d_c_llist_fun_fun$ )
(declare-fun uug$ (C_llist_c_llist_fun$ )C_llist_c_llist_fun_c_llist_c_llist_fun_fun$ )
(declare-fun uuh$ (D_c_llist_fun$ )C_llist_d_fun_c_llist_c_llist_fun_fun$ )
(declare-fun fun_app$ (C_llist_d_fun$ C_llist$ )D$ )
(declare-fun less_eq$ ()D_d_bool_fun_fun$ )
(declare-fun lprefix$ ()C_llist_c_llist_bool_fun_fun$ )
(declare-fun fun_app$a (C_c_llist_d_fun_fun$ C$ )C_llist_d_fun$ )
(declare-fun fun_app$b (C_llist_c_llist_d_fun_fun$ C_llist$ )C_llist_d_fun$ )
(declare-fun fun_app$c (C_llist_c_llist_fun$ C_llist$ )C_llist$ )
(declare-fun fun_app$d (C_llist_c_llist_fun_c_llist_c_llist_fun_fun$ C_llist_c_llist_fun$ )C_llist_c_llist_fun$ )
(declare-fun fun_app$e (D_c_llist_fun$ D$ )C_llist$ )
(declare-fun fun_app$f (D_c_llist_fun_d_c_llist_fun_fun$ D_c_llist_fun$ )D_c_llist_fun$ )
(declare-fun fun_app$g (C_llist_d_fun_c_llist_c_llist_fun_fun$ C_llist_d_fun$ )C_llist_c_llist_fun$ )
(declare-fun fun_app$h (D_d_fun_d_c_llist_fun_fun$ D_d_fun$ )D_c_llist_fun$ )
(declare-fun fun_app$i (D_d_fun$ D$ )D$ )
(declare-fun fun_app$j (C_c_llist_c_llist_d_fun_fun_fun$ C$ )C_llist_c_llist_d_fun_fun$ )
(declare-fun fun_app$k (C_llist_c_c_llist_d_fun_fun_fun$ C_llist$ )C_c_llist_d_fun_fun$ )
(declare-fun fun_app$l (C_llist_d_d_fun_fun$ C_llist$ )D_d_fun$ )
(declare-fun fun_app$m (C_c_llist_d_d_fun_fun_fun$ C$ )C_llist_d_d_fun_fun$ )
(declare-fun fun_app$n (D_c_c_llist_d_fun_fun_fun$ D$ )C_c_llist_d_fun_fun$ )
(declare-fun fun_app$o (C_llist_c_c_llist_d_fun_fun_fun_c_llist_c_llist_d_fun_fun_fun$ C_llist_c_c_llist_d_fun_fun_fun$ )C_llist_c_llist_d_fun_fun$ )
(declare-fun fun_app$p (C_c_llist_d_fun_fun_c_llist_d_fun_fun$ C_c_llist_d_fun_fun$ )C_llist_d_fun$ )
(declare-fun fun_app$q (D_c_c_llist_d_fun_fun_fun_c_llist_d_d_fun_fun_fun$ D_c_c_llist_d_fun_fun_fun$ )C_llist_d_d_fun_fun$ )
(declare-fun fun_app$r (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun fun_app$s (C_llist_c_llist_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$t (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$u (D_d_bool_fun_fun$ D$ )D_bool_fun$ )
(declare-fun monotone$ (C_llist_c_llist_bool_fun_fun$ D_d_bool_fun_fun$ C_llist_d_fun$ )Bool )
(declare-fun monotone$a (C_llist_c_llist_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ C_llist_c_llist_fun$ )Bool )
(declare-fun monotone$b (D_d_bool_fun_fun$ D_d_bool_fun_fun$ D_d_fun$ )Bool )
(declare-fun monotone$c (D_d_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ D_c_llist_fun$ )Bool )
(declare-fun case_llist$ (D$ )C_c_llist_d_fun_fun_c_llist_d_fun_fun$ )
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(fun_app$ (fun_app$b (f$ ?v0 )?v1 )(lCons$ ?v0 ?v1 ))):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 C_llist$ ))(! (= (fun_app$c (fun_app$d (uug$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$d (uug$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 D_c_llist_fun$ )(?v2 D$ ))(! (= (fun_app$e (fun_app$f (uuf$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$f (uuf$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 D_c_llist_fun$ )(?v1 C_llist_d_fun$ )(?v2 C_llist$ ))(! (= (fun_app$c (fun_app$g (uuh$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$g (uuh$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 D_c_llist_fun$ )(?v1 D_d_fun$ )(?v2 D$ ))(! (= (fun_app$e (fun_app$h (uue$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$h (uue$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 C_llist_c_c_llist_d_fun_fun_fun$ )(?v1 C$ )(?v2 C_llist$ )(?v3 C_llist$ ))(! (= (fun_app$ (fun_app$b (fun_app$j (uuc$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$a (fun_app$k ?v0 ?v3 )?v1 )?v2 )):pattern ((fun_app$ (fun_app$b (fun_app$j (uuc$ ?v0 )?v1 )?v2 )?v3 )))):named a5 ))
(assert (! (forall ((?v0 D_c_c_llist_d_fun_fun_fun$ )(?v1 C$ )(?v2 C_llist$ )(?v3 D$ ))(! (= (fun_app$i (fun_app$l (fun_app$m (uua$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$a (fun_app$n ?v0 ?v3 )?v1 )?v2 )):pattern ((fun_app$i (fun_app$l (fun_app$m (uua$ ?v0 )?v1 )?v2 )?v3 )))):named a6 ))
(assert (! (forall ((?v0 C_llist_d_fun$ )(?v1 C_llist_c_c_llist_d_fun_fun_fun$ )(?v2 C_llist$ )(?v3 C_llist$ ))(! (= (fun_app$ (fun_app$b (fun_app$o (uud$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$p (case_llist$ (fun_app$ ?v0 ?v3 ))(fun_app$k ?v1 ?v3 ))?v2 )):pattern ((fun_app$ (fun_app$b (fun_app$o (uud$ ?v0 )?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 D_c_c_llist_d_fun_fun_fun$ )(?v2 C_llist$ )(?v3 D$ ))(! (= (fun_app$i (fun_app$l (fun_app$q (uub$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$p (case_llist$ (fun_app$i ?v0 ?v3 ))(fun_app$n ?v1 ?v3 ))?v2 )):pattern ((fun_app$i (fun_app$l (fun_app$q (uub$ ?v0 )?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (not (monotone$ lprefix$ less_eq$ (fun_app$p (case_llist$ bot$ )uu$ ))):named a9 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$r (fun_app$s lprefix$ ?v0 )?v0 )):named a10 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$r (fun_app$s lprefix$ ?v0 )?v0 )):named a11 ))
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ )(?v2 C$ )(?v3 C_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ )(?v2 C$ )(?v3 C_llist$ ))(! (= (fun_app$r (fun_app$s lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$r (fun_app$s lprefix$ ?v1 )?v3 ))):pattern ((fun_app$r (fun_app$s lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a13 ))
(assert (! (forall ((?v0 C$ ))(monotone$ lprefix$ less_eq$ (fun_app$a uu$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ )(?v2 C_llist$ ))(= (fun_app$r (fun_app$s lprefix$ (lCons$ ?v0 ?v1 ))?v2 )(exists ((?v3 C_llist$ ))(and (= ?v2 (lCons$ ?v0 ?v3 ))(fun_app$r (fun_app$s lprefix$ ?v1 )?v3 ))))):named a15 ))
(assert (! (forall ((?v0 D$ )(?v1 C_c_llist_d_fun_fun$ )(?v2 C$ )(?v3 C_llist$ ))(! (= (fun_app$ (fun_app$p (case_llist$ ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(fun_app$ (fun_app$a ?v1 ?v2 )?v3 )):pattern ((fun_app$ (fun_app$p (case_llist$ ?v0 )?v1 )(lCons$ ?v2 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 C_llist_c_llist_fun$ )(?v4 C_llist_c_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 C_llist$ ))(= (fun_app$c ?v0 ?v5 )(ite (fun_app$r (fun_app$s lprefix$ ?v5 )?v1 )?v2 (fun_app$c ?v3 ?v5 ))))(and (forall ((?v5 C_llist$ )(?v6 C_llist$ ))(=> (and (fun_app$r (fun_app$s lprefix$ ?v5 )?v6 )(not (fun_app$r (fun_app$s lprefix$ ?v5 )?v1 )))(fun_app$r (fun_app$s ?v4 (fun_app$c ?v3 ?v5 ))(fun_app$c ?v3 ?v6 ))))(and (forall ((?v5 C_llist$ ))(=> (not (fun_app$r (fun_app$s lprefix$ ?v5 )?v1 ))(fun_app$r (fun_app$s ?v4 ?v2 )(fun_app$c ?v3 ?v5 ))))(fun_app$r (fun_app$s ?v4 ?v2 )?v2 ))))(monotone$a lprefix$ ?v4 ?v0 ))):named a17 ))
(assert (! (forall ((?v0 C_llist_d_fun$ )(?v1 C_llist$ )(?v2 D$ )(?v3 C_llist_d_fun$ )(?v4 D_d_bool_fun_fun$ ))(=> (and (forall ((?v5 C_llist$ ))(= (fun_app$ ?v0 ?v5 )(ite (fun_app$r (fun_app$s lprefix$ ?v5 )?v1 )?v2 (fun_app$ ?v3 ?v5 ))))(and (forall ((?v5 C_llist$ )(?v6 C_llist$ ))(=> (and (fun_app$r (fun_app$s lprefix$ ?v5 )?v6 )(not (fun_app$r (fun_app$s lprefix$ ?v5 )?v1 )))(fun_app$t (fun_app$u ?v4 (fun_app$ ?v3 ?v5 ))(fun_app$ ?v3 ?v6 ))))(and (forall ((?v5 C_llist$ ))(=> (not (fun_app$r (fun_app$s lprefix$ ?v5 )?v1 ))(fun_app$t (fun_app$u ?v4 ?v2 )(fun_app$ ?v3 ?v5 ))))(fun_app$t (fun_app$u ?v4 ?v2 )?v2 ))))(monotone$ lprefix$ ?v4 ?v0 ))):named a18 ))
(assert (! (forall ((?v0 D_d_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 D_d_fun$ )(?v3 D_c_c_llist_d_fun_fun_fun$ )(?v4 C_llist$ ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(forall ((?v5 C$ )(?v6 C_llist$ ))(monotone$b ?v0 ?v1 (fun_app$l (fun_app$m (uua$ ?v3 )?v5 )?v6 ))))(monotone$b ?v0 ?v1 (fun_app$l (fun_app$q (uub$ ?v2 )?v3 )?v4 )))):named a19 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 C_llist_d_fun$ )(?v3 C_llist_c_c_llist_d_fun_fun_fun$ )(?v4 C_llist$ ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(forall ((?v5 C$ )(?v6 C_llist$ ))(monotone$ ?v0 ?v1 (fun_app$b (fun_app$j (uuc$ ?v3 )?v5 )?v6 ))))(monotone$ ?v0 ?v1 (fun_app$b (fun_app$o (uud$ ?v2 )?v3 )?v4 )))):named a20 ))
(assert (! (forall ((?v0 D_d_bool_fun_fun$ )(?v1 D_c_llist_fun$ )(?v2 D_d_bool_fun_fun$ )(?v3 D_d_fun$ ))(=> (and (monotone$c ?v0 lprefix$ ?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$c ?v2 lprefix$ (fun_app$h (uue$ ?v1 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 D_d_bool_fun_fun$ )(?v3 D_c_llist_fun$ ))(=> (and (monotone$a ?v0 lprefix$ ?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$c ?v2 lprefix$ (fun_app$f (uuf$ ?v1 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 C_llist_c_llist_bool_fun_fun$ )(?v3 C_llist_c_llist_fun$ ))(=> (and (monotone$a ?v0 lprefix$ ?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$a ?v2 lprefix$ (fun_app$d (uug$ ?v1 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 D_d_bool_fun_fun$ )(?v1 D_c_llist_fun$ )(?v2 C_llist_c_llist_bool_fun_fun$ )(?v3 C_llist_d_fun$ ))(=> (and (monotone$c ?v0 lprefix$ ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$a ?v2 lprefix$ (fun_app$g (uuh$ ?v1 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(=> (and (fun_app$r (fun_app$s lprefix$ ?v0 )?v1 )(fun_app$r (fun_app$s lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(=> (and (fun_app$r (fun_app$s lprefix$ ?v0 )?v1 )(fun_app$r (fun_app$s lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$r (fun_app$s lprefix$ ?v0 )?v1 )(fun_app$r (fun_app$s lprefix$ ?v2 )?v1 ))(or (fun_app$r (fun_app$s lprefix$ ?v0 )?v2 )(fun_app$r (fun_app$s lprefix$ ?v2 )?v0 )))):named a27 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$r (fun_app$s lprefix$ ?v0 )?v1 )(fun_app$r (fun_app$s lprefix$ ?v1 )?v2 ))(fun_app$r (fun_app$s lprefix$ ?v0 )?v2 ))):named a28 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$r (fun_app$s lprefix$ ?v0 )?v1 )(fun_app$r (fun_app$s lprefix$ ?v1 )?v2 ))(fun_app$r (fun_app$s lprefix$ ?v0 )?v2 ))):named a29 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C$ ))(=> (fun_app$r (fun_app$s lprefix$ ?v0 )?v1 )(fun_app$r (fun_app$s lprefix$ (lCons$ ?v2 ?v0 ))(lCons$ ?v2 ?v1 )))):named a30 ))
(check-sat )
;(get-unsat-core )
