;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_a_llist_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_a_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_llist_set$ 0 )
(declare-sort A_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-fun lNil$d ()A_llist_llist_llist_llist_llist$)
(declare-fun lhd$d (A_llist_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun ltl$d (A_llist_llist_llist_llist_llist$)A_llist_llist_llist_llist_llist$)
(declare-fun lCons$d (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_llist$ )A_llist_llist_llist_llist_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun lmap$ (A_llist_a_llist_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun lset$ (A_llist_llist$ )A_llist_set$ )
(declare-fun image$ (A_llist_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist_set$ )A_llist_llist_llist_set$ )
(declare-fun lmap$a (A_llist_llist_a_fun$ )A_llist_llist_llist_a_llist_fun$ )
(declare-fun lmap$b (A_a_llist_llist_fun$ )A_llist_a_llist_llist_llist_fun$ )
(declare-fun lmap$c (A_llist_llist_llist_a_llist_llist_llist_fun$ )A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ )
(declare-fun lmap$d (A_llist_llist_a_llist_fun$ )A_llist_llist_llist_a_llist_llist_fun$ )
(declare-fun lmap$e (A_llist_a_llist_llist_fun$ )A_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lmap$f (A_llist_a_fun$ )A_llist_llist_a_llist_fun$ )
(declare-fun lmap$g (A_a_llist_fun$ )A_llist_a_llist_llist_fun$ )
(declare-fun lmap$h (A_llist_llist_a_llist_llist_fun$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lmap$i (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmap$j (A_llist_a_llist_llist_llist_fun$ A_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun lmap$k (A_llist_llist_llist_a_llist_fun$ A_llist_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lmap$l (A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ A_llist_llist_llist_llist_llist$ )A_llist_llist_llist_llist_llist$ )
(declare-fun lmap$m (A_llist_llist_llist_a_llist_llist_fun$ A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lmap$n (A_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun lnull$ (A_llist_llist_llist$ )Bool )
(declare-fun lset$a (A_llist_llist_llist$ )A_llist_llist_set$ )
(declare-fun lset$b (A_llist$ )A_set$ )
(declare-fun lset$c (A_llist_llist_llist_llist$ )A_llist_llist_llist_set$ )
(declare-fun finite$ (A_llist_llist_set$ )Bool )
(declare-fun image$a (A_llist_llist_a_llist_fun$ A_llist_llist_set$ )A_llist_set$ )
(declare-fun image$b (A_llist_llist_a_fun$ A_llist_llist_set$ )A_set$ )
(declare-fun image$c (A_llist_a_llist_llist_fun$ A_llist_set$ )A_llist_llist_set$ )
(declare-fun image$d (A_a_llist_llist_fun$ A_set$ )A_llist_llist_set$ )
(declare-fun image$e (A_llist_llist_a_llist_llist_fun$ A_llist_llist_set$ )A_llist_llist_set$ )
(declare-fun image$f (A_a_llist_fun$ A_set$ )A_llist_set$ )
(declare-fun image$g (A_llist_a_fun$ A_llist_set$ )A_set$ )
(declare-fun image$h (A_a_fun$ A_set$ )A_set$ )
(declare-fun image$i (A_llist_a_llist_fun$ A_llist_set$ )A_llist_set$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun lnull$b (A_llist_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun finite$a (A_set$ )Bool )
(declare-fun finite$b (A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist_llist_llist$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (A_llist_llist$ A_llist_llist_llist$ )Bool )
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun member$b (A$ A_set$ )Bool )
(declare-fun member$c (A_llist_llist_llist$ A_llist_llist_llist_set$ )Bool )
(declare-fun fun_app$a (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$b (A_llist_llist_llist_a_llist_fun$ A_llist_llist_llist$ )A_llist$ )
(declare-fun fun_app$c (A_llist_a_llist_llist_llist_fun$ A_llist$ )A_llist_llist_llist$ )
(declare-fun fun_app$d (A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun fun_app$e (A_llist_llist_llist_a_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$f (A_llist_llist_a_llist_llist_llist_fun$ A_llist_llist$ )A_llist_llist_llist$ )
(declare-fun fun_app$g (A_llist_llist_a_llist_fun$ A_llist_llist$ )A_llist$ )
(declare-fun fun_app$h (A_llist_a_llist_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun fun_app$i (A_llist_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun fun_app$j (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$k (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$l (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$m (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$n (A_a_llist_fun$ A$ )A_llist$ )
(declare-fun fun_app$o (A_a_fun$ A$ )A$ )
(declare-fun lappend$a (A_llist_llist$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun lappend$b (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lconcat$a (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun lconcat$c (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lfilter$a (A_llist_bool_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun lfilter$b (A_llist_llist_bool_fun$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lfinite$a (A_llist_llist_llist$ )Bool )
(declare-fun lfinite$b (A_llist_llist_llist_llist$ )Bool )
(declare-fun lfinite$c (A_llist_llist$ )Bool )
(declare-fun lmember$a (A$ )A_llist_bool_fun$ )
(declare-fun lmember$b (A_llist$ )A_llist_llist_bool_fun$ )
(declare-fun ldropWhile$ (A_llist_llist_bool_fun$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun ldropWhile$a (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun ldropWhile$b (A_llist_bool_fun$ )A_llist_llist_a_llist_llist_fun$ )
(assert (! (not (= (fun_app$ (lfilter$ p$ )(lconcat$ xss$ ))(lconcat$ (fun_app$a (lmap$ (lfilter$ p$ ))xss$ )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 (lset$ xss$ ))(lfinite$ ?v0 ))):named a1 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$a (lfilter$a ?v0 )(fun_app$a (lfilter$a ?v0 )?v1 ))(fun_app$a (lfilter$a ?v0 )?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$ (lfilter$ ?v0 )(fun_app$ (lfilter$ ?v0 )?v1 ))(fun_app$ (lfilter$ ?v0 )?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_llist_llist_a_fun$ )(?v1 A_llist_llist_llist$ ))(= (lfinite$ (fun_app$b (lmap$a ?v0 )?v1 ))(lfinite$a ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_a_llist_llist_fun$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$c (lmap$b ?v0 )?v1 ))(lfinite$ ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_llist_llist_llist_a_llist_llist_llist_fun$ )(?v1 A_llist_llist_llist_llist$ ))(= (lfinite$b (fun_app$d (lmap$c ?v0 )?v1 ))(lfinite$b ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (lfinite$c (fun_app$e (lmap$d ?v0 )?v1 ))(lfinite$a ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist_a_llist_llist_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$a (fun_app$f (lmap$e ?v0 )?v1 ))(lfinite$c ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$ (fun_app$g (lmap$f ?v0 )?v1 ))(lfinite$c ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (lfinite$c (fun_app$h (lmap$g ?v0 )?v1 ))(lfinite$ ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (lfinite$a (fun_app$i (lmap$h ?v0 )?v1 ))(lfinite$a ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$ (lmap$i ?v0 )?v1 ))(lfinite$ ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$c (fun_app$a (lmap$ ?v0 )?v1 ))(lfinite$c ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist_llist$ ))(= (= (fun_app$i (lfilter$b ?v0 )?v1 )?v1 )(forall ((?v2 A_llist_llist$ ))(=> (member$a ?v2 (lset$a ?v1 ))(fun_app$j ?v0 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (fun_app$ (lfilter$ ?v0 )?v1 )?v1 )(forall ((?v2 A$ ))(=> (member$b ?v2 (lset$b ?v1 ))(fun_app$k ?v0 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (= (fun_app$a (lfilter$a ?v0 )?v1 )?v1 )(forall ((?v2 A_llist$ ))(=> (member$ ?v2 (lset$ ?v1 ))(fun_app$l ?v0 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_a_llist_llist_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$c (lmap$b ?v0 )(lconcat$ ?v1 ))(lconcat$a (lmap$j (lmap$b ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_llist_a_fun$ )(?v1 A_llist_llist_llist_llist$ ))(= (fun_app$b (lmap$a ?v0 )(lconcat$a ?v1 ))(lconcat$ (lmap$k (lmap$a ?v0 )?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_llist_llist_llist_a_llist_llist_llist_fun$ )(?v1 A_llist_llist_llist_llist_llist$ ))(= (fun_app$d (lmap$c ?v0 )(lconcat$b ?v1 ))(lconcat$b (lmap$l (lmap$c ?v0 )?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_fun$ )(?v1 A_llist_llist_llist_llist$ ))(= (fun_app$e (lmap$d ?v0 )(lconcat$a ?v1 ))(lconcat$c (lmap$m (lmap$d ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_a_llist_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$f (lmap$e ?v0 )(lconcat$c ?v1 ))(lconcat$a (lmap$n (lmap$e ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$h (lmap$g ?v0 )(lconcat$ ?v1 ))(lconcat$c (fun_app$f (lmap$e (lmap$g ?v0 ))?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$g (lmap$f ?v0 )(lconcat$c ?v1 ))(lconcat$ (fun_app$e (lmap$d (lmap$f ?v0 ))?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_fun$ )(?v1 A_llist_llist_llist_llist$ ))(= (fun_app$i (lmap$h ?v0 )(lconcat$a ?v1 ))(lconcat$a (fun_app$d (lmap$c (lmap$h ?v0 ))?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$ (lmap$i ?v0 )(lconcat$ ?v1 ))(lconcat$ (fun_app$a (lmap$ (lmap$i ?v0 ))?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$a (lmap$ ?v0 )(lconcat$c ?v1 ))(lconcat$c (fun_app$i (lmap$h (lmap$ ?v0 ))?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ )(?v2 A_llist_llist_llist_a_llist_llist_llist_fun$ )(?v3 A_llist_llist_llist_a_llist_llist_llist_fun$ ))(=> (and (forall ((?v4 A_llist_llist_llist$ )(?v5 A_llist_llist_llist$ ))(=> (and (member$c ?v4 (lset$c ?v0 ))(and (member$c ?v5 (lset$c ?v1 ))(= (fun_app$i ?v2 ?v4 )(fun_app$i ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$d (lmap$c ?v2 )?v0 )(fun_app$d (lmap$c ?v3 )?v1 )))(= ?v0 ?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_fun$ )(?v3 A_llist_a_fun$ ))(=> (and (forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$m ?v2 ?v4 )(fun_app$m ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$g (lmap$f ?v2 )?v0 )(fun_app$g (lmap$f ?v3 )?v1 )))(= ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_llist_fun$ )(?v3 A_llist_a_llist_llist_fun$ ))(=> (and (forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$h ?v2 ?v4 )(fun_app$h ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$f (lmap$e ?v2 )?v0 )(fun_app$f (lmap$e ?v3 )?v1 )))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_llist_fun$ )(?v3 A_a_llist_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$b ?v4 (lset$b ?v0 ))(and (member$b ?v5 (lset$b ?v1 ))(= (fun_app$n ?v2 ?v4 )(fun_app$n ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$h (lmap$g ?v2 )?v0 )(fun_app$h (lmap$g ?v3 )?v1 )))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_a_llist_fun$ )(?v3 A_llist_llist_a_llist_fun$ ))(=> (and (forall ((?v4 A_llist_llist$ )(?v5 A_llist_llist$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$g ?v2 ?v4 )(fun_app$g ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$e (lmap$d ?v2 )?v0 )(fun_app$e (lmap$d ?v3 )?v1 )))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_a_llist_llist_fun$ )(?v3 A_llist_llist_a_llist_llist_fun$ ))(=> (and (forall ((?v4 A_llist_llist$ )(?v5 A_llist_llist$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$i (lmap$h ?v2 )?v0 )(fun_app$i (lmap$h ?v3 )?v1 )))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$b ?v4 (lset$b ?v0 ))(and (member$b ?v5 (lset$b ?v1 ))(= (fun_app$o ?v2 ?v4 )(fun_app$o ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$ (lmap$i ?v2 )?v0 )(fun_app$ (lmap$i ?v3 )?v1 )))(= ?v0 ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$a (lmap$ ?v2 )?v0 )(fun_app$a (lmap$ ?v3 )?v1 )))(= ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_a_llist_llist_llist_fun$ )(?v2 A_llist_llist_llist_a_llist_llist_llist_fun$ ))(=> (forall ((?v3 A_llist_llist_llist$ ))(=> (member$c ?v3 (lset$c ?v0 ))(= (fun_app$i ?v1 ?v3 )(fun_app$i ?v2 ?v3 ))))(= (fun_app$d (lmap$c ?v1 )?v0 )(fun_app$d (lmap$c ?v2 )?v0 )))):named a35 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_a_fun$ ))(=> (forall ((?v3 A_llist$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$m ?v1 ?v3 )(fun_app$m ?v2 ?v3 ))))(= (fun_app$g (lmap$f ?v1 )?v0 )(fun_app$g (lmap$f ?v2 )?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_llist_llist_fun$ )(?v2 A_llist_a_llist_llist_fun$ ))(=> (forall ((?v3 A_llist$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$h ?v1 ?v3 )(fun_app$h ?v2 ?v3 ))))(= (fun_app$f (lmap$e ?v1 )?v0 )(fun_app$f (lmap$e ?v2 )?v0 )))):named a37 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_fun$ )(?v2 A_a_llist_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$b ?v3 (lset$b ?v0 ))(= (fun_app$n ?v1 ?v3 )(fun_app$n ?v2 ?v3 ))))(= (fun_app$h (lmap$g ?v1 )?v0 )(fun_app$h (lmap$g ?v2 )?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_a_llist_fun$ )(?v2 A_llist_llist_a_llist_fun$ ))(=> (forall ((?v3 A_llist_llist$ ))(=> (member$a ?v3 (lset$a ?v0 ))(= (fun_app$g ?v1 ?v3 )(fun_app$g ?v2 ?v3 ))))(= (fun_app$e (lmap$d ?v1 )?v0 )(fun_app$e (lmap$d ?v2 )?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_a_llist_llist_fun$ )(?v2 A_llist_llist_a_llist_llist_fun$ ))(=> (forall ((?v3 A_llist_llist$ ))(=> (member$a ?v3 (lset$a ?v0 ))(= (fun_app$a ?v1 ?v3 )(fun_app$a ?v2 ?v3 ))))(= (fun_app$i (lmap$h ?v1 )?v0 )(fun_app$i (lmap$h ?v2 )?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$b ?v3 (lset$b ?v0 ))(= (fun_app$o ?v1 ?v3 )(fun_app$o ?v2 ?v3 ))))(= (fun_app$ (lmap$i ?v1 )?v0 )(fun_app$ (lmap$i ?v2 )?v0 )))):named a41 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_a_llist_fun$ ))(=> (forall ((?v3 A_llist$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (fun_app$a (lmap$ ?v1 )?v0 )(fun_app$a (lmap$ ?v2 )?v0 )))):named a42 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_bool_fun$ )(?v3 A_llist_llist_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist_llist$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$j ?v2 ?v4 )(fun_app$j ?v3 ?v4 )))))(= (fun_app$i (lfilter$b ?v2 )?v0 )(fun_app$i (lfilter$b ?v3 )?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$b ?v4 (lset$b ?v1 ))(= (fun_app$k ?v2 ?v4 )(fun_app$k ?v3 ?v4 )))))(= (fun_app$ (lfilter$ ?v2 )?v0 )(fun_app$ (lfilter$ ?v3 )?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_bool_fun$ )(?v3 A_llist_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$l ?v2 ?v4 )(fun_app$l ?v3 ?v4 )))))(= (fun_app$a (lfilter$a ?v2 )?v0 )(fun_app$a (lfilter$a ?v3 )?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ )(?v2 A_llist_llist_llist_a_llist_llist_llist_fun$ )(?v3 A_llist_llist_llist_a_llist_llist_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist_llist_llist$ ))(=> (member$c ?v4 (lset$c ?v1 ))(= (fun_app$i ?v2 ?v4 )(fun_app$i ?v3 ?v4 )))))(= (fun_app$d (lmap$c ?v2 )?v0 )(fun_app$d (lmap$c ?v3 )?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_fun$ )(?v3 A_llist_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$m ?v2 ?v4 )(fun_app$m ?v3 ?v4 )))))(= (fun_app$g (lmap$f ?v2 )?v0 )(fun_app$g (lmap$f ?v3 )?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_llist_fun$ )(?v3 A_llist_a_llist_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$h ?v2 ?v4 )(fun_app$h ?v3 ?v4 )))))(= (fun_app$f (lmap$e ?v2 )?v0 )(fun_app$f (lmap$e ?v3 )?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_llist_fun$ )(?v3 A_a_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$b ?v4 (lset$b ?v1 ))(= (fun_app$n ?v2 ?v4 )(fun_app$n ?v3 ?v4 )))))(= (fun_app$h (lmap$g ?v2 )?v0 )(fun_app$h (lmap$g ?v3 )?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_a_llist_fun$ )(?v3 A_llist_llist_a_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist_llist$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$g ?v2 ?v4 )(fun_app$g ?v3 ?v4 )))))(= (fun_app$e (lmap$d ?v2 )?v0 )(fun_app$e (lmap$d ?v3 )?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_a_llist_llist_fun$ )(?v3 A_llist_llist_a_llist_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist_llist$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (fun_app$i (lmap$h ?v2 )?v0 )(fun_app$i (lmap$h ?v3 )?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$b ?v4 (lset$b ?v1 ))(= (fun_app$o ?v2 ?v4 )(fun_app$o ?v3 ?v4 )))))(= (fun_app$ (lmap$i ?v2 )?v0 )(fun_app$ (lmap$i ?v3 )?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (fun_app$a (lmap$ ?v2 )?v0 )(fun_app$a (lmap$ ?v3 )?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_bool_fun$ ))(=> (lfinite$a ?v0 )(lfinite$a (fun_app$i (lfilter$b ?v1 )?v0 )))):named a54 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_bool_fun$ ))(=> (lfinite$c ?v0 )(lfinite$c (fun_app$a (lfilter$a ?v1 )?v0 )))):named a55 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (lfinite$ ?v0 )(lfinite$ (fun_app$ (lfilter$ ?v1 )?v0 )))):named a56 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (member$a ?v0 (lset$a ?v1 ))(lmember$ ?v0 ?v1 ))):named a57 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$b ?v0 (lset$b ?v1 ))(fun_app$l (lmember$a ?v0 )?v1 ))):named a58 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(fun_app$j (lmember$b ?v0 )?v1 ))):named a59 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_bool_fun$ ))(! (=> (forall ((?v2 A_llist_llist$ ))(=> (member$a ?v2 (lset$a ?v0 ))(not (fun_app$j ?v1 ?v2 ))))(= (fun_app$i (lfilter$b ?v1 )?v0 )lNil$b )):pattern ((fun_app$i (lfilter$b ?v1 )?v0 )))):named a60 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (forall ((?v2 A$ ))(=> (member$b ?v2 (lset$b ?v0 ))(not (fun_app$k ?v1 ?v2 ))))(= (fun_app$ (lfilter$ ?v1 )?v0 )lNil$ )):pattern ((fun_app$ (lfilter$ ?v1 )?v0 )))):named a61 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_bool_fun$ ))(! (=> (forall ((?v2 A_llist$ ))(=> (member$ ?v2 (lset$ ?v0 ))(not (fun_app$l ?v1 ?v2 ))))(= (fun_app$a (lfilter$a ?v1 )?v0 )lNil$a )):pattern ((fun_app$a (lfilter$a ?v1 )?v0 )))):named a62 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist_llist$ ))(= (lnull$ (fun_app$i (lfilter$b ?v0 )?v1 ))(forall ((?v2 A_llist_llist$ ))(=> (member$a ?v2 (lset$a ?v1 ))(not (fun_app$j ?v0 ?v2 )))))):named a63 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$a (fun_app$ (lfilter$ ?v0 )?v1 ))(forall ((?v2 A$ ))(=> (member$b ?v2 (lset$b ?v1 ))(not (fun_app$k ?v0 ?v2 )))))):named a64 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lnull$b (fun_app$a (lfilter$a ?v0 )?v1 ))(forall ((?v2 A_llist$ ))(=> (member$ ?v2 (lset$ ?v1 ))(not (fun_app$l ?v0 ?v2 )))))):named a65 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_bool_fun$ )(?v2 A_llist_llist_llist$ ))(=> (lfinite$a ?v0 )(= (fun_app$i (lfilter$b ?v1 )(fun_app$i (lappend$ ?v0 )?v2 ))(fun_app$i (lappend$ (fun_app$i (lfilter$b ?v1 )?v0 ))(fun_app$i (lfilter$b ?v1 )?v2 ))))):named a66 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist_llist$ ))(=> (lfinite$c ?v0 )(= (fun_app$a (lfilter$a ?v1 )(fun_app$a (lappend$a ?v0 )?v2 ))(fun_app$a (lappend$a (fun_app$a (lfilter$a ?v1 )?v0 ))(fun_app$a (lfilter$a ?v1 )?v2 ))))):named a67 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (lfinite$ ?v0 )(= (fun_app$ (lfilter$ ?v1 )(fun_app$ (lappend$b ?v0 )?v2 ))(fun_app$ (lappend$b (fun_app$ (lfilter$ ?v1 )?v0 ))(fun_app$ (lfilter$ ?v1 )?v2 ))))):named a68 ))
(assert (! (forall ((?v0 A_llist_llist_llist_a_llist_llist_llist_fun$ )(?v1 A_llist_llist_llist_llist$ ))(= (lset$c (fun_app$d (lmap$c ?v0 )?v1 ))(image$ ?v0 (lset$c ?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (lset$ (fun_app$e (lmap$d ?v0 )?v1 ))(image$a ?v0 (lset$a ?v1 )))):named a70 ))
(assert (! (forall ((?v0 A_llist_llist_a_fun$ )(?v1 A_llist_llist_llist$ ))(= (lset$b (fun_app$b (lmap$a ?v0 )?v1 ))(image$b ?v0 (lset$a ?v1 )))):named a71 ))
(assert (! (forall ((?v0 A_llist_a_llist_llist_fun$ )(?v1 A_llist_llist$ ))(= (lset$a (fun_app$f (lmap$e ?v0 )?v1 ))(image$c ?v0 (lset$ ?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_a_llist_llist_fun$ )(?v1 A_llist$ ))(= (lset$a (fun_app$c (lmap$b ?v0 )?v1 ))(image$d ?v0 (lset$b ?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (lset$a (fun_app$i (lmap$h ?v0 )?v1 ))(image$e ?v0 (lset$a ?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (lset$ (fun_app$h (lmap$g ?v0 )?v1 ))(image$f ?v0 (lset$b ?v1 )))):named a75 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (lset$b (fun_app$g (lmap$f ?v0 )?v1 ))(image$g ?v0 (lset$ ?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lset$b (fun_app$ (lmap$i ?v0 )?v1 ))(image$h ?v0 (lset$b ?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (lset$ (fun_app$a (lmap$ ?v0 )?v1 ))(image$i ?v0 (lset$ ?v1 )))):named a78 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist_llist$ ))(= (lfinite$a (fun_app$i (ldropWhile$ ?v0 )?v1 ))(=> (exists ((?v2 A_llist_llist$ ))(and (member$a ?v2 (lset$a ?v1 ))(not (fun_app$j ?v0 ?v2 ))))(lfinite$a ?v1 )))):named a79 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$ (ldropWhile$a ?v0 )?v1 ))(=> (exists ((?v2 A$ ))(and (member$b ?v2 (lset$b ?v1 ))(not (fun_app$k ?v0 ?v2 ))))(lfinite$ ?v1 )))):named a80 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$c (fun_app$a (ldropWhile$b ?v0 )?v1 ))(=> (exists ((?v2 A_llist$ ))(and (member$ ?v2 (lset$ ?v1 ))(not (fun_app$l ?v0 ?v2 ))))(lfinite$c ?v1 )))):named a81 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist_llist$ ))(= (= (fun_app$i (lfilter$b ?v0 )?v1 )lNil$b )(forall ((?v2 A_llist_llist$ ))(=> (member$a ?v2 (lset$a ?v1 ))(not (fun_app$j ?v0 ?v2 )))))):named a82 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (fun_app$ (lfilter$ ?v0 )?v1 )lNil$ )(forall ((?v2 A$ ))(=> (member$b ?v2 (lset$b ?v1 ))(not (fun_app$k ?v0 ?v2 )))))):named a83 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (= (fun_app$a (lfilter$a ?v0 )?v1 )lNil$a )(forall ((?v2 A_llist$ ))(=> (member$ ?v2 (lset$ ?v1 ))(not (fun_app$l ?v0 ?v2 )))))):named a84 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (lfinite$a ?v0 )(finite$ (lset$a ?v0 )))):named a85 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(finite$a (lset$b ?v0 )))):named a86 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (lfinite$c ?v0 )(finite$b (lset$ ?v0 )))):named a87 ))
(check-sat )
;(get-unsat-core )
