;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))(A_llist_list$ (nil$ )(cons$ (hd$ A_llist$ )(tl$ A_llist_list$ )))))
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun n$a ()Nat$ )
(declare-fun n$b ()Nat$ )
(declare-fun na$ ()Nat$ )
(declare-fun uu$ ()Nat_enat_fun$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ (A_llist_llist$ )Nat_enat_fun$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xss$a ()A_llist_list$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun plus$a (Nat$ )Nat_nat_fun$ )
(declare-fun member$ (Enat$ Enat_set$ )Bool )
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$ )Enat$ )
(declare-fun fun_app$ (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun member$a (Nat$ Nat_set$ )Bool )
(declare-fun setsum$a (Nat_nat_fun$ Nat_set$ )Nat$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun llength$a (A_llist_llist$ )Enat$ )
(declare-fun lessThan$a (Enat$ )Enat_set$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(llength$ (lnth$ xssa$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(llength$ (lnth$ ?v0 ?v1 ))):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (exists ((?v0 Nat$ )(?v1 Nat$ ))(and (= (lnth$a (lconcat$ xssa$ )(suc$ na$ ))(lnth$a (lnth$ xssa$ ?v0 )?v1 ))(and (less$ (enat$ ?v1 )(llength$ (lnth$ xssa$ ?v0 )))(and (less$ (enat$ ?v0 )(llength$a xssa$ ))(= (enat$ (suc$ na$ ))(plus$ (setsum$ uu$ (lessThan$ ?v0 ))(enat$ ?v1 )))))))):named a2 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= m$ (suc$ ?v0 ))false ))false ):named a3 ))
(assert (! (= na$ (fun_app$a (plus$a n$ )n$a )):named a4 ))
(assert (! (less$ (enat$ n$b )(llength$ (lconcat$ xss$ ))):named a5 ))
(assert (! (less$ (enat$ (fun_app$a (plus$a m$ )(size$ xss$a )))(llength$a xssa$ )):named a6 ))
(assert (! (less$ (enat$ (suc$ na$ ))(llength$ (lconcat$ xssa$ ))):named a7 ))
(assert (! (less$ (enat$ n$a )(llength$ (lnth$ xssa$ (fun_app$a (plus$a m$ )(size$ xss$a ))))):named a8 ))
(assert (! (= (lnth$a (lconcat$ xssa$ )(suc$ na$ ))(lnth$a (lnth$ xssa$ (fun_app$a (plus$a m$ )(size$ xss$a )))n$a )):named a9 ))
(assert (! (= (enat$ (suc$ na$ ))(plus$ (setsum$ uu$ (lessThan$ (fun_app$a (plus$a m$ )(size$ xss$a ))))(enat$ n$a ))):named a10 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (less$ (enat$ na$ )(llength$ (lconcat$ ?v0 )))(exists ((?v1 Nat$ )(?v2 Nat$ ))(and (= (lnth$a (lconcat$ ?v0 )na$ )(lnth$a (lnth$ ?v0 ?v1 )?v2 ))(and (less$ (enat$ ?v2 )(llength$ (lnth$ ?v0 ?v1 )))(and (less$ (enat$ ?v1 )(llength$a ?v0 ))(= (enat$ na$ )(plus$ (setsum$ (uua$ ?v0 )(lessThan$ ?v1 ))(enat$ ?v2 ))))))))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (setsum$a ?v0 (lessThan$ (suc$ ?v1 )))(fun_app$a (plus$a (setsum$a ?v0 (lessThan$ ?v1 )))(fun_app$a ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ ))(= (setsum$ ?v0 (lessThan$ (suc$ ?v1 )))(plus$ (setsum$ ?v0 (lessThan$ ?v1 ))(fun_app$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less$ (plus$ (enat$ ?v0 )?v1 )(plus$ (enat$ ?v0 )?v2 ))(less$ ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (= (plus$ (enat$ ?v0 )?v1 )(plus$ (enat$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ )(?v2 Enat$ ))(= (= (plus$ ?v0 (enat$ ?v1 ))(plus$ ?v2 (enat$ ?v1 )))(= ?v0 ?v2 ))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (member$ ?v0 (lessThan$a ?v1 ))(less$ ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (member$a ?v0 (lessThan$ ?v1 ))(less$a ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (fun_app$a (plus$a ?v0 )?v1 )(fun_app$a (plus$a ?v2 )?v1 ))(less$a ?v0 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (fun_app$a (plus$a ?v0 )?v1 )(fun_app$a (plus$a ?v0 )?v2 ))(less$a ?v1 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (lessThan$a ?v0 )(lessThan$a ?v1 ))(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (lessThan$ ?v0 )(lessThan$ ?v1 ))(= ?v0 ?v1 ))):named a22 ))
(check-sat )
;(get-unsat-core )
