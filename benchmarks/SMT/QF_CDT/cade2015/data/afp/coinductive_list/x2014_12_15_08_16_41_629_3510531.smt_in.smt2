;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun n$ ()Enat$ )
(declare-fun uu$ (A$ )A_llist_a_llist_fun$ )
(declare-fun uua$ ()A_llist_a_llist_fun$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun lmap$ (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun mcont$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun ldropn$ (Nat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(declare-fun partial_function_definitions$ (A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$ )Bool )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uua$ ?v0 )(ltl$ ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(lCons$ ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (mcont$ lSup$ lprefix$ lSup$ lprefix$ (ldrop$ n$ ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$a (fun_app$b lprefix$ ?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$a (fun_app$b lprefix$ ?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(fun_app$a (fun_app$b lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(fun_app$a (fun_app$b lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(fun_app$a (fun_app$b lprefix$ ?v2 )?v1 ))(or (fun_app$a (fun_app$b lprefix$ ?v0 )?v2 )(fun_app$a (fun_app$b lprefix$ ?v2 )?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(fun_app$a (fun_app$b lprefix$ ?v1 )?v2 ))(fun_app$a (fun_app$b lprefix$ ?v0 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(fun_app$a (fun_app$b lprefix$ ?v1 )?v2 ))(fun_app$a (fun_app$b lprefix$ ?v0 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (lstrict_prefix$ ?v0 ?v1 )(and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((lstrict_prefix$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(mcont$ lSup$ lprefix$ lSup$ lprefix$ (ldropn$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 Enat$ ))(mcont$ lSup$ lprefix$ lSup$ lprefix$ (ltake$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ ))(mcont$ lSup$ lprefix$ lSup$ lprefix$ (lmap$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(mcont$ lSup$ lprefix$ lSup$ lprefix$ (lappend$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_set_a_llist_fun$ )(?v3 A_llist_a_llist_bool_fun_fun$ )(?v4 A_llist_a_llist_fun$ )(?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (mcont$ ?v0 ?v1 ?v2 ?v3 ?v4 )(fun_app$a (fun_app$b ?v1 ?v5 )?v6 ))(fun_app$a (fun_app$b ?v3 (fun_app$ ?v4 ?v5 ))(fun_app$ ?v4 ?v6 )))):named a15 ))
(assert (! (forall ((?v0 A$ ))(mcont$ lSup$ lprefix$ lSup$ lprefix$ (uu$ ?v0 ))):named a16 ))
(assert (! (mcont$ lSup$ lprefix$ lSup$ lprefix$ uua$ ):named a17 ))
(assert (! (partial_function_definitions$ lprefix$ lSup$ ):named a18 ))
(assert (! (forall ((?v0 Enat$ ))(monotone$ lprefix$ lprefix$ (ldrop$ ?v0 ))):named a19 ))
(check-sat )
;(get-unsat-core )
