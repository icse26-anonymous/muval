;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_set_set$ 0 )
(declare-sort Enat_nat_fun$ 0 )
(declare-sort Enat_set_set$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort Nat_nat_set_fun$ 0 )
(declare-sort Nat_set_nat_fun$ 0 )
(declare-sort Nat_set_set_set$ 0 )
(declare-sort Enat_nat_set_fun$ 0 )
(declare-sort Enat_set_set_set$ 0 )
(declare-sort Nat_set_enat_fun$ 0 )
(declare-sort Enat_set_enat_fun$ 0 )
(declare-sort Nat_set_nat_set_fun$ 0 )
(declare-sort Nat_set_set_set_set$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun uu$ ()Enat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun sup$ ()Enat_set_enat_fun$ )
(declare-fun top$ ()Nat_set$ )
(declare-fun enat$ ()Nat_enat_fun$ )
(declare-fun sup$a (Nat_set_set_set_set$ )Nat_set_set_set$ )
(declare-fun sup$b (Enat_set_set_set$ )Enat_set_set$ )
(declare-fun sup$c (Enat_set_set$ )Enat_set$ )
(declare-fun sup$d (Nat_set_set_set$ )Nat_set_set$ )
(declare-fun sup$e (Nat_set_set$ )Nat_set$ )
(declare-fun top$a ()Nat_set_set_set_set$ )
(declare-fun top$b ()Nat_set_set_set$ )
(declare-fun top$c ()Enat_set_set_set$ )
(declare-fun top$d ()Enat_set_set$ )
(declare-fun top$e ()Enat_set$ )
(declare-fun top$f ()Nat_set_set$ )
(declare-fun top$g ()Enat$ )
(declare-fun image$ (Nat_enat_fun$ Nat_set$ )Enat_set$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun image$a (Nat_nat_set_fun$ Nat_set$ )Nat_set_set$ )
(declare-fun image$b (Enat_nat_set_fun$ Enat_set$ )Nat_set_set$ )
(declare-fun image$c (Nat_set_nat_fun$ Nat_set_set$ )Nat_set$ )
(declare-fun image$d (Nat_set_enat_fun$ Nat_set_set$ )Enat_set$ )
(declare-fun image$e (Nat_set_nat_set_fun$ Nat_set_set$ )Nat_set_set$ )
(declare-fun image$f (Nat_nat_fun$ )Nat_set_nat_set_fun$ )
(declare-fun image$g (Enat_nat_fun$ Enat_set$ )Nat_set$ )
(declare-fun image$h (Enat_enat_fun$ Enat_set$ )Enat_set$ )
(declare-fun member$ (Nat_set_set$ Nat_set_set_set$ )Bool )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun less_eq$ ()Enat_enat_bool_fun_fun$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun member$a (Enat_set$ Enat_set_set$ )Bool )
(declare-fun member$b (Enat$ Enat_set$ )Bool )
(declare-fun member$c (Nat_set$ Nat_set_set$ )Bool )
(declare-fun member$d (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$a (Enat_set_enat_fun$ Enat_set$ )Enat$ )
(declare-fun fun_app$b (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun fun_app$c (Nat_nat_set_fun$ Nat$ )Nat_set$ )
(declare-fun fun_app$d (Enat_nat_set_fun$ Enat$ )Nat_set$ )
(declare-fun fun_app$e (Nat_set_nat_fun$ Nat_set$ )Nat$ )
(declare-fun fun_app$f (Nat_set_enat_fun$ Nat_set$ )Enat$ )
(declare-fun fun_app$g (Nat_set_nat_set_fun$ Nat_set$ )Nat_set$ )
(declare-fun fun_app$h (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$i (Enat_nat_fun$ Enat$ )Nat$ )
(declare-fun fun_app$j (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun admissible$ (Enat_set_enat_fun$ Enat_enat_bool_fun_fun$ Enat_bool_fun$ )Bool )
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uu$ ?v0 )(lprefix$ (ltake$ ?v0 xs$ )(ltake$ ?v0 ys$ ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (lprefix$ (ltake$ (fun_app$a sup$ (image$ enat$ top$ ))xs$ )(ltake$ (fun_app$a sup$ (image$ enat$ top$ ))ys$ ))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$ (ltake$ ?v0 ?v1 )?v1 )):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(lprefix$ (ltake$ (fun_app$b enat$ ?v0 )xs$ )(ltake$ (fun_app$b enat$ ?v0 )ys$ ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (fun_app$b enat$ ?v2 )?v0 )(ltake$ (fun_app$b enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v2 ?v1 ))(or (lprefix$ ?v0 ?v2 )(lprefix$ ?v2 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v2 ))(lprefix$ ?v0 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v2 ))(lprefix$ ?v0 ?v2 ))):named a11 ))
(assert (! (= (sup$a top$a )top$b ):named a12 ))
(assert (! (= (sup$b top$c )top$d ):named a13 ))
(assert (! (= (sup$c top$d )top$e ):named a14 ))
(assert (! (= (sup$d top$b )top$f ):named a15 ))
(assert (! (= (sup$e top$f )top$ ):named a16 ))
(assert (! (= (fun_app$a sup$ top$e )top$g ):named a17 ))
(assert (! (admissible$ sup$ less_eq$ uu$ ):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$b enat$ ?v0 )(fun_app$b enat$ ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Nat_set_set$ ))(= (member$ ?v0 top$b )true )):named a20 ))
(assert (! (forall ((?v0 Enat_set$ ))(= (member$a ?v0 top$d )true )):named a21 ))
(assert (! (forall ((?v0 Enat$ ))(= (member$b ?v0 top$e )true )):named a22 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (member$c ?v0 top$f )true )):named a23 ))
(assert (! (forall ((?v0 Nat$ ))(= (member$d ?v0 top$ )true )):named a24 ))
(assert (! (forall ((?v0 Nat_set_set$ ))(member$ ?v0 top$b )):named a25 ))
(assert (! (forall ((?v0 Enat_set$ ))(member$a ?v0 top$d )):named a26 ))
(assert (! (forall ((?v0 Enat$ ))(member$b ?v0 top$e )):named a27 ))
(assert (! (forall ((?v0 Nat_set$ ))(member$c ?v0 top$f )):named a28 ))
(assert (! (forall ((?v0 Nat$ ))(member$d ?v0 top$ )):named a29 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_nat_set_fun$ )(?v2 Nat$ )(?v3 Nat_set$ ))(=> (and (= ?v0 (fun_app$c ?v1 ?v2 ))(member$d ?v2 ?v3 ))(member$c ?v0 (image$a ?v1 ?v3 )))):named a30 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Enat_nat_set_fun$ )(?v2 Enat$ )(?v3 Enat_set$ ))(=> (and (= ?v0 (fun_app$d ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$c ?v0 (image$b ?v1 ?v3 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set_nat_fun$ )(?v2 Nat_set$ )(?v3 Nat_set_set$ ))(=> (and (= ?v0 (fun_app$e ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$d ?v0 (image$c ?v1 ?v3 )))):named a32 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_set_enat_fun$ )(?v2 Nat_set$ )(?v3 Nat_set_set$ ))(=> (and (= ?v0 (fun_app$f ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$b ?v0 (image$d ?v1 ?v3 )))):named a33 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set_nat_set_fun$ )(?v2 Nat_set$ )(?v3 Nat_set_set$ ))(=> (and (= ?v0 (fun_app$g ?v1 ?v2 ))(member$c ?v2 ?v3 ))(member$c ?v0 (image$e ?v1 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat_set$ ))(=> (and (= ?v0 (fun_app$h ?v1 ?v2 ))(member$d ?v2 ?v3 ))(member$d ?v0 (fun_app$g (image$f ?v1 )?v3 )))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat_nat_fun$ )(?v2 Enat$ )(?v3 Enat_set$ ))(=> (and (= ?v0 (fun_app$i ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$d ?v0 (image$g ?v1 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_enat_fun$ )(?v2 Enat$ )(?v3 Enat_set$ ))(=> (and (= ?v0 (fun_app$j ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (image$h ?v1 ?v3 )))):named a37 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_enat_fun$ )(?v2 Nat$ )(?v3 Nat_set$ ))(=> (and (= ?v0 (fun_app$b ?v1 ?v2 ))(member$d ?v2 ?v3 ))(member$b ?v0 (image$ ?v1 ?v3 )))):named a38 ))
(check-sat )
;(get-unsat-core )
