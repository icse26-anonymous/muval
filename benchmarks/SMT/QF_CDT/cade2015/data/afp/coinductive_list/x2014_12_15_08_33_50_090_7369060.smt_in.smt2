;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_a_prod_prod_a_a_a_prod_prod_fun$ 0 )
(declare-sort A_a_prod_a_prod_a_a_prod_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-datatypes ()((A_a_prod$ (pair$ (fst$ A$ )(snd$ A$ )))(A_a_prod_a_a_prod_prod$ (pair$a (fst$a A_a_prod$ )(snd$a A_a_prod$ )))))
(declare-sort A_a_prod_a_a_prod_prod_llist$ 0)
(declare-fun lNil$b ()A_a_prod_a_a_prod_prod_llist$)
(declare-fun lhd$b (A_a_prod_a_a_prod_prod_llist$)A_a_prod_a_a_prod_prod$)
(declare-fun ltl$b (A_a_prod_a_a_prod_prod_llist$)A_a_prod_a_a_prod_prod_llist$)
(declare-fun lCons$b (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$ )(snd$b A$ )))))
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$c ()A_a_prod_a_prod_llist$)
(declare-fun lhd$c (A_a_prod_a_prod_llist$)A_a_prod_a_prod$)
(declare-fun ltl$c (A_a_prod_a_prod_llist$)A_a_prod_a_prod_llist$)
(declare-fun lCons$c (A_a_prod_a_prod$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod$ (pair$c (fst$c A$ )(snd$c A_a_prod$ )))))
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$d ()A_a_a_prod_prod_llist$)
(declare-fun lhd$d (A_a_a_prod_prod_llist$)A_a_a_prod_prod$)
(declare-fun ltl$d (A_a_a_prod_prod_llist$)A_a_a_prod_prod_llist$)
(declare-fun lCons$d (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$)
(declare-fun lNil$e ()A_a_prod_llist$)
(declare-fun lhd$e (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$e (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$e (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_a_prod_prod$ (pair$d (fst$d A$ )(snd$d A_a_prod_a_prod$ )))))
(declare-sort A_a_a_prod_a_prod_prod_llist$ 0)
(declare-fun lNil$f ()A_a_a_prod_a_prod_prod_llist$)
(declare-fun lhd$f (A_a_a_prod_a_prod_prod_llist$)A_a_a_prod_a_prod_prod$)
(declare-fun ltl$f (A_a_a_prod_a_prod_prod_llist$)A_a_a_prod_a_prod_prod_llist$)
(declare-fun lCons$f (A_a_a_prod_a_prod_prod$ A_a_a_prod_a_prod_prod_llist$ )A_a_a_prod_a_prod_prod_llist$)
(declare-datatypes ()((A_a_a_a_prod_prod_prod$ (pair$e (fst$e A$ )(snd$e A_a_a_prod_prod$ )))))
(declare-sort A_a_a_a_prod_prod_prod_llist$ 0)
(declare-fun lNil$g ()A_a_a_a_prod_prod_prod_llist$)
(declare-fun lhd$g (A_a_a_a_prod_prod_prod_llist$)A_a_a_a_prod_prod_prod$)
(declare-fun ltl$g (A_a_a_a_prod_prod_prod_llist$)A_a_a_a_prod_prod_prod_llist$)
(declare-fun lCons$g (A_a_a_a_prod_prod_prod$ A_a_a_a_prod_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_prod_a_prod$ (pair$f (fst$f A_a_prod_a_prod$ )(snd$f A$ )))))
(declare-sort A_a_prod_a_prod_a_prod_llist$ 0)
(declare-fun lNil$h ()A_a_prod_a_prod_a_prod_llist$)
(declare-fun lhd$h (A_a_prod_a_prod_a_prod_llist$)A_a_prod_a_prod_a_prod$)
(declare-fun ltl$h (A_a_prod_a_prod_a_prod_llist$)A_a_prod_a_prod_a_prod_llist$)
(declare-fun lCons$h (A_a_prod_a_prod_a_prod$ A_a_prod_a_prod_a_prod_llist$ )A_a_prod_a_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod_a_prod$ (pair$g (fst$g A_a_a_prod_prod$ )(snd$g A$ )))))
(declare-sort A_a_a_prod_prod_a_prod_llist$ 0)
(declare-fun lNil$i ()A_a_a_prod_prod_a_prod_llist$)
(declare-fun lhd$i (A_a_a_prod_prod_a_prod_llist$)A_a_a_prod_prod_a_prod$)
(declare-fun ltl$i (A_a_a_prod_prod_a_prod_llist$)A_a_a_prod_prod_a_prod_llist$)
(declare-fun lCons$i (A_a_a_prod_prod_a_prod$ A_a_a_prod_prod_a_prod_llist$ )A_a_a_prod_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_a_a_prod_prod_prod$ (pair$h (fst$h A$ )(snd$h A_a_prod_a_a_prod_prod$ )))))
(declare-sort A_a_a_prod_a_a_prod_prod_prod_llist$ 0)
(declare-fun lNil$j ()A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lhd$j (A_a_a_prod_a_a_prod_prod_prod_llist$)A_a_a_prod_a_a_prod_prod_prod$)
(declare-fun ltl$j (A_a_a_prod_a_a_prod_prod_prod_llist$)A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lCons$j (A_a_a_prod_a_a_prod_prod_prod$ A_a_a_prod_a_a_prod_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_a_prod_a_prod_prod$ (pair$i (fst$i A_a_prod$ )(snd$i A_a_prod_a_prod$ )))))
(declare-sort A_a_prod_a_a_prod_a_prod_prod_llist$ 0)
(declare-fun lNil$k ()A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun lhd$k (A_a_prod_a_a_prod_a_prod_prod_llist$)A_a_prod_a_a_prod_a_prod_prod$)
(declare-fun ltl$k (A_a_prod_a_a_prod_a_prod_prod_llist$)A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun lCons$k (A_a_prod_a_a_prod_a_prod_prod$ A_a_prod_a_a_prod_a_prod_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_a_prod_prod_list$ (nil$ )(cons$ (hd$ A_a_prod_a_a_prod_prod$ )(tl$ A_a_prod_a_a_prod_prod_list$ )))(A_a_prod_a_prod_list$ (nil$a )(cons$a (hd$a A_a_prod_a_prod$ )(tl$a A_a_prod_a_prod_list$ )))(A_a_a_prod_prod_list$ (nil$b )(cons$b (hd$b A_a_a_prod_prod$ )(tl$b A_a_a_prod_prod_list$ )))(A_a_prod_list$ (nil$c )(cons$c (hd$c A_a_prod$ )(tl$c A_a_prod_list$ )))(A_list$ (nil$d )(cons$d (hd$d A$ )(tl$d A_list$ )))))
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun lset$ (A_llist_llist$ )A_llist_set$ )
(declare-fun lzip$ (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lzip$a (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$b (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$ )A_a_a_prod_a_prod_prod_llist$ )
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$ )A_a_prod_a_prod_a_prod_llist$ )
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$ )A_a_a_prod_prod_a_prod_llist$ )
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$ )
(declare-fun ldropn$ (Nat$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lnull$a (A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun lnull$b (A_a_prod_a_prod_llist$ )Bool )
(declare-fun lnull$c (A_a_a_prod_prod_llist$ )Bool )
(declare-fun lnull$d (A_a_prod_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun lappend$ (A_a_prod_a_a_prod_prod_llist$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun ldropn$a (Nat$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun ldropn$b (Nat$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun ldropn$c (Nat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ldropn$d (Nat$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun iterates$ (A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ A_a_prod_a_a_prod_prod$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lappend$a (A_a_prod_a_prod_llist$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lappend$b (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lappend$c (A_a_prod_llist$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun lappend$d (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$a (A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$b (A_a_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$c (A_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$d (A_a_prod_llist$ )Bool )
(declare-fun lfinite$e (A_a_a_prod_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$f (A_a_a_a_prod_prod_prod_llist$ )Bool )
(declare-fun lfinite$g (A_a_prod_a_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$h (A_a_a_prod_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$i (A_a_a_prod_a_a_prod_prod_prod_llist$ )Bool )
(declare-fun lfinite$j (A_a_prod_a_a_prod_a_prod_prod_llist$ )Bool )
(declare-fun llist_of$ (A_a_prod_a_a_prod_prod_list$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun iterates$a (A_a_prod_a_prod_a_a_prod_a_prod_fun$ A_a_prod_a_prod$ )A_a_prod_a_prod_llist$ )
(declare-fun iterates$b (A_a_a_prod_prod_a_a_a_prod_prod_fun$ A_a_a_prod_prod$ )A_a_a_prod_prod_llist$ )
(declare-fun iterates$c (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod_llist$ )
(declare-fun iterates$d (A_a_fun$ A$ )A_llist$ )
(declare-fun llist_of$a (A_a_prod_a_prod_list$ )A_a_prod_a_prod_llist$ )
(declare-fun llist_of$b (A_a_a_prod_prod_list$ )A_a_a_prod_prod_llist$ )
(declare-fun llist_of$c (A_a_prod_list$ )A_a_prod_llist$ )
(declare-fun llist_of$d (A_list$ )A_llist$ )
(declare-fun lstrict_prefix$ (A_a_prod_a_a_prod_prod_llist$ A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_a_prod_a_prod_llist$ A_a_prod_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$b (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$c (A_a_prod_llist$ A_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$d (A_llist$ A_llist$ )Bool )
(assert (! (not (lfinite$ (lconcat$ xssa$ ))):named a0 ))
(assert (! (lnull$ (lconcat$ xssa$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 (lset$ xssa$ ))(lfinite$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ ))(=> (lnull$a ?v0 )(lfinite$a ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ ))(=> (lnull$b ?v0 )(lfinite$b ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(=> (lnull$c ?v0 )(lfinite$c ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(=> (lnull$d ?v0 )(lfinite$d ?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(lfinite$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 (lset$ xss$ ))(lfinite$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$a ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ )(?v1 A_a_prod_a_prod_llist$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lfinite$b ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_a_a_prod_prod_llist$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lfinite$c ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(=> (lstrict_prefix$c ?v0 ?v1 )(lfinite$d ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$d ?v0 ?v1 )(lfinite$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(= (lfinite$a (ldropn$ ?v0 ?v1 ))(lfinite$a ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_prod_llist$ ))(= (lfinite$b (ldropn$a ?v0 ?v1 ))(lfinite$b ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_prod_llist$ ))(= (lfinite$c (ldropn$b ?v0 ?v1 ))(lfinite$c ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ ))(= (lfinite$d (ldropn$c ?v0 ?v1 ))(lfinite$d ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$d ?v0 ?v1 ))(lfinite$ ?v1 ))):named a18 ))
(assert (! (= (lfinite$a lNil$b )true ):named a19 ))
(assert (! (= (lfinite$b lNil$c )true ):named a20 ))
(assert (! (= (lfinite$c lNil$d )true ):named a21 ))
(assert (! (= (lfinite$d lNil$e )true ):named a22 ))
(assert (! (= (lfinite$ lNil$ )true ):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$d (lzip$ ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$c (lzip$a ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$d ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$b (lzip$b ?v0 ?v1 ))(or (lfinite$d ?v0 )(lfinite$ ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$a (lzip$c ?v0 ?v1 ))(or (lfinite$d ?v0 )(lfinite$d ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_a_prod_llist$ ))(= (lfinite$e (lzip$d ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$b ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_a_prod_prod_llist$ ))(= (lfinite$f (lzip$e ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$c ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$g (lzip$f ?v0 ?v1 ))(or (lfinite$b ?v0 )(lfinite$ ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$h (lzip$g ?v0 ?v1 ))(or (lfinite$c ?v0 )(lfinite$ ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(= (lfinite$i (lzip$h ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$a ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_a_prod_llist$ ))(= (lfinite$j (lzip$i ?v0 ?v1 ))(or (lfinite$d ?v0 )(lfinite$b ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ )(?v1 A_a_prod_a_a_prod_prod$ ))(not (lfinite$a (iterates$ ?v0 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_a_a_prod_a_prod_fun$ )(?v1 A_a_prod_a_prod$ ))(not (lfinite$b (iterates$a ?v0 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_a_a_a_prod_prod_fun$ )(?v1 A_a_a_prod_prod$ ))(not (lfinite$c (iterates$b ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod$ ))(not (lfinite$d (iterates$c ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(not (lfinite$ (iterates$d ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(! (= (lfinite$a (lCons$b ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_a_prod_a_prod$ )(?v1 A_a_prod_a_prod_llist$ ))(! (= (lfinite$b (lCons$c ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$c ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ ))(! (= (lfinite$c (lCons$d ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$d ?v0 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (lfinite$d (lCons$e ?v0 ?v1 ))(lfinite$d ?v1 )):pattern ((lCons$e ?v0 ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(! (= (lfinite$a (lCons$b ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_a_prod_a_prod$ )(?v1 A_a_prod_a_prod_llist$ ))(! (= (lfinite$b (lCons$c ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$c ?v0 ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ ))(! (= (lfinite$c (lCons$d ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$d ?v0 ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (lfinite$d (lCons$e ?v0 ?v1 ))(lfinite$d ?v1 )):pattern ((lCons$e ?v0 ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ ))(= (lfinite$a (ltl$b ?v0 ))(lfinite$a ?v0 ))):named a49 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ ))(= (lfinite$b (ltl$c ?v0 ))(lfinite$b ?v0 ))):named a50 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(= (lfinite$c (ltl$d ?v0 ))(lfinite$c ?v0 ))):named a51 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(= (lfinite$d (ltl$e ?v0 ))(lfinite$d ?v0 ))):named a52 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a53 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(= (lfinite$a (lappend$ ?v0 ?v1 ))(and (lfinite$a ?v0 )(lfinite$a ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ )(?v1 A_a_prod_a_prod_llist$ ))(= (lfinite$b (lappend$a ?v0 ?v1 ))(and (lfinite$b ?v0 )(lfinite$b ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_a_a_prod_prod_llist$ ))(= (lfinite$c (lappend$b ?v0 ?v1 ))(and (lfinite$c ?v0 )(lfinite$c ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$d (lappend$c ?v0 ?v1 ))(and (lfinite$d ?v0 )(lfinite$d ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lappend$d ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_list$ ))(lfinite$a (llist_of$ ?v0 ))):named a59 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_list$ ))(lfinite$b (llist_of$a ?v0 ))):named a60 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$ ))(lfinite$c (llist_of$b ?v0 ))):named a61 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(lfinite$d (llist_of$c ?v0 ))):named a62 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$d ?v0 ))):named a63 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(= (= (lCons$e ?v0 ?v1 )(lCons$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a64 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a65 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list$ ))(= (= (llist_of$c ?v0 )(llist_of$c ?v1 ))(= ?v0 ?v1 ))):named a66 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$d ?v0 )(llist_of$d ?v1 ))(= ?v0 ?v1 ))):named a67 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_llist$ ))(! (= (lappend$c (lCons$e ?v0 ?v1 )?v2 )(lCons$e ?v0 (lappend$c ?v1 ?v2 ))):pattern ((lappend$c (lCons$e ?v0 ?v1 )?v2 )))):named a68 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$d (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$d ?v1 ?v2 ))):pattern ((lappend$d (lCons$ ?v0 ?v1 )?v2 )))):named a69 ))
(check-sat )
;(get-unsat-core )
