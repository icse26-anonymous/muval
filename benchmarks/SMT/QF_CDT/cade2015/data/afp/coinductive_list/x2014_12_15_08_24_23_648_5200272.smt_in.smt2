;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_c_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_c_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort C_a_bool_fun_fun$ 0 )
(declare-sort C_b_bool_fun_fun$ 0 )
(declare-sort C_c_bool_fun_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-sort C_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun lNil$b ()C_llist$)
(declare-fun lhd$b (C_llist$)C$)
(declare-fun ltl$b (C_llist$)C_llist$)
(declare-fun lCons$b (C$ C_llist$ )C_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun f$ ()C_a_fun$ )
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()C_b_bool_fun_fun$ )
(declare-fun xs$ ()C_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()C_c_fun$ )
(declare-fun uub$ ()A_a_fun$ )
(declare-fun uuc$ ()B_b_fun$ )
(declare-fun uud$ (A_b_bool_fun_fun$ A_a_fun$ )A_b_bool_fun_fun$ )
(declare-fun uue$ (A_b_bool_fun_fun$ C_a_fun$ )C_b_bool_fun_fun$ )
(declare-fun uuf$ (C_b_bool_fun_fun$ A_c_fun$ )A_b_bool_fun_fun$ )
(declare-fun uug$ (C_b_bool_fun_fun$ C_c_fun$ )C_b_bool_fun_fun$ )
(declare-fun uuh$ (C_c_bool_fun_fun$ B_c_fun$ )B_c_bool_fun_fun$ )
(declare-fun uui$ (C_a_bool_fun_fun$ B_c_fun$ )B_a_bool_fun_fun$ )
(declare-fun uuj$ (C_c_bool_fun_fun$ A_c_fun$ )A_c_bool_fun_fun$ )
(declare-fun uuk$ (C_a_bool_fun_fun$ A_c_fun$ )A_a_bool_fun_fun$ )
(declare-fun uul$ (A_b_bool_fun_fun$ B_a_fun$ )B_b_bool_fun_fun$ )
(declare-fun uum$ (C_b_bool_fun_fun$ B_c_fun$ )B_b_bool_fun_fun$ )
(declare-fun uun$ (A_b_bool_fun_fun$ B_b_fun$ )A_b_bool_fun_fun$ )
(declare-fun uuo$ (C_b_bool_fun_fun$ B_b_fun$ )C_b_bool_fun_fun$ )
(declare-fun uup$ (C_a_bool_fun_fun$ B_a_fun$ )C_b_bool_fun_fun$ )
(declare-fun uuq$ (C_c_bool_fun_fun$ B_c_fun$ )C_b_bool_fun_fun$ )
(declare-fun uur$ (A_b_bool_fun_fun$ C_b_fun$ )A_c_bool_fun_fun$ )
(declare-fun uus$ (A_b_bool_fun_fun$ A_b_fun$ )A_a_bool_fun_fun$ )
(declare-fun uut$ (C_b_bool_fun_fun$ A_b_fun$ )C_a_bool_fun_fun$ )
(declare-fun uuu$ (C_b_bool_fun_fun$ C_b_fun$ )C_c_bool_fun_fun$ )
(declare-fun uuv$ (B_c_bool_fun_fun$ C_c_fun$ )B_c_bool_fun_fun$ )
(declare-fun uuw$ (B_c_bool_fun_fun$ B_c_fun$ )B_b_bool_fun_fun$ )
(declare-fun uux$ ()B_b_bool_fun_fun$ )
(declare-fun uuy$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uuz$ ()A_a_bool_fun_fun$ )
(declare-fun uva$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun uvb$ ()C_c_bool_fun_fun$ )
(declare-fun uvc$ ()C_a_bool_fun_fun$ )
(declare-fun uvd$ ()B_c_bool_fun_fun$ )
(declare-fun uve$ ()B_b_bool_fun_fun$ )
(declare-fun uvf$ ()B_a_bool_fun_fun$ )
(declare-fun uvg$ ()A_c_bool_fun_fun$ )
(declare-fun uvh$ ()A_a_bool_fun_fun$ )
(declare-fun uvi$ ()A_b_bool_fun_fun$ )
(declare-fun uvj$ ()C_b_bool_fun_fun$ )
(declare-fun lmap$ (C_a_fun$ C_llist$ )A_llist$ )
(declare-fun ldrop$ (Enat$ B_llist$ )B_llist$ )
(declare-fun lmap$a (C_c_fun$ C_llist$ )C_llist$ )
(declare-fun lmap$b (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$d (A_c_fun$ A_llist$ )C_llist$ )
(declare-fun lmap$e (B_c_fun$ B_llist$ )C_llist$ )
(declare-fun lmap$f (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$g (C_b_fun$ C_llist$ )B_llist$ )
(declare-fun lmap$h (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun ltake$ (Enat$ C_llist$ )C_llist$ )
(declare-fun ldrop$a (Enat$ A_llist$ )A_llist$ )
(declare-fun ldrop$b (Enat$ C_llist$ )C_llist$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun lnull$b (C_llist$ )Bool )
(declare-fun ltake$a (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$b (Enat$ B_llist$ )B_llist$ )
(declare-fun fun_app$ (C_b_bool_fun_fun$ C$ )B_bool_fun$ )
(declare-fun ldropn$a (Nat$ B_llist$ )B_llist$ )
(declare-fun ldropn$b (Nat$ C_llist$ )C_llist$ )
(declare-fun llength$ (C_llist$ )Enat$ )
(declare-fun fun_app$a (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$b (C_a_fun$ C$ )A$ )
(declare-fun fun_app$c (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$d (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$f (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$g (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$h (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$i (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$j (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$k (B_c_bool_fun_fun$ B$ )C_bool_fun$ )
(declare-fun fun_app$l (C_c_bool_fun_fun$ C$ )C_bool_fun$ )
(declare-fun fun_app$m (B_c_fun$ B$ )C$ )
(declare-fun fun_app$n (A_c_bool_fun_fun$ A$ )C_bool_fun$ )
(declare-fun fun_app$o (A_c_fun$ A$ )C$ )
(declare-fun fun_app$p (C_c_fun$ C$ )C$ )
(declare-fun fun_app$q (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$r (C_a_bool_fun_fun$ C$ )A_bool_fun$ )
(declare-fun fun_app$s (B_a_fun$ B$ )A$ )
(declare-fun fun_app$t (A_a_fun$ A$ )A$ )
(declare-fun fun_app$u (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$v (C_b_fun$ C$ )B$ )
(declare-fun fun_app$w (B_b_fun$ B$ )B$ )
(declare-fun fun_app$x (A_b_fun$ A$ )B$ )
(declare-fun fun_app$y (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun iterates$ (C_c_fun$ C$ )C_llist$ )
(declare-fun llength$a (A_llist$ )Enat$ )
(declare-fun llength$b (B_llist$ )Enat$ )
(declare-fun iterates$a (A_a_fun$ A$ )A_llist$ )
(declare-fun iterates$b (B_b_fun$ B$ )B_llist$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun llist_all2$a (C_b_bool_fun_fun$ C_llist$ )B_llist_bool_fun$ )
(declare-fun llist_all2$b (C_c_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun llist_all2$c (B_c_bool_fun_fun$ B_llist$ )C_llist_bool_fun$ )
(declare-fun llist_all2$d (C_a_bool_fun_fun$ C_llist$ )A_llist_bool_fun$ )
(declare-fun llist_all2$e (B_a_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun llist_all2$f (A_c_bool_fun_fun$ A_llist$ )C_llist_bool_fun$ )
(declare-fun llist_all2$g (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$h (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun lstrict_prefix$ (C_llist$ C_llist$ )Bool )
(declare-fun lstrict_prefix$a (B_llist$ B_llist$ )Bool )
(declare-fun lstrict_prefix$b (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 C$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$a p$ (fun_app$b f$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$c (fun_app$d uuy$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$c (fun_app$d uuy$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$e (fun_app$f uva$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$e (fun_app$f uva$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$g (fun_app$h uux$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$g (fun_app$h uux$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$i (fun_app$j uuz$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$i (fun_app$j uuz$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 B_c_fun$ )(?v2 B$ ))(! (= (fun_app$k (uuh$ ?v0 ?v1 )?v2 )(fun_app$l ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$k (uuh$ ?v0 ?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A$ ))(! (= (fun_app$n (uuj$ ?v0 ?v1 )?v2 )(fun_app$l ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$n (uuj$ ?v0 ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_c_fun$ )(?v2 C$ ))(! (= (fun_app$ (uug$ ?v0 ?v1 )?v2 )(fun_app$ ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$ (uug$ ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 B_c_fun$ )(?v2 B$ ))(! (= (fun_app$h (uum$ ?v0 ?v1 )?v2 )(fun_app$ ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$h (uum$ ?v0 ?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A$ ))(! (= (fun_app$a (uuf$ ?v0 ?v1 )?v2 )(fun_app$ ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$a (uuf$ ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 B_c_fun$ )(?v2 B$ ))(! (= (fun_app$q (uui$ ?v0 ?v1 )?v2 )(fun_app$r ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$q (uui$ ?v0 ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A$ ))(! (= (fun_app$j (uuk$ ?v0 ?v1 )?v2 )(fun_app$r ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$j (uuk$ ?v0 ?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$ (uue$ ?v0 ?v1 )?v2 )(fun_app$a ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$ (uue$ ?v0 ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$h (uul$ ?v0 ?v1 )?v2 )(fun_app$a ?v0 (fun_app$s ?v1 ?v2 ))):pattern ((fun_app$h (uul$ ?v0 ?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$a (uud$ ?v0 ?v1 )?v2 )(fun_app$a ?v0 (fun_app$t ?v1 ?v2 ))):pattern ((fun_app$a (uud$ ?v0 ?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 B_c_fun$ )(?v2 C$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$ (uuq$ ?v0 ?v1 )?v2 )?v3 )(fun_app$u (fun_app$l ?v0 ?v2 )(fun_app$m ?v1 ?v3 ))):pattern ((fun_app$g (fun_app$ (uuq$ ?v0 ?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_b_fun$ )(?v2 C$ )(?v3 C$ ))(! (= (fun_app$u (fun_app$l (uuu$ ?v0 ?v1 )?v2 )?v3 )(fun_app$g (fun_app$ ?v0 ?v2 )(fun_app$v ?v1 ?v3 ))):pattern ((fun_app$u (fun_app$l (uuu$ ?v0 ?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 B_b_fun$ )(?v2 C$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$ (uuo$ ?v0 ?v1 )?v2 )?v3 )(fun_app$g (fun_app$ ?v0 ?v2 )(fun_app$w ?v1 ?v3 ))):pattern ((fun_app$g (fun_app$ (uuo$ ?v0 ?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 A_b_fun$ )(?v2 C$ )(?v3 A$ ))(! (= (fun_app$i (fun_app$r (uut$ ?v0 ?v1 )?v2 )?v3 )(fun_app$g (fun_app$ ?v0 ?v2 )(fun_app$x ?v1 ?v3 ))):pattern ((fun_app$i (fun_app$r (uut$ ?v0 ?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 B_a_fun$ )(?v2 C$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$ (uup$ ?v0 ?v1 )?v2 )?v3 )(fun_app$i (fun_app$r ?v0 ?v2 )(fun_app$s ?v1 ?v3 ))):pattern ((fun_app$g (fun_app$ (uup$ ?v0 ?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 C_c_fun$ )(?v2 B$ )(?v3 C$ ))(! (= (fun_app$u (fun_app$k (uuv$ ?v0 ?v1 )?v2 )?v3 )(fun_app$u (fun_app$k ?v0 ?v2 )(fun_app$p ?v1 ?v3 ))):pattern ((fun_app$u (fun_app$k (uuv$ ?v0 ?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_c_fun$ )(?v2 B$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uuw$ ?v0 ?v1 )?v2 )?v3 )(fun_app$u (fun_app$k ?v0 ?v2 )(fun_app$m ?v1 ?v3 ))):pattern ((fun_app$g (fun_app$h (uuw$ ?v0 ?v1 )?v2 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_b_fun$ )(?v2 A$ )(?v3 C$ ))(! (= (fun_app$u (fun_app$n (uur$ ?v0 ?v1 )?v2 )?v3 )(fun_app$g (fun_app$a ?v0 ?v2 )(fun_app$v ?v1 ?v3 ))):pattern ((fun_app$u (fun_app$n (uur$ ?v0 ?v1 )?v2 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_b_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$a (uun$ ?v0 ?v1 )?v2 )?v3 )(fun_app$g (fun_app$a ?v0 ?v2 )(fun_app$w ?v1 ?v3 ))):pattern ((fun_app$g (fun_app$a (uun$ ?v0 ?v1 )?v2 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$i (fun_app$j (uus$ ?v0 ?v1 )?v2 )?v3 )(fun_app$g (fun_app$a ?v0 ?v2 )(fun_app$x ?v1 ?v3 ))):pattern ((fun_app$i (fun_app$j (uus$ ?v0 ?v1 )?v2 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(! (= (fun_app$u (fun_app$l uvb$ ?v0 )?v1 )true ):pattern ((fun_app$u (fun_app$l uvb$ ?v0 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 C$ )(?v1 B$ ))(! (= (fun_app$g (fun_app$ uvj$ ?v0 )?v1 )true ):pattern ((fun_app$g (fun_app$ uvj$ ?v0 )?v1 )))):named a26 ))
(assert (! (forall ((?v0 C$ )(?v1 A$ ))(! (= (fun_app$i (fun_app$r uvc$ ?v0 )?v1 )true ):pattern ((fun_app$i (fun_app$r uvc$ ?v0 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 B$ )(?v1 C$ ))(! (= (fun_app$u (fun_app$k uvd$ ?v0 )?v1 )true ):pattern ((fun_app$u (fun_app$k uvd$ ?v0 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$g (fun_app$h uve$ ?v0 )?v1 )true ):pattern ((fun_app$g (fun_app$h uve$ ?v0 )?v1 )))):named a29 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ ))(! (= (fun_app$i (fun_app$q uvf$ ?v0 )?v1 )true ):pattern ((fun_app$i (fun_app$q uvf$ ?v0 )?v1 )))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 C$ ))(! (= (fun_app$u (fun_app$n uvg$ ?v0 )?v1 )true ):pattern ((fun_app$u (fun_app$n uvg$ ?v0 )?v1 )))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$g (fun_app$a uvi$ ?v0 )?v1 )true ):pattern ((fun_app$g (fun_app$a uvi$ ?v0 )?v1 )))):named a32 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$i (fun_app$j uvh$ ?v0 )?v1 )true ):pattern ((fun_app$i (fun_app$j uvh$ ?v0 )?v1 )))):named a33 ))
(assert (! (forall ((?v0 C$ ))(! (= (fun_app$p uua$ ?v0 )?v0 ):pattern ((fun_app$p uua$ ?v0 )))):named a34 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$w uuc$ ?v0 )?v0 ):pattern ((fun_app$w uuc$ ?v0 )))):named a35 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$t uub$ ?v0 )?v0 ):pattern ((fun_app$t uub$ ?v0 )))):named a36 ))
(assert (! (not (= (fun_app$c (llist_all2$ p$ (lmap$ f$ xs$ ))ys$ )(fun_app$c (llist_all2$a uu$ xs$ )ys$ ))):named a37 ))
(assert (! (forall ((?v0 C_llist$ ))(= (lmap$a uua$ ?v0 )?v0 )):named a38 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lmap$b uub$ ?v0 )?v0 )):named a39 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lmap$c uuc$ ?v0 )?v0 )):named a40 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (fun_app$c (llist_all2$ ?v0 (lmap$b ?v1 ?v2 ))?v3 )(fun_app$c (llist_all2$ (uud$ ?v0 ?v1 )?v2 )?v3 ))):named a41 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C_llist$ )(?v3 B_llist$ ))(= (fun_app$c (llist_all2$ ?v0 (lmap$ ?v1 ?v2 ))?v3 )(fun_app$c (llist_all2$a (uue$ ?v0 ?v1 )?v2 )?v3 ))):named a42 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (fun_app$c (llist_all2$a ?v0 (lmap$d ?v1 ?v2 ))?v3 )(fun_app$c (llist_all2$ (uuf$ ?v0 ?v1 )?v2 )?v3 ))):named a43 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_c_fun$ )(?v2 C_llist$ )(?v3 B_llist$ ))(= (fun_app$c (llist_all2$a ?v0 (lmap$a ?v1 ?v2 ))?v3 )(fun_app$c (llist_all2$a (uug$ ?v0 ?v1 )?v2 )?v3 ))):named a44 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 B_c_fun$ )(?v2 B_llist$ )(?v3 C_llist$ ))(= (fun_app$y (llist_all2$b ?v0 (lmap$e ?v1 ?v2 ))?v3 )(fun_app$y (llist_all2$c (uuh$ ?v0 ?v1 )?v2 )?v3 ))):named a45 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 B_c_fun$ )(?v2 B_llist$ )(?v3 A_llist$ ))(= (fun_app$e (llist_all2$d ?v0 (lmap$e ?v1 ?v2 ))?v3 )(fun_app$e (llist_all2$e (uui$ ?v0 ?v1 )?v2 )?v3 ))):named a46 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A_llist$ )(?v3 C_llist$ ))(= (fun_app$y (llist_all2$b ?v0 (lmap$d ?v1 ?v2 ))?v3 )(fun_app$y (llist_all2$f (uuj$ ?v0 ?v1 )?v2 )?v3 ))):named a47 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (fun_app$e (llist_all2$d ?v0 (lmap$d ?v1 ?v2 ))?v3 )(fun_app$e (fun_app$f (llist_all2$g (uuk$ ?v0 ?v1 ))?v2 )?v3 ))):named a48 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_a_fun$ )(?v2 B_llist$ )(?v3 B_llist$ ))(= (fun_app$c (llist_all2$ ?v0 (lmap$f ?v1 ?v2 ))?v3 )(fun_app$c (fun_app$d (llist_all2$h (uul$ ?v0 ?v1 ))?v2 )?v3 ))):named a49 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 B_c_fun$ )(?v2 B_llist$ )(?v3 B_llist$ ))(= (fun_app$c (llist_all2$a ?v0 (lmap$e ?v1 ?v2 ))?v3 )(fun_app$c (fun_app$d (llist_all2$h (uum$ ?v0 ?v1 ))?v2 )?v3 ))):named a50 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_b_fun$ )(?v3 B_llist$ ))(= (fun_app$c (llist_all2$ ?v0 ?v1 )(lmap$c ?v2 ?v3 ))(fun_app$c (llist_all2$ (uun$ ?v0 ?v2 )?v1 )?v3 ))):named a51 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_llist$ )(?v2 B_b_fun$ )(?v3 B_llist$ ))(= (fun_app$c (llist_all2$a ?v0 ?v1 )(lmap$c ?v2 ?v3 ))(fun_app$c (llist_all2$a (uuo$ ?v0 ?v2 )?v1 )?v3 ))):named a52 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 C_llist$ )(?v2 B_a_fun$ )(?v3 B_llist$ ))(= (fun_app$e (llist_all2$d ?v0 ?v1 )(lmap$f ?v2 ?v3 ))(fun_app$c (llist_all2$a (uup$ ?v0 ?v2 )?v1 )?v3 ))):named a53 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 B_c_fun$ )(?v3 B_llist$ ))(= (fun_app$y (llist_all2$b ?v0 ?v1 )(lmap$e ?v2 ?v3 ))(fun_app$c (llist_all2$a (uuq$ ?v0 ?v2 )?v1 )?v3 ))):named a54 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 C_b_fun$ )(?v3 C_llist$ ))(= (fun_app$c (llist_all2$ ?v0 ?v1 )(lmap$g ?v2 ?v3 ))(fun_app$y (llist_all2$f (uur$ ?v0 ?v2 )?v1 )?v3 ))):named a55 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_b_fun$ )(?v3 A_llist$ ))(= (fun_app$c (llist_all2$ ?v0 ?v1 )(lmap$h ?v2 ?v3 ))(fun_app$e (fun_app$f (llist_all2$g (uus$ ?v0 ?v2 ))?v1 )?v3 ))):named a56 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_llist$ )(?v2 A_b_fun$ )(?v3 A_llist$ ))(= (fun_app$c (llist_all2$a ?v0 ?v1 )(lmap$h ?v2 ?v3 ))(fun_app$e (llist_all2$d (uut$ ?v0 ?v2 )?v1 )?v3 ))):named a57 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_b_fun$ )(?v3 C_llist$ ))(= (fun_app$c (llist_all2$a ?v0 ?v1 )(lmap$g ?v2 ?v3 ))(fun_app$y (llist_all2$b (uuu$ ?v0 ?v2 )?v1 )?v3 ))):named a58 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_llist$ )(?v2 C_c_fun$ )(?v3 C_llist$ ))(= (fun_app$y (llist_all2$c ?v0 ?v1 )(lmap$a ?v2 ?v3 ))(fun_app$y (llist_all2$c (uuv$ ?v0 ?v2 )?v1 )?v3 ))):named a59 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_c_fun$ )(?v3 B_llist$ ))(= (fun_app$y (llist_all2$c ?v0 ?v1 )(lmap$e ?v2 ?v3 ))(fun_app$c (fun_app$d (llist_all2$h (uuw$ ?v0 ?v2 ))?v1 )?v3 ))):named a60 ))
(assert (! (= (llist_all2$h uux$ )uuy$ ):named a61 ))
(assert (! (= (llist_all2$g uuz$ )uva$ ):named a62 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_b_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$a (lmap$g ?v2 ?v0 )(lmap$g ?v2 ?v1 )))):named a63 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lstrict_prefix$a (lmap$h ?v2 ?v0 )(lmap$h ?v2 ?v1 )))):named a64 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_c_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$ (lmap$e ?v2 ?v0 )(lmap$e ?v2 ?v1 )))):named a65 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$b (lmap$f ?v2 ?v0 )(lmap$f ?v2 ?v1 )))):named a66 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$a (lmap$c ?v2 ?v0 )(lmap$c ?v2 ?v1 )))):named a67 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_c_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$ (lmap$a ?v2 ?v0 )(lmap$a ?v2 ?v1 )))):named a68 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_c_fun$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lstrict_prefix$ (lmap$d ?v2 ?v0 )(lmap$d ?v2 ?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lstrict_prefix$b (lmap$b ?v2 ?v0 )(lmap$b ?v2 ?v1 )))):named a70 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_a_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$b (lmap$ ?v2 ?v0 )(lmap$ ?v2 ?v1 )))):named a71 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(= (fun_app$y (llist_all2$b uvb$ ?v0 )?v1 )(= (llength$ ?v0 )(llength$ ?v1 )))):named a72 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 A_llist$ ))(= (fun_app$e (llist_all2$d uvc$ ?v0 )?v1 )(= (llength$ ?v0 )(llength$a ?v1 )))):named a73 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 C_llist$ ))(= (fun_app$y (llist_all2$c uvd$ ?v0 )?v1 )(= (llength$b ?v0 )(llength$ ?v1 )))):named a74 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (fun_app$c (fun_app$d (llist_all2$h uve$ )?v0 )?v1 )(= (llength$b ?v0 )(llength$b ?v1 )))):named a75 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (fun_app$e (llist_all2$e uvf$ ?v0 )?v1 )(= (llength$b ?v0 )(llength$a ?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 C_llist$ ))(= (fun_app$y (llist_all2$f uvg$ ?v0 )?v1 )(= (llength$a ?v0 )(llength$ ?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$e (fun_app$f (llist_all2$g uvh$ )?v0 )?v1 )(= (llength$a ?v0 )(llength$a ?v1 )))):named a78 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (fun_app$c (llist_all2$ uvi$ ?v0 )?v1 )(= (llength$a ?v0 )(llength$b ?v1 )))):named a79 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 B_llist$ ))(= (fun_app$c (llist_all2$a uvj$ ?v0 )?v1 )(= (llength$ ?v0 )(llength$b ?v1 )))):named a80 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldropn$ ?v0 (lmap$f ?v1 ?v2 ))(lmap$f ?v1 (ldropn$a ?v0 ?v2 )))):named a81 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldropn$a ?v0 (lmap$h ?v1 ?v2 ))(lmap$h ?v1 (ldropn$ ?v0 ?v2 )))):named a82 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_b_fun$ )(?v2 C_llist$ ))(= (ldropn$a ?v0 (lmap$g ?v1 ?v2 ))(lmap$g ?v1 (ldropn$b ?v0 ?v2 )))):named a83 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_c_fun$ )(?v2 B_llist$ ))(= (ldropn$b ?v0 (lmap$e ?v1 ?v2 ))(lmap$e ?v1 (ldropn$a ?v0 ?v2 )))):named a84 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_c_fun$ )(?v2 C_llist$ ))(= (ldropn$b ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ldropn$b ?v0 ?v2 )))):named a85 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_c_fun$ )(?v2 A_llist$ ))(= (ldropn$b ?v0 (lmap$d ?v1 ?v2 ))(lmap$d ?v1 (ldropn$ ?v0 ?v2 )))):named a86 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ldropn$ ?v0 ?v2 )))):named a87 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldropn$a ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ldropn$a ?v0 ?v2 )))):named a88 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_a_fun$ )(?v2 C_llist$ ))(= (ldropn$ ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ldropn$b ?v0 ?v2 )))):named a89 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldrop$ ?v0 (lmap$h ?v1 ?v2 ))(lmap$h ?v1 (ldrop$a ?v0 ?v2 )))):named a90 ))
(assert (! (forall ((?v0 Enat$ )(?v1 C_b_fun$ )(?v2 C_llist$ ))(= (ldrop$ ?v0 (lmap$g ?v1 ?v2 ))(lmap$g ?v1 (ldrop$b ?v0 ?v2 )))):named a91 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_c_fun$ )(?v2 B_llist$ ))(= (ldrop$b ?v0 (lmap$e ?v1 ?v2 ))(lmap$e ?v1 (ldrop$ ?v0 ?v2 )))):named a92 ))
(assert (! (forall ((?v0 Enat$ )(?v1 C_c_fun$ )(?v2 C_llist$ ))(= (ldrop$b ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ldrop$b ?v0 ?v2 )))):named a93 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_c_fun$ )(?v2 A_llist$ ))(= (ldrop$b ?v0 (lmap$d ?v1 ?v2 ))(lmap$d ?v1 (ldrop$a ?v0 ?v2 )))):named a94 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldrop$a ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ldrop$a ?v0 ?v2 )))):named a95 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldrop$ ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ldrop$ ?v0 ?v2 )))):named a96 ))
(assert (! (forall ((?v0 Enat$ )(?v1 C_a_fun$ )(?v2 C_llist$ ))(= (ldrop$a ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ldrop$b ?v0 ?v2 )))):named a97 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$c (fun_app$d (llist_all2$h ?v0 )?v1 )lNil$a )(= ?v1 lNil$a )):pattern ((fun_app$d (llist_all2$h ?v0 )?v1 )))):named a98 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$y (llist_all2$c ?v0 ?v1 )lNil$b )(= ?v1 lNil$a )):pattern ((llist_all2$c ?v0 ?v1 )))):named a99 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ ))(! (= (fun_app$y (llist_all2$b ?v0 ?v1 )lNil$b )(= ?v1 lNil$b )):pattern ((llist_all2$b ?v0 ?v1 )))):named a100 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$y (llist_all2$f ?v0 ?v1 )lNil$b )(= ?v1 lNil$ )):pattern ((llist_all2$f ?v0 ?v1 )))):named a101 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$e (llist_all2$e ?v0 ?v1 )lNil$ )(= ?v1 lNil$a )):pattern ((llist_all2$e ?v0 ?v1 )))):named a102 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 C_llist$ ))(! (= (fun_app$e (llist_all2$d ?v0 ?v1 )lNil$ )(= ?v1 lNil$b )):pattern ((llist_all2$d ?v0 ?v1 )))):named a103 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$e (fun_app$f (llist_all2$g ?v0 )?v1 )lNil$ )(= ?v1 lNil$ )):pattern ((fun_app$f (llist_all2$g ?v0 )?v1 )))):named a104 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$c (llist_all2$ ?v0 ?v1 )lNil$a )(= ?v1 lNil$ )):pattern ((llist_all2$ ?v0 ?v1 )))):named a105 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_llist$ ))(! (= (fun_app$c (llist_all2$a ?v0 ?v1 )lNil$a )(= ?v1 lNil$b )):pattern ((llist_all2$a ?v0 ?v1 )))):named a106 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$c (fun_app$d (llist_all2$h ?v0 )lNil$a )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$c (fun_app$d (llist_all2$h ?v0 )lNil$a )?v1 )))):named a107 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 C_llist$ ))(! (= (fun_app$y (llist_all2$c ?v0 lNil$a )?v1 )(= ?v1 lNil$b )):pattern ((fun_app$y (llist_all2$c ?v0 lNil$a )?v1 )))):named a108 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$e (llist_all2$e ?v0 lNil$a )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$e (llist_all2$e ?v0 lNil$a )?v1 )))):named a109 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ ))(! (= (fun_app$y (llist_all2$b ?v0 lNil$b )?v1 )(= ?v1 lNil$b )):pattern ((fun_app$y (llist_all2$b ?v0 lNil$b )?v1 )))):named a110 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$e (llist_all2$d ?v0 lNil$b )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$e (llist_all2$d ?v0 lNil$b )?v1 )))):named a111 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 C_llist$ ))(! (= (fun_app$y (llist_all2$f ?v0 lNil$ )?v1 )(= ?v1 lNil$b )):pattern ((fun_app$y (llist_all2$f ?v0 lNil$ )?v1 )))):named a112 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$e (fun_app$f (llist_all2$g ?v0 )lNil$ )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$e (fun_app$f (llist_all2$g ?v0 )lNil$ )?v1 )))):named a113 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$c (llist_all2$ ?v0 lNil$ )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$c (llist_all2$ ?v0 lNil$ )?v1 )))):named a114 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$c (llist_all2$a ?v0 lNil$b )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$c (llist_all2$a ?v0 lNil$b )?v1 )))):named a115 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ ))(= (lmap$a ?v0 (iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$p ?v0 ?v1 )))):named a116 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lmap$b ?v0 (iterates$a ?v0 ?v1 ))(iterates$a ?v0 (fun_app$t ?v0 ?v1 )))):named a117 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (lmap$c ?v0 (iterates$b ?v0 ?v1 ))(iterates$b ?v0 (fun_app$w ?v0 ?v1 )))):named a118 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C$ )(?v2 C_llist$ )(?v3 C$ )(?v4 C_llist$ ))(! (= (fun_app$y (llist_all2$b ?v0 (lCons$b ?v1 ?v2 ))(lCons$b ?v3 ?v4 ))(and (fun_app$u (fun_app$l ?v0 ?v1 )?v3 )(fun_app$y (llist_all2$b ?v0 ?v2 )?v4 ))):pattern ((fun_app$y (llist_all2$b ?v0 (lCons$b ?v1 ?v2 ))(lCons$b ?v3 ?v4 ))))):named a119 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 C$ )(?v2 C_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$e (llist_all2$d ?v0 (lCons$b ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$i (fun_app$r ?v0 ?v1 )?v3 )(fun_app$e (llist_all2$d ?v0 ?v2 )?v4 ))):pattern ((fun_app$e (llist_all2$d ?v0 (lCons$b ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a120 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 C$ )(?v4 C_llist$ ))(! (= (fun_app$y (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))(lCons$b ?v3 ?v4 ))(and (fun_app$u (fun_app$k ?v0 ?v1 )?v3 )(fun_app$y (llist_all2$c ?v0 ?v2 )?v4 ))):pattern ((fun_app$y (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))(lCons$b ?v3 ?v4 ))))):named a121 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (fun_app$c (fun_app$d (llist_all2$h ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))(and (fun_app$g (fun_app$h ?v0 ?v1 )?v3 )(fun_app$c (fun_app$d (llist_all2$h ?v0 )?v2 )?v4 ))):pattern ((fun_app$c (fun_app$d (llist_all2$h ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))))):named a122 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$e (llist_all2$e ?v0 (lCons$a ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$i (fun_app$q ?v0 ?v1 )?v3 )(fun_app$e (llist_all2$e ?v0 ?v2 )?v4 ))):pattern ((fun_app$e (llist_all2$e ?v0 (lCons$a ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a123 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 C$ )(?v4 C_llist$ ))(! (= (fun_app$y (llist_all2$f ?v0 (lCons$ ?v1 ?v2 ))(lCons$b ?v3 ?v4 ))(and (fun_app$u (fun_app$n ?v0 ?v1 )?v3 )(fun_app$y (llist_all2$f ?v0 ?v2 )?v4 ))):pattern ((fun_app$y (llist_all2$f ?v0 (lCons$ ?v1 ?v2 ))(lCons$b ?v3 ?v4 ))))):named a124 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$e (fun_app$f (llist_all2$g ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$i (fun_app$j ?v0 ?v1 )?v3 )(fun_app$e (fun_app$f (llist_all2$g ?v0 )?v2 )?v4 ))):pattern ((fun_app$e (fun_app$f (llist_all2$g ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a125 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (fun_app$c (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))(and (fun_app$g (fun_app$a ?v0 ?v1 )?v3 )(fun_app$c (llist_all2$ ?v0 ?v2 )?v4 ))):pattern ((fun_app$c (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))))):named a126 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C$ )(?v2 C_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (fun_app$c (llist_all2$a ?v0 (lCons$b ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))(and (fun_app$g (fun_app$ ?v0 ?v1 )?v3 )(fun_app$c (llist_all2$a ?v0 ?v2 )?v4 ))):pattern ((fun_app$c (llist_all2$a ?v0 (lCons$b ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))))):named a127 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$c ?v0 ?v1 ))(lnull$ ?v1 ))):named a128 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$b ?v0 ?v1 ))(lnull$a ?v1 ))):named a129 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_llist$ ))(= (lnull$b (lmap$d ?v0 ?v1 ))(lnull$a ?v1 ))):named a130 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_llist$ ))(= (lnull$b (lmap$a ?v0 ?v1 ))(lnull$b ?v1 ))):named a131 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_llist$ ))(= (lnull$a (lmap$ ?v0 ?v1 ))(lnull$b ?v1 ))):named a132 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$e ?v0 ?v1 ))(llength$b ?v1 ))):named a133 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_llist$ ))(= (llength$b (lmap$g ?v0 ?v1 ))(llength$ ?v1 ))):named a134 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$b (lmap$h ?v0 ?v1 ))(llength$a ?v1 ))):named a135 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$f ?v0 ?v1 ))(llength$b ?v1 ))):named a136 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_llist$ ))(= (llength$ (lmap$a ?v0 ?v1 ))(llength$ ?v1 ))):named a137 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$d ?v0 ?v1 ))(llength$a ?v1 ))):named a138 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$b ?v0 ?v1 ))(llength$a ?v1 ))):named a139 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$b (lmap$c ?v0 ?v1 ))(llength$b ?v1 ))):named a140 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_llist$ ))(= (llength$a (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a141 ))
(assert (! (forall ((?v0 Enat$ )(?v1 C_c_fun$ )(?v2 C_llist$ ))(= (ltake$ ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ltake$ ?v0 ?v2 )))):named a142 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_c_fun$ )(?v2 A_llist$ ))(= (ltake$ ?v0 (lmap$d ?v1 ?v2 ))(lmap$d ?v1 (ltake$a ?v0 ?v2 )))):named a143 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ltake$a ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ltake$a ?v0 ?v2 )))):named a144 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ltake$b ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ltake$b ?v0 ?v2 )))):named a145 ))
(assert (! (forall ((?v0 Enat$ )(?v1 C_a_fun$ )(?v2 C_llist$ ))(= (ltake$a ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ltake$ ?v0 ?v2 )))):named a146 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_llist$ ))(= (ltl$b (lmap$a ?v0 ?v1 ))(lmap$a ?v0 (ltl$b ?v1 )))):named a147 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_llist$ ))(= (ltl$b (lmap$d ?v0 ?v1 ))(lmap$d ?v0 (ltl$ ?v1 )))):named a148 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$b ?v0 ?v1 ))(lmap$b ?v0 (ltl$ ?v1 )))):named a149 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$a (lmap$c ?v0 ?v1 ))(lmap$c ?v0 (ltl$a ?v1 )))):named a150 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$b ?v1 )))):named a151 ))
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ )(?v2 C$ )(?v3 C_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a152 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a153 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a154 ))
(check-sat )
;(get-unsat-core )
