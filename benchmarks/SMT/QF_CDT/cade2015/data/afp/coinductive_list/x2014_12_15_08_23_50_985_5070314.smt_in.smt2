;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun len$ ()Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lena$ ()Nat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun the_enat$ (Enat$ )Nat$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not false ):named a0 ))
(assert (! (less$ (enat$ (suc$ lena$ ))(llength$ xsa$ )):named a1 ))
(assert (! (less$ (llength$ (ltakeWhile$ p$ xs$ ))(llength$ xs$ )):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (llength$ (ltakeWhile$ ?v0 ?v1 ))(llength$ ?v1 ))(= (ltakeWhile$ ?v0 ?v1 )?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$ (lstrict_prefix$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a4 ))
(assert (! (fun_app$a p$ (lnth$ xsa$ (suc$ lena$ ))):named a5 ))
(assert (! (= (llength$ (ltakeWhile$ p$ xs$ ))(enat$ len$ )):named a6 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= (llength$ (ltakeWhile$ p$ xs$ ))(enat$ ?v0 ))false ))false ):named a7 ))
(assert (! (fun_app$a p$ (lnth$ xs$ (the_enat$ (llength$ (ltakeWhile$ p$ xs$ ))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$ (lstrict_prefix$ ?v0 )?v1 )(less$ (llength$ ?v0 )(llength$ ?v1 )))):named a9 ))
(assert (! (= (llength$ (ltakeWhile$ p$ xsa$ ))(enat$ (suc$ lena$ ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ (ltakeWhile$ ?v1 ?v2 )))(= (lnth$ (ltakeWhile$ ?v1 ?v2 )?v0 )(lnth$ ?v2 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (fun_app$a p$ (lnth$ ?v0 lena$ ))(and (less$ (enat$ lena$ )(llength$ ?v0 ))(= (llength$ (ltakeWhile$ p$ ?v0 ))(enat$ lena$ ))))false )):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a16 ))
(check-sat )
;(get-unsat-core )
