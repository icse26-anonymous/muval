;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-datatypes ()((A_llist_b_llist_prod$ (pair$ (fst$ A_llist$ )(snd$ B_llist$ )))(Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun p$ (A_llist$ )B_llist_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun xsys$ ()A_llist_b_llist_prod$ )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ltake$a (Enat$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$d (B_llist_a_llist_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$e (A_llist_b_llist_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(assert (! (not (fun_app$ (p$ (fst$ xsys$ ))(snd$ xsys$ ))):named a0 ))
(assert (! (fun_app$ (p$ (fun_app$a (ltake$ (enat$ n$ ))xs$ ))(fun_app$b (ltake$a (enat$ n$ ))ys$ )):named a1 ))
(assert (! (= xsys$ (pair$ (fun_app$a (ltake$ (enat$ n$ ))xs$ )(fun_app$b (ltake$a (enat$ n$ ))ys$ ))):named a2 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod$ ))(= (= ?v0 ?v1 )(and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 ))))):named a3 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_llist_prod$ ))(=> (and (fun_app$c (fun_app$d ?v0 (snd$ ?v1 ))(fst$ ?v1 ))(forall ((?v2 A_llist$ )(?v3 B_llist$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v2 )false )))false )):named a6 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(= (pair$ (fst$ ?v0 )(snd$ ?v0 ))?v0 )):named a7 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= xsys$ (pair$ (fun_app$a (ltake$ (enat$ ?v0 ))xs$ )(fun_app$b (ltake$a (enat$ ?v0 ))ys$ )))false ))false ):named a8 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(= ?v0 (pair$ (fst$ ?v0 )(snd$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(=> (=> (= ?v0 (pair$ (fst$ ?v0 )(snd$ ?v0 )))false )false )):named a10 ))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_llist_b_llist_prod$ ))(=> (and (fun_app$ (fun_app$e ?v0 ?v1 )?v2 )(= ?v3 (pair$ ?v1 ?v2 )))(fun_app$ (fun_app$e ?v0 (fst$ ?v3 ))(snd$ ?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 B_llist_bool_fun$ )(?v3 B_llist$ ))(=> (and (fun_app$c ?v0 ?v1 )(fun_app$ ?v2 ?v3 ))(and (fun_app$c ?v0 (fst$ (pair$ ?v1 ?v3 )))(fun_app$ ?v2 (snd$ (pair$ ?v1 ?v3 )))))):named a12 ))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(fun_app$c (fun_app$d ?v0 (snd$ (pair$ ?v2 ?v1 )))(fst$ (pair$ ?v2 ?v1 ))))):named a13 ))
(assert (! (fun_app$ (p$ lNil$ )lNil$a ):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (ltake$a ?v0 )lNil$a )lNil$a ):pattern ((ltake$a ?v0 )))):named a18 ))
(check-sat )
;(get-unsat-core )
