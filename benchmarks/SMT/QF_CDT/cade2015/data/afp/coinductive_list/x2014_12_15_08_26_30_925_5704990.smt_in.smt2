;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_a_a_prod_prod_set$ 0 )
(declare-sort A_a_prod_a_prod_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_a_a_a_prod_prod_fun$ 0 )
(declare-sort A_a_a_prod_a_prod_fun$ 0 )
(declare-sort A_a_a_prod_prod_a_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_prod_a_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_set$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_a_fun$ 0 )
(declare-sort A_a_prod_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ 0 )
(declare-sort A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_a_prod$ (pair$ (fst$ A$ )(snd$ A$ )))(A_a_prod_a_a_prod_prod$ (pair$a (fst$a A_a_prod$ )(snd$a A_a_prod$ )))))
(declare-sort A_a_prod_a_a_prod_prod_llist$ 0)
(declare-fun lNil$a ()A_a_prod_a_a_prod_prod_llist$)
(declare-fun lhd$a (A_a_prod_a_a_prod_prod_llist$)A_a_prod_a_a_prod_prod$)
(declare-fun ltl$a (A_a_prod_a_a_prod_prod_llist$)A_a_prod_a_a_prod_prod_llist$)
(declare-fun lCons$a (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$ )(snd$b A$ )))))
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$b ()A_a_prod_a_prod_llist$)
(declare-fun lhd$b (A_a_prod_a_prod_llist$)A_a_prod_a_prod$)
(declare-fun ltl$b (A_a_prod_a_prod_llist$)A_a_prod_a_prod_llist$)
(declare-fun lCons$b (A_a_prod_a_prod$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod$ (pair$c (fst$c A$ )(snd$c A_a_prod$ )))))
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$c ()A_a_a_prod_prod_llist$)
(declare-fun lhd$c (A_a_a_prod_prod_llist$)A_a_a_prod_prod$)
(declare-fun ltl$c (A_a_a_prod_prod_llist$)A_a_a_prod_prod_llist$)
(declare-fun lCons$c (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$)
(declare-fun lNil$d ()A_a_prod_llist$)
(declare-fun lhd$d (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$d (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$d (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_a_prod_prod$ (pair$d (fst$d A$ )(snd$d A_a_prod_a_prod$ )))))
(declare-sort A_a_a_prod_a_prod_prod_llist$ 0)
(declare-fun lNil$e ()A_a_a_prod_a_prod_prod_llist$)
(declare-fun lhd$e (A_a_a_prod_a_prod_prod_llist$)A_a_a_prod_a_prod_prod$)
(declare-fun ltl$e (A_a_a_prod_a_prod_prod_llist$)A_a_a_prod_a_prod_prod_llist$)
(declare-fun lCons$e (A_a_a_prod_a_prod_prod$ A_a_a_prod_a_prod_prod_llist$ )A_a_a_prod_a_prod_prod_llist$)
(declare-datatypes ()((A_a_a_a_prod_prod_prod$ (pair$e (fst$e A$ )(snd$e A_a_a_prod_prod$ )))))
(declare-sort A_a_a_a_prod_prod_prod_llist$ 0)
(declare-fun lNil$f ()A_a_a_a_prod_prod_prod_llist$)
(declare-fun lhd$f (A_a_a_a_prod_prod_prod_llist$)A_a_a_a_prod_prod_prod$)
(declare-fun ltl$f (A_a_a_a_prod_prod_prod_llist$)A_a_a_a_prod_prod_prod_llist$)
(declare-fun lCons$f (A_a_a_a_prod_prod_prod$ A_a_a_a_prod_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_prod_a_prod$ (pair$f (fst$f A_a_prod_a_prod$ )(snd$f A$ )))))
(declare-sort A_a_prod_a_prod_a_prod_llist$ 0)
(declare-fun lNil$g ()A_a_prod_a_prod_a_prod_llist$)
(declare-fun lhd$g (A_a_prod_a_prod_a_prod_llist$)A_a_prod_a_prod_a_prod$)
(declare-fun ltl$g (A_a_prod_a_prod_a_prod_llist$)A_a_prod_a_prod_a_prod_llist$)
(declare-fun lCons$g (A_a_prod_a_prod_a_prod$ A_a_prod_a_prod_a_prod_llist$ )A_a_prod_a_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod_a_prod$ (pair$g (fst$g A_a_a_prod_prod$ )(snd$g A$ )))))
(declare-sort A_a_a_prod_prod_a_prod_llist$ 0)
(declare-fun lNil$h ()A_a_a_prod_prod_a_prod_llist$)
(declare-fun lhd$h (A_a_a_prod_prod_a_prod_llist$)A_a_a_prod_prod_a_prod$)
(declare-fun ltl$h (A_a_a_prod_prod_a_prod_llist$)A_a_a_prod_prod_a_prod_llist$)
(declare-fun lCons$h (A_a_a_prod_prod_a_prod$ A_a_a_prod_prod_a_prod_llist$ )A_a_a_prod_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_a_a_prod_prod_prod$ (pair$h (fst$h A$ )(snd$h A_a_prod_a_a_prod_prod$ )))))
(declare-sort A_a_a_prod_a_a_prod_prod_prod_llist$ 0)
(declare-fun lNil$i ()A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lhd$i (A_a_a_prod_a_a_prod_prod_prod_llist$)A_a_a_prod_a_a_prod_prod_prod$)
(declare-fun ltl$i (A_a_a_prod_a_a_prod_prod_prod_llist$)A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lCons$i (A_a_a_prod_a_a_prod_prod_prod$ A_a_a_prod_a_a_prod_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_a_prod_a_prod_prod$ (pair$i (fst$i A_a_prod$ )(snd$i A_a_prod_a_prod$ )))))
(declare-sort A_a_prod_a_a_prod_a_prod_prod_llist$ 0)
(declare-fun lNil$j ()A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun lhd$j (A_a_prod_a_a_prod_a_prod_prod_llist$)A_a_prod_a_a_prod_a_prod_prod$)
(declare-fun ltl$j (A_a_prod_a_a_prod_a_prod_prod_llist$)A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun lCons$j (A_a_prod_a_a_prod_a_prod_prod$ A_a_prod_a_a_prod_a_prod_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_set$ )
(declare-fun lzip$ (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lmap$a (A_a_prod_a_fun$ A_a_prod_llist$ )A_llist$ )
(declare-fun lmap$b (A_a_a_prod_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun lmap$c (A_a_prod_a_a_prod_fun$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun lmap$d (A_a_prod_a_prod_a_fun$ A_a_prod_a_prod_llist$ )A_llist$ )
(declare-fun lmap$e (A_a_a_prod_prod_a_fun$ A_a_a_prod_prod_llist$ )A_llist$ )
(declare-fun lmap$f (A_a_a_prod_a_prod_fun$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lmap$g (A_a_a_a_prod_prod_fun$ A_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lmap$h (A_a_prod_a_a_prod_prod_a_fun$ A_a_prod_a_a_prod_prod_llist$ )A_llist$ )
(declare-fun lmap$i (A_a_prod_a_prod_a_a_prod_fun$ A_a_prod_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun lset$a (A_a_prod_a_prod_llist$ )A_a_prod_a_prod_set$ )
(declare-fun lset$b (A_a_a_prod_prod_llist$ )A_a_a_prod_prod_set$ )
(declare-fun lset$c (A_a_prod_llist$ )A_a_prod_set$ )
(declare-fun lset$d (A_llist$ )A_set$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun lzip$a (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$b (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$ )A_a_a_prod_a_prod_prod_llist$ )
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$ )A_a_prod_a_prod_a_prod_llist$ )
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$ )A_a_a_prod_prod_a_prod_llist$ )
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$ )
(declare-fun ldropn$ (Nat$ )A_llist_a_llist_fun$ )
(declare-fun member$ (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun ldropn$a (Nat$ )A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ )
(declare-fun ldropn$b (Nat$ )A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ )
(declare-fun ldropn$c (Nat$ )A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ )
(declare-fun ldropn$d (Nat$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun ldropn$e (Nat$ A_a_a_prod_a_prod_prod_llist$ )A_a_a_prod_a_prod_prod_llist$ )
(declare-fun ldropn$f (Nat$ A_a_a_a_prod_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$ )
(declare-fun ldropn$g (Nat$ A_a_prod_a_prod_a_prod_llist$ )A_a_prod_a_prod_a_prod_llist$ )
(declare-fun ldropn$h (Nat$ A_a_a_prod_prod_a_prod_llist$ )A_a_a_prod_prod_a_prod_llist$ )
(declare-fun ldropn$i (Nat$ A_a_a_prod_a_a_prod_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$ )
(declare-fun ldropn$j (Nat$ A_a_prod_a_a_prod_a_prod_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$ )
(declare-fun lfinite$ (A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun member$a (A_a_prod_a_prod$ A_a_prod_a_prod_set$ )Bool )
(declare-fun member$b (A_a_a_prod_prod$ A_a_a_prod_prod_set$ )Bool )
(declare-fun member$c (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun member$d (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun fun_app$b (A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun fun_app$c (A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun fun_app$d (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun lfinite$a (A_a_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$b (A_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$c (A_a_prod_llist$ )Bool )
(declare-fun lfinite$d (A_llist$ )Bool )
(declare-fun lprefix$a (A_a_prod_llist$ A_a_prod_llist$ )Bool )
(declare-fun ldistinct$ (A_llist$ )Bool )
(declare-fun ldistinct$a (A_a_prod_llist$ )Bool )
(assert (! (not (ldistinct$ (fun_app$ (ldropn$ n$ )xs$ ))):named a0 ))
(assert (! (ldistinct$ xs$ ):named a1 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ ))(! (= (fun_app$a (ldropn$a zero$ )?v0 )?v0 ):pattern ((fun_app$a (ldropn$a zero$ )?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ ))(! (= (fun_app$b (ldropn$b zero$ )?v0 )?v0 ):pattern ((fun_app$b (ldropn$b zero$ )?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(! (= (fun_app$c (ldropn$c zero$ )?v0 )?v0 ):pattern ((fun_app$c (ldropn$c zero$ )?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$d (ldropn$d zero$ )?v0 )?v0 ):pattern ((fun_app$d (ldropn$d zero$ )?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (ldropn$ zero$ )?v0 )?v0 ):pattern ((fun_app$ (ldropn$ zero$ )?v0 )))):named a6 ))
(assert (! (= (ldistinct$a lNil$d )true ):named a7 ))
(assert (! (= (ldistinct$ lNil$ )true ):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_a_prod_a_a_prod_prod_llist$ ))(= (fun_app$a (ldropn$a ?v0 )(fun_app$a (ldropn$a ?v1 )?v2 ))(fun_app$a (ldropn$a (plus$ ?v0 ?v1 ))?v2 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_a_prod_a_prod_llist$ ))(= (fun_app$b (ldropn$b ?v0 )(fun_app$b (ldropn$b ?v1 )?v2 ))(fun_app$b (ldropn$b (plus$ ?v0 ?v1 ))?v2 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_a_a_prod_prod_llist$ ))(= (fun_app$c (ldropn$c ?v0 )(fun_app$c (ldropn$c ?v1 )?v2 ))(fun_app$c (ldropn$c (plus$ ?v0 ?v1 ))?v2 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_a_prod_llist$ ))(= (fun_app$d (ldropn$d ?v0 )(fun_app$d (ldropn$d ?v1 )?v2 ))(fun_app$d (ldropn$d (plus$ ?v0 ?v1 ))?v2 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(fun_app$ (ldropn$ ?v1 )?v2 ))(fun_app$ (ldropn$ (plus$ ?v0 ?v1 ))?v2 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (ldropn$a ?v0 )lNil$a )lNil$a ):pattern ((ldropn$a ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b (ldropn$b ?v0 )lNil$b )lNil$b ):pattern ((ldropn$b ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$c (ldropn$c ?v0 )lNil$c )lNil$c ):pattern ((ldropn$c ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$d (ldropn$d ?v0 )lNil$d )lNil$d ):pattern ((ldropn$d ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$d (ldropn$d ?v0 )(lzip$ ?v1 ?v2 ))(lzip$ (fun_app$ (ldropn$ ?v0 )?v1 )(fun_app$ (ldropn$ ?v0 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_prod_llist$ ))(= (fun_app$c (ldropn$c ?v0 )(lzip$a ?v1 ?v2 ))(lzip$a (fun_app$ (ldropn$ ?v0 )?v1 )(fun_app$d (ldropn$d ?v0 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 A_llist$ ))(= (fun_app$b (ldropn$b ?v0 )(lzip$b ?v1 ?v2 ))(lzip$b (fun_app$d (ldropn$d ?v0 )?v1 )(fun_app$ (ldropn$ ?v0 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_llist$ ))(= (fun_app$a (ldropn$a ?v0 )(lzip$c ?v1 ?v2 ))(lzip$c (fun_app$d (ldropn$d ?v0 )?v1 )(fun_app$d (ldropn$d ?v0 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_prod_a_prod_llist$ ))(= (ldropn$e ?v0 (lzip$d ?v1 ?v2 ))(lzip$d (fun_app$ (ldropn$ ?v0 )?v1 )(fun_app$b (ldropn$b ?v0 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_a_prod_prod_llist$ ))(= (ldropn$f ?v0 (lzip$e ?v1 ?v2 ))(lzip$e (fun_app$ (ldropn$ ?v0 )?v1 )(fun_app$c (ldropn$c ?v0 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_prod_llist$ )(?v2 A_llist$ ))(= (ldropn$g ?v0 (lzip$f ?v1 ?v2 ))(lzip$f (fun_app$b (ldropn$b ?v0 )?v1 )(fun_app$ (ldropn$ ?v0 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_prod_llist$ )(?v2 A_llist$ ))(= (ldropn$h ?v0 (lzip$g ?v1 ?v2 ))(lzip$g (fun_app$c (ldropn$c ?v0 )?v1 )(fun_app$ (ldropn$ ?v0 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_prod_a_a_prod_prod_llist$ ))(= (ldropn$i ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (fun_app$ (ldropn$ ?v0 )?v1 )(fun_app$a (ldropn$a ?v0 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_a_prod_llist$ ))(= (ldropn$j ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (fun_app$d (ldropn$d ?v0 )?v1 )(fun_app$b (ldropn$b ?v0 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(= (lfinite$ (fun_app$a (ldropn$a ?v0 )?v1 ))(lfinite$ ?v1 ))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_prod_llist$ ))(= (lfinite$a (fun_app$b (ldropn$b ?v0 )?v1 ))(lfinite$a ?v1 ))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_prod_llist$ ))(= (lfinite$b (fun_app$c (ldropn$c ?v0 )?v1 ))(lfinite$b ?v1 ))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ ))(= (lfinite$c (fun_app$d (ldropn$d ?v0 )?v1 ))(lfinite$c ?v1 ))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$d (fun_app$ (ldropn$ ?v0 )?v1 ))(lfinite$d ?v1 ))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$ (ldropn$ ?v0 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_fun$ )(?v2 A_a_prod_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$d (ldropn$d ?v0 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$d (ldropn$d ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$ (ldropn$ ?v0 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_prod_fun$ )(?v2 A_a_prod_llist$ ))(= (fun_app$d (ldropn$d ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$d (ldropn$d ?v0 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_prod_a_fun$ )(?v2 A_a_prod_a_prod_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(lmap$d ?v1 ?v2 ))(lmap$d ?v1 (fun_app$b (ldropn$b ?v0 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_prod_a_fun$ )(?v2 A_a_a_prod_prod_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(lmap$e ?v1 ?v2 ))(lmap$e ?v1 (fun_app$c (ldropn$c ?v0 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_a_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$b (ldropn$b ?v0 )(lmap$f ?v1 ?v2 ))(lmap$f ?v1 (fun_app$ (ldropn$ ?v0 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_a_prod_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$c (ldropn$c ?v0 )(lmap$g ?v1 ?v2 ))(lmap$g ?v1 (fun_app$ (ldropn$ ?v0 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_prod_prod_a_fun$ )(?v2 A_a_prod_a_a_prod_prod_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(lmap$h ?v1 ?v2 ))(lmap$h ?v1 (fun_app$a (ldropn$a ?v0 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_prod_a_a_prod_fun$ )(?v2 A_a_prod_a_prod_llist$ ))(= (fun_app$d (ldropn$d ?v0 )(lmap$i ?v1 ?v2 ))(lmap$i ?v1 (fun_app$b (ldropn$b ?v0 )?v2 )))):named a43 ))
(assert (! (ldistinct$a lNil$d ):named a44 ))
(assert (! (ldistinct$ lNil$ ):named a45 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (ldistinct$ ?v0 )(lprefix$ ?v1 ?v0 ))(ldistinct$ ?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ltl$ ?v0 )))):named a47 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ltake$ ?v1 ?v0 )))):named a48 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$ )(?v1 Nat$ )(?v2 A_a_prod_a_a_prod_prod_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$a (ldropn$a ?v1 )?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a49 ))
(assert (! (forall ((?v0 A_a_prod_a_prod$ )(?v1 Nat$ )(?v2 A_a_prod_a_prod_llist$ ))(=> (member$a ?v0 (lset$a (fun_app$b (ldropn$b ?v1 )?v2 )))(member$a ?v0 (lset$a ?v2 )))):named a50 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 Nat$ )(?v2 A_a_a_prod_prod_llist$ ))(=> (member$b ?v0 (lset$b (fun_app$c (ldropn$c ?v1 )?v2 )))(member$b ?v0 (lset$b ?v2 )))):named a51 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 Nat$ )(?v2 A_a_prod_llist$ ))(=> (member$c ?v0 (lset$c (fun_app$d (ldropn$d ?v1 )?v2 )))(member$c ?v0 (lset$c ?v2 )))):named a52 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A_llist$ ))(=> (member$d ?v0 (lset$d (fun_app$ (ldropn$ ?v1 )?v2 )))(member$d ?v0 (lset$d ?v2 )))):named a53 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a54 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a55 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (lprefix$a lNil$d ?v0 )true ):pattern ((lprefix$a lNil$d ?v0 )))):named a56 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a57 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$ (ltake$ ?v0 ?v1 )?v1 )):named a58 ))
(assert (! (= (lfinite$c lNil$d )true ):named a59 ))
(assert (! (= (lfinite$d lNil$ )true ):named a60 ))
(check-sat )
;(get-unsat-core )
