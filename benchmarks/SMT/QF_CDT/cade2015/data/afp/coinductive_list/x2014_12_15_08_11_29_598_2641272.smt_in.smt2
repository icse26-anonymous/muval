;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun x$ ()A$ )
(declare-fun y$ ()A_llist_set$ )
(declare-fun uu$ ()A_llist_a_llist_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun bot$ ()A_llist_set$ )
(declare-fun inf$ (A_llist_set$ A_llist_set$ )A_llist_set$ )
(declare-fun uua$ ()A_llist_a_llist_fun$ )
(declare-fun uub$ ()A_llist_bool_fun$ )
(declare-fun uuc$ (A$ )A_llist_a_llist_fun$ )
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$ )Bool )
(declare-fun image$ (A_llist_a_llist_fun$ A_llist_set$ )A_llist_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uu$ ?v0 )(lCons$ x$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a uub$ ?v0 )(not (lnull$ ?v0 ))):pattern ((fun_app$a uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uua$ ?v0 )(ltl$ ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(lCons$ ?v0 ?v1 )):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (= y$ (image$ uu$ (image$ uua$ (inf$ y$ (collect$ uub$ )))))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 y$ )(not (fun_app$a (fun_app$b lprefix$ ?v0 )lNil$ )))):named a5 ))
(assert (! (member$ (lCons$ x$ xs$ )y$ ):named a6 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ (lCons$ ?v0 ?v1 )y$ )false ))false ):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (not (= y$ bot$ )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist_set$ ))(= (inf$ (image$ (uuc$ ?v0 )?v1 )(collect$ uub$ ))(image$ (uuc$ ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (lnull$ ?v0 ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (ltl$ (lCons$ ?v0 ?v1 ))?v1 ):pattern ((lCons$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))(not (lnull$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(lnull$ (ltl$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (lnull$ (lCons$ ?v0 ?v1 )))):named a18 ))
(assert (! (not (= (inf$ y$ (collect$ uub$ ))bot$ )):named a19 ))
(assert (! (chain$ lprefix$ y$ ):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (fun_app$b lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$a (fun_app$b lprefix$ ?v1 )?v3 ))):pattern ((fun_app$a (fun_app$b lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a21 ))
(check-sat )
;(get-unsat-core )
