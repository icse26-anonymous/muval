;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort Bool_a_b_prod_fun$ 0 )
(declare-sort A_b_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_a_b_prod_bool_fun_fun$ 0 )
(declare-sort A_b_prod_a_bool_fun_fun$ 0 )
(declare-sort A_b_prod_b_bool_fun_fun$ 0 )
(declare-sort A_b_prod_llist_bool_fun$ 0 )
(declare-sort B_a_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun_a_b_bool_fun_fun_fun$ 0 )
(declare-sort A_b_a_b_prod_fun_fun_a_b_bool_fun_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))(A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-fun lNil$b ()A_b_prod_llist$)
(declare-fun lhd$b (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$b (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$b (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()B_b_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uub$ ()A_a_bool_fun_fun$ )
(declare-fun uuc$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun uud$ ()A_b_prod_a_b_prod_bool_fun_fun$ )
(declare-fun uue$ ()A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )
(declare-fun uuf$ (Bool )A_b_bool_fun_fun_a_b_bool_fun_fun_fun$ )
(declare-fun uug$ (A_b_a_b_prod_fun_fun$ A_b_a_b_prod_fun_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun uuh$ (A_b_bool_fun_fun$ )A_b_a_b_prod_fun_fun_a_b_bool_fun_fun_fun$ )
(declare-fun uui$ (Bool_a_b_prod_fun$ A_b_bool_fun_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun uuj$ (A_b_prod_bool_fun$ )A_b_a_b_prod_fun_fun_a_b_bool_fun_fun_fun$ )
(declare-fun uuk$ (A_b_prod_a_b_prod_fun$ A_b_a_b_prod_fun_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun uul$ (Bool_bool_fun$ )A_b_bool_fun_fun_a_b_bool_fun_fun_fun$ )
(declare-fun lset$ (A_b_prod_llist$ )A_b_prod_set$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun lset$b (B_llist$ )B_set$ )
(declare-fun member$ (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun fun_app$ (A_b_prod_llist_bool_fun$ A_b_prod_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (B$ B_set$ )Bool )
(declare-fun fun_app$a (A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist$ )A_b_prod_llist_bool_fun$ )
(declare-fun fun_app$b (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$c (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$f (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$g (A_b_prod_a_b_prod_bool_fun_fun$ A_b_prod$ )A_b_prod_bool_fun$ )
(declare-fun fun_app$h (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$i (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$j (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$k (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$l (B_a_b_prod_fun$ B$ )A_b_prod$ )
(declare-fun fun_app$m (A_b_a_b_prod_fun_fun$ A$ )B_a_b_prod_fun$ )
(declare-fun fun_app$n (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$o (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$p (A_b_a_b_prod_fun_fun_a_b_bool_fun_fun_fun$ A_b_a_b_prod_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun fun_app$q (A_b_bool_fun_fun_a_b_bool_fun_fun_fun$ A_b_bool_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun fun_app$r (Bool_a_b_prod_fun$ Bool )A_b_prod$ )
(declare-fun fun_app$s (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$t (A_b_prod_a_bool_fun_fun$ A_b_prod$ )A_bool_fun$ )
(declare-fun fun_app$u (A_b_prod_b_bool_fun_fun$ A_b_prod$ )B_bool_fun$ )
(declare-fun fun_app$v (A_a_b_prod_bool_fun_fun$ A$ )A_b_prod_bool_fun$ )
(declare-fun fun_app$w (B_a_b_prod_bool_fun_fun$ B$ )A_b_prod_bool_fun$ )
(declare-fun fun_app$x (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun lmember$a (B$ B_llist$ )Bool )
(declare-fun lmember$b (A_b_prod$ A_b_prod_llist$ )Bool )
(declare-fun case_prod$ (A_b_a_b_prod_fun_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun case_prod$a (A_b_bool_fun_fun$ )A_b_prod_bool_fun$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun llist_all2$a (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (A_b_prod_a_b_prod_bool_fun_fun$ )A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )
(declare-fun llist_all2$d (A_b_prod_a_bool_fun_fun$ A_b_prod_llist$ A_llist$ )Bool )
(declare-fun llist_all2$e (A_b_prod_b_bool_fun_fun$ A_b_prod_llist$ B_llist$ )Bool )
(declare-fun llist_all2$f (A_a_b_prod_bool_fun_fun$ A_llist$ A_b_prod_llist$ )Bool )
(declare-fun llist_all2$g (B_a_b_prod_bool_fun_fun$ B_llist$ A_b_prod_llist$ )Bool )
(declare-fun llist_all2$h (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun pred_llist$a (B_bool_fun$ B_llist$ )Bool )
(declare-fun pred_llist$b (A_b_prod_bool_fun$ A_b_prod_llist$ )Bool )
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(! (= (fun_app$ (fun_app$a uue$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uue$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$d (fun_app$e uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uuc$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ ))(! (= (fun_app$f (fun_app$g uud$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uud$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$h (fun_app$i uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$h (fun_app$i uu$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$j (fun_app$k uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$j (fun_app$k uub$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$l (fun_app$m (uug$ ?v0 ?v1 )?v2 )?v3 )(fun_app$n (case_prod$ ?v0 )(fun_app$l (fun_app$m ?v1 ?v2 )?v3 ))):pattern ((fun_app$l (fun_app$m (uug$ ?v0 ?v1 )?v2 )?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$o (fun_app$p (uuh$ ?v0 )?v1 )?v2 )?v3 )(fun_app$f (case_prod$a ?v0 )(fun_app$l (fun_app$m ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$o (fun_app$p (uuh$ ?v0 )?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_bool_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$o (fun_app$q (uuf$ ?v0 )?v1 )?v2 )?v3 )(and ?v0 (fun_app$h (fun_app$o ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$o (fun_app$q (uuf$ ?v0 )?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$l (fun_app$m (uuk$ ?v0 ?v1 )?v2 )?v3 )(fun_app$n ?v0 (fun_app$l (fun_app$m ?v1 ?v2 )?v3 ))):pattern ((fun_app$l (fun_app$m (uuk$ ?v0 ?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$o (fun_app$p (uuj$ ?v0 )?v1 )?v2 )?v3 )(fun_app$f ?v0 (fun_app$l (fun_app$m ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$o (fun_app$p (uuj$ ?v0 )?v1 )?v2 )?v3 )))):named a10 ))
(assert (! (forall ((?v0 Bool_a_b_prod_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$l (fun_app$m (uui$ ?v0 ?v1 )?v2 )?v3 )(fun_app$r ?v0 (fun_app$h (fun_app$o ?v1 ?v2 )?v3 ))):pattern ((fun_app$l (fun_app$m (uui$ ?v0 ?v1 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$o (fun_app$q (uul$ ?v0 )?v1 )?v2 )?v3 )(fun_app$s ?v0 (fun_app$h (fun_app$o ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$o (fun_app$q (uul$ ?v0 )?v1 )?v2 )?v3 )))):named a12 ))
(assert (! (not (= (llist_all2$ p$ xs$ ys$ )(and (= (llength$ xs$ )(llength$a ys$ ))(forall ((?v0 A_b_prod$ ))(=> (member$ ?v0 (lset$ (lzip$ xs$ ys$ )))(fun_app$f (case_prod$a p$ )?v0 )))))):named a13 ))
(assert (! (= (llist_all2$a uu$ )uua$ ):named a14 ))
(assert (! (= (llist_all2$b uub$ )uuc$ ):named a15 ))
(assert (! (= (llist_all2$c uud$ )uue$ ):named a16 ))
(assert (! (forall ((?v0 A_b_prod_a_bool_fun_fun$ )(?v1 A_b_prod_llist$ )(?v2 A_llist$ )(?v3 A_b_prod_a_bool_fun_fun$ ))(=> (and (llist_all2$d ?v0 ?v1 ?v2 )(forall ((?v4 A_b_prod$ )(?v5 A$ ))(=> (and (member$ ?v4 (lset$ ?v1 ))(and (member$a ?v5 (lset$a ?v2 ))(fun_app$j (fun_app$t ?v0 ?v4 )?v5 )))(fun_app$j (fun_app$t ?v3 ?v4 )?v5 ))))(llist_all2$d ?v3 ?v1 ?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_b_prod_b_bool_fun_fun$ )(?v1 A_b_prod_llist$ )(?v2 B_llist$ )(?v3 A_b_prod_b_bool_fun_fun$ ))(=> (and (llist_all2$e ?v0 ?v1 ?v2 )(forall ((?v4 A_b_prod$ )(?v5 B$ ))(=> (and (member$ ?v4 (lset$ ?v1 ))(and (member$b ?v5 (lset$b ?v2 ))(fun_app$h (fun_app$u ?v0 ?v4 )?v5 )))(fun_app$h (fun_app$u ?v3 ?v4 )?v5 ))))(llist_all2$e ?v3 ?v1 ?v2 ))):named a18 ))
(assert (! (forall ((?v0 A_a_b_prod_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ )(?v3 A_a_b_prod_bool_fun_fun$ ))(=> (and (llist_all2$f ?v0 ?v1 ?v2 )(forall ((?v4 A$ )(?v5 A_b_prod$ ))(=> (and (member$a ?v4 (lset$a ?v1 ))(and (member$ ?v5 (lset$ ?v2 ))(fun_app$f (fun_app$v ?v0 ?v4 )?v5 )))(fun_app$f (fun_app$v ?v3 ?v4 )?v5 ))))(llist_all2$f ?v3 ?v1 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$e (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (lset$a ?v1 ))(and (member$a ?v5 (lset$a ?v2 ))(fun_app$j (fun_app$k ?v0 ?v4 )?v5 )))(fun_app$j (fun_app$k ?v3 ?v4 )?v5 ))))(fun_app$d (fun_app$e (llist_all2$b ?v3 )?v1 )?v2 ))):named a20 ))
(assert (! (forall ((?v0 B_a_b_prod_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_b_prod_llist$ )(?v3 B_a_b_prod_bool_fun_fun$ ))(=> (and (llist_all2$g ?v0 ?v1 ?v2 )(forall ((?v4 B$ )(?v5 A_b_prod$ ))(=> (and (member$b ?v4 (lset$b ?v1 ))(and (member$ ?v5 (lset$ ?v2 ))(fun_app$f (fun_app$w ?v0 ?v4 )?v5 )))(fun_app$f (fun_app$w ?v3 ?v4 )?v5 ))))(llist_all2$g ?v3 ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (llist_all2$h ?v0 ?v1 ?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (and (member$b ?v4 (lset$b ?v1 ))(and (member$a ?v5 (lset$a ?v2 ))(fun_app$j (fun_app$x ?v0 ?v4 )?v5 )))(fun_app$j (fun_app$x ?v3 ?v4 )?v5 ))))(llist_all2$h ?v3 ?v1 ?v2 ))):named a22 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$b ?v4 (lset$b ?v1 ))(and (member$b ?v5 (lset$b ?v2 ))(fun_app$h (fun_app$i ?v0 ?v4 )?v5 )))(fun_app$h (fun_app$i ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$a ?v3 )?v1 )?v2 ))):named a23 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ )(?v3 A_b_prod_a_b_prod_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0 )?v1 )?v2 )(forall ((?v4 A_b_prod$ )(?v5 A_b_prod$ ))(=> (and (member$ ?v4 (lset$ ?v1 ))(and (member$ ?v5 (lset$ ?v2 ))(fun_app$f (fun_app$g ?v0 ?v4 )?v5 )))(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$c ?v3 )?v1 )?v2 ))):named a24 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (and (member$a ?v4 (lset$a ?v1 ))(and (member$b ?v5 (lset$b ?v2 ))(fun_app$h (fun_app$o ?v0 ?v4 )?v5 )))(fun_app$h (fun_app$o ?v3 ?v4 )?v5 ))))(llist_all2$ ?v3 ?v1 ?v2 ))):named a25 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$f (case_prod$a (fun_app$q (uuf$ ?v0 )?v1 ))?v2 )(and ?v0 (fun_app$f (case_prod$a ?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (pred_llist$ ?v0 ?v1 )(forall ((?v2 A$ ))(=> (member$a ?v2 (lset$a ?v1 ))(fun_app$j ?v0 ?v2 ))))):named a27 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(= (pred_llist$a ?v0 ?v1 )(forall ((?v2 B$ ))(=> (member$b ?v2 (lset$b ?v1 ))(fun_app$h ?v0 ?v2 ))))):named a28 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod_llist$ ))(= (pred_llist$b ?v0 ?v1 )(forall ((?v2 A_b_prod$ ))(=> (member$ ?v2 (lset$ ?v1 ))(fun_app$f ?v0 ?v2 ))))):named a29 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$n (case_prod$ ?v0 )(fun_app$n (case_prod$ ?v1 )?v2 ))(fun_app$n (case_prod$ (uug$ ?v0 ?v1 ))?v2 ))):named a30 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$f (case_prod$a ?v0 )(fun_app$n (case_prod$ ?v1 )?v2 ))(fun_app$f (case_prod$a (fun_app$p (uuh$ ?v0 )?v1 ))?v2 ))):named a31 ))
(assert (! (forall ((?v0 Bool_a_b_prod_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$r ?v0 (fun_app$f (case_prod$a ?v1 )?v2 ))(fun_app$n (case_prod$ (uui$ ?v0 ?v1 ))?v2 ))):named a32 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$f ?v0 (fun_app$n (case_prod$ ?v1 )?v2 ))(fun_app$f (case_prod$a (fun_app$p (uuj$ ?v0 )?v1 ))?v2 ))):named a33 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$n ?v0 (fun_app$n (case_prod$ ?v1 )?v2 ))(fun_app$n (case_prod$ (uuk$ ?v0 ?v1 ))?v2 ))):named a34 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$s ?v0 (fun_app$f (case_prod$a ?v1 )?v2 ))(fun_app$f (case_prod$a (fun_app$q (uul$ ?v0 )?v1 ))?v2 ))):named a35 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B_llist$ ))(=> (member$ (pair$ ?v0 ?v1 )(lset$ (lzip$ ?v2 ?v3 )))(member$b ?v1 (lset$b ?v3 )))):named a36 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B_llist$ ))(=> (member$ (pair$ ?v0 ?v1 )(lset$ (lzip$ ?v2 ?v3 )))(member$a ?v0 (lset$a ?v2 )))):named a37 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$a ?v0 (lset$a ?v1 ))(lmember$ ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(= (member$b ?v0 (lset$b ?v1 ))(lmember$a ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$b ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_bool_fun$ ))(= (forall ((?v2 A$ ))(=> (member$a ?v2 ?v0 )(fun_app$j ?v1 ?v2 )))(forall ((?v2 A$ ))(=> (member$a ?v2 ?v0 )(fun_app$j ?v1 ?v2 ))))):named a41 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_bool_fun$ ))(= (forall ((?v2 B$ ))(=> (member$b ?v2 ?v0 )(fun_app$h ?v1 ?v2 )))(forall ((?v2 B$ ))(=> (member$b ?v2 ?v0 )(fun_app$h ?v1 ?v2 ))))):named a42 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_bool_fun$ ))(= (forall ((?v2 A_b_prod$ ))(=> (member$ ?v2 ?v0 )(fun_app$f ?v1 ?v2 )))(forall ((?v2 A_b_prod$ ))(=> (member$ ?v2 ?v0 )(fun_app$f ?v1 ?v2 ))))):named a43 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_bool_fun$ )(?v2 A_bool_fun$ ))(=> (and (forall ((?v3 A$ ))(=> (and (member$a ?v3 ?v0 )(fun_app$j ?v1 ?v3 ))(fun_app$j ?v2 ?v3 )))(forall ((?v3 A$ ))(=> (member$a ?v3 ?v0 )(fun_app$j ?v1 ?v3 ))))(forall ((?v3 A$ ))(=> (member$a ?v3 ?v0 )(fun_app$j ?v2 ?v3 ))))):named a44 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_bool_fun$ )(?v2 B_bool_fun$ ))(=> (and (forall ((?v3 B$ ))(=> (and (member$b ?v3 ?v0 )(fun_app$h ?v1 ?v3 ))(fun_app$h ?v2 ?v3 )))(forall ((?v3 B$ ))(=> (member$b ?v3 ?v0 )(fun_app$h ?v1 ?v3 ))))(forall ((?v3 B$ ))(=> (member$b ?v3 ?v0 )(fun_app$h ?v2 ?v3 ))))):named a45 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_bool_fun$ )(?v2 A_b_prod_bool_fun$ ))(=> (and (forall ((?v3 A_b_prod$ ))(=> (and (member$ ?v3 ?v0 )(fun_app$f ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))(forall ((?v3 A_b_prod$ ))(=> (member$ ?v3 ?v0 )(fun_app$f ?v1 ?v3 ))))(forall ((?v3 A_b_prod$ ))(=> (member$ ?v3 ?v0 )(fun_app$f ?v2 ?v3 ))))):named a46 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a48 ))
(check-sat )
;(get-unsat-core )
