;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun r$ (A$ A$ )Bool )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(assert (! (not (or (= xs$ ys$ )(exists ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(and (lfinite$ ?v0 )(and (= xs$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (= ys$ (fun_app$ (lappend$ ?v0 )(lCons$ ?v2 ?v3 )))(or (= ?v1 lNil$ )(r$ (lhd$ ?v1 )?v2 )))))))):named a0 ))
(assert (! (lfinite$ (ltake$ (enat$ n$ )xs$ )):named a1 ))
(assert (! (= xs$ (fun_app$ (lappend$ (ltake$ (enat$ n$ )xs$ ))(ldrop$ (enat$ n$ )xs$ ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (r$ (lnth$ xs$ n$ )(lnth$ ys$ n$ )):named a4 ))
(assert (! (= (ltake$ (enat$ n$ )xs$ )(ltake$ (enat$ n$ )ys$ )):named a5 ))
(assert (! (r$ (lhd$ (ldrop$ (enat$ n$ )xs$ ))(lnth$ ys$ n$ )):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$ (lappend$ ?v1 )?v2 ))):pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a11 ))
(assert (! (= (lfinite$ lNil$ )true ):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a13 ))
(assert (! (= ys$ (fun_app$ (lappend$ (ltake$ (enat$ n$ )xs$ ))(lCons$ (lnth$ ys$ n$ )(ldrop$ (enat$ (suc$ n$ ))ys$ )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$ (lappend$ ?v0 )?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0 )?v1 ))?v2 )(fun_app$ (lappend$ ?v0 )(fun_app$ (lappend$ ?v1 )?v2 )))):named a17 ))
(check-sat )
;(get-unsat-core )
