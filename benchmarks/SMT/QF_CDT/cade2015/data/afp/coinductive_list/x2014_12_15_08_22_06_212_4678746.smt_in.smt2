;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort B_a_prod_b_a_prod_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_fun$ 0 )
(declare-sort A_a_prod_llist_enat_fun$ 0 )
(declare-sort A_b_prod_llist_enat_fun$ 0 )
(declare-sort B_a_prod_llist_enat_fun$ 0 )
(declare-sort B_b_prod_llist_enat_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_a_fun$ 0 )
(declare-sort A_a_b_prod_prod_llist_enat_fun$ 0 )
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_fun$ 0 )
(declare-sort B_a_prod_llist_b_a_prod_llist_fun$ 0 )
(declare-sort B_b_prod_llist_b_b_prod_llist_fun$ 0 )
(declare-sort A_a_b_prod_prod_a_a_b_prod_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_llist_enat_fun$ 0 )
(declare-sort A_a_b_prod_a_b_prod_prod_prod_llist_enat_fun$ 0 )
(declare-sort A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_llist_a_b_prod_a_b_prod_prod_llist_fun$ 0 )
(declare-sort A_a_b_prod_a_b_prod_prod_prod_a_a_b_prod_a_b_prod_prod_prod_fun$ 0 )
(declare-sort A_a_b_prod_a_b_prod_prod_prod_llist_a_a_b_prod_a_b_prod_prod_prod_llist_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))(A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-datatypes ()((B_b_prod$ (pair$a (fst$a B$ )(snd$a B$ )))))
(declare-sort B_b_prod_llist$ 0)
(declare-fun lNil$c ()B_b_prod_llist$)
(declare-fun lhd$c (B_b_prod_llist$)B_b_prod$)
(declare-fun ltl$c (B_b_prod_llist$)B_b_prod_llist$)
(declare-fun lCons$c (B_b_prod$ B_b_prod_llist$ )B_b_prod_llist$)
(declare-datatypes ()((B_a_prod$ (pair$b (fst$b B$ )(snd$b A$ )))))
(declare-sort B_a_prod_llist$ 0)
(declare-fun lNil$d ()B_a_prod_llist$)
(declare-fun lhd$d (B_a_prod_llist$)B_a_prod$)
(declare-fun ltl$d (B_a_prod_llist$)B_a_prod_llist$)
(declare-fun lCons$d (B_a_prod$ B_a_prod_llist$ )B_a_prod_llist$)
(declare-datatypes ()((A_b_prod_a_b_prod_prod$ (pair$c (fst$c A_b_prod$ )(snd$c A_b_prod$ )))(A_a_b_prod_a_b_prod_prod_prod$ (pair$d (fst$d A$ )(snd$d A_b_prod_a_b_prod_prod$ )))))
(declare-sort A_a_b_prod_a_b_prod_prod_prod_llist$ 0)
(declare-fun lNil$e ()A_a_b_prod_a_b_prod_prod_prod_llist$)
(declare-fun lhd$e (A_a_b_prod_a_b_prod_prod_prod_llist$)A_a_b_prod_a_b_prod_prod_prod$)
(declare-fun ltl$e (A_a_b_prod_a_b_prod_prod_prod_llist$)A_a_b_prod_a_b_prod_prod_prod_llist$)
(declare-fun lCons$e (A_a_b_prod_a_b_prod_prod_prod$ A_a_b_prod_a_b_prod_prod_prod_llist$ )A_a_b_prod_a_b_prod_prod_prod_llist$)
(declare-datatypes ()((A_a_b_prod_prod$ (pair$e (fst$e A$ )(snd$e A_b_prod$ )))))
(declare-sort A_a_b_prod_prod_llist$ 0)
(declare-fun lNil$f ()A_a_b_prod_prod_llist$)
(declare-fun lhd$f (A_a_b_prod_prod_llist$)A_a_b_prod_prod$)
(declare-fun ltl$f (A_a_b_prod_prod_llist$)A_a_b_prod_prod_llist$)
(declare-fun lCons$f (A_a_b_prod_prod$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$)
(declare-datatypes ()((A_a_prod$ (pair$f (fst$f A$ )(snd$f A$ )))))
(declare-sort A_a_prod_llist$ 0)
(declare-sort A_b_prod_a_b_prod_prod_llist$ 0)
(declare-fun lNil$g ()A_a_prod_llist$)
(declare-fun lhd$g (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$g (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$g (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-fun lNil$h ()A_b_prod_a_b_prod_prod_llist$)
(declare-fun lhd$h (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod$)
(declare-fun ltl$h (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod_llist$)
(declare-fun lCons$h (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$)
(declare-datatypes ()((A_b_prod_a_prod$ (pair$g (fst$g A_b_prod$ )(snd$g A$ )))))
(declare-sort A_b_prod_a_prod_llist$ 0)
(declare-fun lNil$i ()A_b_prod_a_prod_llist$)
(declare-fun lhd$i (A_b_prod_a_prod_llist$)A_b_prod_a_prod$)
(declare-fun ltl$i (A_b_prod_a_prod_llist$)A_b_prod_a_prod_llist$)
(declare-fun lCons$i (A_b_prod_a_prod$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$)
(declare-datatypes ()((A_b_prod_b_prod$ (pair$h (fst$h A_b_prod$ )(snd$h B$ )))))
(declare-sort A_b_prod_b_prod_llist$ 0)
(declare-fun lNil$j ()A_b_prod_b_prod_llist$)
(declare-fun lhd$j (A_b_prod_b_prod_llist$)A_b_prod_b_prod$)
(declare-fun ltl$j (A_b_prod_b_prod_llist$)A_b_prod_b_prod_llist$)
(declare-fun lCons$j (A_b_prod_b_prod$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$)
(declare-datatypes ()((B_a_b_prod_prod$ (pair$i (fst$i B$ )(snd$i A_b_prod$ )))))
(declare-sort B_a_b_prod_prod_llist$ 0)
(declare-fun lNil$k ()B_a_b_prod_prod_llist$)
(declare-fun lhd$k (B_a_b_prod_prod_llist$)B_a_b_prod_prod$)
(declare-fun ltl$k (B_a_b_prod_prod_llist$)B_a_b_prod_prod_llist$)
(declare-fun lCons$k (B_a_b_prod_prod$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$)
(declare-fun us$ ()A_b_prod_llist$ )
(declare-fun vs$ ()A_b_prod_llist$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$ (B_b_prod_llist$ )B_b_prod_llist_enat_fun$ )
(declare-fun lmap$ (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$a (B_a_prod_llist$ )B_a_prod_llist_enat_fun$ )
(declare-fun llcp$b (A_a_b_prod_a_b_prod_prod_prod_llist$ )A_a_b_prod_a_b_prod_prod_prod_llist_enat_fun$ )
(declare-fun llcp$c (A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist_enat_fun$ )
(declare-fun llcp$d (A_a_prod_llist$ )A_a_prod_llist_enat_fun$ )
(declare-fun llcp$e (A_llist$ )A_llist_enat_fun$ )
(declare-fun llcp$f (B_llist$ )B_llist_enat_fun$ )
(declare-fun llcp$g (A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist_enat_fun$ )
(declare-fun llcp$h (A_b_prod_llist$ )A_b_prod_llist_enat_fun$ )
(declare-fun lmap$a (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$b (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$c (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$d (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$e (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$f (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$g (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lmap$h (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$i (A_b_prod_a_b_prod_prod_a_fun$ A_b_prod_a_b_prod_prod_llist$ )A_llist$ )
(declare-fun lnull$ (B_b_prod_llist$ )Bool )
(declare-fun lzip$a (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lzip$b (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$c (B_llist$ A_llist$ )B_a_prod_llist$ )
(declare-fun lzip$d (B_llist$ B_llist$ )B_b_prod_llist$ )
(declare-fun lzip$e (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$f (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$g (A_llist$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lzip$h (B_llist$ A_b_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ A_b_prod_a_b_prod_prod_llist$ )A_a_b_prod_a_b_prod_prod_prod_llist$ )
(declare-fun lnull$a (B_a_prod_llist$ )Bool )
(declare-fun lnull$b (A_a_b_prod_a_b_prod_prod_prod_llist$ )Bool )
(declare-fun lnull$c (A_a_b_prod_prod_llist$ )Bool )
(declare-fun lnull$d (A_a_prod_llist$ )Bool )
(declare-fun lnull$e (A_b_prod_a_b_prod_prod_llist$ )Bool )
(declare-fun lnull$f (A_llist$ )Bool )
(declare-fun lnull$g (B_llist$ )Bool )
(declare-fun lnull$h (A_b_prod_llist$ )Bool )
(declare-fun fun_app$ (A_b_prod_llist_a_b_prod_llist_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lappend$ (A_b_prod_llist$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun lfinite$ (B_b_prod_llist$ )Bool )
(declare-fun llength$ (A_b_prod_llist$ )Enat$ )
(declare-fun fun_app$a (B_b_prod_llist_b_b_prod_llist_fun$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun fun_app$b (B_a_prod_llist_b_a_prod_llist_fun$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun fun_app$c (A_a_b_prod_a_b_prod_prod_prod_llist_a_a_b_prod_a_b_prod_prod_prod_llist_fun$ A_a_b_prod_a_b_prod_prod_prod_llist$ )A_a_b_prod_a_b_prod_prod_prod_llist$ )
(declare-fun fun_app$d (A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun fun_app$e (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$f (A_b_prod_a_b_prod_prod_llist_a_b_prod_a_b_prod_prod_llist_fun$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun fun_app$g (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$h (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$i (B_b_prod_llist_enat_fun$ B_b_prod_llist$ )Enat$ )
(declare-fun fun_app$j (B_a_prod_llist_enat_fun$ B_a_prod_llist$ )Enat$ )
(declare-fun fun_app$k (A_a_b_prod_a_b_prod_prod_prod_llist_enat_fun$ A_a_b_prod_a_b_prod_prod_prod_llist$ )Enat$ )
(declare-fun fun_app$l (A_a_b_prod_prod_llist_enat_fun$ A_a_b_prod_prod_llist$ )Enat$ )
(declare-fun fun_app$m (A_a_prod_llist_enat_fun$ A_a_prod_llist$ )Enat$ )
(declare-fun fun_app$n (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$o (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun fun_app$p (A_b_prod_a_b_prod_prod_llist_enat_fun$ A_b_prod_a_b_prod_prod_llist$ )Enat$ )
(declare-fun fun_app$q (A_b_prod_llist_enat_fun$ A_b_prod_llist$ )Enat$ )
(declare-fun iterates$ (B_b_prod_b_b_prod_fun$ B_b_prod$ )B_b_prod_llist$ )
(declare-fun lappend$a (B_b_prod_llist$ )B_b_prod_llist_b_b_prod_llist_fun$ )
(declare-fun lappend$b (B_a_prod_llist$ )B_a_prod_llist_b_a_prod_llist_fun$ )
(declare-fun lappend$c (A_a_b_prod_a_b_prod_prod_prod_llist$ )A_a_b_prod_a_b_prod_prod_prod_llist_a_a_b_prod_a_b_prod_prod_prod_llist_fun$ )
(declare-fun lappend$d (A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ )
(declare-fun lappend$e (A_a_prod_llist$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun lappend$f (A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist_a_b_prod_a_b_prod_prod_llist_fun$ )
(declare-fun lappend$g (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lappend$h (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun lappend$i (A_b_prod_a_prod_llist$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lappend$j (A_b_prod_b_prod_llist$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lappend$k (B_a_b_prod_prod_llist$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun lfinite$a (B_a_prod_llist$ )Bool )
(declare-fun lfinite$b (A_a_b_prod_a_b_prod_prod_prod_llist$ )Bool )
(declare-fun lfinite$c (A_a_b_prod_prod_llist$ )Bool )
(declare-fun lfinite$d (A_a_prod_llist$ )Bool )
(declare-fun lfinite$e (A_llist$ )Bool )
(declare-fun lfinite$f (B_llist$ )Bool )
(declare-fun lfinite$g (A_b_prod_a_b_prod_prod_llist$ )Bool )
(declare-fun lfinite$h (A_b_prod_llist$ )Bool )
(declare-fun llength$a (A_llist$ )Enat$ )
(declare-fun llength$b (B_llist$ )Enat$ )
(declare-fun llength$c (A_b_prod_a_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$d (A_a_prod_llist$ )Enat$ )
(declare-fun llength$e (B_a_prod_llist$ )Enat$ )
(declare-fun llength$f (B_b_prod_llist$ )Enat$ )
(declare-fun llength$g (A_b_prod_a_prod_llist$ )Enat$ )
(declare-fun llength$h (A_b_prod_b_prod_llist$ )Enat$ )
(declare-fun llength$i (A_a_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$j (B_a_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$k (A_a_b_prod_a_b_prod_prod_prod_llist$ )Enat$ )
(declare-fun iterates$a (B_a_prod_b_a_prod_fun$ B_a_prod$ )B_a_prod_llist$ )
(declare-fun iterates$b (A_a_b_prod_a_b_prod_prod_prod_a_a_b_prod_a_b_prod_prod_prod_fun$ A_a_b_prod_a_b_prod_prod_prod$ )A_a_b_prod_a_b_prod_prod_prod_llist$ )
(declare-fun iterates$c (A_a_b_prod_prod_a_a_b_prod_prod_fun$ A_a_b_prod_prod$ )A_a_b_prod_prod_llist$ )
(declare-fun iterates$d (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod_llist$ )
(declare-fun iterates$e (A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ A_b_prod_a_b_prod_prod$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun iterates$f (A_a_fun$ A$ )A_llist$ )
(declare-fun iterates$g (B_b_fun$ B$ )B_llist$ )
(declare-fun iterates$h (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_llist$ )
(assert (! (not (= (llength$ (lzip$ xs$ ys$ ))(llength$ (fun_app$ (lappend$ us$ )vs$ )))):named a0 ))
(assert (! (= (lzip$ xs$ ys$ )(fun_app$ (lappend$ us$ )vs$ )):named a1 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod_llist$ )(?v2 B_b_prod_llist$ ))(= (fun_app$a (lappend$a (fun_app$a (lappend$a ?v0 )?v1 ))?v2 )(fun_app$a (lappend$a ?v0 )(fun_app$a (lappend$a ?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod_llist$ ))(= (fun_app$b (lappend$b (fun_app$b (lappend$b ?v0 )?v1 ))?v2 )(fun_app$b (lappend$b ?v0 )(fun_app$b (lappend$b ?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$ )(?v1 A_a_b_prod_a_b_prod_prod_prod_llist$ )(?v2 A_a_b_prod_a_b_prod_prod_prod_llist$ ))(= (fun_app$c (lappend$c (fun_app$c (lappend$c ?v0 )?v1 ))?v2 )(fun_app$c (lappend$c ?v0 )(fun_app$c (lappend$c ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod_llist$ )(?v2 A_a_b_prod_prod_llist$ ))(= (fun_app$d (lappend$d (fun_app$d (lappend$d ?v0 )?v1 ))?v2 )(fun_app$d (lappend$d ?v0 )(fun_app$d (lappend$d ?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_llist$ ))(= (fun_app$e (lappend$e (fun_app$e (lappend$e ?v0 )?v1 ))?v2 )(fun_app$e (lappend$e ?v0 )(fun_app$e (lappend$e ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$ )(?v1 A_b_prod_a_b_prod_prod_llist$ )(?v2 A_b_prod_a_b_prod_prod_llist$ ))(= (fun_app$f (lappend$f (fun_app$f (lappend$f ?v0 )?v1 ))?v2 )(fun_app$f (lappend$f ?v0 )(fun_app$f (lappend$f ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$g (lappend$g (fun_app$g (lappend$g ?v0 )?v1 ))?v2 )(fun_app$g (lappend$g ?v0 )(fun_app$g (lappend$g ?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$h (lappend$h (fun_app$h (lappend$h ?v0 )?v1 ))?v2 )(fun_app$h (lappend$h ?v0 )(fun_app$h (lappend$h ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0 )?v1 ))?v2 )(fun_app$ (lappend$ ?v0 )(fun_app$ (lappend$ ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ ))(=> (= (llength$a ?v0 )(llength$b ?v1 ))(= (lzip$ (fun_app$g (lappend$g ?v0 )?v2 )(fun_app$h (lappend$h ?v1 )?v3 ))(fun_app$ (lappend$ (lzip$ ?v0 ?v1 ))(lzip$ ?v2 ?v3 ))))):named a11 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ )(?v3 A_b_prod_llist$ ))(=> (= (llength$ ?v0 )(llength$ ?v1 ))(= (lzip$a (fun_app$ (lappend$ ?v0 )?v2 )(fun_app$ (lappend$ ?v1 )?v3 ))(fun_app$f (lappend$f (lzip$a ?v0 ?v1 ))(lzip$a ?v2 ?v3 ))))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (= (llength$a ?v0 )(llength$a ?v1 ))(= (lzip$b (fun_app$g (lappend$g ?v0 )?v2 )(fun_app$g (lappend$g ?v1 )?v3 ))(fun_app$e (lappend$e (lzip$b ?v0 ?v1 ))(lzip$b ?v2 ?v3 ))))):named a13 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_llist$ ))(=> (= (llength$b ?v0 )(llength$a ?v1 ))(= (lzip$c (fun_app$h (lappend$h ?v0 )?v2 )(fun_app$g (lappend$g ?v1 )?v3 ))(fun_app$b (lappend$b (lzip$c ?v0 ?v1 ))(lzip$c ?v2 ?v3 ))))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist$ ))(=> (= (llength$b ?v0 )(llength$b ?v1 ))(= (lzip$d (fun_app$h (lappend$h ?v0 )?v2 )(fun_app$h (lappend$h ?v1 )?v3 ))(fun_app$a (lappend$a (lzip$d ?v0 ?v1 ))(lzip$d ?v2 ?v3 ))))):named a15 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ )(?v3 A_llist$ ))(=> (= (llength$ ?v0 )(llength$a ?v1 ))(= (lzip$e (fun_app$ (lappend$ ?v0 )?v2 )(fun_app$g (lappend$g ?v1 )?v3 ))(lappend$i (lzip$e ?v0 ?v1 )(lzip$e ?v2 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ )(?v2 A_b_prod_llist$ )(?v3 B_llist$ ))(=> (= (llength$ ?v0 )(llength$b ?v1 ))(= (lzip$f (fun_app$ (lappend$ ?v0 )?v2 )(fun_app$h (lappend$h ?v1 )?v3 ))(lappend$j (lzip$f ?v0 ?v1 )(lzip$f ?v2 ?v3 ))))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_llist$ )(?v3 A_b_prod_llist$ ))(=> (= (llength$a ?v0 )(llength$ ?v1 ))(= (lzip$g (fun_app$g (lappend$g ?v0 )?v2 )(fun_app$ (lappend$ ?v1 )?v3 ))(fun_app$d (lappend$d (lzip$g ?v0 ?v1 ))(lzip$g ?v2 ?v3 ))))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ )(?v2 B_llist$ )(?v3 A_b_prod_llist$ ))(=> (= (llength$b ?v0 )(llength$ ?v1 ))(= (lzip$h (fun_app$h (lappend$h ?v0 )?v2 )(fun_app$ (lappend$ ?v1 )?v3 ))(lappend$k (lzip$h ?v0 ?v1 )(lzip$h ?v2 ?v3 ))))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_a_b_prod_prod_llist$ )(?v2 A_llist$ )(?v3 A_b_prod_a_b_prod_prod_llist$ ))(=> (= (llength$a ?v0 )(llength$c ?v1 ))(= (lzip$i (fun_app$g (lappend$g ?v0 )?v2 )(fun_app$f (lappend$f ?v1 )?v3 ))(fun_app$c (lappend$c (lzip$i ?v0 ?v1 ))(lzip$i ?v2 ?v3 ))))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (llength$ (lzip$ ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$b ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (llength$c (lzip$a ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$ ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (llength$d (lzip$b ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$a ?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (llength$e (lzip$c ?v0 ?v1 ))(min$ (llength$b ?v0 )(llength$a ?v1 )))):named a24 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (llength$f (lzip$d ?v0 ?v1 ))(min$ (llength$b ?v0 )(llength$b ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(= (llength$g (lzip$e ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$a ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(= (llength$h (lzip$f ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$b ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(= (llength$i (lzip$g ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$ ?v1 )))):named a28 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(= (llength$j (lzip$h ?v0 ?v1 ))(min$ (llength$b ?v0 )(llength$ ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_a_b_prod_prod_llist$ ))(= (llength$k (lzip$i ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$c ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod_llist$ ))(= (llength$f (fun_app$a (lappend$a ?v0 )?v1 ))(plus$ (llength$f ?v0 )(llength$f ?v1 )))):named a31 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ ))(= (llength$e (fun_app$b (lappend$b ?v0 )?v1 ))(plus$ (llength$e ?v0 )(llength$e ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$ )(?v1 A_a_b_prod_a_b_prod_prod_prod_llist$ ))(= (llength$k (fun_app$c (lappend$c ?v0 )?v1 ))(plus$ (llength$k ?v0 )(llength$k ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod_llist$ ))(= (llength$i (fun_app$d (lappend$d ?v0 )?v1 ))(plus$ (llength$i ?v0 )(llength$i ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(= (llength$d (fun_app$e (lappend$e ?v0 )?v1 ))(plus$ (llength$d ?v0 )(llength$d ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (llength$a (fun_app$g (lappend$g ?v0 )?v1 ))(plus$ (llength$a ?v0 )(llength$a ?v1 )))):named a36 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (llength$b (fun_app$h (lappend$h ?v0 )?v1 ))(plus$ (llength$b ?v0 )(llength$b ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$ )(?v1 A_b_prod_a_b_prod_prod_llist$ ))(= (llength$c (fun_app$f (lappend$f ?v0 )?v1 ))(plus$ (llength$c ?v0 )(llength$c ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (llength$ (fun_app$ (lappend$ ?v0 )?v1 ))(plus$ (llength$ ?v0 )(llength$ ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(! (= (fun_app$i (llcp$ ?v0 )?v0 )(llength$f ?v0 )):pattern ((llcp$ ?v0 )))):named a40 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (= (fun_app$j (llcp$a ?v0 )?v0 )(llength$e ?v0 )):pattern ((llcp$a ?v0 )))):named a41 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$ ))(! (= (fun_app$k (llcp$b ?v0 )?v0 )(llength$k ?v0 )):pattern ((llcp$b ?v0 )))):named a42 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(! (= (fun_app$l (llcp$c ?v0 )?v0 )(llength$i ?v0 )):pattern ((llcp$c ?v0 )))):named a43 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$m (llcp$d ?v0 )?v0 )(llength$d ?v0 )):pattern ((llcp$d ?v0 )))):named a44 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$n (llcp$e ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$e ?v0 )))):named a45 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$o (llcp$f ?v0 )?v0 )(llength$b ?v0 )):pattern ((llcp$f ?v0 )))):named a46 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$ ))(! (= (fun_app$p (llcp$g ?v0 )?v0 )(llength$c ?v0 )):pattern ((llcp$g ?v0 )))):named a47 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$q (llcp$h ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$h ?v0 )))):named a48 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod_llist$ )(?v2 B_b_prod_llist$ )(?v3 B_b_prod_llist$ ))(=> (= (llength$f ?v0 )(llength$f ?v1 ))(= (= (fun_app$a (lappend$a ?v0 )?v2 )(fun_app$a (lappend$a ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$ ?v0 )(= ?v2 ?v3 )))))):named a49 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod_llist$ )(?v3 B_a_prod_llist$ ))(=> (= (llength$e ?v0 )(llength$e ?v1 ))(= (= (fun_app$b (lappend$b ?v0 )?v2 )(fun_app$b (lappend$b ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$a ?v0 )(= ?v2 ?v3 )))))):named a50 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$ )(?v1 A_a_b_prod_a_b_prod_prod_prod_llist$ )(?v2 A_a_b_prod_a_b_prod_prod_prod_llist$ )(?v3 A_a_b_prod_a_b_prod_prod_prod_llist$ ))(=> (= (llength$k ?v0 )(llength$k ?v1 ))(= (= (fun_app$c (lappend$c ?v0 )?v2 )(fun_app$c (lappend$c ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$b ?v0 )(= ?v2 ?v3 )))))):named a51 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod_llist$ )(?v2 A_a_b_prod_prod_llist$ )(?v3 A_a_b_prod_prod_llist$ ))(=> (= (llength$i ?v0 )(llength$i ?v1 ))(= (= (fun_app$d (lappend$d ?v0 )?v2 )(fun_app$d (lappend$d ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$c ?v0 )(= ?v2 ?v3 )))))):named a52 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_llist$ )(?v3 A_a_prod_llist$ ))(=> (= (llength$d ?v0 )(llength$d ?v1 ))(= (= (fun_app$e (lappend$e ?v0 )?v2 )(fun_app$e (lappend$e ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$d ?v0 )(= ?v2 ?v3 )))))):named a53 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (= (llength$a ?v0 )(llength$a ?v1 ))(= (= (fun_app$g (lappend$g ?v0 )?v2 )(fun_app$g (lappend$g ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$e ?v0 )(= ?v2 ?v3 )))))):named a54 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist$ ))(=> (= (llength$b ?v0 )(llength$b ?v1 ))(= (= (fun_app$h (lappend$h ?v0 )?v2 )(fun_app$h (lappend$h ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$f ?v0 )(= ?v2 ?v3 )))))):named a55 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$ )(?v1 A_b_prod_a_b_prod_prod_llist$ )(?v2 A_b_prod_a_b_prod_prod_llist$ )(?v3 A_b_prod_a_b_prod_prod_llist$ ))(=> (= (llength$c ?v0 )(llength$c ?v1 ))(= (= (fun_app$f (lappend$f ?v0 )?v2 )(fun_app$f (lappend$f ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$g ?v0 )(= ?v2 ?v3 )))))):named a56 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ )(?v3 A_b_prod_llist$ ))(=> (= (llength$ ?v0 )(llength$ ?v1 ))(= (= (fun_app$ (lappend$ ?v0 )?v2 )(fun_app$ (lappend$ ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$h ?v0 )(= ?v2 ?v3 )))))):named a57 ))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$ )(?v1 B_b_prod$ )(?v2 B_b_prod_llist$ ))(= (fun_app$a (lappend$a (iterates$ ?v0 ?v1 ))?v2 )(iterates$ ?v0 ?v1 ))):named a58 ))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$ )(?v1 B_a_prod$ )(?v2 B_a_prod_llist$ ))(= (fun_app$b (lappend$b (iterates$a ?v0 ?v1 ))?v2 )(iterates$a ?v0 ?v1 ))):named a59 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_a_a_b_prod_a_b_prod_prod_prod_fun$ )(?v1 A_a_b_prod_a_b_prod_prod_prod$ )(?v2 A_a_b_prod_a_b_prod_prod_prod_llist$ ))(= (fun_app$c (lappend$c (iterates$b ?v0 ?v1 ))?v2 )(iterates$b ?v0 ?v1 ))):named a60 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_a_a_b_prod_prod_fun$ )(?v1 A_a_b_prod_prod$ )(?v2 A_a_b_prod_prod_llist$ ))(= (fun_app$d (lappend$d (iterates$c ?v0 ?v1 ))?v2 )(iterates$c ?v0 ?v1 ))):named a61 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_llist$ ))(= (fun_app$e (lappend$e (iterates$d ?v0 ?v1 ))?v2 )(iterates$d ?v0 ?v1 ))):named a62 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ )(?v1 A_b_prod_a_b_prod_prod$ )(?v2 A_b_prod_a_b_prod_prod_llist$ ))(= (fun_app$f (lappend$f (iterates$e ?v0 ?v1 ))?v2 )(iterates$e ?v0 ?v1 ))):named a63 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_llist$ ))(= (fun_app$g (lappend$g (iterates$f ?v0 ?v1 ))?v2 )(iterates$f ?v0 ?v1 ))):named a64 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_llist$ ))(= (fun_app$h (lappend$h (iterates$g ?v0 ?v1 ))?v2 )(iterates$g ?v0 ?v1 ))):named a65 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_llist$ ))(= (fun_app$ (lappend$ (iterates$h ?v0 ?v1 ))?v2 )(iterates$h ?v0 ?v1 ))):named a66 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(! (= (fun_app$a (lappend$a ?v0 )lNil$c )?v0 ):pattern ((lappend$a ?v0 )))):named a67 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (= (fun_app$b (lappend$b ?v0 )lNil$d )?v0 ):pattern ((lappend$b ?v0 )))):named a68 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$ ))(! (= (fun_app$c (lappend$c ?v0 )lNil$e )?v0 ):pattern ((lappend$c ?v0 )))):named a69 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(! (= (fun_app$d (lappend$d ?v0 )lNil$f )?v0 ):pattern ((lappend$d ?v0 )))):named a70 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$e (lappend$e ?v0 )lNil$g )?v0 ):pattern ((lappend$e ?v0 )))):named a71 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$ ))(! (= (fun_app$f (lappend$f ?v0 )lNil$h )?v0 ):pattern ((lappend$f ?v0 )))):named a72 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$g (lappend$g ?v0 )lNil$a )?v0 ):pattern ((lappend$g ?v0 )))):named a73 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$h (lappend$h ?v0 )lNil$b )?v0 ):pattern ((lappend$h ?v0 )))):named a74 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a75 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(! (= (fun_app$a (lappend$a lNil$c )?v0 )?v0 ):pattern ((fun_app$a (lappend$a lNil$c )?v0 )))):named a76 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (= (fun_app$b (lappend$b lNil$d )?v0 )?v0 ):pattern ((fun_app$b (lappend$b lNil$d )?v0 )))):named a77 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$ ))(! (= (fun_app$c (lappend$c lNil$e )?v0 )?v0 ):pattern ((fun_app$c (lappend$c lNil$e )?v0 )))):named a78 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(! (= (fun_app$d (lappend$d lNil$f )?v0 )?v0 ):pattern ((fun_app$d (lappend$d lNil$f )?v0 )))):named a79 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$e (lappend$e lNil$g )?v0 )?v0 ):pattern ((fun_app$e (lappend$e lNil$g )?v0 )))):named a80 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$ ))(! (= (fun_app$f (lappend$f lNil$h )?v0 )?v0 ):pattern ((fun_app$f (lappend$f lNil$h )?v0 )))):named a81 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$g (lappend$g lNil$a )?v0 )?v0 ):pattern ((fun_app$g (lappend$g lNil$a )?v0 )))):named a82 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$h (lappend$h lNil$b )?v0 )?v0 ):pattern ((fun_app$h (lappend$h lNil$b )?v0 )))):named a83 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a84 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod_llist$ ))(= (not (lnull$ (fun_app$a (lappend$a ?v0 )?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a85 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ ))(= (not (lnull$a (fun_app$b (lappend$b ?v0 )?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a86 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$ )(?v1 A_a_b_prod_a_b_prod_prod_prod_llist$ ))(= (not (lnull$b (fun_app$c (lappend$c ?v0 )?v1 )))(or (not (lnull$b ?v0 ))(not (lnull$b ?v1 ))))):named a87 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod_llist$ ))(= (not (lnull$c (fun_app$d (lappend$d ?v0 )?v1 )))(or (not (lnull$c ?v0 ))(not (lnull$c ?v1 ))))):named a88 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(= (not (lnull$d (fun_app$e (lappend$e ?v0 )?v1 )))(or (not (lnull$d ?v0 ))(not (lnull$d ?v1 ))))):named a89 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$ )(?v1 A_b_prod_a_b_prod_prod_llist$ ))(= (not (lnull$e (fun_app$f (lappend$f ?v0 )?v1 )))(or (not (lnull$e ?v0 ))(not (lnull$e ?v1 ))))):named a90 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$f (fun_app$g (lappend$g ?v0 )?v1 )))(or (not (lnull$f ?v0 ))(not (lnull$f ?v1 ))))):named a91 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$g (fun_app$h (lappend$h ?v0 )?v1 )))(or (not (lnull$g ?v0 ))(not (lnull$g ?v1 ))))):named a92 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (not (lnull$h (fun_app$ (lappend$ ?v0 )?v1 )))(or (not (lnull$h ?v0 ))(not (lnull$h ?v1 ))))):named a93 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$ )(?v1 A_b_prod_a_b_prod_prod_llist$ ))(= (lnull$e (fun_app$f (lappend$f ?v0 )?v1 ))(and (lnull$e ?v0 )(lnull$e ?v1 )))):named a94 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$f (fun_app$g (lappend$g ?v0 )?v1 ))(and (lnull$f ?v0 )(lnull$f ?v1 )))):named a95 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$g (fun_app$h (lappend$h ?v0 )?v1 ))(and (lnull$g ?v0 )(lnull$g ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (lnull$h (fun_app$ (lappend$ ?v0 )?v1 ))(and (lnull$h ?v0 )(lnull$h ?v1 )))):named a97 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ )(?v1 A_b_prod_a_b_prod_prod_llist$ )(?v2 A_b_prod_a_b_prod_prod_llist$ ))(! (= (fun_app$f (lappend$f (lCons$h ?v0 ?v1 ))?v2 )(lCons$h ?v0 (fun_app$f (lappend$f ?v1 )?v2 ))):pattern ((fun_app$f (lappend$f (lCons$h ?v0 ?v1 ))?v2 )))):named a98 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$g (lappend$g (lCons$a ?v0 ?v1 ))?v2 )(lCons$a ?v0 (fun_app$g (lappend$g ?v1 )?v2 ))):pattern ((fun_app$g (lappend$g (lCons$a ?v0 ?v1 ))?v2 )))):named a99 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B_llist$ ))(! (= (fun_app$h (lappend$h (lCons$b ?v0 ?v1 ))?v2 )(lCons$b ?v0 (fun_app$h (lappend$h ?v1 )?v2 ))):pattern ((fun_app$h (lappend$h (lCons$b ?v0 ?v1 ))?v2 )))):named a100 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$ (lappend$ ?v1 )?v2 ))):pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )))):named a101 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a102 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$a ?v0 ?v1 ))(llength$a ?v1 ))):named a103 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$b ?v0 ?v1 ))(llength$b ?v1 ))):named a104 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$b (lmap$c ?v0 ?v1 ))(llength$a ?v1 ))):named a105 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$b (lmap$d ?v0 ?v1 ))(llength$b ?v1 ))):named a106 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$e ?v0 ?v1 ))(llength$a ?v1 ))):named a107 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$f ?v0 ?v1 ))(llength$b ?v1 ))):named a108 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$a (lmap$g ?v0 ?v1 ))(llength$ ?v1 ))):named a109 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$b (lmap$h ?v0 ?v1 ))(llength$ ?v1 ))):named a110 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_a_fun$ )(?v1 A_b_prod_a_b_prod_prod_llist$ ))(= (llength$a (lmap$i ?v0 ?v1 ))(llength$c ?v1 ))):named a111 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$n (llcp$e (fun_app$g (lappend$g ?v0 )?v1 ))(fun_app$g (lappend$g ?v0 )?v2 ))(plus$ (llength$a ?v0 )(fun_app$n (llcp$e ?v1 )?v2 )))):named a112 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$o (llcp$f (fun_app$h (lappend$h ?v0 )?v1 ))(fun_app$h (lappend$h ?v0 )?v2 ))(plus$ (llength$b ?v0 )(fun_app$o (llcp$f ?v1 )?v2 )))):named a113 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$ )(?v1 A_b_prod_a_b_prod_prod_llist$ )(?v2 A_b_prod_a_b_prod_prod_llist$ ))(= (fun_app$p (llcp$g (fun_app$f (lappend$f ?v0 )?v1 ))(fun_app$f (lappend$f ?v0 )?v2 ))(plus$ (llength$c ?v0 )(fun_app$p (llcp$g ?v1 )?v2 )))):named a114 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$q (llcp$h (fun_app$ (lappend$ ?v0 )?v1 ))(fun_app$ (lappend$ ?v0 )?v2 ))(plus$ (llength$ ?v0 )(fun_app$q (llcp$h ?v1 )?v2 )))):named a115 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a116 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ ))(! (= (lfinite$h (lCons$ ?v0 ?v1 ))(lfinite$h ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a117 ))
(check-sat )
;(get-unsat-core )
