;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not false ):named a0 ))
(assert (! (not (or (fun_app$ (lprefix$ xs$ )ys$ )(fun_app$ (lprefix$ ys$ )xs$ ))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (lprefix$ ?v0 )?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (lprefix$ ?v0 )?v0 )):named a3 ))
(assert (! (not (fun_app$ (lprefix$ xs$ )ys$ )):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (lprefix$ ?v0 )?v1 )(fun_app$ (lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (lprefix$ ?v0 )?v1 )(fun_app$ (lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (lprefix$ ?v0 )?v1 )(fun_app$ (lprefix$ ?v2 )?v1 ))(or (fun_app$ (lprefix$ ?v0 )?v2 )(fun_app$ (lprefix$ ?v2 )?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (lprefix$ ?v0 )?v1 )(fun_app$ (lprefix$ ?v1 )?v2 ))(fun_app$ (lprefix$ ?v0 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (lprefix$ ?v0 )?v1 )(fun_app$ (lprefix$ ?v1 )?v2 ))(fun_app$ (lprefix$ ?v0 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$ (lstrict_prefix$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a10 ))
(assert (! (fun_app$ (lprefix$ ys$ )xs$ ):named a11 ))
(assert (! (not (fun_app$ (lprefix$ ys$ )xs$ )):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (lstrict_prefix$ ?v0 )?v1 )(and (fun_app$ (lprefix$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((fun_app$ (lstrict_prefix$ ?v0 )?v1 )))):named a13 ))
(assert (! (fun_app$ (lprefix$ xs$ )(lappend$ ys$ zs$ )):named a14 ))
(assert (! (= (lappend$ xs$ xs$a )(lappend$ ys$ zs$ )):named a15 ))
(assert (! (=> (forall ((?v0 A_llist$ ))(=> (= (lappend$ xs$ ?v0 )(lappend$ ys$ zs$ ))false ))false ):named a16 ))
(assert (! (less_eq$ (llength$ ys$ )(llength$ xs$ )):named a17 ))
(check-sat )
;(get-unsat-core )
