;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_nat_a_fun_fun$ 0 )
(declare-sort A_nat_prod_a_fun$ 0 )
(declare-sort A_nat_bool_fun_fun$ 0 )
(declare-sort A_nat_prod_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_nat_prod$ (pair$ (fst$ A$ )(snd$ Nat$ )))))
(declare-sort A_nat_prod_llist$ 0)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$a ()A_nat_prod_llist$)
(declare-fun lhd$a (A_nat_prod_llist$)A_nat_prod$)
(declare-fun ltl$a (A_nat_prod_llist$)A_nat_prod_llist$)
(declare-fun lCons$a (A_nat_prod$ A_nat_prod_llist$ )A_nat_prod_llist$)
(declare-fun lNil$b ()Nat_llist$)
(declare-fun lhd$b (Nat_llist$)Nat$)
(declare-fun ltl$b (Nat_llist$)Nat_llist$)
(declare-fun lCons$b (Nat$ Nat_llist$ )Nat_llist$)
(declare-fun a$ ()Nat_set$ )
(declare-fun b$ ()Nat_set$ )
(declare-fun uu$ ()A_nat_prod_a_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun uua$ ()A_nat_bool_fun_fun$ )
(declare-fun uub$ ()A_nat_bool_fun_fun$ )
(declare-fun uuc$ ()Nat_nat_fun$ )
(declare-fun uud$ ()A_nat_prod_bool_fun$ )
(declare-fun uue$ (A_nat_prod_bool_fun$ )A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ )
(declare-fun uuf$ (Nat_set$ )A_nat_bool_fun_fun$ )
(declare-fun uug$ (Bool A_nat_bool_fun_fun$ )A_nat_bool_fun_fun$ )
(declare-fun uuh$ ()A_nat_a_fun_fun$ )
(declare-fun lmap$ (A_nat_prod_a_fun$ A_nat_prod_llist$ )A_llist$ )
(declare-fun lzip$ (A_llist$ Nat_llist$ )A_nat_prod_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lmap$a (Nat_nat_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$ (A_nat_prod_a_fun$ A_nat_prod$ )A$ )
(declare-fun lfilter$ (A_nat_prod_bool_fun$ A_nat_prod_llist$ )A_nat_prod_llist$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (A_nat_bool_fun_fun$ A$ )Nat_bool_fun$ )
(declare-fun fun_app$c (A_nat_prod_bool_fun$ A_nat_prod$ )Bool )
(declare-fun fun_app$d (A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ A_nat_prod_bool_fun$ )A_nat_prod_bool_fun$ )
(declare-fun fun_app$e (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$f (A_nat_a_fun_fun$ A$ )Nat_a_fun$ )
(declare-fun fun_app$g (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$h (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun iterates$ (Nat_nat_fun$ Nat$ )Nat_llist$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun case_prod$ (A_nat_bool_fun_fun$ )A_nat_prod_bool_fun$ )
(declare-fun case_prod$a (A_nat_a_fun_fun$ A_nat_prod$ )A$ )
(assert (! (forall ((?v0 A_nat_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(! (= (fun_app$a (fun_app$b uub$ ?v0 )?v1 )(member$ ?v1 b$ )):pattern ((fun_app$a (fun_app$b uub$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(! (= (fun_app$a (fun_app$b uua$ ?v0 )?v1 )(member$ ?v1 a$ )):pattern ((fun_app$a (fun_app$b uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$ )(?v1 A_nat_prod_bool_fun$ )(?v2 A_nat_prod$ ))(! (= (fun_app$c (fun_app$d (uue$ ?v0 )?v1 )?v2 )(and (fun_app$c ?v0 ?v2 )(fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$d (uue$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 A$ )(?v2 Nat$ ))(! (= (fun_app$a (fun_app$b (uuf$ ?v0 )?v1 )?v2 )(member$ ?v2 ?v0 )):pattern ((fun_app$a (fun_app$b (uuf$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_bool_fun_fun$ )(?v2 A$ )(?v3 Nat$ ))(! (= (fun_app$a (fun_app$b (uug$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$a (fun_app$b ?v1 ?v2 )?v3 ))):pattern ((fun_app$a (fun_app$b (uug$ ?v0 ?v1 )?v2 )?v3 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(! (= (fun_app$e (fun_app$f uuh$ ?v0 )?v1 )?v0 ):pattern ((fun_app$e (fun_app$f uuh$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$g uuc$ ?v0 )?v0 ):pattern ((fun_app$g uuc$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_nat_prod$ ))(! (= (fun_app$c uud$ ?v0 )true ):pattern ((fun_app$c uud$ ?v0 )))):named a8 ))
(assert (! (not (= (lmap$ uu$ (lfilter$ (case_prod$ uua$ )(lzip$ ys$ (iterates$ suc$ zero$ ))))(lmap$ uu$ (lfilter$ (case_prod$ uub$ )(lzip$ ys$ (iterates$ suc$ zero$ )))))):named a9 ))
(assert (! (= xs$ ys$ ):named a10 ))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$ )(?v1 A_nat_prod_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (lmap$a uuc$ ?v0 )?v0 )):named a12 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ ))(= (lfilter$ uud$ ?v0 )?v0 )):named a13 ))
(assert (! (= (lfilter$ (case_prod$ uua$ )(lzip$ ys$ (iterates$ suc$ zero$ )))(lfilter$ (case_prod$ uub$ )(lzip$ ys$ (iterates$ suc$ zero$ )))):named a14 ))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$ )(?v1 A_nat_prod_bool_fun$ )(?v2 A_nat_prod_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v1 ?v2 ))(lfilter$ (fun_app$d (uue$ ?v0 )?v1 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (lmap$a ?v0 (iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$g ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_set$ ))(= (lsublist$ ?v0 ?v1 )(lmap$ uu$ (lfilter$ (case_prod$ (uuf$ ?v1 ))(lzip$ ?v0 (iterates$ suc$ zero$ )))))):named a17 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_bool_fun_fun$ )(?v2 A_nat_prod$ ))(= (fun_app$c (case_prod$ (uug$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$c (case_prod$ ?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$g suc$ ?v0 )(fun_app$g suc$ ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$g suc$ ?v0 )(fun_app$g suc$ ?v1 ))(= ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_nat_prod$ ))(= (fst$ ?v0 )(case_prod$a uuh$ ?v0 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$g suc$ ?v1 ))false )))false )):named a22 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$g suc$ ?v1 ))false )))false )):named a23 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$a (fun_app$h ?v0 ?v3 )zero$ ))(and (forall ((?v3 Nat$ ))(fun_app$a (fun_app$h ?v0 zero$ )(fun_app$g suc$ ?v3 )))(forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$a (fun_app$h ?v0 ?v3 )?v4 )(fun_app$a (fun_app$h ?v0 (fun_app$g suc$ ?v3 ))(fun_app$g suc$ ?v4 ))))))(fun_app$a (fun_app$h ?v0 ?v1 )?v2 ))):named a24 ))
(check-sat )
;(get-unsat-core )
