;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun x$ ()A_llist$ )
(declare-fun xs$ ()A_llist_llist$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun lset$ (A_llist_llist$ )A_llist_set$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun xss$b ()A_llist_llist$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun finite$ (A_set$ )Bool )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun lnull$a (A_llist_llist$ )Bool )
(declare-fun lsetp$a (A_llist_llist$ )A_llist_bool_fun$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun finite$a (A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun ldropn$a (Nat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun lappend$a (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lfinite$a (A_llist_llist$ )Bool )
(declare-fun lmember$a (A_llist$ A_llist_llist$ )Bool )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun ldropWhile$a (A_llist_bool_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun ltakeWhile$a (A_llist_bool_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$a (A_llist_llist$ A_llist_llist$ )Bool )
(assert (! (not (forall ((?v0 A_llist$ ))(=> (member$ ?v0 (lset$ xss$ ))(lfinite$ ?v0 )))):named a0 ))
(assert (! (lfinite$a xs$ ):named a1 ))
(assert (! (not (lnull$ x$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 (lset$ xssa$ ))(lfinite$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 (lset$ xss$a ))(lfinite$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 (lset$ xssa$ ))(lfinite$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (lnull$a ?v0 )(lfinite$a ?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(lfinite$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$a ?v0 (lset$a ?v1 ))(fun_app$ (lmember$ ?v0 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$a ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfinite$ (ldropWhile$ ?v0 ?v1 ))(=> (exists ((?v2 A$ ))(and (member$a ?v2 (lset$a ?v1 ))(not (fun_app$a ?v0 ?v2 ))))(lfinite$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$a (ldropWhile$a ?v0 ?v1 ))(=> (exists ((?v2 A_llist$ ))(and (member$ ?v2 (lset$ ?v1 ))(not (fun_app$ ?v0 ?v2 ))))(lfinite$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$a ?v0 (lset$a ?v1 ))(fun_app$a (lsetp$ ?v1 )?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(fun_app$ (lsetp$a ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (fun_app$a (lsetp$ ?v0 )?v1 )(member$a ?v1 (lset$a ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ ))(=> (fun_app$ (lsetp$a ?v0 )?v1 )(member$ ?v1 (lset$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(finite$ (lset$a ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (lfinite$a ?v0 )(finite$a (lset$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfinite$ (ltakeWhile$ ?v0 ?v1 ))(or (lfinite$ ?v1 )(exists ((?v2 A$ ))(and (member$a ?v2 (lset$a ?v1 ))(not (fun_app$a ?v0 ?v2 ))))))):named a18 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$a (ltakeWhile$a ?v0 ?v1 ))(or (lfinite$a ?v1 )(exists ((?v2 A_llist$ ))(and (member$ ?v2 (lset$ ?v1 ))(not (fun_app$ ?v0 ?v2 ))))))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (member$a ?v0 (lset$a (lappend$ ?v1 ?v2 )))(or (member$a ?v0 (lset$a ?v1 ))(and (lfinite$ ?v1 )(member$a ?v0 (lset$a ?v2 )))))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(= (member$ ?v0 (lset$ (lappend$a ?v1 ?v2 )))(or (member$ ?v0 (lset$ ?v1 ))(and (lfinite$a ?v1 )(member$ ?v0 (lset$ ?v2 )))))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$ (lstrict_prefix$ ?v0 )?v1 )(lfinite$ ?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lfinite$a ?v0 ))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist$ ))(= (lfinite$a (ldropn$a ?v0 ?v1 ))(lfinite$a ?v1 ))):named a25 ))
(assert (! (= (lfinite$ lNil$ )true ):named a26 ))
(assert (! (= (lfinite$a lNil$a )true ):named a27 ))
(assert (! (lfinite$a xss$b ):named a28 ))
(check-sat )
;(get-unsat-core )
