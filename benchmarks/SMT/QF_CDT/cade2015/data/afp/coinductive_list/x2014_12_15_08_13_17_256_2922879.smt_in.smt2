;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ (A_llist$ )Bool )
(declare-fun xs$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun thesis$ ()Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A_list$ ))(=> (= xs$ (llist_of$ ?v0 ))thesis$ )):named a1 ))
(assert (! (lfinite$ xs$ ):named a2 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a3 ))
(assert (! (p$ lNil$ ):named a4 ))
(assert (! (forall ((?v0 A_list$ ))(= (lhd$ (llist_of$ ?v0 ))(hd$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_list$ ))(= (lnull$ (llist_of$ ?v0 ))(= ?v0 nil$ ))):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(= (ltl$ (llist_of$ ?v0 ))(llist_of$ (tl$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (llist_of$ ?v0 )lNil$ )(= ?v0 nil$ ))):named a8 ))
(assert (! (= (llist_of$ nil$ )lNil$ ):named a9 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (lappend$ (llist_of$ ?v0 )(llist_of$ ?v1 ))(llist_of$ (append$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_llist$ ))(= (= (llist_of$ ?v0 )(lCons$ ?v1 ?v2 ))(exists ((?v3 A_list$ ))(and (= ?v0 (cons$ ?v1 ?v3 ))(= ?v2 (llist_of$ ?v3 )))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (llist_of$ (cons$ ?v0 ?v1 ))(lCons$ ?v0 (llist_of$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (lfinite$ ?v0 )(p$ ?v0 ))(p$ (lappend$ ?v0 (lCons$ ?v1 lNil$ ))))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (lappend$ ?v0 ?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (lappend$ ?v0 ?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$ (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$ ?v0 ?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a18 ))
(check-sat )
;(get-unsat-core )
