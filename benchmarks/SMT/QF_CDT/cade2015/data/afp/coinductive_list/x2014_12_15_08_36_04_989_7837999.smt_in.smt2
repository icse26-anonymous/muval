;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort B_nat_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_b_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort A_list_nat_fun$ 0 )
(declare-sort B_list_nat_fun$ 0 )
(declare-sort Nat_a_a_prod_fun$ 0 )
(declare-sort Nat_a_b_prod_fun$ 0 )
(declare-sort Nat_b_a_prod_fun$ 0 )
(declare-sort Nat_list_nat_fun$ 0 )
(declare-sort A_b_prod_list_nat_fun$ 0 )
(declare-sort Nat_a_a_a_prod_prod_fun$ 0 )
(declare-sort Nat_a_a_b_prod_prod_fun$ 0 )
(declare-sort Nat_a_b_prod_a_prod_fun$ 0 )
(declare-sort Nat_a_a_b_prod_a_prod_prod_fun$ 0 )
(declare-sort Nat_a_b_prod_a_b_prod_prod_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))(A_b_prod_list$ (nil$a )(cons$a (hd$a A_b_prod$ )(tl$a A_b_prod_list$ )))(B_list$ (nil$b )(cons$b (hd$b B$ )(tl$b B_list$ )))(Nat_list$ (nil$c )(cons$c (hd$c Nat$ )(tl$c Nat_list$ )))(A_a_prod$ (pair$a (fst$a A$ )(snd$a A$ )))(A_a_prod_list$ (nil$d )(cons$d (hd$d A_a_prod$ )(tl$d A_a_prod_list$ )))))
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$c ()A_a_prod_llist$)
(declare-fun lhd$c (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$c (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$c (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((A_b_prod_a_prod$ (pair$b (fst$b A_b_prod$ )(snd$b A$ )))(A_b_prod_a_prod_list$ (nil$e )(cons$e (hd$e A_b_prod_a_prod$ )(tl$e A_b_prod_a_prod_list$ )))))
(declare-sort A_b_prod_a_prod_llist$ 0)
(declare-fun lNil$d ()A_b_prod_a_prod_llist$)
(declare-fun lhd$d (A_b_prod_a_prod_llist$)A_b_prod_a_prod$)
(declare-fun ltl$d (A_b_prod_a_prod_llist$)A_b_prod_a_prod_llist$)
(declare-fun lCons$d (A_b_prod_a_prod$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$)
(declare-datatypes ()((A_a_b_prod_prod$ (pair$c (fst$c A$ )(snd$c A_b_prod$ )))(A_a_b_prod_prod_list$ (nil$f )(cons$f (hd$f A_a_b_prod_prod$ )(tl$f A_a_b_prod_prod_list$ )))))
(declare-sort A_a_b_prod_prod_llist$ 0)
(declare-fun lNil$e ()A_a_b_prod_prod_llist$)
(declare-fun lhd$e (A_a_b_prod_prod_llist$)A_a_b_prod_prod$)
(declare-fun ltl$e (A_a_b_prod_prod_llist$)A_a_b_prod_prod_llist$)
(declare-fun lCons$e (A_a_b_prod_prod$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$)
(declare-datatypes ()((A_b_prod_a_b_prod_prod$ (pair$d (fst$d A_b_prod$ )(snd$d A_b_prod$ )))(A_b_prod_a_b_prod_prod_list$ (nil$g )(cons$g (hd$g A_b_prod_a_b_prod_prod$ )(tl$g A_b_prod_a_b_prod_prod_list$ )))))
(declare-sort A_b_prod_a_b_prod_prod_llist$ 0)
(declare-fun lNil$f ()A_b_prod_a_b_prod_prod_llist$)
(declare-fun lhd$f (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod$)
(declare-fun ltl$f (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod_llist$)
(declare-fun lCons$f (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$)
(declare-datatypes ()((B_a_prod$ (pair$e (fst$e B$ )(snd$e A$ )))(B_a_prod_list$ (nil$h )(cons$h (hd$h B_a_prod$ )(tl$h B_a_prod_list$ )))))
(declare-sort B_a_prod_llist$ 0)
(declare-fun lNil$g ()B_a_prod_llist$)
(declare-fun lhd$g (B_a_prod_llist$)B_a_prod$)
(declare-fun ltl$g (B_a_prod_llist$)B_a_prod_llist$)
(declare-fun lCons$g (B_a_prod$ B_a_prod_llist$ )B_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod$ (pair$f (fst$f A$ )(snd$f A_a_prod$ )))(A_a_a_prod_prod_list$ (nil$i )(cons$i (hd$i A_a_a_prod_prod$ )(tl$i A_a_a_prod_prod_list$ )))))
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-fun lNil$h ()A_a_a_prod_prod_llist$)
(declare-fun lhd$h (A_a_a_prod_prod_llist$)A_a_a_prod_prod$)
(declare-fun ltl$h (A_a_a_prod_prod_llist$)A_a_a_prod_prod_llist$)
(declare-fun lCons$h (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$)
(declare-datatypes ()((A_a_b_prod_a_prod_prod$ (pair$g (fst$g A$ )(snd$g A_b_prod_a_prod$ )))(A_a_b_prod_a_prod_prod_list$ (nil$j )(cons$j (hd$j A_a_b_prod_a_prod_prod$ )(tl$j A_a_b_prod_a_prod_prod_list$ )))))
(declare-sort A_a_b_prod_a_prod_prod_llist$ 0)
(declare-fun lNil$i ()A_a_b_prod_a_prod_prod_llist$)
(declare-fun lhd$i (A_a_b_prod_a_prod_prod_llist$)A_a_b_prod_a_prod_prod$)
(declare-fun ltl$i (A_a_b_prod_a_prod_prod_llist$)A_a_b_prod_a_prod_prod_llist$)
(declare-fun lCons$i (A_a_b_prod_a_prod_prod$ A_a_b_prod_a_prod_prod_llist$ )A_a_b_prod_a_prod_prod_llist$)
(declare-datatypes ()((B_b_prod$ (pair$h (fst$h B$ )(snd$h B$ )))))
(declare-sort B_b_prod_llist$ 0)
(declare-fun lNil$j ()B_b_prod_llist$)
(declare-fun lhd$j (B_b_prod_llist$)B_b_prod$)
(declare-fun ltl$j (B_b_prod_llist$)B_b_prod_llist$)
(declare-fun lCons$j (B_b_prod$ B_b_prod_llist$ )B_b_prod_llist$)
(declare-datatypes ()((B_b_prod_list$ (nil$k )(cons$k (hd$k B_b_prod$ )(tl$k B_b_prod_list$ )))(A_b_prod_b_prod$ (pair$i (fst$i A_b_prod$ )(snd$i B$ )))))
(declare-sort A_b_prod_b_prod_llist$ 0)
(declare-fun lNil$k ()A_b_prod_b_prod_llist$)
(declare-fun lhd$k (A_b_prod_b_prod_llist$)A_b_prod_b_prod$)
(declare-fun ltl$k (A_b_prod_b_prod_llist$)A_b_prod_b_prod_llist$)
(declare-fun lCons$k (A_b_prod_b_prod$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$)
(declare-datatypes ()((A_b_prod_b_prod_list$ (nil$l )(cons$l (hd$l A_b_prod_b_prod$ )(tl$l A_b_prod_b_prod_list$ )))(A_a_prod_a_prod$ (pair$j (fst$j A_a_prod$ )(snd$j A$ )))))
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$l ()A_a_prod_a_prod_llist$)
(declare-fun lhd$l (A_a_prod_a_prod_llist$)A_a_prod_a_prod$)
(declare-fun ltl$l (A_a_prod_a_prod_llist$)A_a_prod_a_prod_llist$)
(declare-fun lCons$l (A_a_prod_a_prod$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$)
(declare-datatypes ()((A_a_prod_a_prod_list$ (nil$m )(cons$m (hd$m A_a_prod_a_prod$ )(tl$m A_a_prod_a_prod_list$ )))(Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun f$ ()Nat_b_fun$ )
(declare-fun xs$ ()A_list$ )
(declare-fun map$ (Nat_b_fun$ Nat_list$ )B_list$ )
(declare-fun upt$ (Nat$ Nat$ )Nat_list$ )
(declare-fun zip$ (A_list$ B_list$ )A_b_prod_list$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun map$a (A_a_fun$ A_list$ )A_list$ )
(declare-fun map$b (B_a_fun$ B_list$ )A_list$ )
(declare-fun map$c (Nat_a_fun$ Nat_list$ )A_list$ )
(declare-fun map$d (A_b_fun$ A_list$ )B_list$ )
(declare-fun map$e (B_b_fun$ B_list$ )B_list$ )
(declare-fun map$f (A_nat_fun$ A_list$ )Nat_list$ )
(declare-fun map$g (B_nat_fun$ B_list$ )Nat_list$ )
(declare-fun map$h (Nat_nat_fun$ Nat_list$ )Nat_list$ )
(declare-fun map$i (Nat_a_b_prod_fun$ Nat_list$ )A_b_prod_list$ )
(declare-fun map$j (Nat_a_a_prod_fun$ Nat_list$ )A_a_prod_list$ )
(declare-fun map$k (Nat_a_b_prod_a_prod_fun$ Nat_list$ )A_b_prod_a_prod_list$ )
(declare-fun map$l (Nat_a_a_b_prod_prod_fun$ Nat_list$ )A_a_b_prod_prod_list$ )
(declare-fun map$m (Nat_a_b_prod_a_b_prod_prod_fun$ Nat_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun map$n (Nat_b_a_prod_fun$ Nat_list$ )B_a_prod_list$ )
(declare-fun map$o (Nat_a_a_a_prod_prod_fun$ Nat_list$ )A_a_a_prod_prod_list$ )
(declare-fun map$p (Nat_a_a_b_prod_a_prod_prod_fun$ Nat_list$ )A_a_b_prod_a_prod_prod_list$ )
(declare-fun size$ ()A_list_nat_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun zip$a (A_list$ A_list$ )A_a_prod_list$ )
(declare-fun zip$b (A_list$ A_b_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun zip$c (A_b_prod_list$ A_list$ )A_b_prod_a_prod_list$ )
(declare-fun zip$d (A_b_prod_list$ A_b_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun zip$e (B_list$ A_list$ )B_a_prod_list$ )
(declare-fun zip$f (B_list$ B_list$ )B_b_prod_list$ )
(declare-fun zip$g (A_list$ A_a_prod_list$ )A_a_a_prod_prod_list$ )
(declare-fun zip$h (A_b_prod_list$ B_list$ )A_b_prod_b_prod_list$ )
(declare-fun zip$i (A_a_prod_list$ A_list$ )A_a_prod_a_prod_list$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun lzip$a (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$b (A_llist$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lzip$c (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$d (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lzip$e (B_llist$ A_llist$ )B_a_prod_llist$ )
(declare-fun lzip$f (B_llist$ B_llist$ )B_b_prod_llist$ )
(declare-fun lzip$g (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$h (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$i (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun size$a ()B_list_nat_fun$ )
(declare-fun size$b ()Nat_list_nat_fun$ )
(declare-fun size$c ()A_b_prod_list_nat_fun$ )
(declare-fun ltake$a (Enat$ B_llist$ )B_llist$ )
(declare-fun ltake$b (Enat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ltake$c (Enat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ltake$d (Enat$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun ltake$e (Enat$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun ltake$f (Enat$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun ltake$g (Enat$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun ltake$h (Enat$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun ltake$i (Enat$ A_a_b_prod_a_prod_prod_llist$ )A_a_b_prod_a_prod_prod_llist$ )
(declare-fun fun_app$ (A_list_nat_fun$ A_list$ )Nat$ )
(declare-fun fun_app$a (B_list_nat_fun$ B_list$ )Nat$ )
(declare-fun fun_app$b (Nat_list_nat_fun$ Nat_list$ )Nat$ )
(declare-fun fun_app$c (A_b_prod_list_nat_fun$ A_b_prod_list$ )Nat$ )
(declare-fun fun_app$d (Nat_a_a_prod_fun$ Nat$ )A_a_prod$ )
(declare-fun fun_app$e (Nat_a_a_b_prod_prod_fun$ Nat$ )A_a_b_prod_prod$ )
(declare-fun fun_app$f (Nat_a_b_prod_a_prod_fun$ Nat$ )A_b_prod_a_prod$ )
(declare-fun fun_app$g (Nat_a_b_prod_a_b_prod_prod_fun$ Nat$ )A_b_prod_a_b_prod_prod$ )
(declare-fun fun_app$h (Nat_a_b_prod_fun$ Nat$ )A_b_prod$ )
(declare-fun fun_app$i (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$j (Nat_b_fun$ Nat$ )B$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun inf_llist$ (Nat_b_fun$ )B_llist$ )
(declare-fun llist_of$a (A_b_prod_list$ )A_b_prod_llist$ )
(declare-fun llist_of$b (B_list$ )B_llist$ )
(declare-fun llist_of$c (A_a_prod_list$ )A_a_prod_llist$ )
(declare-fun llist_of$d (A_b_prod_a_prod_list$ )A_b_prod_a_prod_llist$ )
(declare-fun llist_of$e (A_a_b_prod_prod_list$ )A_a_b_prod_prod_llist$ )
(declare-fun llist_of$f (A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun llist_of$g (B_a_prod_list$ )B_a_prod_llist$ )
(declare-fun llist_of$h (A_a_a_prod_prod_list$ )A_a_a_prod_prod_llist$ )
(declare-fun llist_of$i (A_a_b_prod_a_prod_prod_list$ )A_a_b_prod_a_prod_prod_llist$ )
(declare-fun llist_of$j (B_b_prod_list$ )B_b_prod_llist$ )
(declare-fun llist_of$k (A_b_prod_b_prod_list$ )A_b_prod_b_prod_llist$ )
(declare-fun llist_of$l (A_a_prod_a_prod_list$ )A_a_prod_a_prod_llist$ )
(declare-fun gen_length$ (Nat$ )A_b_prod_list_nat_fun$ )
(declare-fun inf_llist$a (Nat_a_a_prod_fun$ )A_a_prod_llist$ )
(declare-fun inf_llist$b (Nat_a_a_b_prod_prod_fun$ )A_a_b_prod_prod_llist$ )
(declare-fun inf_llist$c (Nat_a_b_prod_a_prod_fun$ )A_b_prod_a_prod_llist$ )
(declare-fun inf_llist$d (Nat_a_b_prod_a_b_prod_prod_fun$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun inf_llist$e (Nat_a_b_prod_fun$ )A_b_prod_llist$ )
(declare-fun inf_llist$f (Nat_a_fun$ )A_llist$ )
(declare-fun inf_llist$g (Nat_b_a_prod_fun$ )B_a_prod_llist$ )
(declare-fun inf_llist$h (Nat_a_a_a_prod_prod_fun$ )A_a_a_prod_prod_llist$ )
(declare-fun inf_llist$i (Nat_a_a_b_prod_a_prod_prod_fun$ )A_a_b_prod_a_prod_prod_llist$ )
(declare-fun gen_length$a (Nat$ )B_list_nat_fun$ )
(declare-fun gen_length$b (Nat$ )Nat_list_nat_fun$ )
(declare-fun gen_length$c (Nat$ )A_list_nat_fun$ )
(assert (! (not (= (lzip$ (llist_of$ xs$ )(inf_llist$ f$ ))(llist_of$a (zip$ xs$ (map$ f$ (upt$ zero$ (fun_app$ size$ xs$ ))))))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (= (llist_of$b ?v0 )(llist_of$b ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list$ ))(= (= (llist_of$c ?v0 )(llist_of$c ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_list$ )(?v1 A_b_prod_a_prod_list$ ))(= (= (llist_of$d ?v0 )(llist_of$d ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ )(?v1 A_a_b_prod_prod_list$ ))(= (= (llist_of$e ?v0 )(llist_of$e ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(= (= (llist_of$f ?v0 )(llist_of$f ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 B_a_prod_list$ )(?v1 B_a_prod_list$ ))(= (= (llist_of$g ?v0 )(llist_of$g ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$ )(?v1 A_a_a_prod_prod_list$ ))(= (= (llist_of$h ?v0 )(llist_of$h ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_a_b_prod_a_prod_prod_list$ )(?v1 A_a_b_prod_a_prod_prod_list$ ))(= (= (llist_of$i ?v0 )(llist_of$i ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat_a_a_prod_fun$ )(?v1 Nat_a_a_prod_fun$ ))(= (= (inf_llist$a ?v0 )(inf_llist$a ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat_a_a_b_prod_prod_fun$ )(?v1 Nat_a_a_b_prod_prod_fun$ ))(= (= (inf_llist$b ?v0 )(inf_llist$b ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat_a_b_prod_a_prod_fun$ )(?v1 Nat_a_b_prod_a_prod_fun$ ))(= (= (inf_llist$c ?v0 )(inf_llist$c ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat_a_b_prod_a_b_prod_prod_fun$ )(?v1 Nat_a_b_prod_a_b_prod_prod_fun$ ))(= (= (inf_llist$d ?v0 )(inf_llist$d ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat_a_b_prod_fun$ )(?v1 Nat_a_b_prod_fun$ ))(= (= (inf_llist$e ?v0 )(inf_llist$e ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun$ ))(= (= (inf_llist$f ?v0 )(inf_llist$f ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_b_fun$ ))(= (= (inf_llist$ ?v0 )(inf_llist$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_list$ )(?v1 B_list$ ))(= (lzip$ (llist_of$ ?v0 )(llist_of$b ?v1 ))(llist_of$a (zip$ ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (lzip$a (llist_of$ ?v0 )(llist_of$ ?v1 ))(llist_of$c (zip$a ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_b_prod_list$ ))(= (lzip$b (llist_of$ ?v0 )(llist_of$a ?v1 ))(llist_of$e (zip$b ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_list$ ))(= (lzip$c (llist_of$a ?v0 )(llist_of$ ?v1 ))(llist_of$d (zip$c ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (lzip$d (llist_of$a ?v0 )(llist_of$a ?v1 ))(llist_of$f (zip$d ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 B_list$ )(?v1 A_list$ ))(= (lzip$e (llist_of$b ?v0 )(llist_of$ ?v1 ))(llist_of$g (zip$e ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (lzip$f (llist_of$b ?v0 )(llist_of$b ?v1 ))(llist_of$j (zip$f ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_a_prod_list$ ))(= (lzip$g (llist_of$ ?v0 )(llist_of$c ?v1 ))(llist_of$h (zip$g ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 B_list$ ))(= (lzip$h (llist_of$a ?v0 )(llist_of$b ?v1 ))(llist_of$k (zip$h ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_list$ ))(= (lzip$i (llist_of$c ?v0 )(llist_of$ ?v1 ))(llist_of$l (zip$i ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (forall ((?v1 A_list$ ))(=> (= ?v0 (llist_of$ ?v1 ))false ))(forall ((?v1 Nat_a_fun$ ))(=> (= ?v0 (inf_llist$f ?v1 ))false )))false )):named a28 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (forall ((?v1 B_list$ ))(=> (= ?v0 (llist_of$b ?v1 ))false ))(forall ((?v1 Nat_b_fun$ ))(=> (= ?v0 (inf_llist$ ?v1 ))false )))false )):named a29 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(=> (and (forall ((?v1 A_b_prod_list$ ))(=> (= ?v0 (llist_of$a ?v1 ))false ))(forall ((?v1 Nat_a_b_prod_fun$ ))(=> (= ?v0 (inf_llist$e ?v1 ))false )))false )):named a30 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(=> (and (forall ((?v1 A_a_prod_list$ ))(=> (= ?v0 (llist_of$c ?v1 ))false ))(forall ((?v1 Nat_a_a_prod_fun$ ))(=> (= ?v0 (inf_llist$a ?v1 ))false )))false )):named a31 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_llist$ ))(=> (and (forall ((?v1 A_b_prod_a_prod_list$ ))(=> (= ?v0 (llist_of$d ?v1 ))false ))(forall ((?v1 Nat_a_b_prod_a_prod_fun$ ))(=> (= ?v0 (inf_llist$c ?v1 ))false )))false )):named a32 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(=> (and (forall ((?v1 A_a_b_prod_prod_list$ ))(=> (= ?v0 (llist_of$e ?v1 ))false ))(forall ((?v1 Nat_a_a_b_prod_prod_fun$ ))(=> (= ?v0 (inf_llist$b ?v1 ))false )))false )):named a33 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$ ))(=> (and (forall ((?v1 A_b_prod_a_b_prod_prod_list$ ))(=> (= ?v0 (llist_of$f ?v1 ))false ))(forall ((?v1 Nat_a_b_prod_a_b_prod_prod_fun$ ))(=> (= ?v0 (inf_llist$d ?v1 ))false )))false )):named a34 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(=> (and (forall ((?v1 B_a_prod_list$ ))(=> (= ?v0 (llist_of$g ?v1 ))false ))(forall ((?v1 Nat_b_a_prod_fun$ ))(=> (= ?v0 (inf_llist$g ?v1 ))false )))false )):named a35 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(=> (and (forall ((?v1 A_a_a_prod_prod_list$ ))(=> (= ?v0 (llist_of$h ?v1 ))false ))(forall ((?v1 Nat_a_a_a_prod_prod_fun$ ))(=> (= ?v0 (inf_llist$h ?v1 ))false )))false )):named a36 ))
(assert (! (forall ((?v0 A_a_b_prod_a_prod_prod_llist$ ))(=> (and (forall ((?v1 A_a_b_prod_a_prod_prod_list$ ))(=> (= ?v0 (llist_of$i ?v1 ))false ))(forall ((?v1 Nat_a_a_b_prod_a_prod_prod_fun$ ))(=> (= ?v0 (inf_llist$i ?v1 ))false )))false )):named a37 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_a_fun$ ))(not (= (llist_of$ ?v0 )(inf_llist$f ?v1 )))):named a38 ))
(assert (! (forall ((?v0 B_list$ )(?v1 Nat_b_fun$ ))(not (= (llist_of$b ?v0 )(inf_llist$ ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 Nat_a_b_prod_fun$ ))(not (= (llist_of$a ?v0 )(inf_llist$e ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 Nat_a_a_prod_fun$ ))(not (= (llist_of$c ?v0 )(inf_llist$a ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_list$ )(?v1 Nat_a_b_prod_a_prod_fun$ ))(not (= (llist_of$d ?v0 )(inf_llist$c ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ )(?v1 Nat_a_a_b_prod_prod_fun$ ))(not (= (llist_of$e ?v0 )(inf_llist$b ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ )(?v1 Nat_a_b_prod_a_b_prod_prod_fun$ ))(not (= (llist_of$f ?v0 )(inf_llist$d ?v1 )))):named a44 ))
(assert (! (forall ((?v0 B_a_prod_list$ )(?v1 Nat_b_a_prod_fun$ ))(not (= (llist_of$g ?v0 )(inf_llist$g ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$ )(?v1 Nat_a_a_a_prod_prod_fun$ ))(not (= (llist_of$h ?v0 )(inf_llist$h ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_a_b_prod_a_prod_prod_list$ )(?v1 Nat_a_a_b_prod_a_prod_prod_fun$ ))(not (= (llist_of$i ?v0 )(inf_llist$i ?v1 )))):named a47 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_list$ ))(= (fun_app$a size$a (map$ ?v0 ?v1 ))(fun_app$b size$b ?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (fun_app$ size$ (map$a ?v0 ?v1 ))(fun_app$ size$ ?v1 ))):named a49 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_list$ ))(= (fun_app$ size$ (map$b ?v0 ?v1 ))(fun_app$a size$a ?v1 ))):named a50 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_list$ ))(= (fun_app$ size$ (map$c ?v0 ?v1 ))(fun_app$b size$b ?v1 ))):named a51 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_list$ ))(= (fun_app$a size$a (map$d ?v0 ?v1 ))(fun_app$ size$ ?v1 ))):named a52 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_list$ ))(= (fun_app$a size$a (map$e ?v0 ?v1 ))(fun_app$a size$a ?v1 ))):named a53 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_list$ ))(= (fun_app$b size$b (map$f ?v0 ?v1 ))(fun_app$ size$ ?v1 ))):named a54 ))
(assert (! (forall ((?v0 B_nat_fun$ )(?v1 B_list$ ))(= (fun_app$b size$b (map$g ?v0 ?v1 ))(fun_app$a size$a ?v1 ))):named a55 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_list$ ))(= (fun_app$b size$b (map$h ?v0 ?v1 ))(fun_app$b size$b ?v1 ))):named a56 ))
(assert (! (forall ((?v0 Nat_a_b_prod_fun$ )(?v1 Nat_list$ ))(= (fun_app$c size$c (map$i ?v0 ?v1 ))(fun_app$b size$b ?v1 ))):named a57 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_list$ )(?v2 Nat_b_fun$ )(?v3 Nat_list$ ))(=> (= (map$ ?v0 ?v1 )(map$ ?v2 ?v3 ))(= (fun_app$b size$b ?v1 )(fun_app$b size$b ?v3 )))):named a58 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_list$ )(?v2 A_b_fun$ )(?v3 A_list$ ))(=> (= (map$ ?v0 ?v1 )(map$d ?v2 ?v3 ))(= (fun_app$b size$b ?v1 )(fun_app$ size$ ?v3 )))):named a59 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_list$ )(?v2 Nat_b_fun$ )(?v3 Nat_list$ ))(=> (= (map$d ?v0 ?v1 )(map$ ?v2 ?v3 ))(= (fun_app$ size$ ?v1 )(fun_app$b size$b ?v3 )))):named a60 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 A_a_fun$ )(?v3 A_list$ ))(=> (= (map$a ?v0 ?v1 )(map$a ?v2 ?v3 ))(= (fun_app$ size$ ?v1 )(fun_app$ size$ ?v3 )))):named a61 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_list$ )(?v2 A_b_fun$ )(?v3 A_list$ ))(=> (= (map$d ?v0 ?v1 )(map$d ?v2 ?v3 ))(= (fun_app$ size$ ?v1 )(fun_app$ size$ ?v3 )))):named a62 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 B_a_fun$ )(?v3 B_list$ ))(=> (= (map$a ?v0 ?v1 )(map$b ?v2 ?v3 ))(= (fun_app$ size$ ?v1 )(fun_app$a size$a ?v3 )))):named a63 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_list$ )(?v2 B_b_fun$ )(?v3 B_list$ ))(=> (= (map$d ?v0 ?v1 )(map$e ?v2 ?v3 ))(= (fun_app$ size$ ?v1 )(fun_app$a size$a ?v3 )))):named a64 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 Nat_a_fun$ )(?v3 Nat_list$ ))(=> (= (map$a ?v0 ?v1 )(map$c ?v2 ?v3 ))(= (fun_app$ size$ ?v1 )(fun_app$b size$b ?v3 )))):named a65 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_list$ )(?v2 A_a_fun$ )(?v3 A_list$ ))(=> (= (map$b ?v0 ?v1 )(map$a ?v2 ?v3 ))(= (fun_app$a size$a ?v1 )(fun_app$ size$ ?v3 )))):named a66 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_list$ )(?v2 A_b_fun$ )(?v3 A_list$ ))(=> (= (map$e ?v0 ?v1 )(map$d ?v2 ?v3 ))(= (fun_app$a size$a ?v1 )(fun_app$ size$ ?v3 )))):named a67 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(=> (not (= (fun_app$c size$c ?v0 )(fun_app$c size$c ?v1 )))(= (= ?v0 ?v1 )false ))):named a68 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(=> (not (= (fun_app$a size$a ?v0 )(fun_app$a size$a ?v1 )))(= (= ?v0 ?v1 )false ))):named a69 ))
(assert (! (forall ((?v0 Nat_list$ )(?v1 Nat_list$ ))(=> (not (= (fun_app$b size$b ?v0 )(fun_app$b size$b ?v1 )))(= (= ?v0 ?v1 )false ))):named a70 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (fun_app$ size$ ?v0 )(fun_app$ size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a71 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_b_prod_list$ ))(= (fun_app$c size$c ?v1 )?v0 ))):named a72 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 B_list$ ))(= (fun_app$a size$a ?v1 )?v0 ))):named a73 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 Nat_list$ ))(= (fun_app$b size$b ?v1 )?v0 ))):named a74 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_list$ ))(= (fun_app$ size$ ?v1 )?v0 ))):named a75 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(=> (not (= (fun_app$c size$c ?v0 )(fun_app$c size$c ?v1 )))(not (= ?v0 ?v1 )))):named a76 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(=> (not (= (fun_app$a size$a ?v0 )(fun_app$a size$a ?v1 )))(not (= ?v0 ?v1 )))):named a77 ))
(assert (! (forall ((?v0 Nat_list$ )(?v1 Nat_list$ ))(=> (not (= (fun_app$b size$b ?v0 )(fun_app$b size$b ?v1 )))(not (= ?v0 ?v1 )))):named a78 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (fun_app$ size$ ?v0 )(fun_app$ size$ ?v1 )))(not (= ?v0 ?v1 )))):named a79 ))
(assert (! (= zero$ zero$ ):named a80 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a81 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a82 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_fun$ ))(= (ltake$ (enat$ ?v0 )(inf_llist$f ?v1 ))(llist_of$ (map$c ?v1 (upt$ zero$ ?v0 ))))):named a83 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_b_fun$ ))(= (ltake$a (enat$ ?v0 )(inf_llist$ ?v1 ))(llist_of$b (map$ ?v1 (upt$ zero$ ?v0 ))))):named a84 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_b_prod_fun$ ))(= (ltake$b (enat$ ?v0 )(inf_llist$e ?v1 ))(llist_of$a (map$i ?v1 (upt$ zero$ ?v0 ))))):named a85 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_a_prod_fun$ ))(= (ltake$c (enat$ ?v0 )(inf_llist$a ?v1 ))(llist_of$c (map$j ?v1 (upt$ zero$ ?v0 ))))):named a86 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_b_prod_a_prod_fun$ ))(= (ltake$d (enat$ ?v0 )(inf_llist$c ?v1 ))(llist_of$d (map$k ?v1 (upt$ zero$ ?v0 ))))):named a87 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_a_b_prod_prod_fun$ ))(= (ltake$e (enat$ ?v0 )(inf_llist$b ?v1 ))(llist_of$e (map$l ?v1 (upt$ zero$ ?v0 ))))):named a88 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_b_prod_a_b_prod_prod_fun$ ))(= (ltake$f (enat$ ?v0 )(inf_llist$d ?v1 ))(llist_of$f (map$m ?v1 (upt$ zero$ ?v0 ))))):named a89 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_b_a_prod_fun$ ))(= (ltake$g (enat$ ?v0 )(inf_llist$g ?v1 ))(llist_of$g (map$n ?v1 (upt$ zero$ ?v0 ))))):named a90 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_a_a_prod_prod_fun$ ))(= (ltake$h (enat$ ?v0 )(inf_llist$h ?v1 ))(llist_of$h (map$o ?v1 (upt$ zero$ ?v0 ))))):named a91 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_a_b_prod_a_prod_prod_fun$ ))(= (ltake$i (enat$ ?v0 )(inf_llist$i ?v1 ))(llist_of$i (map$p ?v1 (upt$ zero$ ?v0 ))))):named a92 ))
(assert (! (= size$c (gen_length$ zero$ )):named a93 ))
(assert (! (= size$a (gen_length$a zero$ )):named a94 ))
(assert (! (= size$b (gen_length$b zero$ )):named a95 ))
(assert (! (= size$ (gen_length$c zero$ )):named a96 ))
(assert (! (forall ((?v0 Nat_a_a_prod_fun$ ))(= (lhd$c (inf_llist$a ?v0 ))(fun_app$d ?v0 zero$ ))):named a97 ))
(assert (! (forall ((?v0 Nat_a_a_b_prod_prod_fun$ ))(= (lhd$e (inf_llist$b ?v0 ))(fun_app$e ?v0 zero$ ))):named a98 ))
(assert (! (forall ((?v0 Nat_a_b_prod_a_prod_fun$ ))(= (lhd$d (inf_llist$c ?v0 ))(fun_app$f ?v0 zero$ ))):named a99 ))
(assert (! (forall ((?v0 Nat_a_b_prod_a_b_prod_prod_fun$ ))(= (lhd$f (inf_llist$d ?v0 ))(fun_app$g ?v0 zero$ ))):named a100 ))
(assert (! (forall ((?v0 Nat_a_b_prod_fun$ ))(= (lhd$ (inf_llist$e ?v0 ))(fun_app$h ?v0 zero$ ))):named a101 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(= (lhd$a (inf_llist$f ?v0 ))(fun_app$i ?v0 zero$ ))):named a102 ))
(assert (! (forall ((?v0 Nat_b_fun$ ))(= (lhd$b (inf_llist$ ?v0 ))(fun_app$j ?v0 zero$ ))):named a103 ))
(check-sat )
;(get-unsat-core )
