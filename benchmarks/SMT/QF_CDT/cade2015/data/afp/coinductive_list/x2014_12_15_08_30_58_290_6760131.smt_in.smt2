;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun uua$ ()A_bool_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun zsa$ ()A_llist$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uua$ ?v0 )false ):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )true ):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (not (exists ((?v0 A_llist$ )(?v1 A_llist$ ))(and (= xsa$ (fun_app$a (lappend$ ?v0 )?v1 ))(and (lfinite$ ?v0 )(and (= lNil$ (fun_app$a (lfilter$ p$ )?v0 ))(= zsa$ (fun_app$a (lfilter$ p$ )?v1 ))))))):named a2 ))
(assert (! (= lNil$ (fun_app$a (lfilter$ p$ )lNil$ )):named a3 ))
(assert (! (= xsa$ (fun_app$a (lappend$ lNil$ )xsa$ )):named a4 ))
(assert (! (lfinite$ ys$ ):named a5 ))
(assert (! (= zsa$ (fun_app$a (lfilter$ p$ )xsa$ )):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$a (lfilter$ ?v0 )(fun_app$a (lfilter$ ?v0 )?v1 ))(fun_app$a (lfilter$ ?v0 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (lfilter$ uu$ )?v0 )?v0 )):named a8 ))
(assert (! (= (fun_app$a (lfilter$ p$ )xsa$ )(fun_app$a (lappend$ lNil$ )zsa$ )):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$a (lappend$ lNil$ )?v0 )))):named a11 ))
(assert (! (= (lfinite$ lNil$ )true ):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$a (lappend$ ?v0 )?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$a (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (lfilter$ uua$ )?v0 )lNil$ )):named a15 ))
(assert (! (= (fun_app$a (lfilter$ p$ )xs$ )(fun_app$a (lappend$ ys$ )zs$ )):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (lfinite$ ?v0 )(= (fun_app$a (lfilter$ ?v1 )(fun_app$a (lappend$ ?v0 )?v2 ))(fun_app$a (lappend$ (fun_app$a (lfilter$ ?v1 )?v0 ))(fun_app$a (lfilter$ ?v1 )?v2 ))))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$a (lappend$ ?v0 )?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$a (lappend$ ?v0 )?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a19 ))
(check-sat )
;(get-unsat-core )
