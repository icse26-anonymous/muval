;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun uu$ ()A_llist_bool_fun$ )
(declare-fun inf$ (A_llist_set$ A_llist_set$ )A_llist_set$ )
(declare-fun uua$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun uub$ ()A_llist_a_llist_fun$ )
(declare-fun uuc$ ()A_llist_bool_fun$ )
(declare-fun uud$ ()A_llist_bool_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun image$ (A_llist_a_llist_fun$ A_llist_set$ )A_llist_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uud$ ?v0 )(and (lprefix$ ?v0 (ltl$ xsa$ ))(lfinite$ ?v0 ))):pattern ((fun_app$ uud$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uu$ ?v0 )(and (lprefix$ ?v0 xsa$ )(lfinite$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uuc$ ?v0 )(not (lnull$ ?v0 ))):pattern ((fun_app$ uuc$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a uub$ ?v0 )(ltl$ ?v0 )):pattern ((fun_app$a uub$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(and (lprefix$ ?v1 ?v0 )(lfinite$ ?v1 ))):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a4 ))
(assert (! (not (=> (and (not (lnull$ (lSup$ (collect$ uu$ ))))(not (lnull$ xsa$ )))(and (= (lhd$ (lSup$ (collect$ uu$ )))(lhd$ xsa$ ))(exists ((?v0 A_llist$ ))(and (= (ltl$ (lSup$ (collect$ uu$ )))(lSup$ (collect$ (uua$ ?v0 ))))(= (ltl$ xsa$ )?v0 )))))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a6 ))
(assert (! (=> (not (lnull$ xsa$ ))(= (image$ uub$ (inf$ (collect$ uu$ )(collect$ uuc$ )))(collect$ uud$ ))):named a7 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (lnull$ (lSup$ ?v0 ))(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a9 ))
(assert (! (= (lnull$ (lSup$ (collect$ uu$ )))(lnull$ xsa$ )):named a10 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (not (lnull$ (lSup$ ?v0 )))(not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))))):named a11 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (=> (not (lnull$ ?v0 ))(and (not (lnull$ ?v1 ))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(lprefix$ (ltl$ ?v0 )(ltl$ ?v1 )))))(lprefix$ ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))(lnull$ (lSup$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v2 ?v1 ))(or (lprefix$ ?v0 ?v2 )(lprefix$ ?v2 ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v2 ))(lprefix$ ?v0 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(not (lnull$ ?v0 )))(= (lhd$ ?v0 )(lhd$ ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(not (lnull$ ?v0 )))(not (lnull$ ?v1 )))):named a22 ))
(check-sat )
;(get-unsat-core )
