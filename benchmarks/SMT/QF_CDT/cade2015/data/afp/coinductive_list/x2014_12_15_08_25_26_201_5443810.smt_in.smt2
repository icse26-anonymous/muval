;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_b_llist_prod_set$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_b_llist_prod_fun$ 0 )
(declare-sort A_llist_b_llist_prod_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_prod_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_b_llist_prod_fun$ 0 )
(declare-sort A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ 0 )
(declare-sort A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-datatypes ()((A_llist_b_llist_prod$ (pair$ (fst$ A_llist$ )(snd$ B_llist$ )))))
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()A_llist_b_llist_prod_a_llist_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ya$ ()A_llist_b_llist_prod_set$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()A_llist_b_llist_prod_b_llist_fun$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun chain$ (A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun image$ (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod_set$ )A_llist_set$ )
(declare-fun lSup$a (B_llist_set$ )B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun image$a (A_llist_b_llist_prod_b_llist_fun$ A_llist_b_llist_prod_set$ )B_llist_set$ )
(declare-fun image$b (B_llist_a_llist_b_llist_prod_fun$ B_llist_set$ )A_llist_b_llist_prod_set$ )
(declare-fun image$c (B_llist_b_llist_fun$ B_llist_set$ )B_llist_set$ )
(declare-fun image$d (B_llist_a_llist_fun$ B_llist_set$ )A_llist_set$ )
(declare-fun image$e (A_llist_a_llist_b_llist_prod_fun$ A_llist_set$ )A_llist_b_llist_prod_set$ )
(declare-fun image$f (A_llist_b_llist_fun$ A_llist_set$ )B_llist_set$ )
(declare-fun image$g (A_llist_a_llist_fun$ A_llist_set$ )A_llist_set$ )
(declare-fun image$h (A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ A_llist_b_llist_prod_set$ )A_llist_b_llist_prod_set$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun member$ (A_llist_b_llist_prod$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun fun_app$ (A_llist_b_llist_prod_b_llist_fun$ A_llist_b_llist_prod$ )B_llist$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun member$b (B_llist$ B_llist_set$ )Bool )
(declare-fun fun_app$a (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod$ )A_llist$ )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$c (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$d (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$e (A_llist_b_llist_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$f (B_llist_a_llist_b_llist_prod_fun$ B_llist$ )A_llist_b_llist_prod$ )
(declare-fun fun_app$g (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$h (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun fun_app$i (A_llist_a_llist_b_llist_prod_fun$ A_llist$ )A_llist_b_llist_prod$ )
(declare-fun fun_app$j (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun fun_app$k (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$l (A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ A_llist_b_llist_prod$ )A_llist_b_llist_prod$ )
(declare-fun fun_app$m (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$n (B_llist_a_llist_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$o (A_bool_fun$ A$ )Bool )
(declare-fun lprefix$a ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun rel_prod$ (A_llist_a_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ )A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ )
(declare-fun case_prod$ (A_llist_b_llist_bool_fun_fun$ A_llist_b_llist_prod$ )Bool )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ )A_llist_b_llist_bool_fun_fun$ )
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(! (= (fun_app$ uua$ ?v0 )(snd$ ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(! (= (fun_app$a uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$a uu$ ?v0 )))):named a1 ))
(assert (! (not (fun_app$b (fun_app$c p$ (lhd$ (lSup$ (image$ uu$ ya$ ))))(lhd$a (lSup$a (image$a uua$ ya$ ))))):named a2 ))
(assert (! (chain$ (rel_prod$ lprefix$ lprefix$a )ya$ ):named a3 ))
(assert (! (fun_app$b (fun_app$c p$ (lhd$ xs$ ))(lhd$a ys$ )):named a4 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(=> (member$ ?v0 ya$ )(case_prod$ (llist_all2$ p$ )?v0 ))):named a5 ))
(assert (! (not (lnull$ (lSup$ (image$ uu$ ya$ )))):named a6 ))
(assert (! (not (lnull$a (lSup$a (image$a uua$ ya$ )))):named a7 ))
(assert (! (fun_app$d (fun_app$e (llist_all2$ p$ )xs$ )ys$ ):named a8 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (lnull$ (lSup$ ?v0 ))(forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 B_llist_set$ ))(= (lnull$a (lSup$a ?v0 ))(forall ((?v1 B_llist$ ))(=> (member$b ?v1 ?v0 )(lnull$a ?v1 ))))):named a10 ))
(assert (! (member$ (pair$ xs$ ys$ )ya$ ):named a11 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 B_llist_a_llist_b_llist_prod_fun$ )(?v2 B_llist$ )(?v3 B_llist_set$ ))(=> (and (= ?v0 (fun_app$f ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$ ?v0 (image$b ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ )(?v3 B_llist_set$ ))(=> (and (= ?v0 (fun_app$g ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (image$c ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist$ )(?v3 B_llist_set$ ))(=> (and (= ?v0 (fun_app$h ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$a ?v0 (image$d ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_a_llist_b_llist_prod_fun$ )(?v2 A_llist$ )(?v3 A_llist_set$ ))(=> (and (= ?v0 (fun_app$i ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$e ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist$ )(?v3 A_llist_set$ ))(=> (and (= ?v0 (fun_app$j ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$b ?v0 (image$f ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ )(?v3 A_llist_set$ ))(=> (and (= ?v0 (fun_app$k ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$g ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_llist_prod_a_llist_fun$ )(?v2 A_llist_b_llist_prod$ )(?v3 A_llist_b_llist_prod_set$ ))(=> (and (= ?v0 (fun_app$a ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$ ?v1 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist_b_llist_prod_b_llist_fun$ )(?v2 A_llist_b_llist_prod$ )(?v3 A_llist_b_llist_prod_set$ ))(=> (and (= ?v0 (fun_app$ ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$b ?v0 (image$a ?v1 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ )(?v2 A_llist_b_llist_prod$ )(?v3 A_llist_b_llist_prod_set$ ))(=> (and (= ?v0 (fun_app$l ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$h ?v1 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod$ ))(= (= ?v0 ?v1 )(and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 ))))):named a21 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_llist_prod$ ))(=> (and (fun_app$m (fun_app$n ?v0 (snd$ ?v1 ))(fst$ ?v1 ))(forall ((?v2 A_llist$ )(?v3 B_llist$ ))(=> (fun_app$m (fun_app$n ?v0 ?v3 )?v2 )false )))false )):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (member$ (pair$ ?v0 ?v1 )ya$ )(fun_app$d (fun_app$e (llist_all2$ p$ )?v0 )?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$o ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$o ?v1 (lhd$ ?v0 )))false ))false )):named a26 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_bool_fun$ ))(=> (and (=> (or (lnull$a ?v0 )(not (fun_app$b ?v1 (lhd$a ?v0 ))))false )(=> (and (not (lnull$a ?v0 ))(fun_app$b ?v1 (lhd$a ?v0 )))false ))false )):named a27 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (not (lnull$ (lSup$ ?v0 )))(not (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 )))))):named a28 ))
(assert (! (forall ((?v0 B_llist_set$ ))(= (not (lnull$a (lSup$a ?v0 )))(not (forall ((?v1 B_llist$ ))(=> (member$b ?v1 ?v0 )(lnull$a ?v1 )))))):named a29 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 )))(lnull$ (lSup$ ?v0 )))):named a30 ))
(assert (! (forall ((?v0 B_llist_set$ ))(=> (forall ((?v1 B_llist$ ))(=> (member$b ?v1 ?v0 )(lnull$a ?v1 )))(lnull$a (lSup$a ?v0 )))):named a31 ))
(check-sat )
;(get-unsat-core )
