;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_llist_list$ (nil$ )(cons$ (hd$ A_llist$ )(tl$ A_llist_list$ )))))
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun m$ ()Nat$ )
(declare-fun set$ (A_llist_list$ )A_llist_set$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun lnull$ ()A_llist_bool_fun$ )
(declare-fun plus$a (Enat$ Enat$ )Enat$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun less_eq$ (A_llist_set$ A_llist_set$ )Bool )
(declare-fun llength$ (A_llist_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun less_eq$a (Nat$ Nat$ )Bool )
(assert (! (not (less$ (enat$ (suc$ (plus$ m$ (size$ xss$ ))))(plus$a (enat$ (size$ xss$ ))(eSuc$ (llength$ xss$a ))))):named a0 ))
(assert (! (less_eq$ (set$ xss$ )(collect$ lnull$ )):named a1 ))
(assert (! (less$ (enat$ m$ )(llength$ xss$a )):named a2 ))
(assert (! (less_eq$ (set$ xss$ )(collect$ lnull$ )):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (fun_app$ lnull$ ?v0 )(fun_app$ lnull$ ?v1 ))false )(=> (and (not (fun_app$ lnull$ ?v0 ))(not (fun_app$ lnull$ ?v1 )))false ))false )):named a4 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(fun_app$ lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(fun_app$ lnull$ ?v1 ))))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (fun_app$ lnull$ ?v0 )(fun_app$ lnull$ ?v1 ))false )(=> (or (not (fun_app$ lnull$ ?v0 ))(not (fun_app$ lnull$ ?v1 )))false ))false )):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (fun_app$ lnull$ ?v0 )false )(=> (not (fun_app$ lnull$ ?v0 ))false ))false )):named a7 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (less_eq$a ?v3 ?v4 )(fun_app$a (fun_app$b ?v0 ?v3 )?v4 )))(=> (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(fun_app$a (fun_app$b ?v0 ?v2 )?v1 )))(fun_app$a (fun_app$b ?v0 ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less$ (plus$a (enat$ ?v0 )?v1 )(plus$a (enat$ ?v0 )?v2 ))(less$ ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (plus$a (enat$ ?v0 )(enat$ ?v1 ))(enat$ (plus$ ?v0 ?v1 ))):pattern ((plus$a (enat$ ?v0 )(enat$ ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (= (plus$a (enat$ ?v0 )?v1 )(plus$a (enat$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ )(?v2 Enat$ ))(= (= (plus$a ?v0 (enat$ ?v1 ))(plus$a ?v2 (enat$ ?v1 )))(= ?v0 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (less$ (eSuc$ ?v0 )(eSuc$ ?v1 ))(less$ ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (plus$ ?v0 (suc$ ?v1 ))(suc$ (plus$ ?v0 ?v1 ))):pattern ((plus$ ?v0 (suc$ ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(less$a ?v0 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(less$a ?v1 ?v2 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$a (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(less_eq$a ?v0 ?v2 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$a (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(less_eq$a ?v1 ?v2 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Nat$ ))(=> (less$ (enat$ ?v0 )?v1 )(less$ (enat$ (plus$ ?v2 ?v0 ))(plus$a (enat$ ?v2 )?v1 )))):named a19 ))
(check-sat )
;(get-unsat-core )
