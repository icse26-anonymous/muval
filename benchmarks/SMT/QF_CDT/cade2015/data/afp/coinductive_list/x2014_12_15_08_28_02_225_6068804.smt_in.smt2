;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_prod_set$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_prod_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_llist_a_llist_prod$ (pair$ (fst$ A_llist$ )(snd$ A_llist$ )))))
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun uu$ (Bool A_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun uua$ (A_llist_a_llist_prod_bool_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun member$ (A_llist_a_llist_prod$ A_llist_a_llist_prod_set$ )Bool )
(declare-fun collect$ (A_llist_a_llist_prod_bool_fun$ )A_llist_a_llist_prod_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun llexord$ (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_a_llist_prod_bool_fun$ A_llist_a_llist_prod$ )Bool )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun case_prod$ (A_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_prod_bool_fun$ )
(assert (! (forall ((?v0 A_llist_a_llist_prod_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a0 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist$ )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$a (uu$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uu$ ?v0 ?v1 )?v2 )?v3 )))):named a1 ))
(assert (! (not (= xs$ ys$ )):named a2 ))
(assert (! (forall ((?v0 A$ ))(not (fun_app$c (fun_app$d r$ ?v0 )?v0 ))):named a3 ))
(assert (! (and (fun_app$ (fun_app$a (llexord$ r$ )xs$ )ys$ )(fun_app$ (fun_app$a (llexord$ r$ )ys$ )xs$ )):named a4 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(fun_app$ (fun_app$a (llexord$ ?v0 )?v1 )?v1 )):named a5 ))
(assert (! (member$ (pair$ xs$ ys$ )(collect$ (case_prod$ (llexord$ r$ )))):named a6 ))
(assert (! (member$ (pair$ ys$ xs$ )(collect$ (case_prod$ (llexord$ r$ )))):named a7 ))
(assert (! (forall ((?v0 A_llist_a_llist_prod$ )(?v1 A_llist_a_llist_bool_fun_fun$ ))(=> (forall ((?v2 A_llist$ )(?v3 A_llist$ ))(=> (= ?v0 (pair$ ?v2 ?v3 ))(fun_app$ (fun_app$a ?v1 ?v2 )?v3 )))(fun_app$b (case_prod$ ?v1 )?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$b (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$b (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_prod$ ))(= (fun_app$b (case_prod$ (uu$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$b (case_prod$ ?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_a_llist_prod_bool_fun$ ))(= (case_prod$ (uua$ ?v0 ))?v0 )):named a14 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_prod_bool_fun$ ))(=> (forall ((?v2 A_llist$ )(?v3 A_llist$ ))(= (fun_app$ (fun_app$a ?v0 ?v2 )?v3 )(fun_app$b ?v1 (pair$ ?v2 ?v3 ))))(= (case_prod$ ?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$b (case_prod$ ?v0 )(pair$ ?v1 ?v2 ))(fun_app$ (fun_app$a ?v0 ?v1 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_prod$ ))(=> (and (fun_app$b (case_prod$ ?v0 )?v1 )(forall ((?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (= ?v1 (pair$ ?v2 ?v3 ))(fun_app$ (fun_app$a ?v0 ?v2 )?v3 ))false )))false )):named a17 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$b (case_prod$ ?v0 )(pair$ ?v1 ?v2 ))(fun_app$ (fun_app$a ?v0 ?v1 )?v2 )):pattern ((fun_app$b (case_prod$ ?v0 )(pair$ ?v1 ?v2 ))))):named a18 ))
(check-sat )
;(get-unsat-core )
