;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun f$ ()A_b_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lmap$ (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun ldrop$ (Enat$ )B_llist_b_llist_fun$ )
(declare-fun lmap$a (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$b (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun ltake$ (Enat$ )B_llist_b_llist_fun$ )
(declare-fun ldrop$a (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ldropn$ (Nat$ B_llist$ )B_llist$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun ltake$a (Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun ldropn$a (Nat$ A_llist$ )A_llist$ )
(declare-fun less_eq$ ()A_a_bool_fun_fun$ )
(declare-fun lfinite$ (B_llist$ )Bool )
(declare-fun llength$ (B_llist$ )Enat$ )
(declare-fun lsorted$ (B_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (B_b_fun$ B$ )B$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun iterates$ (B_b_fun$ B$ )B_llist$ )
(declare-fun less_eq$a ()B_b_bool_fun_fun$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun llength$a (A_llist$ )Enat$ )
(declare-fun lsorted$a (A_llist$ )Bool )
(declare-fun monotone$ (A_a_bool_fun_fun$ B_b_bool_fun_fun$ A_b_fun$ )Bool )
(declare-fun iterates$a (A_a_fun$ A$ )A_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(declare-fun lstrict_prefix$a (B_llist$ B_llist$ )Bool )
(assert (! (not (lsorted$ (lmap$ f$ xs$ ))):named a0 ))
(assert (! (lsorted$a xs$ ):named a1 ))
(assert (! (monotone$ less_eq$ less_eq$a f$ ):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$ (lmap$a ?v2 ?v0 )(lmap$a ?v2 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$ (lmap$b ?v2 ?v0 )(lmap$b ?v2 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$a (lmap$c ?v2 ?v0 )(lmap$c ?v2 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$a (lmap$ ?v2 ?v0 )(lmap$ ?v2 ?v1 )))):named a6 ))
(assert (! (= (lsorted$ lNil$ )true ):named a7 ))
(assert (! (= (lsorted$a lNil$a )true ):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldropn$ ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ldropn$ ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldropn$a ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ldropn$ ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldropn$a ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ldropn$a ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ldropn$a ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$ (ldrop$ ?v0 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$a (ldrop$a ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$ (ldrop$ ?v0 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$a (ldrop$a ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$a (ldrop$a ?v0 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$a (ldrop$a ?v0 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (lmap$c ?v0 (iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$b ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lmap$a ?v0 (iterates$a ?v0 ?v1 ))(iterates$a ?v0 (fun_app$c ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$c ?v0 ?v1 ))(lnull$ ?v1 ))):named a19 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$b ?v0 ?v1 ))(lnull$ ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$a ?v0 ?v1 ))(lnull$a ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$a ?v1 ))):named a22 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$c ?v0 ?v1 ))(llength$ ?v1 ))):named a23 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$b ?v0 ?v1 ))(llength$ ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$a ?v0 ?v1 ))(llength$a ?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$a ?v1 ))):named a26 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$ (lmap$c ?v0 ?v1 ))(lmap$c ?v0 (ltl$ ?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$a (lmap$b ?v0 ?v1 ))(lmap$b ?v0 (ltl$ ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$a (lmap$a ?v0 ?v1 ))(lmap$a ?v0 (ltl$a ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$a ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$ (lmap$c ?v0 ?v1 ))(lfinite$ ?v1 ))):named a31 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$a (lmap$b ?v0 ?v1 ))(lfinite$ ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$a (lmap$a ?v0 ?v1 ))(lfinite$a ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$ ?v0 ?v1 ))(lfinite$a ?v1 ))):named a34 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Nat$ ))(=> (lsorted$ ?v0 )(lsorted$ (ldropn$ ?v1 ?v0 )))):named a35 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (lsorted$a ?v0 )(lsorted$a (ldropn$a ?v1 ?v0 )))):named a36 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$ (ltake$ ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$ (ltake$ ?v0 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$a (ltake$a ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$ (ltake$ ?v0 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$a (ltake$a ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$a (ltake$a ?v0 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ltake$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$a (ltake$a ?v0 )?v2 )))):named a40 ))
(assert (! (= (lfinite$a lNil$a )true ):named a41 ))
(assert (! (= (lfinite$ lNil$ )true ):named a42 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ltake$a ?v0 )lNil$a )lNil$a ):pattern ((ltake$a ?v0 )))):named a43 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a44 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a45 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$a (ltl$a ?v0 ))(lfinite$a ?v0 ))):named a46 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ldrop$a ?v0 )lNil$a )lNil$a ):pattern ((ldrop$a ?v0 )))):named a47 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a48 ))
(check-sat )
;(get-unsat-core )
