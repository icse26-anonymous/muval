;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun the_enat$ (Enat$ )Nat$ )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (not (= (lhd$ (ldropWhile$ p$ xs$ ))(lnth$ xs$ (the_enat$ (llength$ (ltakeWhile$ p$ xs$ )))))):named a0 ))
(assert (! (exists ((?v0 A$ ))(and (member$ ?v0 (lset$ xs$ ))(not (fun_app$ p$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (llength$ (ltakeWhile$ ?v0 ?v1 ))(llength$ ?v1 ))(= (ltakeWhile$ ?v0 ?v1 )?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (ldropWhile$ ?v2 ?v0 )(ldropWhile$ ?v3 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (ltakeWhile$ ?v2 ?v0 )(ltakeWhile$ ?v3 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (exists ((?v2 A$ ))(and (member$ ?v2 (lset$ ?v0 ))(not (fun_app$ ?v1 ?v2 ))))(member$ (lhd$ (ldropWhile$ ?v1 ?v0 ))(lset$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (exists ((?v2 A$ ))(and (member$ ?v2 (lset$ ?v0 ))(not (fun_app$ ?v1 ?v2 ))))(not (fun_app$ ?v1 (lhd$ (ldropWhile$ ?v1 ?v0 )))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(fun_app$ ?v1 ?v2 )))(= (ltakeWhile$ ?v1 ?v0 )?v0 )):pattern ((ltakeWhile$ ?v1 ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ldropWhile$ ?v1 ?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ltakeWhile$ ?v1 ?v2 )))(and (member$ ?v0 (lset$ ?v2 ))(fun_app$ ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(=> (less$ (llength$ (ltakeWhile$ ?v0 ?v1 ))(llength$ ?v1 ))(not (fun_app$ ?v0 (lnth$ ?v1 (the_enat$ (llength$ (ltakeWhile$ ?v0 ?v1 )))))))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(! (= (ldropWhile$ ?v0 ?v1 )(ldrop$ (llength$ (ltakeWhile$ ?v0 ?v1 ))?v1 )):pattern ((ldropWhile$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$ ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (less$ (llength$ (ltakeWhile$ ?v0 ?v1 ))(llength$ ?v1 ))(exists ((?v2 A$ ))(and (member$ ?v2 (lset$ ?v1 ))(not (fun_app$ ?v0 ?v2 )))))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (ldropWhile$ ?v0 ?v1 ))(forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v1 ))(fun_app$ ?v0 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (not (lnull$ (ltakeWhile$ ?v0 ?v1 )))(and (not (lnull$ ?v1 ))(fun_app$ ?v0 (lhd$ ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (ltakeWhile$ ?v0 ?v1 ))(or (lnull$ ?v1 )(not (fun_app$ ?v0 (lhd$ ?v1 )))))):named a16 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (ltakeWhile$ ?v0 ?v1 ))(=> (not (lnull$ ?v1 ))(not (fun_app$ ?v0 (lhd$ ?v1 )))))):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lappend$ (ltakeWhile$ ?v0 ?v1 )(ldropWhile$ ?v0 ?v1 ))?v1 )):named a18 ))
(check-sat )
;(get-unsat-core )
