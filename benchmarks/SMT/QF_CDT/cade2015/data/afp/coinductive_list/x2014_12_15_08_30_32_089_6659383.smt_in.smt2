;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun p$ (A$ )Bool )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun less$b (Nat_set$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$b (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$c (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(declare-fun infinity$ ()Enat$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun less_eq$a (Enat$ )Enat_bool_fun$ )
(declare-fun less_eq$b (Nat_set$ Nat_set$ )Bool )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(and (less$ (enat$ ?v0 )(llength$ xs$ ))(p$ (lnth$ xs$ ?v0 )))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (not (p$ (lnth$ xs$ n$ )))):named a1 ))
(assert (! (less_eq$ m$ n$ ):named a2 ))
(assert (! (less$ (enat$ n$ )(llength$ xs$ )):named a3 ))
(assert (! (not (lfinite$ xs$ )):named a4 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$ (fun_app$a ?v0 ?v3 )?v4 )))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$ (fun_app$a ?v0 ?v2 )?v1 )))(fun_app$ (fun_app$a ?v0 ?v2 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (fun_app$b (less_eq$a ?v3 )?v4 )(fun_app$b (fun_app$c ?v0 ?v3 )?v4 )))(=> (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(fun_app$b (fun_app$c ?v0 ?v2 )?v1 )))(fun_app$b (fun_app$c ?v0 ?v2 )?v1 ))):named a6 ))
(assert (! (less_eq$b (collect$ uu$ )(lessThan$ m$ )):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (= (llength$ xs$ )infinity$ ):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a10 ))
(assert (! (forall ((?v0 Nat_set$ ))(less_eq$b ?v0 ?v0 )):named a11 ))
(assert (! (forall ((?v0 Enat$ ))(fun_app$b (less_eq$a ?v0 )?v0 )):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less$a ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(not (= ?v1 ?v0 )))):pattern ((less$a ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(! (= (less$b ?v0 ?v1 )(and (less_eq$b ?v0 ?v1 )(not (= ?v1 ?v0 )))):pattern ((less$b ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (less$ ?v0 ?v1 )(and (fun_app$b (less_eq$a ?v0 )?v1 )(not (= ?v1 ?v0 )))):pattern ((less$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less$a ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(not (= ?v0 ?v1 )))):pattern ((less$a ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(! (= (less$b ?v0 ?v1 )(and (less_eq$b ?v0 ?v1 )(not (= ?v0 ?v1 )))):pattern ((less$b ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (less$ ?v0 ?v1 )(and (fun_app$b (less_eq$a ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((less$ ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less$a ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(not (= ?v0 ?v1 )))):pattern ((less$a ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (less$ ?v0 ?v1 )(and (fun_app$b (less_eq$a ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((less$ ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less$a ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(not (= ?v1 ?v0 )))):pattern ((less$a ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (less$ ?v0 ?v1 )(and (fun_app$b (less_eq$a ?v0 )?v1 )(not (= ?v1 ?v0 )))):pattern ((less$ ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less$a ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(not (= ?v1 ?v0 )))):pattern ((less$a ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(! (= (less$b ?v0 ?v1 )(and (less_eq$b ?v0 ?v1 )(not (= ?v1 ?v0 )))):pattern ((less$b ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (less$ ?v0 ?v1 )(and (fun_app$b (less_eq$a ?v0 )?v1 )(not (= ?v1 ?v0 )))):pattern ((less$ ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less$a ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(not (= ?v0 ?v1 )))):pattern ((less$a ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(! (= (less$b ?v0 ?v1 )(and (less_eq$b ?v0 ?v1 )(not (= ?v0 ?v1 )))):pattern ((less$b ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (less$ ?v0 ?v1 )(and (fun_app$b (less_eq$a ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((less$ ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (less_eq$a infinity$ )?v0 )(= ?v0 infinity$ )):pattern ((fun_app$b (less_eq$a infinity$ )?v0 )))):named a30 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (less_eq$a ?v0 )infinity$ )true ):pattern ((less_eq$a ?v0 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$b (less_eq$a (enat$ ?v0 ))(enat$ ?v1 ))(less_eq$ ?v0 ?v1 )):pattern ((fun_app$b (less_eq$a (enat$ ?v0 ))(enat$ ?v1 ))))):named a32 ))
(check-sat )
;(get-unsat-core )
