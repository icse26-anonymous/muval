;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_a_option_fun$ 0 )
(declare-sort A_list_nat_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_option$ (none$ )(some$ (the$ A$ )))))
(declare-fun xs$ ()A_list$ )
(declare-fun ys$ ()A_list$ )
(declare-fun ysa$ ()A_list$ )
(declare-fun bind$ (A_list$ A_a_list_fun$ )A_list$ )
(declare-fun maps$ (A_a_list_fun$ )A_list_a_list_fun$ )
(declare-fun null$ (A_list$ )Bool )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_list$ )A_bool_fun$ )
(declare-fun splice$ (A_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$ (A_list_bool_fun$ A_list$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun rotate1$ (A_list$ )A_list$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_list_nat_fun$ A_list$ )Nat$ )
(declare-fun fun_app$c (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun list_ex1$ (A_bool_fun$ )A_list_bool_fun$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun gen_length$ (Nat$ )A_list_nat_fun$ )
(declare-fun map_filter$ (A_a_option_fun$ )A_list_a_list_fun$ )
(assert (! (not (= nil$ ysa$ )):named a0 ))
(assert (! (= (llist_of$ xs$ )(llist_of$ ys$ )):named a1 ))
(assert (! (= (llist_of$ nil$ )(llist_of$ ysa$ )):named a2 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a3 ))
(assert (! (forall ((?v0 A_a_list_fun$ ))(! (= (bind$ nil$ ?v0 )nil$ ):pattern ((bind$ nil$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$ (list_ex1$ ?v0 )nil$ )false ):pattern ((list_ex1$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (member$ nil$ )?v0 )false ):pattern ((fun_app$a (member$ nil$ )?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b (gen_length$ ?v0 )nil$ )?v0 ):pattern ((gen_length$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$c (splice$ ?v0 )nil$ )?v0 ):pattern ((splice$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_a_list_fun$ ))(! (= (fun_app$c (maps$ ?v0 )nil$ )nil$ ):pattern ((maps$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_list$ ))(= (= ?v0 nil$ )(null$ ?v0 ))):named a10 ))
(assert (! (= (null$ nil$ )true ):named a11 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (rotate1$ ?v0 )nil$ )(= ?v0 nil$ ))):named a12 ))
(assert (! (forall ((?v0 A_a_option_fun$ ))(! (= (fun_app$c (map_filter$ ?v0 )nil$ )nil$ ):pattern ((map_filter$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_list$ ))(= (lnull$ (llist_of$ ?v0 ))(= ?v0 nil$ ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a17 ))
(check-sat )
;(get-unsat-core )
