;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun llast$ (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lsetp$ (A_llist_llist_llist$ )A_llist_llist_bool_fun$ )
(declare-fun llast$a (A_llist_llist$ )A_llist$ )
(declare-fun llast$b (A_llist$ )A$ )
(declare-fun lsetp$a (A_llist_llist$ )A_llist_bool_fun$ )
(declare-fun lsetp$b (A_llist$ )A_bool_fun$ )
(declare-fun fun_app$ (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (A_llist_llist$ A_llist_llist_llist$ )Bool )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun lappend$a (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lappend$b (A_llist_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lfinite$a (A_llist_llist_llist$ )Bool )
(declare-fun lfinite$b (A_llist_llist$ )Bool )
(declare-fun lmember$a (A_llist$ )A_llist_llist_bool_fun$ )
(declare-fun lmember$b (A$ )A_llist_bool_fun$ )
(declare-fun pred_llist$ (A_llist_llist_bool_fun$ A_llist_llist_llist$ )Bool )
(declare-fun pred_llist$a (A_llist_bool_fun$ )A_llist_llist_bool_fun$ )
(declare-fun pred_llist$b (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist_llist_llist$ A_llist_llist_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_llist_llist$ )A_llist_llist_bool_fun$ )
(declare-fun lstrict_prefix$b (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (= xs$ (lconcat$ (lCons$a xs$a xss$ )))):named a0 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (lfinite$ xs$ ):named a4 ))
(assert (! (lfinite$ (lconcat$ xss$a )):named a5 ))
(assert (! (= xs$ (lappend$ xs$a (lconcat$ xss$ ))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (pred_llist$ ?v0 (lCons$b ?v1 ?v2 ))(and (fun_app$ ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$b ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$ (pred_llist$a ?v0 )(lCons$a ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(fun_app$ (pred_llist$a ?v0 )?v2 ))):pattern ((fun_app$ (pred_llist$a ?v0 )(lCons$a ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (pred_llist$b ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$a (pred_llist$b ?v0 )?v2 ))):pattern ((fun_app$a (pred_llist$b ?v0 )(lCons$ ?v1 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (lmember$ ?v0 (lCons$b ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$ ?v0 ?v2 ))):pattern ((lmember$ ?v0 (lCons$b ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$ (lmember$a ?v0 )(lCons$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$ (lmember$a ?v0 )?v2 ))):pattern ((fun_app$ (lmember$a ?v0 )(lCons$a ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (lmember$b ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$a (lmember$b ?v0 )?v2 ))):pattern ((fun_app$a (lmember$b ?v0 )(lCons$ ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lconcat$a (lCons$b ?v0 ?v1 ))(lappend$a ?v0 (lconcat$a ?v1 ))):pattern ((lCons$b ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lconcat$ (lCons$a ?v0 ?v1 ))(lappend$ ?v0 (lconcat$ ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a14 ))
(assert (! (= (lconcat$ xssa$ )(lCons$ x$ xs$ )):named a15 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(! (= (lstrict_prefix$ (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$ ?v1 ?v3 ))):pattern ((lstrict_prefix$ (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(! (= (fun_app$ (lstrict_prefix$a (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (lstrict_prefix$a ?v1 )?v3 ))):pattern ((fun_app$ (lstrict_prefix$a (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (lstrict_prefix$b (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$a (lstrict_prefix$b ?v1 )?v3 ))):pattern ((fun_app$a (lstrict_prefix$b (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a18 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist$ ))(= (fun_app$ (lsetp$ ?v0 )?v1 )(or (exists ((?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(and (= ?v0 (lCons$b ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_llist_llist_llist$ )(?v3 A_llist_llist$ )(?v4 A_llist_llist$ ))(and (= ?v0 (lCons$b ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$ (lsetp$ ?v2 )?v3 ))))))):named a19 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ ))(= (fun_app$a (lsetp$a ?v0 )?v1 )(or (exists ((?v2 A_llist$ )(?v3 A_llist_llist$ ))(and (= ?v0 (lCons$a ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_llist_llist$ )(?v3 A_llist$ )(?v4 A_llist$ ))(and (= ?v0 (lCons$a ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$a (lsetp$a ?v2 )?v3 ))))))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(= (fun_app$b (lsetp$b ?v0 )?v1 )(or (exists ((?v2 A$ )(?v3 A_llist$ ))(and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$b (lsetp$b ?v2 )?v3 ))))))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (fun_app$ (lsetp$ ?v0 )?v1 )(and (forall ((?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(=> (and (= ?v0 (lCons$b ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_llist_llist_llist$ )(?v3 A_llist_llist$ )(?v4 A_llist_llist$ ))(=> (and (= ?v0 (lCons$b ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$ (lsetp$ ?v2 )?v3 )))false ))))false )):named a22 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$a (lsetp$a ?v0 )?v1 )(and (forall ((?v2 A_llist$ )(?v3 A_llist_llist$ ))(=> (and (= ?v0 (lCons$a ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_llist_llist$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (= ?v0 (lCons$a ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$a (lsetp$a ?v2 )?v3 )))false ))))false )):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (fun_app$b (lsetp$b ?v0 )?v1 )(and (forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(=> (and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$b (lsetp$b ?v2 )?v3 )))false ))))false )):named a24 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (fun_app$ (lsetp$ ?v0 )?v1 )(fun_app$ (lsetp$ (lCons$b ?v2 ?v0 ))?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$a (lsetp$a ?v0 )?v1 )(fun_app$a (lsetp$a (lCons$a ?v2 ?v0 ))?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$b (lsetp$b ?v0 )?v1 )(fun_app$b (lsetp$b (lCons$ ?v2 ?v0 ))?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(fun_app$ (lsetp$ (lCons$b ?v0 ?v1 ))?v0 )):named a28 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(fun_app$a (lsetp$a (lCons$a ?v0 ?v1 ))?v0 )):named a29 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(fun_app$b (lsetp$b (lCons$ ?v0 ?v1 ))?v0 )):named a30 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (llast$ (lCons$b ?v0 (lCons$b ?v1 ?v2 )))(llast$ (lCons$b ?v1 ?v2 ))):pattern ((lCons$b ?v0 (lCons$b ?v1 ?v2 ))))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (llast$a (lCons$a ?v0 (lCons$a ?v1 ?v2 )))(llast$a (lCons$a ?v1 ?v2 ))):pattern ((lCons$a ?v0 (lCons$a ?v1 ?v2 ))))):named a32 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (llast$b (lCons$ ?v0 (lCons$ ?v1 ?v2 )))(llast$b (lCons$ ?v1 ?v2 ))):pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2 ))))):named a33 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (lappend$b (lCons$b ?v0 ?v1 )?v2 )(lCons$b ?v0 (lappend$b ?v1 ?v2 ))):pattern ((lappend$b (lCons$b ?v0 ?v1 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (lappend$a (lCons$a ?v0 ?v1 )?v2 )(lCons$a ?v0 (lappend$a ?v1 ?v2 ))):pattern ((lappend$a (lCons$a ?v0 ?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$ (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$ ?v0 ?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lfinite$a (lCons$b ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lfinite$b (lCons$a ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lfinite$a (lCons$b ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lfinite$b (lCons$a ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a42 ))
(check-sat )
;(get-unsat-core )
