;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun uu$ ()A_llist_bool_fun$ )
(declare-fun uua$ (Bool )A_llist_bool_fun_a_llist_bool_fun_fun$ )
(declare-fun uub$ (A_llist_bool_fun$ )A_llist_bool_fun_a_llist_bool_fun_fun$ )
(declare-fun uuc$ (A_llist_bool_fun$ )A_llist_bool_fun_a_llist_bool_fun_fun$ )
(declare-fun uud$ (A_llist_bool_fun$ )A_llist_bool_fun_a_llist_bool_fun_fun$ )
(declare-fun uue$ (A_llist_bool_fun$ )A_llist_bool_fun_a_llist_bool_fun_fun$ )
(declare-fun uuf$ (Bool )A_llist_bool_fun$ )
(declare-fun uug$ ()A_llist_bool_fun$ )
(declare-fun uuh$ (A_llist_a_llist_fun$ )A_llist_bool_fun$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$ )Bool )
(declare-fun mcont$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_llist_bool_fun_a_llist_bool_fun_fun$ A_llist_bool_fun$ )A_llist_bool_fun$ )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (A_llist_set_a_llist_fun$ A_llist_set$ )A_llist$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(declare-fun admissible$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_bool_fun$ )Bool )
(declare-fun finite_lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uu$ ?v0 )(not (ldistinct$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ ))(! (= (fun_app$ (uuh$ ?v0 )?v1 )(ldistinct$ (fun_app$a ?v0 ?v1 ))):pattern ((fun_app$ (uuh$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$b (uub$ ?v0 )?v1 )?v2 )(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uub$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$b (uuc$ ?v0 )?v1 )?v2 )(=> (fun_app$ ?v1 ?v2 )(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$b (uuc$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$b (uue$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uue$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$b (uud$ ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uud$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_bool_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )(=> ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist$ ))(! (= (fun_app$ (uuf$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uuf$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uug$ ?v0 )true ):pattern ((fun_app$ uug$ ?v0 )))):named a8 ))
(assert (! (not (admissible$ lSup$ lprefix$ uu$ )):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$c lprefix$ ?v0 )?v0 )):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$c lprefix$ ?v0 )?v0 )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$c lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$c lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$c lprefix$ ?v2 )?v1 ))(or (fun_app$ (fun_app$c lprefix$ ?v0 )?v2 )(fun_app$ (fun_app$c lprefix$ ?v2 )?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$c lprefix$ ?v1 )?v2 ))(fun_app$ (fun_app$c lprefix$ ?v0 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$c lprefix$ ?v1 )?v2 ))(fun_app$ (fun_app$c lprefix$ ?v0 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (ldistinct$ ?v0 )(fun_app$ (fun_app$c lprefix$ ?v1 )?v0 ))(ldistinct$ ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_set_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_bool_fun$ ))(=> (=> ?v0 (admissible$ ?v1 ?v2 ?v3 ))(admissible$ ?v1 ?v2 (fun_app$b (uua$ ?v0 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_bool_fun$ )(?v3 A_llist_bool_fun$ ))(=> (and (admissible$ ?v0 ?v1 (fun_app$b (uub$ ?v2 )?v3 ))(admissible$ ?v0 ?v1 (fun_app$b (uuc$ ?v2 )?v3 )))(admissible$ ?v0 ?v1 (fun_app$b (uud$ ?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_bool_fun$ )(?v3 A_llist_bool_fun$ ))(=> (and (admissible$ ?v0 ?v1 ?v2 )(admissible$ ?v0 ?v1 ?v3 ))(admissible$ ?v0 ?v1 (fun_app$b (uue$ ?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 Bool ))(admissible$ ?v0 ?v1 (uuf$ ?v2 ))):named a21 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ ))(admissible$ ?v0 ?v1 uug$ )):named a22 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ ))(=> (mcont$ ?v0 ?v1 lSup$ lprefix$ ?v2 )(admissible$ ?v0 ?v1 (uuh$ ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (and (admissible$ lSup$ lprefix$ ?v0 )(exists ((?v2 A_llist$ ))(and (fun_app$ (fun_app$c lprefix$ ?v2 )?v1 )(and (lfinite$ ?v2 )(forall ((?v3 A_llist$ ))(=> (and (fun_app$ (fun_app$c lprefix$ ?v2 )?v3 )(and (fun_app$ (fun_app$c lprefix$ ?v3 )?v1 )(lfinite$ ?v3 )))(fun_app$ ?v0 ?v3 )))))))(fun_app$ ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (chain$ lprefix$ ?v0 )(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(ldistinct$ ?v1 ))))(ldistinct$ (fun_app$d lSup$ ?v0 )))):named a25 ))
(assert (! (= finite_lprefix$ lprefix$ ):named a26 ))
(check-sat )
;(get-unsat-core )
