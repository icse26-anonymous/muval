;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-datatypes ()((A_nat_prod$ (pair$ (fst$ A$ )(snd$ Nat$ )))))
(declare-sort A_nat_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()A_nat_prod_llist$)
(declare-fun lhd$ (A_nat_prod_llist$)A_nat_prod$)
(declare-fun ltl$ (A_nat_prod_llist$)A_nat_prod_llist$)
(declare-fun lCons$ (A_nat_prod$ A_nat_prod_llist$ )A_nat_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()Nat_llist$)
(declare-fun lhd$b (Nat_llist$)Nat$)
(declare-fun ltl$b (Nat_llist$)Nat_llist$)
(declare-fun lCons$b (Nat$ Nat_llist$ )Nat_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))(Nat_nat_prod$ (pair$a (fst$a Nat$ )(snd$a Nat$ )))))
(declare-sort Nat_nat_prod_llist$ 0)
(declare-fun lNil$c ()Nat_nat_prod_llist$)
(declare-fun lhd$c (Nat_nat_prod_llist$)Nat_nat_prod$)
(declare-fun ltl$c (Nat_nat_prod_llist$)Nat_nat_prod_llist$)
(declare-fun lCons$c (Nat_nat_prod$ Nat_nat_prod_llist$ )Nat_nat_prod_llist$)
(declare-datatypes ()((Nat_a_prod$ (pair$b (fst$b Nat$ )(snd$b A$ )))))
(declare-sort Nat_a_prod_llist$ 0)
(declare-fun lNil$d ()Nat_a_prod_llist$)
(declare-fun lhd$d (Nat_a_prod_llist$)Nat_a_prod$)
(declare-fun ltl$d (Nat_a_prod_llist$)Nat_a_prod_llist$)
(declare-fun lCons$d (Nat_a_prod$ Nat_a_prod_llist$ )Nat_a_prod_llist$)
(declare-datatypes ()((A_a_prod$ (pair$c (fst$c A$ )(snd$c A$ )))))
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$e ()A_a_prod_llist$)
(declare-fun lhd$e (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$e (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$e (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((Nat_nat_nat_prod_prod$ (pair$d (fst$d Nat$ )(snd$d Nat_nat_prod$ )))))
(declare-sort Nat_nat_nat_prod_prod_llist$ 0)
(declare-fun lNil$f ()Nat_nat_nat_prod_prod_llist$)
(declare-fun lhd$f (Nat_nat_nat_prod_prod_llist$)Nat_nat_nat_prod_prod$)
(declare-fun ltl$f (Nat_nat_nat_prod_prod_llist$)Nat_nat_nat_prod_prod_llist$)
(declare-fun lCons$f (Nat_nat_nat_prod_prod$ Nat_nat_nat_prod_prod_llist$ )Nat_nat_nat_prod_prod_llist$)
(declare-datatypes ()((Nat_a_nat_prod_prod$ (pair$e (fst$e Nat$ )(snd$e A_nat_prod$ )))))
(declare-sort Nat_a_nat_prod_prod_llist$ 0)
(declare-fun lNil$g ()Nat_a_nat_prod_prod_llist$)
(declare-fun lhd$g (Nat_a_nat_prod_prod_llist$)Nat_a_nat_prod_prod$)
(declare-fun ltl$g (Nat_a_nat_prod_prod_llist$)Nat_a_nat_prod_prod_llist$)
(declare-fun lCons$g (Nat_a_nat_prod_prod$ Nat_a_nat_prod_prod_llist$ )Nat_a_nat_prod_prod_llist$)
(declare-datatypes ()((Nat_nat_prod_nat_prod$ (pair$f (fst$f Nat_nat_prod$ )(snd$f Nat$ )))))
(declare-sort Nat_nat_prod_nat_prod_llist$ 0)
(declare-fun lNil$h ()Nat_nat_prod_nat_prod_llist$)
(declare-fun lhd$h (Nat_nat_prod_nat_prod_llist$)Nat_nat_prod_nat_prod$)
(declare-fun ltl$h (Nat_nat_prod_nat_prod_llist$)Nat_nat_prod_nat_prod_llist$)
(declare-fun lCons$h (Nat_nat_prod_nat_prod$ Nat_nat_prod_nat_prod_llist$ )Nat_nat_prod_nat_prod_llist$)
(declare-datatypes ()((Nat_nat_prod_a_prod$ (pair$g (fst$g Nat_nat_prod$ )(snd$g A$ )))))
(declare-sort Nat_nat_prod_a_prod_llist$ 0)
(declare-fun lNil$i ()Nat_nat_prod_a_prod_llist$)
(declare-fun lhd$i (Nat_nat_prod_a_prod_llist$)Nat_nat_prod_a_prod$)
(declare-fun ltl$i (Nat_nat_prod_a_prod_llist$)Nat_nat_prod_a_prod_llist$)
(declare-fun lCons$i (Nat_nat_prod_a_prod$ Nat_nat_prod_a_prod_llist$ )Nat_nat_prod_a_prod_llist$)
(declare-datatypes ()((A_nat_prod_nat_prod$ (pair$h (fst$h A_nat_prod$ )(snd$h Nat$ )))))
(declare-sort A_nat_prod_nat_prod_llist$ 0)
(declare-fun lNil$j ()A_nat_prod_nat_prod_llist$)
(declare-fun lhd$j (A_nat_prod_nat_prod_llist$)A_nat_prod_nat_prod$)
(declare-fun ltl$j (A_nat_prod_nat_prod_llist$)A_nat_prod_nat_prod_llist$)
(declare-fun lCons$j (A_nat_prod_nat_prod$ A_nat_prod_nat_prod_llist$ )A_nat_prod_nat_prod_llist$)
(declare-datatypes ()((A_nat_prod_a_prod$ (pair$i (fst$i A_nat_prod$ )(snd$i A$ )))))
(declare-sort A_nat_prod_a_prod_llist$ 0)
(declare-fun lNil$k ()A_nat_prod_a_prod_llist$)
(declare-fun lhd$k (A_nat_prod_a_prod_llist$)A_nat_prod_a_prod$)
(declare-fun ltl$k (A_nat_prod_a_prod_llist$)A_nat_prod_a_prod_llist$)
(declare-fun lCons$k (A_nat_prod_a_prod$ A_nat_prod_a_prod_llist$ )A_nat_prod_a_prod_llist$)
(declare-datatypes ()((A_nat_nat_prod_prod$ (pair$j (fst$j A$ )(snd$j Nat_nat_prod$ )))))
(declare-sort A_nat_nat_prod_prod_llist$ 0)
(declare-fun lNil$l ()A_nat_nat_prod_prod_llist$)
(declare-fun lhd$l (A_nat_nat_prod_prod_llist$)A_nat_nat_prod_prod$)
(declare-fun ltl$l (A_nat_nat_prod_prod_llist$)A_nat_nat_prod_prod_llist$)
(declare-fun lCons$l (A_nat_nat_prod_prod$ A_nat_nat_prod_prod_llist$ )A_nat_nat_prod_prod_llist$)
(declare-datatypes ()((A_a_nat_prod_prod$ (pair$k (fst$k A$ )(snd$k A_nat_prod$ )))))
(declare-sort A_a_nat_prod_prod_llist$ 0)
(declare-fun lNil$m ()A_a_nat_prod_prod_llist$)
(declare-fun lhd$m (A_a_nat_prod_prod_llist$)A_a_nat_prod_prod$)
(declare-fun ltl$m (A_a_nat_prod_prod_llist$)A_a_nat_prod_prod_llist$)
(declare-fun lCons$m (A_a_nat_prod_prod$ A_a_nat_prod_prod_llist$ )A_a_nat_prod_prod_llist$)
(declare-fun k$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lzip$ (A_llist$ Nat_llist$ )A_nat_prod_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ltake$ (Enat$ Nat_llist$ )Nat_llist$ )
(declare-fun lzip$a (Nat_llist$ Nat_llist$ )Nat_nat_prod_llist$ )
(declare-fun lzip$b (Nat_llist$ A_llist$ )Nat_a_prod_llist$ )
(declare-fun lzip$c (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$d (Nat_llist$ Nat_nat_prod_llist$ )Nat_nat_nat_prod_prod_llist$ )
(declare-fun lzip$e (Nat_llist$ A_nat_prod_llist$ )Nat_a_nat_prod_prod_llist$ )
(declare-fun lzip$f (Nat_nat_prod_llist$ Nat_llist$ )Nat_nat_prod_nat_prod_llist$ )
(declare-fun lzip$g (Nat_nat_prod_llist$ A_llist$ )Nat_nat_prod_a_prod_llist$ )
(declare-fun lzip$h (A_nat_prod_llist$ Nat_llist$ )A_nat_prod_nat_prod_llist$ )
(declare-fun lzip$i (A_nat_prod_llist$ A_llist$ )A_nat_prod_a_prod_llist$ )
(declare-fun zero$a ()Enat$ )
(declare-fun ltake$a (Enat$ A_nat_prod_llist$ )A_nat_prod_llist$ )
(declare-fun ltake$b (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$c (Enat$ Nat_nat_prod_llist$ )Nat_nat_prod_llist$ )
(declare-fun ltake$d (Enat$ Nat_a_prod_llist$ )Nat_a_prod_llist$ )
(declare-fun ltake$e (Enat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ltake$f (Enat$ Nat_nat_nat_prod_prod_llist$ )Nat_nat_nat_prod_prod_llist$ )
(declare-fun ltake$g (Enat$ Nat_a_nat_prod_prod_llist$ )Nat_a_nat_prod_prod_llist$ )
(declare-fun ltake$h (Enat$ Nat_nat_prod_nat_prod_llist$ )Nat_nat_prod_nat_prod_llist$ )
(declare-fun ltake$i (Enat$ Nat_nat_prod_a_prod_llist$ )Nat_nat_prod_a_prod_llist$ )
(declare-fun ltake$j (Enat$ A_nat_prod_nat_prod_llist$ )A_nat_prod_nat_prod_llist$ )
(declare-fun ltake$k (Enat$ A_nat_prod_a_prod_llist$ )A_nat_prod_a_prod_llist$ )
(declare-fun ltake$l (Enat$ A_nat_nat_prod_prod_llist$ )A_nat_nat_prod_prod_llist$ )
(declare-fun ltake$m (Enat$ A_a_nat_prod_prod_llist$ )A_a_nat_prod_prod_llist$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun iterates$ (Nat_nat_fun$ Nat$ )Nat_llist$ )
(assert (! (not (= (lzip$ xs$ (ltake$ (enat$ k$ )(iterates$ suc$ zero$ )))(lzip$ xs$ (iterates$ suc$ zero$ )))):named a0 ))
(assert (! (= (llength$ xs$ )(enat$ k$ )):named a1 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 Nat_llist$ ))(= (ltake$a ?v0 (lzip$ ?v1 ?v2 ))(lzip$ (ltake$b ?v0 ?v1 )(ltake$ ?v0 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(= (ltake$c ?v0 (lzip$a ?v1 ?v2 ))(lzip$a (ltake$ ?v0 ?v1 )(ltake$ ?v0 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_llist$ )(?v2 A_llist$ ))(= (ltake$d ?v0 (lzip$b ?v1 ?v2 ))(lzip$b (ltake$ ?v0 ?v1 )(ltake$b ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (ltake$e ?v0 (lzip$c ?v1 ?v2 ))(lzip$c (ltake$b ?v0 ?v1 )(ltake$b ?v0 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_llist$ )(?v2 Nat_nat_prod_llist$ ))(= (ltake$f ?v0 (lzip$d ?v1 ?v2 ))(lzip$d (ltake$ ?v0 ?v1 )(ltake$c ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_llist$ )(?v2 A_nat_prod_llist$ ))(= (ltake$g ?v0 (lzip$e ?v1 ?v2 ))(lzip$e (ltake$ ?v0 ?v1 )(ltake$a ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_nat_prod_llist$ )(?v2 Nat_llist$ ))(= (ltake$h ?v0 (lzip$f ?v1 ?v2 ))(lzip$f (ltake$c ?v0 ?v1 )(ltake$ ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_nat_prod_llist$ )(?v2 A_llist$ ))(= (ltake$i ?v0 (lzip$g ?v1 ?v2 ))(lzip$g (ltake$c ?v0 ?v1 )(ltake$b ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_nat_prod_llist$ )(?v2 Nat_llist$ ))(= (ltake$j ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (ltake$a ?v0 ?v1 )(ltake$ ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_nat_prod_llist$ )(?v2 A_llist$ ))(= (ltake$k ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (ltake$a ?v0 ?v1 )(ltake$b ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat_a_nat_prod_prod_llist$ )(?v1 Nat_a_nat_prod_prod_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$g (enat$ ?v2 )?v0 )(ltake$g (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ )(?v1 Nat_a_prod_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$d (enat$ ?v2 )?v0 )(ltake$d (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_nat_nat_prod_prod_llist$ )(?v1 A_nat_nat_prod_prod_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$l (enat$ ?v2 )?v0 )(ltake$l (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ )(?v1 A_a_nat_prod_prod_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$m (enat$ ?v2 )?v0 )(ltake$m (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$e (enat$ ?v2 )?v0 )(ltake$e (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ )(?v1 Nat_nat_prod_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$c (enat$ ?v2 )?v0 )(ltake$c (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 A_nat_prod_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$a (enat$ ?v2 )?v0 )(ltake$a (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$b (enat$ ?v2 )?v0 )(ltake$b (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$ suc$ ?v1 ))false )))false )):named a24 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$ suc$ ?v1 ))false )))false )):named a25 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$a (fun_app$b ?v0 ?v3 )zero$ ))(and (forall ((?v3 Nat$ ))(fun_app$a (fun_app$b ?v0 zero$ )(fun_app$ suc$ ?v3 )))(forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(fun_app$a (fun_app$b ?v0 (fun_app$ suc$ ?v3 ))(fun_app$ suc$ ?v4 ))))))(fun_app$a (fun_app$b ?v0 ?v1 )?v2 ))):named a26 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= (fun_app$ suc$ ?v0 )zero$ )false )):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 (fun_app$ suc$ ?v1 ))(not (= ?v0 zero$ )))):named a28 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= zero$ (fun_app$ suc$ ?v0 ))false )):named a29 ))
(assert (! (= zero$a (enat$ zero$ )):named a30 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$a (enat$ ?v0 ))(= ?v0 zero$ ))):named a31 ))
(check-sat )
;(get-unsat-core )
