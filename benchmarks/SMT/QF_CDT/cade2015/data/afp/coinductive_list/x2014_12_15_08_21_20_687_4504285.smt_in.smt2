;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_llist_enat_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))(A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$ (A_b_prod_llist$ )A_b_prod_llist_enat_fun$ )
(declare-fun lmap$ (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun llcp$a (A_llist$ )A_llist_enat_fun$ )
(declare-fun llcp$b (B_llist$ )B_llist_enat_fun$ )
(declare-fun lmap$a (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$b (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$c (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lmap$d (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$e (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$f (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$g (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$h (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun ltake$ (Enat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ltake$a (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$b (Enat$ B_llist$ )B_llist$ )
(declare-fun fun_app$ (A_b_prod_llist_enat_fun$ A_b_prod_llist$ )Enat$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_b_prod_llist$ )Enat$ )
(declare-fun lprefix$ (A_b_prod_llist$ A_b_prod_llist$ )Bool )
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$b (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun llength$a (A_llist$ )Enat$ )
(declare-fun llength$b (B_llist$ )Enat$ )
(declare-fun lprefix$a (A_llist$ A_llist$ )Bool )
(declare-fun lprefix$b (B_llist$ B_llist$ )Bool )
(assert (! (not (= (llength$ (lzip$ xs$ ys$ ))(min$ (llength$a xs$ )(llength$b ys$ )))):named a0 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ (min$ ?v0 ?v1 )?v1 )(min$ ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ ?v0 (min$ ?v0 ?v1 ))(min$ ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Enat$ ))(= (min$ ?v0 ?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (min$ (min$ ?v0 ?v1 )?v2 )(min$ ?v0 (min$ ?v1 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (min$ ?v0 (min$ ?v1 ?v2 ))(min$ ?v1 (min$ ?v0 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ ?v0 ?v1 )(min$ ?v1 ?v0 ))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ ))(= (llength$ (ltake$ ?v0 ?v1 ))(min$ ?v0 (llength$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (llength$a (ltake$a ?v0 ?v1 ))(min$ ?v0 (llength$a ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(= (llength$b (ltake$b ?v0 ?v1 ))(min$ ?v0 (llength$b ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (llcp$a ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$a ?v0 )))):named a11 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$b (llcp$b ?v0 )?v0 )(llength$b ?v0 )):pattern ((llcp$b ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_llist$ ))(= (ltake$b ?v0 (ltake$b ?v1 ?v2 ))(ltake$b (min$ ?v0 ?v1 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (ltake$a ?v0 (ltake$a ?v1 ?v2 ))(ltake$a (min$ ?v0 ?v1 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_b_prod_llist$ ))(= (ltake$ ?v0 (ltake$ ?v1 ?v2 ))(ltake$ (min$ ?v0 ?v1 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$a ?v0 ?v1 ))(llength$a ?v1 ))):named a17 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$b ?v0 ?v1 ))(llength$b ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$a (lmap$c ?v0 ?v1 ))(llength$ ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$d ?v0 ?v1 ))(llength$a ?v1 ))):named a20 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$e ?v0 ?v1 ))(llength$b ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$b (lmap$f ?v0 ?v1 ))(llength$ ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$b (lmap$g ?v0 ?v1 ))(llength$a ?v1 ))):named a23 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$b (lmap$h ?v0 ?v1 ))(llength$b ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(less_eq$ (fun_app$ (llcp$ ?v0 )?v1 )(min$ (llength$ ?v0 )(llength$ ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(less_eq$ (fun_app$a (llcp$a ?v0 )?v1 )(min$ (llength$a ?v0 )(llength$a ?v1 )))):named a26 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(less_eq$ (fun_app$b (llcp$b ?v0 )?v1 )(min$ (llength$b ?v0 )(llength$b ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(= (llength$ ?v0 )(llength$ ?v1 )))(= ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(= (llength$a ?v0 )(llength$a ?v1 )))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (lprefix$b ?v0 ?v1 )(= (llength$b ?v0 )(llength$b ?v1 )))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$b ?v0 ?v0 )):named a31 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a32 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(lprefix$ ?v0 ?v0 )):named a33 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$b ?v0 ?v0 )):named a34 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a35 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(lprefix$ ?v0 ?v0 )):named a36 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less_eq$ ?v0 (min$ ?v1 ?v2 ))(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v0 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(lprefix$b (ltake$b ?v0 ?v1 )?v1 )):named a38 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$a (ltake$a ?v0 ?v1 )?v1 )):named a39 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ ))(lprefix$ (ltake$ ?v0 ?v1 )?v1 )):named a40 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_b_fun$ )(?v2 A_b_prod_llist$ ))(= (ltake$b ?v0 (lmap$f ?v1 ?v2 ))(lmap$f ?v1 (ltake$ ?v0 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_llist$ ))(= (ltake$a ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ltake$ ?v0 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_b_prod_fun$ )(?v2 B_llist$ ))(= (ltake$ ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ltake$b ?v0 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_a_b_prod_fun$ )(?v2 A_b_prod_llist$ ))(= (ltake$ ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ltake$ ?v0 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ltake$b ?v0 (lmap$h ?v1 ?v2 ))(lmap$h ?v1 (ltake$b ?v0 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ltake$a ?v0 (lmap$e ?v1 ?v2 ))(lmap$e ?v1 (ltake$b ?v0 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_b_prod_fun$ )(?v2 A_llist$ ))(= (ltake$ ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ltake$a ?v0 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ltake$b ?v0 (lmap$g ?v1 ?v2 ))(lmap$g ?v1 (ltake$a ?v0 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ltake$a ?v0 (lmap$d ?v1 ?v2 ))(lmap$d ?v1 (ltake$a ?v0 ?v2 )))):named a49 ))
(check-sat )
;(get-unsat-core )
