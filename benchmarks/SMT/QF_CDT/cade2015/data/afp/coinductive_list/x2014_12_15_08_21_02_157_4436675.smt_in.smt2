;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun zero$a ()Enat$ )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun infinity$ ()Enat$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun gen_llength$ (Nat$ )A_llist_enat_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (= (fun_app$ (llcp$ xs$ )xs$ )(fun_app$ llength$ xs$ ))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$ (llcp$ ?v0 )?v1 )(fun_app$ (llcp$ ?v1 )?v0 ))):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (fun_app$ llength$ (lmap$ ?v0 ?v1 ))(fun_app$ llength$ ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(= (fun_app$ llength$ ?v0 )(fun_app$ llength$ ?v1 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (= llength$ (gen_llength$ zero$ )):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )lNil$ )zero$a ):pattern ((llcp$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (llcp$ lNil$ )?v0 )zero$a ):pattern ((fun_app$ (llcp$ lNil$ )?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(less$ (fun_app$ llength$ ?v0 )(fun_app$ llength$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$ llength$ (iterates$ ?v0 ?v1 ))infinity$ )):named a8 ))
(assert (! (= (fun_app$ llength$ lNil$ )zero$a ):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (fun_app$ llength$ ?v0 )zero$a )(lnull$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (lnull$ ?v0 )(= (fun_app$ llength$ ?v0 )zero$a )):pattern ((fun_app$ llength$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$ llength$ (lappend$ ?v0 ?v1 ))(plus$ (fun_app$ llength$ ?v0 )(fun_app$ llength$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$ llength$ (lCons$ ?v0 ?v1 ))(eSuc$ (fun_app$ llength$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lprefix$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(lprefix$ ?v1 ?v3 ))):pattern ((lprefix$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
