;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_nat_bool_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_nat_prod_a_nat_prod_fun$ 0 )
(declare-sort Nat_a_prod_nat_a_prod_fun$ 0 )
(declare-sort Nat_bool_fun_nat_bool_fun_fun$ 0 )
(declare-sort Nat_nat_prod_nat_nat_prod_fun$ 0 )
(declare-sort A_a_a_prod_prod_a_a_a_prod_prod_fun$ 0 )
(declare-sort A_a_nat_prod_prod_a_a_nat_prod_prod_fun$ 0 )
(declare-sort Nat_a_a_prod_prod_nat_a_a_prod_prod_fun$ 0 )
(declare-sort A_nat_bool_fun_fun_a_nat_bool_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))(A_nat_prod$ (pair$ (fst$ A$ )(snd$ Nat$ )))))
(declare-sort A_nat_prod_llist$ 0)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$a ()A_nat_prod_llist$)
(declare-fun lhd$a (A_nat_prod_llist$)A_nat_prod$)
(declare-fun ltl$a (A_nat_prod_llist$)A_nat_prod_llist$)
(declare-fun lCons$a (A_nat_prod$ A_nat_prod_llist$ )A_nat_prod_llist$)
(declare-fun lNil$b ()Nat_llist$)
(declare-fun lhd$b (Nat_llist$)Nat$)
(declare-fun ltl$b (Nat_llist$)Nat_llist$)
(declare-fun lCons$b (Nat$ Nat_llist$ )Nat_llist$)
(declare-datatypes ()((A_a_prod$ (pair$a (fst$a A$ )(snd$a A$ )))))
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$c ()A_a_prod_llist$)
(declare-fun lhd$c (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$c (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$c (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((Nat_a_prod$ (pair$b (fst$b Nat$ )(snd$b A$ )))))
(declare-sort Nat_a_prod_llist$ 0)
(declare-fun lNil$d ()Nat_a_prod_llist$)
(declare-fun lhd$d (Nat_a_prod_llist$)Nat_a_prod$)
(declare-fun ltl$d (Nat_a_prod_llist$)Nat_a_prod_llist$)
(declare-fun lCons$d (Nat_a_prod$ Nat_a_prod_llist$ )Nat_a_prod_llist$)
(declare-datatypes ()((Nat_nat_prod$ (pair$c (fst$c Nat$ )(snd$c Nat$ )))))
(declare-sort Nat_nat_prod_llist$ 0)
(declare-fun lNil$e ()Nat_nat_prod_llist$)
(declare-fun lhd$e (Nat_nat_prod_llist$)Nat_nat_prod$)
(declare-fun ltl$e (Nat_nat_prod_llist$)Nat_nat_prod_llist$)
(declare-fun lCons$e (Nat_nat_prod$ Nat_nat_prod_llist$ )Nat_nat_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod$ (pair$d (fst$d A$ )(snd$d A_a_prod$ )))))
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-fun lNil$f ()A_a_a_prod_prod_llist$)
(declare-fun lhd$f (A_a_a_prod_prod_llist$)A_a_a_prod_prod$)
(declare-fun ltl$f (A_a_a_prod_prod_llist$)A_a_a_prod_prod_llist$)
(declare-fun lCons$f (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$)
(declare-datatypes ()((A_a_nat_prod_prod$ (pair$e (fst$e A$ )(snd$e A_nat_prod$ )))))
(declare-sort A_a_nat_prod_prod_llist$ 0)
(declare-fun lNil$g ()A_a_nat_prod_prod_llist$)
(declare-fun lhd$g (A_a_nat_prod_prod_llist$)A_a_nat_prod_prod$)
(declare-fun ltl$g (A_a_nat_prod_prod_llist$)A_a_nat_prod_prod_llist$)
(declare-fun lCons$g (A_a_nat_prod_prod$ A_a_nat_prod_prod_llist$ )A_a_nat_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_prod$ (pair$f (fst$f A_a_prod$ )(snd$f A$ )))))
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$h ()A_a_prod_a_prod_llist$)
(declare-fun lhd$h (A_a_prod_a_prod_llist$)A_a_prod_a_prod$)
(declare-fun ltl$h (A_a_prod_a_prod_llist$)A_a_prod_a_prod_llist$)
(declare-fun lCons$h (A_a_prod_a_prod$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$)
(declare-datatypes ()((A_a_prod_nat_prod$ (pair$g (fst$g A_a_prod$ )(snd$g Nat$ )))))
(declare-sort A_a_prod_nat_prod_llist$ 0)
(declare-fun lNil$i ()A_a_prod_nat_prod_llist$)
(declare-fun lhd$i (A_a_prod_nat_prod_llist$)A_a_prod_nat_prod$)
(declare-fun ltl$i (A_a_prod_nat_prod_llist$)A_a_prod_nat_prod_llist$)
(declare-fun lCons$i (A_a_prod_nat_prod$ A_a_prod_nat_prod_llist$ )A_a_prod_nat_prod_llist$)
(declare-datatypes ()((A_nat_prod_a_prod$ (pair$h (fst$h A_nat_prod$ )(snd$h A$ )))))
(declare-sort A_nat_prod_a_prod_llist$ 0)
(declare-fun lNil$j ()A_nat_prod_a_prod_llist$)
(declare-fun lhd$j (A_nat_prod_a_prod_llist$)A_nat_prod_a_prod$)
(declare-fun ltl$j (A_nat_prod_a_prod_llist$)A_nat_prod_a_prod_llist$)
(declare-fun lCons$j (A_nat_prod_a_prod$ A_nat_prod_a_prod_llist$ )A_nat_prod_a_prod_llist$)
(declare-datatypes ()((A_nat_prod_nat_prod$ (pair$i (fst$i A_nat_prod$ )(snd$i Nat$ )))))
(declare-sort A_nat_prod_nat_prod_llist$ 0)
(declare-fun lNil$k ()A_nat_prod_nat_prod_llist$)
(declare-fun lhd$k (A_nat_prod_nat_prod_llist$)A_nat_prod_nat_prod$)
(declare-fun ltl$k (A_nat_prod_nat_prod_llist$)A_nat_prod_nat_prod_llist$)
(declare-fun lCons$k (A_nat_prod_nat_prod$ A_nat_prod_nat_prod_llist$ )A_nat_prod_nat_prod_llist$)
(declare-datatypes ()((Nat_a_a_prod_prod$ (pair$j (fst$j Nat$ )(snd$j A_a_prod$ )))))
(declare-sort Nat_a_a_prod_prod_llist$ 0)
(declare-fun lNil$l ()Nat_a_a_prod_prod_llist$)
(declare-fun lhd$l (Nat_a_a_prod_prod_llist$)Nat_a_a_prod_prod$)
(declare-fun ltl$l (Nat_a_a_prod_prod_llist$)Nat_a_a_prod_prod_llist$)
(declare-fun lCons$l (Nat_a_a_prod_prod$ Nat_a_a_prod_prod_llist$ )Nat_a_a_prod_prod_llist$)
(declare-datatypes ()((A_nat_prod_a_nat_prod_prod$ (pair$k (fst$k A_nat_prod$ )(snd$k A_nat_prod$ )))))
(declare-sort A_nat_prod_a_nat_prod_prod_llist$ 0)
(declare-fun lNil$m ()A_nat_prod_a_nat_prod_prod_llist$)
(declare-fun lhd$m (A_nat_prod_a_nat_prod_prod_llist$)A_nat_prod_a_nat_prod_prod$)
(declare-fun ltl$m (A_nat_prod_a_nat_prod_prod_llist$)A_nat_prod_a_nat_prod_prod_llist$)
(declare-fun lCons$m (A_nat_prod_a_nat_prod_prod$ A_nat_prod_a_nat_prod_prod_llist$ )A_nat_prod_a_nat_prod_prod_llist$)
(declare-fun a$ ()Nat_set$ )
(declare-fun uu$ ()A_nat_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun uua$ ()Nat_bool_fun$ )
(declare-fun uub$ (Nat_a_a_prod_prod_llist$ )Nat_bool_fun$ )
(declare-fun uuc$ (Nat_nat_prod_llist$ )Nat_bool_fun$ )
(declare-fun uud$ (Nat_a_prod_llist$ )Nat_bool_fun$ )
(declare-fun uue$ (A_a_a_prod_prod_llist$ )Nat_bool_fun$ )
(declare-fun uuf$ (A_a_nat_prod_prod_llist$ )Nat_bool_fun$ )
(declare-fun uug$ (A_nat_prod_a_prod_llist$ )Nat_bool_fun$ )
(declare-fun uuh$ (A_a_prod_llist$ )Nat_bool_fun$ )
(declare-fun uui$ (Nat_llist$ )Nat_bool_fun$ )
(declare-fun uuj$ (A_nat_prod_llist$ )Nat_bool_fun$ )
(declare-fun uuk$ (A_llist$ )Nat_bool_fun$ )
(declare-fun uul$ (Bool )A_nat_bool_fun_fun_a_nat_bool_fun_fun_fun$ )
(declare-fun uum$ (Nat_bool_fun$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun uun$ (Nat_bool_fun$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_nat_prod_llist$ Nat$ )A_nat_prod$ )
(declare-fun lzip$ (A_llist$ Nat_llist$ )A_nat_prod_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun lnth$b (Nat_llist$ )Nat_nat_fun$ )
(declare-fun lnth$c (A_a_prod_llist$ Nat$ )A_a_prod$ )
(declare-fun lnth$d (A_nat_prod_a_prod_llist$ Nat$ )A_nat_prod_a_prod$ )
(declare-fun lnth$e (A_a_nat_prod_prod_llist$ Nat$ )A_a_nat_prod_prod$ )
(declare-fun lnth$f (A_nat_prod_a_nat_prod_prod_llist$ Nat$ )A_nat_prod_a_nat_prod_prod$ )
(declare-fun lnth$g (Nat_a_prod_llist$ Nat$ )Nat_a_prod$ )
(declare-fun lnth$h (Nat_nat_prod_llist$ Nat$ )Nat_nat_prod$ )
(declare-fun lnth$i (A_a_prod_a_prod_llist$ Nat$ )A_a_prod_a_prod$ )
(declare-fun lnth$j (A_a_prod_nat_prod_llist$ Nat$ )A_a_prod_nat_prod$ )
(declare-fun lnth$k (A_a_a_prod_prod_llist$ Nat$ )A_a_a_prod_prod$ )
(declare-fun lzip$a (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$b (Nat_llist$ A_llist$ )Nat_a_prod_llist$ )
(declare-fun lzip$c (Nat_llist$ Nat_llist$ )Nat_nat_prod_llist$ )
(declare-fun lzip$d (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$e (A_llist$ A_nat_prod_llist$ )A_a_nat_prod_prod_llist$ )
(declare-fun lzip$f (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$g (A_a_prod_llist$ Nat_llist$ )A_a_prod_nat_prod_llist$ )
(declare-fun lzip$h (A_nat_prod_llist$ A_llist$ )A_nat_prod_a_prod_llist$ )
(declare-fun lzip$i (A_nat_prod_llist$ Nat_llist$ )A_nat_prod_nat_prod_llist$ )
(declare-fun lzip$j (A_nat_prod_llist$ A_nat_prod_llist$ )A_nat_prod_a_nat_prod_prod_llist$ )
(declare-fun finite$ (Nat_set$ )Bool )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_nat_bool_fun_fun$ A$ )Nat_bool_fun$ )
(declare-fun fun_app$b (Nat_bool_fun_nat_bool_fun_fun$ Nat_bool_fun$ )Nat_bool_fun$ )
(declare-fun fun_app$c (A_nat_bool_fun_fun_a_nat_bool_fun_fun_fun$ A_nat_bool_fun_fun$ )A_nat_bool_fun_fun$ )
(declare-fun fun_app$d (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun iterates$ (Nat_nat_fun$ Nat$ )Nat_llist$ )
(declare-fun lfinite$a (A_nat_prod_llist$ )Bool )
(declare-fun lfinite$b (Nat_llist$ )Bool )
(declare-fun lfinite$c (A_a_prod_llist$ )Bool )
(declare-fun lfinite$d (Nat_a_prod_llist$ )Bool )
(declare-fun lfinite$e (Nat_nat_prod_llist$ )Bool )
(declare-fun lfinite$f (A_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$g (A_a_nat_prod_prod_llist$ )Bool )
(declare-fun lfinite$h (A_a_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$i (A_a_prod_nat_prod_llist$ )Bool )
(declare-fun lfinite$j (A_nat_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$k (A_nat_prod_nat_prod_llist$ )Bool )
(declare-fun lfinite$l (Nat_a_a_prod_prod_llist$ )Bool )
(declare-fun llength$a (A_nat_prod_a_prod_llist$ )Enat$ )
(declare-fun llength$b (Nat_a_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$c (Nat_nat_prod_llist$ )Enat$ )
(declare-fun llength$d (Nat_a_prod_llist$ )Enat$ )
(declare-fun llength$e (A_a_nat_prod_prod_llist$ )Enat$ )
(declare-fun llength$f (A_a_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$g (A_nat_prod_llist$ )Enat$ )
(declare-fun llength$h (A_a_prod_llist$ )Enat$ )
(declare-fun llength$i (Nat_llist$ )Enat$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun case_prod$ (A_nat_bool_fun_fun$ A_nat_prod$ )Bool )
(declare-fun iterates$a (Nat_a_a_prod_prod_nat_a_a_prod_prod_fun$ Nat_a_a_prod_prod$ )Nat_a_a_prod_prod_llist$ )
(declare-fun iterates$b (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$ )Nat_nat_prod_llist$ )
(declare-fun iterates$c (Nat_a_prod_nat_a_prod_fun$ Nat_a_prod$ )Nat_a_prod_llist$ )
(declare-fun iterates$d (A_a_nat_prod_prod_a_a_nat_prod_prod_fun$ A_a_nat_prod_prod$ )A_a_nat_prod_prod_llist$ )
(declare-fun iterates$e (A_a_a_prod_prod_a_a_a_prod_prod_fun$ A_a_a_prod_prod$ )A_a_a_prod_prod_llist$ )
(declare-fun iterates$f (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod_llist$ )
(declare-fun iterates$g (A_nat_prod_a_nat_prod_fun$ A_nat_prod$ )A_nat_prod_llist$ )
(declare-fun iterates$h (A_a_fun$ A$ )A_llist$ )
(declare-fun lsublist$a (A_a_prod_llist$ Nat_set$ )A_a_prod_llist$ )
(declare-fun lsublist$b (A_a_nat_prod_prod_llist$ Nat_set$ )A_a_nat_prod_prod_llist$ )
(declare-fun lsublist$c (A_nat_prod_a_prod_llist$ Nat_set$ )A_nat_prod_a_prod_llist$ )
(declare-fun lsublist$d (Nat_llist$ Nat_set$ )Nat_llist$ )
(declare-fun lsublist$e (A_nat_prod_llist$ Nat_set$ )A_nat_prod_llist$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(and (less$ (enat$ ?v0 )(llength$ xs$ ))(case_prod$ uu$ (lnth$ (lzip$ xs$ (iterates$ suc$ zero$ ))?v0 )))):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_nat_prod_a_prod_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uug$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$a ?v0 ))):pattern ((fun_app$ (uug$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$b ?v0 ))):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$c ?v0 ))):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uud$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$d ?v0 ))):pattern ((fun_app$ (uud$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uuf$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$e ?v0 ))):pattern ((fun_app$ (uuf$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uue$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$f ?v0 ))):pattern ((fun_app$ (uue$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uuj$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$g ?v0 ))):pattern ((fun_app$ (uuj$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uuh$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$h ?v0 ))):pattern ((fun_app$ (uuh$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uui$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$i ?v0 ))):pattern ((fun_app$ (uui$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uuk$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$ ?v0 ))):pattern ((fun_app$ (uuk$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(member$ ?v1 a$ )):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uum$ ?v0 )?v1 )?v2 )(or (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uum$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uun$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uun$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_bool_fun_fun$ )(?v2 A$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$a (fun_app$c (uul$ ?v0 )?v1 )?v2 )?v3 )(and ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (fun_app$c (uul$ ?v0 )?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (not (or (lfinite$ xs$ )(finite$ (collect$ uua$ )))):named a15 ))
(assert (! (lfinite$ (lsublist$ xs$ a$ )):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_llist$ ))(= (lfinite$a (lzip$ ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$b ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$c (lzip$a ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 A_llist$ ))(= (lfinite$d (lzip$b ?v0 ?v1 ))(or (lfinite$b ?v0 )(lfinite$ ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (lfinite$e (lzip$c ?v0 ?v1 ))(or (lfinite$b ?v0 )(lfinite$b ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$f (lzip$d ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$c ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_nat_prod_llist$ ))(= (lfinite$g (lzip$e ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$a ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$h (lzip$f ?v0 ?v1 ))(or (lfinite$c ?v0 )(lfinite$ ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Nat_llist$ ))(= (lfinite$i (lzip$g ?v0 ?v1 ))(or (lfinite$c ?v0 )(lfinite$b ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$j (lzip$h ?v0 ?v1 ))(or (lfinite$a ?v0 )(lfinite$ ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 Nat_llist$ ))(= (lfinite$k (lzip$i ?v0 ?v1 ))(or (lfinite$a ?v0 )(lfinite$b ?v1 )))):named a26 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ ))(= (lfinite$l ?v0 )(exists ((?v1 Nat$ ))(= (llength$b ?v0 )(enat$ ?v1 ))))):named a27 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ ))(= (lfinite$e ?v0 )(exists ((?v1 Nat$ ))(= (llength$c ?v0 )(enat$ ?v1 ))))):named a28 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ ))(= (lfinite$d ?v0 )(exists ((?v1 Nat$ ))(= (llength$d ?v0 )(enat$ ?v1 ))))):named a29 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(= (lfinite$f ?v0 )(exists ((?v1 Nat$ ))(= (llength$f ?v0 )(enat$ ?v1 ))))):named a30 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ ))(= (lfinite$g ?v0 )(exists ((?v1 Nat$ ))(= (llength$e ?v0 )(enat$ ?v1 ))))):named a31 ))
(assert (! (forall ((?v0 A_nat_prod_a_prod_llist$ ))(= (lfinite$j ?v0 )(exists ((?v1 Nat$ ))(= (llength$a ?v0 )(enat$ ?v1 ))))):named a32 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(= (lfinite$c ?v0 )(exists ((?v1 Nat$ ))(= (llength$h ?v0 )(enat$ ?v1 ))))):named a33 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (lfinite$b ?v0 )(exists ((?v1 Nat$ ))(= (llength$i ?v0 )(enat$ ?v1 ))))):named a34 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ ))(= (lfinite$a ?v0 )(exists ((?v1 Nat$ ))(= (llength$g ?v0 )(enat$ ?v1 ))))):named a35 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a36 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$b ?v0 )(enat$ ?v1 ))(lfinite$l ?v0 ))):named a37 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$c ?v0 )(enat$ ?v1 ))(lfinite$e ?v0 ))):named a38 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$d ?v0 )(enat$ ?v1 ))(lfinite$d ?v0 ))):named a39 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$f ?v0 )(enat$ ?v1 ))(lfinite$f ?v0 ))):named a40 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$e ?v0 )(enat$ ?v1 ))(lfinite$g ?v0 ))):named a41 ))
(assert (! (forall ((?v0 A_nat_prod_a_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$a ?v0 )(enat$ ?v1 ))(lfinite$j ?v0 ))):named a42 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$h ?v0 )(enat$ ?v1 ))(lfinite$c ?v0 ))):named a43 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat$ ))(=> (= (llength$i ?v0 )(enat$ ?v1 ))(lfinite$b ?v0 ))):named a44 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$g ?v0 )(enat$ ?v1 ))(lfinite$a ?v0 ))):named a45 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (= (llength$ ?v0 )(enat$ ?v1 ))(lfinite$ ?v0 ))):named a46 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ ))(=> (lfinite$l ?v0 )(exists ((?v1 Nat$ ))(= (llength$b ?v0 )(enat$ ?v1 ))))):named a47 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ ))(=> (lfinite$e ?v0 )(exists ((?v1 Nat$ ))(= (llength$c ?v0 )(enat$ ?v1 ))))):named a48 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ ))(=> (lfinite$d ?v0 )(exists ((?v1 Nat$ ))(= (llength$d ?v0 )(enat$ ?v1 ))))):named a49 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(=> (lfinite$f ?v0 )(exists ((?v1 Nat$ ))(= (llength$f ?v0 )(enat$ ?v1 ))))):named a50 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ ))(=> (lfinite$g ?v0 )(exists ((?v1 Nat$ ))(= (llength$e ?v0 )(enat$ ?v1 ))))):named a51 ))
(assert (! (forall ((?v0 A_nat_prod_a_prod_llist$ ))(=> (lfinite$j ?v0 )(exists ((?v1 Nat$ ))(= (llength$a ?v0 )(enat$ ?v1 ))))):named a52 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(=> (lfinite$c ?v0 )(exists ((?v1 Nat$ ))(= (llength$h ?v0 )(enat$ ?v1 ))))):named a53 ))
(assert (! (forall ((?v0 Nat_llist$ ))(=> (lfinite$b ?v0 )(exists ((?v1 Nat$ ))(= (llength$i ?v0 )(enat$ ?v1 ))))):named a54 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ ))(=> (lfinite$a ?v0 )(exists ((?v1 Nat$ ))(= (llength$g ?v0 )(enat$ ?v1 ))))):named a55 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a56 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ ))(=> (lfinite$l ?v0 )(finite$ (collect$ (uub$ ?v0 ))))):named a57 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ ))(=> (lfinite$e ?v0 )(finite$ (collect$ (uuc$ ?v0 ))))):named a58 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ ))(=> (lfinite$d ?v0 )(finite$ (collect$ (uud$ ?v0 ))))):named a59 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(=> (lfinite$f ?v0 )(finite$ (collect$ (uue$ ?v0 ))))):named a60 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ ))(=> (lfinite$g ?v0 )(finite$ (collect$ (uuf$ ?v0 ))))):named a61 ))
(assert (! (forall ((?v0 A_nat_prod_a_prod_llist$ ))(=> (lfinite$j ?v0 )(finite$ (collect$ (uug$ ?v0 ))))):named a62 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(=> (lfinite$c ?v0 )(finite$ (collect$ (uuh$ ?v0 ))))):named a63 ))
(assert (! (forall ((?v0 Nat_llist$ ))(=> (lfinite$b ?v0 )(finite$ (collect$ (uui$ ?v0 ))))):named a64 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ ))(=> (lfinite$a ?v0 )(finite$ (collect$ (uuj$ ?v0 ))))):named a65 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(finite$ (collect$ (uuk$ ?v0 ))))):named a66 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_nat_a_a_prod_prod_fun$ )(?v1 Nat_a_a_prod_prod$ ))(not (lfinite$l (iterates$a ?v0 ?v1 )))):named a67 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$ )(?v1 Nat_nat_prod$ ))(not (lfinite$e (iterates$b ?v0 ?v1 )))):named a68 ))
(assert (! (forall ((?v0 Nat_a_prod_nat_a_prod_fun$ )(?v1 Nat_a_prod$ ))(not (lfinite$d (iterates$c ?v0 ?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_a_a_nat_prod_prod_fun$ )(?v1 A_a_nat_prod_prod$ ))(not (lfinite$g (iterates$d ?v0 ?v1 )))):named a70 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_a_a_a_prod_prod_fun$ )(?v1 A_a_a_prod_prod$ ))(not (lfinite$f (iterates$e ?v0 ?v1 )))):named a71 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod$ ))(not (lfinite$c (iterates$f ?v0 ?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_fun$ )(?v1 A_nat_prod$ ))(not (lfinite$a (iterates$g ?v0 ?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(not (lfinite$ (iterates$h ?v0 ?v1 )))):named a74 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(not (lfinite$b (iterates$ ?v0 ?v1 )))):named a75 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ )(?v2 Nat_set$ )(?v3 Nat_set$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (less$ (enat$ ?v4 )(llength$h ?v1 ))(= (member$ ?v4 ?v2 )(member$ ?v4 ?v3 )))))(= (lsublist$a ?v0 ?v2 )(lsublist$a ?v1 ?v3 )))):named a76 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ )(?v1 A_a_nat_prod_prod_llist$ )(?v2 Nat_set$ )(?v3 Nat_set$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (less$ (enat$ ?v4 )(llength$e ?v1 ))(= (member$ ?v4 ?v2 )(member$ ?v4 ?v3 )))))(= (lsublist$b ?v0 ?v2 )(lsublist$b ?v1 ?v3 )))):named a77 ))
(assert (! (forall ((?v0 A_nat_prod_a_prod_llist$ )(?v1 A_nat_prod_a_prod_llist$ )(?v2 Nat_set$ )(?v3 Nat_set$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (less$ (enat$ ?v4 )(llength$a ?v1 ))(= (member$ ?v4 ?v2 )(member$ ?v4 ?v3 )))))(= (lsublist$c ?v0 ?v2 )(lsublist$c ?v1 ?v3 )))):named a78 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ )(?v2 Nat_set$ )(?v3 Nat_set$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (less$ (enat$ ?v4 )(llength$i ?v1 ))(= (member$ ?v4 ?v2 )(member$ ?v4 ?v3 )))))(= (lsublist$d ?v0 ?v2 )(lsublist$d ?v1 ?v3 )))):named a79 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 A_nat_prod_llist$ )(?v2 Nat_set$ )(?v3 Nat_set$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (less$ (enat$ ?v4 )(llength$g ?v1 ))(= (member$ ?v4 ?v2 )(member$ ?v4 ?v3 )))))(= (lsublist$e ?v0 ?v2 )(lsublist$e ?v1 ?v3 )))):named a80 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat_set$ )(?v3 Nat_set$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (less$ (enat$ ?v4 )(llength$ ?v1 ))(= (member$ ?v4 ?v2 )(member$ ?v4 ?v3 )))))(= (lsublist$ ?v0 ?v2 )(lsublist$ ?v1 ?v3 )))):named a81 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_bool_fun_fun$ )(?v2 A_nat_prod$ ))(= (case_prod$ (fun_app$c (uul$ ?v0 )?v1 )?v2 )(and ?v0 (case_prod$ ?v1 ?v2 )))):named a82 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(= (finite$ (collect$ (fun_app$b (uum$ ?v0 )?v1 )))(and (finite$ (collect$ ?v0 ))(finite$ (collect$ ?v1 ))))):named a83 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(=> (or (finite$ (collect$ ?v0 ))(finite$ (collect$ ?v1 )))(finite$ (collect$ (fun_app$b (uun$ ?v0 )?v1 ))))):named a84 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a85 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$d suc$ ?v0 )(fun_app$d suc$ ?v1 ))(= ?v0 ?v1 ))):named a86 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$d suc$ ?v0 )(fun_app$d suc$ ?v1 ))(= ?v0 ?v1 ))):named a87 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 Nat_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$i ?v2 )))(= (lnth$ (lzip$ ?v1 ?v2 )?v0 )(pair$ (lnth$a ?v1 ?v0 )(fun_app$d (lnth$b ?v2 )?v0 ))))):named a88 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$c (lzip$a ?v1 ?v2 )?v0 )(pair$a (lnth$a ?v1 ?v0 )(lnth$a ?v2 ?v0 ))))):named a89 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_prod_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$g ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$d (lzip$h ?v1 ?v2 )?v0 )(pair$h (lnth$ ?v1 ?v0 )(lnth$a ?v2 ?v0 ))))):named a90 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_nat_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$g ?v2 )))(= (lnth$e (lzip$e ?v1 ?v2 )?v0 )(pair$e (lnth$a ?v1 ?v0 )(lnth$ ?v2 ?v0 ))))):named a91 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_prod_llist$ )(?v2 A_nat_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$g ?v1 ))(less$ (enat$ ?v0 )(llength$g ?v2 )))(= (lnth$f (lzip$j ?v1 ?v2 )?v0 )(pair$k (lnth$ ?v1 ?v0 )(lnth$ ?v2 ?v0 ))))):named a92 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$i ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$g (lzip$b ?v1 ?v2 )?v0 )(pair$b (fun_app$d (lnth$b ?v1 )?v0 )(lnth$a ?v2 ?v0 ))))):named a93 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$i ?v1 ))(less$ (enat$ ?v0 )(llength$i ?v2 )))(= (lnth$h (lzip$c ?v1 ?v2 )?v0 )(pair$c (fun_app$d (lnth$b ?v1 )?v0 )(fun_app$d (lnth$b ?v2 )?v0 ))))):named a94 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$h ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$i (lzip$f ?v1 ?v2 )?v0 )(pair$f (lnth$c ?v1 ?v0 )(lnth$a ?v2 ?v0 ))))):named a95 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 Nat_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$h ?v1 ))(less$ (enat$ ?v0 )(llength$i ?v2 )))(= (lnth$j (lzip$g ?v1 ?v2 )?v0 )(pair$g (lnth$c ?v1 ?v0 )(fun_app$d (lnth$b ?v2 )?v0 ))))):named a96 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$h ?v2 )))(= (lnth$k (lzip$d ?v1 ?v2 )?v0 )(pair$d (lnth$a ?v1 ?v0 )(lnth$c ?v2 ?v0 ))))):named a97 ))
(check-sat )
;(get-unsat-core )
