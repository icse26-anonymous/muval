;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun f$ ()Nat_a_fun$ )
(declare-fun uu$ ()Nat_a_fun$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ldropn$ (Nat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun lsorted$ (A_a_bool_fun_fun$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun inf_llist$ (Nat_a_fun$ )A_llist$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$ f$ (suc$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (ltl$ (inf_llist$ f$ ))(inf_llist$ uu$ ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(! (= (fun_app$a (ldropn$ (suc$ ?v0 ))?v1 )(fun_app$a (ldropn$ ?v0 )(ltl$ ?v1 ))):pattern ((fun_app$a (ldropn$ (suc$ ?v0 ))?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (= (inf_llist$ ?v0 )lNil$ ))):named a7 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (lnull$ (inf_llist$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (ltl$ (iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$b ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(=> (lsorted$ ?v0 ?v1 )(lsorted$ ?v0 (ltl$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a11 ))
(check-sat )
;(get-unsat-core )
