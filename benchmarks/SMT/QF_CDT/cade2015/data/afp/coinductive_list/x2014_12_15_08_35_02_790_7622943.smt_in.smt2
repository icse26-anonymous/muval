;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort Nat_set_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))(A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun a$ ()Nat_set$ )
(declare-fun b$ ()Nat_set$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun bot$ ()Nat_set$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun member$ (Nat$ )Nat_set_bool_fun$ )
(declare-fun fun_app$ (Nat_set_bool_fun$ Nat_set$ )Bool )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun sublist$ (A_list$ Nat_set$ )A_list$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun less_eq$a (Enat$ Enat$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (= (lsublist$ xs$ a$ )(lsublist$ ys$ b$ ))):named a0 ))
(assert (! (= xs$ ys$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(! (=> (less$ (enat$ ?v0 )(llength$ ys$ ))(= (fun_app$ (member$ ?v0 )a$ )(fun_app$ (member$ ?v0 )b$ ))):pattern ((member$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$ lNil$ ?v0 )lNil$ ):pattern ((lsublist$ lNil$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 Nat_set$ ))(= (lsublist$ (lmap$ ?v0 ?v1 )?v2 )(lmap$ ?v0 (lsublist$ ?v1 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_set$ ))(= (lsublist$ (llist_of$ ?v0 )?v1 )(llist_of$ (sublist$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lsublist$ ?v0 bot$ )lNil$ )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_set$ ))(less_eq$ (lset$ (lsublist$ ?v0 ?v1 ))(lset$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_set$ ))(less_eq$a (llength$ (lsublist$ ?v0 ?v1 ))(llength$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$a (lstrict_prefix$ ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat_set$ ))(! (= (lsublist$ (lCons$ ?v0 lNil$ )?v1 )(ite (fun_app$ (member$ zero$ )?v1 )(lCons$ ?v0 lNil$ )lNil$ )):pattern ((lsublist$ (lCons$ ?v0 lNil$ )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$a (lstrict_prefix$ ?v1 )?v3 ))):pattern ((fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a14 ))
(assert (! (= (fun_app$a (lstrict_prefix$ lNil$ )lNil$ )false ):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (lstrict_prefix$ lNil$ )(lCons$ ?v0 ?v1 ))true ):pattern ((lCons$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1 ))lNil$ )false ):pattern ((lCons$ ?v0 ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
