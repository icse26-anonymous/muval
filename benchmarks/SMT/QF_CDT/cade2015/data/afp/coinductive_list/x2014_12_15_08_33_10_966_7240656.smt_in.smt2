;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Enat_nat_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort Nat_nat_nat_fun_fun$ 0 )
(declare-sort Enat_nat_nat_fun_fun$ 0 )
(declare-sort Nat_enat_nat_fun_fun$ 0 )
(declare-sort Nat_nat_enat_fun_fun$ 0 )
(declare-sort Enat_enat_nat_fun_fun$ 0 )
(declare-sort Enat_nat_enat_fun_fun$ 0 )
(declare-sort Nat_enat_enat_fun_fun$ 0 )
(declare-sort Enat_enat_enat_fun_fun$ 0 )
(declare-sort Nat_set_nat_nat_fun_fun$ 0 )
(declare-sort Enat_set_nat_nat_fun_fun$ 0 )
(declare-sort Nat_set_enat_nat_fun_fun$ 0 )
(declare-sort Nat_set_nat_enat_fun_fun$ 0 )
(declare-sort Enat_set_enat_nat_fun_fun$ 0 )
(declare-sort Enat_set_nat_enat_fun_fun$ 0 )
(declare-sort Nat_set_enat_enat_fun_fun$ 0 )
(declare-sort Enat_set_enat_enat_fun_fun$ 0 )
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0 )
(declare-sort Enat_nat_fun_enat_nat_fun_fun$ 0 )
(declare-sort Nat_enat_fun_nat_enat_fun_fun$ 0 )
(declare-sort Enat_enat_fun_enat_enat_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-datatypes ()((A_llist_list$ (nil$ )(cons$ (hd$ A_llist$ )(tl$ A_llist_list$ )))))
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun uu$ ()Nat_enat_fun$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ (Nat_nat_fun$ )Nat_nat_nat_fun_fun$ )
(declare-fun uub$ (Nat_enat_fun$ )Nat_nat_enat_fun_fun$ )
(declare-fun uuc$ (Enat_nat_fun$ )Enat_nat_fun_enat_nat_fun_fun$ )
(declare-fun uud$ (Enat_enat_fun$ )Enat_enat_fun_enat_enat_fun_fun$ )
(declare-fun uue$ (Nat_nat_fun$ )Nat_nat_fun_nat_nat_fun_fun$ )
(declare-fun uuf$ (Nat_enat_fun$ )Nat_enat_fun_nat_enat_fun_fun$ )
(declare-fun uug$ (Nat_enat_enat_fun_fun$ )Enat_set_nat_enat_fun_fun$ )
(declare-fun uuh$ (Nat_enat_enat_fun_fun$ )Enat_nat_enat_fun_fun$ )
(declare-fun uui$ (Nat_enat_enat_fun_fun$ )Nat_set_enat_enat_fun_fun$ )
(declare-fun uuj$ (Nat_enat_nat_fun_fun$ )Enat_set_nat_nat_fun_fun$ )
(declare-fun uuk$ (Nat_enat_nat_fun_fun$ )Enat_nat_nat_fun_fun$ )
(declare-fun uul$ (Nat_enat_nat_fun_fun$ )Nat_set_enat_nat_fun_fun$ )
(declare-fun uum$ (Enat_nat_nat_fun_fun$ )Nat_set_enat_nat_fun_fun$ )
(declare-fun uun$ (Enat_nat_nat_fun_fun$ )Nat_enat_nat_fun_fun$ )
(declare-fun uuo$ (Enat_nat_nat_fun_fun$ )Enat_set_nat_nat_fun_fun$ )
(declare-fun uup$ (Enat_enat_nat_fun_fun$ )Enat_set_enat_nat_fun_fun$ )
(declare-fun uuq$ (Enat_enat_nat_fun_fun$ )Enat_enat_nat_fun_fun$ )
(declare-fun uur$ (Enat_enat_nat_fun_fun$ )Enat_set_enat_nat_fun_fun$ )
(declare-fun uus$ (Enat_nat_enat_fun_fun$ )Nat_set_enat_enat_fun_fun$ )
(declare-fun uut$ (Enat_nat_enat_fun_fun$ )Nat_enat_enat_fun_fun$ )
(declare-fun uuu$ (Enat_nat_enat_fun_fun$ )Enat_set_nat_enat_fun_fun$ )
(declare-fun uuv$ (Enat_enat_enat_fun_fun$ )Enat_set_enat_enat_fun_fun$ )
(declare-fun uuw$ (Enat_enat_enat_fun_fun$ )Enat_enat_enat_fun_fun$ )
(declare-fun uux$ (Enat_enat_enat_fun_fun$ )Enat_set_enat_enat_fun_fun$ )
(declare-fun uuy$ (Nat_nat_nat_fun_fun$ )Nat_set_nat_nat_fun_fun$ )
(declare-fun uuz$ (Nat_nat_nat_fun_fun$ )Nat_nat_nat_fun_fun$ )
(declare-fun uva$ (Nat_nat_nat_fun_fun$ )Nat_set_nat_nat_fun_fun$ )
(declare-fun uvb$ (Nat_nat_enat_fun_fun$ )Nat_set_nat_enat_fun_fun$ )
(declare-fun uvc$ (Nat_nat_enat_fun_fun$ )Nat_nat_enat_fun_fun$ )
(declare-fun uvd$ (Nat_nat_enat_fun_fun$ )Nat_set_nat_enat_fun_fun$ )
(declare-fun uve$ (Nat_nat_fun$ )Nat_nat_nat_fun_fun$ )
(declare-fun uvf$ (Nat_enat_fun$ )Nat_nat_enat_fun_fun$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun plus$ (Enat$ )Enat_enat_fun$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun plus$a (Nat$ )Nat_nat_fun$ )
(declare-fun times$ (Nat$ )Nat_nat_fun$ )
(declare-fun member$ (Enat$ Enat_set$ )Bool )
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$ )Enat$ )
(declare-fun fun_app$ (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun member$a (Nat$ Nat_set$ )Bool )
(declare-fun setsum$a (Nat_nat_fun$ Nat_set$ )Nat$ )
(declare-fun setsum$b (Enat_enat_fun$ Enat_set$ )Enat$ )
(declare-fun setsum$c (Enat_nat_fun$ Enat_set$ )Nat$ )
(declare-fun fun_app$a (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun fun_app$b (Enat_enat_enat_fun_fun$ Enat$ )Enat_enat_fun$ )
(declare-fun fun_app$c (Enat_nat_fun$ Enat$ )Nat$ )
(declare-fun fun_app$d (Enat_enat_nat_fun_fun$ Enat$ )Enat_nat_fun$ )
(declare-fun fun_app$e (Nat_enat_enat_fun_fun$ Nat$ )Enat_enat_fun$ )
(declare-fun fun_app$f (Enat_nat_enat_fun_fun$ Enat$ )Nat_enat_fun$ )
(declare-fun fun_app$g (Nat_enat_nat_fun_fun$ Nat$ )Enat_nat_fun$ )
(declare-fun fun_app$h (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$i (Enat_nat_nat_fun_fun$ Enat$ )Nat_nat_fun$ )
(declare-fun fun_app$j (Nat_nat_enat_fun_fun$ Nat$ )Nat_enat_fun$ )
(declare-fun fun_app$k (Nat_nat_nat_fun_fun$ Nat$ )Nat_nat_fun$ )
(declare-fun fun_app$l (Nat_set_nat_enat_fun_fun$ Nat_set$ )Nat_enat_fun$ )
(declare-fun fun_app$m (Nat_set_nat_nat_fun_fun$ Nat_set$ )Nat_nat_fun$ )
(declare-fun fun_app$n (Enat_set_enat_enat_fun_fun$ Enat_set$ )Enat_enat_fun$ )
(declare-fun fun_app$o (Enat_set_nat_enat_fun_fun$ Enat_set$ )Nat_enat_fun$ )
(declare-fun fun_app$p (Enat_set_enat_nat_fun_fun$ Enat_set$ )Enat_nat_fun$ )
(declare-fun fun_app$q (Enat_set_nat_nat_fun_fun$ Enat_set$ )Nat_nat_fun$ )
(declare-fun fun_app$r (Nat_set_enat_nat_fun_fun$ Nat_set$ )Enat_nat_fun$ )
(declare-fun fun_app$s (Nat_set_enat_enat_fun_fun$ Nat_set$ )Enat_enat_fun$ )
(declare-fun fun_app$t (Enat_enat_fun_enat_enat_fun_fun$ Enat_enat_fun$ )Enat_enat_fun$ )
(declare-fun fun_app$u (Enat_nat_fun_enat_nat_fun_fun$ Enat_nat_fun$ )Enat_nat_fun$ )
(declare-fun fun_app$v (Nat_enat_fun_nat_enat_fun_fun$ Nat_enat_fun$ )Nat_enat_fun$ )
(declare-fun fun_app$w (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$ )Nat_nat_fun$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun llength$a (A_llist_llist$ )Enat$ )
(declare-fun lessThan$a (Enat$ )Enat_set$ )
(declare-fun atLeastLessThan$ (Nat$ Nat$ )Nat_set$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(llength$ (lnth$ xssa$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$b (uuw$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$b ?v0 ?v2 )?v1 )):pattern ((fun_app$a (fun_app$b (uuw$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 Enat_enat_nat_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$d (uuq$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$d (uuq$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Enat_nat_enat_fun_fun$ )(?v1 Nat$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$e (uut$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$f ?v0 ?v2 )?v1 )):pattern ((fun_app$a (fun_app$e (uut$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 Enat_nat_nat_fun_fun$ )(?v1 Nat$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$g (uun$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$i ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$g (uun$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat_enat_enat_fun_fun$ )(?v1 Enat$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$f (uuh$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$e ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$f (uuh$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 Nat_enat_nat_fun_fun$ )(?v1 Enat$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$i (uuk$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$g ?v0 ?v2 )?v1 )):pattern ((fun_app$h (fun_app$i (uuk$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$j (uvc$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$j ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$j (uvc$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$k (uuz$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$k ?v0 ?v2 )?v1 )):pattern ((fun_app$h (fun_app$k (uuz$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$l (uvd$ ?v0 )?v1 )?v2 )(setsum$ (fun_app$j (uvc$ ?v0 )?v2 )?v1 )):pattern ((fun_app$ (fun_app$l (uvd$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$m (uva$ ?v0 )?v1 )?v2 )(setsum$a (fun_app$k (uuz$ ?v0 )?v2 )?v1 )):pattern ((fun_app$h (fun_app$m (uva$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$n (uux$ ?v0 )?v1 )?v2 )(setsum$b (fun_app$b (uuw$ ?v0 )?v2 )?v1 )):pattern ((fun_app$a (fun_app$n (uux$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 Enat_nat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$o (uuu$ ?v0 )?v1 )?v2 )(setsum$b (fun_app$e (uut$ ?v0 )?v2 )?v1 )):pattern ((fun_app$ (fun_app$o (uuu$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Enat_enat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$p (uur$ ?v0 )?v1 )?v2 )(setsum$c (fun_app$d (uuq$ ?v0 )?v2 )?v1 )):pattern ((fun_app$c (fun_app$p (uur$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat_nat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$q (uuo$ ?v0 )?v1 )?v2 )(setsum$c (fun_app$g (uun$ ?v0 )?v2 )?v1 )):pattern ((fun_app$h (fun_app$q (uuo$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Nat_enat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$r (uul$ ?v0 )?v1 )?v2 )(setsum$a (fun_app$i (uuk$ ?v0 )?v2 )?v1 )):pattern ((fun_app$c (fun_app$r (uul$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat_enat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$s (uui$ ?v0 )?v1 )?v2 )(setsum$ (fun_app$f (uuh$ ?v0 )?v2 )?v1 )):pattern ((fun_app$a (fun_app$s (uui$ ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_fun$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$t (uud$ ?v0 )?v1 )?v2 )(fun_app$a (plus$ (fun_app$a ?v0 ?v2 ))(fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$t (uud$ ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 Enat_nat_fun$ )(?v1 Enat_nat_fun$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$u (uuc$ ?v0 )?v1 )?v2 )(fun_app$h (plus$a (fun_app$c ?v0 ?v2 ))(fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$u (uuc$ ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat_enat_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$v (uuf$ ?v0 )?v1 )?v2 )(fun_app$a (plus$ (fun_app$ ?v0 ?v2 ))(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$v (uuf$ ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$w (uue$ ?v0 )?v1 )?v2 )(fun_app$h (plus$a (fun_app$h ?v0 ?v2 ))(fun_app$h ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$w (uue$ ?v0 )?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$n (uuv$ ?v0 )?v1 )?v2 )(setsum$b (fun_app$b ?v0 ?v2 )?v1 )):pattern ((fun_app$a (fun_app$n (uuv$ ?v0 )?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 Enat_enat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$p (uup$ ?v0 )?v1 )?v2 )(setsum$c (fun_app$d ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$p (uup$ ?v0 )?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 Enat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$s (uus$ ?v0 )?v1 )?v2 )(setsum$ (fun_app$f ?v0 ?v2 )?v1 )):pattern ((fun_app$a (fun_app$s (uus$ ?v0 )?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 Enat_nat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$r (uum$ ?v0 )?v1 )?v2 )(setsum$a (fun_app$i ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$r (uum$ ?v0 )?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat_enat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$o (uug$ ?v0 )?v1 )?v2 )(setsum$b (fun_app$e ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$o (uug$ ?v0 )?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat_enat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$q (uuj$ ?v0 )?v1 )?v2 )(setsum$c (fun_app$g ?v0 ?v2 )?v1 )):pattern ((fun_app$h (fun_app$q (uuj$ ?v0 )?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$l (uvb$ ?v0 )?v1 )?v2 )(setsum$ (fun_app$j ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$l (uvb$ ?v0 )?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$m (uuy$ ?v0 )?v1 )?v2 )(setsum$a (fun_app$k ?v0 ?v2 )?v1 )):pattern ((fun_app$h (fun_app$m (uuy$ ?v0 )?v1 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$j (uvf$ ?v0 )?v1 )?v2 )(setsum$ ?v0 (atLeastLessThan$ (fun_app$h (times$ ?v2 )?v1 )(fun_app$h (plus$a (fun_app$h (times$ ?v2 )?v1 ))?v1 )))):pattern ((fun_app$ (fun_app$j (uvf$ ?v0 )?v1 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$k (uve$ ?v0 )?v1 )?v2 )(setsum$a ?v0 (atLeastLessThan$ (fun_app$h (times$ ?v2 )?v1 )(fun_app$h (plus$a (fun_app$h (times$ ?v2 )?v1 ))?v1 )))):pattern ((fun_app$h (fun_app$k (uve$ ?v0 )?v1 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$j (uub$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$h (plus$a ?v2 )?v1 ))):pattern ((fun_app$ (fun_app$j (uub$ ?v0 )?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$k (uua$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$h (plus$a ?v2 )?v1 ))):pattern ((fun_app$h (fun_app$k (uua$ ?v0 )?v1 )?v2 )))):named a32 ))
(assert (! (not (= (setsum$ uu$ (lessThan$ (fun_app$h (plus$a m$ )(size$ xss$ ))))(fun_app$a (plus$ (setsum$ uu$ (lessThan$ (size$ xss$ ))))(setsum$ uu$ (atLeastLessThan$ (size$ xss$ )(fun_app$h (plus$a m$ )(size$ xss$ ))))))):named a33 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (setsum$a ?v0 (atLeastLessThan$ (fun_app$h (plus$a ?v1 )?v2 )(fun_app$h (plus$a ?v3 )?v2 )))(setsum$a (fun_app$k (uua$ ?v0 )?v2 )(atLeastLessThan$ ?v1 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (setsum$ ?v0 (atLeastLessThan$ (fun_app$h (plus$a ?v1 )?v2 )(fun_app$h (plus$a ?v3 )?v2 )))(setsum$ (fun_app$j (uub$ ?v0 )?v2 )(atLeastLessThan$ ?v1 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (lessThan$a ?v0 )(lessThan$a ?v1 ))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (lessThan$ ?v0 )(lessThan$ ?v1 ))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$h (plus$a ?v0 )?v1 )(fun_app$h (plus$a ?v2 )?v1 ))(= ?v0 ?v2 ))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$h (plus$a ?v0 )?v1 )(fun_app$h (plus$a ?v0 )?v2 ))(= ?v1 ?v2 ))):named a39 ))
(assert (! (forall ((?v0 Enat_nat_fun$ )(?v1 Enat_nat_fun$ )(?v2 Enat_set$ ))(= (setsum$c (fun_app$u (uuc$ ?v0 )?v1 )?v2 )(fun_app$h (plus$a (setsum$c ?v0 ?v2 ))(setsum$c ?v1 ?v2 )))):named a40 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_fun$ )(?v2 Enat_set$ ))(= (setsum$b (fun_app$t (uud$ ?v0 )?v1 )?v2 )(fun_app$a (plus$ (setsum$b ?v0 ?v2 ))(setsum$b ?v1 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_set$ ))(= (setsum$a (fun_app$w (uue$ ?v0 )?v1 )?v2 )(fun_app$h (plus$a (setsum$a ?v0 ?v2 ))(setsum$a ?v1 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat_enat_fun$ )(?v2 Nat_set$ ))(= (setsum$ (fun_app$v (uuf$ ?v0 )?v1 )?v2 )(fun_app$a (plus$ (setsum$ ?v0 ?v2 ))(setsum$ ?v1 ?v2 )))):named a43 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= m$ (suc$ ?v0 ))false ))false ):named a44 ))
(assert (! (less$ (enat$ n$ )(llength$ (lnth$ xssa$ (fun_app$h (plus$a m$ )(size$ xss$ ))))):named a45 ))
(assert (! (forall ((?v0 Nat$ ))(! (=> (less$a ?v0 (size$ xss$ ))(= (lnth$ xssa$ ?v0 )lNil$ )):pattern ((lnth$ xssa$ ?v0 )))):named a46 ))
(assert (! (forall ((?v0 Nat_enat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat_set$ ))(= (setsum$ (fun_app$o (uug$ ?v0 )?v1 )?v2 )(setsum$b (fun_app$s (uui$ ?v0 )?v2 )?v1 ))):named a47 ))
(assert (! (forall ((?v0 Nat_enat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat_set$ ))(= (setsum$a (fun_app$q (uuj$ ?v0 )?v1 )?v2 )(setsum$c (fun_app$r (uul$ ?v0 )?v2 )?v1 ))):named a48 ))
(assert (! (forall ((?v0 Enat_nat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat_set$ ))(= (setsum$c (fun_app$r (uum$ ?v0 )?v1 )?v2 )(setsum$a (fun_app$q (uuo$ ?v0 )?v2 )?v1 ))):named a49 ))
(assert (! (forall ((?v0 Enat_enat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat_set$ ))(= (setsum$c (fun_app$p (uup$ ?v0 )?v1 )?v2 )(setsum$c (fun_app$p (uur$ ?v0 )?v2 )?v1 ))):named a50 ))
(assert (! (forall ((?v0 Enat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat_set$ ))(= (setsum$b (fun_app$s (uus$ ?v0 )?v1 )?v2 )(setsum$ (fun_app$o (uuu$ ?v0 )?v2 )?v1 ))):named a51 ))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat_set$ ))(= (setsum$b (fun_app$n (uuv$ ?v0 )?v1 )?v2 )(setsum$b (fun_app$n (uux$ ?v0 )?v2 )?v1 ))):named a52 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(= (setsum$a (fun_app$m (uuy$ ?v0 )?v1 )?v2 )(setsum$a (fun_app$m (uva$ ?v0 )?v2 )?v1 ))):named a53 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(= (setsum$ (fun_app$l (uvb$ ?v0 )?v1 )?v2 )(setsum$ (fun_app$l (uvd$ ?v0 )?v2 )?v1 ))):named a54 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(= (setsum$a (fun_app$k (uve$ ?v0 )?v1 )(lessThan$ ?v2 ))(setsum$a ?v0 (lessThan$ (fun_app$h (times$ ?v2 )?v1 ))))):named a55 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(= (setsum$ (fun_app$j (uvf$ ?v0 )?v1 )(lessThan$ ?v2 ))(setsum$ ?v0 (lessThan$ (fun_app$h (times$ ?v2 )?v1 ))))):named a56 ))
(assert (! (less$ (enat$ (fun_app$h (plus$a m$ )(size$ xss$ )))(llength$a xssa$ )):named a57 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 Enat_set$ )(?v4 Enat_nat_fun$ )(?v5 Enat_nat_fun$ ))(=> (and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$a ?v1 (fun_app$a ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(member$ (fun_app$a ?v2 ?v6 )?v3 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v3 )(= (fun_app$a ?v2 (fun_app$a ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v3 )(member$ (fun_app$a ?v1 ?v6 )?v0 )))(forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$c ?v4 (fun_app$a ?v2 ?v6 ))(fun_app$c ?v5 ?v6 ))))))))(= (setsum$c ?v5 ?v0 )(setsum$c ?v4 ?v3 )))):named a58 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 Enat_set$ )(?v4 Enat_enat_fun$ )(?v5 Enat_enat_fun$ ))(=> (and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$a ?v1 (fun_app$a ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(member$ (fun_app$a ?v2 ?v6 )?v3 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v3 )(= (fun_app$a ?v2 (fun_app$a ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v3 )(member$ (fun_app$a ?v1 ?v6 )?v0 )))(forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$a ?v4 (fun_app$a ?v2 ?v6 ))(fun_app$a ?v5 ?v6 ))))))))(= (setsum$b ?v5 ?v0 )(setsum$b ?v4 ?v3 )))):named a59 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Nat_enat_fun$ )(?v2 Enat_nat_fun$ )(?v3 Nat_set$ )(?v4 Nat_enat_fun$ )(?v5 Enat_enat_fun$ ))(=> (and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$ ?v1 (fun_app$c ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(member$a (fun_app$c ?v2 ?v6 )?v3 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v3 )(= (fun_app$c ?v2 (fun_app$ ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v3 )(member$ (fun_app$ ?v1 ?v6 )?v0 )))(forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$ ?v4 (fun_app$c ?v2 ?v6 ))(fun_app$a ?v5 ?v6 ))))))))(= (setsum$b ?v5 ?v0 )(setsum$ ?v4 ?v3 )))):named a60 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Nat_enat_fun$ )(?v2 Enat_nat_fun$ )(?v3 Nat_set$ )(?v4 Nat_nat_fun$ )(?v5 Enat_nat_fun$ ))(=> (and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$ ?v1 (fun_app$c ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(member$a (fun_app$c ?v2 ?v6 )?v3 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v3 )(= (fun_app$c ?v2 (fun_app$ ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v3 )(member$ (fun_app$ ?v1 ?v6 )?v0 )))(forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$h ?v4 (fun_app$c ?v2 ?v6 ))(fun_app$c ?v5 ?v6 ))))))))(= (setsum$c ?v5 ?v0 )(setsum$a ?v4 ?v3 )))):named a61 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Enat_nat_fun$ )(?v2 Nat_enat_fun$ )(?v3 Enat_set$ )(?v4 Enat_enat_fun$ )(?v5 Nat_enat_fun$ ))(=> (and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(= (fun_app$c ?v1 (fun_app$ ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(member$ (fun_app$ ?v2 ?v6 )?v3 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v3 )(= (fun_app$ ?v2 (fun_app$c ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v3 )(member$a (fun_app$c ?v1 ?v6 )?v0 )))(forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(= (fun_app$a ?v4 (fun_app$ ?v2 ?v6 ))(fun_app$ ?v5 ?v6 ))))))))(= (setsum$ ?v5 ?v0 )(setsum$b ?v4 ?v3 )))):named a62 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Enat_nat_fun$ )(?v2 Nat_enat_fun$ )(?v3 Enat_set$ )(?v4 Enat_nat_fun$ )(?v5 Nat_nat_fun$ ))(=> (and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(= (fun_app$c ?v1 (fun_app$ ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(member$ (fun_app$ ?v2 ?v6 )?v3 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v3 )(= (fun_app$ ?v2 (fun_app$c ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$ ?v6 ?v3 )(member$a (fun_app$c ?v1 ?v6 )?v0 )))(forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(= (fun_app$c ?v4 (fun_app$ ?v2 ?v6 ))(fun_app$h ?v5 ?v6 ))))))))(= (setsum$a ?v5 ?v0 )(setsum$c ?v4 ?v3 )))):named a63 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ )(?v3 Nat_set$ )(?v4 Nat_nat_fun$ )(?v5 Nat_nat_fun$ ))(=> (and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(= (fun_app$h ?v1 (fun_app$h ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(member$a (fun_app$h ?v2 ?v6 )?v3 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v3 )(= (fun_app$h ?v2 (fun_app$h ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v3 )(member$a (fun_app$h ?v1 ?v6 )?v0 )))(forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(= (fun_app$h ?v4 (fun_app$h ?v2 ?v6 ))(fun_app$h ?v5 ?v6 ))))))))(= (setsum$a ?v5 ?v0 )(setsum$a ?v4 ?v3 )))):named a64 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ )(?v3 Nat_set$ )(?v4 Nat_enat_fun$ )(?v5 Nat_enat_fun$ ))(=> (and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(= (fun_app$h ?v1 (fun_app$h ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(member$a (fun_app$h ?v2 ?v6 )?v3 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v3 )(= (fun_app$h ?v2 (fun_app$h ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v3 )(member$a (fun_app$h ?v1 ?v6 )?v0 )))(forall ((?v6 Nat$ ))(=> (member$a ?v6 ?v0 )(= (fun_app$ ?v4 (fun_app$h ?v2 ?v6 ))(fun_app$ ?v5 ?v6 ))))))))(= (setsum$ ?v5 ?v0 )(setsum$ ?v4 ?v3 )))):named a65 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (fun_app$h (plus$a ?v0 )?v1 )(fun_app$h (plus$a ?v0 )?v2 ))(less$a ?v1 ?v2 ))):named a66 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (fun_app$h (plus$a ?v0 )?v1 )(fun_app$h (plus$a ?v2 )?v1 ))(less$a ?v0 ?v2 ))):named a67 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (member$ ?v0 (lessThan$a ?v1 ))(less$ ?v0 ?v1 ))):named a68 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (member$a ?v0 (lessThan$ ?v1 ))(less$a ?v0 ?v1 ))):named a69 ))
(assert (! (less$a zero$ m$ ):named a70 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (setsum$a ?v0 (lessThan$ (suc$ ?v1 )))(fun_app$h (plus$a (setsum$a ?v0 (lessThan$ ?v1 )))(fun_app$h ?v0 ?v1 )))):named a71 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ ))(= (setsum$ ?v0 (lessThan$ (suc$ ?v1 )))(fun_app$a (plus$ (setsum$ ?v0 (lessThan$ ?v1 )))(fun_app$ ?v0 ?v1 )))):named a72 ))
(check-sat )
;(get-unsat-core )
