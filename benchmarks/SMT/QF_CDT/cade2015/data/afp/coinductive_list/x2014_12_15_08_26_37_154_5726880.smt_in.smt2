;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun xsa$ ()A_llist$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun llexord$ (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun pred_llist$ (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= xsa$ (lCons$ ?v0 ?v1 ))thesis$ )):named a1 ))
(assert (! (not (lnull$ xsa$ )):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (lnull$ ?v0 ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))(not (lnull$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (lnull$ (lCons$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(fun_app$ (pred_llist$ ?v0 )?v2 ))):pattern ((fun_app$ (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$ (lmember$ ?v0 )?v2 ))):pattern ((fun_app$ (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (lstrict_prefix$ ?v1 )?v3 ))):pattern ((fun_app$ (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(= (fun_app$a (lsetp$ ?v0 )?v1 )(or (exists ((?v2 A$ )(?v3 A_llist$ ))(and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$a (lsetp$ ?v2 )?v3 ))))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (fun_app$a (lsetp$ ?v0 )?v1 )(and (forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(=> (and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$a (lsetp$ ?v2 )?v3 )))false ))))false )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$a (lsetp$ ?v0 )?v1 )(fun_app$a (lsetp$ (lCons$ ?v2 ?v0 ))?v1 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(fun_app$a (lsetp$ (lCons$ ?v0 ?v1 ))?v0 )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (llast$ (lCons$ ?v0 (lCons$ ?v1 ?v2 )))(llast$ (lCons$ ?v1 ?v2 ))):pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A$ ))(=> (fun_app$ (fun_app$b (llexord$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$b (llexord$ ?v0 )(lCons$ ?v3 ?v1 ))(lCons$ ?v3 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$ (lstrict_prefix$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (llast$ (lCons$ ?v0 ?v1 ))(ite (lnull$ ?v1 )?v0 (llast$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a18 ))
(check-sat )
;(get-unsat-core )
