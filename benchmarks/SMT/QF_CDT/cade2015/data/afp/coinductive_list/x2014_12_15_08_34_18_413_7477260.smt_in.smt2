;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun a$ ()Nat_set$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ (A$ )A_llist_a_llist_fun$ )
(declare-fun bot$ ()Nat_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun finite_lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(lCons$ ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (= (lsublist$ (lCons$ x$ lNil$ )a$ )(ite (member$ zero$ a$ )(lCons$ x$ lNil$ )lNil$ ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$ lNil$ ?v0 )lNil$ ):pattern ((lsublist$ lNil$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (= lNil$ (lCons$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(= (finite_lprefix$ ?v0 (lCons$ ?v1 ?v2 ))(or (= ?v0 lNil$ )(exists ((?v3 A_llist$ ))(and (= ?v0 (lCons$ ?v1 ?v3 ))(finite_lprefix$ ?v3 ?v2 )))))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lstrict_prefix$ lNil$ (lCons$ ?v0 ?v1 ))true ):pattern ((lCons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lstrict_prefix$ (lCons$ ?v0 ?v1 )lNil$ )false ):pattern ((lCons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A$ ))(! (= (llast$ (lCons$ ?v0 lNil$ ))?v0 ):pattern ((uu$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lsublist$ ?v0 bot$ )lNil$ )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$b (lmember$ ?v0 )?v2 ))):pattern ((fun_app$b (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a14 ))
(assert (! (= zero$ zero$ ):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
