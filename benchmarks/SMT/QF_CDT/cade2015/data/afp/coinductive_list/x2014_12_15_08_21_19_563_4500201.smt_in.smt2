;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_llist_enat_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun us$ ()B_llist$ )
(declare-fun vs$ ()B_llist$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun llcp$ (A_b_prod_llist$ )A_b_prod_llist_enat_fun$ )
(declare-fun lmap$ (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$a (A_llist$ )A_llist_enat_fun$ )
(declare-fun llcp$b (B_llist$ )B_llist_enat_fun$ )
(declare-fun lmap$a (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$b (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$c (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$d (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lmap$e (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$f (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$g (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$h (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun lnull$b (A_b_prod_llist$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_b_prod_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$b (A_b_prod_llist_a_b_prod_llist_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun fun_app$c (A_b_prod_llist_enat_fun$ A_b_prod_llist$ )Enat$ )
(declare-fun fun_app$d (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$e (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun lappend$a (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun lappend$b (A_b_prod_llist$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun lfinite$b (B_llist$ )Bool )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun llength$b (A_b_prod_llist$ )Enat$ )
(declare-fun iterates$a (B_b_fun$ B$ )B_llist$ )
(declare-fun iterates$b (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_llist$ )
(assert (! (not (= (lzip$ (fun_app$ (lappend$ xs$ )ys$ )(fun_app$a (lappend$a us$ )vs$ ))(fun_app$b (lappend$b (lzip$ xs$ us$ ))(lzip$ ys$ vs$ )))):named a0 ))
(assert (! (= (llength$ xs$ )(llength$a us$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0 )?v1 ))?v2 )(fun_app$ (lappend$ ?v0 )(fun_app$ (lappend$ ?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$a (lappend$a (fun_app$a (lappend$a ?v0 )?v1 ))?v2 )(fun_app$a (lappend$a ?v0 )(fun_app$a (lappend$a ?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$b (lappend$b (fun_app$b (lappend$b ?v0 )?v1 ))?v2 )(fun_app$b (lappend$b ?v0 )(fun_app$b (lappend$b ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (llength$b (fun_app$b (lappend$b ?v0 )?v1 ))(plus$ (llength$b ?v0 )(llength$b ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (llength$ (fun_app$ (lappend$ ?v0 )?v1 ))(plus$ (llength$ ?v0 )(llength$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (llength$a (fun_app$a (lappend$a ?v0 )?v1 ))(plus$ (llength$a ?v0 )(llength$a ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$c (llcp$ ?v0 )?v0 )(llength$b ?v0 )):pattern ((llcp$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$d (llcp$a ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$a ?v0 )))):named a9 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$e (llcp$b ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$b ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ )(?v3 A_b_prod_llist$ ))(=> (= (llength$b ?v0 )(llength$b ?v1 ))(= (= (fun_app$b (lappend$b ?v0 )?v2 )(fun_app$b (lappend$b ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$ ?v0 )(= ?v2 ?v3 )))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (= (llength$ ?v0 )(llength$ ?v1 ))(= (= (fun_app$ (lappend$ ?v0 )?v2 )(fun_app$ (lappend$ ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$a ?v0 )(= ?v2 ?v3 )))))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist$ ))(=> (= (llength$a ?v0 )(llength$a ?v1 ))(= (= (fun_app$a (lappend$a ?v0 )?v2 )(fun_app$a (lappend$a ?v1 )?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$b ?v0 )(= ?v2 ?v3 )))))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_llist$ ))(= (fun_app$ (lappend$ (iterates$ ?v0 ?v1 ))?v2 )(iterates$ ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_llist$ ))(= (fun_app$a (lappend$a (iterates$a ?v0 ?v1 ))?v2 )(iterates$a ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_llist$ ))(= (fun_app$b (lappend$b (iterates$b ?v0 ?v1 ))?v2 )(iterates$b ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$a )?v0 ):pattern ((lappend$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a (lappend$a ?v0 )lNil$b )?v0 ):pattern ((lappend$a ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$b (lappend$b ?v0 )lNil$ )?v0 ):pattern ((lappend$b ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$a )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$a )?v0 )))):named a20 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a (lappend$a lNil$b )?v0 )?v0 ):pattern ((fun_app$a (lappend$a lNil$b )?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$b (lappend$b lNil$ )?v0 )?v0 ):pattern ((fun_app$b (lappend$b lNil$ )?v0 )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$ (lappend$ ?v0 )?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a23 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$a (fun_app$a (lappend$a ?v0 )?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a24 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (not (lnull$b (fun_app$b (lappend$b ?v0 )?v1 )))(or (not (lnull$b ?v0 ))(not (lnull$b ?v1 ))))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a26 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$a (fun_app$a (lappend$a ?v0 )?v1 ))(and (lnull$a ?v0 )(lnull$a ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (lnull$b (fun_app$b (lappend$b ?v0 )?v1 ))(and (lnull$b ?v0 )(lnull$b ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (lappend$ (lCons$a ?v0 ?v1 ))?v2 )(lCons$a ?v0 (fun_app$ (lappend$ ?v1 )?v2 ))):pattern ((fun_app$ (lappend$ (lCons$a ?v0 ?v1 ))?v2 )))):named a29 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B_llist$ ))(! (= (fun_app$a (lappend$a (lCons$b ?v0 ?v1 ))?v2 )(lCons$b ?v0 (fun_app$a (lappend$a ?v1 )?v2 ))):pattern ((fun_app$a (lappend$a (lCons$b ?v0 ?v1 ))?v2 )))):named a30 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(! (= (fun_app$b (lappend$b (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$b (lappend$b ?v1 )?v2 ))):pattern ((fun_app$b (lappend$b (lCons$ ?v0 ?v1 ))?v2 )))):named a31 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$b ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$a (lmap$a ?v0 ?v1 ))(llength$b ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (llength$b (lmap$b ?v0 ?v1 ))(llength$ ?v1 ))):named a34 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (llength$b (lmap$c ?v0 ?v1 ))(llength$a ?v1 ))):named a35 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$b (lmap$d ?v0 ?v1 ))(llength$b ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$e ?v0 ?v1 ))(llength$ ?v1 ))):named a37 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$f ?v0 ?v1 ))(llength$a ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$g ?v0 ?v1 ))(llength$ ?v1 ))):named a39 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$h ?v0 ?v1 ))(llength$a ?v1 ))):named a40 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$c (llcp$ (fun_app$b (lappend$b ?v0 )?v1 ))(fun_app$b (lappend$b ?v0 )?v2 ))(plus$ (llength$b ?v0 )(fun_app$c (llcp$ ?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$d (llcp$a (fun_app$ (lappend$ ?v0 )?v1 ))(fun_app$ (lappend$ ?v0 )?v2 ))(plus$ (llength$ ?v0 )(fun_app$d (llcp$a ?v1 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$e (llcp$b (fun_app$a (lappend$a ?v0 )?v1 ))(fun_app$a (lappend$a ?v0 )?v2 ))(plus$ (llength$a ?v0 )(fun_app$e (llcp$b ?v1 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$ (lappend$ ?v0 )?v1 ))(and (lfinite$a ?v0 )(lfinite$a ?v1 )))):named a44 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lfinite$b (fun_app$a (lappend$a ?v0 )?v1 ))(and (lfinite$b ?v0 )(lfinite$b ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (lfinite$ (fun_app$b (lappend$b ?v0 )?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a48 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a49 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a50 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$b (lCons$b ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$b (lCons$b ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (lnull$b (lmap$d ?v0 ?v1 ))(lnull$b ?v1 ))):named a56 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (lnull$b (lmap$c ?v0 ?v1 ))(lnull$a ?v1 ))):named a57 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (lnull$b (lmap$b ?v0 ?v1 ))(lnull$ ?v1 ))):named a58 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (lnull$a (lmap$a ?v0 ?v1 ))(lnull$b ?v1 ))):named a59 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$h ?v0 ?v1 ))(lnull$a ?v1 ))):named a60 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$g ?v0 ?v1 ))(lnull$ ?v1 ))):named a61 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$b ?v1 ))):named a62 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$f ?v0 ?v1 ))(lnull$a ?v1 ))):named a63 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$e ?v0 ?v1 ))(lnull$ ?v1 ))):named a64 ))
(check-sat )
;(get-unsat-core )
