;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()A$ )
(declare-fun xs$ ()A_list$ )
(declare-fun ys$ ()A_list$ )
(declare-fun zs$ ()A_list$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xs$b ()A_list$ )
(declare-fun xs$c ()A_llist$ )
(declare-fun ys$a ()A_list$ )
(declare-fun bind$ (A_list$ A_a_list_fun$ )A_list$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_a_list_fun$ A$ )A_list$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(assert (! (not (exists ((?v0 A_list$ )(?v1 A$ )(?v2 A$ ))(and (fun_app$ (fun_app$a r$ ?v1 )?v2 )(and (exists ((?v3 A_list$ ))(= xs$ (append$ ?v0 (cons$ ?v1 ?v3 ))))(exists ((?v3 A_list$ ))(= ys$ (append$ ?v0 (cons$ ?v2 ?v3 )))))))):named a0 ))
(assert (! (fun_app$ (fun_app$a r$ (lhd$ xs$a ))y$ ):named a1 ))
(assert (! (llexord$ r$ (llist_of$ xs$ )(llist_of$ ys$ )):named a2 ))
(assert (! (= ys$ (append$ zs$ (cons$ y$ ys$a ))):named a3 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (append$ (append$ ?v0 ?v1 )?v2 )(append$ ?v0 (append$ ?v1 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (= xs$ (append$ zs$ xs$b )):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_list$ ))(! (= (append$ (cons$ ?v0 ?v1 )?v2 )(cons$ ?v0 (append$ ?v1 ?v2 ))):pattern ((append$ (cons$ ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (and (= (cons$ ?v0 ?v1 )?v2 )(= ?v3 (append$ ?v1 ?v4 )))(= (cons$ ?v0 ?v3 )(append$ ?v2 ?v4 )))):named a10 ))
(assert (! (or (= xs$a lNil$ )(fun_app$ (fun_app$a r$ (lhd$ xs$a ))y$ )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_a_list_fun$ ))(! (= (bind$ (cons$ ?v0 ?v1 )?v2 )(append$ (fun_app$b ?v2 ?v0 )(bind$ ?v1 ?v2 ))):pattern ((bind$ (cons$ ?v0 ?v1 )?v2 )))):named a13 ))
(assert (! (= xs$a (lCons$ x$ xs$c )):named a14 ))
(assert (! (=> (forall ((?v0 A_list$ ))(=> (= xs$a (llist_of$ ?v0 ))false ))false ):named a15 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 ?v1 ?v1 )):named a17 ))
(check-sat )
;(get-unsat-core )
