;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun a$ ()Nat_set$ )
(declare-fun n$ ()Nat$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ ()Nat_bool_fun$ )
(declare-fun uub$ (Nat_set$ )Nat_bool_fun$ )
(declare-fun uuc$ (Nat$ Nat_set$ )Nat_bool_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(member$ (plus$ ?v0 n$ )a$ )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(member$ (plus$ n$ ?v0 )a$ )):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(member$ (plus$ ?v1 n$ )?v0 )):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat$ ))(! (= (fun_app$ (uuc$ ?v0 ?v1 )?v2 )(member$ (plus$ ?v2 ?v0 )?v1 )):pattern ((fun_app$ (uuc$ ?v0 ?v1 )?v2 )))):named a3 ))
(assert (! (not (= (lsublist$ xs$ a$ )(lappend$ (lsublist$ (ltake$ (enat$ n$ )xs$ )a$ )(lsublist$ (ldropn$ n$ xs$ )(collect$ uu$ ))))):named a4 ))
(assert (! (less_eq$ (enat$ n$ )(llength$ xs$ )):named a5 ))
(assert (! (=> (= (llength$ (ltake$ (enat$ n$ )xs$ ))(enat$ n$ ))(= (lsublist$ xs$ a$ )(lappend$ (lsublist$ (ltake$ (enat$ n$ )xs$ )a$ )(lsublist$ (ldropn$ n$ xs$ )(collect$ uua$ ))))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (ldropn$ ?v1 ?v2 ))(ldropn$ (plus$ ?v0 ?v1 )?v2 ))):named a7 ))
(assert (! (= xs$ (lappend$ (ltake$ (enat$ n$ )xs$ )(ldropn$ n$ xs$ ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat_set$ ))(=> (= (llength$ ?v0 )(enat$ n$ ))(= (lsublist$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ (lsublist$ ?v0 ?v2 )(lsublist$ ?v1 (collect$ (uub$ ?v2 ))))))):named a9 ))
(assert (! (= (lsublist$ xs$ a$ )(lsublist$ (lappend$ (ltake$ (enat$ n$ )xs$ )(ldropn$ n$ xs$ ))a$ )):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lappend$ (ltake$ (enat$ ?v0 )?v1 )(ldropn$ ?v0 ?v1 ))?v1 )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a13 ))
(assert (! (= xs$ (lappend$ (ltake$ (enat$ n$ )xs$ )(ldrop$ (enat$ n$ )xs$ ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ )(?v2 A_llist$ )(?v3 Nat_set$ ))(=> (= (llength$ ?v0 )(enat$ ?v1 ))(= (lsublist$ (lappend$ ?v0 ?v2 )?v3 )(lappend$ (lsublist$ ?v0 ?v3 )(lsublist$ ?v2 (collect$ (uuc$ ?v1 ?v3 ))))))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (and (= (ltake$ ?v0 ?v1 )(ltake$ ?v0 ?v2 ))(less_eq$ ?v3 ?v0 ))(= (ltake$ ?v3 ?v1 )(ltake$ ?v3 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (less_eq$ ?v0 (llength$ ?v1 ))(= (ltake$ ?v0 (lappend$ ?v1 ?v2 ))(ltake$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(= (lsublist$ ?v0 (lessThan$ ?v1 ))(ltake$ (enat$ ?v1 )?v0 ))):named a21 ))
(check-sat )
;(get-unsat-core )
