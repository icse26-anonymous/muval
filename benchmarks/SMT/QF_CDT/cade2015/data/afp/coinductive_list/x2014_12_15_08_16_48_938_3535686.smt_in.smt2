;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun na$ ()Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$b (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$c (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(declare-fun fun_app$d (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$e (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun less_eq$a (Nat$ Nat$ )Bool )
(assert (! (not (= (lnull$ (ldropn$ (suc$ na$ )xsa$ ))(less_eq$ (llength$ xsa$ )(enat$ (suc$ na$ ))))):named a0 ))
(assert (! (= (lnull$ (ldropn$ na$ (ltl$ xsa$ )))(less_eq$ (llength$ (ltl$ xsa$ ))(enat$ na$ ))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lnull$ (ldropn$ na$ ?v0 ))(less_eq$ (llength$ ?v0 )(enat$ na$ )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a3 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a6 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (less_eq$a ?v3 ?v4 )(fun_app$ (fun_app$a ?v0 ?v3 )?v4 )))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$ (fun_app$a ?v0 ?v2 )?v1 )))(fun_app$ (fun_app$a ?v0 ?v2 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$b (fun_app$c ?v0 ?v3 )?v4 )))(=> (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(fun_app$b (fun_app$c ?v0 ?v2 )?v1 )))(fun_app$b (fun_app$c ?v0 ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$a ?v0 ?v0 )):named a12 ))
(assert (! (forall ((?v0 Enat$ ))(less_eq$ ?v0 ?v0 )):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less_eq$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$a (fun_app$d ?v0 (suc$ ?v3 ))(fun_app$d ?v0 ?v3 )))(less_eq$a ?v1 ?v2 ))(less_eq$a (fun_app$d ?v0 ?v2 )(fun_app$d ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$ (fun_app$e ?v0 (suc$ ?v3 ))(fun_app$e ?v0 ?v3 )))(less_eq$a ?v1 ?v2 ))(less_eq$ (fun_app$e ?v0 ?v2 )(fun_app$e ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$a (fun_app$d ?v0 ?v3 )(fun_app$d ?v0 (suc$ ?v3 ))))(less_eq$a ?v1 ?v2 ))(less_eq$a (fun_app$d ?v0 ?v1 )(fun_app$d ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$ (fun_app$e ?v0 ?v3 )(fun_app$e ?v0 (suc$ ?v3 ))))(less_eq$a ?v1 ?v2 ))(less_eq$ (fun_app$e ?v0 ?v1 )(fun_app$e ?v0 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (ltl$ (ldropn$ ?v0 ?v1 ))(ldropn$ ?v0 (ltl$ ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(lnull$ (ltl$ ?v0 )))):named a20 ))
(check-sat )
;(get-unsat-core )
