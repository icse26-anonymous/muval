;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun lsorted$ (A_a_bool_fun_fun$ A_llist$ )Bool )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(assert (! (not (= (lsublist$ xs$ (lessThan$ n$ ))(fun_app$ (ltake$ (enat$ n$ ))xs$ ))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (fun_app$ (ltake$ (enat$ ?v2 ))?v0 )(fun_app$ (ltake$ (enat$ ?v2 ))?v1 )))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (lessThan$ ?v0 )(lessThan$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(lprefix$ (fun_app$ (ltake$ (enat$ ?v2 ))?v0 )(fun_app$ (ltake$ (enat$ ?v2 ))?v1 )))(lprefix$ ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$ lNil$ ?v0 )lNil$ ):pattern ((lsublist$ lNil$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$ (fun_app$ (ltake$ ?v0 )?v1 )?v1 )):named a7 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 Enat$ ))(=> (lsorted$ ?v0 ?v1 )(lsorted$ ?v0 (fun_app$ (ltake$ ?v2 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (fun_app$ (ltake$ ?v1 )?v0 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$ (ltake$ ?v0 )(fun_app$ (ltake$ ?v1 )?v2 ))(fun_app$ (ltake$ (min$ ?v0 ?v1 ))?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a13 ))
(assert (! (= (ldistinct$ lNil$ )true ):named a14 ))
(check-sat )
;(get-unsat-core )
