;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun f$ ()B_a_fun$ )
(declare-fun x$ ()B$ )
(declare-fun y$ ()B$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lnth$ (B_llist$ Nat$ )B$ )
(declare-fun lset$ (B_llist$ )B_set$ )
(declare-fun lmap$a (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$b (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$c (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (B_a_fun$ B$ )A$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$ (B_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_b_fun$ A$ )B$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$f (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$g (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$h (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$i (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun lappend$a (B_llist$ B_llist$ )B_llist$ )
(declare-fun llength$a (A_llist$ )Enat$ )
(declare-fun lprefix$a (B_llist$ B_llist$ )Bool )
(declare-fun ldistinct$ (B_llist$ )Bool )
(declare-fun ldistinct$a (A_llist$ )Bool )
(declare-fun llist_all2$ (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llist_all2$a (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun llist_all2$b (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun llist_all2$c (B_b_bool_fun_fun$ B_llist$ B_llist$ )Bool )
(declare-fun ltakeWhile$a (B_bool_fun$ B_llist$ )B_llist$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less$ (enat$ ?v0 )(llength$ xs$ ))(and (= x$ (lnth$ xs$ ?v0 ))(and (less$ (enat$ ?v1 )(llength$ xs$ ))(= y$ (lnth$ xs$ ?v1 )))))thesis$ )):named a1 ))
(assert (! (= (fun_app$ f$ x$ )(fun_app$ f$ y$ )):named a2 ))
(assert (! (member$ x$ (lset$ xs$ )):named a3 ))
(assert (! (member$ y$ (lset$ xs$ )):named a4 ))
(assert (! (ldistinct$ xs$ ):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 B_llist$ ))(= (ldistinct$ ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$ ?v0 ))(and (less$ (enat$ ?v2 )(llength$ ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$ ?v0 ?v1 )(lnth$ ?v0 ?v2 ))))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldistinct$a ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$a ?v0 ))(and (less$ (enat$ ?v2 )(llength$a ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$a ?v0 ?v1 )(lnth$a ?v0 ?v2 ))))))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_b_fun$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (lnth$ (lmap$ ?v2 ?v1 )?v0 )(fun_app$a ?v2 (lnth$a ?v1 ?v0 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (lnth$a (lmap$a ?v2 ?v1 )?v0 )(fun_app$b ?v2 (lnth$a ?v1 ?v0 ))))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_b_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (lnth$ (lmap$b ?v2 ?v1 )?v0 )(fun_app$c ?v2 (lnth$ ?v1 ?v0 ))))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (lnth$a (lmap$c ?v2 ?v1 )?v0 )(fun_app$ ?v2 (lnth$ ?v1 ?v0 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat$ ))(=> (and (lprefix$ ?v0 ?v1 )(less$ (enat$ ?v2 )(llength$a ?v0 )))(= (lnth$a ?v0 ?v2 )(lnth$a ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 Nat$ ))(=> (and (lprefix$a ?v0 ?v1 )(less$ (enat$ ?v2 )(llength$ ?v0 )))(= (lnth$ ?v0 ?v2 )(lnth$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$a (ltakeWhile$ ?v1 ?v2 )))(= (lnth$a (ltakeWhile$ ?v1 ?v2 )?v0 )(lnth$a ?v2 ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_bool_fun$ )(?v2 B_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ (ltakeWhile$a ?v1 ?v2 )))(= (lnth$ (ltakeWhile$a ?v1 ?v2 )?v0 )(lnth$ ?v2 ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$a ?v0 (lset$a ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$a ?v1 ))(= (lnth$a ?v1 ?v2 )?v0 ))))):named a18 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$ ?v1 ))(= (lnth$ ?v1 ?v2 )?v0 ))))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (lnth$a (lappend$ ?v1 ?v2 )?v0 )(lnth$a ?v1 ?v0 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (lnth$ (lappend$a ?v1 ?v2 )?v0 )(lnth$ ?v1 ?v0 )))):named a21 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (llist_all2$ ?v0 ?v1 ?v2 )(and (= (llength$ ?v1 )(llength$a ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$a ?v2 ))(fun_app$d (fun_app$e ?v0 (lnth$ ?v1 ?v3 ))(lnth$a ?v2 ?v3 ))))))):named a22 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (llist_all2$a ?v0 ?v1 ?v2 )(and (= (llength$a ?v1 )(llength$ ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v2 ))(fun_app$f (fun_app$g ?v0 (lnth$a ?v1 ?v3 ))(lnth$ ?v2 ?v3 ))))))):named a23 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (llist_all2$b ?v0 ?v1 ?v2 )(and (= (llength$a ?v1 )(llength$a ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$a ?v2 ))(fun_app$d (fun_app$h ?v0 (lnth$a ?v1 ?v3 ))(lnth$a ?v2 ?v3 ))))))):named a24 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (llist_all2$c ?v0 ?v1 ?v2 )(and (= (llength$ ?v1 )(llength$ ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v2 ))(fun_app$f (fun_app$i ?v0 (lnth$ ?v1 ?v3 ))(lnth$ ?v2 ?v3 ))))))):named a25 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$a ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$ ?v2 )))(fun_app$f (fun_app$g ?v0 (lnth$a ?v1 ?v3 ))(lnth$ ?v2 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$a ?v2 )))(fun_app$d (fun_app$e ?v0 (lnth$ ?v1 ?v3 ))(lnth$a ?v2 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$a ?v2 )))(fun_app$d (fun_app$h ?v0 (lnth$a ?v1 ?v3 ))(lnth$a ?v2 ?v3 )))):named a28 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$ ?v2 )))(fun_app$f (fun_app$i ?v0 (lnth$ ?v1 ?v3 ))(lnth$ ?v2 ?v3 )))):named a29 ))
(assert (! (ldistinct$a (lmap$c f$ xs$ )):named a30 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a31 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a32 ))
(check-sat )
;(get-unsat-core )
