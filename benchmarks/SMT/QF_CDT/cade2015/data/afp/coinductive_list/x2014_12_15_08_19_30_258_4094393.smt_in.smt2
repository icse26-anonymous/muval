;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun f$ ()A_a_fun$ )
(declare-fun h$ ()A_a_llist_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_a_llist_fun$ A$ )A_llist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun iterates$ (A_a_fun$ )A_a_llist_fun$ )
(assert (! (not (= h$ (iterates$ f$ ))):named a0 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$ h$ ?v0 )(lCons$ ?v0 (lmap$ f$ (fun_app$ h$ ?v0 ))))):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lmap$ ?v0 (fun_app$ (iterates$ ?v0 )?v1 ))(fun_app$ (iterates$ ?v0 )(fun_app$a ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(not (lnull$ (fun_app$ (iterates$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(not (lfinite$ (fun_app$ (iterates$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_llist$ ))(= (lappend$ (fun_app$ (iterates$ ?v0 )?v1 )?v2 )(fun_app$ (iterates$ ?v0 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$ (iterates$ ?v0 )?v1 )(lCons$ ?v1 (fun_app$ (iterates$ ?v0 )(fun_app$a ?v0 ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lhd$ (fun_app$ (iterates$ ?v0 )?v1 ))?v1 )):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (ltl$ (fun_app$ (iterates$ ?v0 )?v1 ))(fun_app$ (iterates$ ?v0 )(fun_app$a ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(! (= (fun_app$ (iterates$ ?v0 )?v1 )(lCons$ ?v1 (lmap$ ?v0 (fun_app$ (iterates$ ?v0 )?v1 )))):pattern ((fun_app$ (iterates$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (lappend$ ?v0 ?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (lappend$ ?v0 ?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$ (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$ ?v0 ?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a16 ))
(check-sat )
;(get-unsat-core )
