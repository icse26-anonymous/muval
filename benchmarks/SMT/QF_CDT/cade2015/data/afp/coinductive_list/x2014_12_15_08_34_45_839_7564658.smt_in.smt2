;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()Nat_llist$)
(declare-fun lhd$ (Nat_llist$)Nat$)
(declare-fun ltl$ (Nat_llist$)Nat_llist$)
(declare-fun lCons$ (Nat$ Nat_llist$ )Nat_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun k$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ldrop$ (Enat$ Nat_llist$ )Nat_llist$ )
(declare-fun ltake$ (Enat$ Nat_llist$ )Nat_llist$ )
(declare-fun zero$a ()Enat$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun lappend$ (Nat_llist$ Nat_llist$ )Nat_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun iterates$ (Nat_nat_fun$ Nat$ )Nat_llist$ )
(assert (! (not (= (iterates$ suc$ zero$ )(lappend$ (ltake$ (enat$ k$ )(iterates$ suc$ zero$ ))(ldrop$ (enat$ k$ )(iterates$ suc$ zero$ ))))):named a0 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a1 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat_llist$ ))(= (lappend$ (iterates$ ?v0 ?v1 )?v2 )(iterates$ ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_llist$ ))(= (lappend$ (ltake$ ?v0 ?v1 )(ldrop$ ?v0 ?v1 ))?v1 )):named a3 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a4 ))
(assert (! (= (llength$ xs$ )(enat$ k$ )):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$ suc$ ?v1 ))false )))false )):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$ suc$ ?v1 ))false )))false )):named a10 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$a (fun_app$b ?v0 ?v3 )zero$ ))(and (forall ((?v3 Nat$ ))(fun_app$a (fun_app$b ?v0 zero$ )(fun_app$ suc$ ?v3 )))(forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(fun_app$a (fun_app$b ?v0 (fun_app$ suc$ ?v3 ))(fun_app$ suc$ ?v4 ))))))(fun_app$a (fun_app$b ?v0 ?v1 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= (fun_app$ suc$ ?v0 )zero$ )false )):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 (fun_app$ suc$ ?v1 ))(not (= ?v0 zero$ )))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= zero$ (fun_app$ suc$ ?v0 ))false )):named a14 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (ldrop$ zero$a ?v0 )?v0 )):named a15 ))
(check-sat )
;(get-unsat-core )
