;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (= (fun_app$ (lprefix$ xs$ )ys$ )(= xs$ ys$ ))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (lprefix$ ?v0 )?v0 )):named a1 ))
(assert (! (not (lfinite$ xs$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (lprefix$ ?v0 )?v1 )(fun_app$ (lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (lprefix$ ?v0 )?v1 )(fun_app$ (lprefix$ ?v1 )?v2 ))(fun_app$ (lprefix$ ?v0 )?v2 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$ (lprefix$ lNil$ )?v0 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (lprefix$ ?v1 )?v3 ))):pattern ((fun_app$ (lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$ (lprefix$ ?v0 )?v1 )(fun_app$ (lprefix$ (lappend$ ?v2 ?v0 ))(lappend$ ?v2 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (lprefix$ lNil$ )?v0 )):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$ (lprefix$ ?v0 )?v1 )(fun_app$ (lprefix$ (ltl$ ?v0 ))(ltl$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (lprefix$ (lCons$ ?v0 ?v1 ))?v2 )(exists ((?v3 A_llist$ ))(and (= ?v2 (lCons$ ?v0 ?v3 ))(fun_app$ (lprefix$ ?v1 )?v3 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A$ ))(=> (fun_app$ (lprefix$ ?v0 )?v1 )(fun_app$ (lprefix$ (lCons$ ?v2 ?v0 ))(lCons$ ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (lprefix$ ?v0 )?v1 )(not (lnull$ ?v0 )))(not (lnull$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (lprefix$ ?v0 )?v1 )(lnull$ ?v1 ))(lnull$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (lnull$ ?v0 )(= (fun_app$ (lprefix$ ?v1 )?v0 )(lnull$ ?v1 ))):pattern ((fun_app$ (lprefix$ ?v1 )?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lnull$ ?v0 )(fun_app$ (lprefix$ ?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lprefix$ ?v0 )lNil$ )(lnull$ ?v0 )):pattern ((lprefix$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(check-sat )
;(get-unsat-core )
