;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun uub$ ()B_b_bool_fun_fun$ )
(declare-fun uuc$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun llcp$a (B_llist$ )B_llist_enat_fun$ )
(declare-fun lmap$a (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lset$a (B_llist$ )B_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$h (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$i (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun fun_app$j (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$k (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun lprefix$a (B_llist$ B_llist$ )Bool )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun ltakeWhile$a (B_bool_fun$ B_llist$ )B_llist$ )
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uuc$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$f (fun_app$g uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uu$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (= (llength$ xs$ )(llength$a ys$ ))):named a4 ))
(assert (! (fun_app$ (llist_all2$ p$ xs$ )ys$ ):named a5 ))
(assert (! (= (llist_all2$a uu$ )uua$ ):named a6 ))
(assert (! (= (llist_all2$b uub$ )uuc$ ):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$h (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$i (llcp$a ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$a ?v0 )))):named a9 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )lNil$a )(= ?v1 lNil$a )):pattern ((fun_app$a (llist_all2$b ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$b (llist_all2$c ?v0 ?v1 )lNil$ )(= ?v1 lNil$a )):pattern ((llist_all2$c ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )lNil$ )(= ?v1 lNil$ )):pattern ((fun_app$c (llist_all2$a ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 ?v1 )lNil$a )(= ?v1 lNil$ )):pattern ((llist_all2$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$b ?v0 )lNil$a )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$ (fun_app$a (llist_all2$b ?v0 )lNil$a )?v1 )))):named a14 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (llist_all2$c ?v0 lNil$a )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$b (llist_all2$c ?v0 lNil$a )?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 lNil$ )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$ (llist_all2$ ?v0 lNil$ )?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$a ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$f (fun_app$g ?v0 ?v1 )?v3 )(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v2 )?v4 ))):pattern ((fun_app$b (fun_app$c (llist_all2$a ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a18 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$f (fun_app$j ?v0 ?v1 )?v3 )(fun_app$b (llist_all2$c ?v0 ?v2 )?v4 ))):pattern ((fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a19 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$b ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))(and (fun_app$d (fun_app$e ?v0 ?v1 )?v3 )(fun_app$ (fun_app$a (llist_all2$b ?v0 )?v2 )?v4 ))):pattern ((fun_app$ (fun_app$a (llist_all2$b ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))))):named a20 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))(and (fun_app$d (fun_app$k ?v0 ?v1 )?v3 )(fun_app$ (llist_all2$ ?v0 ?v2 )?v4 ))):pattern ((fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))))):named a21 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a22 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$a ?v0 ?v1 ))(llength$a ?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$b ?v0 ?v1 ))(llength$ ?v1 ))):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$c ?v0 ?v1 ))(llength$a ?v1 ))):named a25 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ ))(fun_app$ (fun_app$a (llist_all2$b ?v0 )lNil$a )lNil$a )):named a26 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ ))(fun_app$b (llist_all2$c ?v0 lNil$a )lNil$ )):named a27 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )lNil$ )):named a28 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ ))(fun_app$ (llist_all2$ ?v0 lNil$ )lNil$a )):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(= (llength$ ?v0 )(llength$ ?v1 )))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(= (llength$a ?v0 )(llength$a ?v1 )))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (fun_app$b (fun_app$c (llist_all2$a ?v0 )(lCons$ ?v1 ?v2 ))?v3 )(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v3 (lCons$ ?v4 ?v5 ))(and (fun_app$f (fun_app$g ?v0 ?v1 )?v4 )(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v2 )?v5 )))))):named a32 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 A_llist$ ))(= (fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))?v3 )(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v3 (lCons$ ?v4 ?v5 ))(and (fun_app$f (fun_app$j ?v0 ?v1 )?v4 )(fun_app$b (llist_all2$c ?v0 ?v2 )?v5 )))))):named a33 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 B_llist$ ))(= (fun_app$ (fun_app$a (llist_all2$b ?v0 )(lCons$a ?v1 ?v2 ))?v3 )(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v3 (lCons$a ?v4 ?v5 ))(and (fun_app$d (fun_app$e ?v0 ?v1 )?v4 )(fun_app$ (fun_app$a (llist_all2$b ?v0 )?v2 )?v5 )))))):named a34 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))?v3 )(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v3 (lCons$a ?v4 ?v5 ))(and (fun_app$d (fun_app$k ?v0 ?v1 )?v4 )(fun_app$ (llist_all2$ ?v0 ?v2 )?v5 )))))):named a35 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v1 (lCons$ ?v4 ?v5 ))(and (fun_app$f (fun_app$g ?v0 ?v4 )?v2 )(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v5 )?v3 )))))):named a36 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (fun_app$b (llist_all2$c ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v1 (lCons$a ?v4 ?v5 ))(and (fun_app$f (fun_app$j ?v0 ?v4 )?v2 )(fun_app$b (llist_all2$c ?v0 ?v5 )?v3 )))))):named a37 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )(lCons$a ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v1 (lCons$a ?v4 ?v5 ))(and (fun_app$d (fun_app$e ?v0 ?v4 )?v2 )(fun_app$ (fun_app$a (llist_all2$b ?v0 )?v5 )?v3 )))))):named a38 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (fun_app$ (llist_all2$ ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v1 (lCons$ ?v4 ?v5 ))(and (fun_app$d (fun_app$k ?v0 ?v4 )?v2 )(fun_app$ (llist_all2$ ?v0 ?v5 )?v3 )))))):named a39 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (fun_app$f (fun_app$g ?v0 ?v1 )?v2 )(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v3 )?v4 ))(fun_app$b (fun_app$c (llist_all2$a ?v0 )(lCons$ ?v1 ?v3 ))(lCons$ ?v2 ?v4 )))):named a40 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B$ )(?v2 A$ )(?v3 B_llist$ )(?v4 A_llist$ ))(=> (and (fun_app$f (fun_app$j ?v0 ?v1 )?v2 )(fun_app$b (llist_all2$c ?v0 ?v3 )?v4 ))(fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v3 ))(lCons$ ?v2 ?v4 )))):named a41 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B$ )(?v3 B_llist$ )(?v4 B_llist$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(fun_app$ (fun_app$a (llist_all2$b ?v0 )?v3 )?v4 ))(fun_app$ (fun_app$a (llist_all2$b ?v0 )(lCons$a ?v1 ?v3 ))(lCons$a ?v2 ?v4 )))):named a42 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ )(?v3 A_llist$ )(?v4 B_llist$ ))(=> (and (fun_app$d (fun_app$k ?v0 ?v1 )?v2 )(fun_app$ (llist_all2$ ?v0 ?v3 )?v4 ))(fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v3 ))(lCons$a ?v2 ?v4 )))):named a43 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (llength$ (ltakeWhile$ ?v0 ?v1 ))(llength$ ?v1 ))(= (ltakeWhile$ ?v0 ?v1 )?v1 ))):named a44 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(= (= (llength$a (ltakeWhile$a ?v0 ?v1 ))(llength$a ?v1 ))(= (ltakeWhile$a ?v0 ?v1 )?v1 ))):named a45 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (lset$ ?v1 ))(and (member$ ?v5 (lset$ ?v2 ))(fun_app$f (fun_app$g ?v0 ?v4 )?v5 )))(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$a ?v3 )?v1 )?v2 ))):named a46 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (fun_app$b (llist_all2$c ?v0 ?v1 )?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (and (member$a ?v4 (lset$a ?v1 ))(and (member$ ?v5 (lset$ ?v2 ))(fun_app$f (fun_app$j ?v0 ?v4 )?v5 )))(fun_app$f (fun_app$j ?v3 ?v4 )?v5 ))))(fun_app$b (llist_all2$c ?v3 ?v1 )?v2 ))):named a47 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$a ?v4 (lset$a ?v1 ))(and (member$a ?v5 (lset$a ?v2 ))(fun_app$d (fun_app$e ?v0 ?v4 )?v5 )))(fun_app$d (fun_app$e ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$b ?v3 )?v1 )?v2 ))):named a48 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (and (member$ ?v4 (lset$ ?v1 ))(and (member$a ?v5 (lset$a ?v2 ))(fun_app$d (fun_app$k ?v0 ?v4 )?v5 )))(fun_app$d (fun_app$k ?v3 ?v4 )?v5 ))))(fun_app$ (llist_all2$ ?v3 ?v1 )?v2 ))):named a49 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a50 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a51 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a52 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a53 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a54 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a55 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lprefix$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(lprefix$ ?v1 ?v3 ))):pattern ((lprefix$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a56 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (lprefix$a (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(lprefix$a ?v1 ?v3 ))):pattern ((lprefix$a (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))))):named a57 ))
(check-sat )
;(get-unsat-core )
