;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun zero$ ()Enat$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (= (fun_app$ (llcp$ xs$ )ys$ )(fun_app$ (llcp$ ys$ )xs$ ))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )lNil$ )zero$ ):pattern ((llcp$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (llcp$ lNil$ )?v0 )zero$ ):pattern ((fun_app$ (llcp$ lNil$ )?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (llcp$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(ite (= ?v0 ?v2 )(eSuc$ (fun_app$ (llcp$ ?v1 )?v3 ))zero$ )):pattern ((fun_app$ (llcp$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$ (llcp$ ?v0 )?v1 )zero$ )(or (lnull$ ?v0 )(or (lnull$ ?v1 )(not (= (lhd$ ?v0 )(lhd$ ?v1 ))))))):named a4 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$a (lstrict_prefix$ ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$a (lstrict_prefix$ ?v1 )?v3 ))):pattern ((fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a7 ))
(assert (! (= (fun_app$a (lstrict_prefix$ lNil$ )lNil$ )false ):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (lstrict_prefix$ lNil$ )(lCons$ ?v0 ?v1 ))true ):pattern ((lCons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1 ))lNil$ )false ):pattern ((lCons$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (lnull$ ?v0 ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lnull$ ?v0 )(= ?v0 lNil$ )):pattern ((lnull$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lhd$ (lCons$ ?v0 ?v1 ))?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(=> (and (=> (or (= ?v0 zero$ )(lnull$ ?v1 ))false )(=> (and (not (= ?v0 zero$ ))(not (lnull$ ?v1 )))false ))false )):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$b ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$b ?v1 (lhd$ ?v0 )))false ))false )):named a17 ))
(check-sat )
;(get-unsat-core )
