;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun xs$ ()A_list$ )
(declare-fun nth$ (A_list$ )Nat_a_fun$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun drop$ (Nat$ A_list$ )A_list$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun list_update$ (A_list$ Nat$ A$ )A_list$ )
(assert (! (not (= (lnth$ (llist_of$ xs$ ))(nth$ xs$ ))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a2 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat$ ))(= (list_update$ ?v0 ?v1 (fun_app$ (nth$ ?v0 )?v1 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_list$ )(?v3 A$ ))(=> (not (= ?v0 ?v1 ))(= (fun_app$ (nth$ (list_update$ ?v2 ?v0 ?v3 ))?v1 )(fun_app$ (nth$ ?v2 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (ldropn$ ?v0 (llist_of$ ?v1 ))(llist_of$ (drop$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_list$ ))(= (lhd$ (llist_of$ ?v0 ))(hd$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_list$ ))(= (lnull$ (llist_of$ ?v0 ))(= ?v0 nil$ ))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))(suc$ ?v2 ))(fun_app$ (lnth$ ?v1 )?v2 )):pattern ((fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))(suc$ ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A_list$ ))(= (ltl$ (llist_of$ ?v0 ))(llist_of$ (tl$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_list$ ))(= (lset$ (llist_of$ ?v0 ))(set$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat$ )(?v2 A$ )(?v3 A$ ))(= (list_update$ (list_update$ ?v0 ?v1 ?v2 )?v1 ?v3 )(list_update$ ?v0 ?v1 ?v3 ))):named a15 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (drop$ zero$ ?v0 )?v0 ):pattern ((drop$ zero$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat$ )(?v2 A$ ))(= (= (list_update$ ?v0 ?v1 ?v2 )nil$ )(= ?v0 nil$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
