;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_list_a_list_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort B_a_fun_b_list_a_list_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-datatypes ()((B_list$ (nil$ )(cons$ (hd$ B$ )(tl$ B_list$ )))(A_list$ (nil$a )(cons$a (hd$a A$ )(tl$a A_list$ )))))
(declare-fun f$ ()B_a_fun$ )
(declare-fun xs$ ()B_list$ )
(declare-fun map$ ()B_a_fun_b_list_a_list_fun_fun$ )
(declare-fun lmap$ (B_a_fun$ )B_llist_a_llist_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lmap$a (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmap$b (A_b_fun$ )A_llist_b_llist_fun$ )
(declare-fun lmap$c (B_b_fun$ )B_llist_b_llist_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (B_llist$ )B_set$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun lappend$ (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun fun_app$a (B_list_a_list_fun$ B_list$ )A_list$ )
(declare-fun fun_app$b (B_a_fun_b_list_a_list_fun_fun$ B_a_fun$ )B_list_a_list_fun$ )
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$d (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun fun_app$e (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$f (A_b_fun$ A$ )B$ )
(declare-fun fun_app$g (A_a_fun$ A$ )A$ )
(declare-fun fun_app$h (B_b_fun$ B$ )B$ )
(declare-fun fun_app$i (B_a_fun$ B$ )A$ )
(declare-fun lappend$a (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun llist_of$ (B_list$ )B_llist$ )
(declare-fun llist_of$a (A_list$ )A_llist$ )
(declare-fun map_tailrec$ ()B_a_fun_b_list_a_list_fun_fun$ )
(assert (! (not (= (fun_app$ (lmap$ f$ )(llist_of$ xs$ ))(llist_of$a (fun_app$a (fun_app$b map$ f$ )xs$ )))):named a0 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$c (lmap$a ?v0 )?v1 ))(lfinite$ ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$d (lmap$b ?v0 )?v1 ))(lfinite$ ?v1 ))):named a2 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$a (fun_app$e (lmap$c ?v0 )?v1 ))(lfinite$a ?v1 ))):named a3 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$ (fun_app$ (lmap$ ?v0 )?v1 ))(lfinite$a ?v1 ))):named a4 ))
(assert (! (= map$ map_tailrec$ ):named a5 ))
(assert (! (forall ((?v0 B_list$ ))(lfinite$a (llist_of$ ?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$a ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$c (lmap$a ?v0 )?v1 ))(lnull$ ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$a (fun_app$d (lmap$b ?v0 )?v1 ))(lnull$ ?v1 ))):named a9 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$a (fun_app$e (lmap$c ?v0 )?v1 ))(lnull$a ?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$ (fun_app$ (lmap$ ?v0 )?v1 ))(lnull$a ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$c (lmap$a ?v0 )?v1 ))(fun_app$c (lmap$a ?v0 )(ltl$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$a (fun_app$d (lmap$b ?v0 )?v1 ))(fun_app$d (lmap$b ?v0 )(ltl$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$a (fun_app$e (lmap$c ?v0 )?v1 ))(fun_app$e (lmap$c ?v0 )(ltl$a ?v1 )))):named a14 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$ (fun_app$ (lmap$ ?v0 )?v1 ))(fun_app$ (lmap$ ?v0 )(ltl$a ?v1 )))):named a15 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$e (lmap$c ?v0 )(fun_app$e (lappend$ ?v1 )?v2 ))(fun_app$e (lappend$ (fun_app$e (lmap$c ?v0 )?v1 ))(fun_app$e (lmap$c ?v0 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$d (lmap$b ?v0 )(fun_app$c (lappend$a ?v1 )?v2 ))(fun_app$e (lappend$ (fun_app$d (lmap$b ?v0 )?v1 ))(fun_app$d (lmap$b ?v0 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$c (lmap$a ?v0 )(fun_app$c (lappend$a ?v1 )?v2 ))(fun_app$c (lappend$a (fun_app$c (lmap$a ?v0 )?v1 ))(fun_app$c (lmap$a ?v0 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$ (lmap$ ?v0 )(fun_app$e (lappend$ ?v1 )?v2 ))(fun_app$c (lappend$a (fun_app$ (lmap$ ?v0 )?v1 ))(fun_app$ (lmap$ ?v0 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (fun_app$c (lmap$a ?v0 )?v1 )lNil$ )(= ?v1 lNil$ ))):named a20 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= (fun_app$d (lmap$b ?v0 )?v1 )lNil$a )(= ?v1 lNil$ ))):named a21 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= (fun_app$e (lmap$c ?v0 )?v1 )lNil$a )(= ?v1 lNil$a ))):named a22 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= (fun_app$ (lmap$ ?v0 )?v1 )lNil$ )(= ?v1 lNil$a ))):named a23 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$c (lmap$a ?v0 )?v1 ))(= ?v1 lNil$ ))):named a24 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= lNil$a (fun_app$d (lmap$b ?v0 )?v1 ))(= ?v1 lNil$ ))):named a25 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= lNil$a (fun_app$e (lmap$c ?v0 )?v1 ))(= ?v1 lNil$a ))):named a26 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= lNil$ (fun_app$ (lmap$ ?v0 )?v1 ))(= ?v1 lNil$a ))):named a27 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$c (lmap$a ?v0 )lNil$ )lNil$ ):pattern ((lmap$a ?v0 )))):named a28 ))
(assert (! (forall ((?v0 A_b_fun$ ))(! (= (fun_app$d (lmap$b ?v0 )lNil$ )lNil$a ):pattern ((lmap$b ?v0 )))):named a29 ))
(assert (! (forall ((?v0 B_b_fun$ ))(! (= (fun_app$e (lmap$c ?v0 )lNil$a )lNil$a ):pattern ((lmap$c ?v0 )))):named a30 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (fun_app$ (lmap$ ?v0 )lNil$a )lNil$ ):pattern ((lmap$ ?v0 )))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$d (lmap$b ?v2 )?v0 )(fun_app$d (lmap$b ?v3 )?v1 )))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$g ?v2 ?v4 )(fun_app$g ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$c (lmap$a ?v2 )?v0 )(fun_app$c (lmap$a ?v3 )?v1 )))(= ?v0 ?v1 ))):named a33 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$h ?v2 ?v4 )(fun_app$h ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$e (lmap$c ?v2 )?v0 )(fun_app$e (lmap$c ?v3 )?v1 )))(= ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$i ?v2 ?v4 )(fun_app$i ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$ (lmap$ ?v2 )?v0 )(fun_app$ (lmap$ ?v3 )?v1 )))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$f ?v1 ?v3 )(fun_app$f ?v2 ?v3 ))))(= (fun_app$d (lmap$b ?v1 )?v0 )(fun_app$d (lmap$b ?v2 )?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$g ?v1 ?v3 )(fun_app$g ?v2 ?v3 ))))(= (fun_app$c (lmap$a ?v1 )?v0 )(fun_app$c (lmap$a ?v2 )?v0 )))):named a37 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$a ?v3 (lset$a ?v0 ))(= (fun_app$h ?v1 ?v3 )(fun_app$h ?v2 ?v3 ))))(= (fun_app$e (lmap$c ?v1 )?v0 )(fun_app$e (lmap$c ?v2 )?v0 )))):named a38 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$a ?v3 (lset$a ?v0 ))(= (fun_app$i ?v1 ?v3 )(fun_app$i ?v2 ?v3 ))))(= (fun_app$ (lmap$ ?v1 )?v0 )(fun_app$ (lmap$ ?v2 )?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v4 )))))(= (fun_app$d (lmap$b ?v2 )?v0 )(fun_app$d (lmap$b ?v3 )?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$g ?v2 ?v4 )(fun_app$g ?v3 ?v4 )))))(= (fun_app$c (lmap$a ?v2 )?v0 )(fun_app$c (lmap$a ?v3 )?v1 )))):named a41 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 B$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$h ?v2 ?v4 )(fun_app$h ?v3 ?v4 )))))(= (fun_app$e (lmap$c ?v2 )?v0 )(fun_app$e (lmap$c ?v3 )?v1 )))):named a42 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 B$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$i ?v2 ?v4 )(fun_app$i ?v3 ?v4 )))))(= (fun_app$ (lmap$ ?v2 )?v0 )(fun_app$ (lmap$ ?v3 )?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$c (lappend$a ?v0 )?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a44 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$a (fun_app$e (lappend$ ?v0 )?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a45 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$c (lappend$a ?v0 )?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a46 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$a (fun_app$e (lappend$ ?v0 )?v1 ))(and (lnull$a ?v0 )(lnull$a ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (lappend$a ?v0 )lNil$ )?v0 ):pattern ((lappend$a ?v0 )))):named a48 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$e (lappend$ ?v0 )lNil$a )?v0 ):pattern ((lappend$ ?v0 )))):named a49 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (lappend$a lNil$ )?v0 )?v0 ):pattern ((fun_app$c (lappend$a lNil$ )?v0 )))):named a50 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$e (lappend$ lNil$a )?v0 )?v0 ):pattern ((fun_app$e (lappend$ lNil$a )?v0 )))):named a51 ))
(assert (! (= (lfinite$ lNil$ )true ):named a52 ))
(assert (! (= (lfinite$a lNil$a )true ):named a53 ))
(check-sat )
;(get-unsat-core )
