;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort Bool_a_b_prod_fun$ 0 )
(declare-sort A_b_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun f$ ()A_a_fun$ )
(declare-fun g$ ()B_b_fun$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()B$ )
(declare-fun uu$ ()A_b_a_b_prod_fun_fun$ )
(declare-fun uua$ (A_b_bool_fun_fun$ A_b_a_b_prod_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun uub$ (A_b_a_b_prod_fun_fun$ A_b_a_b_prod_fun_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun uuc$ ()A_b_a_b_prod_fun_fun$ )
(declare-fun uud$ (A_b_prod_bool_fun$ )A_b_bool_fun_fun$ )
(declare-fun uue$ (A_b_prod_a_b_prod_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun uuf$ (A_b_prod_bool_fun$ A_b_a_b_prod_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun uug$ (Bool_a_b_prod_fun$ A_b_bool_fun_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun uuh$ (Bool_bool_fun$ A_b_bool_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun uui$ (A_b_prod_a_b_prod_fun$ A_b_a_b_prod_fun_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun fun_app$ (B_a_b_prod_fun$ B$ )A_b_prod$ )
(declare-fun fun_app$a (A_b_a_b_prod_fun_fun$ A$ )B_a_b_prod_fun$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun fun_app$d (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$e (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$f (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$g (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$h (Bool_a_b_prod_fun$ Bool )A_b_prod$ )
(declare-fun fun_app$i (Bool_bool_fun$ Bool )Bool )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun case_prod$ (A_b_a_b_prod_fun_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun iterates$a (B_b_fun$ B$ )B_llist$ )
(declare-fun iterates$b (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_llist$ )
(declare-fun case_prod$a (A_b_bool_fun_fun$ )A_b_prod_bool_fun$ )
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(pair$ (fun_app$b f$ ?v0 )(fun_app$c g$ ?v1 ))):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$ (fun_app$a uuc$ ?v0 )?v1 )(pair$ ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uuc$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$ (fun_app$a (uue$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uue$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$e (fun_app$f (uud$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$f (uud$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$ (fun_app$a (uub$ ?v0 ?v1 )?v2 )?v3 )(fun_app$d (case_prod$ ?v0 )(fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uub$ ?v0 ?v1 )?v2 )?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$e (fun_app$f (uua$ ?v0 ?v1 )?v2 )?v3 )(fun_app$g (case_prod$a ?v0 )(fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$e (fun_app$f (uua$ ?v0 ?v1 )?v2 )?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$ (fun_app$a (uui$ ?v0 ?v1 )?v2 )?v3 )(fun_app$d ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uui$ ?v0 ?v1 )?v2 )?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$e (fun_app$f (uuf$ ?v0 ?v1 )?v2 )?v3 )(fun_app$g ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$e (fun_app$f (uuf$ ?v0 ?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 Bool_a_b_prod_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$ (fun_app$a (uug$ ?v0 ?v1 )?v2 )?v3 )(fun_app$h ?v0 (fun_app$e (fun_app$f ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uug$ ?v0 ?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$e (fun_app$f (uuh$ ?v0 ?v1 )?v2 )?v3 )(fun_app$i ?v0 (fun_app$e (fun_app$f ?v1 ?v2 )?v3 ))):pattern ((fun_app$e (fun_app$f (uuh$ ?v0 ?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (not (= (lzip$ (iterates$ f$ x$ )(iterates$a g$ y$ ))(iterates$b (case_prod$ uu$ )(pair$ x$ y$ )))):named a10 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$g (case_prod$a ?v0 )(fun_app$d (case_prod$ ?v1 )?v2 ))(fun_app$g (case_prod$a (uua$ ?v0 ?v1 ))?v2 ))):named a11 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$d (case_prod$ ?v0 )(fun_app$d (case_prod$ ?v1 )?v2 ))(fun_app$d (case_prod$ (uub$ ?v0 ?v1 ))?v2 ))):named a12 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$d (case_prod$ uuc$ )?v0 )?v0 ):pattern ((fun_app$d (case_prod$ uuc$ )?v0 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ ))(= (case_prod$a (uud$ ?v0 ))?v0 )):named a16 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ ))(= (case_prod$ (uue$ ?v0 ))?v0 )):named a17 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_prod_bool_fun$ ))(=> (forall ((?v2 A$ )(?v3 B$ ))(= (fun_app$e (fun_app$f ?v0 ?v2 )?v3 )(fun_app$g ?v1 (pair$ ?v2 ?v3 ))))(= (case_prod$a ?v0 )?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A_b_prod_a_b_prod_fun$ ))(=> (forall ((?v2 A$ )(?v3 B$ ))(= (fun_app$ (fun_app$a ?v0 ?v2 )?v3 )(fun_app$d ?v1 (pair$ ?v2 ?v3 ))))(= (case_prod$ ?v0 )?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$g (case_prod$a ?v0 )(pair$ ?v1 ?v2 ))(fun_app$e (fun_app$f ?v0 ?v1 )?v2 )):pattern ((fun_app$g (case_prod$a ?v0 )(pair$ ?v1 ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$d (case_prod$ ?v0 )(pair$ ?v1 ?v2 ))(fun_app$ (fun_app$a ?v0 ?v1 )?v2 )):pattern ((fun_app$d (case_prod$ ?v0 )(pair$ ?v1 ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$g (case_prod$a ?v0 )(pair$ ?v1 ?v2 ))(fun_app$e (fun_app$f ?v0 ?v1 )?v2 )):pattern ((fun_app$g (case_prod$a ?v0 )(pair$ ?v1 ?v2 ))))):named a22 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$d (case_prod$ ?v0 )(pair$ ?v1 ?v2 ))(fun_app$ (fun_app$a ?v0 ?v1 )?v2 )):pattern ((fun_app$d (case_prod$ ?v0 )(pair$ ?v1 ?v2 ))))):named a23 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_bool_fun_fun$ )(?v3 A_b_prod$ ))(=> (and (forall ((?v4 A$ )(?v5 B$ ))(=> (= (pair$ ?v4 ?v5 )?v0 )(= (fun_app$e (fun_app$f ?v1 ?v4 )?v5 )(fun_app$e (fun_app$f ?v2 ?v4 )?v5 ))))(= ?v3 ?v0 ))(= (fun_app$g (case_prod$a ?v1 )?v3 )(fun_app$g (case_prod$a ?v2 )?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_a_b_prod_fun_fun$ )(?v3 A_b_prod$ ))(=> (and (forall ((?v4 A$ )(?v5 B$ ))(=> (= (pair$ ?v4 ?v5 )?v0 )(= (fun_app$ (fun_app$a ?v1 ?v4 )?v5 )(fun_app$ (fun_app$a ?v2 ?v4 )?v5 ))))(= ?v3 ?v0 ))(= (fun_app$d (case_prod$ ?v1 )?v3 )(fun_app$d (case_prod$ ?v2 )?v0 )))):named a25 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_prod$ ))(=> (and (fun_app$i ?v0 (fun_app$g (case_prod$a ?v1 )?v2 ))(forall ((?v3 A$ )(?v4 B$ ))(=> (and (= ?v2 (pair$ ?v3 ?v4 ))(fun_app$i ?v0 (fun_app$e (fun_app$f ?v1 ?v3 )?v4 )))false )))false )):named a26 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(=> (and (fun_app$g ?v0 (fun_app$d (case_prod$ ?v1 )?v2 ))(forall ((?v3 A$ )(?v4 B$ ))(=> (and (= ?v2 (pair$ ?v3 ?v4 ))(fun_app$g ?v0 (fun_app$ (fun_app$a ?v1 ?v3 )?v4 )))false )))false )):named a27 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$g ?v0 (fun_app$d (case_prod$ ?v1 )?v2 ))(fun_app$g (case_prod$a (uuf$ ?v0 ?v1 ))?v2 ))):named a28 ))
(assert (! (forall ((?v0 Bool_a_b_prod_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$h ?v0 (fun_app$g (case_prod$a ?v1 )?v2 ))(fun_app$d (case_prod$ (uug$ ?v0 ?v1 ))?v2 ))):named a29 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$i ?v0 (fun_app$g (case_prod$a ?v1 )?v2 ))(fun_app$g (case_prod$a (uuh$ ?v0 ?v1 ))?v2 ))):named a30 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$d ?v0 (fun_app$d (case_prod$ ?v1 )?v2 ))(fun_app$d (case_prod$ (uui$ ?v0 ?v1 ))?v2 ))):named a31 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ ))(=> (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )(fun_app$g (case_prod$a ?v0 )(pair$ ?v1 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ ))(=> (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )(fun_app$g (case_prod$a ?v0 )(pair$ ?v1 ?v2 )))):named a33 ))
(check-sat )
;(get-unsat-core )
