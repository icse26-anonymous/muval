;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Nat_nat_enat_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun na$ ()Nat$ )
(declare-fun uu$ ()Nat_enat_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun one$ ()Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ (A_llist_llist$ )Nat_enat_fun$ )
(declare-fun uub$ ()Nat_enat_fun$ )
(declare-fun uuc$ (Nat_nat_enat_fun_fun$ Nat_set$ )Nat_enat_fun$ )
(declare-fun uud$ (Nat_nat_enat_fun_fun$ Nat$ )Nat_enat_fun$ )
(declare-fun uue$ (Nat_nat_enat_fun_fun$ Nat_set$ )Nat_enat_fun$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun ltake$ (Enat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun ltake$a (Enat$ A_llist$ )A_llist$ )
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$ )Enat$ )
(declare-fun fun_app$ (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_nat_enat_fun_fun$ Nat$ )Nat_enat_fun$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun atLeastLessThan$ (Nat$ Nat$ )Nat_set$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(llength$ (lnth$ xssa$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uub$ ?v0 )(llength$ (lnth$ xss$ ?v0 ))):pattern ((fun_app$ uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(llength$ (lnth$ ?v0 ?v1 ))):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(! (= (fun_app$ (uud$ ?v0 ?v1 )?v2 )(fun_app$ (fun_app$a ?v0 ?v2 )?v1 )):pattern ((fun_app$ (uud$ ?v0 ?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat$ ))(! (= (fun_app$ (uue$ ?v0 ?v1 )?v2 )(setsum$ (uud$ ?v0 ?v2 )?v1 )):pattern ((fun_app$ (uue$ ?v0 ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat$ ))(! (= (fun_app$ (uuc$ ?v0 ?v1 )?v2 )(setsum$ (fun_app$a ?v0 ?v2 )?v1 )):pattern ((fun_app$ (uuc$ ?v0 ?v1 )?v2 )))):named a5 ))
(assert (! (not (= (lconcat$ (ltake$ (enat$ (suc$ na$ ))xssa$ ))(ltake$a (setsum$ uu$ (lessThan$ (suc$ na$ )))(lconcat$ xssa$ )))):named a6 ))
(assert (! (= xssa$ (lCons$a xs$ xss$ )):named a7 ))
(assert (! (= (lconcat$ (ltake$ (enat$ (suc$ na$ ))xssa$ ))(ltake$a (setsum$ uu$ (lessThan$ (suc$ na$ )))(lappend$ xs$ (lconcat$ xss$ )))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (lconcat$ (ltake$ (enat$ na$ )?v0 ))(ltake$a (setsum$ (uua$ ?v0 )(lessThan$ na$ ))(lconcat$ ?v0 )))):named a9 ))
(assert (! (= (lconcat$ (ltake$ (enat$ na$ )xss$ ))(ltake$a (setsum$ uub$ (lessThan$ na$ ))(lconcat$ xss$ ))):named a10 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$a (enat$ ?v2 )?v0 )(ltake$a (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a12 ))
(assert (! (= (lconcat$ (ltake$ (enat$ (suc$ na$ ))xssa$ ))(lappend$ xs$ (lconcat$ (ltake$ (enat$ na$ )xss$ )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 Nat$ ))(! (= (lnth$ (lCons$a ?v0 ?v1 )(suc$ ?v2 ))(lnth$ ?v1 ?v2 )):pattern ((lnth$ (lCons$a ?v0 ?v1 )(suc$ ?v2 ))))):named a14 ))
(assert (! (= (lappend$ xs$ (ltake$a (setsum$ uub$ (lessThan$ na$ ))(lconcat$ xss$ )))(ltake$a (plus$ (llength$ xs$ )(setsum$ uub$ (lessThan$ na$ )))(lappend$ xs$ (lconcat$ xss$ )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (lessThan$ ?v0 )(lessThan$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (= (setsum$ uub$ (lessThan$ na$ ))(setsum$ uu$ (atLeastLessThan$ one$ (suc$ na$ )))):named a20 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(= (setsum$ (uuc$ ?v0 ?v1 )?v2 )(setsum$ (uue$ ?v0 ?v2 )?v1 ))):named a21 ))
(assert (! (= (plus$ (llength$ xs$ )(setsum$ uu$ (atLeastLessThan$ one$ (suc$ na$ ))))(setsum$ uu$ (lessThan$ (suc$ na$ )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lconcat$ (lCons$a ?v0 ?v1 ))(lappend$ ?v0 (lconcat$ ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a23 ))
(check-sat )
;(get-unsat-core )
