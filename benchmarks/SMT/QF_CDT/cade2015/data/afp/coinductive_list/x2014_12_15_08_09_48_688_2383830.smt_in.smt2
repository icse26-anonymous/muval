;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun a$ ()A_llist_set$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()A_llist_a_llist_fun$ )
(declare-fun bot$ ()A_llist_set$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun image$ (A_llist_a_llist_fun$ A_llist_set$ )A_llist_set$ )
(declare-fun insert$ (A_llist$ A_llist_set$ )A_llist_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun pred_llist$ (A_bool_fun$ )A_llist_bool_fun$ )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uu$ ?v0 )(lCons$ x$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (lSup$ (image$ uu$ a$ ))(lCons$ x$ (lSup$ a$ )))):named a1 ))
(assert (! (not (= a$ bot$ )):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_set$ ))(= (= (image$ ?v0 ?v1 )bot$ )(= ?v1 bot$ ))):named a4 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_set$ ))(= (= bot$ (image$ ?v0 ?v1 ))(= ?v1 bot$ ))):named a5 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ ))(= (image$ ?v0 bot$ )bot$ )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ )(?v3 A_llist_set$ ))(=> (and (= ?v0 (fun_app$ ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$ ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 A_llist$ ))(not (fun_app$a ?v0 ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (forall ((?v1 A_llist$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$ ))):named a9 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 A_llist$ ))(not (fun_app$a ?v0 ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(= (member$ ?v0 bot$ )false )):named a11 ))
(assert (! (= (lSup$ bot$ )lNil$ ):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$a (pred_llist$ ?v0 )?v2 ))):pattern ((fun_app$a (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lSup$ (insert$ ?v0 bot$ ))?v0 )):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ ))(member$ ?v0 (insert$ ?v0 bot$ ))):named a18 ))
(check-sat )
;(get-unsat-core )
