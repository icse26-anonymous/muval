;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort Enat_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort Enat_a_llist_fun_enat_a_llist_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun n$ ()Enat$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()Enat_a_llist_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun fun_app$ (Enat_a_llist_fun$ Enat$ )A_llist$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (Enat_a_llist_fun_enat_a_llist_fun_fun$ Enat_a_llist_fun$ )Enat_a_llist_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$f (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun case_enat$ (A_llist$ )Enat_a_llist_fun_enat_a_llist_fun_fun$ )
(declare-fun pred_llist$ (A_bool_fun$ )A_llist_bool_fun$ )
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uu$ ?v0 )(ldrop$ ?v0 xs$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (ldrop$ n$ (lCons$ x$ xs$ ))(fun_app$ (fun_app$a (case_enat$ (lCons$ x$ xs$ ))uu$ )n$ ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$c ?v0 ?v1 )(fun_app$b (pred_llist$ ?v0 )?v2 ))):pattern ((fun_app$b (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$b (lmember$ ?v0 )?v2 ))):pattern ((fun_app$b (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (iterates$ ?v0 ?v1 )(lCons$ ?v1 (iterates$ ?v0 (fun_app$d ?v0 ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A$ )(?v2 A_llist$ ))(= (ldrop$ (eSuc$ ?v0 )(lCons$ ?v1 ?v2 ))(ldrop$ ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(= (fun_app$c (lsetp$ ?v0 )?v1 )(or (exists ((?v2 A$ )(?v3 A_llist$ ))(and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$c (lsetp$ ?v2 )?v3 ))))))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (fun_app$c (lsetp$ ?v0 )?v1 )(and (forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(=> (and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$c (lsetp$ ?v2 )?v3 )))false ))))false )):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$c (lsetp$ ?v0 )?v1 )(fun_app$c (lsetp$ (lCons$ ?v2 ?v0 ))?v1 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(fun_app$c (lsetp$ (lCons$ ?v0 ?v1 ))?v0 )):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A$ ))(=> (fun_app$b (fun_app$e (llexord$ ?v0 )?v1 )?v2 )(fun_app$b (fun_app$e (llexord$ ?v0 )(lCons$ ?v3 ?v1 ))(lCons$ ?v3 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$c (fun_app$f ?v0 ?v1 )?v2 )(fun_app$b (fun_app$e (llexord$ ?v0 )(lCons$ ?v1 ?v3 ))(lCons$ ?v2 ?v4 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldrop$ zero$ ?v0 )?v0 )):named a13 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 Enat_a_llist_fun$ )(?v3 Enat$ ))(= (fun_app$b ?v0 (fun_app$ (fun_app$a (case_enat$ ?v1 )?v2 )?v3 ))(not (or (and (= ?v3 zero$ )(not (fun_app$b ?v0 ?v1 )))(exists ((?v4 Enat$ ))(and (= ?v3 (eSuc$ ?v4 ))(not (fun_app$b ?v0 (fun_app$ ?v2 ?v4 ))))))))):named a14 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 Enat_a_llist_fun$ )(?v3 Enat$ ))(= (fun_app$b ?v0 (fun_app$ (fun_app$a (case_enat$ ?v1 )?v2 )?v3 ))(and (=> (= ?v3 zero$ )(fun_app$b ?v0 ?v1 ))(forall ((?v4 Enat$ ))(=> (= ?v3 (eSuc$ ?v4 ))(fun_app$b ?v0 (fun_app$ ?v2 ?v4 ))))))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (eSuc$ ?v0 )(eSuc$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(check-sat )
;(get-unsat-core )
