;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun a$ ()A$ )
(declare-fun m$ ()Nat$ )
(declare-fun p$ ()A_bool_fun$ )
(declare-fun ma$ ()Nat$ )
(declare-fun mb$ ()Nat$ )
(declare-fun na$ ()Nat$ )
(declare-fun nb$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun ldistinct$ (A_llist$ )Bool )
(assert (! (not (= m$ nb$ )):named a0 ))
(assert (! (= (lnth$ xs$ nb$ )a$ ):named a1 ))
(assert (! (= (lnth$ xs$ m$ )a$ ):named a2 ))
(assert (! (less$ (enat$ nb$ )(llength$ xs$ )):named a3 ))
(assert (! (less_eq$ nb$ m$ ):named a4 ))
(assert (! (less$ (enat$ m$ )(llength$ xs$ )):named a5 ))
(assert (! (less_eq$ na$ ma$ ):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a7 ))
(assert (! (less_eq$ (suc$ nb$ )mb$ ):named a8 ))
(assert (! (= (lnth$ xsa$ (suc$ nb$ ))a$ ):named a9 ))
(assert (! (= mb$ (suc$ m$ )):named a10 ))
(assert (! (less$ (enat$ (suc$ nb$ ))(llength$ xsa$ )):named a11 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$ (fun_app$a ?v0 ?v3 )?v4 )))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$ (fun_app$a ?v0 ?v2 )?v1 )))(fun_app$ (fun_app$a ?v0 ?v2 )?v1 ))):named a12 ))
(assert (! (= (lnth$ xs$a ma$ )a$ ):named a13 ))
(assert (! (= (lnth$ xs$a na$ )a$ ):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (lfilter$ ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(=> (and (less_eq$ nb$ ?v0 )(and (ldistinct$ (lfilter$ p$ ?v1 ))(and (less$ (enat$ nb$ )(llength$ ?v1 ))(and (less$ (enat$ ?v0 )(llength$ ?v1 ))(and (fun_app$b p$ a$ )(and (= (lnth$ ?v1 nb$ )a$ )(= (lnth$ ?v1 ?v0 )a$ )))))))(= ?v0 nb$ ))):named a16 ))
(check-sat )
;(get-unsat-core )
