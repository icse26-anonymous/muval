;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))(A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-fun lNil$b ()A_b_prod_llist$)
(declare-fun lhd$b (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$b (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$b (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-datatypes ()((B_b_prod$ (pair$a (fst$a B$ )(snd$a B$ )))))
(declare-sort B_b_prod_llist$ 0)
(declare-fun lNil$c ()B_b_prod_llist$)
(declare-fun lhd$c (B_b_prod_llist$)B_b_prod$)
(declare-fun ltl$c (B_b_prod_llist$)B_b_prod_llist$)
(declare-fun lCons$c (B_b_prod$ B_b_prod_llist$ )B_b_prod_llist$)
(declare-datatypes ()((B_a_prod$ (pair$b (fst$b B$ )(snd$b A$ )))))
(declare-sort B_a_prod_llist$ 0)
(declare-fun lNil$d ()B_a_prod_llist$)
(declare-fun lhd$d (B_a_prod_llist$)B_a_prod$)
(declare-fun ltl$d (B_a_prod_llist$)B_a_prod_llist$)
(declare-fun lCons$d (B_a_prod$ B_a_prod_llist$ )B_a_prod_llist$)
(declare-datatypes ()((A_a_prod$ (pair$c (fst$c A$ )(snd$c A$ )))))
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$e ()A_a_prod_llist$)
(declare-fun lhd$e (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$e (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$e (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((B_a_b_prod_prod$ (pair$d (fst$d B$ )(snd$d A_b_prod$ )))))
(declare-sort B_a_b_prod_prod_llist$ 0)
(declare-fun lNil$f ()B_a_b_prod_prod_llist$)
(declare-fun lhd$f (B_a_b_prod_prod_llist$)B_a_b_prod_prod$)
(declare-fun ltl$f (B_a_b_prod_prod_llist$)B_a_b_prod_prod_llist$)
(declare-fun lCons$f (B_a_b_prod_prod$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$)
(declare-datatypes ()((A_a_b_prod_prod$ (pair$e (fst$e A$ )(snd$e A_b_prod$ )))))
(declare-sort A_a_b_prod_prod_llist$ 0)
(declare-fun lNil$g ()A_a_b_prod_prod_llist$)
(declare-fun lhd$g (A_a_b_prod_prod_llist$)A_a_b_prod_prod$)
(declare-fun ltl$g (A_a_b_prod_prod_llist$)A_a_b_prod_prod_llist$)
(declare-fun lCons$g (A_a_b_prod_prod$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$)
(declare-datatypes ()((A_b_b_prod_prod$ (pair$f (fst$f A$ )(snd$f B_b_prod$ )))))
(declare-sort A_b_b_prod_prod_llist$ 0)
(declare-fun lNil$h ()A_b_b_prod_prod_llist$)
(declare-fun lhd$h (A_b_b_prod_prod_llist$)A_b_b_prod_prod$)
(declare-fun ltl$h (A_b_b_prod_prod_llist$)A_b_b_prod_prod_llist$)
(declare-fun lCons$h (A_b_b_prod_prod$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$)
(declare-datatypes ()((A_b_a_prod_prod$ (pair$g (fst$g A$ )(snd$g B_a_prod$ )))))
(declare-sort A_b_a_prod_prod_llist$ 0)
(declare-fun lNil$i ()A_b_a_prod_prod_llist$)
(declare-fun lhd$i (A_b_a_prod_prod_llist$)A_b_a_prod_prod$)
(declare-fun ltl$i (A_b_a_prod_prod_llist$)A_b_a_prod_prod_llist$)
(declare-fun lCons$i (A_b_a_prod_prod$ A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist$)
(declare-datatypes ()((A_b_prod_a_prod$ (pair$h (fst$h A_b_prod$ )(snd$h A$ )))))
(declare-sort A_b_prod_a_prod_llist$ 0)
(declare-fun lNil$j ()A_b_prod_a_prod_llist$)
(declare-fun lhd$j (A_b_prod_a_prod_llist$)A_b_prod_a_prod$)
(declare-fun ltl$j (A_b_prod_a_prod_llist$)A_b_prod_a_prod_llist$)
(declare-fun lCons$j (A_b_prod_a_prod$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$)
(declare-datatypes ()((A_b_prod_b_prod$ (pair$i (fst$i A_b_prod$ )(snd$i B$ )))))
(declare-sort A_b_prod_b_prod_llist$ 0)
(declare-fun lNil$k ()A_b_prod_b_prod_llist$)
(declare-fun lhd$k (A_b_prod_b_prod_llist$)A_b_prod_b_prod$)
(declare-fun ltl$k (A_b_prod_b_prod_llist$)A_b_prod_b_prod_llist$)
(declare-fun lCons$k (A_b_prod_b_prod$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$)
(declare-datatypes ()((A_b_prod_a_b_prod_prod$ (pair$j (fst$j A_b_prod$ )(snd$j A_b_prod$ )))))
(declare-sort A_b_prod_a_b_prod_prod_llist$ 0)
(declare-fun lNil$l ()A_b_prod_a_b_prod_prod_llist$)
(declare-fun lhd$l (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod$)
(declare-fun ltl$l (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod_llist$)
(declare-fun lCons$l (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$)
(declare-datatypes ()((B_b_prod_a_prod$ (pair$k (fst$k B_b_prod$ )(snd$k A$ )))))
(declare-sort B_b_prod_a_prod_llist$ 0)
(declare-fun lNil$m ()B_b_prod_a_prod_llist$)
(declare-fun lhd$m (B_b_prod_a_prod_llist$)B_b_prod_a_prod$)
(declare-fun ltl$m (B_b_prod_a_prod_llist$)B_b_prod_a_prod_llist$)
(declare-fun lCons$m (B_b_prod_a_prod$ B_b_prod_a_prod_llist$ )B_b_prod_a_prod_llist$)
(declare-fun us$ ()A_b_prod_llist$ )
(declare-fun vs$ ()A_b_prod_llist$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun lzip$a (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$b (B_llist$ A_llist$ )B_a_prod_llist$ )
(declare-fun lzip$c (B_llist$ B_llist$ )B_b_prod_llist$ )
(declare-fun lzip$d (A_llist$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lzip$e (B_llist$ A_b_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun lzip$f (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$g (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lzip$i (B_b_prod_llist$ A_llist$ )B_b_prod_a_prod_llist$ )
(declare-fun ldrop$a (Enat$ B_llist$ )B_llist$ )
(declare-fun ltake$a (Enat$ B_llist$ )B_llist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun lfinite$ (A_b_prod_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lappend$a (B_llist$ B_llist$ )B_llist$ )
(declare-fun lappend$b (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lappend$c (B_b_prod_llist$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun lappend$d (B_a_prod_llist$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun lappend$e (A_a_prod_llist$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun lappend$f (B_a_b_prod_prod_llist$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun lappend$g (A_a_b_prod_prod_llist$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lappend$h (A_b_b_prod_prod_llist$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun lappend$i (A_b_a_prod_prod_llist$ A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist$ )
(declare-fun lappend$j (A_b_prod_a_prod_llist$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lappend$k (A_b_prod_b_prod_llist$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lappend$l (A_b_prod_a_b_prod_prod_llist$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lappend$m (B_b_prod_a_prod_llist$ B_b_prod_a_prod_llist$ )B_b_prod_a_prod_llist$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun lfinite$b (B_llist$ )Bool )
(declare-fun lfinite$c (B_b_prod_llist$ )Bool )
(declare-fun lfinite$d (B_a_prod_llist$ )Bool )
(declare-fun lfinite$e (A_a_prod_llist$ )Bool )
(declare-fun lfinite$f (B_a_b_prod_prod_llist$ )Bool )
(declare-fun lfinite$g (A_a_b_prod_prod_llist$ )Bool )
(declare-fun lfinite$h (A_b_b_prod_prod_llist$ )Bool )
(declare-fun lfinite$i (A_b_a_prod_prod_llist$ )Bool )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun llength$b (A_b_prod_llist$ )Enat$ )
(declare-fun llength$c (B_b_prod_llist$ )Enat$ )
(declare-fun llength$d (B_a_prod_llist$ )Enat$ )
(declare-fun llength$e (A_a_prod_llist$ )Enat$ )
(declare-fun llength$f (B_a_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$g (A_a_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$h (A_b_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$i (A_b_a_prod_prod_llist$ )Enat$ )
(assert (! (not (exists ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 B_llist$ ))(and (= xs$ (lappend$ ?v0 ?v1 ))(and (= ys$ (lappend$a ?v2 ?v3 ))(and (= (llength$ ?v0 )(llength$a ?v2 ))(and (= us$ (lzip$ ?v0 ?v2 ))(= vs$ (lzip$ ?v1 ?v3 )))))))):named a0 ))
(assert (! (lfinite$ us$ ):named a1 ))
(assert (! (less_eq$ (llength$b us$ )(llength$ xs$ )):named a2 ))
(assert (! (less_eq$ (llength$b us$ )(llength$a ys$ )):named a3 ))
(assert (! (= xs$ (lappend$ (ltake$ (llength$b us$ )xs$ )(ldrop$ (llength$b us$ )xs$ ))):named a4 ))
(assert (! (= ys$ (lappend$a (ltake$a (llength$b us$ )ys$ )(ldrop$a (llength$b us$ )ys$ ))):named a5 ))
(assert (! (= us$ (lzip$ (ltake$ (llength$b us$ )xs$ )(ltake$a (llength$b us$ )ys$ ))):named a6 ))
(assert (! (= (llength$ (ltake$ (llength$b us$ )xs$ ))(llength$a (ltake$a (llength$b us$ )ys$ ))):named a7 ))
(assert (! (=> (lfinite$ us$ )(= vs$ (lzip$ (ldrop$ (llength$b us$ )xs$ )(ldrop$a (llength$b us$ )ys$ )))):named a8 ))
(assert (! (= (lzip$ xs$ ys$ )(lappend$b us$ vs$ )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (lappend$a (lappend$a ?v0 ?v1 )?v2 )(lappend$a ?v0 (lappend$a ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(= (lappend$b (lappend$b ?v0 ?v1 )?v2 )(lappend$b ?v0 (lappend$b ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod_llist$ )(?v2 B_b_prod_llist$ ))(= (lappend$c (lappend$c ?v0 ?v1 )?v2 )(lappend$c ?v0 (lappend$c ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod_llist$ ))(= (lappend$d (lappend$d ?v0 ?v1 )?v2 )(lappend$d ?v0 (lappend$d ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_llist$ ))(= (lappend$e (lappend$e ?v0 ?v1 )?v2 )(lappend$e ?v0 (lappend$e ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ )(?v1 B_a_b_prod_prod_llist$ )(?v2 B_a_b_prod_prod_llist$ ))(= (lappend$f (lappend$f ?v0 ?v1 )?v2 )(lappend$f ?v0 (lappend$f ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod_llist$ )(?v2 A_a_b_prod_prod_llist$ ))(= (lappend$g (lappend$g ?v0 ?v1 )?v2 )(lappend$g ?v0 (lappend$g ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ )(?v1 A_b_b_prod_prod_llist$ )(?v2 A_b_b_prod_prod_llist$ ))(= (lappend$h (lappend$h ?v0 ?v1 )?v2 )(lappend$h ?v0 (lappend$h ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ )(?v1 A_b_a_prod_prod_llist$ )(?v2 A_b_a_prod_prod_llist$ ))(= (lappend$i (lappend$i ?v0 ?v1 )?v2 )(lappend$i ?v0 (lappend$i ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (= (llength$ ?v0 )(llength$ ?v1 ))(= (lzip$a (lappend$ ?v0 ?v2 )(lappend$ ?v1 ?v3 ))(lappend$e (lzip$a ?v0 ?v1 )(lzip$a ?v2 ?v3 ))))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ ))(=> (= (llength$ ?v0 )(llength$a ?v1 ))(= (lzip$ (lappend$ ?v0 ?v2 )(lappend$a ?v1 ?v3 ))(lappend$b (lzip$ ?v0 ?v1 )(lzip$ ?v2 ?v3 ))))):named a21 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_llist$ ))(=> (= (llength$a ?v0 )(llength$ ?v1 ))(= (lzip$b (lappend$a ?v0 ?v2 )(lappend$ ?v1 ?v3 ))(lappend$d (lzip$b ?v0 ?v1 )(lzip$b ?v2 ?v3 ))))):named a22 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist$ ))(=> (= (llength$a ?v0 )(llength$a ?v1 ))(= (lzip$c (lappend$a ?v0 ?v2 )(lappend$a ?v1 ?v3 ))(lappend$c (lzip$c ?v0 ?v1 )(lzip$c ?v2 ?v3 ))))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_llist$ )(?v3 A_b_prod_llist$ ))(=> (= (llength$ ?v0 )(llength$b ?v1 ))(= (lzip$d (lappend$ ?v0 ?v2 )(lappend$b ?v1 ?v3 ))(lappend$g (lzip$d ?v0 ?v1 )(lzip$d ?v2 ?v3 ))))):named a24 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ )(?v2 B_llist$ )(?v3 A_b_prod_llist$ ))(=> (= (llength$a ?v0 )(llength$b ?v1 ))(= (lzip$e (lappend$a ?v0 ?v2 )(lappend$b ?v1 ?v3 ))(lappend$f (lzip$e ?v0 ?v1 )(lzip$e ?v2 ?v3 ))))):named a25 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ )(?v3 A_llist$ ))(=> (= (llength$b ?v0 )(llength$ ?v1 ))(= (lzip$f (lappend$b ?v0 ?v2 )(lappend$ ?v1 ?v3 ))(lappend$j (lzip$f ?v0 ?v1 )(lzip$f ?v2 ?v3 ))))):named a26 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ )(?v2 A_b_prod_llist$ )(?v3 B_llist$ ))(=> (= (llength$b ?v0 )(llength$a ?v1 ))(= (lzip$g (lappend$b ?v0 ?v2 )(lappend$a ?v1 ?v3 ))(lappend$k (lzip$g ?v0 ?v1 )(lzip$g ?v2 ?v3 ))))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ )(?v3 A_b_prod_llist$ ))(=> (= (llength$b ?v0 )(llength$b ?v1 ))(= (lzip$h (lappend$b ?v0 ?v2 )(lappend$b ?v1 ?v3 ))(lappend$l (lzip$h ?v0 ?v1 )(lzip$h ?v2 ?v3 ))))):named a28 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 A_llist$ )(?v2 B_b_prod_llist$ )(?v3 A_llist$ ))(=> (= (llength$c ?v0 )(llength$ ?v1 ))(= (lzip$i (lappend$c ?v0 ?v2 )(lappend$ ?v1 ?v3 ))(lappend$m (lzip$i ?v0 ?v1 )(lzip$i ?v2 ?v3 ))))):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$a (lappend$ ?v0 ?v1 ))(and (lfinite$a ?v0 )(lfinite$a ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lfinite$b (lappend$a ?v0 ?v1 ))(and (lfinite$b ?v0 )(lfinite$b ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (lfinite$ (lappend$b ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod_llist$ ))(= (lfinite$c (lappend$c ?v0 ?v1 ))(and (lfinite$c ?v0 )(lfinite$c ?v1 )))):named a33 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ ))(= (lfinite$d (lappend$d ?v0 ?v1 ))(and (lfinite$d ?v0 )(lfinite$d ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$e (lappend$e ?v0 ?v1 ))(and (lfinite$e ?v0 )(lfinite$e ?v1 )))):named a35 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ )(?v1 B_a_b_prod_prod_llist$ ))(= (lfinite$f (lappend$f ?v0 ?v1 ))(and (lfinite$f ?v0 )(lfinite$f ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod_llist$ ))(= (lfinite$g (lappend$g ?v0 ?v1 ))(and (lfinite$g ?v0 )(lfinite$g ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ )(?v1 A_b_b_prod_prod_llist$ ))(= (lfinite$h (lappend$h ?v0 ?v1 ))(and (lfinite$h ?v0 )(lfinite$h ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ )(?v1 A_b_a_prod_prod_llist$ ))(= (lfinite$i (lappend$i ?v0 ?v1 ))(and (lfinite$i ?v0 )(lfinite$i ?v1 )))):named a39 ))
(assert (! (= (llength$b (lzip$ xs$ ys$ ))(llength$b (lappend$b us$ vs$ ))):named a40 ))
(assert (! (less_eq$ (llength$b us$ )(min$ (llength$ xs$ )(llength$a ys$ ))):named a41 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (= (llength$ ?v0 )(llength$ ?v1 ))(= (= (lappend$ ?v0 ?v2 )(lappend$ ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$a ?v0 )(= ?v2 ?v3 )))))):named a42 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist$ ))(=> (= (llength$a ?v0 )(llength$a ?v1 ))(= (= (lappend$a ?v0 ?v2 )(lappend$a ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$b ?v0 )(= ?v2 ?v3 )))))):named a43 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ )(?v3 A_b_prod_llist$ ))(=> (= (llength$b ?v0 )(llength$b ?v1 ))(= (= (lappend$b ?v0 ?v2 )(lappend$b ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$ ?v0 )(= ?v2 ?v3 )))))):named a44 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod_llist$ )(?v2 B_b_prod_llist$ )(?v3 B_b_prod_llist$ ))(=> (= (llength$c ?v0 )(llength$c ?v1 ))(= (= (lappend$c ?v0 ?v2 )(lappend$c ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$c ?v0 )(= ?v2 ?v3 )))))):named a45 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod_llist$ )(?v3 B_a_prod_llist$ ))(=> (= (llength$d ?v0 )(llength$d ?v1 ))(= (= (lappend$d ?v0 ?v2 )(lappend$d ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$d ?v0 )(= ?v2 ?v3 )))))):named a46 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_llist$ )(?v3 A_a_prod_llist$ ))(=> (= (llength$e ?v0 )(llength$e ?v1 ))(= (= (lappend$e ?v0 ?v2 )(lappend$e ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$e ?v0 )(= ?v2 ?v3 )))))):named a47 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ )(?v1 B_a_b_prod_prod_llist$ )(?v2 B_a_b_prod_prod_llist$ )(?v3 B_a_b_prod_prod_llist$ ))(=> (= (llength$f ?v0 )(llength$f ?v1 ))(= (= (lappend$f ?v0 ?v2 )(lappend$f ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$f ?v0 )(= ?v2 ?v3 )))))):named a48 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod_llist$ )(?v2 A_a_b_prod_prod_llist$ )(?v3 A_a_b_prod_prod_llist$ ))(=> (= (llength$g ?v0 )(llength$g ?v1 ))(= (= (lappend$g ?v0 ?v2 )(lappend$g ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$g ?v0 )(= ?v2 ?v3 )))))):named a49 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ )(?v1 A_b_b_prod_prod_llist$ )(?v2 A_b_b_prod_prod_llist$ )(?v3 A_b_b_prod_prod_llist$ ))(=> (= (llength$h ?v0 )(llength$h ?v1 ))(= (= (lappend$h ?v0 ?v2 )(lappend$h ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$h ?v0 )(= ?v2 ?v3 )))))):named a50 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ )(?v1 A_b_a_prod_prod_llist$ )(?v2 A_b_a_prod_prod_llist$ )(?v3 A_b_a_prod_prod_llist$ ))(=> (= (llength$i ?v0 )(llength$i ?v1 ))(= (= (lappend$i ?v0 ?v2 )(lappend$i ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$i ?v0 )(= ?v2 ?v3 )))))):named a51 ))
(assert (! (= (lappend$b us$ vs$ )(lzip$ (lappend$ (ltake$ (llength$b us$ )xs$ )(ldrop$ (llength$b us$ )xs$ ))(lappend$a (ltake$a (llength$b us$ )ys$ )(ldrop$a (llength$b us$ )ys$ )))):named a52 ))
(assert (! (= (lappend$b us$ vs$ )(lappend$b (lzip$ (ltake$ (llength$b us$ )xs$ )(ltake$a (llength$b us$ )ys$ ))(lzip$ (ldrop$ (llength$b us$ )xs$ )(ldrop$a (llength$b us$ )ys$ )))):named a53 ))
(check-sat )
;(get-unsat-core )
