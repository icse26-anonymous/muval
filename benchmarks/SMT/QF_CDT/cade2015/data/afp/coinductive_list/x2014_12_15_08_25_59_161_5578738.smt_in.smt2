;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_a_a_prod_prod_set$ 0 )
(declare-sort A_a_prod_a_prod_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_a_a_a_prod_prod_fun$ 0 )
(declare-sort A_a_a_prod_a_prod_fun$ 0 )
(declare-sort A_a_a_prod_prod_a_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_prod_a_fun$ 0 )
(declare-sort A_a_a_prod_bool_fun_fun$ 0 )
(declare-sort A_a_prod_a_bool_fun_fun$ 0 )
(declare-sort A_a_prod_llist_bool_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_set$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_a_fun$ 0 )
(declare-sort A_a_prod_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_a_a_prod_prod_bool_fun_fun$ 0 )
(declare-sort A_a_a_prod_a_prod_bool_fun_fun$ 0 )
(declare-sort A_a_a_prod_prod_a_bool_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_bool_fun_fun$ 0 )
(declare-sort A_a_prod_a_prod_a_bool_fun_fun$ 0 )
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_a_a_prod_a_a_prod_prod_bool_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_a_prod_bool_fun_fun$ 0 )
(declare-sort A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ 0 )
(declare-sort A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))(A_a_prod$ (pair$ (fst$ A$ )(snd$ A$ )))(A_a_prod_a_a_prod_prod$ (pair$a (fst$a A_a_prod$ )(snd$a A_a_prod$ )))))
(declare-sort A_a_prod_a_a_prod_prod_llist$ 0)
(declare-fun lNil$a ()A_a_prod_a_a_prod_prod_llist$)
(declare-fun lhd$a (A_a_prod_a_a_prod_prod_llist$)A_a_prod_a_a_prod_prod$)
(declare-fun ltl$a (A_a_prod_a_a_prod_prod_llist$)A_a_prod_a_a_prod_prod_llist$)
(declare-fun lCons$a (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$ )(snd$b A$ )))))
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$b ()A_a_prod_a_prod_llist$)
(declare-fun lhd$b (A_a_prod_a_prod_llist$)A_a_prod_a_prod$)
(declare-fun ltl$b (A_a_prod_a_prod_llist$)A_a_prod_a_prod_llist$)
(declare-fun lCons$b (A_a_prod_a_prod$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod$ (pair$c (fst$c A$ )(snd$c A_a_prod$ )))))
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$c ()A_a_a_prod_prod_llist$)
(declare-fun lhd$c (A_a_a_prod_prod_llist$)A_a_a_prod_prod$)
(declare-fun ltl$c (A_a_a_prod_prod_llist$)A_a_a_prod_prod_llist$)
(declare-fun lCons$c (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$)
(declare-fun lNil$d ()A_a_prod_llist$)
(declare-fun lhd$d (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$d (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$d (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_a_prod_prod$ (pair$d (fst$d A$ )(snd$d A_a_prod_a_prod$ )))))
(declare-sort A_a_a_prod_a_prod_prod_llist$ 0)
(declare-fun lNil$e ()A_a_a_prod_a_prod_prod_llist$)
(declare-fun lhd$e (A_a_a_prod_a_prod_prod_llist$)A_a_a_prod_a_prod_prod$)
(declare-fun ltl$e (A_a_a_prod_a_prod_prod_llist$)A_a_a_prod_a_prod_prod_llist$)
(declare-fun lCons$e (A_a_a_prod_a_prod_prod$ A_a_a_prod_a_prod_prod_llist$ )A_a_a_prod_a_prod_prod_llist$)
(declare-datatypes ()((A_a_a_a_prod_prod_prod$ (pair$e (fst$e A$ )(snd$e A_a_a_prod_prod$ )))))
(declare-sort A_a_a_a_prod_prod_prod_llist$ 0)
(declare-fun lNil$f ()A_a_a_a_prod_prod_prod_llist$)
(declare-fun lhd$f (A_a_a_a_prod_prod_prod_llist$)A_a_a_a_prod_prod_prod$)
(declare-fun ltl$f (A_a_a_a_prod_prod_prod_llist$)A_a_a_a_prod_prod_prod_llist$)
(declare-fun lCons$f (A_a_a_a_prod_prod_prod$ A_a_a_a_prod_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_prod_a_prod$ (pair$f (fst$f A_a_prod_a_prod$ )(snd$f A$ )))))
(declare-sort A_a_prod_a_prod_a_prod_llist$ 0)
(declare-fun lNil$g ()A_a_prod_a_prod_a_prod_llist$)
(declare-fun lhd$g (A_a_prod_a_prod_a_prod_llist$)A_a_prod_a_prod_a_prod$)
(declare-fun ltl$g (A_a_prod_a_prod_a_prod_llist$)A_a_prod_a_prod_a_prod_llist$)
(declare-fun lCons$g (A_a_prod_a_prod_a_prod$ A_a_prod_a_prod_a_prod_llist$ )A_a_prod_a_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_prod_a_prod$ (pair$g (fst$g A_a_a_prod_prod$ )(snd$g A$ )))))
(declare-sort A_a_a_prod_prod_a_prod_llist$ 0)
(declare-fun lNil$h ()A_a_a_prod_prod_a_prod_llist$)
(declare-fun lhd$h (A_a_a_prod_prod_a_prod_llist$)A_a_a_prod_prod_a_prod$)
(declare-fun ltl$h (A_a_a_prod_prod_a_prod_llist$)A_a_a_prod_prod_a_prod_llist$)
(declare-fun lCons$h (A_a_a_prod_prod_a_prod$ A_a_a_prod_prod_a_prod_llist$ )A_a_a_prod_prod_a_prod_llist$)
(declare-datatypes ()((A_a_a_prod_a_a_prod_prod_prod$ (pair$h (fst$h A$ )(snd$h A_a_prod_a_a_prod_prod$ )))))
(declare-sort A_a_a_prod_a_a_prod_prod_prod_llist$ 0)
(declare-fun lNil$i ()A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lhd$i (A_a_a_prod_a_a_prod_prod_prod_llist$)A_a_a_prod_a_a_prod_prod_prod$)
(declare-fun ltl$i (A_a_a_prod_a_a_prod_prod_prod_llist$)A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lCons$i (A_a_a_prod_a_a_prod_prod_prod$ A_a_a_prod_a_a_prod_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-datatypes ()((A_a_prod_a_a_prod_a_prod_prod$ (pair$i (fst$i A_a_prod$ )(snd$i A_a_prod_a_prod$ )))))
(declare-sort A_a_prod_a_a_prod_a_prod_prod_llist$ 0)
(declare-fun lNil$j ()A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun lhd$j (A_a_prod_a_a_prod_a_prod_prod_llist$)A_a_prod_a_a_prod_a_prod_prod$)
(declare-fun ltl$j (A_a_prod_a_a_prod_a_prod_prod_llist$)A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun lCons$j (A_a_prod_a_a_prod_a_prod_prod$ A_a_prod_a_a_prod_a_prod_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun n$ ()Enat$ )
(declare-fun uu$ (A_a_prod$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ (A$ )A_llist_a_llist_fun$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_set$ )
(declare-fun lzip$ (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun lmap$a (A_a_prod_a_fun$ A_a_prod_llist$ )A_llist$ )
(declare-fun lmap$b (A_a_a_prod_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun lmap$c (A_a_prod_a_a_prod_fun$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun lmap$d (A_a_prod_a_prod_a_fun$ A_a_prod_a_prod_llist$ )A_llist$ )
(declare-fun lmap$e (A_a_a_prod_prod_a_fun$ A_a_a_prod_prod_llist$ )A_llist$ )
(declare-fun lmap$f (A_a_a_prod_a_prod_fun$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lmap$g (A_a_a_a_prod_prod_fun$ A_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lmap$h (A_a_prod_a_a_prod_prod_a_fun$ A_a_prod_a_a_prod_prod_llist$ )A_llist$ )
(declare-fun lmap$i (A_a_prod_a_prod_a_a_prod_fun$ A_a_prod_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun lset$a (A_a_prod_a_prod_llist$ )A_a_prod_a_prod_set$ )
(declare-fun lset$b (A_a_a_prod_prod_llist$ )A_a_a_prod_prod_set$ )
(declare-fun lset$c (A_a_prod_llist$ )A_a_prod_set$ )
(declare-fun lset$d (A_llist$ )A_set$ )
(declare-fun lzip$a (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$b (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$ )A_a_a_prod_a_prod_prod_llist$ )
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$ )A_a_prod_a_prod_a_prod_llist$ )
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$ )A_a_a_prod_prod_a_prod_llist$ )
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$ )
(declare-fun ldrop$a (Enat$ )A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ )
(declare-fun ldrop$b (Enat$ )A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ )
(declare-fun ldrop$c (Enat$ )A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ )
(declare-fun ldrop$d (Enat$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun ldrop$e (Enat$ A_a_a_prod_a_prod_prod_llist$ )A_a_a_prod_a_prod_prod_llist$ )
(declare-fun ldrop$f (Enat$ A_a_a_a_prod_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$ )
(declare-fun ldrop$g (Enat$ A_a_prod_a_prod_a_prod_llist$ )A_a_prod_a_prod_a_prod_llist$ )
(declare-fun ldrop$h (Enat$ A_a_a_prod_prod_a_prod_llist$ )A_a_a_prod_prod_a_prod_llist$ )
(declare-fun ldrop$i (Enat$ A_a_a_prod_a_a_prod_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$ )
(declare-fun ldrop$j (Enat$ A_a_prod_a_a_prod_a_prod_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$ )
(declare-fun llast$a (A_a_prod_llist$ )A_a_prod$ )
(declare-fun member$ (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_set$ )Bool )
(declare-fun fun_app$ (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun member$a (A_a_prod_a_prod$ A_a_prod_a_prod_set$ )Bool )
(declare-fun member$b (A_a_a_prod_prod$ A_a_a_prod_prod_set$ )Bool )
(declare-fun member$c (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun member$d (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun fun_app$c (A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun fun_app$d (A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$f (A_a_prod_llist_bool_fun$ A_a_prod_llist$ )Bool )
(declare-fun fun_app$g (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun fun_app$h (A_a_prod_a_a_prod_bool_fun_fun$ A_a_prod$ )A_a_prod_bool_fun$ )
(declare-fun fun_app$i (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$j (A_a_prod_a_bool_fun_fun$ A_a_prod$ )A_bool_fun$ )
(declare-fun fun_app$k (A_a_a_prod_bool_fun_fun$ A$ )A_a_prod_bool_fun$ )
(declare-fun fun_app$l (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun undefined$ ()A_a_prod$ )
(declare-fun llist_all2$ (A_a_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun undefined$a ()A$ )
(declare-fun llist_all2$a (A_a_a_prod_bool_fun_fun$ A_llist$ )A_a_prod_llist_bool_fun$ )
(declare-fun llist_all2$b (A_a_prod_a_bool_fun_fun$ A_a_prod_llist$ )A_llist_bool_fun$ )
(declare-fun llist_all2$c (A_a_prod_a_a_prod_bool_fun_fun$ A_a_prod_llist$ )A_a_prod_llist_bool_fun$ )
(declare-fun llist_all2$d (A_a_a_prod_a_prod_bool_fun_fun$ A_llist$ A_a_prod_a_prod_llist$ )Bool )
(declare-fun llist_all2$e (A_a_a_a_prod_prod_bool_fun_fun$ A_llist$ A_a_a_prod_prod_llist$ )Bool )
(declare-fun llist_all2$f (A_a_prod_a_prod_a_bool_fun_fun$ A_a_prod_a_prod_llist$ A_llist$ )Bool )
(declare-fun llist_all2$g (A_a_a_prod_prod_a_bool_fun_fun$ A_a_a_prod_prod_llist$ A_llist$ )Bool )
(declare-fun llist_all2$h (A_a_a_prod_a_a_prod_prod_bool_fun_fun$ A_llist$ A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun llist_all2$i (A_a_prod_a_a_prod_a_prod_bool_fun_fun$ A_a_prod_llist$ A_a_prod_a_prod_llist$ )Bool )
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(lCons$d ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(lCons$ ?v0 ?v1 )):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (= (llast$ (fun_app$a (ldrop$ n$ )xs$ ))(llast$ xs$ ))):named a2 ))
(assert (! (less$ n$ (llength$ xs$ )):named a3 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ ))(= (fun_app$b (ldrop$a zero$ )?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ ))(= (fun_app$c (ldrop$b zero$ )?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(= (fun_app$d (ldrop$c zero$ )?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(= (fun_app$ (ldrop$d zero$ )?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (ldrop$ zero$ )?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (llast$ (lCons$ ?v0 (lCons$ ?v1 ?v2 )))(llast$ (lCons$ ?v1 ?v2 ))):pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_prod_a_a_prod_prod_llist$ ))(= (fun_app$b (ldrop$a ?v0 )(fun_app$b (ldrop$a ?v1 )?v2 ))(fun_app$b (ldrop$a (plus$ ?v0 ?v1 ))?v2 ))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_prod_a_prod_llist$ ))(= (fun_app$c (ldrop$b ?v0 )(fun_app$c (ldrop$b ?v1 )?v2 ))(fun_app$c (ldrop$b (plus$ ?v0 ?v1 ))?v2 ))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_a_prod_prod_llist$ ))(= (fun_app$d (ldrop$c ?v0 )(fun_app$d (ldrop$c ?v1 )?v2 ))(fun_app$d (ldrop$c (plus$ ?v0 ?v1 ))?v2 ))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_prod_llist$ ))(= (fun_app$ (ldrop$d ?v0 )(fun_app$ (ldrop$d ?v1 )?v2 ))(fun_app$ (ldrop$d (plus$ ?v0 ?v1 ))?v2 ))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$a (ldrop$ ?v0 )(fun_app$a (ldrop$ ?v1 )?v2 ))(fun_app$a (ldrop$ (plus$ ?v0 ?v1 ))?v2 ))):named a14 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (ldrop$a ?v0 )lNil$a )lNil$a ):pattern ((ldrop$a ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$c (ldrop$b ?v0 )lNil$b )lNil$b ):pattern ((ldrop$b ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$d (ldrop$c ?v0 )lNil$c )lNil$c ):pattern ((ldrop$c ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$d ?v0 )lNil$d )lNil$d ):pattern ((ldrop$d ?v0 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$d ?v0 )(lzip$ ?v1 ?v2 ))(lzip$ (fun_app$a (ldrop$ ?v0 )?v1 )(fun_app$a (ldrop$ ?v0 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_a_prod_llist$ ))(= (fun_app$d (ldrop$c ?v0 )(lzip$a ?v1 ?v2 ))(lzip$a (fun_app$a (ldrop$ ?v0 )?v1 )(fun_app$ (ldrop$d ?v0 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_llist$ )(?v2 A_llist$ ))(= (fun_app$c (ldrop$b ?v0 )(lzip$b ?v1 ?v2 ))(lzip$b (fun_app$ (ldrop$d ?v0 )?v1 )(fun_app$a (ldrop$ ?v0 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_llist$ ))(= (fun_app$b (ldrop$a ?v0 )(lzip$c ?v1 ?v2 ))(lzip$c (fun_app$ (ldrop$d ?v0 )?v1 )(fun_app$ (ldrop$d ?v0 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_a_prod_a_prod_llist$ ))(= (ldrop$e ?v0 (lzip$d ?v1 ?v2 ))(lzip$d (fun_app$a (ldrop$ ?v0 )?v1 )(fun_app$c (ldrop$b ?v0 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_a_a_prod_prod_llist$ ))(= (ldrop$f ?v0 (lzip$e ?v1 ?v2 ))(lzip$e (fun_app$a (ldrop$ ?v0 )?v1 )(fun_app$d (ldrop$c ?v0 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_prod_llist$ )(?v2 A_llist$ ))(= (ldrop$g ?v0 (lzip$f ?v1 ?v2 ))(lzip$f (fun_app$c (ldrop$b ?v0 )?v1 )(fun_app$a (ldrop$ ?v0 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_prod_llist$ )(?v2 A_llist$ ))(= (ldrop$h ?v0 (lzip$g ?v1 ?v2 ))(lzip$g (fun_app$d (ldrop$c ?v0 )?v1 )(fun_app$a (ldrop$ ?v0 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_a_prod_a_a_prod_prod_llist$ ))(= (ldrop$i ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (fun_app$a (ldrop$ ?v0 )?v1 )(fun_app$b (ldrop$a ?v0 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_a_prod_llist$ ))(= (ldrop$j ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (fun_app$ (ldrop$d ?v0 )?v1 )(fun_app$c (ldrop$b ?v0 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$a (ldrop$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$a (ldrop$ ?v0 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_fun$ )(?v2 A_a_prod_llist$ ))(= (fun_app$a (ldrop$ ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$ (ldrop$d ?v0 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$d ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$a (ldrop$ ?v0 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_a_prod_fun$ )(?v2 A_a_prod_llist$ ))(= (fun_app$ (ldrop$d ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$ (ldrop$d ?v0 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_prod_a_fun$ )(?v2 A_a_prod_a_prod_llist$ ))(= (fun_app$a (ldrop$ ?v0 )(lmap$d ?v1 ?v2 ))(lmap$d ?v1 (fun_app$c (ldrop$b ?v0 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_prod_a_fun$ )(?v2 A_a_a_prod_prod_llist$ ))(= (fun_app$a (ldrop$ ?v0 )(lmap$e ?v1 ?v2 ))(lmap$e ?v1 (fun_app$d (ldrop$c ?v0 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_a_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$c (ldrop$b ?v0 )(lmap$f ?v1 ?v2 ))(lmap$f ?v1 (fun_app$a (ldrop$ ?v0 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_a_prod_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$d (ldrop$c ?v0 )(lmap$g ?v1 ?v2 ))(lmap$g ?v1 (fun_app$a (ldrop$ ?v0 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_a_prod_prod_a_fun$ )(?v2 A_a_prod_a_a_prod_prod_llist$ ))(= (fun_app$a (ldrop$ ?v0 )(lmap$h ?v1 ?v2 ))(lmap$h ?v1 (fun_app$b (ldrop$a ?v0 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_prod_a_a_prod_fun$ )(?v2 A_a_prod_a_prod_llist$ ))(= (fun_app$ (ldrop$d ?v0 )(lmap$i ?v1 ?v2 ))(lmap$i ?v1 (fun_app$c (ldrop$b ?v0 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$ )(?v1 Enat$ )(?v2 A_a_prod_a_a_prod_prod_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$b (ldrop$a ?v1 )?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a40 ))
(assert (! (forall ((?v0 A_a_prod_a_prod$ )(?v1 Enat$ )(?v2 A_a_prod_a_prod_llist$ ))(=> (member$a ?v0 (lset$a (fun_app$c (ldrop$b ?v1 )?v2 )))(member$a ?v0 (lset$a ?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 Enat$ )(?v2 A_a_a_prod_prod_llist$ ))(=> (member$b ?v0 (lset$b (fun_app$d (ldrop$c ?v1 )?v2 )))(member$b ?v0 (lset$b ?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 Enat$ )(?v2 A_a_prod_llist$ ))(=> (member$c ?v0 (lset$c (fun_app$ (ldrop$d ?v1 )?v2 )))(member$c ?v0 (lset$c ?v2 )))):named a43 ))
(assert (! (forall ((?v0 A$ )(?v1 Enat$ )(?v2 A_llist$ ))(=> (member$d ?v0 (lset$d (fun_app$a (ldrop$ ?v1 )?v2 )))(member$d ?v0 (lset$d ?v2 )))):named a44 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(= (ltl$a (fun_app$b (ldrop$a ?v0 )?v1 ))(fun_app$b (ldrop$a ?v0 )(ltl$a ?v1 )))):named a45 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_prod_llist$ ))(= (ltl$b (fun_app$c (ldrop$b ?v0 )?v1 ))(fun_app$c (ldrop$b ?v0 )(ltl$b ?v1 )))):named a46 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_prod_llist$ ))(= (ltl$c (fun_app$d (ldrop$c ?v0 )?v1 ))(fun_app$d (ldrop$c ?v0 )(ltl$c ?v1 )))):named a47 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_llist$ ))(= (ltl$d (fun_app$ (ldrop$d ?v0 )?v1 ))(fun_app$ (ldrop$d ?v0 )(ltl$d ?v1 )))):named a48 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$a (ldrop$ ?v0 )?v1 ))(fun_app$a (ldrop$ ?v0 )(ltl$ ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (fun_app$e (llist_all2$ ?v0 ?v1 )?v2 )(fun_app$e (llist_all2$ ?v0 (fun_app$a (ldrop$ ?v3 )?v1 ))(fun_app$a (ldrop$ ?v3 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 A_a_a_prod_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_a_prod_llist$ )(?v3 Enat$ ))(=> (fun_app$f (llist_all2$a ?v0 ?v1 )?v2 )(fun_app$f (llist_all2$a ?v0 (fun_app$a (ldrop$ ?v3 )?v1 ))(fun_app$ (ldrop$d ?v3 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 A_a_prod_a_bool_fun_fun$ )(?v1 A_a_prod_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (fun_app$e (llist_all2$b ?v0 ?v1 )?v2 )(fun_app$e (llist_all2$b ?v0 (fun_app$ (ldrop$d ?v3 )?v1 ))(fun_app$a (ldrop$ ?v3 )?v2 )))):named a52 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_bool_fun_fun$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_llist$ )(?v3 Enat$ ))(=> (fun_app$f (llist_all2$c ?v0 ?v1 )?v2 )(fun_app$f (llist_all2$c ?v0 (fun_app$ (ldrop$d ?v3 )?v1 ))(fun_app$ (ldrop$d ?v3 )?v2 )))):named a53 ))
(assert (! (forall ((?v0 A_a_a_prod_a_prod_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_a_prod_a_prod_llist$ )(?v3 Enat$ ))(=> (llist_all2$d ?v0 ?v1 ?v2 )(llist_all2$d ?v0 (fun_app$a (ldrop$ ?v3 )?v1 )(fun_app$c (ldrop$b ?v3 )?v2 )))):named a54 ))
(assert (! (forall ((?v0 A_a_a_a_prod_prod_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_a_a_prod_prod_llist$ )(?v3 Enat$ ))(=> (llist_all2$e ?v0 ?v1 ?v2 )(llist_all2$e ?v0 (fun_app$a (ldrop$ ?v3 )?v1 )(fun_app$d (ldrop$c ?v3 )?v2 )))):named a55 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_a_bool_fun_fun$ )(?v1 A_a_prod_a_prod_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (llist_all2$f ?v0 ?v1 ?v2 )(llist_all2$f ?v0 (fun_app$c (ldrop$b ?v3 )?v1 )(fun_app$a (ldrop$ ?v3 )?v2 )))):named a56 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_a_bool_fun_fun$ )(?v1 A_a_a_prod_prod_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (llist_all2$g ?v0 ?v1 ?v2 )(llist_all2$g ?v0 (fun_app$d (ldrop$c ?v3 )?v1 )(fun_app$a (ldrop$ ?v3 )?v2 )))):named a57 ))
(assert (! (forall ((?v0 A_a_a_prod_a_a_prod_prod_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_a_prod_a_a_prod_prod_llist$ )(?v3 Enat$ ))(=> (llist_all2$h ?v0 ?v1 ?v2 )(llist_all2$h ?v0 (fun_app$a (ldrop$ ?v3 )?v1 )(fun_app$b (ldrop$a ?v3 )?v2 )))):named a58 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_a_prod_bool_fun_fun$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_a_prod_llist$ )(?v3 Enat$ ))(=> (llist_all2$i ?v0 ?v1 ?v2 )(llist_all2$i ?v0 (fun_app$ (ldrop$d ?v3 )?v1 )(fun_app$c (ldrop$b ?v3 )?v2 )))):named a59 ))
(assert (! (forall ((?v0 A_a_prod$ ))(! (= (llast$a (lCons$d ?v0 lNil$d ))?v0 ):pattern ((uu$ ?v0 )))):named a60 ))
(assert (! (forall ((?v0 A$ ))(! (= (llast$ (lCons$ ?v0 lNil$ ))?v0 ):pattern ((uua$ ?v0 )))):named a61 ))
(assert (! (= (llast$a lNil$d )undefined$ ):named a62 ))
(assert (! (= (llast$ lNil$ )undefined$a ):named a63 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a64 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_bool_fun_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_llist$ )(?v3 A_a_prod$ )(?v4 A_a_prod_llist$ ))(! (= (fun_app$f (llist_all2$c ?v0 (lCons$d ?v1 ?v2 ))(lCons$d ?v3 ?v4 ))(and (fun_app$g (fun_app$h ?v0 ?v1 )?v3 )(fun_app$f (llist_all2$c ?v0 ?v2 )?v4 ))):pattern ((fun_app$f (llist_all2$c ?v0 (lCons$d ?v1 ?v2 ))(lCons$d ?v3 ?v4 ))))):named a65 ))
(assert (! (forall ((?v0 A_a_prod_a_bool_fun_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$e (llist_all2$b ?v0 (lCons$d ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$i (fun_app$j ?v0 ?v1 )?v3 )(fun_app$e (llist_all2$b ?v0 ?v2 )?v4 ))):pattern ((fun_app$e (llist_all2$b ?v0 (lCons$d ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a66 ))
(assert (! (forall ((?v0 A_a_a_prod_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A_a_prod$ )(?v4 A_a_prod_llist$ ))(! (= (fun_app$f (llist_all2$a ?v0 (lCons$ ?v1 ?v2 ))(lCons$d ?v3 ?v4 ))(and (fun_app$g (fun_app$k ?v0 ?v1 )?v3 )(fun_app$f (llist_all2$a ?v0 ?v2 )?v4 ))):pattern ((fun_app$f (llist_all2$a ?v0 (lCons$ ?v1 ?v2 ))(lCons$d ?v3 ?v4 ))))):named a67 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$e (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$i (fun_app$l ?v0 ?v1 )?v3 )(fun_app$e (llist_all2$ ?v0 ?v2 )?v4 ))):pattern ((fun_app$e (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a68 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_bool_fun_fun$ )(?v1 A_a_prod_llist$ ))(! (= (fun_app$f (llist_all2$c ?v0 ?v1 )lNil$d )(= ?v1 lNil$d )):pattern ((llist_all2$c ?v0 ?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_a_prod_a_bool_fun_fun$ )(?v1 A_a_prod_llist$ ))(! (= (fun_app$e (llist_all2$b ?v0 ?v1 )lNil$ )(= ?v1 lNil$d )):pattern ((llist_all2$b ?v0 ?v1 )))):named a70 ))
(assert (! (forall ((?v0 A_a_a_prod_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$f (llist_all2$a ?v0 ?v1 )lNil$d )(= ?v1 lNil$ )):pattern ((llist_all2$a ?v0 ?v1 )))):named a71 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$e (llist_all2$ ?v0 ?v1 )lNil$ )(= ?v1 lNil$ )):pattern ((llist_all2$ ?v0 ?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_bool_fun_fun$ )(?v1 A_a_prod_llist$ ))(! (= (fun_app$f (llist_all2$c ?v0 lNil$d )?v1 )(= ?v1 lNil$d )):pattern ((fun_app$f (llist_all2$c ?v0 lNil$d )?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_a_prod_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$e (llist_all2$b ?v0 lNil$d )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$e (llist_all2$b ?v0 lNil$d )?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_a_a_prod_bool_fun_fun$ )(?v1 A_a_prod_llist$ ))(! (= (fun_app$f (llist_all2$a ?v0 lNil$ )?v1 )(= ?v1 lNil$d )):pattern ((fun_app$f (llist_all2$a ?v0 lNil$ )?v1 )))):named a75 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$e (llist_all2$ ?v0 lNil$ )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$e (llist_all2$ ?v0 lNil$ )?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_bool_fun_fun$ )(?v1 A_a_prod_llist$ ))(= (fun_app$f (llist_all2$c ?v0 ?v1 )?v1 )(forall ((?v2 A_a_prod$ ))(=> (member$c ?v2 (lset$c ?v1 ))(fun_app$g (fun_app$h ?v0 ?v2 )?v2 ))))):named a77 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(= (fun_app$e (llist_all2$ ?v0 ?v1 )?v1 )(forall ((?v2 A$ ))(=> (member$d ?v2 (lset$d ?v1 ))(fun_app$i (fun_app$l ?v0 ?v2 )?v2 ))))):named a78 ))
(check-sat )
;(get-unsat-core )
