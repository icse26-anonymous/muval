;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun a$ ()Nat_set$ )
(declare-fun k$ ()Nat$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun plus$a (Enat$ Enat$ )Enat$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(member$ (plus$ ?v0 k$ )a$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (lsublist$ (lappend$ xs$ ys$ )a$ )(lappend$ (lsublist$ xs$ a$ )(lsublist$ ys$ (collect$ uu$ ))))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a2 ))
(assert (! (= (llength$ xs$ )(enat$ k$ )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ )(?v3 Enat$ ))(= (plus$a (plus$a ?v0 ?v1 )(plus$a ?v2 ?v3 ))(plus$a (plus$a ?v0 ?v2 )(plus$a ?v1 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )(plus$ ?v2 ?v3 ))(plus$ (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (plus$a (plus$a ?v0 ?v1 )?v2 )(plus$a (plus$a ?v0 ?v2 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ (plus$ ?v0 ?v2 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (plus$a (plus$a ?v0 ?v1 )?v2 )(plus$a ?v0 (plus$a ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ ?v0 (plus$ ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (plus$a (plus$a ?v0 ?v1 )?v2 )(plus$a ?v0 (plus$a ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ ?v0 (plus$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (plus$a ?v0 (plus$a ?v1 ?v2 ))(plus$a (plus$a ?v0 ?v1 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ ?v0 (plus$ ?v1 ?v2 ))(plus$ (plus$ ?v0 ?v1 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (llength$ (lappend$ ?v0 ?v1 ))(plus$a (llength$ ?v0 )(llength$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ )(?v3 Enat$ ))(=> (and (= ?v0 ?v1 )(= ?v2 ?v3 ))(= (plus$a ?v0 ?v2 )(plus$a ?v1 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 ?v1 )(= ?v2 ?v3 ))(= (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a22 ))
(check-sat )
;(get-unsat-core )
