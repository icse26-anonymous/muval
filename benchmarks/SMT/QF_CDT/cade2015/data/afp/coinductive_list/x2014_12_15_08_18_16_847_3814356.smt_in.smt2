;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Nat_nat_a_fun_fun$ 0 )
(declare-sort Enat_nat_a_fun_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort Nat_a_fun_nat_a_fun_fun$ 0 )
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0 )
(declare-sort Nat_a_fun_enat_nat_a_fun_fun_fun$ 0 )
(declare-sort Nat_nat_a_fun_fun_nat_nat_a_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort Nat_a_fun_llist$ 0)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$a ()Nat_a_fun_llist$)
(declare-fun select$ (Nat_a_fun_llist$)Nat_a_fun$)
(declare-fun selecta$ (Nat_a_fun_llist$)Nat_a_fun_llist$)
(declare-fun lCons$a (Nat_a_fun$ Nat_a_fun_llist$ )Nat_a_fun_llist$)
(declare-fun lNil$b ()Nat_llist$)
(declare-fun lhd$a (Nat_llist$)Nat$)
(declare-fun ltl$a (Nat_llist$)Nat_llist$)
(declare-fun lCons$b (Nat$ Nat_llist$ )Nat_llist$)
(declare-fun n$ ()Nat$ )
(declare-fun uu$ ()Nat_nat_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun llast$ (Nat_a_fun_llist$ )Nat_a_fun$ )
(declare-fun lnth$a (Nat_a_fun_llist$ )Nat_nat_a_fun_fun$ )
(declare-fun lnth$b (Nat_llist$ )Nat_nat_fun$ )
(declare-fun minus$ (Nat$ )Nat_nat_fun$ )
(declare-fun ldropn$ (Nat$ Nat_llist$ )Nat_llist$ )
(declare-fun llast$a (Nat_llist$ )Nat$ )
(declare-fun llast$b (A_llist$ )A$ )
(declare-fun minus$a (Enat$ Enat$ )Enat$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun ldropn$a (Nat$ Nat_a_fun_llist$ )Nat_a_fun_llist$ )
(declare-fun ldropn$b (Nat$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun case_nat$ (Nat_a_fun$ )Nat_nat_a_fun_fun_nat_nat_a_fun_fun_fun$ )
(declare-fun fun_app$a (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$b (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$c (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(declare-fun fun_app$d (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$e (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$f (Enat_nat_a_fun_fun$ Enat$ )Nat_a_fun$ )
(declare-fun fun_app$g (Nat_a_fun_enat_nat_a_fun_fun_fun$ Nat_a_fun$ )Enat_nat_a_fun_fun$ )
(declare-fun fun_app$h (Nat_nat_a_fun_fun$ Nat$ )Nat_a_fun$ )
(declare-fun fun_app$i (Nat_nat_a_fun_fun_nat_nat_a_fun_fun_fun$ Nat_nat_a_fun_fun$ )Nat_nat_a_fun_fun$ )
(declare-fun fun_app$j (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$ )Nat_nat_fun$ )
(declare-fun fun_app$k (Nat_a_fun_nat_a_fun_fun$ Nat_a_fun$ )Nat_a_fun$ )
(declare-fun less_eq$a (Nat$ Nat$ )Bool )
(declare-fun llength$a (Nat_a_fun_llist$ )Enat$ )
(declare-fun llength$b (Nat_llist$ )Enat$ )
(declare-fun case_enat$ (Nat_nat_fun$ Nat$ Enat$ )Nat$ )
(declare-fun case_nat$a (Nat$ )Nat_nat_fun_nat_nat_fun_fun$ )
(declare-fun case_nat$b (A$ )Nat_a_fun_nat_a_fun_fun$ )
(declare-fun undefined$ ()Nat_a_fun$ )
(declare-fun case_enat$a (Nat_a_fun$ A$ Enat$ )A$ )
(declare-fun case_enat$b (Nat_nat_a_fun_fun$ )Nat_a_fun_enat_nat_a_fun_fun_fun$ )
(declare-fun undefined$a ()Nat$ )
(declare-fun undefined$b ()A$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )?v0 ):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (fun_app$a (lnth$ xs$ )n$ )(fun_app$a undefined$ (fun_app$ (minus$ n$ )(case_enat$ uu$ undefined$a (llength$ xs$ )))))):named a1 ))
(assert (! (less_eq$ (llength$ xs$ )(enat$ n$ )):named a2 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$b (fun_app$c ?v0 ?v3 )?v4 )))(=> (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(fun_app$b (fun_app$c ?v0 ?v2 )?v1 )))(fun_app$b (fun_app$c ?v0 ?v2 )?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (less_eq$a ?v3 ?v4 )(fun_app$d (fun_app$e ?v0 ?v3 )?v4 )))(=> (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(fun_app$d (fun_app$e ?v0 ?v2 )?v1 )))(fun_app$d (fun_app$e ?v0 ?v2 )?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A$ )(?v2 Nat$ ))(! (= (case_enat$a ?v0 ?v1 (enat$ ?v2 ))(fun_app$a ?v0 ?v2 )):pattern ((case_enat$a ?v0 ?v1 (enat$ ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 Nat_nat_a_fun_fun$ )(?v1 Nat_a_fun$ )(?v2 Nat$ ))(! (= (fun_app$f (fun_app$g (case_enat$b ?v0 )?v1 )(enat$ ?v2 ))(fun_app$h ?v0 ?v2 )):pattern ((fun_app$f (fun_app$g (case_enat$b ?v0 )?v1 )(enat$ ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(! (= (case_enat$ ?v0 ?v1 (enat$ ?v2 ))(fun_app$ ?v0 ?v2 )):pattern ((case_enat$ ?v0 ?v1 (enat$ ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Enat$ ))(less_eq$ ?v0 ?v0 )):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$a ?v0 ?v0 )):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less_eq$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 Nat_a_fun_llist$ ))(! (= (llast$ ?v0 )(fun_app$f (fun_app$g (case_enat$b (fun_app$i (case_nat$ undefined$ )(lnth$a ?v0 )))undefined$ )(llength$a ?v0 ))):pattern ((llast$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (llast$a ?v0 )(case_enat$ (fun_app$j (case_nat$a undefined$a )(lnth$b ?v0 ))undefined$a (llength$b ?v0 ))):pattern ((llast$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (llast$b ?v0 )(case_enat$a (fun_app$k (case_nat$b undefined$b )(lnth$ ?v0 ))undefined$b (llength$ ?v0 ))):pattern ((llast$b ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat$ ))(=> (less_eq$ (enat$ ?v0 )(llength$b ?v1 ))(less_eq$ (enat$ (fun_app$ (minus$ ?v0 )?v2 ))(llength$b (ldropn$ ?v2 ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_fun_llist$ )(?v2 Nat$ ))(=> (less_eq$ (enat$ ?v0 )(llength$a ?v1 ))(less_eq$ (enat$ (fun_app$ (minus$ ?v0 )?v2 ))(llength$a (ldropn$a ?v2 ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 Nat$ ))(=> (less_eq$ (enat$ ?v0 )(llength$ ?v1 ))(less_eq$ (enat$ (fun_app$ (minus$ ?v0 )?v2 ))(llength$ (ldropn$b ?v2 ?v1 ))))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (minus$ (fun_app$ (minus$ ?v0 )?v1 ))?v2 )(fun_app$ (minus$ (fun_app$ (minus$ ?v0 )?v2 ))?v1 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (less_eq$a ?v0 ?v1 )(= (fun_app$ (minus$ ?v1 )(fun_app$ (minus$ ?v1 )?v0 ))?v0 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (minus$a (enat$ ?v0 )(enat$ ?v1 ))(enat$ (fun_app$ (minus$ ?v0 )?v1 ))):pattern ((minus$a (enat$ ?v0 )(enat$ ?v1 ))))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less_eq$ (enat$ ?v0 )(enat$ ?v1 ))(less_eq$a ?v0 ?v1 )):pattern ((less_eq$ (enat$ ?v0 )(enat$ ?v1 ))))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(= (llength$b (ldropn$ ?v0 ?v1 ))(minus$a (llength$b ?v1 )(enat$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_fun_llist$ ))(= (llength$a (ldropn$a ?v0 ?v1 ))(minus$a (llength$a ?v1 )(enat$ ?v0 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (llength$ (ldropn$b ?v0 ?v1 ))(minus$a (llength$ ?v1 )(enat$ ?v0 )))):named a24 ))
(check-sat )
;(get-unsat-core )
