;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun f$ ()B_a_fun$ )
(declare-fun i$ ()Nat$ )
(declare-fun j$ ()Nat$ )
(declare-fun x$ ()B$ )
(declare-fun y$ ()B$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lnth$ (B_llist$ Nat$ )B$ )
(declare-fun lset$ (B_llist$ )B_set$ )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun fun_app$ (B_a_fun$ B$ )A$ )
(declare-fun llength$ (B_llist$ )Enat$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun llength$a (A_llist$ )Enat$ )
(declare-fun ldistinct$ (B_llist$ )Bool )
(declare-fun ldistinct$a (A_llist$ )Bool )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$a (B_llist$ )B_llist_bool_fun$ )
(assert (! (not (= x$ y$ )):named a0 ))
(assert (! (= x$ (lnth$ xs$ i$ )):named a1 ))
(assert (! (= y$ (lnth$ xs$ j$ )):named a2 ))
(assert (! (= (fun_app$ f$ x$ )(fun_app$ f$ y$ )):named a3 ))
(assert (! (member$ x$ (lset$ xs$ )):named a4 ))
(assert (! (member$ y$ (lset$ xs$ )):named a5 ))
(assert (! (=> (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less$ (enat$ ?v0 )(llength$ xs$ ))(and (= x$ (lnth$ xs$ ?v0 ))(and (less$ (enat$ ?v1 )(llength$ xs$ ))(= y$ (lnth$ xs$ ?v1 )))))false ))false ):named a6 ))
(assert (! (ldistinct$ xs$ ):named a7 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$a (lstrict_prefix$ ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 B_llist_bool_fun$ )(?v1 B_llist$ ))(=> (forall ((?v2 B_llist$ ))(=> (forall ((?v3 B_llist$ ))(=> (fun_app$b (lstrict_prefix$a ?v3 )?v2 )(fun_app$b ?v0 ?v3 )))(fun_app$b ?v0 ?v2 )))(fun_app$b ?v0 ?v1 ))):named a9 ))
(assert (! (less$ (enat$ i$ )(llength$ xs$ )):named a10 ))
(assert (! (less$ (enat$ j$ )(llength$ xs$ )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$a ?v0 (lset$a ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$a ?v1 ))(= (lnth$a ?v1 ?v2 )?v0 ))))):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$ ?v1 ))(= (lnth$ ?v1 ?v2 )?v0 ))))):named a13 ))
(assert (! (forall ((?v0 B_llist$ ))(= (ldistinct$ ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$ ?v0 ))(and (less$ (enat$ ?v2 )(llength$ ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$ ?v0 ?v1 )(lnth$ ?v0 ?v2 ))))))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldistinct$a ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$a ?v0 ))(and (less$ (enat$ ?v2 )(llength$a ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$a ?v0 ?v1 )(lnth$a ?v0 ?v2 ))))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$a (lstrict_prefix$ ?v0 )?v1 )(less$ (llength$a ?v0 )(llength$a ?v1 )))):named a16 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (fun_app$b (lstrict_prefix$a ?v0 )?v1 )(less$ (llength$ ?v0 )(llength$ ?v1 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a19 ))
(assert (! (ldistinct$a (lmap$ f$ xs$ )):named a20 ))
(check-sat )
;(get-unsat-core )
