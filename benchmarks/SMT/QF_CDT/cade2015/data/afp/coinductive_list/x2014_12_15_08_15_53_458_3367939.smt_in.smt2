;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-datatypes ()((B_list$ (nil$ )(cons$ (hd$ B$ )(tl$ B_list$ )))(A_list$ (nil$a )(cons$a (hd$a A$ )(tl$a A_list$ )))))
(declare-fun p$ (A_llist$ B_llist$ )Bool )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun llist_of$ (B_list$ )B_llist$ )
(declare-fun llist_of$a (A_list$ )A_llist$ )
(assert (! (not (p$ xs$ ys$ )):named a0 ))
(assert (! (p$ lNil$ lNil$a ):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (lfinite$ ?v0 )(p$ ?v0 lNil$a ))(p$ (lCons$ ?v1 ?v0 )lNil$a ))):named a2 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ ))(=> (and (lfinite$a ?v0 )(p$ lNil$ ?v0 ))(p$ lNil$ (lCons$a ?v1 ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A$ )(?v3 B$ ))(=> (and (lfinite$ ?v0 )(and (lfinite$a ?v1 )(p$ ?v0 ?v1 )))(p$ (lCons$ ?v2 ?v0 )(lCons$a ?v3 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a12 ))
(assert (! (= (lfinite$ lNil$ )true ):named a13 ))
(assert (! (= (lfinite$a lNil$a )true ):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 B_llist$ ))(= (not (= ?v0 lNil$a ))(exists ((?v1 B$ )(?v2 B_llist$ ))(= ?v0 (lCons$a ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ ?v0 )(or (= ?v0 lNil$ )(exists ((?v1 A_llist$ )(?v2 A$ ))(and (= ?v0 (lCons$ ?v2 ?v1 ))(lfinite$ ?v1 )))))):named a17 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lfinite$a ?v0 )(or (= ?v0 lNil$a )(exists ((?v1 B_llist$ )(?v2 B$ ))(and (= ?v0 (lCons$a ?v2 ?v1 ))(lfinite$a ?v1 )))))):named a18 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a19 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (=> (= ?v0 lNil$a )false )(forall ((?v1 B$ )(?v2 B_llist$ ))(=> (= ?v0 (lCons$a ?v1 ?v2 ))false )))false )):named a20 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (lfinite$ ?v0 )(and (=> (= ?v0 lNil$ )false )(forall ((?v1 A_llist$ )(?v2 A$ ))(=> (and (= ?v0 (lCons$ ?v2 ?v1 ))(lfinite$ ?v1 ))false ))))false )):named a21 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (lfinite$a ?v0 )(and (=> (= ?v0 lNil$a )false )(forall ((?v1 B_llist$ )(?v2 B$ ))(=> (and (= ?v0 (lCons$a ?v2 ?v1 ))(lfinite$a ?v1 ))false ))))false )):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lfinite$ ?v0 )(lfinite$ (lCons$ ?v1 ?v0 )))):named a23 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ ))(=> (lfinite$a ?v0 )(lfinite$a (lCons$a ?v1 ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (= lNil$ (lCons$ ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(not (= lNil$a (lCons$a ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$a ?v0 ))):named a27 ))
(assert (! (forall ((?v0 B_list$ ))(lfinite$a (llist_of$ ?v0 ))):named a28 ))
(assert (! (lfinite$ lNil$ ):named a29 ))
(assert (! (lfinite$a lNil$a ):named a30 ))
(check-sat )
;(get-unsat-core )
