;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun m$ ()Nat$ )
(declare-fun p$ ()A_bool_fun$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun finite$ (Nat_set$ )Bool )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun infinity$ ()Enat$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(and (less$ (enat$ ?v0 )(llength$ xs$ ))(fun_app$a p$ (lnth$ xs$ ?v0 )))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (lfinite$ (fun_app$b (lfilter$ p$ )xs$ ))):named a1 ))
(assert (! (not (lfinite$ xs$ )):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$b (lfilter$ ?v0 )(fun_app$b (lfilter$ ?v0 )?v1 ))(fun_app$b (lfilter$ ?v0 )?v1 ))):named a3 ))
(assert (! (=> (lfinite$ xs$ )(lfinite$ (fun_app$b (lfilter$ p$ )xs$ ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (less_eq$ m$ ?v0 )(less$ (enat$ ?v0 )(llength$ xs$ )))(not (fun_app$a p$ (lnth$ xs$ ?v0 ))))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (lfinite$ ?v0 )(lfinite$ (fun_app$b (lfilter$ ?v1 )?v0 )))):named a6 ))
(assert (! (= (llength$ xs$ )infinity$ ):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (lfinite$ ?v0 )(= (fun_app$b (lfilter$ ?v1 )(lappend$ ?v0 ?v2 ))(lappend$ (fun_app$b (lfilter$ ?v1 )?v0 )(fun_app$b (lfilter$ ?v1 )?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (= (llength$ ?v0 )(enat$ ?v1 ))(lfinite$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$ ?v0 ))):named a12 ))
(assert (! (or (lfinite$ xs$ )(finite$ (collect$ uu$ ))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$b (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$a ?v0 ?v1 )(lCons$ ?v1 (fun_app$b (lfilter$ ?v0 )?v2 ))(fun_app$b (lfilter$ ?v0 )?v2 ))):pattern ((fun_app$b (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a16 ))
(assert (! (= (lfinite$ lNil$ )true ):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(not (lfinite$ (iterates$ ?v0 ?v1 )))):named a18 ))
(check-sat )
;(get-unsat-core )
