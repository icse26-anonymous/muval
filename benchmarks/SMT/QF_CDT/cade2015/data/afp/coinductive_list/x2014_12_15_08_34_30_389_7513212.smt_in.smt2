;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun p$ ()A_bool_fun$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ ()A_bool_fun$ )
(declare-fun uub$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun fun_app$d (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(declare-fun llist_all2$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(and (less$ (enat$ ?v0 )(llength$ xs$ ))(fun_app$a p$ (lnth$ xs$ ?v0 )))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$a (fun_app$b (uub$ ?v0 )?v1 )?v2 )(and (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$b (uub$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a uua$ ?v0 )true ):pattern ((fun_app$a uua$ ?v0 )))):named a2 ))
(assert (! (not (= (lfilter$ p$ xs$ )(lsublist$ xs$ (collect$ uu$ )))):named a3 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfilter$ uua$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v1 ?v2 ))(lfilter$ (fun_app$b (uub$ ?v0 )?v1 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(=> (and (ldistinct$ (lfilter$ ?v0 ?v1 ))(and (less$ (enat$ ?v2 )(llength$ ?v1 ))(and (less$ (enat$ ?v3 )(llength$ ?v1 ))(and (fun_app$a ?v0 ?v4 )(and (= (lnth$ ?v1 ?v2 )?v4 )(= (lnth$ ?v1 ?v3 )?v4 ))))))(= ?v3 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldistinct$ ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$ ?v0 ))(and (less$ (enat$ ?v2 )(llength$ ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$ ?v0 ?v1 )(lnth$ ?v0 ?v2 ))))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (lnth$ (lmap$ ?v2 ?v1 )?v0 )(fun_app$c ?v2 (lnth$ ?v1 ?v0 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat$ ))(=> (and (lprefix$ ?v0 ?v1 )(less$ (enat$ ?v2 )(llength$ ?v0 )))(= (lnth$ ?v0 ?v2 )(lnth$ ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ (ltakeWhile$ ?v1 ?v2 )))(= (lnth$ (ltakeWhile$ ?v1 ?v2 )?v0 )(lnth$ ?v2 ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$ ?v1 ))(= (lnth$ ?v1 ?v2 )?v0 ))))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (lnth$ (lappend$ ?v1 ?v2 )?v0 )(lnth$ ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (llist_all2$ ?v0 ?v1 ?v2 )(and (= (llength$ ?v1 )(llength$ ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v2 ))(fun_app$a (fun_app$d ?v0 (lnth$ ?v1 ?v3 ))(lnth$ ?v2 ?v3 ))))))):named a16 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$ ?v2 )))(fun_app$a (fun_app$d ?v0 (lnth$ ?v1 ?v3 ))(lnth$ ?v2 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a18 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a19 ))
(check-sat )
;(get-unsat-core )
