;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_a_llist_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_a_llist_llist_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_llist_a_llist_llist_llist_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-fun lNil$d ()A_llist_llist_llist_llist_llist$)
(declare-fun lhd$d (A_llist_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun ltl$d (A_llist_llist_llist_llist_llist$)A_llist_llist_llist_llist_llist$)
(declare-fun lCons$d (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_llist$ )A_llist_llist_llist_llist_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun yss$ ()A_llist_llist$ )
(declare-fun ltake$ (Enat$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun ltake$a (Enat$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun ltake$b (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$c (Enat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun transp$ (A_llist_llist_llist_llist_a_llist_llist_llist_llist_bool_fun_fun$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lconcat$ ()A_llist_llist_a_llist_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun lsorted$ (A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ A_llist_llist_llist_llist$ )Bool )
(declare-fun transp$a (A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ )Bool )
(declare-fun transp$b (A_llist_a_llist_bool_fun_fun$ )Bool )
(declare-fun transp$c (A_llist_llist_a_llist_llist_bool_fun_fun$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_llist_a_llist_fun$ A_llist_llist$ )A_llist$ )
(declare-fun fun_app$c (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$d (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$ )A_llist_llist_bool_fun$ )
(declare-fun fun_app$e (A_llist_llist_llist_llist_bool_fun$ A_llist_llist_llist_llist$ )Bool )
(declare-fun fun_app$f (A_llist_llist_llist_llist_a_llist_llist_llist_llist_bool_fun_fun$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist_bool_fun$ )
(declare-fun fun_app$g (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$ )Bool )
(declare-fun fun_app$h (A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ A_llist_llist_llist$ )A_llist_llist_llist_bool_fun$ )
(declare-fun lconcat$a ()A_llist_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ )
(declare-fun lconcat$b ()A_llist_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lconcat$c ()A_llist_llist_llist_a_llist_llist_fun$ )
(declare-fun lprefix$a ()A_llist_llist_a_llist_llist_bool_fun_fun$ )
(declare-fun lprefix$b ()A_llist_llist_llist_llist_a_llist_llist_llist_llist_bool_fun_fun$ )
(declare-fun lprefix$c ()A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ )
(declare-fun lprefix$d ()A_llist_llist_llist_llist_llist_a_llist_llist_llist_llist_llist_bool_fun_fun$ )
(declare-fun lsorted$a (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist_llist$ )Bool )
(declare-fun lsorted$b (A_a_bool_fun_fun$ A_llist$ )Bool )
(declare-fun lsorted$c (A_llist_a_llist_bool_fun_fun$ A_llist_llist$ )Bool )
(declare-fun monotone$ (A_llist_llist_llist_llist_llist_a_llist_llist_llist_llist_llist_bool_fun_fun$ A_llist_llist_llist_llist_a_llist_llist_llist_llist_bool_fun_fun$ A_llist_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ )Bool )
(declare-fun ldistinct$ (A_llist_llist_llist_llist$ )Bool )
(declare-fun monotone$a (A_llist_llist_llist_llist_a_llist_llist_llist_llist_bool_fun_fun$ A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ A_llist_llist_llist_llist_a_llist_llist_llist_fun$ )Bool )
(declare-fun monotone$b (A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist_llist_a_llist_llist_fun$ )Bool )
(declare-fun monotone$c (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_llist_a_llist_fun$ )Bool )
(declare-fun ldistinct$a (A_llist_llist_llist$ )Bool )
(declare-fun ldistinct$b (A_llist$ )Bool )
(declare-fun ldistinct$c (A_llist_llist$ )Bool )
(declare-fun finite_lprefix$ ()A_llist_llist_llist_llist_a_llist_llist_llist_llist_bool_fun_fun$ )
(declare-fun lstrict_prefix$ (A_llist_llist_llist_llist$ A_llist_llist_llist_llist$ )Bool )
(declare-fun finite_lprefix$a ()A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ )
(declare-fun finite_lprefix$b ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun finite_lprefix$c ()A_llist_llist_a_llist_llist_bool_fun_fun$ )
(declare-fun lstrict_prefix$a (A_llist_llist_llist$ A_llist_llist_llist$ )Bool )
(declare-fun lstrict_prefix$b (A_llist$ A_llist$ )Bool )
(declare-fun lstrict_prefix$c (A_llist_llist$ A_llist_llist$ )Bool )
(assert (! (not (fun_app$ (fun_app$a lprefix$ (fun_app$b lconcat$ xss$ ))(fun_app$b lconcat$ yss$ ))):named a0 ))
(assert (! (fun_app$c (fun_app$d lprefix$a xss$ )yss$ ):named a1 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ ))(fun_app$e (fun_app$f lprefix$b ?v0 )?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(fun_app$g (fun_app$h lprefix$c ?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(fun_app$c (fun_app$d lprefix$a ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ ))(fun_app$e (fun_app$f lprefix$b ?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(fun_app$g (fun_app$h lprefix$c ?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(fun_app$c (fun_app$d lprefix$a ?v0 )?v0 )):named a9 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$b ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$b ?v1 )?v0 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (fun_app$g (fun_app$h lprefix$c ?v0 )?v1 )(fun_app$g (fun_app$h lprefix$c ?v1 )?v0 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$a ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$b ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$b ?v1 )?v0 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (fun_app$g (fun_app$h lprefix$c ?v0 )?v1 )(fun_app$g (fun_app$h lprefix$c ?v1 )?v0 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$a ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ )(?v2 A_llist_llist_llist_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$b ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$b ?v2 )?v1 ))(or (fun_app$e (fun_app$f lprefix$b ?v0 )?v2 )(fun_app$e (fun_app$f lprefix$b ?v2 )?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (and (fun_app$g (fun_app$h lprefix$c ?v0 )?v1 )(fun_app$g (fun_app$h lprefix$c ?v2 )?v1 ))(or (fun_app$g (fun_app$h lprefix$c ?v0 )?v2 )(fun_app$g (fun_app$h lprefix$c ?v2 )?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v2 )?v1 ))(or (fun_app$ (fun_app$a lprefix$ ?v0 )?v2 )(fun_app$ (fun_app$a lprefix$ ?v2 )?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$a ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$a ?v2 )?v1 ))(or (fun_app$c (fun_app$d lprefix$a ?v0 )?v2 )(fun_app$c (fun_app$d lprefix$a ?v2 )?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ )(?v2 A_llist_llist_llist_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$b ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$b ?v1 )?v2 ))(fun_app$e (fun_app$f lprefix$b ?v0 )?v2 ))):named a22 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (and (fun_app$g (fun_app$h lprefix$c ?v0 )?v1 )(fun_app$g (fun_app$h lprefix$c ?v1 )?v2 ))(fun_app$g (fun_app$h lprefix$c ?v0 )?v2 ))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v2 ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v2 ))):named a24 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$a ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$a ?v1 )?v2 ))(fun_app$c (fun_app$d lprefix$a ?v0 )?v2 ))):named a25 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ )(?v2 A_llist_llist_llist_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$b ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$b ?v1 )?v2 ))(fun_app$e (fun_app$f lprefix$b ?v0 )?v2 ))):named a26 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (and (fun_app$g (fun_app$h lprefix$c ?v0 )?v1 )(fun_app$g (fun_app$h lprefix$c ?v1 )?v2 ))(fun_app$g (fun_app$h lprefix$c ?v0 )?v2 ))):named a27 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v2 ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v2 ))):named a28 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$a ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$a ?v1 )?v2 ))(fun_app$c (fun_app$d lprefix$a ?v0 )?v2 ))):named a29 ))
(assert (! (monotone$ lprefix$d lprefix$b lconcat$a ):named a30 ))
(assert (! (monotone$a lprefix$b lprefix$c lconcat$b ):named a31 ))
(assert (! (monotone$b lprefix$c lprefix$a lconcat$c ):named a32 ))
(assert (! (monotone$c lprefix$a lprefix$ lconcat$ ):named a33 ))
(assert (! (= finite_lprefix$ lprefix$b ):named a34 ))
(assert (! (= finite_lprefix$a lprefix$c ):named a35 ))
(assert (! (= finite_lprefix$b lprefix$ ):named a36 ))
(assert (! (= finite_lprefix$c lprefix$a ):named a37 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(! (= (lstrict_prefix$ ?v0 ?v1 )(and (fun_app$e (fun_app$f lprefix$b ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((lstrict_prefix$ ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lstrict_prefix$a ?v0 ?v1 )(and (fun_app$g (fun_app$h lprefix$c ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((lstrict_prefix$a ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (lstrict_prefix$b ?v0 ?v1 )(and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((lstrict_prefix$b ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(! (= (lstrict_prefix$c ?v0 ?v1 )(and (fun_app$c (fun_app$d lprefix$a ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((lstrict_prefix$c ?v0 ?v1 )))):named a41 ))
(assert (! (transp$ lprefix$b ):named a42 ))
(assert (! (transp$a lprefix$c ):named a43 ))
(assert (! (transp$b lprefix$ ):named a44 ))
(assert (! (transp$c lprefix$a ):named a45 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ ))(! (= (fun_app$e (fun_app$f lprefix$b lNil$c )?v0 )true ):pattern ((fun_app$e (fun_app$f lprefix$b lNil$c )?v0 )))):named a46 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(! (= (fun_app$g (fun_app$h lprefix$c lNil$b )?v0 )true ):pattern ((fun_app$g (fun_app$h lprefix$c lNil$b )?v0 )))):named a47 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (fun_app$a lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$ (fun_app$a lprefix$ lNil$ )?v0 )))):named a48 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$c (fun_app$d lprefix$a lNil$a )?v0 )true ):pattern ((fun_app$c (fun_app$d lprefix$a lNil$a )?v0 )))):named a49 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ )(?v2 A_llist_llist_llist$ )(?v3 A_llist_llist_llist_llist$ ))(! (= (fun_app$e (fun_app$f lprefix$b (lCons$c ?v0 ?v1 ))(lCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$e (fun_app$f lprefix$b ?v1 )?v3 ))):pattern ((fun_app$e (fun_app$f lprefix$b (lCons$c ?v0 ?v1 ))(lCons$c ?v2 ?v3 ))))):named a50 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(! (= (fun_app$g (fun_app$h lprefix$c (lCons$b ?v0 ?v1 ))(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$g (fun_app$h lprefix$c ?v1 )?v3 ))):pattern ((fun_app$g (fun_app$h lprefix$c (lCons$b ?v0 ?v1 ))(lCons$b ?v2 ?v3 ))))):named a51 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$a lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v3 ))):pattern ((fun_app$ (fun_app$a lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a52 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(! (= (fun_app$c (fun_app$d lprefix$a (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$c (fun_app$d lprefix$a ?v1 )?v3 ))):pattern ((fun_app$c (fun_app$d lprefix$a (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))))):named a53 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ )(?v2 A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ ))(=> (and (fun_app$e (fun_app$f lprefix$b ?v0 )?v1 )(lsorted$ ?v2 ?v1 ))(lsorted$ ?v2 ?v0 ))):named a54 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_a_llist_llist_bool_fun_fun$ ))(=> (and (fun_app$g (fun_app$h lprefix$c ?v0 )?v1 )(lsorted$a ?v2 ?v1 ))(lsorted$a ?v2 ?v0 ))):named a55 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(lsorted$b ?v2 ?v1 ))(lsorted$b ?v2 ?v0 ))):named a56 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_bool_fun_fun$ ))(=> (and (fun_app$c (fun_app$d lprefix$a ?v0 )?v1 )(lsorted$c ?v2 ?v1 ))(lsorted$c ?v2 ?v0 ))):named a57 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(=> (and (ldistinct$ ?v0 )(fun_app$e (fun_app$f lprefix$b ?v1 )?v0 ))(ldistinct$ ?v1 ))):named a58 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (ldistinct$a ?v0 )(fun_app$g (fun_app$h lprefix$c ?v1 )?v0 ))(ldistinct$a ?v1 ))):named a59 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (ldistinct$b ?v0 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v0 ))(ldistinct$b ?v1 ))):named a60 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (ldistinct$c ?v0 )(fun_app$c (fun_app$d lprefix$a ?v1 )?v0 ))(ldistinct$c ?v1 ))):named a61 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_llist_llist_llist$ ))(fun_app$e (fun_app$f lprefix$b (ltake$ ?v0 ?v1 ))?v1 )):named a62 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_llist_llist$ ))(fun_app$g (fun_app$h lprefix$c (ltake$a ?v0 ?v1 ))?v1 )):named a63 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(fun_app$ (fun_app$a lprefix$ (ltake$b ?v0 ?v1 ))?v1 )):named a64 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_llist$ ))(fun_app$c (fun_app$d lprefix$a (ltake$c ?v0 ?v1 ))?v1 )):named a65 ))
(check-sat )
;(get-unsat-core )
