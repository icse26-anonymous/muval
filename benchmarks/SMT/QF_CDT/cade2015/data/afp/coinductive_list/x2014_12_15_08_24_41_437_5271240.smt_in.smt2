;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun uub$ ()B_b_bool_fun_fun$ )
(declare-fun uuc$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun lmap$ (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$a (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$b (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$c (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun member$ (B_llist$ B_llist_set$ )Bool )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun lappend$ (B_llist$ B_llist$ )B_llist$ )
(declare-fun lprefix$ (B_llist$ B_llist$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$h (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$i (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$j (B_llist_a_llist_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$k (A_llist_b_llist_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$l (B_a_fun$ B$ )A$ )
(declare-fun fun_app$m (B_b_fun$ B$ )B$ )
(declare-fun fun_app$n (A_a_fun$ A$ )A$ )
(declare-fun fun_app$o (A_b_fun$ A$ )B$ )
(declare-fun lappend$a (A_llist$ A_llist$ )A_llist$ )
(declare-fun lprefix$a (A_llist$ A_llist$ )Bool )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun ltakeWhile$ (B_bool_fun$ B_llist$ )B_llist$ )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun ltakeWhile$a (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uuc$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$f (fun_app$g uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uu$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (fun_app$d (fun_app$h p$ (lhd$ xs$ ))(lhd$a ys$ ))):named a4 ))
(assert (! (fun_app$ (llist_all2$ p$ xs$ )ys$ ):named a5 ))
(assert (! (not (lnull$ xs$ )):named a6 ))
(assert (! (= (llist_all2$a uu$ )uua$ ):named a7 ))
(assert (! (= (llist_all2$b uub$ )uuc$ ):named a8 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_bool_fun$ ))(=> (and (=> (or (lnull$a ?v0 )(not (fun_app$d ?v1 (lhd$a ?v0 ))))false )(=> (and (not (lnull$a ?v0 ))(fun_app$d ?v1 (lhd$a ?v0 )))false ))false )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$f ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$f ?v1 (lhd$ ?v0 )))false ))false )):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a11 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a14 ))
(assert (! (forall ((?v0 B_llist_set$ ))(=> (and (=> (forall ((?v1 B_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 )))false )(=> (not (forall ((?v1 B_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 ))))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a16 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (=> (and (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a18 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (=> (lnull$a ?v0 )false )(=> (not (lnull$a ?v0 ))false ))false )):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a20 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$a ?v3 )?v1 )?v2 ))):named a21 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (fun_app$b (llist_all2$c ?v0 ?v1 )?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (fun_app$f (fun_app$i ?v0 ?v4 )?v5 )(fun_app$f (fun_app$i ?v3 ?v4 )?v5 ))))(fun_app$b (llist_all2$c ?v3 ?v1 )?v2 ))):named a22 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v4 )?v5 )(fun_app$d (fun_app$e ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$b ?v3 )?v1 )?v2 ))):named a23 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$d (fun_app$h ?v0 ?v4 )?v5 )(fun_app$d (fun_app$h ?v3 ?v4 )?v5 ))))(fun_app$ (llist_all2$ ?v3 ?v1 )?v2 ))):named a24 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (fun_app$b (llist_all2$c ?v0 ?v1 )?v2 )(= (lnull$a ?v1 )(lnull$ ?v2 )))):named a25 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v2 )(= (lnull$a ?v1 )(lnull$a ?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(= (lnull$ ?v1 )(lnull$ ?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(= (lnull$ ?v1 )(lnull$a ?v2 )))):named a28 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v2 )(and (= (lnull$a ?v1 )(lnull$a ?v2 ))(=> (and (not (lnull$a ?v1 ))(not (lnull$a ?v2 )))(and (fun_app$d (fun_app$e ?v0 (lhd$a ?v1 ))(lhd$a ?v2 ))(fun_app$ (fun_app$a (llist_all2$b ?v0 )(ltl$a ?v1 ))(ltl$a ?v2 ))))))):named a29 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (fun_app$b (llist_all2$c ?v0 ?v1 )?v2 )(and (= (lnull$a ?v1 )(lnull$ ?v2 ))(=> (and (not (lnull$a ?v1 ))(not (lnull$ ?v2 )))(and (fun_app$f (fun_app$i ?v0 (lhd$a ?v1 ))(lhd$ ?v2 ))(fun_app$b (llist_all2$c ?v0 (ltl$a ?v1 ))(ltl$ ?v2 ))))))):named a30 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(and (= (lnull$ ?v1 )(lnull$ ?v2 ))(=> (and (not (lnull$ ?v1 ))(not (lnull$ ?v2 )))(and (fun_app$f (fun_app$g ?v0 (lhd$ ?v1 ))(lhd$ ?v2 ))(fun_app$b (fun_app$c (llist_all2$a ?v0 )(ltl$ ?v1 ))(ltl$ ?v2 ))))))):named a31 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(and (= (lnull$ ?v1 )(lnull$a ?v2 ))(=> (and (not (lnull$ ?v1 ))(not (lnull$a ?v2 )))(and (fun_app$d (fun_app$h ?v0 (lhd$ ?v1 ))(lhd$a ?v2 ))(fun_app$ (llist_all2$ ?v0 (ltl$ ?v1 ))(ltl$a ?v2 ))))))):named a32 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(and (forall ((?v4 B_llist$ )(?v5 B_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v5 )(= (lnull$a ?v4 )(lnull$a ?v5 ))))(forall ((?v4 B_llist$ )(?v5 B_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v4 )?v5 )(and (not (lnull$a ?v4 ))(not (lnull$a ?v5 ))))(and (fun_app$d (fun_app$e ?v3 (lhd$a ?v4 ))(lhd$a ?v5 ))(or (fun_app$ (fun_app$a ?v0 (ltl$a ?v4 ))(ltl$a ?v5 ))(fun_app$ (fun_app$a (llist_all2$b ?v3 )(ltl$a ?v4 ))(ltl$a ?v5 ))))))))(fun_app$ (fun_app$a (llist_all2$b ?v3 )?v1 )?v2 ))):named a33 ))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$j ?v0 ?v1 )?v2 )(and (forall ((?v4 B_llist$ )(?v5 A_llist$ ))(=> (fun_app$b (fun_app$j ?v0 ?v4 )?v5 )(= (lnull$a ?v4 )(lnull$ ?v5 ))))(forall ((?v4 B_llist$ )(?v5 A_llist$ ))(=> (and (fun_app$b (fun_app$j ?v0 ?v4 )?v5 )(and (not (lnull$a ?v4 ))(not (lnull$ ?v5 ))))(and (fun_app$f (fun_app$i ?v3 (lhd$a ?v4 ))(lhd$ ?v5 ))(or (fun_app$b (fun_app$j ?v0 (ltl$a ?v4 ))(ltl$ ?v5 ))(fun_app$b (llist_all2$c ?v3 (ltl$a ?v4 ))(ltl$ ?v5 ))))))))(fun_app$b (llist_all2$c ?v3 ?v1 )?v2 ))):named a34 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(and (forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (fun_app$b (fun_app$c ?v0 ?v4 )?v5 )(= (lnull$ ?v4 )(lnull$ ?v5 ))))(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (and (fun_app$b (fun_app$c ?v0 ?v4 )?v5 )(and (not (lnull$ ?v4 ))(not (lnull$ ?v5 ))))(and (fun_app$f (fun_app$g ?v3 (lhd$ ?v4 ))(lhd$ ?v5 ))(or (fun_app$b (fun_app$c ?v0 (ltl$ ?v4 ))(ltl$ ?v5 ))(fun_app$b (fun_app$c (llist_all2$a ?v3 )(ltl$ ?v4 ))(ltl$ ?v5 ))))))))(fun_app$b (fun_app$c (llist_all2$a ?v3 )?v1 )?v2 ))):named a35 ))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$k ?v0 ?v1 )?v2 )(and (forall ((?v4 A_llist$ )(?v5 B_llist$ ))(=> (fun_app$ (fun_app$k ?v0 ?v4 )?v5 )(= (lnull$ ?v4 )(lnull$a ?v5 ))))(forall ((?v4 A_llist$ )(?v5 B_llist$ ))(=> (and (fun_app$ (fun_app$k ?v0 ?v4 )?v5 )(and (not (lnull$ ?v4 ))(not (lnull$a ?v5 ))))(and (fun_app$d (fun_app$h ?v3 (lhd$ ?v4 ))(lhd$a ?v5 ))(or (fun_app$ (fun_app$k ?v0 (ltl$ ?v4 ))(ltl$a ?v5 ))(fun_app$ (llist_all2$ ?v3 (ltl$ ?v4 ))(ltl$a ?v5 ))))))))(fun_app$ (llist_all2$ ?v3 ?v1 )?v2 ))):named a36 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v4 B_llist$ )(?v5 B_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v5 )(and (= (lnull$a ?v4 )(lnull$a ?v5 ))(=> (and (not (lnull$a ?v4 ))(not (lnull$a ?v5 )))(and (fun_app$d (fun_app$e ?v3 (lhd$a ?v4 ))(lhd$a ?v5 ))(fun_app$ (fun_app$a ?v0 (ltl$a ?v4 ))(ltl$a ?v5 ))))))))(fun_app$ (fun_app$a (llist_all2$b ?v3 )?v1 )?v2 ))):named a37 ))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$j ?v0 ?v1 )?v2 )(forall ((?v4 B_llist$ )(?v5 A_llist$ ))(=> (fun_app$b (fun_app$j ?v0 ?v4 )?v5 )(and (= (lnull$a ?v4 )(lnull$ ?v5 ))(=> (and (not (lnull$a ?v4 ))(not (lnull$ ?v5 )))(and (fun_app$f (fun_app$i ?v3 (lhd$a ?v4 ))(lhd$ ?v5 ))(fun_app$b (fun_app$j ?v0 (ltl$a ?v4 ))(ltl$ ?v5 ))))))))(fun_app$b (llist_all2$c ?v3 ?v1 )?v2 ))):named a38 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (fun_app$b (fun_app$c ?v0 ?v4 )?v5 )(and (= (lnull$ ?v4 )(lnull$ ?v5 ))(=> (and (not (lnull$ ?v4 ))(not (lnull$ ?v5 )))(and (fun_app$f (fun_app$g ?v3 (lhd$ ?v4 ))(lhd$ ?v5 ))(fun_app$b (fun_app$c ?v0 (ltl$ ?v4 ))(ltl$ ?v5 ))))))))(fun_app$b (fun_app$c (llist_all2$a ?v3 )?v1 )?v2 ))):named a39 ))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$k ?v0 ?v1 )?v2 )(forall ((?v4 A_llist$ )(?v5 B_llist$ ))(=> (fun_app$ (fun_app$k ?v0 ?v4 )?v5 )(and (= (lnull$ ?v4 )(lnull$a ?v5 ))(=> (and (not (lnull$ ?v4 ))(not (lnull$a ?v5 )))(and (fun_app$d (fun_app$h ?v3 (lhd$ ?v4 ))(lhd$a ?v5 ))(fun_app$ (fun_app$k ?v0 (ltl$ ?v4 ))(ltl$a ?v5 ))))))))(fun_app$ (llist_all2$ ?v3 ?v1 )?v2 ))):named a40 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(= (not (lnull$a (ltakeWhile$ ?v0 ?v1 )))(and (not (lnull$a ?v1 ))(fun_app$d ?v0 (lhd$a ?v1 ))))):named a41 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (not (lnull$ (ltakeWhile$a ?v0 ?v1 )))(and (not (lnull$ ?v1 ))(fun_app$f ?v0 (lhd$ ?v1 ))))):named a42 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(= (lnull$a (ltakeWhile$ ?v0 ?v1 ))(or (lnull$a ?v1 )(not (fun_app$d ?v0 (lhd$a ?v1 )))))):named a43 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (ltakeWhile$a ?v0 ?v1 ))(or (lnull$ ?v1 )(not (fun_app$f ?v0 (lhd$ ?v1 )))))):named a44 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(= (lnull$a (ltakeWhile$ ?v0 ?v1 ))(=> (not (lnull$a ?v1 ))(not (fun_app$d ?v0 (lhd$a ?v1 )))))):named a45 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (ltakeWhile$a ?v0 ?v1 ))(=> (not (lnull$ ?v1 ))(not (fun_app$f ?v0 (lhd$ ?v1 )))))):named a46 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lhd$a (lappend$ ?v0 ?v1 ))(ite (lnull$a ?v0 )(lhd$a ?v1 )(lhd$a ?v0 )))):named a47 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lhd$ (lappend$a ?v0 ?v1 ))(ite (lnull$ ?v0 )(lhd$ ?v1 )(lhd$ ?v0 )))):named a48 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_fun$ ))(=> (not (lnull$a ?v0 ))(= (lhd$ (lmap$ ?v1 ?v0 ))(fun_app$l ?v1 (lhd$a ?v0 ))))):named a49 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_b_fun$ ))(=> (not (lnull$a ?v0 ))(= (lhd$a (lmap$a ?v1 ?v0 ))(fun_app$m ?v1 (lhd$a ?v0 ))))):named a50 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ ))(=> (not (lnull$ ?v0 ))(= (lhd$ (lmap$b ?v1 ?v0 ))(fun_app$n ?v1 (lhd$ ?v0 ))))):named a51 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_fun$ ))(=> (not (lnull$ ?v0 ))(= (lhd$a (lmap$c ?v1 ?v0 ))(fun_app$o ?v1 (lhd$ ?v0 ))))):named a52 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(not (lnull$a ?v0 )))(= (lhd$a ?v0 )(lhd$a ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(not (lnull$ ?v0 )))(= (lhd$ ?v0 )(lhd$ ?v1 )))):named a54 ))
(check-sat )
;(get-unsat-core )
