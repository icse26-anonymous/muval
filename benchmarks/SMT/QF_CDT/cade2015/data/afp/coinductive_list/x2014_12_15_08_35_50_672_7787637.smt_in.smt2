;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun last$ (A_list$ )A$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun sublist$ (A_list$ Nat_set$ )A_list$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun inf_llist$ (Nat_a_fun$ )A_llist$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A_list$ ))(=> (= xs$ (llist_of$ ?v0 ))thesis$ )):named a1 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(=> (= xs$ (inf_llist$ ?v0 ))thesis$ )):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun$ ))(= (= (inf_llist$ ?v0 )(inf_llist$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_list$ ))(=> (= xs$ (llist_of$ ?v0 ))thesis$ )):named a5 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(=> (= xs$ (inf_llist$ ?v0 ))thesis$ )):named a6 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_a_fun$ ))(not (= (llist_of$ ?v0 )(inf_llist$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a8 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_llist$ ))(= (lprefix$ (inf_llist$ ?v0 )?v1 )(= ?v1 (inf_llist$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat$ ))(= (fun_app$ (lnth$ (inf_llist$ ?v0 ))?v1 )(fun_app$ ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (= (inf_llist$ ?v0 )lNil$ ))):named a11 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (lnull$ (inf_llist$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (lfinite$ (inf_llist$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_set$ ))(= (lsublist$ (llist_of$ ?v0 )?v1 )(llist_of$ (sublist$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_list$ ))(= (llast$ (llist_of$ ?v0 ))(last$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(= (lhd$ (inf_llist$ ?v0 ))(fun_app$ ?v0 zero$ ))):named a17 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a18 ))
(check-sat )
;(get-unsat-core )
