;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_b_fun$ 0 )
(declare-sort Nat_a_b_prod_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_llist_b_a_prod_llist_fun$ 0 )
(declare-sort B_llist_a_b_prod_llist_fun$ 0 )
(declare-sort B_llist_b_b_prod_llist_fun$ 0 )
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_fun$ 0 )
(declare-sort B_a_prod_llist_b_a_prod_llist_fun$ 0 )
(declare-sort B_b_prod_llist_b_b_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_a_b_prod_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_b_a_b_prod_prod_llist_fun$ 0 )
(declare-sort A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ 0 )
(declare-sort B_a_b_prod_prod_llist_b_a_b_prod_prod_llist_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))(B_list$ (nil$a )(cons$a (hd$a B$ )(tl$a B_list$ )))(A_b_prod_list$ (nil$b )(cons$b (hd$b A_b_prod$ )(tl$b A_b_prod_list$ )))(Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))(A_a_prod$ (pair$a (fst$a A$ )(snd$a A$ )))))
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$c ()A_a_prod_llist$)
(declare-fun lhd$c (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$c (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$c (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((B_a_prod$ (pair$b (fst$b B$ )(snd$b A$ )))))
(declare-sort B_a_prod_llist$ 0)
(declare-fun lNil$d ()B_a_prod_llist$)
(declare-fun lhd$d (B_a_prod_llist$)B_a_prod$)
(declare-fun ltl$d (B_a_prod_llist$)B_a_prod_llist$)
(declare-fun lCons$d (B_a_prod$ B_a_prod_llist$ )B_a_prod_llist$)
(declare-datatypes ()((B_b_prod$ (pair$c (fst$c B$ )(snd$c B$ )))))
(declare-sort B_b_prod_llist$ 0)
(declare-fun lNil$e ()B_b_prod_llist$)
(declare-fun lhd$e (B_b_prod_llist$)B_b_prod$)
(declare-fun ltl$e (B_b_prod_llist$)B_b_prod_llist$)
(declare-fun lCons$e (B_b_prod$ B_b_prod_llist$ )B_b_prod_llist$)
(declare-datatypes ()((A_b_prod_a_prod$ (pair$d (fst$d A_b_prod$ )(snd$d A$ )))))
(declare-sort A_b_prod_a_prod_llist$ 0)
(declare-fun lNil$f ()A_b_prod_a_prod_llist$)
(declare-fun lhd$f (A_b_prod_a_prod_llist$)A_b_prod_a_prod$)
(declare-fun ltl$f (A_b_prod_a_prod_llist$)A_b_prod_a_prod_llist$)
(declare-fun lCons$f (A_b_prod_a_prod$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$)
(declare-datatypes ()((A_b_prod_b_prod$ (pair$e (fst$e A_b_prod$ )(snd$e B$ )))))
(declare-sort A_b_prod_b_prod_llist$ 0)
(declare-fun lNil$g ()A_b_prod_b_prod_llist$)
(declare-fun lhd$g (A_b_prod_b_prod_llist$)A_b_prod_b_prod$)
(declare-fun ltl$g (A_b_prod_b_prod_llist$)A_b_prod_b_prod_llist$)
(declare-fun lCons$g (A_b_prod_b_prod$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$)
(declare-datatypes ()((A_a_b_prod_prod$ (pair$f (fst$f A$ )(snd$f A_b_prod$ )))))
(declare-sort A_a_b_prod_prod_llist$ 0)
(declare-fun lNil$h ()A_a_b_prod_prod_llist$)
(declare-fun lhd$h (A_a_b_prod_prod_llist$)A_a_b_prod_prod$)
(declare-fun ltl$h (A_a_b_prod_prod_llist$)A_a_b_prod_prod_llist$)
(declare-fun lCons$h (A_a_b_prod_prod$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$)
(declare-datatypes ()((B_a_b_prod_prod$ (pair$g (fst$g B$ )(snd$g A_b_prod$ )))))
(declare-sort B_a_b_prod_prod_llist$ 0)
(declare-fun lNil$i ()B_a_b_prod_prod_llist$)
(declare-fun lhd$i (B_a_b_prod_prod_llist$)B_a_b_prod_prod$)
(declare-fun ltl$i (B_a_b_prod_prod_llist$)B_a_b_prod_prod_llist$)
(declare-fun lCons$i (B_a_b_prod_prod$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$)
(declare-datatypes ()((A_b_prod_a_b_prod_prod$ (pair$h (fst$h A_b_prod$ )(snd$h A_b_prod$ )))))
(declare-sort A_b_prod_a_b_prod_prod_llist$ 0)
(declare-fun lNil$j ()A_b_prod_a_b_prod_prod_llist$)
(declare-fun lhd$j (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod$)
(declare-fun ltl$j (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod_llist$)
(declare-fun lCons$j (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$)
(declare-datatypes ()((A_b_b_prod_prod$ (pair$i (fst$i A$ )(snd$i B_b_prod$ )))))
(declare-sort A_b_b_prod_prod_llist$ 0)
(declare-fun lNil$k ()A_b_b_prod_prod_llist$)
(declare-fun lhd$k (A_b_b_prod_prod_llist$)A_b_b_prod_prod$)
(declare-fun ltl$k (A_b_b_prod_prod_llist$)A_b_b_prod_prod_llist$)
(declare-fun lCons$k (A_b_b_prod_prod$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$)
(declare-datatypes ()((B_a_b_prod_prod_list$ (nil$c )(cons$c (hd$c B_a_b_prod_prod$ )(tl$c B_a_b_prod_prod_list$ )))(B_b_prod_list$ (nil$d )(cons$d (hd$d B_b_prod$ )(tl$d B_b_prod_list$ )))(B_a_prod_list$ (nil$e )(cons$e (hd$e B_a_prod$ )(tl$e B_a_prod_list$ )))(A_a_b_prod_prod_list$ (nil$f )(cons$f (hd$f A_a_b_prod_prod$ )(tl$f A_a_b_prod_prod_list$ )))(A_a_prod_list$ (nil$g )(cons$g (hd$g A_a_prod$ )(tl$g A_a_prod_list$ )))))
(declare-fun xs$ ()A_list$ )
(declare-fun ys$ ()B_list$ )
(declare-fun nth$ (A_list$ )Nat_a_fun$ )
(declare-fun zip$ (A_list$ B_list$ )A_b_prod_list$ )
(declare-fun drop$ (Nat$ B_a_b_prod_prod_list$ )B_a_b_prod_prod_list$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun lzip$ (A_llist$ )B_llist_a_b_prod_llist_fun$ )
(declare-fun nth$a (B_list$ )Nat_b_fun$ )
(declare-fun nth$b (A_b_prod_list$ )Nat_a_b_prod_fun$ )
(declare-fun drop$a (Nat$ B_b_prod_list$ )B_b_prod_list$ )
(declare-fun drop$b (Nat$ B_a_prod_list$ )B_a_prod_list$ )
(declare-fun drop$c (Nat$ A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun drop$d (Nat$ A_a_prod_list$ )A_a_prod_list$ )
(declare-fun drop$e (Nat$ A_list$ )A_list$ )
(declare-fun drop$f (Nat$ B_list$ )B_list$ )
(declare-fun drop$g (Nat$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun ldrop$ (Enat$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun lnth$a (B_llist$ )Nat_b_fun$ )
(declare-fun lnth$b (A_b_prod_llist$ )Nat_a_b_prod_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lzip$a (A_llist$ )A_llist_a_a_prod_llist_fun$ )
(declare-fun lzip$b (B_llist$ )A_llist_b_a_prod_llist_fun$ )
(declare-fun lzip$c (B_llist$ )B_llist_b_b_prod_llist_fun$ )
(declare-fun lzip$d (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$e (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$f (A_llist$ )A_b_prod_llist_a_a_b_prod_prod_llist_fun$ )
(declare-fun lzip$g (B_llist$ )A_b_prod_llist_b_a_b_prod_prod_llist_fun$ )
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun ldrop$a (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ldrop$b (Enat$ )B_llist_b_llist_fun$ )
(declare-fun ldrop$c (Enat$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun ldrop$d (Enat$ )B_a_prod_llist_b_a_prod_llist_fun$ )
(declare-fun ldrop$e (Enat$ )B_b_prod_llist_b_b_prod_llist_fun$ )
(declare-fun ldrop$f (Enat$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun ldrop$g (Enat$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun ldrop$h (Enat$ )A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ )
(declare-fun ldrop$i (Enat$ )B_a_b_prod_prod_llist_b_a_b_prod_prod_llist_fun$ )
(declare-fun ldrop$j (Enat$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun ldrop$k (Enat$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun ldropn$ (Nat$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun lnull$b (A_b_prod_llist$ )Bool )
(declare-fun fun_app$ (B_llist_a_b_prod_llist_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun ldropn$a (Nat$ )A_llist_a_llist_fun$ )
(declare-fun ldropn$b (Nat$ )B_llist_b_llist_fun$ )
(declare-fun ldropn$c (Nat$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun ldropn$d (Nat$ )B_a_prod_llist_b_a_prod_llist_fun$ )
(declare-fun ldropn$e (Nat$ )B_b_prod_llist_b_b_prod_llist_fun$ )
(declare-fun ldropn$f (Nat$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun ldropn$g (Nat$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun ldropn$h (Nat$ )A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ )
(declare-fun ldropn$i (Nat$ )B_a_b_prod_prod_llist_b_a_b_prod_prod_llist_fun$ )
(declare-fun ldropn$j (Nat$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun ldropn$k (Nat$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun fun_app$a (A_b_prod_llist_a_b_prod_llist_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$c (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$d (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$e (A_llist_a_a_prod_llist_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$f (B_a_prod_llist_b_a_prod_llist_fun$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun fun_app$g (A_llist_b_a_prod_llist_fun$ A_llist$ )B_a_prod_llist$ )
(declare-fun fun_app$h (B_b_prod_llist_b_b_prod_llist_fun$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun fun_app$i (B_llist_b_b_prod_llist_fun$ B_llist$ )B_b_prod_llist$ )
(declare-fun fun_app$j (A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun fun_app$k (A_b_prod_llist_a_a_b_prod_prod_llist_fun$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun fun_app$l (B_a_b_prod_prod_llist_b_a_b_prod_prod_llist_fun$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun fun_app$m (A_b_prod_llist_b_a_b_prod_prod_llist_fun$ A_b_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun lfinite$b (A_b_prod_llist$ )Bool )
(declare-fun list_of$a (B_llist$ )B_list$ )
(declare-fun list_of$b (A_b_prod_llist$ )A_b_prod_list$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun llist_of$a (B_list$ )B_llist$ )
(declare-fun llist_of$b (A_b_prod_list$ )A_b_prod_llist$ )
(declare-fun llist_of$c (B_a_b_prod_prod_list$ )B_a_b_prod_prod_llist$ )
(declare-fun llist_of$d (B_b_prod_list$ )B_b_prod_llist$ )
(declare-fun llist_of$e (B_a_prod_list$ )B_a_prod_llist$ )
(declare-fun llist_of$f (A_a_b_prod_prod_list$ )A_a_b_prod_prod_llist$ )
(declare-fun llist_of$g (A_a_prod_list$ )A_a_prod_llist$ )
(assert (! (not (= (fun_app$ (lzip$ (llist_of$ xs$ ))(llist_of$a ys$ ))(llist_of$b (zip$ xs$ ys$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= (llist_of$b ?v0 )(llist_of$b ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 B_list$ ))(= (list_of$a (llist_of$a ?v0 ))?v0 )):named a5 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (list_of$b (llist_of$b ?v0 ))?v0 )):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 B_list$ ))(lfinite$a (llist_of$a ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(lfinite$b (llist_of$b ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a10 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (lfinite$a ?v0 )(= (llist_of$a (list_of$a ?v0 ))?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(=> (lfinite$b ?v0 )(= (llist_of$b (list_of$b ?v0 ))?v0 ))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (fun_app$a (ldrop$ ?v0 )(fun_app$ (lzip$ ?v1 )?v2 ))(fun_app$ (lzip$ (fun_app$b (ldrop$a ?v0 )?v1 ))(fun_app$c (ldrop$b ?v0 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$d (ldrop$c ?v0 )(fun_app$e (lzip$a ?v1 )?v2 ))(fun_app$e (lzip$a (fun_app$b (ldrop$a ?v0 )?v1 ))(fun_app$b (ldrop$a ?v0 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (fun_app$f (ldrop$d ?v0 )(fun_app$g (lzip$b ?v1 )?v2 ))(fun_app$g (lzip$b (fun_app$c (ldrop$b ?v0 )?v1 ))(fun_app$b (ldrop$a ?v0 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$h (ldrop$e ?v0 )(fun_app$i (lzip$c ?v1 )?v2 ))(fun_app$i (lzip$c (fun_app$c (ldrop$b ?v0 )?v1 ))(fun_app$c (ldrop$b ?v0 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 A_llist$ ))(= (ldrop$f ?v0 (lzip$d ?v1 ?v2 ))(lzip$d (fun_app$a (ldrop$ ?v0 )?v1 )(fun_app$b (ldrop$a ?v0 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 B_llist$ ))(= (ldrop$g ?v0 (lzip$e ?v1 ?v2 ))(lzip$e (fun_app$a (ldrop$ ?v0 )?v1 )(fun_app$c (ldrop$b ?v0 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$j (ldrop$h ?v0 )(fun_app$k (lzip$f ?v1 )?v2 ))(fun_app$k (lzip$f (fun_app$b (ldrop$a ?v0 )?v1 ))(fun_app$a (ldrop$ ?v0 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$l (ldrop$i ?v0 )(fun_app$m (lzip$g ?v1 )?v2 ))(fun_app$m (lzip$g (fun_app$c (ldrop$b ?v0 )?v1 ))(fun_app$a (ldrop$ ?v0 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(= (ldrop$j ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (fun_app$a (ldrop$ ?v0 )?v1 )(fun_app$a (ldrop$ ?v0 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 B_b_prod_llist$ ))(= (ldrop$k ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (fun_app$b (ldrop$a ?v0 )?v1 )(fun_app$h (ldrop$e ?v0 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (fun_app$a (ldropn$ ?v0 )(fun_app$ (lzip$ ?v1 )?v2 ))(fun_app$ (lzip$ (fun_app$b (ldropn$a ?v0 )?v1 ))(fun_app$c (ldropn$b ?v0 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$d (ldropn$c ?v0 )(fun_app$e (lzip$a ?v1 )?v2 ))(fun_app$e (lzip$a (fun_app$b (ldropn$a ?v0 )?v1 ))(fun_app$b (ldropn$a ?v0 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (fun_app$f (ldropn$d ?v0 )(fun_app$g (lzip$b ?v1 )?v2 ))(fun_app$g (lzip$b (fun_app$c (ldropn$b ?v0 )?v1 ))(fun_app$b (ldropn$a ?v0 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$h (ldropn$e ?v0 )(fun_app$i (lzip$c ?v1 )?v2 ))(fun_app$i (lzip$c (fun_app$c (ldropn$b ?v0 )?v1 ))(fun_app$c (ldropn$b ?v0 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_llist$ )(?v2 A_llist$ ))(= (ldropn$f ?v0 (lzip$d ?v1 ?v2 ))(lzip$d (fun_app$a (ldropn$ ?v0 )?v1 )(fun_app$b (ldropn$a ?v0 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_llist$ )(?v2 B_llist$ ))(= (ldropn$g ?v0 (lzip$e ?v1 ?v2 ))(lzip$e (fun_app$a (ldropn$ ?v0 )?v1 )(fun_app$c (ldropn$b ?v0 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$j (ldropn$h ?v0 )(fun_app$k (lzip$f ?v1 )?v2 ))(fun_app$k (lzip$f (fun_app$b (ldropn$a ?v0 )?v1 ))(fun_app$a (ldropn$ ?v0 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$l (ldropn$i ?v0 )(fun_app$m (lzip$g ?v1 )?v2 ))(fun_app$m (lzip$g (fun_app$c (ldropn$b ?v0 )?v1 ))(fun_app$a (ldropn$ ?v0 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(= (ldropn$j ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (fun_app$a (ldropn$ ?v0 )?v1 )(fun_app$a (ldropn$ ?v0 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_b_prod_llist$ ))(= (ldropn$k ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (fun_app$b (ldropn$a ?v0 )?v1 )(fun_app$h (ldropn$e ?v0 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_b_prod_prod_list$ ))(= (fun_app$l (ldropn$i ?v0 )(llist_of$c ?v1 ))(llist_of$c (drop$ ?v0 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_list$ ))(= (fun_app$h (ldropn$e ?v0 )(llist_of$d ?v1 ))(llist_of$d (drop$a ?v0 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_list$ ))(= (fun_app$f (ldropn$d ?v0 )(llist_of$e ?v1 ))(llist_of$e (drop$b ?v0 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_b_prod_prod_list$ ))(= (fun_app$j (ldropn$h ?v0 )(llist_of$f ?v1 ))(llist_of$f (drop$c ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_list$ ))(= (fun_app$d (ldropn$c ?v0 )(llist_of$g ?v1 ))(llist_of$g (drop$d ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (fun_app$b (ldropn$a ?v0 )(llist_of$ ?v1 ))(llist_of$ (drop$e ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_list$ ))(= (fun_app$c (ldropn$b ?v0 )(llist_of$a ?v1 ))(llist_of$a (drop$f ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_list$ ))(= (fun_app$a (ldropn$ ?v0 )(llist_of$b ?v1 ))(llist_of$b (drop$g ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_list$ ))(= (lhd$a (llist_of$ ?v0 ))(hd$ ?v0 ))):named a41 ))
(assert (! (forall ((?v0 B_list$ ))(= (lhd$b (llist_of$a ?v0 ))(hd$a ?v0 ))):named a42 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (lhd$ (llist_of$b ?v0 ))(hd$b ?v0 ))):named a43 ))
(assert (! (forall ((?v0 A_list$ ))(= (lnth$ (llist_of$ ?v0 ))(nth$ ?v0 ))):named a44 ))
(assert (! (forall ((?v0 B_list$ ))(= (lnth$a (llist_of$a ?v0 ))(nth$a ?v0 ))):named a45 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (lnth$b (llist_of$b ?v0 ))(nth$b ?v0 ))):named a46 ))
(assert (! (forall ((?v0 A_list$ ))(= (lnull$ (llist_of$ ?v0 ))(= ?v0 nil$ ))):named a47 ))
(assert (! (forall ((?v0 B_list$ ))(= (lnull$a (llist_of$a ?v0 ))(= ?v0 nil$a ))):named a48 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (lnull$b (llist_of$b ?v0 ))(= ?v0 nil$b ))):named a49 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$i (lzip$c ?v0 )lNil$b )lNil$e ):pattern ((lzip$c ?v0 )))):named a50 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$m (lzip$g ?v0 )lNil$ )lNil$i ):pattern ((lzip$g ?v0 )))):named a51 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$k (lzip$f ?v0 )lNil$ )lNil$h ):pattern ((lzip$f ?v0 )))):named a52 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$g (lzip$b ?v0 )lNil$a )lNil$d ):pattern ((lzip$b ?v0 )))):named a53 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$e (lzip$a ?v0 )lNil$a )lNil$c ):pattern ((lzip$a ?v0 )))):named a54 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lzip$ ?v0 )lNil$b )lNil$ ):pattern ((lzip$ ?v0 )))):named a55 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$m (lzip$g lNil$b )?v0 )lNil$i ):pattern ((fun_app$m (lzip$g lNil$b )?v0 )))):named a56 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$i (lzip$c lNil$b )?v0 )lNil$e ):pattern ((fun_app$i (lzip$c lNil$b )?v0 )))):named a57 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$g (lzip$b lNil$b )?v0 )lNil$d ):pattern ((fun_app$g (lzip$b lNil$b )?v0 )))):named a58 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$k (lzip$f lNil$a )?v0 )lNil$h ):pattern ((fun_app$k (lzip$f lNil$a )?v0 )))):named a59 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$e (lzip$a lNil$a )?v0 )lNil$c ):pattern ((fun_app$e (lzip$a lNil$a )?v0 )))):named a60 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ (lzip$ lNil$a )?v0 )lNil$ ):pattern ((fun_app$ (lzip$ lNil$a )?v0 )))):named a61 ))
(assert (! (forall ((?v0 A_list$ ))(= (ltl$a (llist_of$ ?v0 ))(llist_of$ (tl$ ?v0 )))):named a62 ))
(assert (! (forall ((?v0 B_list$ ))(= (ltl$b (llist_of$a ?v0 ))(llist_of$a (tl$a ?v0 )))):named a63 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (ltl$ (llist_of$b ?v0 ))(llist_of$b (tl$b ?v0 )))):named a64 ))
(assert (! (= (lfinite$a lNil$b )true ):named a65 ))
(assert (! (= (lfinite$b lNil$ )true ):named a66 ))
(assert (! (= (lfinite$ lNil$a )true ):named a67 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(= (lfinite$b (ltl$ ?v0 ))(lfinite$b ?v0 ))):named a68 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lfinite$a (ltl$b ?v0 ))(lfinite$a ?v0 ))):named a69 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$a ?v0 ))(lfinite$ ?v0 ))):named a70 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$l (ldrop$i ?v0 )lNil$i )lNil$i ):pattern ((ldrop$i ?v0 )))):named a71 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$h (ldrop$e ?v0 )lNil$e )lNil$e ):pattern ((ldrop$e ?v0 )))):named a72 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$f (ldrop$d ?v0 )lNil$d )lNil$d ):pattern ((ldrop$d ?v0 )))):named a73 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$j (ldrop$h ?v0 )lNil$h )lNil$h ):pattern ((ldrop$h ?v0 )))):named a74 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$d (ldrop$c ?v0 )lNil$c )lNil$c ):pattern ((ldrop$c ?v0 )))):named a75 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$c (ldrop$b ?v0 )lNil$b )lNil$b ):pattern ((ldrop$b ?v0 )))):named a76 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a77 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (ldrop$a ?v0 )lNil$a )lNil$a ):pattern ((ldrop$a ?v0 )))):named a78 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$l (ldropn$i ?v0 )lNil$i )lNil$i ):pattern ((ldropn$i ?v0 )))):named a79 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$h (ldropn$e ?v0 )lNil$e )lNil$e ):pattern ((ldropn$e ?v0 )))):named a80 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$f (ldropn$d ?v0 )lNil$d )lNil$d ):pattern ((ldropn$d ?v0 )))):named a81 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$j (ldropn$h ?v0 )lNil$h )lNil$h ):pattern ((ldropn$h ?v0 )))):named a82 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$d (ldropn$c ?v0 )lNil$c )lNil$c ):pattern ((ldropn$c ?v0 )))):named a83 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$c (ldropn$b ?v0 )lNil$b )lNil$b ):pattern ((ldropn$b ?v0 )))):named a84 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a85 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b (ldropn$a ?v0 )lNil$a )lNil$a ):pattern ((ldropn$a ?v0 )))):named a86 ))
(check-sat )
;(get-unsat-core )
