;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Natural$ 0 )
(declare-sort Bool_nat_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nibble$ (nibble0$ )(nibble1$ )(nibble2$ )(nibble3$ )(nibble4$ )(nibble5$ )(nibble6$ )(nibble7$ )(nibble8$ )(nibble9$ )(nibbleA$ )(nibbleB$ )(nibbleC$ )(nibbleD$ )(nibbleE$ )(nibbleF$ ))(Char$ (char$ (select$ Nibble$ )(selecta$ Nibble$ )))))
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun size$ (Char$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun zero$a ()Natural$ )
(declare-fun of_nat$ (Nat$ )Nat$ )
(declare-fun fun_app$ (Bool_nat_fun$ Bool )Nat$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun of_nat$a (Nat$ )Natural$ )
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun rec_bool$ (Nat$ Nat$ )Bool_nat_fun$ )
(declare-fun size_bool$ ()Bool_nat_fun$ )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun gen_llength$ (Nat$ )A_llist_enat_fun$ )
(declare-fun size_natural$ (Natural$ )Nat$ )
(assert (! (not (= llength$ (gen_llength$ zero$ ))):named a0 ))
(assert (! (= zero$ zero$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a3 ))
(assert (! (forall ((?v0 Natural$ ))(= (= zero$a ?v0 )(= ?v0 zero$a ))):named a4 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a5 ))
(assert (! (= (fun_app$ size_bool$ true )zero$ ):named a6 ))
(assert (! (= (fun_app$ size_bool$ false )zero$ ):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (fun_app$a llength$ (lmap$ ?v0 ?v1 ))(fun_app$a llength$ ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size$ ?v0 )zero$ ):pattern ((size$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(= (= (of_nat$ ?v0 )zero$ )(= ?v0 zero$ ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ (of_nat$ ?v0 ))(= zero$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$ ?v0 )(of_nat$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (= (of_nat$ zero$ )zero$ ):named a13 ))
(assert (! (= (of_nat$a zero$ )zero$a ):named a14 ))
(assert (! (= size_bool$ (rec_bool$ zero$ zero$ )):named a15 ))
(assert (! (= (size_natural$ zero$a )zero$ ):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(= (less_eq$ (of_nat$ ?v0 )zero$ )(= ?v0 zero$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
