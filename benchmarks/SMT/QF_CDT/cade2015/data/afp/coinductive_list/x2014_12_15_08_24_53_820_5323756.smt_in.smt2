;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()B_b_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun uua$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uub$ ()A_a_bool_fun_fun$ )
(declare-fun uuc$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$a (B_llist$ )B_llist_enat_fun$ )
(declare-fun ltake$ (Enat$ )B_llist_b_llist_fun$ )
(declare-fun ltake$a (Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$h (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$i (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$j (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$k (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$l (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$m (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun lprefix$a (B_llist$ B_llist$ )Bool )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun llist_all2$a (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uuc$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$f (fun_app$g uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uub$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (fun_app$ (llist_all2$ p$ xs$ )(fun_app$h (ltake$ (llength$ xs$ ))ys$ ))):named a4 ))
(assert (! (= (llist_all2$a uu$ )uua$ ):named a5 ))
(assert (! (= (llist_all2$b uub$ )uuc$ ):named a6 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v4 )?v5 )(fun_app$d (fun_app$e ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$a ?v3 )?v1 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (fun_app$b (llist_all2$c ?v0 ?v1 )?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (fun_app$f (fun_app$i ?v0 ?v4 )?v5 )(fun_app$f (fun_app$i ?v3 ?v4 )?v5 ))))(fun_app$b (llist_all2$c ?v3 ?v1 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$b ?v3 )?v1 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$d (fun_app$j ?v0 ?v4 )?v5 )(fun_app$d (fun_app$j ?v3 ?v4 )?v5 ))))(fun_app$ (llist_all2$ ?v3 ?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$b (fun_app$c (llist_all2$b ?v0 )?v1 )?v2 )(= (llength$ ?v1 )(llength$ ?v2 )))):named a11 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (fun_app$b (llist_all2$c ?v0 ?v1 )?v2 )(= (llength$a ?v1 )(llength$ ?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(= (llength$a ?v1 )(llength$a ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(= (llength$ ?v1 )(llength$a ?v2 )))):named a14 ))
(assert (! (fun_app$ (llist_all2$ p$ (lappend$ xs$ xs$a ))ys$ ):named a15 ))
(assert (! (less_eq$ (llength$ xs$ )(llength$a ys$ )):named a16 ))
(assert (! (= (plus$ (llength$ xs$ )(llength$ xs$a ))(llength$a ys$ )):named a17 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (llength$ (fun_app$k (ltake$a ?v0 )?v1 ))(min$ ?v0 (llength$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(= (llength$a (fun_app$h (ltake$ ?v0 )?v1 ))(min$ ?v0 (llength$a ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$ ?v0 )?v1 )(= (fun_app$k (ltake$a ?v1 )?v0 )?v0 )):pattern ((fun_app$k (ltake$a ?v1 )?v0 )))):named a20 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$a ?v0 )?v1 )(= (fun_app$h (ltake$ ?v1 )?v0 )?v0 )):pattern ((fun_app$h (ltake$ ?v1 )?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$l (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$m (llcp$a ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$a ?v0 )))):named a23 ))
(assert (! (less_eq$ (llength$ xs$a )(llength$a ys$ )):named a24 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$k (ltake$a ?v0 )lNil$ )lNil$ ):pattern ((ltake$a ?v0 )))):named a25 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$h (ltake$ ?v0 )lNil$a )lNil$a ):pattern ((ltake$ ?v0 )))):named a26 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )lNil$a )(= ?v1 lNil$a )):pattern ((fun_app$a (llist_all2$a ?v0 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$b (llist_all2$c ?v0 ?v1 )lNil$ )(= ?v1 lNil$a )):pattern ((llist_all2$c ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$b ?v0 )?v1 )lNil$ )(= ?v1 lNil$ )):pattern ((fun_app$c (llist_all2$b ?v0 )?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 ?v1 )lNil$a )(= ?v1 lNil$ )):pattern ((llist_all2$ ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$a ?v0 )lNil$a )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$ (fun_app$a (llist_all2$a ?v0 )lNil$a )?v1 )))):named a31 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (llist_all2$c ?v0 lNil$a )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$b (llist_all2$c ?v0 lNil$a )?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$b ?v0 )lNil$ )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$b (fun_app$c (llist_all2$b ?v0 )lNil$ )?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 lNil$ )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$ (llist_all2$ ?v0 lNil$ )?v1 )))):named a34 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$ (fun_app$k (ltake$a ?v0 )?v1 )?v1 )):named a35 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(lprefix$a (fun_app$h (ltake$ ?v0 )?v1 )?v1 )):named a36 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$a ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))(and (fun_app$d (fun_app$e ?v0 ?v1 )?v3 )(fun_app$ (fun_app$a (llist_all2$a ?v0 )?v2 )?v4 ))):pattern ((fun_app$ (fun_app$a (llist_all2$a ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))))):named a37 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$f (fun_app$i ?v0 ?v1 )?v3 )(fun_app$b (llist_all2$c ?v0 ?v2 )?v4 ))):pattern ((fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a38 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$b ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$f (fun_app$g ?v0 ?v1 )?v3 )(fun_app$b (fun_app$c (llist_all2$b ?v0 )?v2 )?v4 ))):pattern ((fun_app$b (fun_app$c (llist_all2$b ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a39 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))(and (fun_app$d (fun_app$j ?v0 ?v1 )?v3 )(fun_app$ (llist_all2$ ?v0 ?v2 )?v4 ))):pattern ((fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))))):named a40 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a41 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a42 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a43 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a44 ))
(check-sat )
;(get-unsat-core )
