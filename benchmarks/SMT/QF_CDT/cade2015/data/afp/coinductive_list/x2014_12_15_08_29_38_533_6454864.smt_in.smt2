;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun bot$ ()A_set$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun pred_llist$ (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun finite_lprefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (not (fun_app$ p$ x$ ))):named a0 ))
(assert (! (member$ x$ (lset$ xs$ )):named a1 ))
(assert (! (= (fun_app$a (lfilter$ p$ )xs$ )lNil$ ):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$a (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$b (lstrict_prefix$ ?v3 )?v2 )(fun_app$b ?v0 ?v3 )))(fun_app$b ?v0 ?v2 )))(fun_app$b ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(fun_app$b (lmember$ ?v0 )?v1 ))):named a6 ))
(assert (! (= (fun_app$b (lstrict_prefix$ lNil$ )lNil$ )false ):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (fun_app$a (lfilter$ ?v0 )?v1 )lNil$ )(forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v1 ))(not (fun_app$ ?v0 ?v2 )))))):named a8 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$c (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$b (lstrict_prefix$ lNil$ )(lCons$ ?v0 ?v1 ))true ):pattern ((lCons$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$b (lstrict_prefix$ (lCons$ ?v0 ?v1 ))lNil$ )false ):pattern ((lCons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (finite_lprefix$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((finite_lprefix$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (finite_lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$b (finite_lprefix$ lNil$ )?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(fun_app$b (pred_llist$ ?v0 )lNil$ )):named a14 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (ldropWhile$ ?v0 ?v1 )lNil$ )(forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v1 ))(fun_app$ ?v0 ?v2 ))))):named a15 ))
(assert (! (= (lset$ lNil$ )bot$ ):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(fun_app$ (lsetp$ ?v1 )?v0 ))):named a17 ))
(check-sat )
;(get-unsat-core )
