;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()Nat_llist$)
(declare-fun lhd$a (Nat_llist$)Nat$)
(declare-fun ltl$a (Nat_llist$)Nat_llist$)
(declare-fun lCons$a (Nat$ Nat_llist$ )Nat_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun bot$ ()Nat_set$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun bot$a ()A_set$ )
(declare-fun bot$b ()Enat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun less$a (A_set$ A_set$ )Bool )
(declare-fun less$b (Nat_set$ Nat_set$ )Bool )
(declare-fun lnth$a (Nat_llist$ Nat$ )Nat$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (Nat_llist$ )Nat_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun member$a (Nat$ Nat_set$ )Bool )
(declare-fun collect$a (A_bool_fun$ )A_set$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun llength$a (Nat_llist$ )Enat$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(and (less$ (enat$ ?v0 )(llength$ xsa$ ))(fun_app$a p$ (lnth$ xsa$ ?v0 )))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (collect$ uu$ )bot$ )):named a1 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (lset$ xsa$ ))(not (fun_app$a p$ ?v0 )))):named a2 ))
(assert (! (not (lfinite$ xsa$ )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(= (member$a ?v0 (lset$a ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$a ?v1 ))(= (lnth$a ?v1 ?v2 )?v0 ))))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$ ?v1 ))(= (lnth$ ?v1 ?v2 )?v0 ))))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= (collect$a ?v0 )bot$a )(forall ((?v1 A$ ))(not (fun_app$a ?v0 ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 Nat$ ))(not (fun_app$ ?v0 ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 A_set$ ))(= (forall ((?v1 A$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$a ))):named a9 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (forall ((?v1 Nat$ ))(not (member$a ?v1 ?v0 )))(= ?v0 bot$ ))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= bot$a (collect$a ?v0 ))(forall ((?v1 A$ ))(not (fun_app$a ?v0 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 Nat$ ))(not (fun_app$ ?v0 ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 A$ ))(= (member$ ?v0 bot$a )false )):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(= (member$a ?v0 bot$ )false )):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_set$ ))(= (not (= ?v0 bot$a ))(less$a bot$a ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (not (= ?v0 bot$ ))(less$b bot$ ?v0 ))):named a17 ))
(assert (! (forall ((?v0 Enat$ ))(= (not (= ?v0 bot$b ))(less$ bot$b ?v0 ))):named a18 ))
(assert (! (forall ((?v0 A_set$ ))(not (less$a ?v0 bot$a ))):named a19 ))
(assert (! (forall ((?v0 Nat_set$ ))(not (less$b ?v0 bot$ ))):named a20 ))
(assert (! (forall ((?v0 Enat$ ))(not (less$ ?v0 bot$b ))):named a21 ))
(assert (! (lnull$ (lfilter$ p$ xsa$ )):named a22 ))
(assert (! (not (lfinite$ xs$ )):named a23 ))
(assert (! (lfinite$ (lfilter$ p$ xs$ )):named a24 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a25 ))
(check-sat )
;(get-unsat-core )
