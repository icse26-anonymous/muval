;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun wfP$ (A_llist_a_llist_bool_fun_fun$ )Bool )
(declare-fun accp$ (A_llist_a_llist_bool_fun_fun$ )A_llist_bool_fun$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun tranclp$ (A_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ ()A_llist_a_llist_bool_fun_fun$ )
(assert (! (not (wfP$ lstrict_prefix$ )):named a0 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ ))(= (wfP$ ?v0 )(forall ((?v1 A_llist_set$ )(?v2 A_llist$ ))(=> (member$ ?v2 ?v1 )(exists ((?v3 A_llist$ ))(and (member$ ?v3 ?v1 )(forall ((?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(not (member$ ?v4 ?v1 )))))))))):named a1 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ ))(=> (forall ((?v1 A_llist_bool_fun$ )(?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (forall ((?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v1 ?v4 )))(fun_app$ ?v1 ?v3 )))(fun_app$ ?v1 ?v2 )))(wfP$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist$ ))(=> (and (wfP$ ?v0 )(forall ((?v3 A_llist$ ))(=> (forall ((?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v1 ?v4 )))(fun_app$ ?v1 ?v3 ))))(fun_app$ ?v1 ?v2 ))):named a3 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist$ ))(=> (and (wfP$ ?v0 )(forall ((?v3 A_llist$ ))(=> (forall ((?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ ?v1 ?v4 )))(fun_app$ ?v1 ?v3 ))))(fun_app$ ?v1 ?v2 ))):named a4 ))
(assert (! (= (fun_app$ (fun_app$a lstrict_prefix$ lNil$ )lNil$ )false ):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$a lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (fun_app$a lstrict_prefix$ ?v1 )?v3 ))):pattern ((fun_app$ (fun_app$a lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (fun_app$a lstrict_prefix$ ?v0 )?v1 )(and (fun_app$ (lprefix$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((fun_app$ (fun_app$a lstrict_prefix$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$ (fun_app$a lstrict_prefix$ ?v0 )?v1 )(lfinite$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ ))(! (= (wfP$ ?v0 )(forall ((?v1 A_llist$ ))(fun_app$ (accp$ ?v0 )?v1 ))):pattern ((wfP$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ ))(=> (forall ((?v1 A_llist$ ))(fun_app$ (accp$ ?v0 )?v1 ))(wfP$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ ))(=> (wfP$ ?v0 )(fun_app$ (accp$ ?v0 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ ))(=> (wfP$ ?v0 )(wfP$ (tranclp$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (lprefix$ ?v0 )?v0 )):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (lprefix$ ?v0 )?v0 )):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (lprefix$ ?v1 )?v3 ))):pattern ((fun_app$ (lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$ (lprefix$ lNil$ )?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
