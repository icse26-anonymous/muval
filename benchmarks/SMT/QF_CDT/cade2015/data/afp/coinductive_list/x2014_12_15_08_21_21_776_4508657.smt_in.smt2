;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_b_prod_a_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_a_prod_llist_bool_fun$ 0 )
(declare-sort A_b_prod_llist_bool_fun$ 0 )
(declare-sort B_a_prod_llist_bool_fun$ 0 )
(declare-sort B_b_prod_llist_bool_fun$ 0 )
(declare-sort A_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_llist_b_a_prod_llist_fun$ 0 )
(declare-sort B_llist_a_b_prod_llist_fun$ 0 )
(declare-sort B_llist_b_b_prod_llist_fun$ 0 )
(declare-sort A_a_b_prod_prod_llist_bool_fun$ 0 )
(declare-sort B_a_b_prod_prod_llist_bool_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_a_b_prod_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_b_a_b_prod_prod_llist_fun$ 0 )
(declare-datatypes ()((A_b_prod$ (pair$ (fst$ A$ )(snd$ B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-datatypes ()((B_b_prod$ (pair$a (fst$a B$ )(snd$a B$ )))))
(declare-sort B_b_prod_llist$ 0)
(declare-fun lNil$c ()B_b_prod_llist$)
(declare-fun lhd$c (B_b_prod_llist$)B_b_prod$)
(declare-fun ltl$c (B_b_prod_llist$)B_b_prod_llist$)
(declare-fun lCons$c (B_b_prod$ B_b_prod_llist$ )B_b_prod_llist$)
(declare-datatypes ()((B_a_prod$ (pair$b (fst$b B$ )(snd$b A$ )))))
(declare-sort B_a_prod_llist$ 0)
(declare-fun lNil$d ()B_a_prod_llist$)
(declare-fun lhd$d (B_a_prod_llist$)B_a_prod$)
(declare-fun ltl$d (B_a_prod_llist$)B_a_prod_llist$)
(declare-fun lCons$d (B_a_prod$ B_a_prod_llist$ )B_a_prod_llist$)
(declare-datatypes ()((A_a_prod$ (pair$c (fst$c A$ )(snd$c A$ )))))
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$e ()A_a_prod_llist$)
(declare-fun lhd$e (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$e (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$e (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((B_a_b_prod_prod$ (pair$d (fst$d B$ )(snd$d A_b_prod$ )))))
(declare-sort B_a_b_prod_prod_llist$ 0)
(declare-fun lNil$f ()B_a_b_prod_prod_llist$)
(declare-fun lhd$f (B_a_b_prod_prod_llist$)B_a_b_prod_prod$)
(declare-fun ltl$f (B_a_b_prod_prod_llist$)B_a_b_prod_prod_llist$)
(declare-fun lCons$f (B_a_b_prod_prod$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$)
(declare-datatypes ()((A_a_b_prod_prod$ (pair$e (fst$e A$ )(snd$e A_b_prod$ )))))
(declare-sort A_a_b_prod_prod_llist$ 0)
(declare-fun lNil$g ()A_a_b_prod_prod_llist$)
(declare-fun lhd$g (A_a_b_prod_prod_llist$)A_a_b_prod_prod$)
(declare-fun ltl$g (A_a_b_prod_prod_llist$)A_a_b_prod_prod_llist$)
(declare-fun lCons$g (A_a_b_prod_prod$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$)
(declare-datatypes ()((A_b_prod_a_prod$ (pair$f (fst$f A_b_prod$ )(snd$f A$ )))))
(declare-sort A_b_prod_a_prod_llist$ 0)
(declare-fun lNil$h ()A_b_prod_a_prod_llist$)
(declare-fun lhd$h (A_b_prod_a_prod_llist$)A_b_prod_a_prod$)
(declare-fun ltl$h (A_b_prod_a_prod_llist$)A_b_prod_a_prod_llist$)
(declare-fun lCons$h (A_b_prod_a_prod$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$)
(declare-datatypes ()((A_b_prod_b_prod$ (pair$g (fst$g A_b_prod$ )(snd$g B$ )))))
(declare-sort A_b_prod_b_prod_llist$ 0)
(declare-fun lNil$i ()A_b_prod_b_prod_llist$)
(declare-fun lhd$i (A_b_prod_b_prod_llist$)A_b_prod_b_prod$)
(declare-fun ltl$i (A_b_prod_b_prod_llist$)A_b_prod_b_prod_llist$)
(declare-fun lCons$i (A_b_prod_b_prod$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$)
(declare-datatypes ()((A_b_prod_a_b_prod_prod$ (pair$h (fst$h A_b_prod$ )(snd$h A_b_prod$ )))))
(declare-sort A_b_prod_a_b_prod_prod_llist$ 0)
(declare-fun lNil$j ()A_b_prod_a_b_prod_prod_llist$)
(declare-fun lhd$j (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod$)
(declare-fun ltl$j (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod_llist$)
(declare-fun lCons$j (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$)
(declare-datatypes ()((A_b_b_prod_prod$ (pair$i (fst$i A$ )(snd$i B_b_prod$ )))))
(declare-sort A_b_b_prod_prod_llist$ 0)
(declare-fun lNil$k ()A_b_b_prod_prod_llist$)
(declare-fun lhd$k (A_b_b_prod_prod_llist$)A_b_b_prod_prod$)
(declare-fun ltl$k (A_b_b_prod_prod_llist$)A_b_b_prod_prod_llist$)
(declare-fun lCons$k (A_b_b_prod_prod$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$)
(declare-fun n$ ()Enat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun llcp$ (A_b_prod_llist$ A_b_prod_llist$ )Enat$ )
(declare-fun lmap$ (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lzip$ (A_llist$ )B_llist_a_b_prod_llist_fun$ )
(declare-fun zero$ ()Enat$ )
(declare-fun llcp$a (A_llist$ A_llist$ )Enat$ )
(declare-fun llcp$b (B_llist$ B_llist$ )Enat$ )
(declare-fun lmap$a (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$b (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$c (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lmap$d (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$e (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$f (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$g (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$h (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$i (B_b_prod_a_fun$ B_b_prod_llist$ )A_llist$ )
(declare-fun lnull$ (A_b_prod_llist$ )Bool )
(declare-fun ltake$ (Enat$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun lzip$a (B_llist$ )B_llist_b_b_prod_llist_fun$ )
(declare-fun lzip$b (B_llist$ )A_llist_b_a_prod_llist_fun$ )
(declare-fun lzip$c (A_llist$ )A_llist_a_a_prod_llist_fun$ )
(declare-fun lzip$d (B_llist$ )A_b_prod_llist_b_a_b_prod_prod_llist_fun$ )
(declare-fun lzip$e (A_llist$ )A_b_prod_llist_a_a_b_prod_prod_llist_fun$ )
(declare-fun lzip$f (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$g (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun lnull$b (B_llist$ )Bool )
(declare-fun lnull$c (A_a_prod_llist$ )Bool )
(declare-fun lnull$d (B_a_prod_llist$ )Bool )
(declare-fun lnull$e (B_b_prod_llist$ )Bool )
(declare-fun lnull$f (A_b_prod_a_prod_llist$ )Bool )
(declare-fun lnull$g (A_b_prod_b_prod_llist$ )Bool )
(declare-fun lnull$h (A_a_b_prod_prod_llist$ )Bool )
(declare-fun lnull$i (B_a_b_prod_prod_llist$ )Bool )
(declare-fun lnull$j (A_b_prod_a_b_prod_prod_llist$ )Bool )
(declare-fun lnull$k (A_b_b_prod_prod_llist$ )Bool )
(declare-fun ltake$a (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ltake$b (Enat$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$ (A_b_prod_llist_a_b_prod_llist_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun lprefix$ (A_b_prod_llist$ )A_b_prod_llist_bool_fun$ )
(declare-fun fun_app$a (B_llist_a_b_prod_llist_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$c (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$d (A_b_prod_llist_bool_fun$ A_b_prod_llist$ )Bool )
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$f (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$g (B_llist_b_b_prod_llist_fun$ B_llist$ )B_b_prod_llist$ )
(declare-fun fun_app$h (A_llist_b_a_prod_llist_fun$ A_llist$ )B_a_prod_llist$ )
(declare-fun fun_app$i (A_llist_a_a_prod_llist_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$j (A_b_prod_llist_b_a_b_prod_prod_llist_fun$ A_b_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun fun_app$k (A_b_prod_llist_a_a_b_prod_prod_llist_fun$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun fun_app$l (B_a_b_prod_prod_llist_bool_fun$ B_a_b_prod_prod_llist$ )Bool )
(declare-fun fun_app$m (B_b_prod_llist_bool_fun$ B_b_prod_llist$ )Bool )
(declare-fun fun_app$n (B_a_prod_llist_bool_fun$ B_a_prod_llist$ )Bool )
(declare-fun fun_app$o (A_a_b_prod_prod_llist_bool_fun$ A_a_b_prod_prod_llist$ )Bool )
(declare-fun fun_app$p (A_a_prod_llist_bool_fun$ A_a_prod_llist$ )Bool )
(declare-fun lprefix$a (A_llist$ )A_llist_bool_fun$ )
(declare-fun lprefix$b (B_llist$ )B_llist_bool_fun$ )
(declare-fun lprefix$c (B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist_bool_fun$ )
(declare-fun lprefix$d (B_b_prod_llist$ )B_b_prod_llist_bool_fun$ )
(declare-fun lprefix$e (B_a_prod_llist$ )B_a_prod_llist_bool_fun$ )
(declare-fun lprefix$f (A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist_bool_fun$ )
(declare-fun lprefix$g (A_a_prod_llist$ )A_a_prod_llist_bool_fun$ )
(assert (! (not (= (fun_app$ (ltake$ n$ )(fun_app$a (lzip$ xs$ )ys$ ))(fun_app$a (lzip$ (fun_app$b (ltake$a n$ )xs$ ))(fun_app$c (ltake$b n$ )ys$ )))):named a0 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (ltake$a ?v0 )lNil$a )lNil$a ):pattern ((ltake$a ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$c (ltake$b ?v0 )lNil$b )lNil$b ):pattern ((ltake$b ?v0 )))):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ ))(fun_app$d (lprefix$ (fun_app$ (ltake$ ?v0 )?v1 ))?v1 )):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(fun_app$e (lprefix$a (fun_app$b (ltake$a ?v0 )?v1 ))?v1 )):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(fun_app$f (lprefix$b (fun_app$c (ltake$b ?v0 )?v1 ))?v1 )):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_a_b_prod_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$ (ltake$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$ (ltake$ ?v0 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_b_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ltake$ ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$b (ltake$a ?v0 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_b_prod_fun$ )(?v2 B_llist$ ))(= (fun_app$ (ltake$ ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$c (ltake$b ?v0 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$b (ltake$a ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$ (ltake$ ?v0 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$b (ltake$a ?v0 )(lmap$d ?v1 ?v2 ))(lmap$d ?v1 (fun_app$b (ltake$a ?v0 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$b (ltake$a ?v0 )(lmap$e ?v1 ?v2 ))(lmap$e ?v1 (fun_app$c (ltake$b ?v0 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_b_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$c (ltake$b ?v0 )(lmap$f ?v1 ?v2 ))(lmap$f ?v1 (fun_app$ (ltake$ ?v0 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$c (ltake$b ?v0 )(lmap$g ?v1 ?v2 ))(lmap$g ?v1 (fun_app$b (ltake$a ?v0 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$c (ltake$b ?v0 )(lmap$h ?v1 ?v2 ))(lmap$h ?v1 (fun_app$c (ltake$b ?v0 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_b_prod_llist$ ))(= (fun_app$ (ltake$ ?v0 )(fun_app$ (ltake$ ?v1 )?v2 ))(fun_app$ (ltake$ (min$ ?v0 ?v1 ))?v2 ))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$b (ltake$a ?v0 )(fun_app$b (ltake$a ?v1 )?v2 ))(fun_app$b (ltake$a (min$ ?v0 ?v1 ))?v2 ))):named a17 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_llist$ ))(= (fun_app$c (ltake$b ?v0 )(fun_app$c (ltake$b ?v1 )?v2 ))(fun_app$c (ltake$b (min$ ?v0 ?v1 ))?v2 ))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ )(?v3 Enat$ ))(=> (and (= (fun_app$ (ltake$ ?v0 )?v1 )(fun_app$ (ltake$ ?v0 )?v2 ))(less_eq$ ?v3 ?v0 ))(= (fun_app$ (ltake$ ?v3 )?v1 )(fun_app$ (ltake$ ?v3 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (and (= (fun_app$b (ltake$a ?v0 )?v1 )(fun_app$b (ltake$a ?v0 )?v2 ))(less_eq$ ?v3 ?v0 ))(= (fun_app$b (ltake$a ?v3 )?v1 )(fun_app$b (ltake$a ?v3 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 Enat$ ))(=> (and (= (fun_app$c (ltake$b ?v0 )?v1 )(fun_app$c (ltake$b ?v0 )?v2 ))(less_eq$ ?v3 ?v0 ))(= (fun_app$c (ltake$b ?v3 )?v1 )(fun_app$c (ltake$b ?v3 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (forall ((?v2 Nat$ ))(= (fun_app$ (ltake$ (enat$ ?v2 ))?v0 )(fun_app$ (ltake$ (enat$ ?v2 ))?v1 )))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (fun_app$b (ltake$a (enat$ ?v2 ))?v0 )(fun_app$b (ltake$a (enat$ ?v2 ))?v1 )))(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (forall ((?v2 Nat$ ))(= (fun_app$c (ltake$b (enat$ ?v2 ))?v0 )(fun_app$c (ltake$b (enat$ ?v2 ))?v1 )))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 Enat$ )(?v3 A_b_prod_llist$ ))(= (llcp$ (fun_app$ (ltake$ ?v0 )?v1 )(fun_app$ (ltake$ ?v2 )?v3 ))(min$ (min$ ?v0 ?v2 )(llcp$ ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 Enat$ )(?v3 A_llist$ ))(= (llcp$a (fun_app$b (ltake$a ?v0 )?v1 )(fun_app$b (ltake$a ?v2 )?v3 ))(min$ (min$ ?v0 ?v2 )(llcp$a ?v1 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 Enat$ )(?v3 B_llist$ ))(= (llcp$b (fun_app$c (ltake$b ?v0 )?v1 )(fun_app$c (ltake$b ?v2 )?v3 ))(min$ (min$ ?v0 ?v2 )(llcp$b ?v1 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$g (lzip$a ?v0 )lNil$b )lNil$c ):pattern ((lzip$a ?v0 )))):named a28 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$h (lzip$b ?v0 )lNil$a )lNil$d ):pattern ((lzip$b ?v0 )))):named a29 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$i (lzip$c ?v0 )lNil$a )lNil$e ):pattern ((lzip$c ?v0 )))):named a30 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$j (lzip$d ?v0 )lNil$ )lNil$f ):pattern ((lzip$d ?v0 )))):named a31 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$k (lzip$e ?v0 )lNil$ )lNil$g ):pattern ((lzip$e ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lzip$ ?v0 )lNil$b )lNil$ ):pattern ((lzip$ ?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$j (lzip$d lNil$b )?v0 )lNil$f ):pattern ((fun_app$j (lzip$d lNil$b )?v0 )))):named a34 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$g (lzip$a lNil$b )?v0 )lNil$c ):pattern ((fun_app$g (lzip$a lNil$b )?v0 )))):named a35 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$h (lzip$b lNil$b )?v0 )lNil$d ):pattern ((fun_app$h (lzip$b lNil$b )?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$k (lzip$e lNil$a )?v0 )lNil$g ):pattern ((fun_app$k (lzip$e lNil$a )?v0 )))):named a37 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$i (lzip$c lNil$a )?v0 )lNil$e ):pattern ((fun_app$i (lzip$c lNil$a )?v0 )))):named a38 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a (lzip$ lNil$a )?v0 )lNil$ ):pattern ((fun_app$a (lzip$ lNil$a )?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (not (lnull$ (fun_app$a (lzip$ ?v0 )?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$b ?v1 ))))):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$c (fun_app$i (lzip$c ?v0 )?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a41 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (not (lnull$d (fun_app$h (lzip$b ?v0 )?v1 )))(and (not (lnull$b ?v0 ))(not (lnull$a ?v1 ))))):named a42 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$e (fun_app$g (lzip$a ?v0 )?v1 )))(and (not (lnull$b ?v0 ))(not (lnull$b ?v1 ))))):named a43 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(= (not (lnull$f (lzip$f ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$a ?v1 ))))):named a44 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(= (not (lnull$g (lzip$g ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$b ?v1 ))))):named a45 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(= (not (lnull$h (fun_app$k (lzip$e ?v0 )?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$ ?v1 ))))):named a46 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(= (not (lnull$i (fun_app$j (lzip$d ?v0 )?v1 )))(and (not (lnull$b ?v0 ))(not (lnull$ ?v1 ))))):named a47 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (not (lnull$j (lzip$h ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a48 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(= (not (lnull$k (lzip$i ?v0 ?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$e ?v1 ))))):named a49 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (lnull$ (fun_app$a (lzip$ ?v0 )?v1 ))(or (lnull$a ?v0 )(lnull$b ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$c (fun_app$i (lzip$c ?v0 )?v1 ))(or (lnull$a ?v0 )(lnull$a ?v1 )))):named a51 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (lnull$d (fun_app$h (lzip$b ?v0 )?v1 ))(or (lnull$b ?v0 )(lnull$a ?v1 )))):named a52 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$e (fun_app$g (lzip$a ?v0 )?v1 ))(or (lnull$b ?v0 )(lnull$b ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(= (lnull$f (lzip$f ?v0 ?v1 ))(or (lnull$ ?v0 )(lnull$a ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(= (lnull$g (lzip$g ?v0 ?v1 ))(or (lnull$ ?v0 )(lnull$b ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(= (lnull$h (fun_app$k (lzip$e ?v0 )?v1 ))(or (lnull$a ?v0 )(lnull$ ?v1 )))):named a56 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(= (lnull$i (fun_app$j (lzip$d ?v0 )?v1 ))(or (lnull$b ?v0 )(lnull$ ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (lnull$j (lzip$h ?v0 ?v1 ))(or (lnull$ ?v0 )(lnull$ ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(= (lnull$k (lzip$i ?v0 ?v1 ))(or (lnull$a ?v0 )(lnull$e ?v1 )))):named a59 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ ))(= (= lNil$ (fun_app$ (ltake$ ?v0 )?v1 ))(or (= ?v1 lNil$ )(= ?v0 zero$ )))):named a60 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (= lNil$a (fun_app$b (ltake$a ?v0 )?v1 ))(or (= ?v1 lNil$a )(= ?v0 zero$ )))):named a61 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(= (= lNil$b (fun_app$c (ltake$b ?v0 )?v1 ))(or (= ?v1 lNil$b )(= ?v0 zero$ )))):named a62 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$f (lprefix$b ?v0 )?v0 )):named a63 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (lprefix$a ?v0 )?v0 )):named a64 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(fun_app$d (lprefix$ ?v0 )?v0 )):named a65 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$f (lprefix$b ?v0 )?v0 )):named a66 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (lprefix$a ?v0 )?v0 )):named a67 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(fun_app$d (lprefix$ ?v0 )?v0 )):named a68 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$f (lprefix$b lNil$b )?v0 )true ):pattern ((fun_app$f (lprefix$b lNil$b )?v0 )))):named a69 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$e (lprefix$a lNil$a )?v0 )true ):pattern ((fun_app$e (lprefix$a lNil$a )?v0 )))):named a70 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$d (lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$d (lprefix$ lNil$ )?v0 )))):named a71 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$d ?v0 ?v1 ))(lnull$a ?v1 ))):named a72 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$e ?v0 ?v1 ))(lnull$b ?v1 ))):named a73 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$b (lmap$g ?v0 ?v1 ))(lnull$a ?v1 ))):named a74 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$b (lmap$h ?v0 ?v1 ))(lnull$b ?v1 ))):named a75 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$a ?v0 ?v1 ))(lnull$a ?v1 ))):named a76 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$b ?v0 ?v1 ))(lnull$b ?v1 ))):named a77 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (lnull$a (lmap$c ?v0 ?v1 ))(lnull$ ?v1 ))):named a78 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (lnull$b (lmap$f ?v0 ?v1 ))(lnull$ ?v1 ))):named a79 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a80 ))
(assert (! (forall ((?v0 B_b_prod_a_fun$ )(?v1 B_b_prod_llist$ ))(= (lnull$a (lmap$i ?v0 ?v1 ))(lnull$e ?v1 ))):named a81 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ ))(! (= (fun_app$l (lprefix$c ?v0 )lNil$f )(lnull$i ?v0 )):pattern ((lprefix$c ?v0 )))):named a82 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(! (= (fun_app$m (lprefix$d ?v0 )lNil$c )(lnull$e ?v0 )):pattern ((lprefix$d ?v0 )))):named a83 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (= (fun_app$n (lprefix$e ?v0 )lNil$d )(lnull$d ?v0 )):pattern ((lprefix$e ?v0 )))):named a84 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(! (= (fun_app$o (lprefix$f ?v0 )lNil$g )(lnull$h ?v0 )):pattern ((lprefix$f ?v0 )))):named a85 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$p (lprefix$g ?v0 )lNil$e )(lnull$c ?v0 )):pattern ((lprefix$g ?v0 )))):named a86 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$d (lprefix$ ?v0 )lNil$ )(lnull$ ?v0 )):pattern ((lprefix$ ?v0 )))):named a87 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$e (lprefix$a ?v0 )lNil$a )(lnull$a ?v0 )):pattern ((lprefix$a ?v0 )))):named a88 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$f (lprefix$b ?v0 )lNil$b )(lnull$b ?v0 )):pattern ((lprefix$b ?v0 )))):named a89 ))
(check-sat )
;(get-unsat-core )
