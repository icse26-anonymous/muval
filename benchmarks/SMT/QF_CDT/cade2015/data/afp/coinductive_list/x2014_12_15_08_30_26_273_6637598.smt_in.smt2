;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_bool_fun_nat_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ (A$ )Bool )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun inf$ (Nat_set$ Nat_set$ )Nat_set$ )
(declare-fun one$ ()Nat$ )
(declare-fun uua$ ()A_bool_fun$ )
(declare-fun uub$ ()Nat_bool_fun$ )
(declare-fun uuc$ ()Nat_bool_fun$ )
(declare-fun uud$ (Nat_bool_fun$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun uue$ (Nat_bool_fun$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun uuf$ ()A_bool_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun plus$ (Nat$ )Nat_nat_fun$ )
(declare-fun image$ (Nat_nat_fun$ Nat_set$ )Nat_set$ )
(declare-fun finite$ (Nat_set$ )Bool )
(declare-fun insert$ (Nat$ Nat_set$ )Nat_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Nat_set$ Nat_set$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (Nat_bool_fun_nat_bool_fun_fun$ Nat_bool_fun$ )Nat_bool_fun$ )
(declare-fun fun_app$c (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(and (less$ (enat$ ?v0 )(llength$ xsa$ ))(p$ (lnth$ xsa$ ?v0 )))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uub$ ?v0 )(less$ (enat$ ?v0 )(llength$ (ltl$ (ldropWhile$ uua$ xsa$ ))))):pattern ((fun_app$ uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uuc$ ?v0 )(p$ (lnth$ (ltl$ (ldropWhile$ uua$ xsa$ ))?v0 ))):pattern ((fun_app$ uuc$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a uua$ ?v0 )(not (p$ ?v0 ))):pattern ((fun_app$a uua$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uud$ ?v0 )?v1 )?v2 )(or (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uud$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uue$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uue$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a uuf$ ?v0 )true ):pattern ((fun_app$a uuf$ ?v0 )))):named a6 ))
(assert (! (not (finite$ (collect$ uu$ ))):named a7 ))
(assert (! (= (llength$ (ltakeWhile$ uua$ xsa$ ))(enat$ n$ )):named a8 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= (llength$ (ltakeWhile$ uua$ xsa$ ))(enat$ ?v0 ))false ))false ):named a9 ))
(assert (! (not (lfinite$ xsa$ )):named a10 ))
(assert (! (finite$ (image$ (plus$ (fun_app$c (plus$ n$ )one$ ))(inf$ (collect$ uub$ )(collect$ uuc$ )))):named a11 ))
(assert (! (finite$ (inf$ (collect$ uub$ )(collect$ uuc$ ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ (ltakeWhile$ ?v1 ?v2 )))(= (lnth$ (ltakeWhile$ ?v1 ?v2 )?v0 )(lnth$ ?v2 ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(= (finite$ (collect$ (fun_app$b (uud$ ?v0 )?v1 )))(and (finite$ (collect$ ?v0 ))(finite$ (collect$ ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(=> (or (finite$ (collect$ ?v0 ))(finite$ (collect$ ?v1 )))(finite$ (collect$ (fun_app$b (uue$ ?v0 )?v1 ))))):named a15 ))
(assert (! (less_eq$ (collect$ uu$ )(insert$ (the_enat$ (llength$ (ltakeWhile$ uua$ xsa$ )))(image$ (plus$ (fun_app$c (plus$ n$ )one$ ))(inf$ (collect$ uub$ )(collect$ uuc$ ))))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (exists ((?v0 A$ ))(and (member$ ?v0 (lset$ xsa$ ))(p$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(=> (less$ (llength$ (ltakeWhile$ ?v0 ?v1 ))(llength$ ?v1 ))(not (fun_app$a ?v0 (lnth$ ?v1 (the_enat$ (llength$ (ltakeWhile$ ?v0 ?v1 )))))))):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ltakeWhile$ uuf$ ?v0 )?v0 )):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a21 ))
(assert (! (not (lfinite$ xs$ )):named a22 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_nat_fun$ ))(=> (finite$ ?v0 )(finite$ (image$ ?v1 ?v0 )))):named a23 ))
(check-sat )
;(get-unsat-core )
