;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_llist_b_a_prod_llist_fun$ 0 )
(declare-sort B_llist_a_b_prod_llist_fun$ 0 )
(declare-sort B_llist_b_b_prod_llist_fun$ 0 )
(declare-sort B_a_prod_llist_a_b_a_prod_prod_llist_fun$ 0 )
(declare-sort B_a_prod_llist_b_b_a_prod_prod_llist_fun$ 0 )
(declare-datatypes ()((B_a_prod$ (pair$ (fst$ B$ )(snd$ A$ )))))
(declare-sort B_a_prod_llist$ 0)
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()B_a_prod_llist$)
(declare-fun lhd$ (B_a_prod_llist$)B_a_prod$)
(declare-fun ltl$ (B_a_prod_llist$)B_a_prod_llist$)
(declare-fun lCons$ (B_a_prod$ B_a_prod_llist$ )B_a_prod_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun lNil$b ()A_llist$)
(declare-fun lhd$b (A_llist$)A$)
(declare-fun ltl$b (A_llist$)A_llist$)
(declare-fun lCons$b (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_b_a_prod_prod$ (pair$a (fst$a A$ )(snd$a B_a_prod$ )))))
(declare-sort A_b_a_prod_prod_llist$ 0)
(declare-fun lNil$c ()A_b_a_prod_prod_llist$)
(declare-fun lhd$c (A_b_a_prod_prod_llist$)A_b_a_prod_prod$)
(declare-fun ltl$c (A_b_a_prod_prod_llist$)A_b_a_prod_prod_llist$)
(declare-fun lCons$c (A_b_a_prod_prod$ A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist$)
(declare-datatypes ()((A_b_prod$ (pair$b (fst$b A$ )(snd$b B$ )))))
(declare-sort A_b_prod_llist$ 0)
(declare-fun lNil$d ()A_b_prod_llist$)
(declare-fun lhd$d (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$d (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$d (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-datatypes ()((A_a_prod$ (pair$c (fst$c A$ )(snd$c A$ )))))
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$e ()A_a_prod_llist$)
(declare-fun lhd$e (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$e (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$e (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-datatypes ()((B_b_a_prod_prod$ (pair$d (fst$d B$ )(snd$d B_a_prod$ )))))
(declare-sort B_b_a_prod_prod_llist$ 0)
(declare-fun lNil$f ()B_b_a_prod_prod_llist$)
(declare-fun lhd$f (B_b_a_prod_prod_llist$)B_b_a_prod_prod$)
(declare-fun ltl$f (B_b_a_prod_prod_llist$)B_b_a_prod_prod_llist$)
(declare-fun lCons$f (B_b_a_prod_prod$ B_b_a_prod_prod_llist$ )B_b_a_prod_prod_llist$)
(declare-datatypes ()((B_b_prod$ (pair$e (fst$e B$ )(snd$e B$ )))))
(declare-sort B_b_prod_llist$ 0)
(declare-fun lNil$g ()B_b_prod_llist$)
(declare-fun lhd$g (B_b_prod_llist$)B_b_prod$)
(declare-fun ltl$g (B_b_prod_llist$)B_b_prod_llist$)
(declare-fun lCons$g (B_b_prod$ B_b_prod_llist$ )B_b_prod_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))(B_list$ (nil$ )(cons$ (hd$ B$ )(tl$ B_list$ )))(B_a_prod_list$ (nil$a )(cons$a (hd$a B_a_prod$ )(tl$a B_a_prod_list$ )))(A_list$ (nil$b )(cons$b (hd$b A$ )(tl$b A_list$ )))(B_a_prod_a_prod$ (pair$f (fst$f B_a_prod$ )(snd$f A$ )))))
(declare-sort B_a_prod_a_prod_llist$ 0)
(declare-fun lNil$h ()B_a_prod_a_prod_llist$)
(declare-fun lhd$h (B_a_prod_a_prod_llist$)B_a_prod_a_prod$)
(declare-fun ltl$h (B_a_prod_a_prod_llist$)B_a_prod_a_prod_llist$)
(declare-fun lCons$h (B_a_prod_a_prod$ B_a_prod_a_prod_llist$ )B_a_prod_a_prod_llist$)
(declare-datatypes ()((B_a_prod_b_prod$ (pair$g (fst$g B_a_prod$ )(snd$g B$ )))))
(declare-sort B_a_prod_b_prod_llist$ 0)
(declare-fun lNil$i ()B_a_prod_b_prod_llist$)
(declare-fun lhd$i (B_a_prod_b_prod_llist$)B_a_prod_b_prod$)
(declare-fun ltl$i (B_a_prod_b_prod_llist$)B_a_prod_b_prod_llist$)
(declare-fun lCons$i (B_a_prod_b_prod$ B_a_prod_b_prod_llist$ )B_a_prod_b_prod_llist$)
(declare-datatypes ()((B_a_prod_b_a_prod_prod$ (pair$h (fst$h B_a_prod$ )(snd$h B_a_prod$ )))))
(declare-sort B_a_prod_b_a_prod_prod_llist$ 0)
(declare-fun lNil$j ()B_a_prod_b_a_prod_prod_llist$)
(declare-fun lhd$j (B_a_prod_b_a_prod_prod_llist$)B_a_prod_b_a_prod_prod$)
(declare-fun ltl$j (B_a_prod_b_a_prod_prod_llist$)B_a_prod_b_a_prod_prod_llist$)
(declare-fun lCons$j (B_a_prod_b_a_prod_prod$ B_a_prod_b_a_prod_prod_llist$ )B_a_prod_b_a_prod_prod_llist$)
(declare-datatypes ()((A_b_b_prod_prod$ (pair$i (fst$i A$ )(snd$i B_b_prod$ )))))
(declare-sort A_b_b_prod_prod_llist$ 0)
(declare-fun lNil$k ()A_b_b_prod_prod_llist$)
(declare-fun lhd$k (A_b_b_prod_prod_llist$)A_b_b_prod_prod$)
(declare-fun ltl$k (A_b_b_prod_prod_llist$)A_b_b_prod_prod_llist$)
(declare-fun lCons$k (A_b_b_prod_prod$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$)
(declare-fun xs$ ()B_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun lzip$ (B_llist$ )A_llist_b_a_prod_llist_fun$ )
(declare-fun ldrop$ (Enat$ B_b_a_prod_prod_llist$ )B_b_a_prod_prod_llist$ )
(declare-fun ltake$ (Enat$ B_llist$ )B_llist$ )
(declare-fun lzip$a (A_llist$ )B_a_prod_llist_a_b_a_prod_prod_llist_fun$ )
(declare-fun lzip$b (A_llist$ )B_llist_a_b_prod_llist_fun$ )
(declare-fun lzip$c (A_llist$ )A_llist_a_a_prod_llist_fun$ )
(declare-fun lzip$d (B_llist$ )B_a_prod_llist_b_b_a_prod_prod_llist_fun$ )
(declare-fun lzip$e (B_llist$ )B_llist_b_b_prod_llist_fun$ )
(declare-fun lzip$f (B_a_prod_llist$ A_llist$ )B_a_prod_a_prod_llist$ )
(declare-fun lzip$g (B_a_prod_llist$ B_llist$ )B_a_prod_b_prod_llist$ )
(declare-fun lzip$h (B_a_prod_llist$ B_a_prod_llist$ )B_a_prod_b_a_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun ldrop$a (Enat$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun ldrop$b (Enat$ A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist$ )
(declare-fun ldrop$c (Enat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ldrop$d (Enat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ldrop$e (Enat$ B_llist$ )B_llist$ )
(declare-fun ldrop$f (Enat$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun ldrop$g (Enat$ A_llist$ )A_llist$ )
(declare-fun ldrop$h (Enat$ B_a_prod_a_prod_llist$ )B_a_prod_a_prod_llist$ )
(declare-fun ldrop$i (Enat$ B_a_prod_b_prod_llist$ )B_a_prod_b_prod_llist$ )
(declare-fun ldrop$j (Enat$ B_a_prod_b_a_prod_prod_llist$ )B_a_prod_b_a_prod_prod_llist$ )
(declare-fun ldrop$k (Enat$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun ldropn$ (Nat$ B_b_a_prod_prod_llist$ )B_b_a_prod_prod_llist$ )
(declare-fun ltake$a (Enat$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun ltake$b (Enat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_llist_b_a_prod_llist_fun$ A_llist$ )B_a_prod_llist$ )
(declare-fun ldropn$a (Nat$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun ldropn$b (Nat$ A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist$ )
(declare-fun ldropn$c (Nat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ldropn$d (Nat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ldropn$e (Nat$ B_llist$ )B_llist$ )
(declare-fun ldropn$f (Nat$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun ldropn$g (Nat$ A_llist$ )A_llist$ )
(declare-fun ldropn$h (Nat$ B_a_prod_a_prod_llist$ )B_a_prod_a_prod_llist$ )
(declare-fun ldropn$i (Nat$ B_a_prod_b_prod_llist$ )B_a_prod_b_prod_llist$ )
(declare-fun ldropn$j (Nat$ B_a_prod_b_a_prod_prod_llist$ )B_a_prod_b_a_prod_prod_llist$ )
(declare-fun ldropn$k (Nat$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun lprefix$ (B_llist$ B_llist$ )Bool )
(declare-fun distinct$ (B_list$ )Bool )
(declare-fun fun_app$a (B_a_prod_llist_a_b_a_prod_prod_llist_fun$ B_a_prod_llist$ )A_b_a_prod_prod_llist$ )
(declare-fun fun_app$b (B_llist_a_b_prod_llist_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun fun_app$c (A_llist_a_a_prod_llist_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$d (B_a_prod_llist_b_b_a_prod_prod_llist_fun$ B_a_prod_llist$ )B_b_a_prod_prod_llist$ )
(declare-fun fun_app$e (B_llist_b_b_prod_llist_fun$ B_llist$ )B_b_prod_llist$ )
(declare-fun llist_of$ (B_list$ )B_llist$ )
(declare-fun lprefix$a (B_a_prod_llist$ B_a_prod_llist$ )Bool )
(declare-fun lprefix$b (A_llist$ A_llist$ )Bool )
(declare-fun distinct$a (B_a_prod_list$ )Bool )
(declare-fun distinct$b (A_list$ )Bool )
(declare-fun ldistinct$ (B_a_prod_llist$ )Bool )
(declare-fun llist_of$a (B_a_prod_list$ )B_a_prod_llist$ )
(declare-fun llist_of$b (A_list$ )A_llist$ )
(declare-fun ldistinct$a (A_llist$ )Bool )
(declare-fun ldistinct$b (A_b_a_prod_prod_llist$ )Bool )
(declare-fun ldistinct$c (A_b_prod_llist$ )Bool )
(declare-fun ldistinct$d (A_a_prod_llist$ )Bool )
(declare-fun ldistinct$e (B_llist$ )Bool )
(declare-fun ldistinct$f (B_b_a_prod_prod_llist$ )Bool )
(declare-fun ldistinct$g (B_b_prod_llist$ )Bool )
(assert (! (not (ldistinct$ (fun_app$ (lzip$ xs$ )ys$ ))):named a0 ))
(assert (! (ldistinct$a ys$ ):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_a_prod_llist$ ))(=> (ldistinct$a ?v0 )(ldistinct$b (fun_app$a (lzip$a ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (ldistinct$a ?v0 )(ldistinct$c (fun_app$b (lzip$b ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (ldistinct$a ?v0 )(ldistinct$d (fun_app$c (lzip$c ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_prod_llist$ ))(=> (ldistinct$e ?v0 )(ldistinct$f (fun_app$d (lzip$d ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (ldistinct$e ?v0 )(ldistinct$g (fun_app$e (lzip$e ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(=> (ldistinct$e ?v0 )(ldistinct$ (fun_app$ (lzip$ ?v0 )?v1 )))):named a7 ))
(assert (! (= (ldistinct$e lNil$a )true ):named a8 ))
(assert (! (= (ldistinct$ lNil$ )true ):named a9 ))
(assert (! (= (ldistinct$a lNil$b )true ):named a10 ))
(assert (! (forall ((?v0 B_b_a_prod_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$f ?v0 )(ldistinct$f (ldropn$ ?v1 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$g ?v0 )(ldistinct$g (ldropn$a ?v1 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$b ?v0 )(ldistinct$b (ldropn$b ?v1 ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$c ?v0 )(ldistinct$c (ldropn$c ?v1 ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$d ?v0 )(ldistinct$d (ldropn$d ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Nat$ ))(=> (ldistinct$e ?v0 )(ldistinct$e (ldropn$e ?v1 ?v0 )))):named a16 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ldropn$f ?v1 ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (ldistinct$a ?v0 )(ldistinct$a (ldropn$g ?v1 ?v0 )))):named a18 ))
(assert (! (forall ((?v0 B_b_a_prod_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$f ?v0 )(ldistinct$f (ldrop$ ?v1 ?v0 )))):named a19 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$g ?v0 )(ldistinct$g (ldrop$a ?v1 ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$b ?v0 )(ldistinct$b (ldrop$b ?v1 ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$c ?v0 )(ldistinct$c (ldrop$c ?v1 ?v0 )))):named a22 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$d ?v0 )(ldistinct$d (ldrop$d ?v1 ?v0 )))):named a23 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Enat$ ))(=> (ldistinct$e ?v0 )(ldistinct$e (ldrop$e ?v1 ?v0 )))):named a24 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ldrop$f ?v1 ?v0 )))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(=> (ldistinct$a ?v0 )(ldistinct$a (ldrop$g ?v1 ?v0 )))):named a26 ))
(assert (! (ldistinct$e lNil$a ):named a27 ))
(assert (! (ldistinct$ lNil$ ):named a28 ))
(assert (! (ldistinct$a lNil$b ):named a29 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (ldistinct$e ?v0 )(lprefix$ ?v1 ?v0 ))(ldistinct$e ?v1 ))):named a30 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ ))(=> (and (ldistinct$ ?v0 )(lprefix$a ?v1 ?v0 ))(ldistinct$ ?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (ldistinct$a ?v0 )(lprefix$b ?v1 ?v0 ))(ldistinct$a ?v1 ))):named a32 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (ldistinct$e ?v0 )(ldistinct$e (ltl$a ?v0 )))):named a33 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ltl$ ?v0 )))):named a34 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (ldistinct$a ?v0 )(ldistinct$a (ltl$b ?v0 )))):named a35 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Enat$ ))(=> (ldistinct$e ?v0 )(ldistinct$e (ltake$ ?v1 ?v0 )))):named a36 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ltake$a ?v1 ?v0 )))):named a37 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(=> (ldistinct$a ?v0 )(ldistinct$a (ltake$b ?v1 ?v0 )))):named a38 ))
(assert (! (forall ((?v0 B_list$ ))(= (ldistinct$e (llist_of$ ?v0 ))(distinct$ ?v0 ))):named a39 ))
(assert (! (forall ((?v0 B_a_prod_list$ ))(= (ldistinct$ (llist_of$a ?v0 ))(distinct$a ?v0 ))):named a40 ))
(assert (! (forall ((?v0 A_list$ ))(= (ldistinct$a (llist_of$b ?v0 ))(distinct$b ?v0 ))):named a41 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (ldropn$f ?v0 (fun_app$ (lzip$ ?v1 )?v2 ))(fun_app$ (lzip$ (ldropn$e ?v0 ?v1 ))(ldropn$g ?v0 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (ldropn$d ?v0 (fun_app$c (lzip$c ?v1 )?v2 ))(fun_app$c (lzip$c (ldropn$g ?v0 ?v1 ))(ldropn$g ?v0 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (ldropn$c ?v0 (fun_app$b (lzip$b ?v1 )?v2 ))(fun_app$b (lzip$b (ldropn$g ?v0 ?v1 ))(ldropn$e ?v0 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (ldropn$a ?v0 (fun_app$e (lzip$e ?v1 )?v2 ))(fun_app$e (lzip$e (ldropn$e ?v0 ?v1 ))(ldropn$e ?v0 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_a_prod_llist$ ))(= (ldropn$b ?v0 (fun_app$a (lzip$a ?v1 )?v2 ))(fun_app$a (lzip$a (ldropn$g ?v0 ?v1 ))(ldropn$f ?v0 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_llist$ )(?v2 A_llist$ ))(= (ldropn$h ?v0 (lzip$f ?v1 ?v2 ))(lzip$f (ldropn$f ?v0 ?v1 )(ldropn$g ?v0 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_llist$ )(?v2 B_llist$ ))(= (ldropn$i ?v0 (lzip$g ?v1 ?v2 ))(lzip$g (ldropn$f ?v0 ?v1 )(ldropn$e ?v0 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_a_prod_llist$ ))(= (ldropn$ ?v0 (fun_app$d (lzip$d ?v1 )?v2 ))(fun_app$d (lzip$d (ldropn$e ?v0 ?v1 ))(ldropn$f ?v0 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod_llist$ ))(= (ldropn$j ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (ldropn$f ?v0 ?v1 )(ldropn$f ?v0 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_b_prod_llist$ ))(= (ldropn$k ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (ldropn$g ?v0 ?v1 )(ldropn$a ?v0 ?v2 )))):named a51 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (ldrop$f ?v0 (fun_app$ (lzip$ ?v1 )?v2 ))(fun_app$ (lzip$ (ldrop$e ?v0 ?v1 ))(ldrop$g ?v0 ?v2 )))):named a52 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (ldrop$d ?v0 (fun_app$c (lzip$c ?v1 )?v2 ))(fun_app$c (lzip$c (ldrop$g ?v0 ?v1 ))(ldrop$g ?v0 ?v2 )))):named a53 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (ldrop$c ?v0 (fun_app$b (lzip$b ?v1 )?v2 ))(fun_app$b (lzip$b (ldrop$g ?v0 ?v1 ))(ldrop$e ?v0 ?v2 )))):named a54 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (ldrop$a ?v0 (fun_app$e (lzip$e ?v1 )?v2 ))(fun_app$e (lzip$e (ldrop$e ?v0 ?v1 ))(ldrop$e ?v0 ?v2 )))):named a55 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 B_a_prod_llist$ ))(= (ldrop$b ?v0 (fun_app$a (lzip$a ?v1 )?v2 ))(fun_app$a (lzip$a (ldrop$g ?v0 ?v1 ))(ldrop$f ?v0 ?v2 )))):named a56 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_prod_llist$ )(?v2 A_llist$ ))(= (ldrop$h ?v0 (lzip$f ?v1 ?v2 ))(lzip$f (ldrop$f ?v0 ?v1 )(ldrop$g ?v0 ?v2 )))):named a57 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_prod_llist$ )(?v2 B_llist$ ))(= (ldrop$i ?v0 (lzip$g ?v1 ?v2 ))(lzip$g (ldrop$f ?v0 ?v1 )(ldrop$e ?v0 ?v2 )))):named a58 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_a_prod_llist$ ))(= (ldrop$ ?v0 (fun_app$d (lzip$d ?v1 )?v2 ))(fun_app$d (lzip$d (ldrop$e ?v0 ?v1 ))(ldrop$f ?v0 ?v2 )))):named a59 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod_llist$ ))(= (ldrop$j ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (ldrop$f ?v0 ?v1 )(ldrop$f ?v0 ?v2 )))):named a60 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 B_b_prod_llist$ ))(= (ldrop$k ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (ldrop$g ?v0 ?v1 )(ldrop$a ?v0 ?v2 )))):named a61 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (lzip$c ?v0 )lNil$b )lNil$e ):pattern ((lzip$c ?v0 )))):named a62 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$d (lzip$d ?v0 )lNil$ )lNil$f ):pattern ((lzip$d ?v0 )))):named a63 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lzip$a ?v0 )lNil$ )lNil$c ):pattern ((lzip$a ?v0 )))):named a64 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$e (lzip$e ?v0 )lNil$a )lNil$g ):pattern ((lzip$e ?v0 )))):named a65 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (lzip$b ?v0 )lNil$a )lNil$d ):pattern ((lzip$b ?v0 )))):named a66 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ (lzip$ ?v0 )lNil$b )lNil$ ):pattern ((lzip$ ?v0 )))):named a67 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (= (fun_app$a (lzip$a lNil$b )?v0 )lNil$c ):pattern ((fun_app$a (lzip$a lNil$b )?v0 )))):named a68 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$b (lzip$b lNil$b )?v0 )lNil$d ):pattern ((fun_app$b (lzip$b lNil$b )?v0 )))):named a69 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (lzip$c lNil$b )?v0 )lNil$e ):pattern ((fun_app$c (lzip$c lNil$b )?v0 )))):named a70 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (= (fun_app$d (lzip$d lNil$a )?v0 )lNil$f ):pattern ((fun_app$d (lzip$d lNil$a )?v0 )))):named a71 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$e (lzip$e lNil$a )?v0 )lNil$g ):pattern ((fun_app$e (lzip$e lNil$a )?v0 )))):named a72 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lzip$ lNil$a )?v0 )lNil$ ):pattern ((fun_app$ (lzip$ lNil$a )?v0 )))):named a73 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$ ?v0 ?v0 )):named a74 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$b ?v0 ?v0 )):named a75 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(lprefix$a ?v0 ?v0 )):named a76 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$ ?v0 ?v0 )):named a77 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$b ?v0 ?v0 )):named a78 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(lprefix$a ?v0 ?v0 )):named a79 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a80 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$b ?v0 )(llist_of$b ?v1 ))(= ?v0 ?v1 ))):named a81 ))
(assert (! (forall ((?v0 B_a_prod_list$ )(?v1 B_a_prod_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a82 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$b lNil$b ?v0 )true ):pattern ((lprefix$b lNil$b ?v0 )))):named a83 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (= (lprefix$a lNil$ ?v0 )true ):pattern ((lprefix$a lNil$ ?v0 )))):named a84 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (lprefix$ lNil$a ?v0 )true ):pattern ((lprefix$ lNil$a ?v0 )))):named a85 ))
(check-sat )
;(get-unsat-core )
