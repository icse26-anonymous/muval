;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_set_fun$ 0 )
(declare-sort B_nat_prod_b_fun$ 0 )
(declare-sort B_nat_bool_fun_fun$ 0 )
(declare-sort Nat_b_nat_prod_fun$ 0 )
(declare-sort B_nat_prod_bool_fun$ 0 )
(declare-sort B_nat_nat_set_fun_fun$ 0 )
(declare-sort B_nat_b_nat_prod_fun_fun$ 0 )
(declare-sort B_nat_prod_b_nat_prod_fun$ 0 )
(declare-sort B_nat_prod_b_nat_prod_fun_b_nat_prod_b_fun_fun$ 0 )
(declare-sort B_nat_prod_b_nat_prod_fun_b_nat_prod_bool_fun_fun$ 0 )
(declare-datatypes ()((B_nat_prod$ (pair$ (fst$ B$ )(snd$ Nat$ )))))
(declare-fun a$ ()Nat_set$ )
(declare-fun k$ ()Nat$ )
(declare-fun uu$ ()B_nat_bool_fun_fun$ )
(declare-fun uua$ ()B_nat_b_nat_prod_fun_fun$ )
(declare-fun uub$ ()Nat_bool_fun$ )
(declare-fun uuc$ ()B_nat_bool_fun_fun$ )
(declare-fun uud$ ()B_nat_prod_b_fun$ )
(declare-fun uue$ (Bool B_nat_bool_fun_fun$ )B_nat_bool_fun_fun$ )
(declare-fun uuf$ (B_nat_nat_set_fun_fun$ B_nat_b_nat_prod_fun_fun$ )B_nat_nat_set_fun_fun$ )
(declare-fun uug$ (B_nat_bool_fun_fun$ B_nat_b_nat_prod_fun_fun$ )B_nat_bool_fun_fun$ )
(declare-fun uuh$ (B_nat_b_nat_prod_fun_fun$ B_nat_b_nat_prod_fun_fun$ )B_nat_b_nat_prod_fun_fun$ )
(declare-fun uui$ ()B_nat_b_nat_prod_fun_fun$ )
(declare-fun comp$ (B_nat_prod_bool_fun$ )B_nat_prod_b_nat_prod_fun_b_nat_prod_bool_fun_fun$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun comp$a (B_nat_prod_b_fun$ )B_nat_prod_b_nat_prod_fun_b_nat_prod_b_fun_fun$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$a (B_nat_prod_b_fun$ B_nat_prod$ )B$ )
(declare-fun fun_app$b (Nat_b_nat_prod_fun$ Nat$ )B_nat_prod$ )
(declare-fun fun_app$c (B_nat_b_nat_prod_fun_fun$ B$ )Nat_b_nat_prod_fun$ )
(declare-fun fun_app$d (B_nat_bool_fun_fun$ B$ )Nat_bool_fun$ )
(declare-fun fun_app$e (B_nat_prod_b_nat_prod_fun$ B_nat_prod$ )B_nat_prod$ )
(declare-fun fun_app$f (B_nat_prod_bool_fun$ B_nat_prod$ )Bool )
(declare-fun fun_app$g (Nat_nat_set_fun$ Nat$ )Nat_set$ )
(declare-fun fun_app$h (B_nat_nat_set_fun_fun$ B$ )Nat_nat_set_fun$ )
(declare-fun fun_app$i (B_nat_prod_b_nat_prod_fun_b_nat_prod_bool_fun_fun$ B_nat_prod_b_nat_prod_fun$ )B_nat_prod_bool_fun$ )
(declare-fun fun_app$j (B_nat_prod_b_nat_prod_fun_b_nat_prod_b_fun_fun$ B_nat_prod_b_nat_prod_fun$ )B_nat_prod_b_fun$ )
(declare-fun case_prod$ (B_nat_b_nat_prod_fun_fun$ )B_nat_prod_b_nat_prod_fun$ )
(declare-fun case_prod$a (B_nat_bool_fun_fun$ )B_nat_prod_bool_fun$ )
(declare-fun case_prod$b (B_nat_nat_set_fun_fun$ B_nat_prod$ )Nat_set$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uub$ ?v0 )(member$ (plus$ ?v0 k$ )a$ )):pattern ((fun_app$ uub$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B_nat_prod$ ))(! (= (fun_app$a uud$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$a uud$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 Nat$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(pair$ ?v0 (plus$ ?v1 k$ ))):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$d uuc$ ?v0 )?v1 )(member$ ?v1 (collect$ uub$ ))):pattern ((fun_app$ (fun_app$d uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 Nat$ ))(! (= (fun_app$b (fun_app$c uui$ ?v0 )?v1 )(pair$ ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uui$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 B$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$d uu$ ?v0 )?v1 )(member$ ?v1 a$ )):pattern ((fun_app$ (fun_app$d uu$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_nat_b_nat_prod_fun_fun$ )(?v1 B_nat_b_nat_prod_fun_fun$ )(?v2 B$ )(?v3 Nat$ ))(! (= (fun_app$b (fun_app$c (uuh$ ?v0 ?v1 )?v2 )?v3 )(fun_app$e (case_prod$ ?v0 )(fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (uuh$ ?v0 ?v1 )?v2 )?v3 )))):named a6 ))
(assert (! (forall ((?v0 B_nat_bool_fun_fun$ )(?v1 B_nat_b_nat_prod_fun_fun$ )(?v2 B$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$d (uug$ ?v0 ?v1 )?v2 )?v3 )(fun_app$f (case_prod$a ?v0 )(fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$d (uug$ ?v0 ?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 B_nat_nat_set_fun_fun$ )(?v1 B_nat_b_nat_prod_fun_fun$ )(?v2 B$ )(?v3 Nat$ ))(! (= (fun_app$g (fun_app$h (uuf$ ?v0 ?v1 )?v2 )?v3 )(case_prod$b ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$h (uuf$ ?v0 ?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 Bool )(?v1 B_nat_bool_fun_fun$ )(?v2 B$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$d (uue$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$ (fun_app$d ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$d (uue$ ?v0 ?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (not (= (fun_app$i (comp$ (case_prod$a uu$ ))(case_prod$ uua$ ))(case_prod$a uuc$ ))):named a10 ))
(assert (! (forall ((?v0 B_nat_prod$ )(?v1 B_nat_bool_fun_fun$ ))(=> (forall ((?v2 B$ )(?v3 Nat$ ))(=> (= ?v0 (pair$ ?v2 ?v3 ))(fun_app$ (fun_app$d ?v1 ?v2 )?v3 )))(fun_app$f (case_prod$a ?v1 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 B_nat_bool_fun_fun$ )(?v1 B$ )(?v2 Nat$ ))(=> (fun_app$ (fun_app$d ?v0 ?v1 )?v2 )(fun_app$f (case_prod$a ?v0 )(pair$ ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_nat_bool_fun_fun$ )(?v1 B$ )(?v2 Nat$ ))(=> (fun_app$ (fun_app$d ?v0 ?v1 )?v2 )(fun_app$f (case_prod$a ?v0 )(pair$ ?v1 ?v2 )))):named a13 ))
(assert (! (= (fun_app$j (comp$a uud$ )(case_prod$ uua$ ))uud$ ):named a14 ))
(assert (! (forall ((?v0 Bool )(?v1 B_nat_bool_fun_fun$ )(?v2 B_nat_prod$ ))(= (fun_app$f (case_prod$a (uue$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$f (case_prod$a ?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_nat_prod_b_fun$ )(?v1 B_nat_prod_b_nat_prod_fun$ )(?v2 B_nat_prod$ ))(! (= (fun_app$a (fun_app$j (comp$a ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$j (comp$a ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 B_nat_prod_bool_fun$ )(?v1 B_nat_prod_b_nat_prod_fun$ )(?v2 B_nat_prod$ ))(! (= (fun_app$f (fun_app$i (comp$ ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$i (comp$ ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 B_nat_nat_set_fun_fun$ )(?v1 B_nat_b_nat_prod_fun_fun$ )(?v2 B_nat_prod$ ))(= (case_prod$b ?v0 (fun_app$e (case_prod$ ?v1 )?v2 ))(case_prod$b (uuf$ ?v0 ?v1 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 B_nat_bool_fun_fun$ )(?v1 B_nat_b_nat_prod_fun_fun$ )(?v2 B_nat_prod$ ))(= (fun_app$f (case_prod$a ?v0 )(fun_app$e (case_prod$ ?v1 )?v2 ))(fun_app$f (case_prod$a (uug$ ?v0 ?v1 ))?v2 ))):named a19 ))
(assert (! (forall ((?v0 B_nat_b_nat_prod_fun_fun$ )(?v1 B_nat_b_nat_prod_fun_fun$ )(?v2 B_nat_prod$ ))(= (fun_app$e (case_prod$ ?v0 )(fun_app$e (case_prod$ ?v1 )?v2 ))(fun_app$e (case_prod$ (uuh$ ?v0 ?v1 ))?v2 ))):named a20 ))
(assert (! (forall ((?v0 B_nat_prod$ ))(! (= (fun_app$e (case_prod$ uui$ )?v0 )?v0 ):pattern ((fun_app$e (case_prod$ uui$ )?v0 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a23 ))
(assert (! (forall ((?v0 B$ )(?v1 Nat$ )(?v2 B$ )(?v3 Nat$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 B$ )(?v1 Nat$ )(?v2 B$ )(?v3 Nat$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_nat_nat_set_fun_fun$ )(?v2 B$ )(?v3 Nat$ ))(=> (member$ ?v0 (fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))(member$ ?v0 (case_prod$b ?v1 (pair$ ?v2 ?v3 ))))):named a26 ))
(assert (! (forall ((?v0 B_nat_prod$ )(?v1 Nat$ )(?v2 B_nat_nat_set_fun_fun$ ))(=> (forall ((?v3 B$ )(?v4 Nat$ ))(=> (= ?v0 (pair$ ?v3 ?v4 ))(member$ ?v1 (fun_app$g (fun_app$h ?v2 ?v3 )?v4 ))))(member$ ?v1 (case_prod$b ?v2 ?v0 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_nat_nat_set_fun_fun$ )(?v2 B_nat_prod$ ))(=> (and (member$ ?v0 (case_prod$b ?v1 ?v2 ))(forall ((?v3 B$ )(?v4 Nat$ ))(=> (and (= ?v2 (pair$ ?v3 ?v4 ))(member$ ?v0 (fun_app$g (fun_app$h ?v1 ?v3 )?v4 )))false )))false )):named a28 ))
(check-sat )
;(get-unsat-core )
