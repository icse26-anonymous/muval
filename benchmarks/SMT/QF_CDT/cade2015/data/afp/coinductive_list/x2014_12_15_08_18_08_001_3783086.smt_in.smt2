;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Enat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun x$ ()A$ )
(declare-fun na$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun less$a (Nat$ )Nat_bool_fun$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun fun_app$c (Enat_nat_fun$ Enat$ )Nat$ )
(declare-fun fun_app$d (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun fun_app$e (Nat_nat_fun$ Nat$ )Nat$ )
(assert (! (not (fun_app$ (less$ (enat$ na$ ))(llength$ xs$ ))):named a0 ))
(assert (! (fun_app$ (less$ (enat$ (suc$ na$ )))(llength$ xsa$ )):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a4 ))
(assert (! (= xsa$ (lCons$ x$ xs$ )):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (fun_app$ (less$ (enat$ na$ ))(llength$ ?v0 ))(= (lhd$ (ldropn$ na$ ?v0 ))(lnth$ ?v0 na$ )))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (less$ ?v1 )?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$a (less$a ?v0 )?v1 )(fun_app$a (less$a ?v1 )?v0 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (fun_app$ (less$ ?v0 )?v1 ))(or (fun_app$ (less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (fun_app$a (less$a ?v0 )?v1 ))(or (fun_app$a (less$a ?v1 )?v0 )(= ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (=> (fun_app$ (less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$ (less$ ?v1 )?v0 )false )))false )):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (fun_app$a (less$a ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$a (less$a ?v1 )?v0 )false )))false )):named a12 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$a (less$a ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_enat_fun$ )(?v2 Enat$ )(?v3 Enat$ ))(=> (and (= ?v0 (fun_app$b ?v1 ?v2 ))(and (fun_app$ (less$ ?v2 )?v3 )(forall ((?v4 Enat$ )(?v5 Enat$ ))(=> (fun_app$ (less$ ?v4 )?v5 )(fun_app$ (less$ (fun_app$b ?v1 ?v4 ))(fun_app$b ?v1 ?v5 ))))))(fun_app$ (less$ ?v0 )(fun_app$b ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat_nat_fun$ )(?v2 Enat$ )(?v3 Enat$ ))(=> (and (= ?v0 (fun_app$c ?v1 ?v2 ))(and (fun_app$ (less$ ?v2 )?v3 )(forall ((?v4 Enat$ )(?v5 Enat$ ))(=> (fun_app$ (less$ ?v4 )?v5 )(fun_app$a (less$a (fun_app$c ?v1 ?v4 ))(fun_app$c ?v1 ?v5 ))))))(fun_app$a (less$a ?v0 )(fun_app$c ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_enat_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 (fun_app$d ?v1 ?v2 ))(and (fun_app$a (less$a ?v2 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$a (less$a ?v4 )?v5 )(fun_app$ (less$ (fun_app$d ?v1 ?v4 ))(fun_app$d ?v1 ?v5 ))))))(fun_app$ (less$ ?v0 )(fun_app$d ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 (fun_app$e ?v1 ?v2 ))(and (fun_app$a (less$a ?v2 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$a (less$a ?v4 )?v5 )(fun_app$a (less$a (fun_app$e ?v1 ?v4 ))(fun_app$e ?v1 ?v5 ))))))(fun_app$a (less$a ?v0 )(fun_app$e ?v1 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a19 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= xsa$ (lCons$ ?v0 ?v1 ))false ))false ):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (less$ (enat$ ?v0 ))(enat$ ?v1 ))(fun_app$a (less$a ?v0 )?v1 )):pattern ((fun_app$ (less$ (enat$ ?v0 ))(enat$ ?v1 ))))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (ldropn$ (suc$ ?v0 )(lCons$ ?v1 ?v2 ))(ldropn$ ?v0 ?v2 )):pattern ((ldropn$ (suc$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a22 ))
(check-sat )
;(get-unsat-core )
