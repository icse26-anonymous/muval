;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun x$ ()A$ )
(declare-fun uu$ (A$ )A_llist_a_llist_fun$ )
(declare-fun xa$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(lCons$ ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (= (list_of$ (lCons$ xa$ (lCons$ x$ xs$ )))(cons$ xa$ (list_of$ (lCons$ x$ xs$ ))))):named a1 ))
(assert (! (= (list_of$ (lCons$ x$ xs$ ))(cons$ x$ (list_of$ xs$ ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (lfinite$ xs$ ):named a4 ))
(assert (! (forall ((?v0 A$ ))(! (= (list_of$ (lCons$ ?v0 xs$ ))(cons$ ?v0 (list_of$ xs$ ))):pattern ((uu$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (lmember$ ?v0 (lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$ ?v0 ?v2 ))):pattern ((lmember$ ?v0 (lCons$ ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_llist$ ))(= (= (llist_of$ ?v0 )(lCons$ ?v1 ?v2 ))(exists ((?v3 A_list$ ))(and (= ?v0 (cons$ ?v1 ?v3 ))(= ?v2 (llist_of$ ?v3 )))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (llist_of$ (cons$ ?v0 ?v1 ))(lCons$ ?v0 (llist_of$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (iterates$ ?v0 ?v1 )(lCons$ ?v1 (iterates$ ?v0 (fun_app$b ?v0 ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(= (fun_app$a (lsetp$ ?v0 )?v1 )(or (exists ((?v2 A$ )(?v3 A_llist$ ))(and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$a (lsetp$ ?v2 )?v3 ))))))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (fun_app$a (lsetp$ ?v0 )?v1 )(and (forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(=> (and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$a (lsetp$ ?v2 )?v3 )))false ))))false )):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$a (lsetp$ ?v0 )?v1 )(fun_app$a (lsetp$ (lCons$ ?v2 ?v0 ))?v1 ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(fun_app$a (lsetp$ (lCons$ ?v0 ?v1 ))?v0 )):named a17 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(check-sat )
;(get-unsat-core )
