;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun n$ ()Enat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun zero$a ()Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(assert (! (not (= (lhd$ (fun_app$ (ldrop$ n$ )xs$ ))(fun_app$a (lnth$ xs$ )(the_enat$ n$ )))):named a0 ))
(assert (! (less$ n$ (llength$ xs$ )):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lhd$ (iterates$ ?v0 ?v1 ))?v1 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$ (ldrop$ zero$ )?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(fun_app$ (ldrop$ ?v1 )?v2 ))(fun_app$ (ldrop$ (plus$ ?v0 ?v1 ))?v2 ))):named a4 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$ (ldrop$ ?v0 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$b ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$b ?v1 (lhd$ ?v0 )))false ))false )):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 Enat$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$ (ldrop$ ?v1 )?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (not (lnull$ ?v0 ))(= (fun_app$a (lnth$ ?v0 )zero$a )(lhd$ ?v0 ))):pattern ((lnth$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (not (lnull$ ?v0 ))(= (lhd$ ?v0 )(fun_app$a (lnth$ ?v0 )zero$a ))):pattern ((lhd$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a12 ))
(check-sat )
;(get-unsat-core )
