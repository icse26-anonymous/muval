;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_prod_set$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_prod_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_llist_a_llist_prod$ (pair$ (fst$ A_llist$ )(snd$ A_llist$ )))))
(declare-fun p$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun uu$ (Bool A_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun uua$ (A_llist_a_llist_prod_bool_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist_a_llist_prod$ A_llist_a_llist_prod_set$ )Bool )
(declare-fun collect$ (A_llist_a_llist_prod_bool_fun$ )A_llist_a_llist_prod_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_a_llist_prod_bool_fun$ A_llist_a_llist_prod$ )Bool )
(declare-fun case_prod$ (A_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_prod_bool_fun$ )
(assert (! (forall ((?v0 A_llist_a_llist_prod_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a0 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist$ )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$a (uu$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uu$ ?v0 ?v1 )?v2 )?v3 )))):named a1 ))
(assert (! (not (fun_app$ (fun_app$a p$ xsa$ )ysa$ )):named a2 ))
(assert (! (fun_app$ (fun_app$a p$ xs$ )ys$ ):named a3 ))
(assert (! (member$ (pair$ xsa$ ysa$ )(collect$ (case_prod$ p$ ))):named a4 ))
(assert (! (member$ (pair$ xs$ ys$ )(collect$ (case_prod$ p$ ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$ (fun_app$a p$ ?v0 )?v1 )(and (=> (lnull$ ?v1 )(lnull$ ?v0 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(or (fun_app$ (fun_app$a p$ (ltl$ ?v0 ))(ltl$ ?v1 ))(lprefix$ (ltl$ ?v0 )(ltl$ ?v1 )))))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(lnull$ (ltl$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(or (fun_app$ (fun_app$a ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))(= (ltl$ ?v3 )(ltl$ ?v4 )))))))))(= ?v1 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(fun_app$ (fun_app$a ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))))))))(= ?v1 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 A_llist_a_llist_prod$ )(?v1 A_llist_a_llist_bool_fun_fun$ ))(=> (forall ((?v2 A_llist$ )(?v3 A_llist$ ))(=> (= ?v0 (pair$ ?v2 ?v3 ))(fun_app$ (fun_app$a ?v1 ?v2 )?v3 )))(fun_app$b (case_prod$ ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$b (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$b (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_prod$ ))(= (fun_app$b (case_prod$ (uu$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$b (case_prod$ ?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 A_llist_a_llist_prod_bool_fun$ ))(= (case_prod$ (uua$ ?v0 ))?v0 )):named a19 ))
(check-sat )
;(get-unsat-core )
