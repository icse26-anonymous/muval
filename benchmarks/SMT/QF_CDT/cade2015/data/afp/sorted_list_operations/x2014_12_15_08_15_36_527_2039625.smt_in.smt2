;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_list_nat_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_list_a_list_a_list_fun_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun l2a$ ()A_list$ )
(declare-fun bind$ (A_list$ A_a_list_fun$ )A_list$ )
(declare-fun maps$ (A_a_list_fun$ )A_list_a_list_fun$ )
(declare-fun null$ (A_list$ )Bool )
(declare-fun zipf$ (A_a_a_fun_fun$ )A_list_a_list_a_list_fun_fun$ )
(declare-fun member$ (A_list$ )A_bool_fun$ )
(declare-fun splice$ (A_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$ (A_list_bool_fun$ A_list$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_list_nat_fun$ A_list$ )Nat$ )
(declare-fun fun_app$c (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun fun_app$d (A_list_a_list_a_list_fun_fun$ A_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$e (A_a_fun$ A$ )A$ )
(declare-fun fun_app$f (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun list_ex1$ (A_bool_fun$ )A_list_bool_fun$ )
(declare-fun gen_length$ (Nat$ )A_list_nat_fun$ )
(declare-fun diff_sorted$ (A_list$ A_list$ )A_list$ )
(declare-fun inter_sorted$ (A_list$ A_list$ )A_list$ )
(declare-fun subset_sorted$ (A_list$ A_list$ )Bool )
(assert (! (not (= (= nil$ l2a$ )(and (subset_sorted$ nil$ l2a$ )(subset_sorted$ l2a$ nil$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (subset_sorted$ nil$ ?v0 )true ):pattern ((subset_sorted$ nil$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (subset_sorted$ (cons$ ?v0 ?v1 )nil$ )false ):pattern ((cons$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (diff_sorted$ nil$ ?v0 )nil$ ):pattern ((diff_sorted$ nil$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (inter_sorted$ nil$ ?v0 )nil$ ):pattern ((inter_sorted$ nil$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_a_list_fun$ ))(! (= (bind$ nil$ ?v0 )nil$ ):pattern ((bind$ nil$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$ (list_ex1$ ?v0 )nil$ )false ):pattern ((list_ex1$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (member$ nil$ )?v0 )false ):pattern ((fun_app$a (member$ nil$ )?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b (gen_length$ ?v0 )nil$ )?v0 ):pattern ((gen_length$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$c (splice$ ?v0 )nil$ )?v0 ):pattern ((splice$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(! (= (fun_app$c (fun_app$d (zipf$ ?v0 )nil$ )nil$ )nil$ ):pattern ((zipf$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_a_list_fun$ ))(! (= (fun_app$c (maps$ ?v0 )nil$ )nil$ ):pattern ((maps$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_list$ ))(= (= ?v0 nil$ )(null$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ ))(! (= (fun_app$a (member$ (cons$ ?v0 ?v1 ))?v2 )(or (= ?v0 ?v2 )(fun_app$a (member$ ?v1 )?v2 ))):pattern ((fun_app$a (member$ (cons$ ?v0 ?v1 ))?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A$ )(?v4 A_list$ ))(! (= (fun_app$c (fun_app$d (zipf$ ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))(cons$ (fun_app$e (fun_app$f ?v0 ?v1 )?v3 )(fun_app$c (fun_app$d (zipf$ ?v0 )?v2 )?v4 ))):pattern ((fun_app$c (fun_app$d (zipf$ ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(! (= (fun_app$c (splice$ (cons$ ?v0 ?v1 ))(cons$ ?v2 ?v3 ))(cons$ ?v0 (cons$ ?v2 (fun_app$c (splice$ ?v1 )?v3 )))):pattern ((fun_app$c (splice$ (cons$ ?v0 ?v1 ))(cons$ ?v2 ?v3 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
