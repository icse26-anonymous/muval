;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-fun l1$ ()A_list$ )
(declare-fun l2$ ()A_list$ )
(declare-fun x1$ ()A$ )
(declare-fun l1a$ ()A_list$ )
(declare-fun l2a$ ()A_list$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun sorted$ (A_list$ )Bool )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun distinct$ (A_list$ )Bool )
(declare-fun less_eq$a (A$ A$ )Bool )
(declare-fun subset_sorted$ (A_list$ A_list$ )Bool )
(assert (! (not (= (subset_sorted$ (cons$ x1$ l1a$ )l2a$ )(less_eq$ (set$ (cons$ x1$ l1a$ ))(set$ l2a$ )))):named a0 ))
(assert (! (and (distinct$ l1$ )(sorted$ l1$ )):named a1 ))
(assert (! (and (distinct$ l2$ )(sorted$ l2$ )):named a2 ))
(assert (! (and (distinct$ l2a$ )(sorted$ l2a$ )):named a3 ))
(assert (! (not (member$ x1$ (set$ l1a$ ))):named a4 ))
(assert (! (and (distinct$ (cons$ x1$ l1a$ ))(sorted$ (cons$ x1$ l1a$ ))):named a5 ))
(assert (! (and (distinct$ l1a$ )(sorted$ l1a$ )):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(! (=> (and (distinct$ ?v0 )(sorted$ ?v0 ))(= (subset_sorted$ l1a$ ?v0 )(less_eq$ (set$ l1a$ )(set$ ?v0 )))):pattern ((subset_sorted$ l1a$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(! (=> (and (and (distinct$ l1a$ )(sorted$ l1a$ ))(and (distinct$ ?v0 )(sorted$ ?v0 )))(= (subset_sorted$ l1a$ ?v0 )(less_eq$ (set$ l1a$ )(set$ ?v0 )))):pattern ((subset_sorted$ l1a$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (set$ l1a$ ))(less_eq$a x1$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ ))(less_eq$ (set$ ?v0 )(set$ (cons$ ?v1 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (forall ((?v2 A$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_set$ ))(less_eq$ ?v0 ?v0 )):named a14 ))
(assert (! (forall ((?v0 A$ ))(less_eq$a ?v0 ?v0 )):named a15 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_set$ ))(= (less_eq$ (set$ ?v0 )?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 (set$ ?v0 ))(member$ ?v2 ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_list$ ))(=> (member$ ?v0 (set$ (cons$ ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$ ?v0 (set$ ?v2 ))))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(=> (and (member$ ?v0 (set$ ?v1 ))(and (forall ((?v2 A_list$ ))(=> (= ?v1 (cons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_list$ ))(=> (and (= ?v1 (cons$ ?v2 ?v3 ))(member$ ?v0 (set$ ?v3 )))false ))))false )):named a18 ))
(check-sat )
;(get-unsat-core )
