;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun n$ ()A$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xs$b ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun graph$ ()A_a_bool_fun_fun$ )
(declare-fun paths$ (A_a_bool_fun_fun$ )A_llist_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(assert (! (not (member$ x$ (lset$ (fun_app$ (lappend$ xs$ )(lCons$ x$ lNil$ ))))):named a0 ))
(assert (! (not (= n$ x$ )):named a1 ))
(assert (! (lfinite$ xs$ ):named a2 ))
(assert (! (not (member$ n$ (lset$ xs$ ))):named a3 ))
(assert (! (member$ x$ (lset$ xs$a )):named a4 ))
(assert (! (= xs$a (fun_app$ (lappend$ xs$ )(lCons$ x$ xs$b ))):named a5 ))
(assert (! (not (member$ x$ (lset$ xs$ ))):named a6 ))
(assert (! (=> (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lfinite$ ?v0 )(and (= xs$a (fun_app$ (lappend$ ?v0 )(lCons$ x$ ?v1 )))(not (member$ x$ (lset$ ?v0 )))))false ))false ):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$ (lappend$ ?v1 )?v2 ))):pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )))):named a10 ))
(assert (! (member$a (lCons$ n$ (fun_app$ (lappend$ xs$ )(lCons$ x$ lNil$ )))(paths$ graph$ )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0 )(lCons$ ?v1 lNil$ )))?v2 )(fun_app$ (lappend$ ?v0 )(lCons$ ?v1 ?v2 )))):named a12 ))
(assert (! (member$a (fun_app$ (lappend$ (lCons$ n$ (fun_app$ (lappend$ xs$ )(lCons$ x$ lNil$ ))))xs$b )(paths$ graph$ )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$ (lappend$ ?v0 )?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a16 ))
(assert (! (= (fun_app$ (lappend$ lNil$ )lNil$ )lNil$ ):named a17 ))
(check-sat )
;(get-unsat-core )
