;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_llist_list$ (nil$a )(cons$a (hd$a A_llist$ )(tl$a A_llist_list$ )))))
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-datatypes ()((A_llist_option$ (none$ )(some$ (the$ A_llist$ )))(A_option$ (none$a )(some$a (the$a A$ )))))
(declare-fun n$ ()A$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_list$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xs$b ()A_llist$ )
(declare-fun find$ (A_llist_bool_fun$ A_llist_list$ )A_llist_option$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun set$a (A_llist_list$ )A_llist_set$ )
(declare-fun find$a (A_bool_fun$ A_list$ )A_option$ )
(declare-fun graph$ ()A_a_bool_fun_fun$ )
(declare-fun lset$a (A_llist_llist$ )A_llist_set$ )
(declare-fun paths$ (A_a_bool_fun_fun$ )A_llist_set$ )
(declare-fun insert$ (A_llist$ A_llist_list$ )A_llist_list$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun insert$a (A$ A_list$ )A_list$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun listMem$ (A_llist$ A_llist_list$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun member$b (A_llist_list$ )A_llist_bool_fun$ )
(declare-fun member$c (A_list$ )A_bool_fun$ )
(declare-fun rotate1$ (A_llist_list$ )A_llist_list$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun listMem$a (A$ A_list$ )Bool )
(declare-fun list_ex1$ (A_llist_bool_fun$ A_llist_list$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun rotate1$a (A_list$ )A_list$ )
(declare-fun list_ex1$a (A_bool_fun$ A_list$ )Bool )
(declare-fun llist_of$a (A_llist_list$ )A_llist_llist$ )
(declare-fun removeAll$ (A_llist$ A_llist_list$ )A_llist_list$ )
(declare-fun removeAll$a (A$ A_list$ )A_list$ )
(assert (! (not (member$ n$ (set$ xs$ ))):named a0 ))
(assert (! (=> (forall ((?v0 A_list$ ))(=> (= xs$a (llist_of$ ?v0 ))false ))false ):named a1 ))
(assert (! (member$ n$ (lset$ xs$a )):named a2 ))
(assert (! (= xs$a (llist_of$ xs$ )):named a3 ))
(assert (! (not (member$ x$ (lset$ xs$a ))):named a4 ))
(assert (! (not (= n$ x$ )):named a5 ))
(assert (! (lfinite$ xs$a ):named a6 ))
(assert (! (member$a (lCons$ n$ xs$b )(paths$ graph$ )):named a7 ))
(assert (! (forall ((?v0 A_llist_list$ ))(= (lset$a (llist_of$a ?v0 ))(set$a ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_list$ ))(= (lset$ (llist_of$ ?v0 ))(set$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_list$ ))(= (member$a ?v0 (set$a ?v1 ))(fun_app$ (member$b ?v1 )?v0 ))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (member$ ?v0 (set$ ?v1 ))(fun_app$a (member$c ?v1 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_list$ ))(! (=> (member$a ?v0 (set$a ?v1 ))(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (=> (member$ ?v0 (set$ ?v1 ))(= (insert$a ?v0 ?v1 )?v1 )):pattern ((insert$a ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_list$ ))(= (list_ex1$ ?v0 ?v1 )(exists ((?v2 A_llist$ ))(and (and (member$a ?v2 (set$a ?v1 ))(fun_app$ ?v0 ?v2 ))(forall ((?v3 A_llist$ ))(=> (and (member$a ?v3 (set$a ?v1 ))(fun_app$ ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a14 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (list_ex1$a ?v0 ?v1 )(exists ((?v2 A$ ))(and (and (member$ ?v2 (set$ ?v1 ))(fun_app$a ?v0 ?v2 ))(forall ((?v3 A$ ))(=> (and (member$ ?v3 (set$ ?v1 ))(fun_app$a ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a15 ))
(assert (! (forall ((?v0 A_llist_list$ ))(= (set$a (rotate1$ ?v0 ))(set$a ?v0 ))):named a16 ))
(assert (! (forall ((?v0 A_list$ ))(= (set$ (rotate1$a ?v0 ))(set$ ?v0 ))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_list$ ))(! (= (listMem$ ?v0 ?v1 )(member$a ?v0 (set$a ?v1 ))):pattern ((listMem$ ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (listMem$a ?v0 ?v1 )(member$ ?v0 (set$ ?v1 ))):pattern ((listMem$a ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_list$ ))(! (=> (not (member$a ?v0 (set$a ?v1 )))(= (removeAll$ ?v0 ?v1 )?v1 )):pattern ((removeAll$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (=> (not (member$ ?v0 (set$ ?v1 )))(= (removeAll$a ?v0 ?v1 )?v1 )):pattern ((removeAll$a ?v0 ?v1 )))):named a21 ))
(assert (! (member$ x$ (lset$ xs$b )):named a22 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ )(?v2 A_llist_bool_fun$ )(?v3 A_llist_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$a ?v4 (set$a ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (find$ ?v2 ?v0 )(find$ ?v3 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (set$ ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (find$a ?v2 ?v0 )(find$a ?v3 ?v1 )))):named a24 ))
(check-sat )
;(get-unsat-core )
