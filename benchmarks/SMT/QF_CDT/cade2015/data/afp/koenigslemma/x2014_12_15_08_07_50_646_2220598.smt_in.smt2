;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Node$ 0 )
(declare-sort Node_set$ 0 )
(declare-sort Node_bool_fun$ 0 )
(declare-sort Node_llist_set$ 0 )
(declare-sort Node_llist_bool_fun$ 0 )
(declare-sort Node_node_bool_fun_fun$ 0 )
(declare-sort Node_llist$ 0)
(declare-fun lNil$ ()Node_llist$)
(declare-fun lhd$ (Node_llist$)Node$)
(declare-fun ltl$ (Node_llist$)Node_llist$)
(declare-fun lCons$ (Node$ Node_llist$ )Node_llist$)
(declare-datatypes ()((Node_node_set_prod$ (pair$ (fst$ Node$ )(snd$ Node_set$ )))))
(declare-fun f$ (Node_node_set_prod$ )Node_llist$ )
(declare-fun na$ ()Node$ )
(declare-fun xs$ ()Node_llist$ )
(declare-fun nsa$ ()Node_set$ )
(declare-fun top$ ()Node_set$ )
(declare-fun lset$ (Node_llist$ )Node_set$ )
(declare-fun graph$ ()Node_node_bool_fun_fun$ )
(declare-fun paths$ (Node_node_bool_fun_fun$ )Node_llist_set$ )
(declare-fun finite$ (Node_set$ )Bool )
(declare-fun insert$ (Node$ Node_set$ )Node_set$ )
(declare-fun member$ (Node_llist$ Node_llist_set$ )Bool )
(declare-fun uminus$ (Node_set$ )Node_set$ )
(declare-fun collect$ (Node_bool_fun$ )Node_set$ )
(declare-fun fun_app$ (Node_bool_fun$ Node$ )Bool )
(declare-fun member$a (Node$ Node_set$ )Bool )
(declare-fun fun_app$a (Node_node_bool_fun_fun$ Node$ )Node_bool_fun$ )
(declare-fun fun_app$b (Node_llist_bool_fun$ Node_llist$ )Bool )
(declare-fun connected$ (Node_node_bool_fun_fun$ )Bool )
(declare-fun reachable_via$ (Node_node_bool_fun_fun$ Node_set$ Node$ )Node_set$ )
(assert (! (not (or (= xs$ lNil$ )(or (exists ((?v0 Node$ ))(= xs$ (lCons$ ?v0 lNil$ )))(exists ((?v0 Node$ )(?v1 Node$ )(?v2 Node_llist$ ))(and (= xs$ (lCons$ ?v0 (lCons$ ?v1 ?v2 )))(and (fun_app$ (fun_app$a graph$ ?v0 )?v1 )(or (exists ((?v3 Node$ )(?v4 Node_set$ ))(and (= (lCons$ ?v1 ?v2 )(f$ (pair$ ?v3 ?v4 )))(and (finite$ ?v4 )(not (finite$ (reachable_via$ graph$ (uminus$ (insert$ ?v3 ?v4 ))?v3 ))))))(member$ (lCons$ ?v1 ?v2 )(paths$ graph$ ))))))))):named a0 ))
(assert (! (connected$ graph$ ):named a1 ))
(assert (! (finite$ nsa$ ):named a2 ))
(assert (! (forall ((?v0 Node$ ))(finite$ (collect$ (fun_app$a graph$ ?v0 )))):named a3 ))
(assert (! (not (finite$ top$ )):named a4 ))
(assert (! (exists ((?v0 Node$ )(?v1 Node$ )(?v2 Node_llist$ ))(and (= xs$ (lCons$ ?v0 (lCons$ ?v1 ?v2 )))(and (fun_app$ (fun_app$a graph$ ?v0 )?v1 )(or (exists ((?v3 Node$ )(?v4 Node_set$ ))(and (= (lCons$ ?v1 ?v2 )(f$ (pair$ ?v3 ?v4 )))(and (finite$ ?v4 )(not (finite$ (reachable_via$ graph$ (uminus$ (insert$ ?v3 ?v4 ))?v3 ))))))(member$ (lCons$ ?v1 ?v2 )(paths$ graph$ )))))):named a5 ))
(assert (! (exists ((?v0 Node$ )(?v1 Node_set$ ))(and (= xs$ (f$ (pair$ ?v0 ?v1 )))(and (finite$ ?v1 )(not (finite$ (reachable_via$ graph$ (uminus$ (insert$ ?v0 ?v1 ))?v0 )))))):named a6 ))
(assert (! (=> (forall ((?v0 Node$ )(?v1 Node_set$ ))(=> (and (= xs$ (f$ (pair$ ?v0 ?v1 )))(and (finite$ ?v1 )(not (finite$ (reachable_via$ graph$ (uminus$ (insert$ ?v0 ?v1 ))?v0 )))))false ))false ):named a7 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_node_bool_fun_fun$ ))(= (member$ ?v0 (paths$ ?v1 ))(or (= ?v0 lNil$ )(or (exists ((?v2 Node$ ))(= ?v0 (lCons$ ?v2 lNil$ )))(exists ((?v2 Node$ )(?v3 Node$ )(?v4 Node_llist$ ))(and (= ?v0 (lCons$ ?v2 (lCons$ ?v3 ?v4 )))(and (fun_app$ (fun_app$a ?v1 ?v2 )?v3 )(member$ (lCons$ ?v3 ?v4 )(paths$ ?v1 ))))))))):named a8 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_llist$ )(?v2 Node_node_bool_fun_fun$ ))(=> (member$ (lCons$ ?v0 ?v1 )(paths$ ?v2 ))(member$ ?v1 (paths$ ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_node_bool_fun_fun$ ))(=> (and (member$ ?v0 (paths$ ?v1 ))(and (=> (= ?v0 lNil$ )false )(and (forall ((?v2 Node$ ))(=> (= ?v0 (lCons$ ?v2 lNil$ ))false ))(forall ((?v2 Node$ )(?v3 Node$ )(?v4 Node_llist$ ))(=> (and (= ?v0 (lCons$ ?v2 (lCons$ ?v3 ?v4 )))(and (fun_app$ (fun_app$a ?v1 ?v2 )?v3 )(member$ (lCons$ ?v3 ?v4 )(paths$ ?v1 ))))false )))))false )):named a10 ))
(assert (! (forall ((?v0 Node_llist_bool_fun$ )(?v1 Node_llist$ )(?v2 Node_node_bool_fun_fun$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v3 Node_llist$ ))(=> (fun_app$b ?v0 ?v3 )(or (= ?v3 lNil$ )(or (exists ((?v4 Node$ ))(= ?v3 (lCons$ ?v4 lNil$ )))(exists ((?v4 Node$ )(?v5 Node$ )(?v6 Node_llist$ ))(and (= ?v3 (lCons$ ?v4 (lCons$ ?v5 ?v6 )))(and (fun_app$ (fun_app$a ?v2 ?v4 )?v5 )(or (fun_app$b ?v0 (lCons$ ?v5 ?v6 ))(member$ (lCons$ ?v5 ?v6 )(paths$ ?v2 )))))))))))(member$ ?v1 (paths$ ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Node_node_bool_fun_fun$ )(?v1 Node$ )(?v2 Node$ )(?v3 Node_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(member$ (lCons$ ?v2 ?v3 )(paths$ ?v0 )))(member$ (lCons$ ?v1 (lCons$ ?v2 ?v3 ))(paths$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_node_bool_fun_fun$ ))(member$ (lCons$ ?v0 lNil$ )(paths$ ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Node_node_bool_fun_fun$ ))(member$ lNil$ (paths$ ?v0 ))):named a14 ))
(assert (! (not (finite$ (reachable_via$ graph$ (uminus$ (insert$ na$ nsa$ ))na$ ))):named a15 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node$ )(?v2 Node_set$ ))(=> (and (member$a ?v0 (lset$ (f$ (pair$ ?v1 ?v2 ))))(and (not (member$a ?v1 ?v2 ))(and (finite$ ?v2 )(not (finite$ (reachable_via$ graph$ (uminus$ (insert$ ?v1 ?v2 ))?v1 ))))))(not (member$a ?v0 ?v2 )))):named a16 ))
(assert (! (= xs$ (f$ (pair$ na$ nsa$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
