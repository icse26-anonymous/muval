;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-datatypes ()((A_list$ (nil$ )(cons$ (hd$ A$ )(tl$ A_list$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun n$ ()A$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xs$b ()A_llist$ )
(declare-fun last$ (A_list$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun sublist$ (A_list$ Nat_set$ )A_list$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun inf_llist$ (Nat_a_fun$ )A_llist$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A_list$ ))(=> (= xs$ (llist_of$ ?v0 ))thesis$ )):named a1 ))
(assert (! (not (= n$ x$ )):named a2 ))
(assert (! (lfinite$ xs$ ):named a3 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (member$ n$ (lset$ xs$ )):named a5 ))
(assert (! (not (member$ x$ (lset$ xs$ ))):named a6 ))
(assert (! (= xs$a (lappend$ xs$ (lCons$ x$ xs$b ))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (forall ((?v1 A_list$ ))(=> (= ?v0 (llist_of$ ?v1 ))false ))(forall ((?v1 Nat_a_fun$ ))(=> (= ?v0 (inf_llist$ ?v1 ))false )))false )):named a9 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_a_fun$ ))(not (= (llist_of$ ?v0 )(inf_llist$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_set$ ))(= (lsublist$ (llist_of$ ?v0 )?v1 )(llist_of$ (sublist$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_list$ ))(= (llast$ (llist_of$ ?v0 ))(last$ ?v0 ))):named a13 ))
(assert (! (member$ x$ (lset$ xs$a )):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun$ ))(= (= (inf_llist$ ?v0 )(inf_llist$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$ (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$ ?v0 ?v1 )?v2 )))):named a17 ))
(check-sat )
;(get-unsat-core )
