;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Node$ 0 )
(declare-sort Node_set$ 0 )
(declare-sort Node_bool_fun$ 0 )
(declare-sort Node_node_bool_fun_fun$ 0 )
(declare-sort Node_llist$ 0)
(declare-fun lNil$ ()Node_llist$)
(declare-fun lhd$ (Node_llist$)Node$)
(declare-fun ltl$ (Node_llist$)Node_llist$)
(declare-fun lCons$ (Node$ Node_llist$ )Node_llist$)
(declare-datatypes ()((Node_node_set_prod$ (pair$ (fst$ Node$ )(snd$ Node_set$ )))))
(declare-fun f$ (Node_node_set_prod$ )Node_llist$ )
(declare-fun x$ ()Node$ )
(declare-fun na$ ()Node$ )
(declare-fun nb$ ()Node$ )
(declare-fun ns$ ()Node_set$ )
(declare-fun xs$ ()Node_llist$ )
(declare-fun bot$ ()Node_set$ )
(declare-fun nsa$ ()Node_set$ )
(declare-fun nsb$ ()Node_set$ )
(declare-fun top$ ()Node_set$ )
(declare-fun lset$ (Node_llist$ )Node_set$ )
(declare-fun graph$ ()Node_node_bool_fun_fun$ )
(declare-fun finite$ (Node_set$ )Bool )
(declare-fun insert$ (Node$ Node_set$ )Node_set$ )
(declare-fun member$ (Node$ Node_set$ )Bool )
(declare-fun uminus$ (Node_set$ )Node_set$ )
(declare-fun collect$ (Node_bool_fun$ )Node_set$ )
(declare-fun fun_app$ (Node_bool_fun$ Node$ )Bool )
(declare-fun fun_app$a (Node_node_bool_fun_fun$ Node$ )Node_bool_fun$ )
(declare-fun connected$ (Node_node_bool_fun_fun$ )Bool )
(declare-fun reachable_via$ (Node_node_bool_fun_fun$ Node_set$ Node$ )Node_set$ )
(declare-fun reachable_viap$ (Node_node_bool_fun_fun$ Node_set$ )Node_node_bool_fun_fun$ )
(assert (! (not (not (member$ x$ nsb$ ))):named a0 ))
(assert (! (finite$ nsa$ ):named a1 ))
(assert (! (not (member$ nb$ nsb$ )):named a2 ))
(assert (! (finite$ nsb$ ):named a3 ))
(assert (! (not (member$ na$ nsa$ )):named a4 ))
(assert (! (= (lCons$ x$ xs$ )(f$ (pair$ nb$ nsb$ ))):named a5 ))
(assert (! (= ns$ bot$ ):named a6 ))
(assert (! (not (finite$ top$ )):named a7 ))
(assert (! (member$ x$ (lset$ (f$ (pair$ na$ nsa$ )))):named a8 ))
(assert (! (not (finite$ (reachable_via$ graph$ (uminus$ (insert$ nb$ nsb$ ))nb$ ))):named a9 ))
(assert (! (forall ((?v0 Node_node_bool_fun_fun$ )(?v1 Node_set$ )(?v2 Node$ )(?v3 Node$ ))(! (= (fun_app$ (fun_app$a (reachable_viap$ ?v0 ?v1 )?v2 )?v3 )(member$ ?v3 (reachable_via$ ?v0 ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (reachable_viap$ ?v0 ?v1 )?v2 )?v3 )))):named a10 ))
(assert (! (connected$ graph$ ):named a11 ))
(assert (! (forall ((?v0 Node$ ))(finite$ (collect$ (fun_app$a graph$ ?v0 )))):named a12 ))
(assert (! (not (finite$ (reachable_via$ graph$ (uminus$ (insert$ na$ nsa$ ))na$ ))):named a13 ))
(assert (! (forall ((?v0 Node_set$ ))(=> (finite$ ?v0 )(= (finite$ (uminus$ ?v0 ))(finite$ top$ )))):named a14 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_llist$ ))(! (= (lset$ (lCons$ ?v0 ?v1 ))(insert$ ?v0 (lset$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_llist$ ))(! (= (lset$ (lCons$ ?v0 ?v1 ))(insert$ ?v0 (lset$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a16 ))
(assert (! (= (uminus$ top$ )bot$ ):named a17 ))
(check-sat )
;(get-unsat-core )
