;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun n$ ()A$ )
(declare-fun x$ ()A$ )
(declare-fun ns$ ()A_set$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun graph$ ()A_a_bool_fun_fun$ )
(declare-fun lset$a (A_llist_llist$ )A_llist_set$ )
(declare-fun paths$ (A_a_bool_fun_fun$ )A_llist_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun paths$a (A_llist_a_llist_bool_fun_fun$ )A_llist_llist_set$ )
(declare-fun pathsp$ (A_llist_a_llist_bool_fun_fun$ )A_llist_llist_bool_fun$ )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun member$b (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun pathsp$a (A_a_bool_fun_fun$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$e (A_llist_a_llist_llist_bool_fun_fun$ A_llist$ )A_llist_llist_bool_fun$ )
(declare-fun fun_app$f (A_a_llist_bool_fun_fun$ A$ )A_llist_bool_fun$ )
(declare-fun reachable_via$ (A_a_bool_fun_fun$ A_set$ A$ )A_set$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= xs$ (lCons$ ?v0 ?v1 ))thesis$ )):named a1 ))
(assert (! (member$ x$ (lset$ xs$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (member$a (lCons$ n$ xs$ )(paths$ graph$ )):named a5 ))
(assert (! (less_eq$ (lset$ xs$ )ns$ ):named a6 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$b (pathsp$ ?v0 )(lCons$a ?v2 ?v3 )))(fun_app$b (pathsp$ ?v0 )(lCons$a ?v1 (lCons$a ?v2 ?v3 ))))):named a7 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_llist$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(fun_app$ (pathsp$a ?v0 )(lCons$ ?v2 ?v3 )))(fun_app$ (pathsp$a ?v0 )(lCons$ ?v1 (lCons$ ?v2 ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_llist_bool_fun_fun$ ))(=> (and (member$a ?v0 (lset$a ?v1 ))(and (forall ((?v3 A_llist$ )(?v4 A_llist_llist$ ))(fun_app$b (fun_app$e ?v2 ?v3 )(lCons$a ?v3 ?v4 )))(forall ((?v3 A_llist$ )(?v4 A_llist_llist$ )(?v5 A_llist$ ))(=> (and (member$a ?v5 (lset$a ?v4 ))(fun_app$b (fun_app$e ?v2 ?v5 )?v4 ))(fun_app$b (fun_app$e ?v2 ?v5 )(lCons$a ?v3 ?v4 ))))))(fun_app$b (fun_app$e ?v2 ?v0 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_a_llist_bool_fun_fun$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v3 A$ )(?v4 A_llist$ ))(fun_app$ (fun_app$f ?v2 ?v3 )(lCons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_llist$ )(?v5 A$ ))(=> (and (member$ ?v5 (lset$ ?v4 ))(fun_app$ (fun_app$f ?v2 ?v5 )?v4 ))(fun_app$ (fun_app$f ?v2 ?v5 )(lCons$ ?v3 ?v4 ))))))(fun_app$ (fun_app$f ?v2 ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(=> (and (member$a ?v0 (lset$a ?v1 ))(and (forall ((?v2 A_llist_llist$ ))(=> (= ?v1 (lCons$a ?v0 ?v2 ))false ))(forall ((?v2 A_llist$ )(?v3 A_llist_llist$ ))(=> (and (= ?v1 (lCons$a ?v2 ?v3 ))(member$a ?v0 (lset$a ?v3 )))false ))))false )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v2 A_llist$ ))(=> (= ?v1 (lCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v2 ?v3 ))(member$ ?v0 (lset$ ?v3 )))false ))))false )):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_bool_fun$ ))(=> (and (member$a ?v0 (lset$a ?v1 ))(and (forall ((?v3 A_llist_llist$ ))(fun_app$b ?v2 (lCons$a ?v0 ?v3 )))(forall ((?v3 A_llist$ )(?v4 A_llist_llist$ ))(=> (and (member$a ?v0 (lset$a ?v4 ))(fun_app$b ?v2 ?v4 ))(fun_app$b ?v2 (lCons$a ?v3 ?v4 ))))))(fun_app$b ?v2 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist_bool_fun$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v3 A_llist$ ))(fun_app$ ?v2 (lCons$ ?v0 ?v3 )))(forall ((?v3 A$ )(?v4 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v4 ))(fun_app$ ?v2 ?v4 ))(fun_app$ ?v2 (lCons$ ?v3 ?v4 ))))))(fun_app$ ?v2 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_bool_fun$ ))(=> (and (member$a ?v0 (lset$a ?v1 ))(and (forall ((?v3 A_llist_llist$ ))(fun_app$b ?v2 (lCons$a ?v0 ?v3 )))(forall ((?v3 A_llist$ )(?v4 A_llist_llist$ ))(=> (and (member$a ?v0 (lset$a ?v4 ))(and (not (= ?v0 ?v3 ))(fun_app$b ?v2 ?v4 )))(fun_app$b ?v2 (lCons$a ?v3 ?v4 ))))))(fun_app$b ?v2 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist_bool_fun$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v3 A_llist$ ))(fun_app$ ?v2 (lCons$ ?v0 ?v3 )))(forall ((?v3 A$ )(?v4 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v4 ))(and (not (= ?v0 ?v3 ))(fun_app$ ?v2 ?v4 )))(fun_app$ ?v2 (lCons$ ?v3 ?v4 ))))))(fun_app$ ?v2 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(=> (and (member$a ?v0 (lset$a ?v1 ))(and (forall ((?v2 A_llist_llist$ ))(=> (= ?v1 (lCons$a ?v0 ?v2 ))false ))(forall ((?v2 A_llist$ )(?v3 A_llist_llist$ ))(=> (and (= ?v1 (lCons$a ?v2 ?v3 ))(member$a ?v0 (lset$a ?v3 )))false ))))false )):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v2 A_llist$ ))(=> (= ?v1 (lCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v2 ?v3 ))(member$ ?v0 (lset$ ?v3 )))false ))))false )):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ ))(=> (member$a ?v0 (lset$a ?v1 ))(member$a ?v0 (lset$a (lCons$a ?v2 ?v1 ))))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ ))(=> (member$ ?v0 (lset$ ?v1 ))(member$ ?v0 (lset$ (lCons$ ?v2 ?v1 ))))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ ))(=> (member$a ?v0 (lset$a ?v1 ))(member$a ?v0 (lset$a (lCons$a ?v2 ?v1 ))))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ ))(=> (member$ ?v0 (lset$ ?v1 ))(member$ ?v0 (lset$ (lCons$ ?v2 ?v1 ))))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(member$a ?v0 (lset$a (lCons$a ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(member$ ?v0 (lset$ (lCons$ ?v0 ?v1 )))):named a24 ))
(assert (! (member$ x$ (reachable_via$ graph$ ns$ n$ )):named a25 ))
(assert (! (=> (forall ((?v0 A_llist$ ))(=> (and (member$a (lCons$ n$ ?v0 )(paths$ graph$ ))(and (member$ x$ (lset$ ?v0 ))(less_eq$ (lset$ ?v0 )ns$ )))false ))false ):named a26 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_llist$ ))(! (= (fun_app$b (pathsp$ ?v0 )?v1 )(member$b ?v1 (paths$a ?v0 ))):pattern ((fun_app$b (pathsp$ ?v0 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$ (pathsp$a ?v0 )?v1 )(member$a ?v1 (paths$ ?v0 ))):pattern ((fun_app$ (pathsp$a ?v0 )?v1 )))):named a28 ))
(check-sat )
;(get-unsat-core )
