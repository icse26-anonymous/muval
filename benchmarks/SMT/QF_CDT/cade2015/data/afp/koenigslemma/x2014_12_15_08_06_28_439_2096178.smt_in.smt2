;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Node$ 0 )
(declare-sort Node_set$ 0 )
(declare-sort Node_bool_fun$ 0 )
(declare-sort Node_node_set_fun$ 0 )
(declare-sort Node_node_bool_fun_fun$ 0 )
(declare-sort Node_set_node_bool_fun_fun$ 0 )
(declare-sort Node_set_node_node_set_fun_fun$ 0 )
(declare-sort Node_node_set_node_bool_fun_fun_fun$ 0 )
(declare-sort Node_node_set_fun_node_node_set_fun_fun$ 0 )
(declare-datatypes ()((Node_node_set_prod$ (pair$ (fst$ Node$ )(snd$ Node_set$ )))))
(declare-fun n$ ()Node$ )
(declare-fun na$ ()Node$ )
(declare-fun ns$ ()Node_set$ )
(declare-fun uu$ ()Node_node_set_node_bool_fun_fun_fun$ )
(declare-fun bot$ ()Node_set$ )
(declare-fun inf$ (Node_set$ Node_set$ )Node_set$ )
(declare-fun nsa$ ()Node_set$ )
(declare-fun top$ ()Node_set$ )
(declare-fun uua$ ()Node_node_set_fun$ )
(declare-fun uub$ (Node_node_bool_fun_fun$ )Node_set_node_node_set_fun_fun$ )
(declare-fun uuc$ (Node$ )Node_node_set_fun_node_node_set_fun_fun$ )
(declare-fun uud$ ()Node_node_set_fun$ )
(declare-fun graph$ ()Node_node_bool_fun_fun$ )
(declare-fun minus$ (Node_set$ Node_set$ )Node_set$ )
(declare-fun finite$ (Node_set$ )Bool )
(declare-fun insert$ (Node$ Node_set$ )Node_set$ )
(declare-fun member$ (Node$ Node_set$ )Bool )
(declare-fun uminus$ (Node_set$ )Node_set$ )
(declare-fun collect$ (Node_bool_fun$ )Node_set$ )
(declare-fun fun_app$ (Node_node_set_fun$ Node$ )Node_set$ )
(declare-fun less_eq$ (Node_set$ Node_set$ )Bool )
(declare-fun fun_app$a (Node_set_node_node_set_fun_fun$ Node_set$ )Node_node_set_fun$ )
(declare-fun fun_app$b (Node_bool_fun$ Node$ )Bool )
(declare-fun fun_app$c (Node_set_node_bool_fun_fun$ Node_set$ )Node_bool_fun$ )
(declare-fun fun_app$d (Node_node_set_node_bool_fun_fun_fun$ Node$ )Node_set_node_bool_fun_fun$ )
(declare-fun fun_app$e (Node_node_bool_fun_fun$ Node$ )Node_bool_fun$ )
(declare-fun fun_app$f (Node_node_set_fun_node_node_set_fun_fun$ Node_node_set_fun$ )Node_node_set_fun$ )
(declare-fun supremum$ (Node_set$ Node_node_set_fun$ )Node_set$ )
(declare-fun case_prod$ (Node_node_set_node_bool_fun_fun_fun$ Node_node_set_prod$ Node$ )Bool )
(declare-fun connected$ (Node_node_bool_fun_fun$ )Bool )
(declare-fun reachable_via$ (Node_node_bool_fun_fun$ )Node_set_node_node_set_fun_fun$ )
(assert (! (forall ((?v0 Node$ ))(! (= (fun_app$ uua$ ?v0 )(insert$ ?v0 (fun_app$ (fun_app$a (reachable_via$ graph$ )(minus$ (uminus$ (insert$ na$ nsa$ ))(insert$ ?v0 bot$ )))?v0 ))):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Node$ ))(! (= (fun_app$ uud$ ?v0 )(insert$ ?v0 bot$ )):pattern ((fun_app$ uud$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ )(?v2 Node$ ))(! (= (fun_app$b (fun_app$c (fun_app$d uu$ ?v0 )?v1 )?v2 )(and (fun_app$b (fun_app$e graph$ ?v0 )?v2 )(and (not (finite$ (fun_app$ (fun_app$a (reachable_via$ graph$ )(uminus$ (insert$ ?v0 (insert$ ?v2 ?v1 ))))?v2 )))(not (member$ ?v2 (insert$ ?v0 ?v1 )))))):pattern ((fun_app$b (fun_app$c (fun_app$d uu$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Node_node_bool_fun_fun$ )(?v1 Node_set$ )(?v2 Node$ ))(! (= (fun_app$ (fun_app$a (uub$ ?v0 )?v1 )?v2 )(insert$ ?v2 (fun_app$ (fun_app$a (reachable_via$ ?v0 )(minus$ ?v1 (insert$ ?v2 bot$ )))?v2 ))):pattern ((fun_app$ (fun_app$a (uub$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_node_set_fun$ )(?v2 Node$ ))(! (= (fun_app$ (fun_app$f (uuc$ ?v0 )?v1 )?v2 )(insert$ ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$f (uuc$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (not (fun_app$b (fun_app$e graph$ na$ )n$ )):named a5 ))
(assert (! (connected$ graph$ ):named a6 ))
(assert (! (= ns$ bot$ ):named a7 ))
(assert (! (member$ n$ (inf$ (collect$ (fun_app$e graph$ na$ ))(uminus$ (insert$ na$ nsa$ )))):named a8 ))
(assert (! (not (finite$ (fun_app$ (fun_app$a (reachable_via$ graph$ )(uminus$ (insert$ na$ nsa$ )))na$ ))):named a9 ))
(assert (! (forall ((?v0 Node$ ))(=> (and (fun_app$b (fun_app$e graph$ na$ )?v0 )(not (member$ ?v0 (insert$ na$ nsa$ ))))(finite$ (fun_app$ (fun_app$a (reachable_via$ graph$ )(uminus$ (insert$ na$ (insert$ ?v0 nsa$ ))))?v0 )))):named a10 ))
(assert (! (forall ((?v0 Node$ ))(finite$ (collect$ (fun_app$e graph$ ?v0 )))):named a11 ))
(assert (! (not (exists ((?v0 Node$ ))(case_prod$ uu$ (pair$ na$ nsa$ )?v0 ))):named a12 ))
(assert (! (less_eq$ (fun_app$ (fun_app$a (reachable_via$ graph$ )(uminus$ (insert$ na$ nsa$ )))na$ )(supremum$ (inf$ (collect$ (fun_app$e graph$ na$ ))(uminus$ (insert$ na$ nsa$ )))uua$ )):named a13 ))
(assert (! (not (finite$ top$ )):named a14 ))
(assert (! (forall ((?v0 Node_node_bool_fun_fun$ )(?v1 Node_set$ )(?v2 Node$ ))(less_eq$ (fun_app$ (fun_app$a (reachable_via$ ?v0 )?v1 )?v2 )(supremum$ (inf$ (collect$ (fun_app$e ?v0 ?v2 ))?v1 )(fun_app$a (uub$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 Node_set$ )(?v1 Node$ )(?v2 Node_node_set_fun$ ))(= (supremum$ ?v0 (fun_app$f (uuc$ ?v1 )?v2 ))(ite (= ?v0 bot$ )bot$ (insert$ ?v1 (supremum$ ?v0 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 Node_set$ ))(= (supremum$ ?v0 uud$ )?v0 )):named a17 ))
(assert (! (forall ((?v0 Node_node_set_fun$ ))(= (supremum$ bot$ ?v0 )bot$ )):named a18 ))
(assert (! (forall ((?v0 Node_set$ )(?v1 Node_set$ ))(= (minus$ ?v0 (uminus$ ?v1 ))(inf$ ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Node_set$ ))(= (inf$ (uminus$ ?v0 )?v0 )bot$ )):named a20 ))
(assert (! (forall ((?v0 Node_set$ ))(= (inf$ ?v0 (uminus$ ?v0 ))bot$ )):named a21 ))
(assert (! (forall ((?v0 Node_set$ )(?v1 Node_set$ ))(= (inf$ ?v0 (minus$ ?v1 ?v0 ))bot$ )):named a22 ))
(check-sat )
;(get-unsat-core )
