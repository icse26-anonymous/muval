;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Node$ 0 )
(declare-sort Node_set$ 0 )
(declare-sort Node_node_sum_set$ 0 )
(declare-sort Node_node_prod_set$ 0 )
(declare-sort Node_node_node_sum_sum_set$ 0 )
(declare-sort Node_node_sum_node_sum_set$ 0 )
(declare-sort Node_node_node_prod_sum_set$ 0 )
(declare-sort Node_node_node_sum_prod_set$ 0 )
(declare-sort Node_node_prod_node_sum_set$ 0 )
(declare-sort Node_node_sum_node_prod_set$ 0 )
(declare-sort Node_node_node_prod_prod_set$ 0 )
(declare-sort Node_node_prod_node_prod_set$ 0 )
(declare-sort Node_node_node_sum_node_sum_sum_set$ 0 )
(declare-sort Node_node_sum_node_node_sum_sum_set$ 0 )
(declare-sort Node_node_node_sum_node_sum_prod_set$ 0 )
(declare-sort Node_node_prod_node_node_sum_sum_set$ 0 )
(declare-sort Node_node_sum_node_node_prod_sum_set$ 0 )
(declare-sort Node_node_sum_node_node_sum_prod_set$ 0 )
(declare-sort Node_node_prod_node_node_prod_sum_set$ 0 )
(declare-sort Node_node_prod_node_node_sum_prod_set$ 0 )
(declare-sort Node_node_sum_node_node_prod_prod_set$ 0 )
(declare-sort Node_node_prod_node_node_prod_prod_set$ 0 )
(declare-datatypes ()((Node_node_prod$ (pair$ (fst$ Node$ )(snd$ Node$ )))(Node_node_sum$ (inl$ (projl$ Node$ ))(inr$ (projr$ Node$ )))(Node_node_sum_node_node_prod_sum$ (inl$a (projl$a Node_node_sum$ ))(inr$a (projr$a Node_node_prod$ )))(Node_node_sum_node_node_sum_sum$ (inl$b (projl$b Node_node_sum$ ))(inr$b (projr$b Node_node_sum$ )))(Node_node_sum_node_sum$ (inl$c (projl$c Node_node_sum$ ))(inr$c (projr$c Node$ )))(Node_node_node_prod_sum$ (inl$d (projl$d Node$ ))(inr$d (projr$d Node_node_prod$ )))(Node_node_node_sum_sum$ (inl$e (projl$e Node$ ))(inr$e (projr$e Node_node_sum$ )))))
(declare-fun na$ ()Node$ )
(declare-fun nsa$ ()Node_set$ )
(declare-fun top$ ()Node_set$ )
(declare-fun top$a ()Node_node_sum_node_node_prod_sum_set$ )
(declare-fun top$b ()Node_node_sum_node_node_sum_sum_set$ )
(declare-fun top$c ()Node_node_sum_node_sum_set$ )
(declare-fun top$d ()Node_node_node_prod_sum_set$ )
(declare-fun top$e ()Node_node_node_sum_sum_set$ )
(declare-fun top$f ()Node_node_sum_set$ )
(declare-fun top$g ()Node_node_prod_set$ )
(declare-fun top$h ()Node_node_prod_node_sum_set$ )
(declare-fun top$i ()Node_node_prod_node_node_sum_sum_set$ )
(declare-fun top$j ()Node_node_prod_node_node_prod_sum_set$ )
(declare-fun top$k ()Node_node_node_sum_node_sum_sum_set$ )
(declare-fun top$l ()Node_node_node_sum_prod_set$ )
(declare-fun top$m ()Node_node_node_prod_prod_set$ )
(declare-fun top$n ()Node_node_sum_node_prod_set$ )
(declare-fun top$o ()Node_node_prod_node_prod_set$ )
(declare-fun top$p ()Node_node_sum_node_node_sum_prod_set$ )
(declare-fun top$q ()Node_node_sum_node_node_prod_prod_set$ )
(declare-fun top$r ()Node_node_prod_node_node_sum_prod_set$ )
(declare-fun top$s ()Node_node_prod_node_node_prod_prod_set$ )
(declare-fun top$t ()Node_node_node_sum_node_sum_prod_set$ )
(declare-fun finite$ (Node_set$ )Bool )
(declare-fun insert$ (Node$ Node_set$ )Node_set$ )
(declare-fun member$ (Node_node_prod$ Node_node_prod_set$ )Bool )
(declare-fun finite$a (Node_node_sum_node_node_prod_sum_set$ )Bool )
(declare-fun finite$b (Node_node_sum_node_node_sum_sum_set$ )Bool )
(declare-fun finite$c (Node_node_sum_node_sum_set$ )Bool )
(declare-fun finite$d (Node_node_node_prod_sum_set$ )Bool )
(declare-fun finite$e (Node_node_node_sum_sum_set$ )Bool )
(declare-fun finite$f (Node_node_sum_set$ )Bool )
(declare-fun finite$g (Node_node_prod_set$ )Bool )
(declare-fun finite$h (Node_node_prod_node_sum_set$ )Bool )
(declare-fun finite$i (Node_node_prod_node_node_sum_sum_set$ )Bool )
(declare-fun finite$j (Node_node_prod_node_node_prod_sum_set$ )Bool )
(declare-fun finite$k (Node_node_node_sum_node_sum_sum_set$ )Bool )
(declare-fun finite$l (Node_node_node_sum_prod_set$ )Bool )
(declare-fun finite$m (Node_node_node_prod_prod_set$ )Bool )
(declare-fun finite$n (Node_node_sum_node_prod_set$ )Bool )
(declare-fun finite$o (Node_node_prod_node_prod_set$ )Bool )
(declare-fun finite$p (Node_node_sum_node_node_sum_prod_set$ )Bool )
(declare-fun finite$q (Node_node_sum_node_node_prod_prod_set$ )Bool )
(declare-fun finite$r (Node_node_prod_node_node_sum_prod_set$ )Bool )
(declare-fun finite$s (Node_node_prod_node_node_prod_prod_set$ )Bool )
(declare-fun finite$t (Node_node_node_sum_node_sum_prod_set$ )Bool )
(declare-fun insert$a (Node_node_sum_node_node_prod_sum$ Node_node_sum_node_node_prod_sum_set$ )Node_node_sum_node_node_prod_sum_set$ )
(declare-fun insert$b (Node_node_sum_node_node_sum_sum$ Node_node_sum_node_node_sum_sum_set$ )Node_node_sum_node_node_sum_sum_set$ )
(declare-fun insert$c (Node_node_sum_node_sum$ Node_node_sum_node_sum_set$ )Node_node_sum_node_sum_set$ )
(declare-fun insert$d (Node_node_node_prod_sum$ Node_node_node_prod_sum_set$ )Node_node_node_prod_sum_set$ )
(declare-fun insert$e (Node_node_node_sum_sum$ Node_node_node_sum_sum_set$ )Node_node_node_sum_sum_set$ )
(declare-fun insert$f (Node_node_sum$ Node_node_sum_set$ )Node_node_sum_set$ )
(declare-fun insert$g (Node_node_prod$ Node_node_prod_set$ )Node_node_prod_set$ )
(declare-fun member$a (Node_node_sum$ Node_node_sum_set$ )Bool )
(declare-fun member$b (Node$ Node_set$ )Bool )
(declare-fun member$c (Node_node_sum_node_node_prod_sum$ Node_node_sum_node_node_prod_sum_set$ )Bool )
(declare-fun member$d (Node_node_sum_node_node_sum_sum$ Node_node_sum_node_node_sum_sum_set$ )Bool )
(declare-fun member$e (Node_node_sum_node_sum$ Node_node_sum_node_sum_set$ )Bool )
(declare-fun member$f (Node_node_node_prod_sum$ Node_node_node_prod_sum_set$ )Bool )
(declare-fun member$g (Node_node_node_sum_sum$ Node_node_node_sum_sum_set$ )Bool )
(assert (! (not (finite$ (insert$ na$ nsa$ ))):named a0 ))
(assert (! (finite$ nsa$ ):named a1 ))
(assert (! (not (finite$ top$ )):named a2 ))
(assert (! (forall ((?v0 Node_node_sum_node_node_prod_sum$ )(?v1 Node_node_sum_node_node_prod_sum_set$ ))(= (finite$a (insert$a ?v0 ?v1 ))(finite$a ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Node_node_sum_node_node_sum_sum$ )(?v1 Node_node_sum_node_node_sum_sum_set$ ))(= (finite$b (insert$b ?v0 ?v1 ))(finite$b ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Node_node_sum_node_sum$ )(?v1 Node_node_sum_node_sum_set$ ))(= (finite$c (insert$c ?v0 ?v1 ))(finite$c ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Node_node_node_prod_sum$ )(?v1 Node_node_node_prod_sum_set$ ))(= (finite$d (insert$d ?v0 ?v1 ))(finite$d ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Node_node_node_sum_sum$ )(?v1 Node_node_node_sum_sum_set$ ))(= (finite$e (insert$e ?v0 ?v1 ))(finite$e ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Node_node_sum$ )(?v1 Node_node_sum_set$ ))(= (finite$f (insert$f ?v0 ?v1 ))(finite$f ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Node_node_prod$ )(?v1 Node_node_prod_set$ ))(= (finite$g (insert$g ?v0 ?v1 ))(finite$g ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(= (finite$ (insert$ ?v0 ?v1 ))(finite$ ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Node_node_prod$ )(?v1 Node_node_prod_set$ ))(= (insert$g ?v0 (insert$g ?v0 ?v1 ))(insert$g ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Node_node_sum$ )(?v1 Node_node_sum_set$ ))(= (insert$f ?v0 (insert$f ?v0 ?v1 ))(insert$f ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Node_node_prod$ )(?v1 Node_node_prod$ )(?v2 Node_node_prod_set$ ))(= (member$ ?v0 (insert$g ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Node_node_sum$ )(?v1 Node_node_sum$ )(?v2 Node_node_sum_set$ ))(= (member$a ?v0 (insert$f ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$a ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node$ )(?v2 Node_set$ ))(= (member$b ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$b ?v0 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Node_node_prod$ )(?v1 Node_node_prod_set$ )(?v2 Node_node_prod$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$g ?v2 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 Node_node_sum$ )(?v1 Node_node_sum_set$ )(?v2 Node_node_sum$ ))(=> (=> (not (member$a ?v0 ?v1 ))(= ?v0 ?v2 ))(member$a ?v0 (insert$f ?v2 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ )(?v2 Node$ ))(=> (=> (not (member$b ?v0 ?v1 ))(= ?v0 ?v2 ))(member$b ?v0 (insert$ ?v2 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Node_node_sum_node_node_prod_sum_set$ )(?v1 Node_node_sum_node_node_prod_sum$ ))(=> (finite$a ?v0 )(finite$a (insert$a ?v1 ?v0 )))):named a20 ))
(assert (! (forall ((?v0 Node_node_sum_node_node_sum_sum_set$ )(?v1 Node_node_sum_node_node_sum_sum$ ))(=> (finite$b ?v0 )(finite$b (insert$b ?v1 ?v0 )))):named a21 ))
(assert (! (forall ((?v0 Node_node_sum_node_sum_set$ )(?v1 Node_node_sum_node_sum$ ))(=> (finite$c ?v0 )(finite$c (insert$c ?v1 ?v0 )))):named a22 ))
(assert (! (forall ((?v0 Node_node_node_prod_sum_set$ )(?v1 Node_node_node_prod_sum$ ))(=> (finite$d ?v0 )(finite$d (insert$d ?v1 ?v0 )))):named a23 ))
(assert (! (forall ((?v0 Node_node_node_sum_sum_set$ )(?v1 Node_node_node_sum_sum$ ))(=> (finite$e ?v0 )(finite$e (insert$e ?v1 ?v0 )))):named a24 ))
(assert (! (forall ((?v0 Node_node_sum_set$ )(?v1 Node_node_sum$ ))(=> (finite$f ?v0 )(finite$f (insert$f ?v1 ?v0 )))):named a25 ))
(assert (! (forall ((?v0 Node_node_prod_set$ )(?v1 Node_node_prod$ ))(=> (finite$g ?v0 )(finite$g (insert$g ?v1 ?v0 )))):named a26 ))
(assert (! (forall ((?v0 Node_set$ )(?v1 Node$ ))(=> (finite$ ?v0 )(finite$ (insert$ ?v1 ?v0 )))):named a27 ))
(assert (! (forall ((?v0 Node_node_prod$ )(?v1 Node_node_prod$ )(?v2 Node_node_prod_set$ ))(= (insert$g ?v0 (insert$g ?v1 ?v2 ))(insert$g ?v1 (insert$g ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 Node_node_sum$ )(?v1 Node_node_sum$ )(?v2 Node_node_sum_set$ ))(= (insert$f ?v0 (insert$f ?v1 ?v2 ))(insert$f ?v1 (insert$f ?v0 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node$ )(?v2 Node_set$ ))(= (insert$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (insert$ ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Node_node_prod$ )(?v1 Node_node_prod$ )(?v2 Node_node_prod_set$ ))(=> (and (member$ ?v0 (insert$g ?v1 ?v2 ))(and (=> (= ?v0 ?v1 )false )(=> (member$ ?v0 ?v2 )false )))false )):named a31 ))
(assert (! (forall ((?v0 Node_node_sum$ )(?v1 Node_node_sum$ )(?v2 Node_node_sum_set$ ))(=> (and (member$a ?v0 (insert$f ?v1 ?v2 ))(and (=> (= ?v0 ?v1 )false )(=> (member$a ?v0 ?v2 )false )))false )):named a32 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node$ )(?v2 Node_set$ ))(=> (and (member$b ?v0 (insert$ ?v1 ?v2 ))(and (=> (= ?v0 ?v1 )false )(=> (member$b ?v0 ?v2 )false )))false )):named a33 ))
(assert (! (forall ((?v0 Node_node_prod$ )(?v1 Node_node_prod_set$ ))(=> (and (member$ ?v0 ?v1 )(forall ((?v2 Node_node_prod_set$ ))(=> (and (= ?v1 (insert$g ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))false )))false )):named a34 ))
(assert (! (forall ((?v0 Node_node_sum$ )(?v1 Node_node_sum_set$ ))(=> (and (member$a ?v0 ?v1 )(forall ((?v2 Node_node_sum_set$ ))(=> (and (= ?v1 (insert$f ?v0 ?v2 ))(not (member$a ?v0 ?v2 )))false )))false )):named a35 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(=> (and (member$b ?v0 ?v1 )(forall ((?v2 Node_set$ ))(=> (and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$b ?v0 ?v2 )))false )))false )):named a36 ))
(assert (! (forall ((?v0 Node_node_prod$ )(?v1 Node_node_prod_set$ ))(! (=> (member$ ?v0 ?v1 )(= (insert$g ?v0 ?v1 )?v1 )):pattern ((insert$g ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 Node_node_sum$ )(?v1 Node_node_sum_set$ ))(! (=> (member$a ?v0 ?v1 )(= (insert$f ?v0 ?v1 )?v1 )):pattern ((insert$f ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(! (=> (member$b ?v0 ?v1 )(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 Node_node_prod$ )(?v1 Node_node_prod_set$ )(?v2 Node_node_prod$ ))(=> (member$ ?v0 ?v1 )(member$ ?v0 (insert$g ?v2 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 Node_node_sum$ )(?v1 Node_node_sum_set$ )(?v2 Node_node_sum$ ))(=> (member$a ?v0 ?v1 )(member$a ?v0 (insert$f ?v2 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ )(?v2 Node$ ))(=> (member$b ?v0 ?v1 )(member$b ?v0 (insert$ ?v2 ?v1 )))):named a42 ))
(assert (! (forall ((?v0 Node_node_prod$ )(?v1 Node_node_prod_set$ ))(=> (member$ ?v0 ?v1 )(exists ((?v2 Node_node_prod_set$ ))(and (= ?v1 (insert$g ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))))):named a43 ))
(assert (! (forall ((?v0 Node_node_sum$ )(?v1 Node_node_sum_set$ ))(=> (member$a ?v0 ?v1 )(exists ((?v2 Node_node_sum_set$ ))(and (= ?v1 (insert$f ?v0 ?v2 ))(not (member$a ?v0 ?v2 )))))):named a44 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(=> (member$b ?v0 ?v1 )(exists ((?v2 Node_set$ ))(and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$b ?v0 ?v2 )))))):named a45 ))
(assert (! (forall ((?v0 Node_node_sum_node_node_prod_sum$ ))(member$c ?v0 top$a )):named a46 ))
(assert (! (forall ((?v0 Node_node_sum_node_node_sum_sum$ ))(member$d ?v0 top$b )):named a47 ))
(assert (! (forall ((?v0 Node_node_sum_node_sum$ ))(member$e ?v0 top$c )):named a48 ))
(assert (! (forall ((?v0 Node_node_node_prod_sum$ ))(member$f ?v0 top$d )):named a49 ))
(assert (! (forall ((?v0 Node_node_node_sum_sum$ ))(member$g ?v0 top$e )):named a50 ))
(assert (! (forall ((?v0 Node_node_sum$ ))(member$a ?v0 top$f )):named a51 ))
(assert (! (forall ((?v0 Node_node_prod$ ))(member$ ?v0 top$g )):named a52 ))
(assert (! (forall ((?v0 Node$ ))(member$b ?v0 top$ )):named a53 ))
(assert (! (= (finite$f top$f )(and (finite$ top$ )(finite$ top$ ))):named a54 ))
(assert (! (= (finite$e top$e )(and (finite$ top$ )(finite$f top$f ))):named a55 ))
(assert (! (= (finite$d top$d )(and (finite$ top$ )(finite$g top$g ))):named a56 ))
(assert (! (= (finite$c top$c )(and (finite$f top$f )(finite$ top$ ))):named a57 ))
(assert (! (= (finite$h top$h )(and (finite$g top$g )(finite$ top$ ))):named a58 ))
(assert (! (= (finite$b top$b )(and (finite$f top$f )(finite$f top$f ))):named a59 ))
(assert (! (= (finite$a top$a )(and (finite$f top$f )(finite$g top$g ))):named a60 ))
(assert (! (= (finite$i top$i )(and (finite$g top$g )(finite$f top$f ))):named a61 ))
(assert (! (= (finite$j top$j )(and (finite$g top$g )(finite$g top$g ))):named a62 ))
(assert (! (= (finite$k top$k )(and (finite$ top$ )(finite$c top$c ))):named a63 ))
(assert (! (= (finite$g top$g )(and (finite$ top$ )(finite$ top$ ))):named a64 ))
(assert (! (= (finite$l top$l )(and (finite$ top$ )(finite$f top$f ))):named a65 ))
(assert (! (= (finite$m top$m )(and (finite$ top$ )(finite$g top$g ))):named a66 ))
(assert (! (= (finite$n top$n )(and (finite$f top$f )(finite$ top$ ))):named a67 ))
(assert (! (= (finite$o top$o )(and (finite$g top$g )(finite$ top$ ))):named a68 ))
(assert (! (= (finite$p top$p )(and (finite$f top$f )(finite$f top$f ))):named a69 ))
(assert (! (= (finite$q top$q )(and (finite$f top$f )(finite$g top$g ))):named a70 ))
(assert (! (= (finite$r top$r )(and (finite$g top$g )(finite$f top$f ))):named a71 ))
(assert (! (= (finite$s top$s )(and (finite$g top$g )(finite$g top$g ))):named a72 ))
(assert (! (= (finite$t top$t )(and (finite$ top$ )(finite$c top$c ))):named a73 ))
(check-sat )
;(get-unsat-core )
