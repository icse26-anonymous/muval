;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-datatypes ()((Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))(A_tree$ (leaf$ )(node$ (left$ A_tree$ )(val$ A$ )(right$ A_tree$ )))))
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun y$ ()A$ )
(declare-fun l$a ()A_tree$ )
(declare-fun ll$ ()A_tree$ )
(declare-fun lr$ ()A_tree$ )
(declare-fun log$ (Real Real )Real )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun real$ (Nat$ )Real )
(declare-fun size$ (A_tree$ )Nat$ )
(declare-fun plus$a (Num$ Num$ )Num$ )
(declare-fun less_eq$ (Num$ Num$ )Bool )
(declare-fun numeral$ (Num$ )Nat$ )
(declare-fun less_eq$a (Nat$ Nat$ )Bool )
(declare-fun numeral$a (Num$ )Real )
(assert (! (not (<= (log$ 2.0 (+ 2.0 (+ (real$ (size$ l$ ))(real$ (size$ r$ )))))(log$ 2.0 (+ 2.0 (+ (real$ (size$ l$a ))(real$ (size$ r$ ))))))):named a0 ))
(assert (! (= l$a (node$ ll$ y$ lr$ )):named a1 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a2 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a3 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ )(?v2 Nat$ ))(= (plus$ (numeral$ ?v0 )(plus$ (numeral$ ?v1 )?v2 ))(plus$ (numeral$ (plus$a ?v0 ?v1 ))?v2 ))):named a4 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ )(?v2 Real ))(= (+ (numeral$a ?v0 )(+ (numeral$a ?v1 )?v2 ))(+ (numeral$a (plus$a ?v0 ?v1 ))?v2 ))):named a5 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (plus$ (numeral$ ?v0 )(numeral$ ?v1 ))(numeral$ (plus$a ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (+ (numeral$a ?v0 )(numeral$a ?v1 ))(numeral$a (plus$a ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (<= (numeral$a ?v0 )(numeral$a ?v1 ))(less_eq$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (less_eq$a (numeral$ ?v0 )(numeral$ ?v1 ))(less_eq$ ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Real ))(= (<= (+ ?v0 ?v1 )(+ ?v2 ?v1 ))(<= ?v0 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$a (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(less_eq$a ?v0 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Real ))(= (<= (+ ?v0 ?v1 )(+ ?v0 ?v2 ))(<= ?v1 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$a (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(less_eq$a ?v1 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Num$ ))(! (= (numeral$ (bit0$ ?v0 ))(plus$ (numeral$ ?v0 )(numeral$ ?v0 ))):pattern ((bit0$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Num$ ))(! (= (numeral$a (bit0$ ?v0 ))(+ (numeral$a ?v0 )(numeral$a ?v0 ))):pattern ((bit0$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (real$ ?v0 )(real$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$a ?v0 )(numeral$a ?v1 ))(= ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Real ))(= (= (+ ?v0 ?v1 )(+ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a23 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Real ))(= (= (+ ?v0 ?v1 )(+ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (<= (real$ ?v0 )(real$ ?v1 ))(less_eq$a ?v0 ?v1 ))):named a25 ))
(check-sat )
;(get-unsat-core )
