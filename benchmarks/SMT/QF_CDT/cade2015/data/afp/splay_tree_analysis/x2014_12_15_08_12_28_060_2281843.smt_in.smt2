;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ )(node$ (left$ A_tree$ )(val$ A$ )(right$ A_tree$ )))(Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))))
(declare-fun a$ ()A$ )
(declare-fun e$ ()A$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun s$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun log$ (Real Real )Real )
(declare-fun phi$ (A_tree$ )Real )
(declare-fun plus$ (Num$ Num$ )Num$ )
(declare-fun real$ (Nat$ )Real )
(declare-fun size$ (A_tree$ )Nat$ )
(declare-fun times$ (Real Real )Real )
(declare-fun less_eq$ (Num$ Num$ )Bool )
(declare-fun numeral$ (Num$ )Real )
(declare-fun t_splay$ (A$ A_tree$ )Nat$ )
(assert (! (not (<= (+ (phi$ l$ )(+ (phi$ r$ )(+ (real$ (t_splay$ a$ s$ ))(log$ 2.0 (+ 2.0 (+ (real$ (size$ l$ ))(real$ (size$ r$ ))))))))(+ (phi$ s$ )(+ 2.0 (* 4.0 (log$ 2.0 (+ 1.0 (real$ (size$ s$ ))))))))):named a0 ))
(assert (! (not (= s$ leaf$ )):named a1 ))
(assert (! (<= (+ (phi$ l$ )(+ (phi$ r$ )(+ (real$ (t_splay$ a$ s$ ))(log$ 2.0 (+ 2.0 (+ (real$ (size$ l$ ))(real$ (size$ r$ ))))))))(+ 1.0 (+ (phi$ s$ )(* 3.0 (log$ 2.0 (+ 1.0 (real$ (size$ s$ )))))))):named a2 ))
(assert (! (= e$ a$ ):named a3 ))
(assert (! (= e$ a$ ):named a4 ))
(assert (! (not (= s$ leaf$ )):named a5 ))
(assert (! (<= 0.0 (log$ 2.0 (+ 1.0 (real$ (size$ s$ ))))):named a6 ))
(assert (! (bst$ s$ ):named a7 ))
(assert (! (= (+ 1.0 1.0 )2.0 ):named a8 ))
(assert (! (forall ((?v0 Num$ ))(= (+ (numeral$ ?v0 )1.0 )(numeral$ (plus$ ?v0 one$ )))):named a9 ))
(assert (! (forall ((?v0 Num$ ))(= (+ 1.0 (numeral$ ?v0 ))(numeral$ (plus$ one$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Num$ ))(= (<= (numeral$ ?v0 )1.0 )(less_eq$ ?v0 one$ ))):named a11 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$ ?v0 )1.0 )(= ?v0 one$ ))):named a12 ))
(assert (! (forall ((?v0 Num$ ))(= (= 1.0 (numeral$ ?v0 ))(= one$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Num$ ))(= (times$ (+ ?v0 ?v1 )(numeral$ ?v2 ))(+ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 Num$ )(?v1 Real )(?v2 Real ))(= (times$ (numeral$ ?v0 )(+ ?v1 ?v2 ))(+ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit1$ ?v0 )one$ )false )):named a16 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit1$ ?v0 ))false )):named a17 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit1$ ?v1 ))false )):named a18 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit1$ ?v0 )(bit0$ ?v1 ))false )):named a19 ))
(check-sat )
;(get-unsat-core )
