;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-sort A_set_a_set_fun$ 0 )
(declare-sort A_tree_set_a_tree_set_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ )(node$ (left$ A_tree$ )(val$ A$ )(right$ A_tree$ )))))
(declare-fun c$ ()A$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun aa$ ()A$ )
(declare-fun la$ ()A_tree$ )
(declare-fun ra$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun sup$ (A_set$ )A_set_a_set_fun$ )
(declare-fun sup$a (A_tree_set$ )A_tree_set_a_tree_set_fun$ )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_set_a_set_fun$ A_set$ )A_set$ )
(declare-fun insert$a (A_tree$ A_tree_set$ )A_tree_set$ )
(declare-fun member$a (A_tree$ A_tree_set$ )Bool )
(declare-fun fun_app$a (A_tree_set_a_tree_set_fun$ A_tree_set$ )A_tree_set$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun subtrees$ (A_tree$ )A_tree_set$ )
(assert (! (not (member$ aa$ (insert$ c$ (fun_app$ (sup$ (set_tree$ l$ ))(set_tree$ r$ ))))):named a0 ))
(assert (! (member$a (node$ la$ aa$ ra$ )(subtrees$ (node$ l$ c$ r$ ))):named a1 ))
(assert (! (bst$ (node$ l$ c$ r$ )):named a2 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_set$ )(?v2 A_tree_set$ ))(= (fun_app$a (sup$a (insert$a ?v0 ?v1 ))?v2 )(insert$a ?v0 (fun_app$a (sup$a ?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (fun_app$ (sup$ (insert$ ?v0 ?v1 ))?v2 )(insert$ ?v0 (fun_app$ (sup$ ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_tree_set$ )(?v1 A_tree$ )(?v2 A_tree_set$ ))(= (fun_app$a (sup$a ?v0 )(insert$a ?v1 ?v2 ))(insert$a ?v1 (fun_app$a (sup$a ?v0 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ )(?v2 A_set$ ))(= (fun_app$ (sup$ ?v0 )(insert$ ?v1 ?v2 ))(insert$ ?v1 (fun_app$ (sup$ ?v0 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_set$ )(?v2 A_tree_set$ ))(= (member$a ?v0 (fun_app$a (sup$a ?v1 )?v2 ))(or (member$a ?v0 ?v1 )(member$a ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$ ?v0 (fun_app$ (sup$ ?v1 )?v2 ))(or (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_set$ )(?v2 A_tree_set$ ))(=> (=> (not (member$a ?v0 ?v1 ))(member$a ?v0 ?v2 ))(member$a ?v0 (fun_app$a (sup$a ?v2 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (=> (not (member$ ?v0 ?v1 ))(member$ ?v0 ?v2 ))(member$ ?v0 (fun_app$ (sup$ ?v2 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_tree_set$ )(?v1 A_tree_set$ ))(= (fun_app$a (sup$a (fun_app$a (sup$a ?v0 )?v1 ))?v1 )(fun_app$a (sup$a ?v0 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (sup$ (fun_app$ (sup$ ?v0 )?v1 ))?v1 )(fun_app$ (sup$ ?v0 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_tree_set$ )(?v1 A_tree_set$ ))(= (fun_app$a (sup$a ?v0 )(fun_app$a (sup$a ?v0 )?v1 ))(fun_app$a (sup$a ?v0 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (sup$ ?v0 )(fun_app$ (sup$ ?v0 )?v1 ))(fun_app$ (sup$ ?v0 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_tree_set$ )(?v1 A_tree_set$ ))(= (fun_app$a (sup$a ?v0 )(fun_app$a (sup$a ?v0 )?v1 ))(fun_app$a (sup$a ?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (sup$ ?v0 )(fun_app$ (sup$ ?v0 )?v1 ))(fun_app$ (sup$ ?v0 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_tree_set$ ))(! (= (fun_app$a (sup$a ?v0 )?v0 )?v0 ):pattern ((sup$a ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$ (sup$ ?v0 )?v0 )?v0 ):pattern ((sup$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_tree_set$ ))(! (= (fun_app$a (sup$a ?v0 )?v0 )?v0 ):pattern ((sup$a ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$ (sup$ ?v0 )?v0 )?v0 ):pattern ((sup$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_set$ ))(= (insert$a ?v0 (insert$a ?v0 ?v1 ))(insert$a ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_set$ )(?v2 A_tree$ ))(=> (=> (not (member$a ?v0 ?v1 ))(= ?v0 ?v2 ))(member$a ?v0 (insert$a ?v2 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree_set$ ))(= (member$a ?v0 (insert$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$a ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(member$ ?v0 (insert$ ?v0 ?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_set$ ))(member$a ?v0 (insert$a ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (not (member$ ?v0 ?v1 ))(not (member$ ?v0 ?v2 )))(= (= (insert$ ?v0 ?v1 )(insert$ ?v0 ?v2 ))(= ?v1 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_set$ )(?v2 A_tree_set$ ))(=> (and (not (member$a ?v0 ?v1 ))(not (member$a ?v0 ?v2 )))(= (= (insert$a ?v0 ?v1 )(insert$a ?v0 ?v2 ))(= ?v1 ?v2 )))):named a30 ))
(check-sat )
;(get-unsat-core )
