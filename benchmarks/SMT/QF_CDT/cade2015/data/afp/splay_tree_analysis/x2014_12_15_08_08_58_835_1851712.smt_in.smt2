;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ )(node$ (left$ A_tree$ )(val$ A$ )(right$ A_tree$ )))))
(declare-fun b$ ()A$ )
(declare-fun c$ ()A$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun aa$ ()A$ )
(declare-fun la$ ()A_tree$ )
(declare-fun ll$ ()A_tree$ )
(declare-fun lr$ ()A_tree$ )
(declare-fun ra$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun less$ (A$ A$ )Bool )
(declare-fun member$ (A_tree$ A_tree_set$ )Bool )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun subtrees$ (A_tree$ )A_tree_set$ )
(assert (! (not (less$ b$ c$ )):named a0 ))
(assert (! (=> (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (= l$ (node$ ?v0 ?v1 ?v2 ))false ))false ):named a1 ))
(assert (! (not (= aa$ c$ )):named a2 ))
(assert (! (bst$ (node$ l$ c$ r$ )):named a3 ))
(assert (! (less$ aa$ c$ ):named a4 ))
(assert (! (or (less$ aa$ c$ )(less$ c$ aa$ )):named a5 ))
(assert (! (member$ (node$ la$ aa$ ra$ )(subtrees$ (node$ l$ c$ r$ ))):named a6 ))
(assert (! (= l$ (node$ ll$ b$ lr$ )):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (less$ ?v0 ?v1 )(less$ ?v1 ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (less$ ?v0 ?v1 ))(or (less$ ?v1 ?v0 )(= ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (less$ ?v0 ?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (less$ ?v1 ?v0 )false )))false )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 A$ ))(=> (and (= ?v0 (fun_app$ ?v1 ?v2 ))(and (less$ ?v2 ?v3 )(forall ((?v4 A$ )(?v5 A$ ))(=> (less$ ?v4 ?v5 )(less$ (fun_app$ ?v1 ?v4 )(fun_app$ ?v1 ?v5 ))))))(less$ ?v0 (fun_app$ ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(less$ ?v1 ?v2 ))(less$ ?v0 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (less$ ?v0 ?v1 )(=> (not false )(less$ ?v1 ?v0 )))false )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_a_fun$ )(?v3 A$ ))(=> (and (less$ ?v0 ?v1 )(and (= (fun_app$ ?v2 ?v1 )?v3 )(forall ((?v4 A$ )(?v5 A$ ))(=> (less$ ?v4 ?v5 )(less$ (fun_app$ ?v2 ?v4 )(fun_app$ ?v2 ?v5 ))))))(less$ (fun_app$ ?v2 ?v0 )?v3 ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (less$ ?v0 ?v1 )(= ?v1 ?v2 ))(less$ ?v0 ?v2 ))):named a15 ))
(check-sat )
;(get-unsat-core )
