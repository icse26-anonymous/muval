;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-sort A_tree_tree_set$ 0 )
(declare-sort A_tree_tree_tree_set$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ )(node$ (left$ A_tree$ )(val$ A$ )(right$ A_tree$ )))(A_tree_tree$ (leaf$a )(node$a (left$a A_tree_tree$ )(val$a A_tree$ )(right$a A_tree_tree$ )))(A_tree_tree_tree$ (leaf$b )(node$b (left$b A_tree_tree_tree$ )(val$b A_tree_tree$ )(right$b A_tree_tree_tree$ )))))
(declare-fun b$ ()A$ )
(declare-fun c$ ()A$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun aa$ ()A$ )
(declare-fun ll$ ()A_tree$ )
(declare-fun lr$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun less$ (A$ A$ )Bool )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun member$a (A_tree_tree$ A_tree_tree_set$ )Bool )
(declare-fun member$b (A_tree$ A_tree_set$ )Bool )
(declare-fun member$c (A_tree_tree_tree$ A_tree_tree_tree_set$ )Bool )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun subtrees$ (A_tree_tree_tree$ )A_tree_tree_tree_set$ )
(declare-fun set_tree$a (A_tree_tree_tree$ )A_tree_tree_set$ )
(declare-fun set_tree$b (A_tree_tree$ )A_tree_set$ )
(declare-fun splay_max$ (A_tree$ )A_tree$ )
(declare-fun subtrees$a (A_tree_tree$ )A_tree_tree_set$ )
(declare-fun subtrees$b (A_tree$ )A_tree_set$ )
(assert (! (not (not (member$ b$ (set_tree$ r$ )))):named a0 ))
(assert (! (=> (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (= l$ (node$ ?v0 ?v1 ?v2 ))false ))false ):named a1 ))
(assert (! (less$ b$ c$ ):named a2 ))
(assert (! (bst$ (node$ l$ c$ r$ )):named a3 ))
(assert (! (= l$ (node$ ll$ b$ lr$ )):named a4 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree_tree$ ))(=> (and (member$a ?v0 (set_tree$a ?v1 ))(and (forall ((?v2 A_tree_tree_tree$ )(?v3 A_tree_tree$ )(?v4 A_tree_tree_tree$ ))(=> (and (= ?v1 (node$b ?v2 ?v3 ?v4 ))(member$a ?v0 (set_tree$a ?v2 )))false ))(and (forall ((?v2 A_tree_tree_tree$ )(?v3 A_tree_tree_tree$ ))(=> (= ?v1 (node$b ?v2 ?v0 ?v3 ))false ))(forall ((?v2 A_tree_tree_tree$ )(?v3 A_tree_tree$ )(?v4 A_tree_tree_tree$ ))(=> (and (= ?v1 (node$b ?v2 ?v3 ?v4 ))(member$a ?v0 (set_tree$a ?v4 )))false )))))false )):named a5 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree$ ))(=> (and (member$b ?v0 (set_tree$b ?v1 ))(and (forall ((?v2 A_tree_tree$ )(?v3 A_tree$ )(?v4 A_tree_tree$ ))(=> (and (= ?v1 (node$a ?v2 ?v3 ?v4 ))(member$b ?v0 (set_tree$b ?v2 )))false ))(and (forall ((?v2 A_tree_tree$ )(?v3 A_tree_tree$ ))(=> (= ?v1 (node$a ?v2 ?v0 ?v3 ))false ))(forall ((?v2 A_tree_tree$ )(?v3 A_tree$ )(?v4 A_tree_tree$ ))(=> (and (= ?v1 (node$a ?v2 ?v3 ?v4 ))(member$b ?v0 (set_tree$b ?v4 )))false )))))false )):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (and (member$ ?v0 (set_tree$ ?v1 ))(and (forall ((?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ ))(=> (and (= ?v1 (node$ ?v2 ?v3 ?v4 ))(member$ ?v0 (set_tree$ ?v2 )))false ))(and (forall ((?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v1 (node$ ?v2 ?v0 ?v3 ))false ))(forall ((?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ ))(=> (and (= ?v1 (node$ ?v2 ?v3 ?v4 ))(member$ ?v0 (set_tree$ ?v4 )))false )))))false )):named a7 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree$ )(?v3 A_tree_tree_tree$ ))(=> (member$a ?v0 (set_tree$a ?v1 ))(member$a ?v0 (set_tree$a (node$b ?v1 ?v2 ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree$ )(?v3 A_tree_tree$ ))(=> (member$b ?v0 (set_tree$b ?v1 ))(member$b ?v0 (set_tree$b (node$a ?v1 ?v2 ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(=> (member$ ?v0 (set_tree$ ?v1 ))(member$ ?v0 (set_tree$ (node$ ?v1 ?v2 ?v3 ))))):named a10 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ )(?v3 A_tree_tree$ ))(=> (member$a ?v0 (set_tree$a ?v1 ))(member$a ?v0 (set_tree$a (node$b ?v2 ?v3 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ )(?v3 A_tree$ ))(=> (member$b ?v0 (set_tree$b ?v1 ))(member$b ?v0 (set_tree$b (node$a ?v2 ?v3 ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ ))(=> (member$ ?v0 (set_tree$ ?v1 ))(member$ ?v0 (set_tree$ (node$ ?v2 ?v3 ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ ))(member$a ?v0 (set_tree$a (node$b ?v1 ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ ))(member$b ?v0 (set_tree$b (node$a ?v1 ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(member$ ?v0 (set_tree$ (node$ ?v1 ?v0 ?v2 )))):named a16 ))
(assert (! (member$ aa$ (insert$ c$ (sup$ (set_tree$ l$ )(set_tree$ r$ )))):named a17 ))
(assert (! (not (= aa$ c$ )):named a18 ))
(assert (! (forall ((?v0 A_tree$ ))(= (set_tree$ (splay_max$ ?v0 ))(set_tree$ ?v0 ))):named a19 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree_tree$ )(?v3 A_tree_tree_tree$ ))(=> (member$c (node$b ?v0 ?v1 ?v2 )(subtrees$ ?v3 ))(member$a ?v1 (set_tree$a ?v3 )))):named a20 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree$ )(?v2 A_tree_tree$ )(?v3 A_tree_tree$ ))(=> (member$a (node$a ?v0 ?v1 ?v2 )(subtrees$a ?v3 ))(member$b ?v1 (set_tree$b ?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (member$b (node$ ?v0 ?v1 ?v2 )(subtrees$b ?v3 ))(member$ ?v1 (set_tree$ ?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree_tree$ ))(=> (member$a ?v0 (set_tree$a ?v1 ))(exists ((?v2 A_tree_tree_tree$ )(?v3 A_tree_tree_tree$ ))(member$c (node$b ?v2 ?v0 ?v3 )(subtrees$ ?v1 ))))):named a23 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree$ ))(=> (member$b ?v0 (set_tree$b ?v1 ))(exists ((?v2 A_tree_tree$ )(?v3 A_tree_tree$ ))(member$a (node$a ?v2 ?v0 ?v3 )(subtrees$a ?v1 ))))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (set_tree$ ?v1 ))(exists ((?v2 A_tree$ )(?v3 A_tree$ ))(member$b (node$ ?v2 ?v0 ?v3 )(subtrees$b ?v1 ))))):named a25 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ )(?v3 A_tree_tree_tree$ ))(=> (not (member$a ?v0 (set_tree$a ?v1 )))(not (member$c (node$b ?v2 ?v0 ?v3 )(subtrees$ ?v1 ))))):named a26 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ )(?v3 A_tree_tree$ ))(=> (not (member$b ?v0 (set_tree$b ?v1 )))(not (member$a (node$a ?v2 ?v0 ?v3 )(subtrees$a ?v1 ))))):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (not (member$ ?v0 (set_tree$ ?v1 )))(not (member$b (node$ ?v2 ?v0 ?v3 )(subtrees$b ?v1 ))))):named a28 ))
(assert (! (less$ aa$ c$ ):named a29 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree$ )(?v2 A_tree_tree$ )(?v3 A_tree_tree$ )(?v4 A_tree$ )(?v5 A_tree_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a30 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a31 ))
(check-sat )
;(get-unsat-core )
