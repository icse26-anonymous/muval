;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ )(node$ (left$ A_tree$ )(val$ A$ )(right$ A_tree$ )))(Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))))
(declare-fun a$ ()A$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun s$ ()A_tree$ )
(declare-fun x$ ()A$ )
(declare-fun ls$ ()A_tree$ )
(declare-fun rs$ ()A_tree$ )
(declare-fun log$ (Real Real )Real )
(declare-fun phi$ (A_tree$ )Real )
(declare-fun plus$ (Num$ Num$ )Num$ )
(declare-fun real$ (Nat$ )Real )
(declare-fun size$ (A_tree$ )Nat$ )
(declare-fun splay$ (A$ A_tree$ )A_tree$ )
(declare-fun times$ (Real Real )Real )
(declare-fun less_eq$ (Num$ Num$ )Bool )
(declare-fun numeral$ (Num$ )Real )
(declare-fun t_splay$ (A$ A_tree$ )Nat$ )
(assert (! (not (<= (+ (phi$ r$ )(real$ (t_splay$ a$ (node$ ls$ x$ rs$ ))))(+ (phi$ ls$ )(+ (phi$ rs$ )(+ 2.0 (* 7.0 (log$ 2.0 (+ 2.0 (+ (real$ (size$ ls$ ))(real$ (size$ rs$ ))))))))))):named a0 ))
(assert (! (= l$ leaf$ ):named a1 ))
(assert (! (<= (+ (phi$ r$ )(+ (real$ (t_splay$ a$ (node$ ls$ x$ rs$ )))(log$ 2.0 (+ 2.0 (real$ (size$ r$ ))))))(+ 1.0 (+ (phi$ ls$ )(+ (phi$ rs$ )(* 4.0 (log$ 2.0 (+ 2.0 (+ (real$ (size$ ls$ ))(real$ (size$ rs$ )))))))))):named a2 ))
(assert (! (= l$ leaf$ ):named a3 ))
(assert (! (<= 0.0 (log$ 2.0 (+ 2.0 (real$ (size$ r$ ))))):named a4 ))
(assert (! (<= 0.0 (log$ 2.0 (+ 2.0 (+ (real$ (size$ ls$ ))(real$ (size$ rs$ )))))):named a5 ))
(assert (! (= (+ 1.0 1.0 )2.0 ):named a6 ))
(assert (! (=> (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (= (splay$ a$ (node$ ls$ x$ rs$ ))(node$ ?v0 ?v1 ?v2 ))false ))false ):named a7 ))
(assert (! (forall ((?v0 Num$ ))(= (+ (numeral$ ?v0 )1.0 )(numeral$ (plus$ ?v0 one$ )))):named a8 ))
(assert (! (forall ((?v0 Num$ ))(= (+ 1.0 (numeral$ ?v0 ))(numeral$ (plus$ one$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Num$ ))(= (<= (numeral$ ?v0 )1.0 )(less_eq$ ?v0 one$ ))):named a10 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$ ?v0 )1.0 )(= ?v0 one$ ))):named a11 ))
(assert (! (forall ((?v0 Num$ ))(= (= 1.0 (numeral$ ?v0 ))(= one$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Num$ ))(= (times$ (+ ?v0 ?v1 )(numeral$ ?v2 ))(+ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 Num$ )(?v1 Real )(?v2 Real ))(= (times$ (numeral$ ?v0 )(+ ?v1 ?v2 ))(+ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a14 ))
(assert (! (= s$ (node$ ls$ x$ rs$ )):named a15 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit1$ ?v0 )one$ )false )):named a16 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit1$ ?v0 ))false )):named a17 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(check-sat )
;(get-unsat-core )
