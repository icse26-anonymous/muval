;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ )(node$ (left$ A_tree$ )(val$ A$ )(right$ A_tree$ )))))
(declare-fun a$ (A$ A_tree$ )Real )
(declare-fun c$ ()A$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun aa$ ()A$ )
(declare-fun la$ ()A_tree$ )
(declare-fun ra$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun less$ (A$ )A_bool_fun$ )
(declare-fun splay$ (A$ A_tree$ )A_tree$ )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A_tree$ A_tree_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun subtrees$ (A_tree$ )A_tree_set$ )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (= r$ (node$ ?v0 ?v1 ?v2 ))thesis$ )):named a1 ))
(assert (! (bst$ (node$ l$ c$ r$ )):named a2 ))
(assert (! (member$ (node$ la$ aa$ ra$ )(subtrees$ (node$ l$ c$ r$ ))):named a3 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a4 ))
(assert (! (or (fun_app$ (less$ aa$ )c$ )(fun_app$ (less$ c$ )aa$ )):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(! (= (pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))(and (pred_tree$ ?v0 ?v1 )(and (fun_app$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 )))):pattern ((pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (a$ ?v0 (node$ ?v1 ?v0 ?v2 ))1.0 ):pattern ((node$ ?v1 ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(! (= (val$ (node$ ?v0 ?v1 ?v2 ))?v1 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(! (= (left$ (node$ ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(! (= (right$ (node$ ?v0 ?v1 ?v2 ))?v2 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (splay$ ?v0 (node$ ?v1 ?v0 ?v2 ))(node$ ?v1 ?v0 ?v2 )):pattern ((node$ ?v1 ?v0 ?v2 )))):named a11 ))
(assert (! (member$a aa$ (insert$ c$ (sup$ (set_tree$ l$ )(set_tree$ r$ )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(! (= (map_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))(node$ (map_tree$ ?v0 ?v1 )(fun_app$a ?v0 ?v2 )(map_tree$ ?v0 ?v3 ))):pattern ((map_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a13 ))
(assert (! (fun_app$ (less$ c$ )aa$ ):named a14 ))
(assert (! (not (= aa$ c$ )):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree$ ))(! (=> (fun_app$ (less$ ?v0 )?v1 )(= (splay$ ?v1 (node$ ?v2 ?v0 (node$ ?v3 ?v1 ?v4 )))(node$ (node$ ?v2 ?v0 ?v3 )?v1 ?v4 ))):pattern ((node$ ?v2 ?v0 (node$ ?v3 ?v1 ?v4 ))))):named a16 ))
(check-sat )
;(get-unsat-core )
