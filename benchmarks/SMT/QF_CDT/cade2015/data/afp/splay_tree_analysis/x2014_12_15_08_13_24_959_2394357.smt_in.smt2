;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_tree_a_tree_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ )(node$ (left$ A_tree$ )(val$ A$ )(right$ A_tree$ )))))
(declare-fun l$ ()A_tree$ )
(declare-fun y$ ()A$ )
(declare-fun ll$ ()A_tree$ )
(declare-fun lr$ ()A_tree$ )
(declare-fun uu$ (A_tree$ A$ )A_tree_a_tree_fun$ )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (A_tree_a_tree_fun$ A_tree$ )A_tree$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(declare-fun splay_max$ (A_tree$ )A_tree$ )
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(! (= (fun_app$ (uu$ ?v0 ?v1 )?v2 )(node$ ?v0 ?v1 ?v2 )):pattern ((fun_app$ (uu$ ?v0 ?v1 )?v2 )))):named a0 ))
(assert (! (not thesis$ ):named a1 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (= (splay_max$ (node$ ll$ y$ lr$ ))(node$ ?v0 ?v1 ?v2 ))thesis$ )):named a2 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (=> (= ?v0 leaf$ )false )(forall ((?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false )))false )):named a3 ))
(assert (! (= l$ (node$ ll$ y$ lr$ )):named a4 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a5 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(! (= (splay_max$ (node$ ?v0 ?v1 leaf$ ))(node$ ?v0 ?v1 leaf$ )):pattern ((uu$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(=> (= (splay_max$ ?v0 )(node$ ?v1 ?v2 ?v3 ))(= ?v3 leaf$ ))):named a7 ))
(assert (! (forall ((?v0 A_tree$ ))(= (= (splay_max$ ?v0 )leaf$ )(= ?v0 leaf$ ))):named a8 ))
(assert (! (= (splay_max$ leaf$ )leaf$ ):named a9 ))
(assert (! (forall ((?v0 A_tree$ ))(= (not (= ?v0 leaf$ ))(exists ((?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(= ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a10 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (=> (= ?v0 leaf$ )false )(and (forall ((?v1 A_tree$ )(?v2 A$ ))(=> (= ?v0 (node$ ?v1 ?v2 leaf$ ))false ))(forall ((?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A$ )(?v5 A_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 (node$ ?v3 ?v4 ?v5 )))false ))))false )):named a11 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (=> (= ?v0 leaf$ )false )(forall ((?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false )))false )):named a12 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (=> (= ?v0 leaf$ )false )(forall ((?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false )))false )):named a13 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (forall ((?v1 A_tree$ )(?v2 A$ ))(=> (= ?v0 (node$ ?v1 ?v2 leaf$ ))false ))(and (forall ((?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A$ )(?v5 A_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 (node$ ?v3 ?v4 ?v5 )))false ))(=> (= ?v0 leaf$ )false )))false )):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))(not (= ?v0 leaf$ )))):named a15 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(not (= leaf$ (node$ ?v0 ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (=> (= ?v0 leaf$ )false )(=> (not (= ?v0 leaf$ ))false ))false )):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(! (= (pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))(and (pred_tree$ ?v0 ?v1 )(and (fun_app$a ?v0 ?v2 )(pred_tree$ ?v0 ?v3 )))):pattern ((pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a18 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_tree$ ?v0 leaf$ )):named a19 ))
(check-sat )
;(get-unsat-core )
