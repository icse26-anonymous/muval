;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-datatypes ()((Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))(A_tree$ (leaf$ )(node$ (left$ A_tree$ )(val$ A$ )(right$ A_tree$ )))))
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun y$ ()A$ )
(declare-fun l$a ()A_tree$ )
(declare-fun ll$ ()A_tree$ )
(declare-fun lr$ ()A_tree$ )
(declare-fun ls$ ()A_tree$ )
(declare-fun rs$ ()A_tree$ )
(declare-fun log$ (Real Real )Real )
(declare-fun plus$ (Num$ Num$ )Num$ )
(declare-fun real$ (Nat$ )Real )
(declare-fun size$ (A_tree$ )Nat$ )
(declare-fun less_eq$ (Num$ Num$ )Bool )
(declare-fun numeral$ (Num$ )Real )
(declare-fun splay_max$ (A_tree$ )A_tree$ )
(assert (! (not (<= (log$ 2.0 (+ 2.0 (+ (real$ (size$ ll$ ))(real$ (size$ lr$ )))))(log$ 2.0 (+ 2.0 (+ (real$ (size$ ls$ ))(real$ (size$ rs$ ))))))):named a0 ))
(assert (! (= l$ (node$ ll$ y$ lr$ )):named a1 ))
(assert (! (<= 0.0 (log$ 2.0 (+ 2.0 (+ (real$ (size$ ls$ ))(real$ (size$ rs$ )))))):named a2 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a3 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a4 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ )(?v2 Real ))(= (+ (numeral$ ?v0 )(+ (numeral$ ?v1 )?v2 ))(+ (numeral$ (plus$ ?v0 ?v1 ))?v2 ))):named a5 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (+ (numeral$ ?v0 )(numeral$ ?v1 ))(numeral$ (plus$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (<= (numeral$ ?v0 )(numeral$ ?v1 ))(less_eq$ ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Real ))(= (<= (+ ?v0 ?v1 )(+ ?v2 ?v1 ))(<= ?v0 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Real ))(= (<= (+ ?v0 ?v1 )(+ ?v0 ?v2 ))(<= ?v1 ?v2 ))):named a9 ))
(assert (! (=> (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (= (splay_max$ (node$ ll$ y$ lr$ ))(node$ ?v0 ?v1 ?v2 ))false ))false ):named a10 ))
(assert (! (<= (log$ 2.0 (+ 2.0 (+ (real$ (size$ l$a ))(real$ (size$ r$ )))))(log$ 2.0 (+ 2.0 (+ (real$ (size$ l$ ))(real$ (size$ r$ )))))):named a11 ))
(assert (! (forall ((?v0 Num$ ))(! (= (numeral$ (bit0$ ?v0 ))(+ (numeral$ ?v0 )(numeral$ ?v0 ))):pattern ((bit0$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (real$ ?v0 )(real$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Real ))(= (= (+ ?v0 ?v1 )(+ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Real ))(= (= (+ ?v0 ?v1 )(+ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a15 ))
(check-sat )
;(get-unsat-core )
