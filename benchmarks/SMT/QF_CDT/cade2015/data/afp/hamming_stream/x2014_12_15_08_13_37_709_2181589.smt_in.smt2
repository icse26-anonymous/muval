;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Unit$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Nat_llist_nat_llist_fun$ 0 )
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()Nat_llist$)
(declare-fun lhd$ (Nat_llist$)Nat$)
(declare-fun ltl$ (Nat_llist$)Nat_llist$)
(declare-fun lCons$ (Nat$ Nat_llist$ )Nat_llist$)
(declare-fun n$ ()Nat$ )
(declare-fun lset$ (Nat_llist$ )Nat_set$ )
(declare-fun lnull$ (Nat_llist$ )Bool )
(declare-fun lsetp$ (Nat_llist$ Nat$ )Bool )
(declare-fun unity$ ()Unit$ )
(declare-fun lmerge$ (Nat_llist$ )Nat_llist_nat_llist_fun$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun smooth$ ()Nat_bool_fun$ )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun hamming$ ()Nat_llist$ )
(declare-fun less_eq$ (Nat_set$ Nat_set$ )Bool )
(declare-fun lfinite$ (Nat_llist$ )Bool )
(declare-fun lmember$ (Nat$ Nat_llist$ )Bool )
(declare-fun lmerge$a (Nat_nat_bool_fun_fun$ Nat_llist$ Nat_llist$ )Nat_llist$ )
(declare-fun lsorted$ (Nat_llist$ )Bool )
(declare-fun fun_app$a (Nat_llist_nat_llist_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun hamming$a (Unit$ )Nat_llist$ )
(declare-fun ldistinct$ (Nat_llist$ )Bool )
(assert (! (not (member$ n$ (lset$ hamming$ ))):named a0 ))
(assert (! (fun_app$ smooth$ n$ ):named a1 ))
(assert (! (= (= hamming$ lNil$ )false ):named a2 ))
(assert (! (ldistinct$ hamming$ ):named a3 ))
(assert (! (lsorted$ hamming$ ):named a4 ))
(assert (! (not (lnull$ hamming$ )):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$ ?v0 ?v1 ))):named a6 ))
(assert (! (not (lfinite$ hamming$ )):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$a (lmerge$ ?v1 )?v2 )))(or (member$ ?v0 (lset$ ?v1 ))(member$ ?v0 (lset$ ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_bool_fun_fun$ )(?v2 Nat_llist$ )(?v3 Nat_llist$ ))(=> (member$ ?v0 (lset$ (lmerge$a ?v1 ?v2 ?v3 )))(or (member$ ?v0 (lset$ ?v2 ))(member$ ?v0 (lset$ ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(lsetp$ ?v1 ?v0 ))):named a10 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat$ ))(=> (lsetp$ ?v0 ?v1 )(member$ ?v1 (lset$ ?v0 )))):named a11 ))
(assert (! (= hamming$ (hamming$a unity$ )):named a12 ))
(assert (! (less_eq$ (lset$ hamming$ )(collect$ smooth$ )):named a13 ))
(assert (! (= (lfinite$ lNil$ )true ):named a14 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (not (lnull$ (fun_app$a (lmerge$ ?v0 )?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (lnull$ (fun_app$a (lmerge$ ?v0 )?v1 ))(or (lnull$ ?v0 )(lnull$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$a (lmerge$ ?v0 )lNil$ )lNil$ ):pattern ((lmerge$ ?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
