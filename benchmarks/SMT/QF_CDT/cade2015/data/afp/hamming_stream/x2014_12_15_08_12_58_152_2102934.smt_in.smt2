;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Unit$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()Nat_llist$)
(declare-fun lhd$ (Nat_llist$)Nat$)
(declare-fun ltl$ (Nat_llist$)Nat_llist$)
(declare-fun lCons$ (Nat$ Nat_llist$ )Nat_llist$)
(declare-datatypes ()((Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))))
(declare-fun lmap$ (Nat_nat_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun times$ (Nat$ )Nat_nat_fun$ )
(declare-fun unity$ ()Unit$ )
(declare-fun lmerge$ (Nat_llist$ Nat_llist$ )Nat_llist$ )
(declare-fun times$a (Num$ Num$ )Num$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun hamming$ (Unit$ )Nat_llist$ )
(declare-fun numeral$ (Num$ )Nat$ )
(assert (! (not (= (ltl$ (hamming$ unity$ ))(lmerge$ (lmap$ (times$ (numeral$ (bit0$ one$ )))(hamming$ unity$ ))(lmerge$ (lmap$ (times$ (numeral$ (bit1$ one$ )))(hamming$ unity$ ))(lmap$ (times$ (numeral$ (bit1$ (bit0$ one$ ))))(hamming$ unity$ )))))):named a0 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$ ?v1 )))):named a1 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit1$ ?v0 )one$ )false )):named a2 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit1$ ?v0 ))false )):named a3 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit1$ ?v1 ))false )):named a4 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit1$ ?v0 )(bit0$ ?v1 ))false )):named a5 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a6 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a7 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ )(?v2 Nat$ ))(= (fun_app$ (times$ (numeral$ ?v0 ))(fun_app$ (times$ (numeral$ ?v1 ))?v2 ))(fun_app$ (times$ (numeral$ (times$a ?v0 ?v1 )))?v2 ))):named a8 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (fun_app$ (times$ (numeral$ ?v0 ))(numeral$ ?v1 ))(numeral$ (times$a ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Num$ ))(=> (and (=> (= ?v0 one$ )false )(and (forall ((?v1 Num$ ))(=> (= ?v0 (bit0$ ?v1 ))false ))(forall ((?v1 Num$ ))(=> (= ?v0 (bit1$ ?v1 ))false ))))false )):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ (numeral$ one$ ))?v0 )?v0 )):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ ?v0 )(numeral$ one$ ))?v0 )):named a12 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit1$ ?v0 )(bit1$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(check-sat )
;(get-unsat-core )
