;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Unit$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_bool_fun_nat_bool_fun_fun$ 0 )
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()Nat_llist$)
(declare-fun lhd$ (Nat_llist$)Nat$)
(declare-fun ltl$ (Nat_llist$)Nat_llist$)
(declare-fun lCons$ (Nat$ Nat_llist$ )Nat_llist$)
(declare-fun uu$ (Nat_bool_fun$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun uua$ (Nat_set$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun uub$ (Nat_set$ )Nat_bool_fun$ )
(declare-fun lset$ (Nat_llist$ )Nat_set$ )
(declare-fun unity$ ()Unit$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun smooth$ ()Nat_bool_fun$ )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun hamming$ (Unit$ )Nat_llist$ )
(declare-fun less_eq$ (Nat_set$ Nat_set$ )Bool )
(declare-fun fun_app$a (Nat_bool_fun_nat_bool_fun_fun$ Nat_bool_fun$ )Nat_bool_fun$ )
(declare-fun hamming$a ()Nat_llist$ )
(declare-fun less_eq$a (Bool Bool )Bool )
(declare-fun less_eq$b (Nat_bool_fun$ Nat_bool_fun$ )Bool )
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(and (member$ ?v2 ?v0 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$a (uu$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uu$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (not (less_eq$ (lset$ (hamming$ unity$ ))(collect$ smooth$ ))):named a3 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(=> (forall ((?v2 Nat$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Bool ))(less_eq$a ?v0 ?v0 )):named a6 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(less_eq$b ?v0 ?v0 )):named a7 ))
(assert (! (forall ((?v0 Nat_set$ ))(less_eq$ ?v0 ?v0 )):named a8 ))
(assert (! (= hamming$a (hamming$ unity$ )):named a9 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_bool_fun$ )(?v2 Nat_bool_fun$ ))(= (less_eq$ ?v0 (collect$ (fun_app$a (uu$ ?v1 )?v2 )))(and (less_eq$ ?v0 (collect$ ?v1 ))(less_eq$ ?v0 (collect$ ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_set$ )(?v3 Nat_bool_fun$ ))(=> (and (member$ ?v0 ?v1 )(less_eq$ ?v1 (collect$ (fun_app$a (uua$ ?v2 )?v3 ))))(fun_app$ ?v3 ?v0 ))):named a11 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ )(?v2 Nat_bool_fun$ )(?v3 Nat_bool_fun$ ))(=> (and (less_eq$ ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (and (member$ ?v4 ?v0 )(fun_app$ ?v2 ?v4 ))(fun_app$ ?v3 ?v4 ))))(less_eq$ (collect$ (fun_app$a (uua$ ?v0 )?v2 ))(collect$ (fun_app$a (uua$ ?v1 )?v3 ))))):named a12 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ )(?v2 Nat_bool_fun$ ))(=> (less_eq$ ?v0 ?v1 )(= (less_eq$ ?v0 (collect$ (fun_app$a (uua$ ?v1 )?v2 )))(forall ((?v3 Nat$ ))(=> (member$ ?v3 ?v0 )(fun_app$ ?v2 ?v3 )))))):named a13 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_bool_fun$ ))(less_eq$ (collect$ (fun_app$a (uua$ ?v0 )?v1 ))?v0 )):named a14 ))
(assert (! (forall ((?v0 Bool ))(= (= ?v0 (= unity$ unity$ ))?v0 )):named a15 ))
(assert (! (forall ((?v0 Unit$ ))(=> (=> (= ?v0 unity$ )false )false )):named a16 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(= (less_eq$ ?v0 ?v1 )(less_eq$b (uub$ ?v0 )(uub$ ?v1 )))):named a17 ))
(assert (! (forall ((?v0 Bool ))(less_eq$a ?v0 ?v0 )):named a18 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(less_eq$b ?v0 ?v0 )):named a19 ))
(assert (! (forall ((?v0 Nat_set$ ))(less_eq$ ?v0 ?v0 )):named a20 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(or (less_eq$a ?v0 ?v1 )(less_eq$a ?v1 ?v0 ))):named a21 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(=> (less_eq$b ?v0 ?v1 )(less_eq$a (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(! (=> (less_eq$a ?v0 ?v1 )(= (less_eq$a ?v1 ?v0 )(= ?v1 ?v0 ))):pattern ((less_eq$a ?v1 ?v0 )))):named a23 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(! (=> (less_eq$b ?v0 ?v1 )(= (less_eq$b ?v1 ?v0 )(= ?v1 ?v0 ))):pattern ((less_eq$b ?v1 ?v0 )))):named a24 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(! (=> (less_eq$ ?v0 ?v1 )(= (less_eq$ ?v1 ?v0 )(= ?v1 ?v0 ))):pattern ((less_eq$ ?v1 ?v0 )))):named a25 ))
(check-sat )
;(get-unsat-core )
