;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun x$ ()A$ )
(declare-fun uu$ (A$ )A_bool_fun$ )
(declare-fun inf$ (Enat$ )Enat_enat_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun lmerge$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )A_llist$ )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (less_eq$ (fun_app$b (inf$ (llength$ (lCons$ x$ xsa$ )))(llength$ ysa$ ))(llength$ (lmerge$ less$ (lCons$ x$ xsa$ )ysa$ )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lmerge$ less$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(ite (fun_app$ (fun_app$a less$ ?v0 )?v2 )(lCons$ ?v0 (lmerge$ less$ ?v1 (lCons$ ?v2 ?v3 )))(ite (fun_app$ (fun_app$a less$ ?v2 )?v0 )(lCons$ ?v2 (lmerge$ less$ (lCons$ ?v0 ?v1 )?v3 ))(lCons$ ?v2 (lmerge$ less$ ?v1 ?v3 ))))):pattern ((lmerge$ less$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(less_eq$ (fun_app$b (inf$ (llength$ xsa$ ))(llength$ ?v0 ))(llength$ (lmerge$ less$ xsa$ ?v0 )))):named a5 ))
(assert (! (lfinite$ xsa$ ):named a6 ))
(assert (! (forall ((?v0 A$ ))(= (lessThan$ less$ ?v0 )(collect$ (uu$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ ))(! (= (greaterThan$ less$ ?v0 )(collect$ (fun_app$a less$ ?v0 ))):pattern ((greaterThan$ less$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (lmerge$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))(ite (fun_app$ (fun_app$a ?v0 ?v1 )?v3 )(lCons$ ?v1 (lmerge$ ?v0 ?v2 (lCons$ ?v3 ?v4 )))(ite (fun_app$ (fun_app$a ?v0 ?v3 )?v1 )(lCons$ ?v3 (lmerge$ ?v0 (lCons$ ?v1 ?v2 )?v4 ))(lCons$ ?v3 (lmerge$ ?v0 ?v2 ?v4 ))))):pattern ((lmerge$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less_eq$ ?v0 (fun_app$b (inf$ ?v1 )?v2 ))(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less_eq$ ?v0 (fun_app$b (inf$ ?v1 )?v2 ))(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$b (inf$ (fun_app$b (inf$ ?v0 )?v1 ))?v1 )(fun_app$b (inf$ ?v0 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$b (inf$ (fun_app$b (inf$ ?v0 )?v1 ))?v1 )(fun_app$b (inf$ ?v0 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$b (inf$ ?v0 )(fun_app$b (inf$ ?v0 )?v1 ))(fun_app$b (inf$ ?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$b (inf$ ?v0 )(fun_app$b (inf$ ?v0 )?v1 ))(fun_app$b (inf$ ?v0 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (inf$ ?v0 )?v0 )?v0 ):pattern ((inf$ ?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
