;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Unit$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()Nat_llist$)
(declare-fun lhd$ (Nat_llist$)Nat$)
(declare-fun ltl$ (Nat_llist$)Nat_llist$)
(declare-fun lCons$ (Nat$ Nat_llist$ )Nat_llist$)
(declare-datatypes ()((Nat_option$ (none$ )(some$ (the$ Nat$ )))(Enat$ (abs_enat$ (rep_enat$ Nat_option$ )))))
(declare-fun one$ ()Nat$ )
(declare-fun ldrop$ (Enat$ Nat_llist$ )Nat_llist$ )
(declare-fun lnull$ (Nat_llist$ )Bool )
(declare-fun unity$ ()Unit$ )
(declare-fun ldropn$ (Nat$ Nat_llist$ )Nat_llist$ )
(declare-fun lmerge$ (Nat_llist$ Nat_llist$ )Nat_llist$ )
(declare-fun hamming$ ()Nat_llist$ )
(declare-fun lfilter$ (Nat_bool_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun lfinite$ (Nat_llist$ )Bool )
(declare-fun lprefix$ (Nat_llist$ Nat_llist$ )Bool )
(declare-fun lsorted$ (Nat_llist$ )Bool )
(declare-fun hamming$a (Unit$ )Nat_llist$ )
(assert (! (not (lsorted$ hamming$ )):named a0 ))
(assert (! (= (= hamming$ lNil$ )false ):named a1 ))
(assert (! (not (lnull$ hamming$ )):named a2 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (and (lsorted$ ?v0 )(lsorted$ ?v1 ))(lsorted$ (lmerge$ ?v0 ?v1 )))):named a3 ))
(assert (! (not (lfinite$ hamming$ )):named a4 ))
(assert (! (= hamming$ (hamming$a unity$ )):named a5 ))
(assert (! (= (lsorted$ lNil$ )true ):named a6 ))
(assert (! (= (lhd$ hamming$ )one$ ):named a7 ))
(assert (! (lsorted$ lNil$ ):named a8 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Enat$ ))(=> (lsorted$ ?v0 )(lsorted$ (ldrop$ ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat$ ))(=> (lsorted$ ?v0 )(lsorted$ (ldropn$ ?v1 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lsorted$ ?v1 ))(lsorted$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_bool_fun$ ))(=> (lsorted$ ?v0 )(lsorted$ (lfilter$ ?v1 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat_llist$ ))(lprefix$ ?v0 ?v0 )):named a13 ))
(assert (! (forall ((?v0 Nat_llist$ ))(lprefix$ ?v0 ?v0 )):named a14 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a16 ))
(assert (! (= (lfinite$ lNil$ )true ):named a17 ))
(check-sat )
;(get-unsat-core )
