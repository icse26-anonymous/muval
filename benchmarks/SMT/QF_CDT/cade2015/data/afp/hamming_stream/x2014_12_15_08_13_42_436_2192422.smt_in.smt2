;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-datatypes ()((Nibble$ (nibble0$ )(nibble1$ )(nibble2$ )(nibble3$ )(nibble4$ )(nibble5$ )(nibble6$ )(nibble7$ )(nibble8$ )(nibble9$ )(nibbleA$ )(nibbleB$ )(nibbleC$ )(nibbleD$ )(nibbleE$ )(nibbleF$ ))(Char$ (char$ (select$ Nibble$ )(selecta$ Nibble$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun na$ ()Nat$ )
(declare-fun one$ ()Nat$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun size$ (Char$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun of_nat$ (Nat$ )Nat$ )
(declare-fun smooth$ (Nat$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun size_bool$ (Bool )Nat$ )
(declare-fun size_char$ (Char$ )Nat$ )
(assert (! (not (not (= na$ zero$ ))):named a0 ))
(assert (! (smooth$ na$ ):named a1 ))
(assert (! (not (smooth$ zero$ )):named a2 ))
(assert (! (not (fun_app$ (less$ one$ )na$ )):named a3 ))
(assert (! (= zero$ zero$ ):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a6 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a7 ))
(assert (! (= (size_bool$ true )zero$ ):named a8 ))
(assert (! (= (size_bool$ false )zero$ ):named a9 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size$ ?v0 )zero$ ):pattern ((size$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(= (= (of_nat$ ?v0 )zero$ )(= ?v0 zero$ ))):named a11 ))
(assert (! (smooth$ n$ ):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$ ?v0 )(of_nat$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (less$ ?v0 )zero$ )false ):pattern ((less$ ?v0 )))):named a14 ))
(check-sat )
;(get-unsat-core )
