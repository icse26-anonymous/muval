;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Num_num_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-datatypes ()((Num$ (one$ )(bit0$ (select$ Num$ ))(bit1$ (selecta$ Num$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun times$ (Nat$ )Nat_nat_fun$ )
(declare-fun smooth$ (Nat$ )Bool )
(declare-fun times$a (Num$ )Num_num_fun$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun less_eq$ ()Nat_nat_bool_fun_fun$ )
(declare-fun numeral$ (Num$ )Nat$ )
(declare-fun fun_app$a (Num_num_fun$ Num$ )Num$ )
(declare-fun fun_app$b (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$c (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun less_eq$a (Num$ Num$ )Bool )
(declare-fun monotone$ (Nat_nat_bool_fun_fun$ Nat_nat_bool_fun_fun$ Nat_nat_fun$ )Bool )
(assert (! (not (monotone$ less_eq$ less_eq$ (times$ (numeral$ (bit0$ one$ ))))):named a0 ))
(assert (! (smooth$ n$ ):named a1 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a2 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a3 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ )(?v2 Nat$ ))(= (fun_app$ (times$ (numeral$ ?v0 ))(fun_app$ (times$ (numeral$ ?v1 ))?v2 ))(fun_app$ (times$ (numeral$ (fun_app$a (times$a ?v0 )?v1 )))?v2 ))):named a4 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (fun_app$ (times$ (numeral$ ?v0 ))(numeral$ ?v1 ))(numeral$ (fun_app$a (times$a ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (fun_app$b (fun_app$c less_eq$ (numeral$ ?v0 ))(numeral$ ?v1 ))(less_eq$a ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ (numeral$ one$ ))?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ ?v0 )(numeral$ one$ ))?v0 )):named a8 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$b (fun_app$c less_eq$ ?v0 )?v0 )):named a12 ))
(assert (! (forall ((?v0 Num$ ))(less_eq$a ?v0 ?v0 )):named a13 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(! (= (fun_app$a (times$a (bit0$ ?v0 ))(bit0$ ?v1 ))(bit0$ (bit0$ (fun_app$a (times$a ?v0 )?v1 )))):pattern ((fun_app$a (times$a (bit0$ ?v0 ))(bit0$ ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 Num$ ))(! (= (fun_app$a (times$a one$ )?v0 )?v0 ):pattern ((fun_app$a (times$a one$ )?v0 )))):named a15 ))
(assert (! (forall ((?v0 Num$ ))(! (= (fun_app$a (times$a ?v0 )one$ )?v0 ):pattern ((times$a ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(! (= (less_eq$a (bit0$ ?v0 )(bit0$ ?v1 ))(less_eq$a ?v0 ?v1 )):pattern ((less_eq$a (bit0$ ?v0 )(bit0$ ?v1 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
