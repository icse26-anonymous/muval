;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_a_option_fun$ 0 )
(declare-sort Nat_bool_fun_nat_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((A_option$ (none$ )(some$ (the$ A$ )))))
(declare-fun a$ ()A_set$ )
(declare-fun r$ ()A_llist$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun ran$ (Nat_a_option_fun$ )A_set$ )
(declare-fun top$ ()A_set$ )
(declare-fun uua$ ()Nat_bool_fun$ )
(declare-fun uub$ (Nat_set$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun ll2f$ (A_llist$ )Nat_a_option_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun least$ (Nat_bool_fun$ )Nat$ )
(declare-fun bleast$ (Nat_set$ Nat_bool_fun$ )Nat$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun finlsts$ (A_set$ )A_llist_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun llength$ (A_llist$ )Nat$ )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$a (Nat_a_option_fun$ Nat$ )A_option$ )
(declare-fun fun_app$b (Nat_bool_fun_nat_bool_fun_fun$ Nat_bool_fun$ )Nat_bool_fun$ )
(declare-fun abort_Bleast$ (Nat_set$ Nat_bool_fun$ )Nat$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(= (fun_app$a (ll2f$ r$ )?v0 )none$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uub$ ?v0 )?v1 )?v2 )(and (member$ ?v2 ?v0 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uub$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )true ):pattern ((fun_app$ uua$ ?v0 )))):named a2 ))
(assert (! (not (= (llength$ r$ )(least$ uu$ ))):named a3 ))
(assert (! (member$a r$ (finlsts$ a$ )):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (member$a ?v0 (finlsts$ ?v1 ))(= (fun_app$a (ll2f$ ?v0 )(llength$ ?v0 ))none$ ))):named a5 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 (least$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(=> (and (exists ((?v2 Nat$ ))(fun_app$ ?v0 ?v2 ))(forall ((?v2 Nat$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))))(fun_app$ ?v1 (least$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(=> (exists ((?v1 Nat$ ))(fun_app$ ?v0 ?v1 ))(fun_app$ ?v0 (least$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 Nat$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 (least$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_option$ ))(=> (and (=> (= ?v0 none$ )false )(=> (not (= ?v0 none$ ))false ))false )):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (ll2f$ lNil$ )?v0 )none$ ):pattern ((fun_app$a (ll2f$ lNil$ )?v0 )))):named a11 ))
(assert (! (= (least$ uua$ )zero$ ):named a12 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_bool_fun$ ))(= (bleast$ ?v0 ?v1 )(least$ (fun_app$b (uub$ ?v0 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_bool_fun$ ))(= (abort_Bleast$ ?v0 ?v1 )(least$ (fun_app$b (uub$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lset$ ?v0 )(ran$ (ll2f$ ?v0 ))):pattern ((lset$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (= (fun_app$a (ll2f$ ?v0 )?v1 )none$ )(member$a ?v0 (finlsts$ top$ )))):named a16 ))
(assert (! (= (llength$ lNil$ )zero$ ):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (and (member$a ?v0 (finlsts$ ?v1 ))(not (member$a ?v0 (finlsts$ top$ ))))false )):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (member$a ?v0 (finlsts$ ?v1 ))(member$a ?v0 (finlsts$ top$ )))):named a19 ))
(check-sat )
;(get-unsat-core )
