;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_llist_set$ )
(declare-fun top$ ()A_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun less_eq$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun lbutlast$ (A_llist$ )A_llist$ )
(declare-fun possafety$ (A_set$ A_llist_set$ )Bool )
(declare-fun prefix_closed$ (A_llist_set$ )Bool )
(declare-fun suffix_closed$ (A_llist_set$ )Bool )
(declare-fun pprefix_closed$ (A_llist_set$ )Bool )
(assert (! (not (forall ((?v0 A_llist$ ))(=> (member$ ?v0 p$ )(forall ((?v1 A_llist$ ))(=> (and (fun_app$ (less_eq$ ?v1 )?v0 )(not (= ?v1 lNil$ )))(member$ ?v1 p$ )))))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (less_eq$ ?v0 )?v0 )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (less_eq$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((less_eq$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (less_eq$ lNil$ )?v0 )):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (less_eq$ ?v0 )?v1 )(fun_app$ (less_eq$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (less_eq$ ?v0 )?v1 )(fun_app$ (less_eq$ ?v2 )?v1 ))(or (fun_app$ (less_eq$ ?v0 )?v2 )(fun_app$ (less_eq$ ?v2 )?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (less_eq$ ?v0 )?v1 )(fun_app$ (less_eq$ ?v1 )?v2 ))(fun_app$ (less_eq$ ?v0 )?v2 ))):named a6 ))
(assert (! (possafety$ top$ p$ ):named a7 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (pprefix_closed$ ?v0 )(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(forall ((?v2 A_llist$ ))(=> (and (fun_app$ (less_eq$ ?v2 )?v1 )(not (= ?v2 lNil$ )))(member$ ?v2 ?v0 ))))))):named a8 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (suffix_closed$ ?v0 )(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(forall ((?v2 A_llist$ ))(=> (fun_app$ (less_eq$ ?v1 )?v2 )(member$ ?v2 ?v0 ))))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (less_eq$ ?v0 )?v0 )):named a10 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (prefix_closed$ ?v0 )(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(forall ((?v2 A_llist$ ))(=> (fun_app$ (less_eq$ ?v2 )?v1 )(member$ ?v2 ?v0 ))))))):named a11 ))
(assert (! (= (lbutlast$ lNil$ )lNil$ ):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= ?v0 ?v1 )(and (fun_app$ (less_eq$ ?v0 )?v1 )(fun_app$ (less_eq$ ?v1 )?v0 )))):named a13 ))
(check-sat )
;(get-unsat-core )
