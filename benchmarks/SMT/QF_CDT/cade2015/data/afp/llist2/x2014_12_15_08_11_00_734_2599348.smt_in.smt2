;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Bool_nat_fun$ 0 )
(declare-sort Nat_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nibble$ (nibble0$ )(nibble1$ )(nibble2$ )(nibble3$ )(nibble4$ )(nibble5$ )(nibble6$ )(nibble7$ )(nibble8$ )(nibble9$ )(nibbleA$ )(nibbleB$ )(nibbleC$ )(nibbleD$ )(nibbleE$ )(nibbleF$ ))(Char$ (char$ (select$ Nibble$ )(selecta$ Nibble$ )))))
(declare-fun ta$ ()A_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ldrop$ (A_llist$ )Nat_a_llist_fun$ )
(declare-fun ltake$ (A_llist$ )Nat_a_llist_fun$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$ )A_llist$ )
(declare-fun inflsts$ (A_set$ )A_llist_set$ )
(declare-fun llength$ (A_llist$ )Nat$ )
(declare-fun fun_app$a (Bool_nat_fun$ Bool )Nat$ )
(declare-fun rec_bool$ (Nat$ Nat$ )Bool_nat_fun$ )
(declare-fun size_bool$ ()Bool_nat_fun$ )
(declare-fun size_char$ (Char$ )Nat$ )
(assert (! (not (= (llength$ (fun_app$ (ltake$ ta$ )zero$ ))zero$ )):named a0 ))
(assert (! (not (= (fun_app$ (ldrop$ ta$ )zero$ )lNil$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (member$ ?v0 (inflsts$ ?v1 ))(= (llength$ (fun_app$ (ltake$ ?v0 )?v2 ))?v2 ))):named a2 ))
(assert (! (= zero$ zero$ ):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a5 ))
(assert (! (= (llength$ lNil$ )zero$ ):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (ltake$ ?v0 )zero$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a8 ))
(assert (! (= (fun_app$a size_bool$ true )zero$ ):named a9 ))
(assert (! (= (fun_app$a size_bool$ false )zero$ ):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ltake$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$ (ltake$ lNil$ )?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldrop$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$ (ldrop$ lNil$ )?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (member$ ?v0 (inflsts$ ?v1 ))(member$ (fun_app$ (ldrop$ ?v0 )?v2 )(inflsts$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (not (= (fun_app$ (ldrop$ ?v0 )?v1 )lNil$ ))(not (= ?v0 lNil$ )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (ldrop$ ?v0 )zero$ )?v0 ):pattern ((ldrop$ ?v0 )))):named a15 ))
(assert (! (= size_bool$ (rec_bool$ zero$ zero$ )):named a16 ))
(check-sat )
;(get-unsat-core )
