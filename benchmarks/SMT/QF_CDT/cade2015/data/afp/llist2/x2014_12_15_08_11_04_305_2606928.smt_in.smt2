;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun a$ ()A_set$ )
(declare-fun l$ ()A_llist$ )
(declare-fun p$ (A_llist$ )Bool )
(declare-fun lrev$ (A_llist$ )A_llist$ )
(declare-fun ltake$ (A_llist$ Nat$ )A_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun finlsts$ (A_set$ )A_llist_set$ )
(declare-fun fpslsts$ (A_set$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun alllstsp$ (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun finlstsp$ (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun lbutlast$ (A_llist$ )A_llist$ )
(assert (! (not (p$ l$ )):named a0 ))
(assert (! (member$ l$ (fpslsts$ a$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (member$ ?v0 (fpslsts$ a$ ))(and (p$ ?v0 )(member$a ?v1 a$ )))(p$ (lCons$ ?v1 ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ ))(=> (member$a ?v0 a$ )(p$ (lCons$ ?v0 lNil$ )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (= lNil$ (lCons$ ?v0 ?v1 )))):named a7 ))
(assert (! (= (lbutlast$ lNil$ )lNil$ ):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$ (finlstsp$ ?v0 )?v1 )(or (= ?v1 lNil$ )(exists ((?v2 A_llist$ )(?v3 A$ ))(and (= ?v1 (lCons$ ?v3 ?v2 ))(and (fun_app$ (finlstsp$ ?v0 )?v2 )(fun_app$a ?v0 ?v3 ))))))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(=> (and (fun_app$ (finlstsp$ ?v0 )?v1 )(and (=> (= ?v1 lNil$ )false )(forall ((?v2 A_llist$ )(?v3 A$ ))(=> (and (= ?v1 (lCons$ ?v3 ?v2 ))(and (fun_app$ (finlstsp$ ?v0 )?v2 )(fun_app$a ?v0 ?v3 )))false ))))false )):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$ (alllstsp$ ?v0 )?v1 )(or (= ?v1 lNil$ )(exists ((?v2 A_llist$ )(?v3 A$ ))(and (= ?v1 (lCons$ ?v3 ?v2 ))(and (fun_app$ (alllstsp$ ?v0 )?v2 )(fun_app$a ?v0 ?v3 ))))))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(=> (and (fun_app$ (alllstsp$ ?v0 )?v1 )(and (=> (= ?v1 lNil$ )false )(forall ((?v2 A_llist$ )(?v3 A$ ))(=> (and (= ?v1 (lCons$ ?v3 ?v2 ))(and (fun_app$ (alllstsp$ ?v0 )?v2 )(fun_app$a ?v0 ?v3 )))false ))))false )):named a12 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 A_llist$ ))(=> (fun_app$ ?v0 ?v3 )(or (= ?v3 lNil$ )(exists ((?v4 A_llist$ )(?v5 A$ ))(and (= ?v3 (lCons$ ?v5 ?v4 ))(and (or (fun_app$ ?v0 ?v4 )(fun_app$ (alllstsp$ ?v2 )?v4 ))(fun_app$a ?v2 ?v5 ))))))))(fun_app$ (alllstsp$ ?v2 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(= (member$ ?v0 (fpslsts$ ?v1 ))(and (member$ ?v0 (finlsts$ ?v1 ))(not (= ?v0 lNil$ ))))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (ltake$ lNil$ ?v0 )lNil$ ):pattern ((ltake$ lNil$ ?v0 )))):named a15 ))
(assert (! (= (lrev$ lNil$ )lNil$ ):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (member$ ?v0 (finlsts$ ?v1 ))(member$ (lrev$ ?v0 )(finlsts$ ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
