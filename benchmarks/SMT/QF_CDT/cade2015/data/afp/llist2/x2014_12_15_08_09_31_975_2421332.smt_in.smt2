;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_a_option_fun$ 0 )
(declare-datatypes ()((A_option$ (none$ )(some$ (the$ A$ )))))
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-datatypes ()((Nibble$ (nibble0$ )(nibble1$ )(nibble2$ )(nibble3$ )(nibble4$ )(nibble5$ )(nibble6$ )(nibble7$ )(nibble8$ )(nibble9$ )(nibbleA$ )(nibbleB$ )(nibbleC$ )(nibbleD$ )(nibbleE$ )(nibbleF$ ))(Char$ (char$ (select$ Nibble$ )(selecta$ Nibble$ )))))
(declare-fun ja$ ()Nat$ )
(declare-fun ta$ ()A_llist$ )
(declare-fun ran$ (Nat_a_option_fun$ )A_set$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun ll2f$ (A_llist$ )Nat_a_option_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun fun_app$ (Nat_a_option_fun$ Nat$ )A_option$ )
(declare-fun less_eq$ (Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun size_char$ (Char$ )Nat$ )
(assert (! (not (= (fun_app$ (ll2f$ ta$ )zero$ )none$ )):named a0 ))
(assert (! (fun_app$a (less_eq$ ja$ )zero$ ):named a1 ))
(assert (! (= (fun_app$ (ll2f$ ta$ )ja$ )none$ ):named a2 ))
(assert (! (forall ((?v0 A_option$ ))(=> (and (=> (= ?v0 none$ )false )(=> (not (= ?v0 none$ ))false ))false )):named a3 ))
(assert (! (= zero$ zero$ ):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ll2f$ lNil$ )?v0 )none$ ):pattern ((fun_app$ (ll2f$ lNil$ )?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (less_eq$ ?v0 )zero$ )(= ?v0 zero$ )):pattern ((less_eq$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$a (less_eq$ zero$ )?v0 )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(! (=> (= (fun_app$ (ll2f$ ?v0 )?v1 )none$ )(= (fun_app$ (ll2f$ ?v0 )(suc$ ?v1 ))none$ )):pattern ((fun_app$ (ll2f$ ?v0 )(suc$ ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lset$ ?v0 )(ran$ (ll2f$ ?v0 ))):pattern ((lset$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(check-sat )
;(get-unsat-core )
