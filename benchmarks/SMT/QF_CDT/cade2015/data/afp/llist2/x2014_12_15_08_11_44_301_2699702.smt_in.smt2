;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_llist_llist_set$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun a$ ()A$ )
(declare-fun lrev$ (A_llist$ )A_llist$ )
(declare-fun ldrop$ (A_llist$ Nat$ )A_llist$ )
(declare-fun ltake$ (A_llist$ Nat$ )A_llist$ )
(declare-fun lconst$ (A$ )A_llist$ )
(declare-fun member$ (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun alllsts$ (A_llist_set$ )A_llist_llist_set$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconst$a (A_llist$ )A_llist_llist$ )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun member$b (A_llist_llist_llist$ A_llist_llist_llist_set$ )Bool )
(declare-fun member$c (A$ A_set$ )Bool )
(declare-fun alllsts$a (A_set$ )A_llist_set$ )
(declare-fun alllsts$b (A_llist_llist_set$ )A_llist_llist_llist_set$ )
(declare-fun alllstsp$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun finlstsp$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$a (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lbutlast$ (A_llist$ )A_llist$ )
(assert (! (not (not (= (lconst$ a$ )lNil$ ))):named a0 ))
(assert (! (= (lbutlast$ lNil$ )lNil$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (ltake$ lNil$ ?v0 )lNil$ ):pattern ((ltake$ lNil$ ?v0 )))):named a2 ))
(assert (! (= (lrev$ lNil$ )lNil$ ):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (ldrop$ lNil$ ?v0 )lNil$ ):pattern ((ldrop$ lNil$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(finlstsp$ ?v0 lNil$ )):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(alllstsp$ ?v0 lNil$ )):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lconst$a ?v0 )(lCons$a ?v0 (lconst$a ?v0 ))):pattern ((lconst$a ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ ))(! (= (lconst$ ?v0 )(lCons$ ?v0 (lconst$ ?v0 ))):pattern ((lconst$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (not (= (ldrop$ ?v0 ?v1 )lNil$ ))(not (= ?v0 lNil$ )))):named a9 ))
(assert (! (forall ((?v0 A_llist_set$ ))(member$ lNil$a (alllsts$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_set$ ))(member$a lNil$ (alllsts$a ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (lappend$ ?v0 ?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (lappend$ ?v0 ?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_set$ ))(= (member$b (lCons$b ?v0 ?v1 )(alllsts$b ?v2 ))(and (member$ ?v0 ?v2 )(member$b ?v1 (alllsts$b ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_set$ ))(= (member$ (lCons$a ?v0 ?v1 )(alllsts$ ?v2 ))(and (member$a ?v0 ?v2 )(member$ ?v1 (alllsts$ ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_set$ ))(= (member$a (lCons$ ?v0 ?v1 )(alllsts$a ?v2 ))(and (member$c ?v0 ?v2 )(member$a ?v1 (alllsts$a ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(= (lappend$ (ltake$ ?v0 ?v1 )(ldrop$ ?v0 ?v1 ))?v0 )):named a17 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_set$ ))(=> (member$ (lappend$a ?v0 ?v1 )(alllsts$ ?v2 ))(member$ ?v0 (alllsts$ ?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_set$ ))(=> (member$a (lappend$ ?v0 ?v1 )(alllsts$a ?v2 ))(member$a ?v0 (alllsts$a ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_llist$ ))(=> (and (member$ ?v0 (alllsts$ ?v1 ))(member$ ?v2 (alllsts$ ?v1 )))(member$ (lappend$a ?v0 ?v2 )(alllsts$ ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A_llist$ ))(=> (and (member$a ?v0 (alllsts$a ?v1 ))(member$a ?v2 (alllsts$a ?v1 )))(member$a (lappend$ ?v0 ?v2 )(alllsts$a ?v1 )))):named a21 ))
(check-sat )
;(get-unsat-core )
