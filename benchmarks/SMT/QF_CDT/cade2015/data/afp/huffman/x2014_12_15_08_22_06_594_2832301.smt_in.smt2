;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_tree_a_tree_list_fun$ 0 )
(declare-sort A_tree_list_a_tree_list_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))))
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun uu$ (A_tree$ )A_tree_list_a_tree_list_fun$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun bind$ (A_tree_list$ A_tree_a_tree_list_fun$ )A_tree_list$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun freq_F$ (A_tree_list$ )A_nat_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$ )A_tree_list$ )
(declare-fun huffman$ (A_tree_list$ )A_tree$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun fun_app$a (A_nat_fun$ A$ )Nat$ )
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun alphabet_F$ (A_tree_list$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun insortTree$ (A_tree$ A_tree_list$ )A_tree_list$ )
(declare-fun splitLeaf_F$ (A_tree_list$ Nat$ A$ Nat$ A$ )A_tree_list$ )
(declare-fun cachedWeight$ (A_tree$ )Nat$ )
(declare-fun consistent_F$ (A_tree_list$ )Bool )
(declare-fun sortedByWeight$ (A_tree_list$ )Bool )
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(cons$ ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (= (splitLeaf$ (huffman$ nil$ )w_a$ a$ w_b$ b$ )(huffman$ (splitLeaf_F$ nil$ w_a$ a$ w_b$ b$ )))):named a1 ))
(assert (! (not (= nil$ nil$ )):named a2 ))
(assert (! (consistent_F$ nil$ ):named a3 ))
(assert (! (member$ a$ (alphabet_F$ nil$ )):named a4 ))
(assert (! (= (fun_app$a (freq_F$ nil$ )a$ )(plus$ w_a$ w_b$ )):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_list$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(! (=> (not (member$ ?v0 (alphabet_F$ ?v1 )))(= (splitLeaf_F$ ?v1 ?v2 ?v0 ?v3 ?v4 )?v1 )):pattern ((splitLeaf_F$ ?v1 ?v2 ?v0 ?v3 ?v4 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(! (= (splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3 )nil$ ):pattern ((splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3 )))):named a7 ))
(assert (! (= (consistent_F$ nil$ )true ):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ ))(= (cachedWeight$ (splitLeaf$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(cachedWeight$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ )(?v5 A$ ))(! (= (splitLeaf_F$ (cons$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )(cons$ (splitLeaf$ ?v0 ?v2 ?v3 ?v4 ?v5 )(splitLeaf_F$ ?v1 ?v2 ?v3 ?v4 ?v5 ))):pattern ((splitLeaf_F$ (cons$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )))):named a11 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (not (= ?v0 nil$ ))(= (freq$ (huffman$ ?v0 ))(freq_F$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (huffman$ (cons$ ?v0 nil$ ))?v0 ):pattern ((uu$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (not (= ?v0 nil$ ))(= (alphabet$ (huffman$ ?v0 ))(alphabet_F$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (consistent_F$ ?v0 )(not (= ?v0 nil$ )))(consistent$ (huffman$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(not (= (insortTree$ ?v0 ?v1 )nil$ ))):named a16 ))
(assert (! (= (sortedByWeight$ nil$ )true ):named a17 ))
(assert (! (forall ((?v0 A_tree_a_tree_list_fun$ ))(! (= (bind$ nil$ ?v0 )nil$ ):pattern ((bind$ nil$ ?v0 )))):named a18 ))
(check-sat )
;(get-unsat-core )
