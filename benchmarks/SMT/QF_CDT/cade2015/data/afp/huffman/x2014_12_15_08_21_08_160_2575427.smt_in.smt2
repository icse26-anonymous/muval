;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun a$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun cachedWeight$ (A_tree$ )Nat$ )
(declare-fun mergeSibling$ (A_tree$ A$ )A_tree$ )
(assert (! (not (= (weight$ (mergeSibling$ t$ a$ ))(weight$ t$ ))):named a0 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(consistent$ (mergeSibling$ ?v0 ?v1 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (mergeSibling$ ?v1 ?v0 )?v1 )):pattern ((mergeSibling$ ?v1 ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (weight$ (leaf$ ?v0 ?v1 ))?v0 ):pattern ((leaf$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(! (= (mergeSibling$ (leaf$ ?v0 ?v1 )?v2 )(leaf$ ?v0 ?v1 )):pattern ((mergeSibling$ (leaf$ ?v0 ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ ))(! (= (mergeSibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3 )?v4 )?v5 )(innerNode$ ?v0 (mergeSibling$ (innerNode$ ?v1 ?v2 ?v3 )?v5 )(mergeSibling$ ?v4 ?v5 ))):pattern ((mergeSibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3 )?v4 )?v5 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ ))(! (= (mergeSibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4 ))?v5 )(innerNode$ ?v0 (mergeSibling$ ?v1 ?v5 )(mergeSibling$ (innerNode$ ?v2 ?v3 ?v4 )?v5 ))):pattern ((mergeSibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4 ))?v5 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (weight$ (innerNode$ ?v0 ?v1 ?v2 ))(plus$ (weight$ ?v1 )(weight$ ?v2 ))):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_tree$ ))(! (=> (= (height$ ?v0 )zero$ )(= (cachedWeight$ ?v0 )(weight$ ?v0 ))):pattern ((cachedWeight$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (cost$ (innerNode$ ?v0 ?v1 ?v2 ))(plus$ (plus$ (plus$ (weight$ ?v1 )(cost$ ?v1 ))(weight$ ?v2 ))(cost$ ?v2 ))):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ ))(! (=> (= (height$ ?v0 )zero$ )(= (cost$ ?v0 )zero$ )):pattern ((cost$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ )(?v5 A$ ))(! (= (mergeSibling$ (innerNode$ ?v0 (leaf$ ?v1 ?v2 )(leaf$ ?v3 ?v4 ))?v5 )(ite (or (= ?v5 ?v2 )(= ?v5 ?v4 ))(leaf$ (plus$ ?v1 ?v3 )?v5 )(innerNode$ ?v0 (leaf$ ?v1 ?v2 )(leaf$ ?v3 ?v4 )))):pattern ((mergeSibling$ (innerNode$ ?v0 (leaf$ ?v1 ?v2 )(leaf$ ?v3 ?v4 ))?v5 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (cachedWeight$ (innerNode$ ?v0 ?v1 ?v2 ))?v0 ):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (cachedWeight$ (leaf$ ?v0 ?v1 ))?v0 ):pattern ((leaf$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$ (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (cost$ (leaf$ ?v0 ?v1 ))zero$ ):pattern ((leaf$ ?v0 ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
