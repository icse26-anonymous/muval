;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun u$ ()A_tree$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_nat_fun$ A$ )Nat$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun optimum$ (A_tree$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (not (less_eq$ (cost$ (splitLeaf$ t$ w_a$ a$ w_b$ b$ ))(cost$ u$ ))):named a0 ))
(assert (! (optimum$ t$ ):named a1 ))
(assert (! (less_eq$ w_a$ w_b$ ):named a2 ))
(assert (! (consistent$ t$ ):named a3 ))
(assert (! (consistent$ u$ ):named a4 ))
(assert (! (member$ a$ (alphabet$ t$ )):named a5 ))
(assert (! (not (member$ b$ (alphabet$ t$ ))):named a6 ))
(assert (! (= (freq$ (splitLeaf$ t$ w_a$ a$ w_b$ b$ ))(freq$ u$ )):named a7 ))
(assert (! (= (alphabet$ (splitLeaf$ t$ w_a$ a$ w_b$ b$ ))(alphabet$ u$ )):named a8 ))
(assert (! (= (fun_app$ (freq$ t$ )a$ )(plus$ w_a$ w_b$ )):named a9 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (alphabet$ t$ ))(and (less_eq$ w_a$ (fun_app$ (freq$ t$ )?v0 ))(less_eq$ w_b$ (fun_app$ (freq$ t$ )?v0 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(or (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a16 ))
(check-sat )
;(get-unsat-core )
