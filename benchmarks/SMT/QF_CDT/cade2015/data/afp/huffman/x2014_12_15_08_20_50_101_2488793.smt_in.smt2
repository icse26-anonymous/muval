;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_a_tree_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_a_tree_fun$ A$ )A_tree$ )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun swapSyms$ (A_tree$ A$ )A_a_tree_fun$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(assert (! (not (= (sibling$ (fun_app$ (swapSyms$ t$ a$ )b$ )(sibling$ t$ b$ ))a$ )):named a0 ))
(assert (! (consistent$ t$ ):named a1 ))
(assert (! (not (= (sibling$ t$ b$ )a$ )):named a2 ))
(assert (! (not (= (sibling$ t$ b$ )b$ )):named a3 ))
(assert (! (not (= a$ b$ )):named a4 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (sibling$ ?v0 (sibling$ ?v0 ?v1 ))?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(! (=> (consistent$ ?v0 )(= (fun_app$ (swapSyms$ ?v0 ?v1 )?v1 )?v0 )):pattern ((swapSyms$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (and (consistent$ ?v0 )(and (not (= (sibling$ ?v0 ?v1 )?v1 ))(not (= ?v2 ?v1 ))))(= (sibling$ (fun_app$ (swapSyms$ ?v0 ?v2 )(sibling$ ?v0 ?v1 ))?v2 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (and (consistent$ ?v0 )(= (sibling$ ?v0 ?v1 )?v2 ))(= (sibling$ ?v0 ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (consistent$ ?v0 )(consistent$ (fun_app$ (swapSyms$ ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 Nat$ )(?v4 Nat$ ))(=> (and (consistent$ ?v0 )(and (not (= (sibling$ ?v0 ?v1 )?v1 ))(not (= ?v2 ?v1 ))))(= (sibling$ (swapLeaves$ ?v0 ?v3 ?v2 ?v4 (sibling$ ?v0 ?v1 ))?v2 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(=> (and (consistent$ ?v0 )(and (not (= ?v1 ?v2 ))(not (= ?v1 ?v3 ))))(= (depth$ (fun_app$ (swapSyms$ ?v0 ?v2 )?v3 )?v1 )(depth$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (depth$ ?v0 (sibling$ ?v0 ?v1 ))(depth$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ ))(=> (consistent$ ?v0 )(consistent$ (swapLeaves$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ ))(=> (and (member$ ?v0 (alphabet$ ?v1 ))(member$ ?v2 (alphabet$ ?v1 )))(= (alphabet$ (fun_app$ (swapSyms$ ?v1 ?v0 )?v2 ))(alphabet$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (sibling$ ?v1 ?v0 )?v0 )):pattern ((sibling$ ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$ (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (and (consistent$ ?v0 )(and (member$ ?v1 (alphabet$ ?v0 ))(member$ ?v2 (alphabet$ ?v0 ))))(= (freq$ (fun_app$ (swapSyms$ ?v0 ?v1 )?v2 ))(freq$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(! (= (sibling$ (leaf$ ?v0 ?v1 )?v2 )?v2 ):pattern ((sibling$ (leaf$ ?v0 ?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (alphabet$ ?v1 ))(member$ (sibling$ ?v1 ?v0 )(alphabet$ ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (not (= (sibling$ ?v0 ?v1 )?v1 ))(member$ (sibling$ ?v0 ?v1 )(alphabet$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 A$ )(?v4 Nat$ )(?v5 Nat$ ))(=> (and (consistent$ ?v0 )(and (not (= ?v1 ?v2 ))(not (= ?v1 ?v3 ))))(= (depth$ (swapLeaves$ ?v0 ?v4 ?v2 ?v5 ?v3 )?v1 )(depth$ ?v0 ?v1 )))):named a21 ))
(check-sat )
;(get-unsat-core )
