;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_tree_bool_fun$ 0 )
(declare-sort A_tree_list_nat_fun$ 0 )
(declare-sort A_tree_list_bool_fun$ 0 )
(declare-sort A_tree_a_tree_list_fun$ 0 )
(declare-sort A_tree_list_a_tree_list_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))))
(declare-fun t$ ()A_tree$ )
(declare-fun ts$ ()A_tree_list$ )
(declare-fun bot$ ()A_set$ )
(declare-fun bind$ (A_tree_list$ A_tree_a_tree_list_fun$ )A_tree_list$ )
(declare-fun maps$ (A_tree_a_tree_list_fun$ )A_tree_list_a_tree_list_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun freq_F$ (A_tree_list$ A$ )Nat$ )
(declare-fun member$ (A_tree_list$ )A_tree_bool_fun$ )
(declare-fun splice$ (A_tree_list$ )A_tree_list_a_tree_list_fun$ )
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$ )A_tree_list$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_tree_list_bool_fun$ A_tree_list$ )Bool )
(declare-fun fun_app$b (A_tree_bool_fun$ A_tree$ )Bool )
(declare-fun fun_app$c (A_tree_list_nat_fun$ A_tree_list$ )Nat$ )
(declare-fun height_F$ (A_tree_list$ )Nat$ )
(declare-fun list_ex1$ (A_tree_bool_fun$ )A_tree_list_bool_fun$ )
(declare-fun alphabet_F$ (A_tree_list$ )A_set$ )
(declare-fun gen_length$ (Nat$ )A_tree_list_nat_fun$ )
(declare-fun insortTree$ (A_tree$ )A_tree_list_a_tree_list_fun$ )
(declare-fun consistent_F$ (A_tree_list$ )Bool )
(assert (! (not (not (= (fun_app$ (insortTree$ t$ )ts$ )nil$ ))):named a0 ))
(assert (! (= (consistent_F$ nil$ )true ):named a1 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a2 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (fun_app$ (insortTree$ ?v0 )nil$ )(cons$ ?v0 nil$ )):pattern ((insortTree$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_tree_a_tree_list_fun$ ))(! (= (bind$ nil$ ?v0 )nil$ ):pattern ((bind$ nil$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_tree_bool_fun$ ))(! (= (fun_app$a (list_ex1$ ?v0 )nil$ )false ):pattern ((list_ex1$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (fun_app$b (member$ nil$ )?v0 )false ):pattern ((fun_app$b (member$ nil$ )?v0 )))):named a6 ))
(assert (! (= (height_F$ nil$ )zero$ ):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$c (gen_length$ ?v0 )nil$ )?v0 ):pattern ((gen_length$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ ))(! (= (freq_F$ nil$ ?v0 )zero$ ):pattern ((freq_F$ nil$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_tree_list$ ))(! (= (fun_app$ (splice$ ?v0 )nil$ )?v0 ):pattern ((splice$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_tree_a_tree_list_fun$ ))(! (= (fun_app$ (maps$ ?v0 )nil$ )nil$ ):pattern ((maps$ ?v0 )))):named a11 ))
(assert (! (= (alphabet_F$ nil$ )bot$ ):named a12 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_list$ ))(! (=> (not (member$a ?v0 (alphabet_F$ ?v1 )))(= (freq_F$ ?v1 ?v0 )zero$ )):pattern ((freq_F$ ?v1 ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A_tree$ ))(! (= (fun_app$b (member$ (cons$ ?v0 ?v1 ))?v2 )(or (= ?v0 ?v2 )(fun_app$b (member$ ?v1 )?v2 ))):pattern ((fun_app$b (member$ (cons$ ?v0 ?v1 ))?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(! (= (fun_app$ (splice$ (cons$ ?v0 ?v1 ))(cons$ ?v2 ?v3 ))(cons$ ?v0 (cons$ ?v2 (fun_app$ (splice$ ?v1 )?v3 )))):pattern ((fun_app$ (splice$ (cons$ ?v0 ?v1 ))(cons$ ?v2 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(! (= (fun_app$ (splice$ (cons$ ?v0 ?v1 ))nil$ )(cons$ ?v0 ?v1 )):pattern ((cons$ ?v0 ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
