;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun bot$ ()A_set$ )
(declare-fun inf$ (A_set$ A_set$ )A_set$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun x11$ ()Nat$ )
(declare-fun x12$ ()A$ )
(declare-fun x21$ ()Nat$ )
(declare-fun x22$ ()A_tree$ )
(declare-fun x23$ ()A_tree$ )
(declare-fun zero$ ()Nat$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(assert (! (not false ):named a0 ))
(assert (! (consistent$ t_1$ ):named a1 ))
(assert (! (consistent$ t_2$ ):named a2 ))
(assert (! (= (inf$ (alphabet$ t_1$ )(alphabet$ t_2$ ))bot$ ):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(=> (= t_1$ (leaf$ ?v0 ?v1 ))(forall ((?v2 Nat$ )(?v3 A$ ))(or (= ?v1 ?v3 )(not (= t_2$ (leaf$ ?v2 ?v3 ))))))):named a4 ))
(assert (! (and (= (height$ t_1$ )zero$ )(= (height$ t_2$ )zero$ )):named a5 ))
(assert (! (= t_1$ (leaf$ x11$ x12$ )):named a6 ))
(assert (! (= t_2$ (innerNode$ x21$ x22$ x23$ )):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (consistent$ (innerNode$ ?v0 ?v1 ?v2 ))(and (consistent$ ?v1 )(and (consistent$ ?v2 )(= (inf$ (alphabet$ ?v1 )(alphabet$ ?v2 ))bot$ )))):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$ (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (height$ (leaf$ ?v0 ?v1 ))zero$ ):pattern ((leaf$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (forall ((?v1 Nat$ )(?v2 A$ ))(=> (= ?v0 (leaf$ ?v1 ?v2 ))false ))(forall ((?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (innerNode$ ?v1 ?v2 ?v3 ))false )))false )):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ ))(not (= (leaf$ ?v0 ?v1 )(innerNode$ ?v2 ?v3 ?v4 )))):named a14 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_set$ ))(= (inf$ ?v0 bot$ )bot$ )):named a16 ))
(assert (! (forall ((?v0 A_set$ ))(= (inf$ bot$ ?v0 )bot$ )):named a17 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(=> (and (consistent$ ?v0 )(and (consistent$ ?v1 )(= (inf$ (alphabet$ ?v0 )(alphabet$ ?v1 ))bot$ )))(consistent$ (uniteTrees$ ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$ ?v0 (inf$ ?v1 ?v2 ))(and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 ))(member$ ?v0 (inf$ ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (inf$ (inf$ ?v0 ?v1 )?v1 )(inf$ ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (inf$ (inf$ ?v0 ?v1 )?v1 )(inf$ ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (inf$ ?v0 (inf$ ?v0 ?v1 ))(inf$ ?v0 ?v1 ))):named a23 ))
(check-sat )
;(get-unsat-core )
