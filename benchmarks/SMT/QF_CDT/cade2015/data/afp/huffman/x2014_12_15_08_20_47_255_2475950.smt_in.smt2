;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun times$ (Nat$ Nat$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun swapSyms$ (A_tree$ A$ A$ )A_tree$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(assert (! (not (less_eq$ (plus$ (cost$ t$ )(plus$ (times$ (freq$ t$ a$ )(depth$ t$ b$ ))(times$ (freq$ t$ b$ )(depth$ t$ a$ ))))(plus$ (cost$ t$ )(plus$ (times$ (freq$ t$ a$ )(depth$ t$ a$ ))(times$ (freq$ t$ b$ )(depth$ t$ b$ )))))):named a0 ))
(assert (! (consistent$ t$ ):named a1 ))
(assert (! (less_eq$ (plus$ (times$ (freq$ t$ a$ )(depth$ t$ b$ ))(times$ (freq$ t$ b$ )(depth$ t$ a$ )))(plus$ (times$ (freq$ t$ a$ )(depth$ t$ a$ ))(times$ (freq$ t$ b$ )(depth$ t$ b$ )))):named a2 ))
(assert (! (less_eq$ (freq$ t$ a$ )(freq$ t$ b$ )):named a3 ))
(assert (! (less_eq$ (depth$ t$ a$ )(depth$ t$ b$ )):named a4 ))
(assert (! (member$ a$ (alphabet$ t$ )):named a5 ))
(assert (! (member$ b$ (alphabet$ t$ )):named a6 ))
(assert (! (= (plus$ (cost$ (swapSyms$ t$ a$ b$ ))(plus$ (times$ (freq$ t$ a$ )(depth$ t$ a$ ))(times$ (freq$ t$ b$ )(depth$ t$ b$ ))))(plus$ (cost$ t$ )(plus$ (times$ (freq$ t$ a$ )(depth$ t$ b$ ))(times$ (freq$ t$ b$ )(depth$ t$ a$ ))))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v2 ?v3 ))(less_eq$ (plus$ (times$ ?v0 ?v3 )(times$ ?v1 ?v2 ))(plus$ (times$ ?v0 ?v2 )(times$ ?v1 ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$ (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(less_eq$ ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$ (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(less_eq$ ?v0 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$ (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(less_eq$ ?v1 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A$ ))(= (freq$ (uniteTrees$ ?v0 ?v1 )?v2 )(plus$ (freq$ ?v0 ?v2 )(freq$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v2 ?v3 ))(less_eq$ (times$ ?v0 ?v2 )(times$ ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (less_eq$ ?v0 ?v1 )(less_eq$ (times$ ?v2 ?v0 )(times$ ?v2 ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
