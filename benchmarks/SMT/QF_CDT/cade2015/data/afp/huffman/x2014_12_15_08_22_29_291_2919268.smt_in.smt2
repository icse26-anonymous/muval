;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))))
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun ts$ ()A_tree_list$ )
(declare-fun t_a$ ()A_tree$ )
(declare-fun t_b$ ()A_tree$ )
(declare-fun ts$a ()A_tree_list$ )
(declare-fun tsa$ ()A_tree_list$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun size$ (A_tree_list$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun huffman$ (A_tree_list$ )A_tree$ )
(declare-fun optimum$ (A_tree$ )Bool )
(declare-fun height_F$ (A_tree_list$ )Nat$ )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun insortTree$ (A_tree$ A_tree_list$ )A_tree_list$ )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun consistent_F$ (A_tree_list$ )Bool )
(declare-fun sortedByWeight$ (A_tree_list$ )Bool )
(assert (! (not (optimum$ (huffman$ (insortTree$ (leaf$ (plus$ w_a$ w_b$ )a$ )ts$ )))):named a0 ))
(assert (! (= ts$a (cons$ t_b$ ts$ )):named a1 ))
(assert (! (= t_a$ (leaf$ w_a$ a$ )):named a2 ))
(assert (! (= t_b$ (leaf$ w_b$ b$ )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (less$ (size$ ?v0 )(size$ tsa$ ))(and (consistent_F$ ?v0 )(and (= (height_F$ ?v0 )zero$ )(and (sortedByWeight$ ?v0 )(not (= ?v0 nil$ ))))))(optimum$ (huffman$ ?v0 )))):named a5 ))
(assert (! (= (huffman$ tsa$ )(huffman$ (insortTree$ (uniteTrees$ t_a$ t_b$ )ts$ ))):named a6 ))
(assert (! (= (huffman$ (insortTree$ (uniteTrees$ t_a$ t_b$ )ts$ ))(splitLeaf$ (huffman$ (insortTree$ (leaf$ (plus$ w_a$ w_b$ )a$ )ts$ ))w_a$ a$ w_b$ b$ )):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(= (consistent_F$ (insortTree$ ?v0 ?v1 ))(consistent_F$ (cons$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(not (= (insortTree$ ?v0 ?v1 )nil$ ))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 Nat$ )(?v2 A$ ))(! (= (pred_tree$ ?v0 (leaf$ ?v1 ?v2 ))(fun_app$ ?v0 ?v2 )):pattern ((pred_tree$ ?v0 (leaf$ ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree_list$ ))(! (= (huffman$ (cons$ ?v0 (cons$ ?v1 ?v2 )))(huffman$ (insortTree$ (uniteTrees$ ?v0 ?v1 )?v2 ))):pattern ((cons$ ?v0 (cons$ ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )(plus$ ?v2 ?v3 ))(plus$ (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a16 ))
(check-sat )
;(get-unsat-core )
