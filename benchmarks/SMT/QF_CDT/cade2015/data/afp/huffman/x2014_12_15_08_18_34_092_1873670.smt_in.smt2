;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun w$ ()Nat$ )
(declare-fun uu$ ()A_nat_fun$ )
(declare-fun bot$ ()A_set$ )
(declare-fun inf$ (A_set$ A_set$ )A_set$ )
(declare-fun one$ ()Nat$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun uua$ ()A_nat_fun$ )
(declare-fun uub$ ()A_nat_fun$ )
(declare-fun uuc$ ()A_nat_fun$ )
(declare-fun uud$ ()A_nat_fun$ )
(declare-fun uue$ ()A_nat_fun$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun minus$ (Nat$ Nat$ )Nat$ )
(declare-fun times$ (Nat$ Nat$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun setsum$ (A_nat_fun$ A_set$ )Nat$ )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun fun_app$ (A_nat_fun$ A$ )Nat$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uuc$ ?v0 )(times$ (fun_app$ (freq$ t_2$ )?v0 )(depth$ (innerNode$ w$ t_1$ t_2$ )?v0 ))):pattern ((fun_app$ uuc$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uub$ ?v0 )(times$ (fun_app$ (freq$ t_1$ )?v0 )(depth$ (innerNode$ w$ t_1$ t_2$ )?v0 ))):pattern ((fun_app$ uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uua$ ?v0 )(times$ (fun_app$ (freq$ t_2$ )?v0 )(minus$ (depth$ (innerNode$ w$ t_1$ t_2$ )?v0 )one$ ))):pattern ((fun_app$ uua$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(times$ (fun_app$ (freq$ t_1$ )?v0 )(minus$ (depth$ (innerNode$ w$ t_1$ t_2$ )?v0 )one$ ))):pattern ((fun_app$ uu$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uud$ ?v0 )(times$ (fun_app$ (freq$ t_2$ )?v0 )(depth$ t_2$ ?v0 ))):pattern ((fun_app$ uud$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uue$ ?v0 )(times$ (fun_app$ (freq$ t_1$ )?v0 )(depth$ t_1$ ?v0 ))):pattern ((fun_app$ uue$ ?v0 )))):named a5 ))
(assert (! (not (= (plus$ (plus$ (plus$ (weight$ t_1$ )(setsum$ uu$ (alphabet$ t_1$ )))(weight$ t_2$ ))(setsum$ uua$ (alphabet$ t_2$ )))(minus$ (plus$ (plus$ (minus$ (plus$ (weight$ t_1$ )(setsum$ uub$ (alphabet$ t_1$ )))(setsum$ (freq$ t_1$ )(alphabet$ t_1$ )))(weight$ t_2$ ))(setsum$ uuc$ (alphabet$ t_2$ )))(setsum$ (freq$ t_2$ )(alphabet$ t_2$ ))))):named a6 ))
(assert (! (consistent$ (innerNode$ w$ t_1$ t_2$ )):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a8 ))
(assert (! (forall ((?v0 A$ ))(! (=> (and (= (inf$ (alphabet$ t_1$ )(alphabet$ t_2$ ))bot$ )(member$ ?v0 (alphabet$ t_2$ )))(= (depth$ (innerNode$ w$ t_1$ t_2$ )?v0 )(plus$ (depth$ t_2$ ?v0 )one$ ))):pattern ((depth$ (innerNode$ w$ t_1$ t_2$ )?v0 )))):named a9 ))
(assert (! (=> (consistent$ t_2$ )(= (cost$ t_2$ )(setsum$ uud$ (alphabet$ t_2$ )))):named a10 ))
(assert (! (=> (consistent$ t_1$ )(= (cost$ t_1$ )(setsum$ uue$ (alphabet$ t_1$ )))):named a11 ))
(assert (! (= (plus$ (plus$ (plus$ (weight$ t_1$ )(setsum$ uue$ (alphabet$ t_1$ )))(weight$ t_2$ ))(setsum$ uud$ (alphabet$ t_2$ )))(plus$ (plus$ (plus$ (weight$ t_1$ )(setsum$ uu$ (alphabet$ t_1$ )))(weight$ t_2$ ))(setsum$ uua$ (alphabet$ t_2$ )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (weight$ (innerNode$ ?v0 ?v1 ?v2 ))(plus$ (weight$ ?v1 )(weight$ ?v2 ))):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ ))(! (= (fun_app$ (freq$ (innerNode$ ?v0 ?v1 ?v2 ))?v3 )(plus$ (fun_app$ (freq$ ?v1 )?v3 )(fun_app$ (freq$ ?v2 )?v3 ))):pattern ((fun_app$ (freq$ (innerNode$ ?v0 ?v1 ?v2 ))?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a15 ))
(assert (! (= (cost$ (innerNode$ w$ t_1$ t_2$ ))(plus$ (plus$ (plus$ (weight$ t_1$ )(setsum$ uu$ (alphabet$ t_1$ )))(weight$ t_2$ ))(setsum$ uua$ (alphabet$ t_2$ )))):named a16 ))
(assert (! (= (plus$ (plus$ (plus$ (weight$ t_1$ )(cost$ t_1$ ))(weight$ t_2$ ))(cost$ t_2$ ))(plus$ (plus$ (plus$ (weight$ t_1$ )(setsum$ uue$ (alphabet$ t_1$ )))(weight$ t_2$ ))(setsum$ uud$ (alphabet$ t_2$ )))):named a17 ))
(assert (! (= (cost$ (innerNode$ w$ t_1$ t_2$ ))(plus$ (plus$ (plus$ (weight$ t_1$ )(cost$ t_1$ ))(weight$ t_2$ ))(cost$ t_2$ ))):named a18 ))
(assert (! (forall ((?v0 A_tree$ ))(! (=> (consistent$ ?v0 )(= (weight$ ?v0 )(setsum$ (freq$ ?v0 )(alphabet$ ?v0 )))):pattern ((weight$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= one$ (times$ ?v0 ?v1 ))(and (= ?v0 one$ )(= ?v1 one$ )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (times$ ?v0 ?v1 )one$ )(and (= ?v0 one$ )(= ?v1 one$ )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (minus$ (minus$ ?v0 ?v1 )?v2 )(minus$ ?v0 (plus$ ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ ))(= (times$ ?v0 one$ )?v0 )):named a23 ))
(check-sat )
;(get-unsat-core )
