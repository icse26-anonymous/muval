;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_a_nat_fun_fun$ 0 )
(declare-sort A_set_a_nat_fun_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun t$ ()A_tree$ )
(declare-fun uu$ (A_a_nat_fun_fun$ )A_set_a_nat_fun_fun$ )
(declare-fun uua$ (A_a_nat_fun_fun$ )A_a_nat_fun_fun$ )
(declare-fun uub$ (A_a_nat_fun_fun$ )A_set_a_nat_fun_fun$ )
(declare-fun uuc$ (A_nat_fun$ )A_nat_fun$ )
(declare-fun uud$ ()A_nat_fun$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun zero$ ()Nat$ )
(declare-fun depth$ (A_tree$ )A_nat_fun$ )
(declare-fun finite$ (A_set$ )Bool )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun of_nat$ (Nat$ )Nat$ )
(declare-fun setsum$ (A_nat_fun$ A_set$ )Nat$ )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun fun_app$ (A_nat_fun$ A$ )Nat$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun fun_app$a (A_a_nat_fun_fun$ A$ )A_nat_fun$ )
(declare-fun fun_app$b (A_set_a_nat_fun_fun$ A_set$ )A_nat_fun$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(of_nat$ (fun_app$ ?v0 ?v1 ))):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_a_nat_fun_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_a_nat_fun_fun$ )(?v1 A_set$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$b (uub$ ?v0 )?v1 )?v2 )(setsum$ (fun_app$a (uua$ ?v0 )?v2 )?v1 )):pattern ((fun_app$ (fun_app$b (uub$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_a_nat_fun_fun$ )(?v1 A_set$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$b (uu$ ?v0 )?v1 )?v2 )(setsum$ (fun_app$a ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$b (uu$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uud$ ?v0 )zero$ ):pattern ((fun_app$ uud$ ?v0 )))):named a4 ))
(assert (! (not (= (weight$ t$ )(setsum$ (freq$ t$ )(alphabet$ t$ )))):named a5 ))
(assert (! (consistent$ t$ ):named a6 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_a_nat_fun_fun$ )(?v1 A_set$ )(?v2 A_set$ ))(= (setsum$ (fun_app$b (uu$ ?v0 )?v1 )?v2 )(setsum$ (fun_app$b (uub$ ?v0 )?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (fun_app$ (freq$ ?v1 )?v0 )zero$ )):pattern ((fun_app$ (freq$ ?v1 )?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_set$ )(?v4 A_nat_fun$ )(?v5 A_nat_fun$ ))(=> (and (forall ((?v6 A$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$c ?v1 (fun_app$c ?v2 ?v6 ))?v6 )))(and (forall ((?v6 A$ ))(=> (member$ ?v6 ?v0 )(member$ (fun_app$c ?v2 ?v6 )?v3 )))(and (forall ((?v6 A$ ))(=> (member$ ?v6 ?v3 )(= (fun_app$c ?v2 (fun_app$c ?v1 ?v6 ))?v6 )))(and (forall ((?v6 A$ ))(=> (member$ ?v6 ?v3 )(member$ (fun_app$c ?v1 ?v6 )?v0 )))(forall ((?v6 A$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$ ?v4 (fun_app$c ?v2 ?v6 ))(fun_app$ ?v5 ?v6 ))))))))(= (setsum$ ?v5 ?v0 )(setsum$ ?v4 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_nat_fun$ )(?v3 A_nat_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (setsum$ ?v2 ?v0 )(setsum$ ?v3 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (weight$ (leaf$ ?v0 ?v1 ))?v0 ):pattern ((leaf$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (consistent$ ?v0 )(exists ((?v1 A$ ))(and (member$ ?v1 (alphabet$ ?v0 ))(= (fun_app$ (depth$ ?v0 )?v1 )(height$ ?v0 )))))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$ (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_set$ ))(= (of_nat$ (setsum$ ?v0 ?v1 ))(setsum$ (uuc$ ?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_tree$ ))(finite$ (alphabet$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 A_set$ ))(= (setsum$ uud$ ?v0 )zero$ )):named a17 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(=> (and (less$ zero$ (height$ ?v0 ))(and (consistent$ ?v0 )(= (alphabet$ ?v0 )(alphabet$ ?v1 ))))(less$ zero$ (height$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a19 ))
(check-sat )
;(get-unsat-core )
