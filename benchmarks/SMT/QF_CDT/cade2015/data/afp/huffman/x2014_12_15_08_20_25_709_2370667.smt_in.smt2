;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_tree_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun d$ ()A$ )
(declare-fun w$ ()Nat$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_d$ ()Nat$ )
(declare-fun w_s$ ()Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_a_tree_fun$ A$ )A_tree$ )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ )A_a_tree_fun$ )
(assert (! (not (= (sibling$ (fun_app$ (swapLeaves$ (innerNode$ w$ t_1$ t_2$ )w_a$ a$ w_s$ )(sibling$ (innerNode$ w$ t_1$ t_2$ )b$ ))a$ )b$ )):named a0 ))
(assert (! (not (= d$ b$ )):named a1 ))
(assert (! (= t_2$ (leaf$ w_d$ d$ )):named a2 ))
(assert (! (not (= (height$ t_1$ )zero$ )):named a3 ))
(assert (! (not (= a$ b$ )):named a4 ))
(assert (! (member$ b$ (alphabet$ t_1$ )):named a5 ))
(assert (! (= (height$ t_2$ )zero$ ):named a6 ))
(assert (! (member$ (sibling$ t_1$ b$ )(alphabet$ t_1$ )):named a7 ))
(assert (! (consistent$ (innerNode$ w$ t_1$ t_2$ )):named a8 ))
(assert (! (not (= (sibling$ (innerNode$ w$ t_1$ t_2$ )b$ )b$ )):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a10 ))
(assert (! (=> (and (consistent$ t_1$ )(and (not (= (sibling$ t_1$ b$ )b$ ))(not (= a$ b$ ))))(= (sibling$ (fun_app$ (swapLeaves$ t_1$ w_a$ a$ w_s$ )(sibling$ t_1$ b$ ))a$ )b$ )):named a11 ))
(assert (! (=> (and (consistent$ t_2$ )(and (not (= (sibling$ t_2$ b$ )b$ ))(not (= a$ b$ ))))(= (sibling$ (fun_app$ (swapLeaves$ t_2$ w_a$ a$ w_s$ )(sibling$ t_2$ b$ ))a$ )b$ )):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A$ )(?v5 Nat$ )(?v6 A$ ))(! (= (fun_app$ (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 )?v6 )(innerNode$ ?v0 (fun_app$ (swapLeaves$ ?v1 ?v3 ?v4 ?v5 )?v6 )(fun_app$ (swapLeaves$ ?v2 ?v3 ?v4 ?v5 )?v6 ))):pattern ((fun_app$ (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 )?v6 )))):named a13 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (sibling$ ?v0 (sibling$ ?v0 ?v1 ))?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ ))(= (height$ (fun_app$ (swapLeaves$ ?v0 ?v1 ?v2 ?v3 )?v4 ))(height$ ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 Nat$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (fun_app$ (swapLeaves$ ?v1 ?v2 ?v0 ?v3 )?v0 )?v1 )):pattern ((swapLeaves$ ?v1 ?v2 ?v0 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (sibling$ ?v1 ?v0 )?v0 )):pattern ((sibling$ ?v1 ?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
