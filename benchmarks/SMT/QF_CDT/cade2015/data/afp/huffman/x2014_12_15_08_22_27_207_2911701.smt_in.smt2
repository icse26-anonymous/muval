;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_tree_list_a_tree_list_fun$ 0 )
(declare-sort A_tree_list_a_tree_list_bool_fun_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))))
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun ts$ ()A_tree_list$ )
(declare-fun uu$ (A_tree$ )A_tree_list_a_tree_list_fun$ )
(declare-fun t_a$ ()A_tree$ )
(declare-fun t_b$ ()A_tree$ )
(declare-fun ts$a ()A_tree_list$ )
(declare-fun tsa$ ()A_tree_list$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun accp$ (A_tree_list_a_tree_list_bool_fun_fun$ A_tree_list$ )Bool )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun size$ (A_tree_list$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$ )A_tree_list$ )
(declare-fun huffman$ (A_tree_list$ )A_tree$ )
(declare-fun optimum$ (A_tree$ )Bool )
(declare-fun height_F$ (A_tree_list$ )Nat$ )
(declare-fun undefined$ ()A_tree$ )
(declare-fun insortTree$ (A_tree$ )A_tree_list_a_tree_list_fun$ )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun huffman_rel$ ()A_tree_list_a_tree_list_bool_fun_fun$ )
(declare-fun consistent_F$ (A_tree_list$ )Bool )
(declare-fun sortedByWeight$ (A_tree_list$ )Bool )
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(cons$ ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (= (huffman$ tsa$ )(huffman$ (fun_app$ (insortTree$ (uniteTrees$ t_a$ t_b$ ))ts$ )))):named a1 ))
(assert (! (= tsa$ (cons$ t_a$ ts$a )):named a2 ))
(assert (! (consistent_F$ tsa$ ):named a3 ))
(assert (! (= ts$a (cons$ t_b$ ts$ )):named a4 ))
(assert (! (sortedByWeight$ tsa$ ):named a5 ))
(assert (! (not (= tsa$ nil$ )):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree_list$ ))(! (= (huffman$ (cons$ ?v0 (cons$ ?v1 ?v2 )))(huffman$ (fun_app$ (insortTree$ (uniteTrees$ ?v0 ?v1 ))?v2 ))):pattern ((cons$ ?v0 (cons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (= t_a$ (leaf$ w_a$ a$ )):named a8 ))
(assert (! (= t_b$ (leaf$ w_b$ b$ )):named a9 ))
(assert (! (= (height_F$ tsa$ )zero$ ):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(= (consistent_F$ (fun_app$ (insortTree$ ?v0 )?v1 ))(consistent_F$ (cons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 A_tree$ ))(=> (and (= (huffman$ ?v0 )?v1 )(and (forall ((?v2 A_tree$ ))(=> (and (= ?v0 (cons$ ?v2 nil$ ))(= ?v1 ?v2 ))false ))(and (forall ((?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree_list$ ))(=> (and (= ?v0 (cons$ ?v2 (cons$ ?v3 ?v4 )))(= ?v1 (huffman$ (fun_app$ (insortTree$ (uniteTrees$ ?v2 ?v3 ))?v4 ))))false ))(=> (and (= ?v0 nil$ )(= ?v1 undefined$ ))false ))))false )):named a12 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(not (= (fun_app$ (insortTree$ ?v0 )?v1 )nil$ ))):named a13 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (huffman$ (cons$ ?v0 nil$ ))?v0 ):pattern ((uu$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (fun_app$ (insortTree$ ?v0 )nil$ )(cons$ ?v0 nil$ )):pattern ((insortTree$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 A_tree$ ))(=> (and (= (huffman$ ?v0 )?v1 )(and (accp$ huffman_rel$ ?v0 )(and (forall ((?v2 A_tree$ ))(=> (and (= ?v0 (cons$ ?v2 nil$ ))(and (= ?v1 ?v2 )(accp$ huffman_rel$ (cons$ ?v2 nil$ ))))false ))(and (forall ((?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree_list$ ))(=> (and (= ?v0 (cons$ ?v2 (cons$ ?v3 ?v4 )))(and (= ?v1 (huffman$ (fun_app$ (insortTree$ (uniteTrees$ ?v2 ?v3 ))?v4 )))(accp$ huffman_rel$ (cons$ ?v2 (cons$ ?v3 ?v4 )))))false ))(=> (and (= ?v0 nil$ )(and (= ?v1 undefined$ )(accp$ huffman_rel$ nil$ )))false )))))false )):named a16 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (less$ (size$ ?v0 )(size$ tsa$ ))(and (consistent_F$ ?v0 )(and (= (height_F$ ?v0 )zero$ )(and (sortedByWeight$ ?v0 )(not (= ?v0 nil$ ))))))(optimum$ (huffman$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A$ ))(= (freq$ (uniteTrees$ ?v0 ?v1 )?v2 )(plus$ (freq$ ?v0 ?v2 )(freq$ ?v1 ?v2 )))):named a18 ))
(check-sat )
;(get-unsat-core )
