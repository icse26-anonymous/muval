;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_tree_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun w$ ()Nat$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun times$ (Nat$ Nat$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun fun_app$ (A_a_tree_fun$ A$ )A_tree$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ )A_a_tree_fun$ )
(assert (! (not (ite (member$ a$ (alphabet$ (innerNode$ w$ t_1$ t_2$ )))(ite (member$ b$ (alphabet$ (innerNode$ w$ t_1$ t_2$ )))(= (plus$ (plus$ (cost$ (fun_app$ (swapLeaves$ (innerNode$ w$ t_1$ t_2$ )w_a$ a$ w_b$ )b$ ))(times$ (freq$ (innerNode$ w$ t_1$ t_2$ )a$ )(depth$ (innerNode$ w$ t_1$ t_2$ )a$ )))(times$ (freq$ (innerNode$ w$ t_1$ t_2$ )b$ )(depth$ (innerNode$ w$ t_1$ t_2$ )b$ )))(plus$ (plus$ (cost$ (innerNode$ w$ t_1$ t_2$ ))(times$ w_a$ (depth$ (innerNode$ w$ t_1$ t_2$ )b$ )))(times$ w_b$ (depth$ (innerNode$ w$ t_1$ t_2$ )a$ ))))(= (plus$ (cost$ (fun_app$ (swapLeaves$ (innerNode$ w$ t_1$ t_2$ )w_a$ a$ w_b$ )b$ ))(times$ (freq$ (innerNode$ w$ t_1$ t_2$ )a$ )(depth$ (innerNode$ w$ t_1$ t_2$ )a$ )))(plus$ (cost$ (innerNode$ w$ t_1$ t_2$ ))(times$ w_b$ (depth$ (innerNode$ w$ t_1$ t_2$ )a$ )))))(ite (member$ b$ (alphabet$ (innerNode$ w$ t_1$ t_2$ )))(= (plus$ (cost$ (fun_app$ (swapLeaves$ (innerNode$ w$ t_1$ t_2$ )w_a$ a$ w_b$ )b$ ))(times$ (freq$ (innerNode$ w$ t_1$ t_2$ )b$ )(depth$ (innerNode$ w$ t_1$ t_2$ )b$ )))(plus$ (cost$ (innerNode$ w$ t_1$ t_2$ ))(times$ w_a$ (depth$ (innerNode$ w$ t_1$ t_2$ )b$ ))))(= (cost$ (fun_app$ (swapLeaves$ (innerNode$ w$ t_1$ t_2$ )w_a$ a$ w_b$ )b$ ))(cost$ (innerNode$ w$ t_1$ t_2$ )))))):named a0 ))
(assert (! (not (= a$ b$ )):named a1 ))
(assert (! (member$ b$ (alphabet$ t_2$ )):named a2 ))
(assert (! (not (member$ b$ (alphabet$ t_1$ ))):named a3 ))
(assert (! (not (member$ a$ (alphabet$ t_1$ ))):named a4 ))
(assert (! (not (member$ a$ (alphabet$ t_2$ ))):named a5 ))
(assert (! (consistent$ (innerNode$ w$ t_1$ t_2$ )):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a7 ))
(assert (! (ite (member$ a$ (alphabet$ t_1$ ))(ite (member$ b$ (alphabet$ t_1$ ))(= (plus$ (plus$ (weight$ (fun_app$ (swapLeaves$ t_1$ w_a$ a$ w_b$ )b$ ))(freq$ t_1$ a$ ))(freq$ t_1$ b$ ))(plus$ (plus$ (weight$ t_1$ )w_a$ )w_b$ ))(= (plus$ (weight$ (fun_app$ (swapLeaves$ t_1$ w_a$ a$ w_b$ )b$ ))(freq$ t_1$ a$ ))(plus$ (weight$ t_1$ )w_b$ )))(ite (member$ b$ (alphabet$ t_1$ ))(= (plus$ (weight$ (fun_app$ (swapLeaves$ t_1$ w_a$ a$ w_b$ )b$ ))(freq$ t_1$ b$ ))(plus$ (weight$ t_1$ )w_a$ ))(= (weight$ (fun_app$ (swapLeaves$ t_1$ w_a$ a$ w_b$ )b$ ))(weight$ t_1$ )))):named a8 ))
(assert (! (ite (member$ a$ (alphabet$ t_2$ ))(ite (member$ b$ (alphabet$ t_2$ ))(= (plus$ (plus$ (weight$ (fun_app$ (swapLeaves$ t_2$ w_a$ a$ w_b$ )b$ ))(freq$ t_2$ a$ ))(freq$ t_2$ b$ ))(plus$ (plus$ (weight$ t_2$ )w_a$ )w_b$ ))(= (plus$ (weight$ (fun_app$ (swapLeaves$ t_2$ w_a$ a$ w_b$ )b$ ))(freq$ t_2$ a$ ))(plus$ (weight$ t_2$ )w_b$ )))(ite (member$ b$ (alphabet$ t_2$ ))(= (plus$ (weight$ (fun_app$ (swapLeaves$ t_2$ w_a$ a$ w_b$ )b$ ))(freq$ t_2$ b$ ))(plus$ (weight$ t_2$ )w_a$ ))(= (weight$ (fun_app$ (swapLeaves$ t_2$ w_a$ a$ w_b$ )b$ ))(weight$ t_2$ )))):named a9 ))
(assert (! (=> (and (consistent$ t_1$ )(not (= a$ b$ )))(ite (member$ a$ (alphabet$ t_1$ ))(ite (member$ b$ (alphabet$ t_1$ ))(= (plus$ (plus$ (cost$ (fun_app$ (swapLeaves$ t_1$ w_a$ a$ w_b$ )b$ ))(times$ (freq$ t_1$ a$ )(depth$ t_1$ a$ )))(times$ (freq$ t_1$ b$ )(depth$ t_1$ b$ )))(plus$ (plus$ (cost$ t_1$ )(times$ w_a$ (depth$ t_1$ b$ )))(times$ w_b$ (depth$ t_1$ a$ ))))(= (plus$ (cost$ (fun_app$ (swapLeaves$ t_1$ w_a$ a$ w_b$ )b$ ))(times$ (freq$ t_1$ a$ )(depth$ t_1$ a$ )))(plus$ (cost$ t_1$ )(times$ w_b$ (depth$ t_1$ a$ )))))(ite (member$ b$ (alphabet$ t_1$ ))(= (plus$ (cost$ (fun_app$ (swapLeaves$ t_1$ w_a$ a$ w_b$ )b$ ))(times$ (freq$ t_1$ b$ )(depth$ t_1$ b$ )))(plus$ (cost$ t_1$ )(times$ w_a$ (depth$ t_1$ b$ ))))(= (cost$ (fun_app$ (swapLeaves$ t_1$ w_a$ a$ w_b$ )b$ ))(cost$ t_1$ ))))):named a10 ))
(assert (! (=> (and (consistent$ t_2$ )(not (= a$ b$ )))(ite (member$ a$ (alphabet$ t_2$ ))(ite (member$ b$ (alphabet$ t_2$ ))(= (plus$ (plus$ (cost$ (fun_app$ (swapLeaves$ t_2$ w_a$ a$ w_b$ )b$ ))(times$ (freq$ t_2$ a$ )(depth$ t_2$ a$ )))(times$ (freq$ t_2$ b$ )(depth$ t_2$ b$ )))(plus$ (plus$ (cost$ t_2$ )(times$ w_a$ (depth$ t_2$ b$ )))(times$ w_b$ (depth$ t_2$ a$ ))))(= (plus$ (cost$ (fun_app$ (swapLeaves$ t_2$ w_a$ a$ w_b$ )b$ ))(times$ (freq$ t_2$ a$ )(depth$ t_2$ a$ )))(plus$ (cost$ t_2$ )(times$ w_b$ (depth$ t_2$ a$ )))))(ite (member$ b$ (alphabet$ t_2$ ))(= (plus$ (cost$ (fun_app$ (swapLeaves$ t_2$ w_a$ a$ w_b$ )b$ ))(times$ (freq$ t_2$ b$ )(depth$ t_2$ b$ )))(plus$ (cost$ t_2$ )(times$ w_a$ (depth$ t_2$ b$ ))))(= (cost$ (fun_app$ (swapLeaves$ t_2$ w_a$ a$ w_b$ )b$ ))(cost$ t_2$ ))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 Nat$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (fun_app$ (swapLeaves$ ?v1 ?v2 ?v0 ?v3 )?v0 )?v1 )):pattern ((swapLeaves$ ?v1 ?v2 ?v0 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A$ )(?v5 Nat$ )(?v6 A$ ))(! (= (fun_app$ (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 )?v6 )(innerNode$ ?v0 (fun_app$ (swapLeaves$ ?v1 ?v3 ?v4 ?v5 )?v6 )(fun_app$ (swapLeaves$ ?v2 ?v3 ?v4 ?v5 )?v6 ))):pattern ((fun_app$ (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 )?v6 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ ))(! (= (freq$ (innerNode$ ?v0 ?v1 ?v2 )?v3 )(plus$ (freq$ ?v1 ?v3 )(freq$ ?v2 ?v3 ))):pattern ((freq$ (innerNode$ ?v0 ?v1 ?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 A$ )(?v4 Nat$ )(?v5 Nat$ ))(=> (and (consistent$ ?v0 )(and (not (= ?v1 ?v2 ))(not (= ?v1 ?v3 ))))(= (depth$ (fun_app$ (swapLeaves$ ?v0 ?v4 ?v2 ?v5 )?v3 )?v1 )(depth$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (fun_app$ (swapLeaves$ ?v0 (freq$ ?v0 ?v1 )?v1 (freq$ ?v0 ?v1 ))?v1 )?v0 ))):named a17 ))
(check-sat )
;(get-unsat-core )
