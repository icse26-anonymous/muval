;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_tree_bool_fun$ 0 )
(declare-sort A_tree_list_bool_fun$ 0 )
(declare-sort A_tree_a_tree_list_fun$ 0 )
(declare-sort A_tree_list_list_bool_fun$ 0 )
(declare-sort A_tree_a_tree_list_list_fun$ 0 )
(declare-sort A_tree_list_a_tree_list_fun$ 0 )
(declare-sort A_tree_list_list_list_bool_fun$ 0 )
(declare-sort A_tree_a_tree_list_list_list_fun$ 0 )
(declare-sort A_tree_list_a_tree_list_list_fun$ 0 )
(declare-sort A_tree_list_list_a_tree_list_fun$ 0 )
(declare-sort A_tree_list_a_tree_list_list_list_fun$ 0 )
(declare-sort A_tree_list_list_a_tree_list_list_fun$ 0 )
(declare-sort A_tree_list_list_a_tree_list_list_list_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))(A_tree_list_list$ (nil$a )(cons$a (hd$a A_tree_list$ )(tl$a A_tree_list_list$ )))(A_tree_list_list_list$ (nil$b )(cons$b (hd$b A_tree_list_list$ )(tl$b A_tree_list_list_list$ )))(A_tree_list_list_list_list$ (nil$c )(cons$c (hd$c A_tree_list_list_list$ )(tl$c A_tree_list_list_list_list$ )))))
(declare-fun ts$ ()A_tree_list$ )
(declare-fun uu$ (A_tree$ )A_tree_list_a_tree_list_fun$ )
(declare-fun bind$ (A_tree_list$ A_tree_a_tree_list_list_list_fun$ )A_tree_list_list_list$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun bind$a (A_tree_list_list$ A_tree_list_a_tree_list_list_list_fun$ )A_tree_list_list_list$ )
(declare-fun bind$b (A_tree_list_list_list$ A_tree_list_list_a_tree_list_fun$ )A_tree_list$ )
(declare-fun bind$c (A_tree_list_list_list$ A_tree_list_list_a_tree_list_list_fun$ )A_tree_list_list$ )
(declare-fun bind$d (A_tree_list_list_list$ A_tree_list_list_a_tree_list_list_list_fun$ )A_tree_list_list_list$ )
(declare-fun bind$e (A_tree_list$ A_tree_a_tree_list_list_fun$ )A_tree_list_list$ )
(declare-fun bind$f (A_tree_list_list$ A_tree_list_a_tree_list_fun$ )A_tree_list$ )
(declare-fun bind$g (A_tree_list_list$ A_tree_list_a_tree_list_list_fun$ )A_tree_list_list$ )
(declare-fun bind$h (A_tree_list$ A_tree_a_tree_list_fun$ )A_tree_list$ )
(declare-fun freq_F$ (A_tree_list$ )A_nat_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$ )A_tree_list$ )
(declare-fun huffman$ (A_tree_list$ )A_tree$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun fun_app$a (A_nat_fun$ A$ )Nat$ )
(declare-fun fun_app$b (A_tree_list_list_list_bool_fun$ A_tree_list_list_list$ )Bool )
(declare-fun fun_app$c (A_tree_list_list_bool_fun$ A_tree_list_list$ )Bool )
(declare-fun fun_app$d (A_tree_list_bool_fun$ A_tree_list$ )Bool )
(declare-fun list_ex1$ (A_tree_list_list_bool_fun$ )A_tree_list_list_list_bool_fun$ )
(declare-fun list_ex1$a (A_tree_list_bool_fun$ )A_tree_list_list_bool_fun$ )
(declare-fun list_ex1$b (A_tree_bool_fun$ )A_tree_list_bool_fun$ )
(declare-fun alphabet_F$ (A_tree_list$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun insortTree$ (A_tree$ )A_tree_list_a_tree_list_fun$ )
(declare-fun consistent_F$ (A_tree_list$ )Bool )
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(cons$ ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (= (freq$ (huffman$ ts$ ))(freq_F$ ts$ ))):named a1 ))
(assert (! (not (= ts$ nil$ )):named a2 ))
(assert (! (forall ((?v0 A_tree_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(=> (not (= ?v0 nil$b ))false ))false )):named a3 ))
(assert (! (forall ((?v0 A_tree_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(=> (not (= ?v0 nil$a ))false ))false )):named a4 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a5 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (freq_F$ nil$ )?v0 )zero$ ):pattern ((fun_app$a (freq_F$ nil$ )?v0 )))):named a6 ))
(assert (! (= (consistent_F$ nil$ )true ):named a7 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (huffman$ (cons$ ?v0 nil$ ))?v0 ):pattern ((uu$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(not (= (fun_app$ (insortTree$ ?v0 )?v1 )nil$ ))):named a9 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (consistent_F$ ?v0 )(not (= ?v0 nil$ )))(consistent$ (huffman$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (not (= ?v0 nil$ ))(= (alphabet$ (huffman$ ?v0 ))(alphabet_F$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A$ ))(= (fun_app$a (freq_F$ (fun_app$ (insortTree$ ?v0 )?v1 ))?v2 )(plus$ (fun_app$a (freq$ ?v0 )?v2 )(fun_app$a (freq_F$ ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_tree_a_tree_list_list_list_fun$ ))(! (= (bind$ nil$ ?v0 )nil$b ):pattern ((bind$ nil$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_tree_list_a_tree_list_list_list_fun$ ))(! (= (bind$a nil$a ?v0 )nil$b ):pattern ((bind$a nil$a ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_tree_list_list_a_tree_list_fun$ ))(! (= (bind$b nil$b ?v0 )nil$ ):pattern ((bind$b nil$b ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_tree_list_list_a_tree_list_list_fun$ ))(! (= (bind$c nil$b ?v0 )nil$a ):pattern ((bind$c nil$b ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_tree_list_list_a_tree_list_list_list_fun$ ))(! (= (bind$d nil$b ?v0 )nil$b ):pattern ((bind$d nil$b ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_tree_a_tree_list_list_fun$ ))(! (= (bind$e nil$ ?v0 )nil$a ):pattern ((bind$e nil$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_tree_list_a_tree_list_fun$ ))(! (= (bind$f nil$a ?v0 )nil$ ):pattern ((bind$f nil$a ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_tree_list_a_tree_list_list_fun$ ))(! (= (bind$g nil$a ?v0 )nil$a ):pattern ((bind$g nil$a ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_tree_a_tree_list_fun$ ))(! (= (bind$h nil$ ?v0 )nil$ ):pattern ((bind$h nil$ ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_tree_list_list_bool_fun$ ))(! (= (fun_app$b (list_ex1$ ?v0 )nil$b )false ):pattern ((list_ex1$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 A_tree_list_bool_fun$ ))(! (= (fun_app$c (list_ex1$a ?v0 )nil$a )false ):pattern ((list_ex1$a ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_tree_bool_fun$ ))(! (= (fun_app$d (list_ex1$b ?v0 )nil$ )false ):pattern ((list_ex1$b ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (forall ((?v1 A_tree$ ))(=> (= ?v0 (cons$ ?v1 nil$ ))false ))(and (forall ((?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))false ))(=> (= ?v0 nil$ )false )))false )):named a25 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A$ ))(! (= (fun_app$a (freq_F$ (cons$ ?v0 ?v1 ))?v2 )(plus$ (fun_app$a (freq$ ?v0 )?v2 )(fun_app$a (freq_F$ ?v1 )?v2 ))):pattern ((fun_app$a (freq_F$ (cons$ ?v0 ?v1 ))?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_tree_list_list$ )(?v1 A_tree_list_list_list$ )(?v2 A_tree_list_list$ )(?v3 A_tree_list_list_list$ ))(= (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a28 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 A_tree_list_list$ )(?v2 A_tree_list$ )(?v3 A_tree_list_list$ ))(= (= (cons$a ?v0 ?v1 )(cons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a29 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (fun_app$a (freq$ ?v1 )?v0 )zero$ )):pattern ((fun_app$a (freq$ ?v1 )?v0 )))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_list$ ))(! (=> (not (member$ ?v0 (alphabet_F$ ?v1 )))(= (fun_app$a (freq_F$ ?v1 )?v0 )zero$ )):pattern ((fun_app$a (freq_F$ ?v1 )?v0 )))):named a31 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(= (consistent_F$ (fun_app$ (insortTree$ ?v0 )?v1 ))(consistent_F$ (cons$ ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_tree_list_list_list_list$ ))(=> (and (=> (= ?v0 nil$c )false )(and (forall ((?v1 A_tree_list_list_list_list$ ))(=> (= ?v0 (cons$c nil$b ?v1 ))false ))(forall ((?v1 A_tree_list_list$ )(?v2 A_tree_list_list_list$ )(?v3 A_tree_list_list_list_list$ ))(=> (= ?v0 (cons$c (cons$b ?v1 ?v2 )?v3 ))false ))))false )):named a33 ))
(assert (! (forall ((?v0 A_tree_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 A_tree_list_list_list$ ))(=> (= ?v0 (cons$b nil$a ?v1 ))false ))(forall ((?v1 A_tree_list$ )(?v2 A_tree_list_list$ )(?v3 A_tree_list_list_list$ ))(=> (= ?v0 (cons$b (cons$a ?v1 ?v2 )?v3 ))false ))))false )):named a34 ))
(assert (! (forall ((?v0 A_tree_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(and (forall ((?v1 A_tree_list_list$ ))(=> (= ?v0 (cons$a nil$ ?v1 ))false ))(forall ((?v1 A_tree$ )(?v2 A_tree_list$ )(?v3 A_tree_list_list$ ))(=> (= ?v0 (cons$a (cons$ ?v1 ?v2 )?v3 ))false ))))false )):named a35 ))
(check-sat )
;(get-unsat-core )
