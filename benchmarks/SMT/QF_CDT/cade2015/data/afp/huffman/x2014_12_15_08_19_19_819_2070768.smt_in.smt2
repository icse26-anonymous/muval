;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))))
(declare-fun a$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun w$ ()Nat$ )
(declare-fun w$a ()Nat$ )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun finite$ (A_set$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun huffman$ (A_tree_list$ )A_tree$ )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun alphabet_F$ (A_tree_list$ )A_set$ )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(assert (! (not (= (swapLeaves$ t$ w$ a$ w$a a$ )t$ )):named a0 ))
(assert (! (not (member$ a$ (alphabet$ t$ ))):named a1 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (sibling$ ?v1 ?v0 )?v0 )):pattern ((sibling$ ?v1 ?v0 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ )(?v5 A$ ))(! (= (swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )(ite (= ?v1 ?v3 )(leaf$ ?v4 ?v5 )(ite (= ?v1 ?v5 )(leaf$ ?v2 ?v3 )(leaf$ ?v0 ?v1 )))):pattern ((swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A$ )(?v5 Nat$ )(?v6 A$ ))(! (= (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 ?v6 )(innerNode$ ?v0 (swapLeaves$ ?v1 ?v3 ?v4 ?v5 ?v6 )(swapLeaves$ ?v2 ?v3 ?v4 ?v5 ?v6 ))):pattern ((swapLeaves$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 ?v6 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (alphabet$ ?v1 ))(member$ (sibling$ ?v1 ?v0 )(alphabet$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (not (= (sibling$ ?v0 ?v1 )?v1 ))(member$ (sibling$ ?v0 ?v1 )(alphabet$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_tree$ ))(finite$ (alphabet$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (alphabet$ (uniteTrees$ ?v0 ?v1 ))(sup$ (alphabet$ ?v0 )(alphabet$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (freq$ ?v1 ?v0 )zero$ )):pattern ((freq$ ?v1 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ ))(! (= (sibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3 )?v4 )?v5 )(ite (member$ ?v5 (alphabet$ (innerNode$ ?v1 ?v2 ?v3 )))(sibling$ (innerNode$ ?v1 ?v2 ?v3 )?v5 )(ite (member$ ?v5 (alphabet$ ?v4 ))(sibling$ ?v4 ?v5 )?v5 ))):pattern ((sibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3 )?v4 )?v5 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ ))(! (= (sibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4 ))?v5 )(ite (member$ ?v5 (alphabet$ ?v1 ))(sibling$ ?v1 ?v5 )(ite (member$ ?v5 (alphabet$ (innerNode$ ?v2 ?v3 ?v4 )))(sibling$ (innerNode$ ?v2 ?v3 ?v4 )?v5 )?v5 ))):pattern ((sibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4 ))?v5 )))):named a12 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (not (= ?v0 nil$ ))(= (alphabet$ (huffman$ ?v0 ))(alphabet_F$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (alphabet$ (innerNode$ ?v0 ?v1 ?v2 ))(sup$ (alphabet$ ?v1 )(alphabet$ ?v2 ))):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ )(?v5 A$ ))(! (= (sibling$ (innerNode$ ?v0 (leaf$ ?v1 ?v2 )(leaf$ ?v3 ?v4 ))?v5 )(ite (= ?v5 ?v2 )?v4 (ite (= ?v5 ?v4 )?v2 ?v5 ))):pattern ((sibling$ (innerNode$ ?v0 (leaf$ ?v1 ?v2 )(leaf$ ?v3 ?v4 ))?v5 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(! (= (sibling$ (leaf$ ?v0 ?v1 )?v2 )?v2 ):pattern ((sibling$ (leaf$ ?v0 ?v1 )?v2 )))):named a18 ))
(check-sat )
;(get-unsat-core )
