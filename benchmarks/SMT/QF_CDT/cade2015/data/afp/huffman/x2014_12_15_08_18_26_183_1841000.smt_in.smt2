;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))(A_tree_tree$ (leaf$a (selecte$ Nat$ )(selectf$ A_tree$ ))(innerNode$a (selectg$ Nat$ )(selecth$ A_tree_tree$ )(selecti$ A_tree_tree$ )))(A_tree_tree_list$ (nil$a )(cons$a (hd$a A_tree_tree$ )(tl$a A_tree_tree_list$ )))(A_list$ (nil$b )(cons$b (hd$b A$ )(tl$b A_list$ )))))
(declare-fun a$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun set$ (A_tree_list$ )A_tree_set$ )
(declare-fun tsa$ ()A_tree_list$ )
(declare-fun x21$ ()Nat$ )
(declare-fun x22$ ()A_tree$ )
(declare-fun x23$ ()A_tree$ )
(declare-fun set$a (A_list$ )A_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun freq_F$ (A_tree_list$ A$ )Nat$ )
(declare-fun member$ (A_tree$ A_tree_set$ )Bool )
(declare-fun freq_F$a (A_tree_tree_list$ A_tree$ )Nat$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun height_F$ (A_tree_list$ )Nat$ )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(declare-fun alphabet_F$ (A_tree_list$ )A_set$ )
(declare-fun alphabet_F$a (A_tree_tree_list$ )A_tree_set$ )
(declare-fun consistent_F$ (A_tree_list$ )Bool )
(assert (! (not (member$ (leaf$ (freq_F$ (cons$ t$ tsa$ )a$ )a$ )(set$ (cons$ t$ tsa$ )))):named a0 ))
(assert (! (= t$ (innerNode$ x21$ x22$ x23$ )):named a1 ))
(assert (! (consistent_F$ (cons$ t$ tsa$ )):named a2 ))
(assert (! (= (height_F$ (cons$ t$ tsa$ ))zero$ ):named a3 ))
(assert (! (member$a a$ (alphabet_F$ (cons$ t$ tsa$ ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (=> (and (consistent_F$ tsa$ )(and (= (height_F$ tsa$ )zero$ )(member$a a$ (alphabet_F$ tsa$ ))))(member$ (leaf$ (freq_F$ tsa$ a$ )a$ )(set$ tsa$ ))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree_list$ ))(! (=> (not (member$ ?v0 (alphabet_F$a ?v1 )))(= (freq_F$a ?v1 ?v0 )zero$ )):pattern ((freq_F$a ?v1 ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_list$ ))(! (=> (not (member$a ?v0 (alphabet_F$ ?v1 )))(= (freq_F$ ?v1 ?v0 )zero$ )):pattern ((freq_F$ ?v1 ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a11 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (forall ((?v1 Nat$ )(?v2 A$ ))(=> (= ?v0 (leaf$ ?v1 ?v2 ))false ))(forall ((?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (innerNode$ ?v1 ?v2 ?v3 ))false )))false )):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ ))(not (= (leaf$ ?v0 ?v1 )(innerNode$ ?v2 ?v3 ?v4 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_list$ ))(=> (member$a ?v0 (set$a (cons$b ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$a ?v0 (set$a ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree_list$ ))(=> (member$ ?v0 (set$ (cons$ ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$ ?v0 (set$ ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(=> (and (member$a ?v0 (set$a ?v1 ))(and (forall ((?v2 A_list$ ))(=> (= ?v1 (cons$b ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_list$ ))(=> (and (= ?v1 (cons$b ?v2 ?v3 ))(member$a ?v0 (set$a ?v3 )))false ))))false )):named a16 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(=> (and (member$ ?v0 (set$ ?v1 ))(and (forall ((?v2 A_tree_list$ ))(=> (= ?v1 (cons$ ?v0 ?v2 ))false ))(forall ((?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (and (= ?v1 (cons$ ?v2 ?v3 ))(member$ ?v0 (set$ ?v3 )))false ))))false )):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ ))(=> (member$a ?v0 (set$a ?v1 ))(member$a ?v0 (set$a (cons$b ?v2 ?v1 ))))):named a18 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A_tree$ ))(=> (member$ ?v0 (set$ ?v1 ))(member$ ?v0 (set$ (cons$ ?v2 ?v1 ))))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(member$a ?v0 (set$a (cons$b ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(member$ ?v0 (set$ (cons$ ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 Nat$ )(?v2 A$ ))(! (= (pred_tree$ ?v0 (leaf$ ?v1 ?v2 ))(fun_app$ ?v0 ?v2 )):pattern ((pred_tree$ ?v0 (leaf$ ?v1 ?v2 ))))):named a22 ))
(check-sat )
;(get-unsat-core )
