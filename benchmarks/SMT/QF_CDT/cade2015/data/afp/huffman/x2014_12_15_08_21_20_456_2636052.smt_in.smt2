;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))))
(declare-fun u$ ()A_tree$ )
(declare-fun ta$ ()A_tree$ )
(declare-fun us$ ()A_tree_list$ )
(declare-fun set$ (A_tree_list$ )A_tree_set$ )
(declare-fun member$ (A_tree$ A_tree_set$ )Bool )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun less_eq$a (A_tree_set$ A_tree_set$ )Bool )
(declare-fun sortedByWeight$ (A_tree_list$ )Bool )
(assert (! (not (forall ((?v0 A_tree$ ))(=> (member$ ?v0 (set$ (cons$ u$ us$ )))(less_eq$ (weight$ ta$ )(weight$ ?v0 ))))):named a0 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (sortedByWeight$ (cons$ ?v0 us$ ))(forall ((?v1 A_tree$ ))(=> (member$ ?v1 (set$ us$ ))(less_eq$ (weight$ ?v0 )(weight$ ?v1 )))))):named a1 ))
(assert (! (sortedByWeight$ (cons$ ta$ (cons$ u$ us$ ))):named a2 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree_list$ ))(! (= (sortedByWeight$ (cons$ ?v0 (cons$ ?v1 ?v2 )))(and (less_eq$ (weight$ ?v0 )(weight$ ?v1 ))(sortedByWeight$ (cons$ ?v1 ?v2 )))):pattern ((cons$ ?v0 (cons$ ?v1 ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (not (sortedByWeight$ ?v0 ))(forall ((?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (and (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))(not (and (less_eq$ (weight$ ?v1 )(weight$ ?v2 ))(sortedByWeight$ (cons$ ?v2 ?v3 )))))false )))false )):named a4 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_tree_set$ ))(less_eq$a ?v0 ?v0 )):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a7 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(=> (sortedByWeight$ (cons$ ?v0 ?v1 ))(sortedByWeight$ ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree_list$ ))(=> (member$ ?v0 (set$ (cons$ ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$ ?v0 (set$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(=> (and (member$ ?v0 (set$ ?v1 ))(and (forall ((?v2 A_tree_list$ ))(=> (= ?v1 (cons$ ?v0 ?v2 ))false ))(forall ((?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (and (= ?v1 (cons$ ?v2 ?v3 ))(member$ ?v0 (set$ ?v3 )))false ))))false )):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A_tree$ ))(=> (member$ ?v0 (set$ ?v1 ))(member$ ?v0 (set$ (cons$ ?v2 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(member$ ?v0 (set$ (cons$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 A_tree_set$ ))(= (less_eq$a (set$ ?v0 )?v1 )(forall ((?v2 A_tree$ ))(=> (member$ ?v2 (set$ ?v0 ))(member$ ?v2 ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 A_tree$ ))(less_eq$a (set$ ?v0 )(set$ (cons$ ?v1 ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_tree_set$ ))(less_eq$a ?v0 ?v0 )):named a18 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a19 ))
(check-sat )
;(get-unsat-core )
