;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun w$ ()Nat$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (not (= (cost$ (innerNode$ w$ t_1$ t_2$ ))(plus$ (plus$ (plus$ (weight$ t_1$ )(cost$ t_1$ ))(weight$ t_2$ ))(cost$ t_2$ )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a1 ))
(assert (! (consistent$ (innerNode$ w$ t_1$ t_2$ )):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (cost$ (innerNode$ ?v0 ?v1 ?v2 ))(plus$ (plus$ (plus$ (weight$ ?v1 )(cost$ ?v1 ))(weight$ ?v2 ))(cost$ ?v2 ))):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (weight$ (innerNode$ ?v0 ?v1 ?v2 ))(plus$ (weight$ ?v1 )(weight$ ?v2 ))):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ ))(! (= (freq$ (innerNode$ ?v0 ?v1 ?v2 )?v3 )(plus$ (freq$ ?v1 ?v3 )(freq$ ?v2 ?v3 ))):pattern ((freq$ (innerNode$ ?v0 ?v1 ?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (pred_tree$ ?v0 (innerNode$ ?v1 ?v2 ?v3 ))(and (pred_tree$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 ))):pattern ((pred_tree$ ?v0 (innerNode$ ?v1 ?v2 ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )(plus$ ?v2 ?v3 ))(plus$ (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ (plus$ ?v0 ?v2 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ ?v0 (plus$ ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ ?v0 (plus$ ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ ?v0 (plus$ ?v1 ?v2 ))(plus$ (plus$ ?v0 ?v1 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 ?v1 )(= ?v2 ?v3 ))(= (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a16 ))
(check-sat )
;(get-unsat-core )
