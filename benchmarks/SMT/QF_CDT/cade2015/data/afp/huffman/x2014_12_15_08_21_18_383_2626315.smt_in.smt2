;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-sort A_tree_list_set$ 0 )
(declare-sort A_tree_list_list_set$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))(A_tree_list_list$ (nil$a )(cons$a (hd$a A_tree_list$ )(tl$a A_tree_list_list$ )))(A_tree_list_list_list$ (nil$b )(cons$b (hd$b A_tree_list_list$ )(tl$b A_tree_list_list_list$ )))(A_tree_list_list_list_list$ (nil$c )(cons$c (hd$c A_tree_list_list_list$ )(tl$c A_tree_list_list_list_list$ )))))
(declare-fun t$ ()A_tree$ )
(declare-fun ts$ ()A_tree_list$ )
(declare-fun set$ (A_tree_list$ )A_tree_set$ )
(declare-fun set$a (A_tree_list_list_list$ )A_tree_list_list_set$ )
(declare-fun set$b (A_tree_list_list$ )A_tree_list_set$ )
(declare-fun member$ (A_tree$ A_tree_set$ )Bool )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun member$a (A_tree_list_list$ A_tree_list_list_set$ )Bool )
(declare-fun member$b (A_tree_list$ A_tree_list_set$ )Bool )
(declare-fun sortedByWeight$ (A_tree_list$ )Bool )
(assert (! (not (forall ((?v0 A_tree$ ))(=> (member$ ?v0 (set$ ts$ ))(less_eq$ (weight$ t$ )(weight$ ?v0 ))))):named a0 ))
(assert (! (sortedByWeight$ (cons$ t$ ts$ )):named a1 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree_list$ ))(! (= (sortedByWeight$ (cons$ ?v0 (cons$ ?v1 ?v2 )))(and (less_eq$ (weight$ ?v0 )(weight$ ?v1 ))(sortedByWeight$ (cons$ ?v1 ?v2 )))):pattern ((cons$ ?v0 (cons$ ?v1 ?v2 ))))):named a2 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (not (sortedByWeight$ ?v0 ))(forall ((?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (and (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))(not (and (less_eq$ (weight$ ?v1 )(weight$ ?v2 ))(sortedByWeight$ (cons$ ?v2 ?v3 )))))false )))false )):named a3 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(=> (sortedByWeight$ (cons$ ?v0 ?v1 ))(sortedByWeight$ ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_tree_list_list$ )(?v1 A_tree_list_list_list$ )(?v2 A_tree_list_list$ )(?v3 A_tree_list_list_list$ ))(= (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 A_tree_list_list$ )(?v2 A_tree_list$ )(?v3 A_tree_list_list$ ))(= (= (cons$a ?v0 ?v1 )(cons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a8 ))
(assert (! (forall ((?v0 A_tree_list_list$ )(?v1 A_tree_list_list$ )(?v2 A_tree_list_list_list$ ))(=> (member$a ?v0 (set$a (cons$b ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$a ?v0 (set$a ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 A_tree_list$ )(?v2 A_tree_list_list$ ))(=> (member$b ?v0 (set$b (cons$a ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$b ?v0 (set$b ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree_list$ ))(=> (member$ ?v0 (set$ (cons$ ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$ ?v0 (set$ ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A_tree_list_list$ )(?v1 A_tree_list_list_list$ ))(=> (and (member$a ?v0 (set$a ?v1 ))(and (forall ((?v2 A_tree_list_list_list$ ))(=> (= ?v1 (cons$b ?v0 ?v2 ))false ))(forall ((?v2 A_tree_list_list$ )(?v3 A_tree_list_list_list$ ))(=> (and (= ?v1 (cons$b ?v2 ?v3 ))(member$a ?v0 (set$a ?v3 )))false ))))false )):named a12 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 A_tree_list_list$ ))(=> (and (member$b ?v0 (set$b ?v1 ))(and (forall ((?v2 A_tree_list_list$ ))(=> (= ?v1 (cons$a ?v0 ?v2 ))false ))(forall ((?v2 A_tree_list$ )(?v3 A_tree_list_list$ ))(=> (and (= ?v1 (cons$a ?v2 ?v3 ))(member$b ?v0 (set$b ?v3 )))false ))))false )):named a13 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(=> (and (member$ ?v0 (set$ ?v1 ))(and (forall ((?v2 A_tree_list$ ))(=> (= ?v1 (cons$ ?v0 ?v2 ))false ))(forall ((?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (and (= ?v1 (cons$ ?v2 ?v3 ))(member$ ?v0 (set$ ?v3 )))false ))))false )):named a14 ))
(assert (! (forall ((?v0 A_tree_list_list$ )(?v1 A_tree_list_list_list$ )(?v2 A_tree_list_list$ ))(=> (member$a ?v0 (set$a ?v1 ))(member$a ?v0 (set$a (cons$b ?v2 ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 A_tree_list_list$ )(?v2 A_tree_list$ ))(=> (member$b ?v0 (set$b ?v1 ))(member$b ?v0 (set$b (cons$a ?v2 ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A_tree$ ))(=> (member$ ?v0 (set$ ?v1 ))(member$ ?v0 (set$ (cons$ ?v2 ?v1 ))))):named a17 ))
(assert (! (forall ((?v0 A_tree_list_list$ )(?v1 A_tree_list_list_list$ ))(member$a ?v0 (set$a (cons$b ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 A_tree_list_list$ ))(member$b ?v0 (set$b (cons$a ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(member$ ?v0 (set$ (cons$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 Bool ))(=> (and (= (sortedByWeight$ ?v0 )?v1 )(and (=> (and (= ?v0 nil$ )?v1 )false )(and (forall ((?v2 A_tree$ ))(=> (and (= ?v0 (cons$ ?v2 nil$ ))?v1 )false ))(forall ((?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree_list$ ))(=> (and (= ?v0 (cons$ ?v2 (cons$ ?v3 ?v4 )))(= ?v1 (and (less_eq$ (weight$ ?v2 )(weight$ ?v3 ))(sortedByWeight$ (cons$ ?v3 ?v4 )))))false )))))false )):named a21 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (sortedByWeight$ ?v0 )(and (=> (= ?v0 nil$ )false )(and (forall ((?v1 A_tree$ ))(=> (= ?v0 (cons$ ?v1 nil$ ))false ))(forall ((?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (and (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))(and (less_eq$ (weight$ ?v1 )(weight$ ?v2 ))(sortedByWeight$ (cons$ ?v2 ?v3 ))))false )))))false )):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a25 ))
(assert (! (forall ((?v0 A_tree_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(=> (not (= ?v0 nil$b ))false ))false )):named a26 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a27 ))
(assert (! (forall ((?v0 A_tree_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(=> (not (= ?v0 nil$a ))false ))false )):named a28 ))
(assert (! (forall ((?v0 A_tree_list_list_list_list$ ))(=> (and (=> (= ?v0 nil$c )false )(and (forall ((?v1 A_tree_list_list_list_list$ ))(=> (= ?v0 (cons$c nil$b ?v1 ))false ))(forall ((?v1 A_tree_list_list$ )(?v2 A_tree_list_list_list$ )(?v3 A_tree_list_list_list_list$ ))(=> (= ?v0 (cons$c (cons$b ?v1 ?v2 )?v3 ))false ))))false )):named a29 ))
(assert (! (forall ((?v0 A_tree_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 A_tree_list_list_list$ ))(=> (= ?v0 (cons$b nil$a ?v1 ))false ))(forall ((?v1 A_tree_list$ )(?v2 A_tree_list_list$ )(?v3 A_tree_list_list_list$ ))(=> (= ?v0 (cons$b (cons$a ?v1 ?v2 )?v3 ))false ))))false )):named a30 ))
(assert (! (forall ((?v0 A_tree_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(and (forall ((?v1 A_tree_list_list$ ))(=> (= ?v0 (cons$a nil$ ?v1 ))false ))(forall ((?v1 A_tree$ )(?v2 A_tree_list$ )(?v3 A_tree_list_list$ ))(=> (= ?v0 (cons$a (cons$ ?v1 ?v2 )?v3 ))false ))))false )):named a31 ))
(check-sat )
;(get-unsat-core )
