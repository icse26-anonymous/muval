;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))(Nibble$ (nibble0$ )(nibble1$ )(nibble2$ )(nibble3$ )(nibble4$ )(nibble5$ )(nibble6$ )(nibble7$ )(nibble8$ )(nibble9$ )(nibbleA$ )(nibbleB$ )(nibbleC$ )(nibbleD$ )(nibbleE$ )(nibbleF$ ))(Char$ (char$ (selecte$ Nibble$ )(selectf$ Nibble$ )))))
(declare-fun t$ ()A_tree$ )
(declare-fun ts$ ()A_tree_list$ )
(declare-fun max$ (Nat$ Nat$ )Nat$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun height_F$ (A_tree_list$ )Nat$ )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun insortTree$ (A_tree$ A_tree_list$ )A_tree_list$ )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun sortedByWeight$ (A_tree_list$ )Bool )
(assert (! (not (sortedByWeight$ (insortTree$ t$ ts$ ))):named a0 ))
(assert (! (sortedByWeight$ ts$ ):named a1 ))
(assert (! (= (height$ t$ )zero$ ):named a2 ))
(assert (! (= (height_F$ ts$ )zero$ ):named a3 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(= (height_F$ (insortTree$ ?v0 ?v1 ))(max$ (height$ ?v0 )(height_F$ ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_tree$ ))(! (=> (= (height$ ?v0 )zero$ )(= (cost$ ?v0 )zero$ )):pattern ((cost$ ?v0 )))):named a5 ))
(assert (! (= zero$ zero$ ):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(! (=> (= (height$ ?v0 )zero$ )(= (sibling$ ?v0 ?v1 )?v1 )):pattern ((sibling$ ?v0 ?v1 )))):named a9 ))
(assert (! (= (height_F$ nil$ )zero$ ):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ ))(= (height$ (swapLeaves$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(height$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (height$ (leaf$ ?v0 ?v1 ))zero$ ):pattern ((leaf$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(= (max$ zero$ ?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(= (max$ ?v0 zero$ )?v0 )):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ )(?v5 A$ ))(! (= (swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )(ite (= ?v1 ?v3 )(leaf$ ?v4 ?v5 )(ite (= ?v1 ?v5 )(leaf$ ?v2 ?v3 )(leaf$ ?v0 ?v1 )))):pattern ((swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(! (= (sibling$ (leaf$ ?v0 ?v1 )?v2 )?v2 ):pattern ((sibling$ (leaf$ ?v0 ?v1 )?v2 )))):named a18 ))
(check-sat )
;(get-unsat-core )
