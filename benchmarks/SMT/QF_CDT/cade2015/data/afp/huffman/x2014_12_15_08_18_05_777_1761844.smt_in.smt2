;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))))
(declare-fun t$ ()A_tree$ )
(declare-fun bot$ ()A_set$ )
(declare-fun inf$ (A_set$ A_set$ )A_set$ )
(declare-fun max$ (Nat$ Nat$ )Nat$ )
(declare-fun one$ ()Nat$ )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun finite$ (A_set$ )Bool )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun height_F$ (A_tree_list$ )Nat$ )
(declare-fun alphabet_F$ (A_tree_list$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun consistent_F$ (A_tree_list$ )Bool )
(assert (! (not (exists ((?v0 A$ ))(and (member$ ?v0 (alphabet$ t$ ))(= (depth$ t$ ?v0 )(height$ t$ ))))):named a0 ))
(assert (! (consistent$ t$ ):named a1 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(less_eq$ (depth$ ?v0 ?v1 )(height$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$ (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_tree$ ))(finite$ (alphabet$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (consistent$ (innerNode$ ?v0 ?v1 ?v2 ))(and (consistent$ ?v1 )(and (consistent$ ?v2 )(= (inf$ (alphabet$ ?v1 )(alphabet$ ?v2 ))bot$ )))):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(! (= (depth$ (leaf$ ?v0 ?v1 )?v2 )zero$ ):pattern ((depth$ (leaf$ ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (height$ (leaf$ ?v0 ?v1 ))zero$ ):pattern ((leaf$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (alphabet$ (innerNode$ ?v0 ?v1 ?v2 ))(sup$ (alphabet$ ?v1 )(alphabet$ ?v2 ))):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(! (= (consistent_F$ (cons$ ?v0 ?v1 ))(and (consistent$ ?v0 )(and (consistent_F$ ?v1 )(= (inf$ (alphabet$ ?v0 )(alphabet_F$ ?v1 ))bot$ )))):pattern ((cons$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ ))(! (= (depth$ (innerNode$ ?v0 ?v1 ?v2 )?v3 )(ite (member$ ?v3 (alphabet$ ?v1 ))(plus$ (depth$ ?v1 ?v3 )one$ )(ite (member$ ?v3 (alphabet$ ?v2 ))(plus$ (depth$ ?v2 ?v3 )one$ )zero$ ))):pattern ((depth$ (innerNode$ ?v0 ?v1 ?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(! (= (height_F$ (cons$ ?v0 ?v1 ))(max$ (height$ ?v0 )(height_F$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(! (= (alphabet_F$ (cons$ ?v0 ?v1 ))(sup$ (alphabet$ ?v0 )(alphabet_F$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (alphabet$ (leaf$ ?v0 ?v1 ))(insert$ ?v1 bot$ )):pattern ((leaf$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (height$ (innerNode$ ?v0 ?v1 ?v2 ))(plus$ (max$ (height$ ?v1 )(height$ ?v2 ))one$ )):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (forall ((?v1 Nat$ )(?v2 A$ ))(=> (= ?v0 (leaf$ ?v1 ?v2 ))false ))(forall ((?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (innerNode$ ?v1 ?v2 ?v3 ))false )))false )):named a18 ))
(check-sat )
;(get-unsat-core )
