;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_set_a_set_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun a$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun bot$ ()A_set$ )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun minus$ (A_set$ )A_set_a_set_fun$ )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_set_a_set_fun$ A_set$ )A_set$ )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun mergeSibling$ (A_tree$ A$ )A_tree$ )
(assert (! (not (= (alphabet$ (mergeSibling$ t$ a$ ))(sup$ (fun_app$ (minus$ (alphabet$ t$ ))(insert$ (sibling$ t$ a$ )bot$ ))(insert$ a$ bot$ )))):named a0 ))
(assert (! (consistent$ t$ ):named a1 ))
(assert (! (member$ a$ (alphabet$ t$ )):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (sibling$ ?v1 ?v0 )?v0 )):pattern ((sibling$ ?v1 ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (sibling$ ?v0 (sibling$ ?v0 ?v1 ))?v1 ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (mergeSibling$ ?v1 ?v0 )?v1 )):pattern ((mergeSibling$ ?v1 ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (alphabet$ ?v1 ))(member$ (sibling$ ?v1 ?v0 )(alphabet$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (not (= (sibling$ ?v0 ?v1 )?v1 ))(member$ (sibling$ ?v0 ?v1 )(alphabet$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (and (consistent$ ?v0 )(= (sibling$ ?v0 ?v1 )?v2 ))(= (sibling$ ?v0 ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(= (insert$ ?v0 (fun_app$ (minus$ ?v1 )(insert$ ?v0 bot$ )))(insert$ ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (sup$ (fun_app$ (minus$ ?v0 )?v1 )?v1 )(sup$ ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (sup$ ?v0 (fun_app$ (minus$ ?v1 )?v0 ))(sup$ ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (member$ ?v0 ?v1 )(= (fun_app$ (minus$ (insert$ ?v0 ?v2 ))?v1 )(fun_app$ (minus$ ?v2 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (not (member$ ?v0 ?v1 ))(= (fun_app$ (minus$ ?v1 )(insert$ ?v0 ?v2 ))(fun_app$ (minus$ ?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (sup$ (insert$ ?v0 ?v1 )?v2 )(insert$ ?v0 (sup$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ )(?v2 A_set$ ))(= (sup$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (sup$ ?v0 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_set$ ))(= (fun_app$ (minus$ ?v0 )bot$ )?v0 )):named a17 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$ (minus$ ?v0 )?v0 )bot$ ):pattern ((minus$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_set$ ))(= (fun_app$ (minus$ bot$ )?v0 )bot$ )):named a19 ))
(check-sat )
;(get-unsat-core )
