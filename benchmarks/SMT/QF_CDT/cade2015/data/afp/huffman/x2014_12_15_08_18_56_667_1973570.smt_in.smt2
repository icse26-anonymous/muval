;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))))
(declare-fun a$ ()A$ )
(declare-fun w$ ()Nat$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (not (= (sibling$ (innerNode$ w$ t_1$ t_2$ )a$ )(sibling$ t_2$ a$ ))):named a0 ))
(assert (! (fun_app$ (less$ zero$ )(height$ t_1$ )):named a1 ))
(assert (! (not (member$ a$ (alphabet$ t_1$ ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (sibling$ ?v1 ?v0 )?v0 )):pattern ((sibling$ ?v1 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(! (=> (= (height$ ?v0 )zero$ )(= (sibling$ ?v0 ?v1 )?v1 )):pattern ((sibling$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ )(?v3 Nat$ ))(! (=> (and (fun_app$ (less$ zero$ )(height$ ?v0 ))(member$ ?v1 (alphabet$ ?v2 )))(= (sibling$ (innerNode$ ?v3 ?v2 ?v0 )?v1 )(sibling$ ?v2 ?v1 ))):pattern ((sibling$ (innerNode$ ?v3 ?v2 ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 Nat$ )(?v3 A_tree$ ))(! (=> (and (fun_app$ (less$ zero$ )(height$ ?v0 ))(member$ ?v1 (alphabet$ ?v0 )))(= (sibling$ (innerNode$ ?v2 ?v0 ?v3 )?v1 )(sibling$ ?v0 ?v1 ))):pattern ((sibling$ (innerNode$ ?v2 ?v0 ?v3 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ ))(! (= (sibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3 )?v4 )?v5 )(ite (member$ ?v5 (alphabet$ (innerNode$ ?v1 ?v2 ?v3 )))(sibling$ (innerNode$ ?v1 ?v2 ?v3 )?v5 )(ite (member$ ?v5 (alphabet$ ?v4 ))(sibling$ ?v4 ?v5 )?v5 ))):pattern ((sibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3 )?v4 )?v5 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ ))(! (= (sibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4 ))?v5 )(ite (member$ ?v5 (alphabet$ ?v1 ))(sibling$ ?v1 ?v5 )(ite (member$ ?v5 (alphabet$ (innerNode$ ?v2 ?v3 ?v4 )))(sibling$ (innerNode$ ?v2 ?v3 ?v4 )?v5 )?v5 ))):pattern ((sibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4 ))?v5 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (= ?v0 zero$ ))(fun_app$ (less$ zero$ )?v0 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (fun_app$ (less$ zero$ )?v0 ))(= ?v0 zero$ ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (less$ ?v0 )zero$ )false ):pattern ((less$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(=> (and (fun_app$ (less$ zero$ )(height$ ?v0 ))(and (consistent$ ?v0 )(= (alphabet$ ?v0 )(alphabet$ ?v1 ))))(fun_app$ (less$ zero$ )(height$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(=> (=> (= ?v0 zero$ )false )(fun_app$ (less$ zero$ )?v0 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )?v1 )(not (= ?v1 zero$ )))):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$ (less$ ?v0 )zero$ )false )):named a17 ))
(check-sat )
;(get-unsat-core )
