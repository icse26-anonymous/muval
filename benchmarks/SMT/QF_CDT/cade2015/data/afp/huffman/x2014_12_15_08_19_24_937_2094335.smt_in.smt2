;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_tree_fun$ 0 )
(declare-datatypes ()((A_tree$ (leaf$ (select$ Nat$ )(selecta$ A$ ))(innerNode$ (selectb$ Nat$ )(selectc$ A_tree$ )(selectd$ A_tree$ )))(A_tree_list$ (nil$ )(cons$ (hd$ A_tree$ )(tl$ A_tree_list$ )))))
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun max$ (Nat$ Nat$ )Nat$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun fun_app$ (A_a_tree_fun$ A$ )A_tree$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun height_F$ (A_tree_list$ )Nat$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun insortTree$ (A_tree$ A_tree_list$ )A_tree_list$ )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ )A_a_tree_fun$ )
(declare-fun cachedWeight$ (A_tree$ )Nat$ )
(assert (! (not (= (height$ (fun_app$ (swapLeaves$ t$ w_a$ a$ w_b$ )b$ ))(height$ t$ ))):named a0 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ ))(=> (consistent$ ?v0 )(consistent$ (fun_app$ (swapLeaves$ ?v0 ?v1 ?v2 ?v3 )?v4 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 Nat$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (fun_app$ (swapLeaves$ ?v1 ?v2 ?v0 ?v3 )?v0 )?v1 )):pattern ((swapLeaves$ ?v1 ?v2 ?v0 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ )(?v5 A$ ))(! (= (fun_app$ (swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 )?v5 )(ite (= ?v1 ?v3 )(leaf$ ?v4 ?v5 )(ite (= ?v1 ?v5 )(leaf$ ?v2 ?v3 )(leaf$ ?v0 ?v1 )))):pattern ((fun_app$ (swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 )?v5 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A$ )(?v5 Nat$ )(?v6 A$ ))(! (= (fun_app$ (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 )?v6 )(innerNode$ ?v0 (fun_app$ (swapLeaves$ ?v1 ?v3 ?v4 ?v5 )?v6 )(fun_app$ (swapLeaves$ ?v2 ?v3 ?v4 ?v5 )?v6 ))):pattern ((fun_app$ (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 )?v6 )))):named a4 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 A$ )(?v4 Nat$ )(?v5 Nat$ ))(=> (and (consistent$ ?v0 )(and (not (= ?v1 ?v2 ))(not (= ?v1 ?v3 ))))(= (depth$ (fun_app$ (swapLeaves$ ?v0 ?v4 ?v2 ?v5 )?v3 )?v1 )(depth$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (fun_app$ (swapLeaves$ ?v0 (freq$ ?v0 ?v1 )?v1 (freq$ ?v0 ?v1 ))?v1 )?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_tree$ ))(! (=> (= (height$ ?v0 )zero$ )(= (cost$ ?v0 )zero$ )):pattern ((cost$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(! (=> (= (height$ ?v0 )zero$ )(= (sibling$ ?v0 ?v1 )?v1 )):pattern ((sibling$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(less_eq$ (depth$ ?v0 ?v1 )(height$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_tree$ ))(! (=> (= (height$ ?v0 )zero$ )(= (cachedWeight$ ?v0 )(weight$ ?v0 ))):pattern ((cachedWeight$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (height$ (leaf$ ?v0 ?v1 ))zero$ ):pattern ((leaf$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(= (height_F$ (insortTree$ ?v0 ?v1 ))(max$ (height$ ?v0 )(height_F$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (sibling$ ?v1 ?v0 )?v0 )):pattern ((sibling$ ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (sibling$ ?v0 (sibling$ ?v0 ?v1 ))?v1 ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (freq$ ?v1 ?v0 )zero$ )):pattern ((freq$ ?v1 ?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
