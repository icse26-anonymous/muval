///*** 1_main ***///
START: main_entry;

FROM: main_entry;
vcall := nondet();
vcall1 := nondet();
vcall2 := nondet();
var__temp_vx.0 := vcall;
var__temp_vc.0 := 0;
var__temp_vz.0 := vcall2;
TO: main_while.cond;

FROM: main_while.cond;
vx.0 := var__temp_vx.0;
vc.0 := var__temp_vc.0;
vz.0 := var__temp_vz.0;
TO: main_while.cond_end;

FROM: main_while.cond_end;
assume(vx.0 < vcall1);
TO: main_while.body;

FROM: main_while.cond_end;
assume(vx.0 >= vcall1);
TO: main_while.end;

FROM: main_while.body;
vadd := vx.0 + 1;
vadd4 := vz.0 + 1;
TO: main_while.body_vx.1;
FROM: main_while.body_vx.1;
assume(vx.0 < vz.0);
vx.1 := vadd;
TO: main_while.body_svx.1;

FROM: main_while.body_vx.1;
assume(vx.0 >= vz.0);
vx.1 := vx.0;
TO: main_while.body_svx.1;

FROM: main_while.body_svx.1;
TO: main_while.body_vz.1;
FROM: main_while.body_vz.1;
assume(vx.0 < vz.0);
vz.1 := vz.0;
TO: main_while.body_svz.1;

FROM: main_while.body_vz.1;
assume(vx.0 >= vz.0);
vz.1 := vadd4;
TO: main_while.body_svz.1;

FROM: main_while.body_svz.1;
vadd5 := vc.0 + 1;
var__temp_vx.0 := vx.1;
var__temp_vc.0 := vadd5;
var__temp_vz.0 := vz.1;
TO: main_while.cond;

FROM: main_while.end;
TO: main_while.end_ret;

