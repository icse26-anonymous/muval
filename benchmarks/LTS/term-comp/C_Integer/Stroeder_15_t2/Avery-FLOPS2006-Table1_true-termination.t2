///*** 1_main ***///
START: main_entry;

FROM: main_entry;
vcall := nondet();
vcall1 := nondet();
var__temp_vz.0 := 0;
var__temp_vi.0 := vcall;
TO: main_entry_end;

FROM: main_entry_end;
assume((vcall1 > 0) && (vcall > 0));
TO: main_while.cond;

FROM: main_entry_end;
assume((vcall1 <= 0) || (vcall <= 0));
TO: main_if.end;

FROM: main_while.cond;
vz.0 := var__temp_vz.0;
vi.0 := var__temp_vi.0;
var__temp_vz.1 := vz.0;
var__temp_vi.1 := vi.0;
TO: main_while.cond_end;

FROM: main_while.cond_end;
assume(vi.0 > 0);
TO: main_while.body;

FROM: main_while.cond_end;
assume(vi.0 <= 0);
TO: main_while.cond4;

FROM: main_while.body;
vsub := vi.0 - 1;
vadd := vz.0 + 1;
var__temp_vz.0 := vadd;
var__temp_vi.0 := vsub;
TO: main_while.cond;

FROM: main_while.cond4;
vz.1 := var__temp_vz.1;
vi.1 := var__temp_vi.1;
TO: main_while.cond4_end;

FROM: main_while.cond4_end;
assume(vi.1 < vcall1);
TO: main_while.body6;

FROM: main_while.cond4_end;
assume(vi.1 >= vcall1);
TO: main_if.end;

FROM: main_while.body6;
vadd7 := vi.1 + 1;
vsub8 := vz.1 - 1;
var__temp_vz.1 := vsub8;
var__temp_vi.1 := vadd7;
TO: main_while.cond4;

FROM: main_if.end;
TO: main_if.end_ret;

