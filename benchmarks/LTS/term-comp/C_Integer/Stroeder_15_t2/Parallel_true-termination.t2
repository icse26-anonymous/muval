///*** 1_main ***///
START: main_entry;

FROM: main_entry;
vcall := nondet();
vcall1 := nondet();
var__temp_vx.0 := vcall;
var__temp_vy.0 := vcall1;
TO: main_while.cond;

FROM: main_while.cond;
vx.0 := var__temp_vx.0;
vy.0 := var__temp_vy.0;
TO: main_while.cond_end;

FROM: main_while.cond_end;
assume((vx.0 >= 0) || (vy.0 >= 0));
TO: main_while.body;

FROM: main_while.cond_end;
assume((vx.0 < 0) && (vy.0 < 0));
TO: main_while.end;

FROM: main_while.body;
vsub := vx.0 - 1;
vsub4 := vy.0 - 1;
TO: main_while.body_vx.1;
FROM: main_while.body_vx.1;
assume(vx.0 >= 0);
vx.1 := vsub;
TO: main_while.body_svx.1;

FROM: main_while.body_vx.1;
assume(vx.0 < 0);
vx.1 := vx.0;
TO: main_while.body_svx.1;

FROM: main_while.body_svx.1;
TO: main_while.body_vy.1;
FROM: main_while.body_vy.1;
assume(vx.0 >= 0);
vy.1 := vy.0;
TO: main_while.body_svy.1;

FROM: main_while.body_vy.1;
assume(vx.0 < 0);
vy.1 := vsub4;
TO: main_while.body_svy.1;

FROM: main_while.body_svy.1;
var__temp_vx.0 := vx.1;
var__temp_vy.0 := vy.1;
TO: main_while.cond;

FROM: main_while.end;
TO: main_while.end_ret;

