///*** 1_main ***///
START: main_entry;

FROM: main_entry;
vcall := nondet();
vcall1 := nondet();
TO: main_entry_vcall.call1;
FROM: main_entry_vcall.call1;
assume(vcall < vcall1);
vcall.call1 := vcall;
TO: main_entry_svcall.call1;

FROM: main_entry_vcall.call1;
assume(vcall >= vcall1);
vcall.call1 := vcall1;
TO: main_entry_svcall.call1;

FROM: main_entry_svcall.call1;
var__temp_vres.0 := 0;
var__temp_vy.0 := vcall1;
var__temp_vmin.1 := vcall.call1;
TO: main_while.cond;

FROM: main_while.cond;
vres.0 := var__temp_vres.0;
vy.0 := var__temp_vy.0;
vmin.1 := var__temp_vmin.1;
TO: main_while.cond_end;

FROM: main_while.cond_end;
assume(vmin.1 == vy.0);
TO: main_while.body;

FROM: main_while.cond_end;
assume(vmin.1 != vy.0);
TO: main_while.end;

FROM: main_while.body;
vadd := vy.0 + 1;
vadd3 := vres.0 + 1;
TO: main_while.body_vcall.add;
FROM: main_while.body_vcall.add;
assume(vcall < vadd);
vcall.add := vcall;
TO: main_while.body_svcall.add;

FROM: main_while.body_vcall.add;
assume(vcall >= vadd);
vcall.add := vadd;
TO: main_while.body_svcall.add;

FROM: main_while.body_svcall.add;
var__temp_vres.0 := vadd3;
var__temp_vy.0 := vadd;
var__temp_vmin.1 := vcall.add;
TO: main_while.cond;

FROM: main_while.end;
TO: main_while.end_ret;

