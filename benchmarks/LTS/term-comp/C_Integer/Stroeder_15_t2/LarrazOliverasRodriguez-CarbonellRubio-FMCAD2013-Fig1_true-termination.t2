///*** 1_main ***///
START: main_entry;

FROM: main_entry;
vcall := nondet();
vcall1 := nondet();
vcall2 := nondet();
var__temp_vy.0 := vcall1;
var__temp_vx.0 := vcall;
var__temp_vz.0 := vcall2;
TO: main_entry_end;

FROM: main_entry_end;
assume((((vcall <= 10000) && (vcall >= -10000)) && (vcall1 <= 10000)) && (vcall2 <= 10000));
TO: main_while.cond;

FROM: main_entry_end;
assume((((vcall > 10000) || (vcall < -10000)) || (vcall1 > 10000)) || (vcall2 > 10000));
TO: main_if.end;

FROM: main_while.cond;
vy.0 := var__temp_vy.0;
vx.0 := var__temp_vx.0;
vz.0 := var__temp_vz.0;
TO: main_while.cond_end;

FROM: main_while.cond_end;
assume(vy.0 >= 1);
TO: main_while.body;

FROM: main_while.cond_end;
assume(vy.0 < 1);
TO: main_if.end;

FROM: main_while.body;
vsub := vx.0 - 1;
var__temp_vx.1 := vsub;
var__temp_vz.1 := vz.0;
TO: main_while.cond9;

FROM: main_while.cond9;
vx.1 := var__temp_vx.1;
vz.1 := var__temp_vz.1;
TO: main_while.cond9_end;

FROM: main_while.cond9_end;
assume(vy.0 < vz.1);
TO: main_while.body11;

FROM: main_while.cond9_end;
assume(vy.0 >= vz.1);
TO: main_while.end;

FROM: main_while.body11;
vadd := vx.1 + 1;
vsub12 := vz.1 - 1;
var__temp_vx.1 := vadd;
var__temp_vz.1 := vsub12;
TO: main_while.cond9;

FROM: main_while.end;
vadd13 := vx.1 + vy.0;
var__temp_vy.0 := vadd13;
var__temp_vx.0 := vx.1;
var__temp_vz.0 := vz.1;
TO: main_while.cond;

FROM: main_if.end;
TO: main_if.end_ret;

