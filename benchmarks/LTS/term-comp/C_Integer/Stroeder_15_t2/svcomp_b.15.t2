///*** 1_main ***///
START: main_entry;

FROM: main_entry;
vcall := nondet();
vcall1 := nondet();
vcall2 := nondet();
var__temp_vy.0 := vcall1;
var__temp_vx.0 := vcall;
var__temp_vc.0 := 0;
TO: main_while.cond;

FROM: main_while.cond;
vy.0 := var__temp_vy.0;
vx.0 := var__temp_vx.0;
vc.0 := var__temp_vc.0;
var__temp_vy.1 := vy.0;
var__temp_vx.1 := vx.0;
var__temp_vc.1 := vc.0;
TO: main_while.cond_end;

FROM: main_while.cond_end;
assume((vx.0 == vy.0) && (vx.0 > vcall2));
TO: main_while.cond4;

FROM: main_while.cond_end;
assume((vx.0 != vy.0) || (vx.0 <= vcall2));
TO: main_while.end8;

FROM: main_while.cond4;
vy.1 := var__temp_vy.1;
vx.1 := var__temp_vx.1;
vc.1 := var__temp_vc.1;
var__temp_vy.0 := vy.1;
var__temp_vx.0 := vx.1;
var__temp_vc.0 := vc.1;
TO: main_while.cond4_end;

FROM: main_while.cond4_end;
assume(vy.1 > vcall2);
TO: main_while.body6;

FROM: main_while.cond4_end;
assume(vy.1 <= vcall2);
TO: main_while.cond;

FROM: main_while.body6;
vsub := vx.1 - 1;
vsub7 := vy.1 - 1;
vadd := vc.1 + 1;
var__temp_vy.1 := vsub7;
var__temp_vx.1 := vsub;
var__temp_vc.1 := vadd;
TO: main_while.cond4;

FROM: main_while.end8;
TO: main_while.end8_ret;

