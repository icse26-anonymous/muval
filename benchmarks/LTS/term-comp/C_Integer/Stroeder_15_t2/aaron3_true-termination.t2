///*** 1_main ***///
START: main_entry;

FROM: main_entry;
vcall := nondet();
vcall1 := nondet();
vcall2 := nondet();
vcall3 := nondet();
var__temp_vz.0 := vcall2;
var__temp_vy.0 := vcall1;
var__temp_vx.0 := vcall;
var__temp_vtx.0 := vcall3;
TO: main_while.cond;

FROM: main_while.cond;
vz.0 := var__temp_vz.0;
vy.0 := var__temp_vy.0;
vx.0 := var__temp_vx.0;
vtx.0 := var__temp_vtx.0;
vadd := vtx.0 + vz.0;
TO: main_while.cond_end;

FROM: main_while.cond_end;
assume((vx.0 >= vy.0) && (vx.0 <= vadd));
TO: main_while.body;

FROM: main_while.cond_end;
assume((vx.0 < vy.0) || (vx.0 > vadd));
TO: main_while.end;

FROM: main_while.body;
vcall5 := nondet();
TO: main_while.body_end;

FROM: main_while.body_end;
assume(vcall5 != 0);
TO: main_if.then;

FROM: main_while.body_end;
assume(vcall5 == 0);
TO: main_if.else;

FROM: main_if.then;
vsub := vz.0 - 1;
vcall7 := nondet();
var__temp_vz.0 := vsub;
var__temp_vy.0 := vy.0;
var__temp_vx.0 := vcall7;
var__temp_vtx.0 := vx.0;
TO: main_while.cond;

FROM: main_if.else;
vadd8 := vy.0 + 1;
var__temp_vz.0 := vz.0;
var__temp_vy.0 := vadd8;
var__temp_vx.0 := vx.0;
var__temp_vtx.0 := vtx.0;
TO: main_while.cond;

FROM: main_while.end;
TO: main_while.end_ret;

