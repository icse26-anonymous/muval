///*** 1_main ***///
START: main_entry;

FROM: main_entry;
vcall := nondet();
vcall1 := nondet();
vcall2 := nondet();
vcall3 := nondet();
vcall4 := nondet();
vcall5 := nondet();
var__temp_vk.0 := vcall2;
var__temp_vj.0 := vcall1;
var__temp_vi.0 := vcall;
var__temp_vtk.0 := vcall5;
TO: main_while.cond;

FROM: main_while.cond;
vk.0 := var__temp_vk.0;
vj.0 := var__temp_vj.0;
vi.0 := var__temp_vi.0;
vtk.0 := var__temp_vtk.0;
TO: main_while.cond_end;

FROM: main_while.cond_end;
assume((vcall3 >= vi.0) && (vcall4 >= vj.0));
TO: main_land.rhs;

FROM: main_while.cond_end;
assume((vcall3 < vi.0) || (vcall4 < vj.0));
TO: main_lor.lhs.false;

FROM: main_lor.lhs.false;
TO: main_lor.lhs.false_end;

FROM: main_lor.lhs.false_end;
assume((vcall3 >= vi.0) && (vcall4 <= vj.0));
TO: main_land.rhs;

FROM: main_lor.lhs.false_end;
assume((vcall3 < vi.0) || (vcall4 > vj.0));
TO: main_lor.lhs.false10;

FROM: main_land.rhs;
v.old := vtk.0 + 1;
TO: main_land.rhs_end;

FROM: main_land.rhs_end;
assume(vk.0 >= v.old);
TO: main_while.body;

FROM: main_land.rhs_end;
assume(vk.0 < v.old);
TO: main_while.end;

FROM: main_lor.lhs.false10;
vadd := vtk.0 + 1;
TO: main_lor.lhs.false10_end;

FROM: main_lor.lhs.false10_end;
assume(((vcall3 <= vi.0) && (vcall4 >= vj.0)) && (vk.0 >= vadd));
TO: main_while.body;

FROM: main_lor.lhs.false10_end;
assume(((vcall3 > vi.0) || (vcall4 < vj.0)) || (vk.0 < vadd));
TO: main_while.end;

FROM: main_while.body;
TO: main_while.body_end;

FROM: main_while.body_end;
assume((vcall3 >= vi.0) && (vcall4 >= vj.0));
TO: main_if.then;

FROM: main_while.body_end;
assume((vcall3 < vi.0) || (vcall4 < vj.0));
TO: main_if.else24;

FROM: main_if.then;
vcall18 := nondet();
TO: main_if.then_end;

FROM: main_if.then_end;
assume(vcall18 != 0);
TO: main_if.then20;

FROM: main_if.then_end;
assume(vcall18 == 0);
TO: main_if.else;

FROM: main_if.then20;
vadd21 := vj.0 + vk.0;
vcall22 := nondet();
var__temp_vk.0 := vcall22;
var__temp_vj.0 := vadd21;
var__temp_vi.0 := vi.0;
var__temp_vtk.0 := vk.0;
TO: main_while.cond;

FROM: main_if.else;
vadd23 := vi.0 + 1;
var__temp_vk.0 := vk.0;
var__temp_vj.0 := vj.0;
var__temp_vi.0 := vadd23;
var__temp_vtk.0 := vtk.0;
TO: main_while.cond;

FROM: main_if.else24;
TO: main_if.else24_end;

FROM: main_if.else24_end;
assume((vcall3 >= vi.0) && (vcall4 <= vj.0));
TO: main_if.then28;

FROM: main_if.else24_end;
assume((vcall3 < vi.0) || (vcall4 > vj.0));
TO: main_if.else30;

FROM: main_if.then28;
vadd29 := vi.0 + 1;
var__temp_vk.0 := vk.0;
var__temp_vj.0 := vj.0;
var__temp_vi.0 := vadd29;
var__temp_vtk.0 := vtk.0;
TO: main_while.cond;

FROM: main_if.else30;
var__temp_vk.0 := vk.0;
var__temp_vj.0 := vj.0;
var__temp_vi.0 := vi.0;
var__temp_vtk.0 := vtk.0;
TO: main_if.else30_end;

FROM: main_if.else30_end;
assume((vcall3 <= vi.0) && (vcall4 >= vj.0));
TO: main_if.then34;

FROM: main_if.else30_end;
assume((vcall3 > vi.0) || (vcall4 < vj.0));
TO: main_while.cond;

FROM: main_if.then34;
vadd35 := vj.0 + vk.0;
vcall36 := nondet();
var__temp_vk.0 := vcall36;
var__temp_vj.0 := vadd35;
var__temp_vi.0 := vi.0;
var__temp_vtk.0 := vk.0;
TO: main_while.cond;

FROM: main_while.end;
TO: main_while.end_ret;

