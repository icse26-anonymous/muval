///*** 1_main ***///
START: main_entry;

FROM: main_entry;
vcall := nondet();
vcall1 := nondet();
vcall2 := nondet();
vcall3 := nondet();
vadd := vcall1 + 1;
var__temp_vy.0 := vcall3;
var__temp_vx.0 := vcall2;
TO: main_entry_end;

FROM: main_entry_end;
assume((vcall == vadd) && (vcall2 < 0));
TO: main_while.cond;

FROM: main_entry_end;
assume((vcall != vadd) || (vcall2 >= 0));
TO: main_if.end;

FROM: main_while.cond;
vy.0 := var__temp_vy.0;
vx.0 := var__temp_vx.0;
TO: main_while.cond_end;

FROM: main_while.cond_end;
assume((vx.0 >= 0) || (vy.0 >= 0));
TO: main_while.body;

FROM: main_while.cond_end;
assume((vx.0 < 0) && (vy.0 < 0));
TO: main_if.end;

FROM: main_while.body;
vadd7 := vx.0 + vcall;
vsub := vadd7 - vcall1;
vsub8 := vsub - 1;
vadd9 := vy.0 + vcall1;
vsub10 := vadd9 - vcall;
vsub11 := vsub10 - 1;
var__temp_vy.0 := vsub11;
var__temp_vx.0 := vsub8;
TO: main_while.cond;

FROM: main_if.end;
TO: main_if.end_ret;

