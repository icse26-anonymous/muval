// ARMC error state:  main-err-0
// ARMC return state: main-ret-0	 -> 1
// main-0-18	 -> 2
// main-2-0	 -> 3
// main-3-0	 -> 4
// main-4-0	 -> 5
// main-5-0	 -> 6
// main-6-0	 -> 7
// main-7-0	 -> 8
// main-8-0	 -> 9
// main-1-20	 -> 10
// main-11-20	 -> 11
// main-13-20	 -> 12
// main-12-24	 -> 13
// main-15-20	 -> 14
// main-14-20	 -> 15
// main-17-0	 -> 16
// main-18-0	 -> 17
// main-16-27	 -> 18
// main-20-28	 -> 19
// main-22-28	 -> 20
// main-24-0	 -> 21
// main-19-33	 -> 22
// main-23-29	 -> 23
// main-25-0	 -> 24
// main-26-0	 -> 25
// main-27-0	 -> 26
// main-21-31	 -> 27
// main-29-33	 -> 28
// main-28-36	 -> 29
// main-30-33	 -> 30
// main-10-0	 -> 31
// main-9-38	 -> 32
START:2;
FROM:2;
seq := 1;
TO:3;
FROM:3;
i := seq;
TO:4;
FROM:4;
z := nondet();
TO:5;
FROM:5;
assume(z>=0);
TO:6;
FROM:6;
pos := 0;
TO:7;
FROM:7;
N := nondet();
TO:8;
FROM:8;
assume(N==2);
TO:9;
FROM:9;
walker := 1;
TO:10;
FROM:10;
TO:11;
FROM:11;
assume(walker<=N);
TO:12;
FROM:12;
assume(walker>=1);
TO:13;
FROM:12;
assume((walker + 1)<=1);
TO:14;
FROM:11;
assume(walker>=(1 + N));
TO:15;
FROM:13;
choice := nondet();
TO:16;
FROM:16;
assume(choice>=0);
TO:17;
FROM:17;
assume(choice<=1);
TO:18;
FROM:18;
assume(z<=0);
TO:19;
FROM:19;
assume(i>=(1 + 0));
TO:20;
FROM:20;
assume(choice<=0);
TO:21;
FROM:21;
i := (i - 1);
TO:22;
FROM:19;
assume(i<=0);
TO:23;
FROM:23;
seq := (seq + 1);
TO:24;
FROM:24;
i := seq;
TO:25;
FROM:25;
z := nondet();
TO:26;
FROM:26;
assume(z>=0);
TO:22;
FROM:18;
assume(z>=(1 + 0));
TO:27;
FROM:27;
z := (z - 1);
TO:22;
FROM:22;
assume(choice<=0);
TO:28;
FROM:28;
walker := (walker - 1);
TO:29;
FROM:22;
assume(choice>=(1 + 0));
TO:30;
FROM:30;
walker := (walker + 1);
TO:29;
FROM:29;
assume(seq<=(N + 1));
TO:10;
FROM:31;
TO:32;
FROM:32;
TO:1;
FROM:15;
TO:31;
FROM:14;
TO:31;
