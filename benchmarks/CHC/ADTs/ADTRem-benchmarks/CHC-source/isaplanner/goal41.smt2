; Automatically generated by map2smt

(set-logic HORN)

(declare-datatypes ((listOfInt 0) )
(((cons-listOfInt (head-listOfInt Int) (tail-listOfInt listOfInt)) (nil-listOfInt))))



(declare-fun adt_new1 (listOfInt listOfInt Bool) Bool)
(declare-fun p (Int Bool) Bool)
(declare-fun f (Int Int) Bool)
(declare-fun leq (Int Int Bool) Bool)
(declare-fun take (Int listOfInt listOfInt) Bool)
(declare-fun lmap (listOfInt listOfInt) Bool)
(declare-fun ff () Bool)

(assert
  (forall ( (A Int) (B Bool) )
    (=>
      (and
        (= B true)
        (>= A 1)
      )
      (p A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Bool) )
    (=>
      (and
        (= B false)
        (<= A 0)
      )
      (p A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (= A (+ (- 1) B))
      (f A B)
    )
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C Bool) )
    (=>
      (= C false)
      (adt_new1 nil-listOfInt (cons-listOfInt A B) C)
    )
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C Bool) )
    (=>
      (= C false)
      (adt_new1 (cons-listOfInt A B) nil-listOfInt C)
    )
  )
)
(assert
  (forall ( (A Bool) )
    (=>
      (= A true)
      (adt_new1 nil-listOfInt nil-listOfInt A)
    )
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C Int) (D listOfInt) (E Bool) )
    (=>
      (and
        (= E false)
        (>= (- C A) 1)
      )
      (adt_new1 (cons-listOfInt A B) (cons-listOfInt C D) E)
    )
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C Int) (D listOfInt) (E Bool) )
    (=>
      (and
        (= E false)
        (<= (- C A) (- 1))
      )
      (adt_new1 (cons-listOfInt A B) (cons-listOfInt C D) E)
    )
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C listOfInt) (D Bool) )
    (=>
      (adt_new1 B C D)
      (adt_new1 (cons-listOfInt A B) (cons-listOfInt A C) D)
    )
  )
)
(assert
  (forall ( (A Int) )
    (take A nil-listOfInt nil-listOfInt)
  )
)
(assert
  (forall ( (A Int) (B listOfInt) )
    (=>
      (= A 0)
      (take A B nil-listOfInt)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C listOfInt) (D listOfInt) (E Int) )
    (=>
      (and
        (= A (+ 1 E))
        (>= E 0)
        (take E C D)
      )
      (take A (cons-listOfInt B C) (cons-listOfInt B D))
    )
  )
)
(assert
    (lmap nil-listOfInt nil-listOfInt)
)
(assert
  (forall ( (A Int) (B listOfInt) (C Int) (D listOfInt) )
    (=>
      (and
        (f A C)
        (lmap B D)
      )
      (lmap (cons-listOfInt A B) (cons-listOfInt C D))
    )
  )
)
(assert
  (forall ( (A Bool) (B Int) (C listOfInt) (D listOfInt) (E listOfInt) (F listOfInt) (G listOfInt) )
    (=>
      (and
        (= A false)
        (>= B 0)
        (lmap C D)
        (take B D E)
        (take B C F)
        (lmap F G)
        (adt_new1 E G A)
      )
      ff
    )
  )
)

(assert (not ff))
(check-sat)
