; Automatically generated by map2smt

(set-logic HORN)

(declare-datatypes ((listOfInt 0) )
(((cons-listOfInt (head-listOfInt Int) (tail-listOfInt listOfInt)) (nil-listOfInt))))



(declare-fun leq (Int Int Bool) Bool)
(declare-fun len (listOfInt Int) Bool)
(declare-fun append (listOfInt listOfInt listOfInt) Bool)
(declare-fun ff () Bool)

(define-fun-rec length ((x listOfInt)) Int (
     ite ((_ is nil-listOfInt) x) 0 (+ 1 (length (tail-listOfInt x)))
))

(set-info length (forall ((x listOfInt))
 (or ((_ is nil-listOfInt) x) (> (length x) 0))
))

(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (len nil-listOfInt A)
    )
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C Int) (D Int) )
    (=>
      (and
        (= C (+ 1 D))
        (len B D)
      )
      (len (cons-listOfInt A B) C)
    )
  )
)
(assert
  (forall ( (A listOfInt) )
    (append nil-listOfInt A A)
  )
)
(assert
  (forall ( (A Int) (B listOfInt) (C listOfInt) (D listOfInt) )
    (=>
      (append B C D)
      (append (cons-listOfInt A B) C (cons-listOfInt A D))
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C listOfInt) (D listOfInt) (E listOfInt) (F listOfInt) )
    (=>
      (and
        (>= (- A B) 1)
        (append C D E)
        (len E B)
        (append D C F)
        (len F A)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C listOfInt) (D listOfInt) (E listOfInt) (F listOfInt) )
    (=>
      (and
        (<= (- A B) (- 1))
        (append C D E)
        (len E B)
        (append D C F)
        (len F A)
      )
      ff
    )
  )
)

(assert (not ff))
(check-sat)
