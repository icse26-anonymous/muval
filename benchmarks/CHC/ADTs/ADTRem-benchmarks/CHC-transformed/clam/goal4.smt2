; Automatically generated by map2smt

(set-logic HORN)




(declare-fun new9 (Int) Bool)
(declare-fun new7 (Int) Bool)
(declare-fun new2 (Int Int) Bool)
(declare-fun new1 (Int Int) Bool)
(declare-fun diff_new6 (Int Int Int) Bool)
(declare-fun diff_new4 (Int Int Int) Bool)
(declare-fun ff () Bool)

(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new9 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= A (+ 1 B))
        (new9 B)
      )
      (new9 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new7 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= A (+ 1 B))
        (new7 B)
      )
      (new7 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= C (+ 1 A))
        (new7 A)
      )
      (diff_new6 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (= C (+ 1 D))
        (= A (+ 1 E))
        (diff_new6 E B D)
      )
      (diff_new6 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= C (+ 1 A))
        (new9 A)
      )
      (diff_new4 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (= C (+ 1 D))
        (= A (+ 1 E))
        (diff_new4 E B D)
      )
      (diff_new4 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= B 0)
        (= A 0)
      )
      (new2 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (= B (+ 1 C))
        (= A (+ 1 D))
        (diff_new4 E F D)
        (new2 E C)
      )
      (new2 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= B 0)
        (= A 0)
      )
      (new1 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (= B (+ 1 C))
        (= A (+ 1 D))
        (diff_new6 E F D)
        (new1 E C)
      )
      (new1 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (>= (- A B) 1)
        (= (* 2 C) A)
        (new1 B C)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (<= (- A B) (- 1))
        (= (* 2 C) A)
        (new2 B C)
      )
      ff
    )
  )
)

(assert (not ff))
(check-sat)
