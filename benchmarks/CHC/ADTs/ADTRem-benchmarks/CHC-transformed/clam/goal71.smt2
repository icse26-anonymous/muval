; Automatically generated by map2smt

(set-logic HORN)




(declare-fun new9 (Int Int) Bool)
(declare-fun new5 (Int Int) Bool)
(declare-fun new4 (Int Int Int Int Int) Bool)
(declare-fun new3 (Int Int Int Int Int) Bool)
(declare-fun new2 (Int Int Int Int Int) Bool)
(declare-fun new17 (Int Int) Bool)
(declare-fun new13 (Int Int) Bool)
(declare-fun new1 (Int Int Int Int Int) Bool)
(declare-fun ff () Bool)

(assert
  (forall ( (A Int) (B Int) )
    (=>
      (= B 0)
      (new17 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= B (+ 1 C))
        (new17 A C)
      )
      (new17 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (>= (- C A) 1)
        (new17 A B)
      )
      (new17 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (<= (- C A) (- 1))
        (new17 A B)
      )
      (new17 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (= B 0)
      (new13 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= B (+ 1 C))
        (new13 A C)
      )
      (new13 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (>= (- C A) 1)
        (new13 A B)
      )
      (new13 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (<= (- C A) (- 1))
        (new13 A B)
      )
      (new13 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (= B 0)
      (new9 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= B (+ 1 C))
        (new9 A C)
      )
      (new9 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (>= (- C A) 1)
        (new9 A B)
      )
      (new9 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (<= (- C A) (- 1))
        (new9 A B)
      )
      (new9 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (= B 0)
      (new5 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= B (+ 1 C))
        (new5 A C)
      )
      (new5 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (>= (- C A) 1)
        (new5 A B)
      )
      (new5 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (<= (- C A) (- 1))
        (new5 A B)
      )
      (new5 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (<= (- A B) (- 1))
        (<= (- A B) (- 1))
        (= C 0)
        (= D 0)
      )
      (new4 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (<= (- A B) (- 1))
        (<= (- A B) (- 1))
        (<= A (- B 1))
        (= C (+ 1 E))
        (= D (+ 1 E))
        (new5 B E)
      )
      (new4 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= (- D B) 1)
        (>= (- D B) 1)
        (<= (- A B) (- 1))
        (<= (- A B) (- 1))
        (<= A (- D 1))
        (new5 B C)
      )
      (new4 A B C B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (<= (- D B) (- 1))
        (<= (- D B) (- 1))
        (<= (- A B) (- 1))
        (<= (- A B) (- 1))
        (<= A (- D 1))
        (new5 B C)
      )
      (new4 A B C B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (>= A E)
        (<= (- E B) (- 1))
        (<= (- E B) (- 1))
        (<= (- A B) (- 1))
        (new4 A B C B D)
      )
      (new4 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= (- A B) 1)
        (>= (- A B) 1)
        (= C 0)
        (= D 0)
      )
      (new3 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= (- D B) 1)
        (>= (- D B) 1)
        (>= (- A B) 1)
        (>= (- A B) 1)
        (<= A (- D 1))
        (new9 B C)
      )
      (new3 A B C B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (>= (- A B) 1)
        (>= A B)
        (= D (+ 1 E))
        (= C (+ 1 F))
        (new3 A B F B E)
      )
      (new3 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (>= (- E B) 1)
        (>= (- E B) 1)
        (>= (- A B) 1)
        (>= A E)
        (new3 A B C B D)
      )
      (new3 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (>= (- A B) 1)
        (>= A E)
        (<= (- E B) (- 1))
        (<= (- E B) (- 1))
        (new3 A B C B D)
      )
      (new3 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (<= (- A B) (- 1))
        (<= (- A B) (- 1))
        (= C 0)
        (= D 0)
      )
      (new2 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (<= (- A B) (- 1))
        (<= (- A B) (- 1))
        (<= A (- B 1))
        (= C (+ 1 E))
        (= D (+ 1 E))
        (new13 B E)
      )
      (new2 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= (- D B) 1)
        (>= (- D B) 1)
        (<= (- A B) (- 1))
        (<= (- A B) (- 1))
        (<= A (- D 1))
        (new13 B C)
      )
      (new2 A B C B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (<= (- D B) (- 1))
        (<= (- D B) (- 1))
        (<= (- A B) (- 1))
        (<= (- A B) (- 1))
        (<= A (- D 1))
        (new13 B C)
      )
      (new2 A B C B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (>= A E)
        (<= (- E B) (- 1))
        (<= (- E B) (- 1))
        (<= (- A B) (- 1))
        (new2 A B C B D)
      )
      (new2 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= (- A B) 1)
        (>= (- A B) 1)
        (= C 0)
        (= D 0)
      )
      (new1 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= (- D B) 1)
        (>= (- D B) 1)
        (>= (- A B) 1)
        (>= (- A B) 1)
        (<= A (- D 1))
        (new17 B C)
      )
      (new1 A B C B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (>= (- A B) 1)
        (>= A B)
        (= D (+ 1 E))
        (= C (+ 1 F))
        (new1 A B F B E)
      )
      (new1 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (>= (- E B) 1)
        (>= (- E B) 1)
        (>= (- A B) 1)
        (>= A E)
        (new1 A B C B D)
      )
      (new1 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (>= (- A B) 1)
        (>= A E)
        (<= (- E B) (- 1))
        (<= (- E B) (- 1))
        (new1 A B C B D)
      )
      (new1 A B C B D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (= A 1)
        (= B 0)
        (>= (- C D) 1)
        (>= (- E F) 1)
        (new1 E F D F C)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (= A 1)
        (= B 0)
        (>= (- C D) 1)
        (<= (- E F) (- 1))
        (new2 E F D F C)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (= A 1)
        (= B 0)
        (>= (- C D) 1)
        (<= (- E F) (- 1))
        (new3 C D F D E)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (= A 1)
        (= B 0)
        (<= (- C D) (- 1))
        (<= (- E F) (- 1))
        (new4 E F D F C)
      )
      ff
    )
  )
)

(assert (not ff))
(check-sat)
