; Automatically generated by map2smt

(set-logic HORN)




(declare-fun new6 (Int) Bool)
(declare-fun new3 (Int) Bool)
(declare-fun new2 (Int Int Int) Bool)
(declare-fun new1 (Int Int Int) Bool)
(declare-fun diff_new8 (Int Int Int) Bool)
(declare-fun diff_new5 (Int Int Int) Bool)
(declare-fun ff () Bool)

(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (= (+ D E) F)
        (= E 0)
        (= D 0)
        (= C (+ 1 F))
        (= A 0)
      )
      (diff_new8 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) )
    (=>
      (and
        (<= D (- B 1))
        (= (+ E F) G)
        (= (+ E H) I)
        (= C (+ 1 G))
        (= A (+ 1 I))
        (diff_new8 H B F)
        (new6 E)
      )
      (diff_new8 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) )
    (=>
      (and
        (>= D B)
        (= (+ E F) G)
        (= (+ H F) I)
        (= C (+ 1 G))
        (= A (+ 1 I))
        (diff_new8 H B E)
        (new6 F)
      )
      (diff_new8 A B C)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new6 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (= (+ B C) D)
        (= A (+ 1 D))
        (new6 B)
        (new6 C)
      )
      (new6 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (= (+ D E) F)
        (= E 0)
        (= D 0)
        (= C (+ 1 F))
        (= A 0)
      )
      (diff_new5 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) )
    (=>
      (and
        (<= D (- B 1))
        (= (+ E F) G)
        (= (+ E H) I)
        (= C (+ 1 G))
        (= A (+ 1 I))
        (diff_new5 H B F)
        (new3 E)
      )
      (diff_new5 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) )
    (=>
      (and
        (>= D B)
        (= (+ E F) G)
        (= (+ H F) I)
        (= C (+ 1 G))
        (= A (+ 1 I))
        (diff_new5 H B E)
        (new3 F)
      )
      (diff_new5 A B C)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new3 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (= (+ B C) D)
        (= A (+ 1 D))
        (new3 B)
        (new3 C)
      )
      (new3 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= B 0)
        (new3 A)
      )
      (new2 A A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (= C (+ 1 D))
        (diff_new5 E F A)
        (new2 E B D)
      )
      (new2 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= B 0)
        (new6 A)
      )
      (new1 A A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and
        (= C (+ 1 D))
        (diff_new8 E F A)
        (new1 E B D)
      )
      (new1 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= (- A B) 1)
        (= (+ C D) A)
        (new1 B C D)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (<= (- A B) (- 1))
        (= (+ C D) A)
        (new2 B C D)
      )
      ff
    )
  )
)

(assert (not ff))
(check-sat)
