; Automatically generated by map2smt

(set-logic HORN)




(declare-fun new4 (Int Int) Bool)
(declare-fun new3 (Int Int) Bool)
(declare-fun new2 (Int Int) Bool)
(declare-fun new16 (Int) Bool)
(declare-fun new15 (Int) Bool)
(declare-fun new14 (Int) Bool)
(declare-fun new13 (Int) Bool)
(declare-fun new1 (Int Int) Bool)
(declare-fun diff_new8 (Int Int Int) Bool)
(declare-fun diff_new6 (Int Int Int) Bool)
(declare-fun diff_new12 (Int Int Int) Bool)
(declare-fun diff_new10 (Int Int Int) Bool)
(declare-fun ff () Bool)

(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new16 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= A (+ 1 B))
        (new16 B)
      )
      (new16 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new15 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= A (+ 1 B))
        (new15 B)
      )
      (new15 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new14 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= A (+ 1 B))
        (new14 B)
      )
      (new14 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new13 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= A (+ 1 B))
        (new13 B)
      )
      (new13 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= B (+ 1 C))
        (new13 C)
      )
      (diff_new12 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= B (+ 1 C))
        (new14 C)
      )
      (diff_new10 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= B (+ 1 C))
        (new15 C)
      )
      (diff_new8 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= B (+ 1 C))
        (new16 C)
      )
      (diff_new6 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= B 0)
        (= A 0)
      )
      (new4 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= C 0)
        (= B (+ 1 C))
        (= A 0)
      )
      (new4 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and
        (= C (+ 1 D))
        (= B (+ 1 C))
        (= A (+ 1 E))
        (diff_new6 F G D)
        (new4 E G)
      )
      (new4 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= B 0)
        (= A 0)
      )
      (new3 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= C 0)
        (= B (+ 1 C))
        (= A 0)
      )
      (new3 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and
        (= C (+ 1 D))
        (= B (+ 1 C))
        (= A (+ 1 E))
        (diff_new8 F G D)
        (new3 E G)
      )
      (new3 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= B 0)
        (= A 0)
      )
      (new2 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= C 0)
        (= B (+ 1 C))
        (= A 0)
      )
      (new2 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and
        (= C (+ 1 D))
        (= B (+ 1 C))
        (= A (+ 1 E))
        (diff_new10 F G D)
        (new2 E G)
      )
      (new2 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= B 0)
        (= A 0)
      )
      (new1 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (= C 0)
        (= B (+ 1 C))
        (= A 0)
      )
      (new1 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and
        (= C (+ 1 D))
        (= B (+ 1 C))
        (= A (+ 1 E))
        (diff_new12 F G D)
        (new1 E G)
      )
      (new1 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= A 0)
        (<= (+ A 1) B)
        (= C 1)
        (= A (- D C))
        (new1 B D)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= A (+ B 1))
        (>= A 0)
        (= C 1)
        (= A (- D C))
        (new2 B D)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (<= (+ A 1) B)
        (<= C (- D 1))
        (= D 1)
        (= A 0)
        (new3 B C)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= A (+ B 1))
        (<= C (- D 1))
        (= D 1)
        (= A 0)
        (new4 B C)
      )
      ff
    )
  )
)

(assert (not ff))
(check-sat)
