; Automatically generated by map2smt

(set-logic HORN)




(declare-fun new9 (Int) Bool)
(declare-fun new7 (Int) Bool)
(declare-fun new5 (Int) Bool)
(declare-fun new4 (Int Int Int) Bool)
(declare-fun new3 (Int Int Int) Bool)
(declare-fun new2 (Int Int Int) Bool)
(declare-fun new11 (Int) Bool)
(declare-fun new1 (Int Int Int) Bool)
(declare-fun ff () Bool)

(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new11 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= A (+ 1 B))
        (new11 B)
      )
      (new11 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new9 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= A (+ 1 B))
        (new9 B)
      )
      (new9 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new7 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= A (+ 1 B))
        (new7 B)
      )
      (new7 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (= A 0)
      (new5 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (= A (+ 1 B))
        (new5 B)
      )
      (new5 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (>= A 0)
        (= C 0)
        (= B 0)
      )
      (new4 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (>= A 0)
        (= A 0)
        (new5 B)
      )
      (new4 A B B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (>= D 0)
        (>= A 0)
        (= C (+ 1 E))
        (= A (+ 1 D))
        (new4 D B E)
      )
      (new4 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (>= A 0)
        (= C 0)
        (= B 0)
      )
      (new3 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (>= A 0)
        (= A 0)
        (new7 B)
      )
      (new3 A B B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (>= D 0)
        (>= A 0)
        (= C (+ 1 E))
        (= A (+ 1 D))
        (new3 D B E)
      )
      (new3 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (>= A 0)
        (= C 0)
        (= B 0)
      )
      (new2 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (>= A 0)
        (= A 0)
        (new9 B)
      )
      (new2 A B B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (>= D 0)
        (>= A 0)
        (= C (+ 1 E))
        (= A (+ 1 D))
        (new2 D B E)
      )
      (new2 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (>= A 0)
        (= C 0)
        (= B 0)
      )
      (new1 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and
        (>= A 0)
        (= A 0)
        (new11 B)
      )
      (new1 A B B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (>= D 0)
        (>= A 0)
        (= C (+ 1 E))
        (= A (+ 1 D))
        (new1 D B E)
      )
      (new1 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= A 0)
        (>= B 0)
        (<= (+ B 1) C)
        (= B (- D A))
        (new1 A C D)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= A 0)
        (>= B (+ C 1))
        (>= B 0)
        (= B (- D A))
        (new2 A C D)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= A 0)
        (<= (+ B 1) C)
        (<= D (- A 1))
        (= B 0)
        (new3 A C D)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        (>= A 0)
        (>= B (+ C 1))
        (<= D (- A 1))
        (= B 0)
        (new4 A C D)
      )
      ff
    )
  )
)

(assert (not ff))
(check-sat)
