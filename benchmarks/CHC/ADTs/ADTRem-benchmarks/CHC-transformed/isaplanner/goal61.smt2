; Automatically generated by map2smt

(set-logic HORN)




(declare-fun new9 (Int Int) Bool)
(declare-fun new6 (Int Int) Bool)
(declare-fun new3 (Int Int) Bool)
(declare-fun new2 (Int Int Int Int) Bool)
(declare-fun new13 (Int Int) Bool)
(declare-fun new1 (Int Int Int Int) Bool)
(declare-fun diff_new8 (Int Int Int) Bool)
(declare-fun diff_new5 (Int Int Int) Bool)
(declare-fun diff_new15 () Bool)
(declare-fun diff_new11 () Bool)
(declare-fun ff () Bool)

(assert
    diff_new15
)
(assert
  (forall ( (A Int) )
    (new13 A A)
  )
)
(assert
    diff_new11
)
(assert
  (forall ( (A Int) )
    (new9 A A)
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (new9 A C)
      (diff_new8 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        diff_new11
        (diff_new8 A D C)
      )
      (diff_new8 A B C)
    )
  )
)
(assert
  (forall ( (A Int) )
    (new6 A A)
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (new6 C B)
      (new6 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (new13 A C)
      (diff_new5 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and
        diff_new15
        (diff_new5 A D C)
      )
      (diff_new5 A B C)
    )
  )
)
(assert
  (forall ( (A Int) )
    (new3 A A)
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (new3 C B)
      (new3 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (new3 A B)
      (new2 A B A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (diff_new5 D E B)
        (new2 A D A C)
      )
      (new2 A B A C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (new6 A B)
      (new1 A B A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and
        (diff_new8 D E B)
        (new1 A D A C)
      )
      (new1 A B A C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (>= (- A B) 1)
        (new1 C B C A)
      )
      ff
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and
        (<= (- A B) (- 1))
        (new2 C B C A)
      )
      ff
    )
  )
)

(assert (not ff))
(check-sat)
