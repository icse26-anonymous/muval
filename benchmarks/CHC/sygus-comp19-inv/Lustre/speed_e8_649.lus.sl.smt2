(set-logic HORN)

(declare-fun str_invariant
             (Bool Bool Bool Bool Bool Bool Bool Int Int Bool Bool Int Bool)
             Bool)
(assert (forall ((A Bool)
         (B Int)
         (C Bool)
         (D Bool)
         (E Int)
         (F Int)
         (G Bool)
         (H Bool)
         (I Bool)
         (J Bool)
         (K Bool)
         (L Bool)
         (M Bool))
  (=> (and (str_invariant M L K J I H G F E D C B A) (not (= K true)))
         false)
    ))
(assert (forall ((A Bool)
         (B Int)
         (C Bool)
         (D Bool)
         (E Int)
         (F Int)
         (G Bool)
         (H Bool)
         (I Bool)
         (J Bool)
         (K Bool)
         (L Bool)
         (M Bool))
  (let ((a!1 (- B (ite (= C true) E (ite (= D true) (+ E F) E))))
           (a!2 (ite (and (= L true) (not (= M true))) 2 0)))
     (let ((a!3 (ite (and (= M true) (not (= L true))) 1 a!2)))
     (let ((a!4 (and (not (= I true))
                     (= a!1 0)
                     (not (= H true))
                     (or (and (= M true) (= L true)) (not (= D true)))
                     (not (= C true))
                     (>= E 0)
                     (= A true)
                     (or (not (= M true)) (not (= L true)) (= D true))
                     (>= F 0)
                     (>= (- E) 0)
                     (= E 0)
                     (or (= K true) (and (= I true) (= H true)))
                     (>= (- 2 F) 0)
                     (= (- F a!3) 0)
                     (or (not (= K true)) (not (= I true)) (not (= H true)))
                     (= G true)
                     (= J true))))
       (=> a!4 (str_invariant M L K J I H G F E D C B A)))))
    ))
(assert (forall ((A Int)
         (B Int)
         (C Bool)
         (D Bool)
         (E Bool)
         (F Bool)
         (G Bool)
         (H Bool)
         (I Int)
         (J Bool)
         (K Bool)
         (L Int)
         (M Int)
         (N Bool)
         (O Bool)
         (P Bool)
         (Q Bool)
         (R Bool)
         (S Bool)
         (T Bool)
         (U Bool)
         (V Bool)
         (W Int)
         (X Bool)
         (Y Bool)
         (Z Bool))
  (let ((a!1 (or (and (= Q true) (< W 0))
                    (and (not (= Q true)) (<= W (- 10)))
                    (not (= E true))))
           (a!2 (or (and (= P true) (> W 0))
                    (and (not (= P true)) (>= W 10))
                    (not (= D true))))
           (a!3 (and (or (not (= Q true)) (>= W 0))
                     (or (= Q true) (> W (- 10)))))
           (a!4 (- W (ite (= X true) A (ite (= Y true) (+ I B) I))))
           (a!5 (and (or (not (= P true)) (<= W 0)) (or (= P true) (< W 10))))
           (a!6 (ite (and (= O true) (not (= Z true))) 2 0)))
     (let ((a!7 (ite (and (= Z true) (not (= O true))) 1 a!6)))
     (let ((a!8 (and (str_invariant U T S R Q P N M L K J I H)
                     a!1
                     a!2
                     (or a!3 (= E true))
                     (= a!4 0)
                     (or a!5 (= D true))
                     (or (and (= Z true) (= O true)) (not (= Y true)))
                     (not (= X true))
                     (>= A 0)
                     (not (= V true))
                     (or (not (= Z true)) (not (= O true)) (= Y true))
                     (>= B 0)
                     (>= (- A) 0)
                     (= A 0)
                     (or (= G true) (and (= E true) (= D true)))
                     (>= (- 2 B) 0)
                     (= (- B a!7) 0)
                     (or (not (= G true)) (not (= E true)) (not (= D true)))
                     (not (= C true))
                     (not (= F true)))))
       (=> a!8 (str_invariant Z O G F E D C B A Y X W V)))))
    ))


(check-sat)
(exit)
