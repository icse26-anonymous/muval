(set-logic HORN)

(declare-fun str_invariant
             (Bool
              Bool
              Bool
              Int
              Bool
              Bool
              Int
              Int
              Int
              Int
              Int
              Bool
              Bool
              Int
              Bool
              Bool
              Bool)
             Bool)
(assert (forall ((A Bool)
         (B Bool)
         (C Bool)
         (D Int)
         (E Bool)
         (F Bool)
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K Int)
         (L Bool)
         (M Bool)
         (N Int)
         (O Bool)
         (P Bool)
         (Q Bool))
  (=> (and (str_invariant Q P O N M L K J I H G F E D C B A)
              (not (= M true)))
         false)
    ))
(assert (forall ((A Bool)
         (B Bool)
         (C Bool)
         (D Int)
         (E Bool)
         (F Bool)
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K Int)
         (L Bool)
         (M Bool)
         (N Int)
         (O Bool)
         (P Bool)
         (Q Bool)
         (R Bool))
  (let ((a!1 (= R (and (= E true) (not (= Q true)) (>= (+ (- 1) D) 0)))))
     (let ((a!2 (and (= H 0)
                     (= (- I N) 0)
                     (or (not (= R true)) (>= K 0) (not (= M true)))
                     (or (= F true) (not (= E true)))
                     (= G 0)
                     (= J 0)
                     (= (- K I) 0)
                     (or (and (= R true) (< K 0)) (= M true))
                     (or (not (= F true)) (= E true))
                     (= C true)
                     (= (- D N) 0)
                     (= B true)
                     (or (= F true) (and (= P true) (= O true)))
                     (= A true)
                     (or (not (= F true)) (not (= P true)) (not (= O true)))
                     a!1
                     (= L true))))
       (=> a!2 (str_invariant Q P O N M L K J I H G F E D C B A))))
    ))
(assert (forall ((A Int)
         (B Int)
         (C Int)
         (D Bool)
         (E Bool)
         (F Int)
         (G Bool)
         (H Bool)
         (I Bool)
         (J Int)
         (K Bool)
         (L Bool)
         (M Bool)
         (N Int)
         (O Int)
         (P Int)
         (Q Int)
         (R Int)
         (S Bool)
         (T Bool)
         (U Int)
         (V Bool)
         (W Bool)
         (X Bool)
         (Y Bool)
         (Z Bool)
         (A1 Bool)
         (B1 Bool)
         (C1 Int)
         (D1 Bool)
         (E1 Bool)
         (F1 Int)
         (G1 Int)
         (H1 Bool)
         (I1 Bool))
  (let ((a!1 (ite (= H1 true)
                     (ite (>= (+ (- 1) R) 0) (+ 1 Q) Q)
                     (ite (>= (+ (- 1) Q) 0) (+ (- 1) Q) Q)))
           (a!2 (ite (= W true) (ite (>= (+ (- 1) Q) 0) (+ 1 O) O) O))
           (a!3 (ite (= H1 true) (ite (>= (+ (- 1) R) 0) (+ (- 1) R) R) R))
           (a!4 (ite (= L true) (ite (>= (+ (- 1) Q) 0) (+ 1 N) N) N))
           (a!5 (= I1 (and (= D1 true) (>= (+ (- 1) C1) 0)))))
     (let ((a!6 (and (str_invariant Y X V U T S R Q P O N M K J I H G)
                     (= (- B a!1) 0)
                     (= (- G1 a!2) 0)
                     (= (- C a!3) 0)
                     (or (not (= I1 true)) (>= C 0) (not (= E true)))
                     (or (and (= E1 true) (= K true)) (not (= D1 true)))
                     (= (- F1 a!4) 0)
                     (= (- A P) 0)
                     (or (and (= I1 true) (< C 0)) (= E true))
                     (or (not (= E1 true)) (not (= K true)) (= D1 true))
                     (not (= B1 true))
                     (= (- C1 J) 0)
                     (not (= A1 true))
                     (or (= E1 true) (and (= W true) (= L true)))
                     (not (= Z true))
                     (or (not (= E1 true)) (not (= W true)) (not (= L true)))
                     a!5
                     (not (= D true)))))
       (=> a!6 (str_invariant H1 W L F E D C B A G1 F1 E1 D1 C1 B1 A1 Z))))
    ))


(check-sat)
(exit)
