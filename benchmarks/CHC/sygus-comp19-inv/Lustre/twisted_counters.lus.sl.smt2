(set-logic HORN)

(declare-fun str_invariant
             (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Int)
             Bool)
(assert (forall ((A Int)
         (B Bool)
         (C Bool)
         (D Bool)
         (E Bool)
         (F Bool)
         (G Bool)
         (H Bool)
         (I Bool)
         (J Bool)
         (K Bool))
  (=> (and (str_invariant K J I H G F E D C B A) (not (= J true))) false)
    ))
(assert (forall ((A Int)
         (B Bool)
         (C Bool)
         (D Bool)
         (E Bool)
         (F Bool)
         (G Bool)
         (H Bool)
         (I Bool)
         (J Bool)
         (K Bool))
  (let ((a!1 (and (= K true)
                     (or (not (= G true)) (not (= H true)))
                     (or (= G true) (= H true))))
           (a!2 (or (not (= J true))
                    (not (= K true))
                    (and (= G true) (= H true))
                    (and (not (= G true)) (not (= H true)))))
           (a!3 (or (not (= (+ (- 5) A) 0)) (= G true))))
     (let ((a!4 (and (not (= C true))
                     (or (= H true) (not (= E true)) (not (= C true)))
                     (not (= E true))
                     (or (not (= H true)) (and (= E true) (= C true)))
                     (or (= J true) a!1)
                     (or (= (+ (- 5) A) 0) (not (= G true)))
                     (= A 0)
                     (not (= D true))
                     a!2
                     a!3
                     (= F true)
                     (= B true)
                     (= I true))))
       (=> a!4 (str_invariant K J I H G F E D C B A))))
    ))
(assert (forall ((A Bool)
         (B Bool)
         (C Bool)
         (D Bool)
         (E Bool)
         (F Bool)
         (G Bool)
         (H Int)
         (I Bool)
         (J Bool)
         (K Bool)
         (L Bool)
         (M Bool)
         (N Bool)
         (O Bool)
         (P Bool)
         (Q Bool)
         (R Bool)
         (S Bool)
         (T Int)
         (U Bool)
         (V Bool))
  (let ((a!1 (or (and (= L true) (= J true))
                    (and (= S true) (= M true) (not (= J true)))
                    (not (= C true))))
           (a!2 (and (or (not (= L true)) (not (= J true)))
                     (or (not (= S true)) (not (= M true)) (= J true))))
           (a!3 (and (or (= L true) (not (= J true)))
                     (or (not (= L true)) (= J true))
                     (or (= S true) (not (= M true)))))
           (a!4 (and (= V true)
                     (or (not (= E true)) (not (= F true)))
                     (or (= E true) (= F true))))
           (a!5 (ite (= (+ (- 4) H) 0) (ite (not (= S true)) 3 5) (+ 1 H)))
           (a!7 (or (not (= B true))
                    (and (not (= L true)) (= J true))
                    (and (= L true) (not (= J true)))
                    (and (not (= S true)) (= M true))))
           (a!8 (or (not (= K true))
                    (not (= V true))
                    (and (= E true) (= F true))
                    (and (not (= E true)) (not (= F true)))))
           (a!9 (or (not (= (+ (- 5) T) 0)) (= E true))))
     (let ((a!6 (- T (ite (= (+ (- 5) H) 0) 2 a!5))))
     (let ((a!10 (and (str_invariant S R Q P O N M L J I H)
                      a!1
                      (not (= A J))
                      (or (= F true) (not (= C true)) (not (= A true)))
                      (or a!2 (= C true))
                      (or (= B true) a!3)
                      (or (not (= F true)) (and (= C true) (= A true)))
                      (or (= K true) a!4)
                      (or (= (+ (- 5) T) 0) (not (= E true)))
                      (= a!6 0)
                      a!7
                      a!8
                      a!9
                      (not (= D true))
                      (not (= U true))
                      (not (= G true)))))
       (=> a!10 (str_invariant V K G F E D C B A U T)))))
    ))


(check-sat)
(exit)
