(set-logic HORN)

(declare-fun str_invariant
             (Int
              Int
              Bool
              Bool
              Bool
              Bool
              Int
              Int
              Int
              Int
              Bool
              Bool
              Bool
              Bool
              Bool)
             Bool)
(assert (forall ((A Bool)
         (B Bool)
         (C Bool)
         (D Bool)
         (E Bool)
         (F Int)
         (G Int)
         (H Int)
         (I Int)
         (J Bool)
         (K Bool)
         (L Bool)
         (M Bool)
         (N Int)
         (O Int))
  (=> (and (str_invariant O N M L K J I H G F E D C B A) (not (= K true)))
         false)
    ))
(assert (forall ((A Bool)
         (B Bool)
         (C Bool)
         (D Bool)
         (E Bool)
         (F Int)
         (G Int)
         (H Int)
         (I Int)
         (J Bool)
         (K Bool)
         (L Bool)
         (M Bool)
         (N Int)
         (O Int))
  (let ((a!1 (or (not (= D true)) (>= (- (+ I H) G) 0) (not (= K true))))
           (a!2 (and (= D true) (< (- (+ I H) G) 0)))
           (a!3 (and (>= (+ (- 1) I) 0)
                     (>= (+ (- 1) H) 0)
                     (or (< (- G I) 0) (= L true))
                     (>= (- H F) 0)))
           (a!4 (or (< (+ (- 1) I) 0)
                    (< (+ (- 1) H) 0)
                    (and (>= (- G I) 0) (not (= L true)))
                    (< (- H F) 0)
                    (= E true))))
     (let ((a!5 (and (or (= E true) (not (= D true)))
                     a!1
                     (or (not (= E true)) (= D true))
                     (or a!2 (= K true))
                     (= G 0)
                     (= C true)
                     (= (- H N) 0)
                     (= F 0)
                     (= B true)
                     (or a!3 (not (= E true)))
                     (= (- I O) 0)
                     (= A true)
                     a!4
                     (= J true))))
       (=> a!5 (str_invariant O N M L K J I H G F E D C B A))))
    ))
(assert (forall ((A Int)
         (B Int)
         (C Int)
         (D Bool)
         (E Bool)
         (F Bool)
         (G Bool)
         (H Bool)
         (I Bool)
         (J Bool)
         (K Bool)
         (L Bool)
         (M Int)
         (N Int)
         (O Int)
         (P Int)
         (Q Bool)
         (R Bool)
         (S Int)
         (T Bool)
         (U Bool)
         (V Int)
         (W Int)
         (X Bool)
         (Y Bool)
         (Z Bool)
         (A1 Bool)
         (B1 Bool)
         (C1 Int)
         (D1 Int))
  (let ((a!1 (or (not (= A1 true)) (>= (- (+ C B) A) 0) (not (= E true))))
           (a!2 (or (and (not (= B1 true)) (not (= K true))) (= A1 true)))
           (a!3 (and (= A1 true) (< (- (+ C B) A) 0)))
           (a!4 (= (- A (ite (= U true) N 0)) 0))
           (a!5 (= (- C1 (ite (= T true) M 0)) 0))
           (a!6 (and (>= (+ (- 1) C) 0)
                     (>= (+ (- 1) B) 0)
                     (or (< (- A C) 0) (= F true))
                     (>= (- B C1) 0)))
           (a!7 (or (< (+ (- 1) C) 0)
                    (< (+ (- 1) B) 0)
                    (and (>= (- A C) 0) (not (= F true)))
                    (< (- B C1) 0)
                    (= B1 true))))
     (let ((a!8 (and (str_invariant W V U T R Q P O N M L K J I G)
                     (or (= B1 true) (= K true) (not (= A1 true)))
                     a!1
                     a!2
                     (or a!3 (= E true))
                     a!4
                     (not (= Z true))
                     (= (- B O) 0)
                     a!5
                     (not (= Y true))
                     (or a!6 (not (= B1 true)))
                     (= (- C P) 0)
                     (not (= X true))
                     a!7
                     (not (= D true)))))
       (=> a!8 (str_invariant D1 S H F E D C B A C1 B1 A1 Z Y X))))
    ))


(check-sat)
(exit)
