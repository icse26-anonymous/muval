(set-logic HORN)

(declare-fun str_invariant
             (Bool Bool Bool Bool Bool Bool Int Bool Bool Bool Bool)
             Bool)
(assert (forall ((A Bool)
         (B Bool)
         (C Bool)
         (D Bool)
         (E Int)
         (F Bool)
         (G Bool)
         (H Bool)
         (I Bool)
         (J Bool)
         (K Bool))
  (=> (and (str_invariant K J I H G F E D C B A) (not (= J true))) false)
    ))
(assert (forall ((A Bool)
         (B Bool)
         (C Bool)
         (D Bool)
         (E Int)
         (F Bool)
         (G Bool)
         (H Bool)
         (I Bool)
         (J Bool)
         (K Bool))
  (let ((a!1 (or (and (= G true) (= H true))
                    (and (not (= G true)) (not (= H true)))
                    (not (= J true))))
           (a!2 (or (not (= (+ (- 5) E) 0)) (= H true)))
           (a!3 (and (or (not (= G true)) (not (= H true)))
                     (or (= G true) (= H true)))))
     (let ((a!4 (and (not (= A true))
                     (or (= G true) (not (= C true)) (not (= A true)))
                     (not (= C true))
                     (or (= (+ (- 5) E) 0) (not (= H true)))
                     (= E 0)
                     a!1
                     (or (not (= G true)) (and (= C true) (= A true)))
                     a!2
                     (or a!3 (= J true))
                     (not (= B true))
                     (= F true)
                     (= D true)
                     (= I true))))
       (=> a!4 (str_invariant K J I H G F E D C B A))))
    ))
(assert (forall ((A Bool)
         (B Bool)
         (C Int)
         (D Bool)
         (E Bool)
         (F Bool)
         (G Bool)
         (H Bool)
         (I Bool)
         (J Bool)
         (K Bool)
         (L Bool)
         (M Int)
         (N Bool)
         (O Bool)
         (P Bool)
         (Q Bool)
         (R Bool)
         (S Bool)
         (T Bool)
         (U Bool)
         (V Bool))
  (let ((a!1 (or (not (= T true))
                    (and (= H true) (not (= J true)) (= I true) (= J true))))
           (a!2 (- C (ite (= (+ (- 5) M) 0) 1 (+ (- 1) M))))
           (a!3 (or (and (= E true) (= F true))
                    (and (not (= E true)) (not (= F true)))
                    (not (= K true))))
           (a!4 (and (or (= H true) (= I true) (not (= J true)))
                     (or (not (= I true)) (= J true))))
           (a!5 (or (not (= (+ (- 5) C) 0)) (= F true)))
           (a!6 (and (or (not (= E true)) (not (= F true)))
                     (or (= E true) (= F true))))
           (a!7 (or (not (= U true))
                    (and (not (= H true)) (not (= I true)) (= J true))
                    (and (= I true) (not (= J true))))))
     (let ((a!8 (and (str_invariant S R Q P O N M L J I H)
                     (or (= T true)
                         (not (= H true))
                         (= J true)
                         (not (= I true))
                         (not (= J true)))
                     a!1
                     (or (= E true) (not (= A true)) (not (= T true)))
                     (not (= A J))
                     (or (= (+ (- 5) C) 0) (not (= F true)))
                     (= a!2 0)
                     a!3
                     (or (= U true) a!4)
                     (or (not (= E true)) (and (= A true) (= T true)))
                     a!5
                     (or a!6 (= K true))
                     a!7
                     (not (= D true))
                     (not (= B true))
                     (not (= G true)))))
       (=> a!8 (str_invariant V K G F E D C B A U T))))
    ))


(check-sat)
(exit)
