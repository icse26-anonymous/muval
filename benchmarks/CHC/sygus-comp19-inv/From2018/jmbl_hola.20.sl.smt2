(set-logic HORN)

(declare-fun InvF (Int Int Int Int Int Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int))
  (let ((a!1 (not (= (- (- G D) C) 0)))
           (a!2 (or (< F 0) (< (+ (- (- 1) F) E) 0))))
     (let ((a!3 (or a!1 (and (>= (+ (- 1) E) 0) a!2))))
       (=> (and (InvF B A G F E D C) a!3) false)))
    ))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int))
  (let ((a!1 (and (= F 0) (= (- (- G D) C) 0) (= A 0))))
       (=> a!1 (InvF B A G F E D C)))
    ))
(assert (forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E Int)
         (F Int)
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K Int)
         (L Int)
         (M Int)
         (N Int))
  (let ((a!1 (and (= (- A B) 0) (= (+ (- (- 1) J) D) 0) (= (+ (- 1 I) C) 0)))
           (a!2 (and (not (= (- A B) 0))
                     (= (+ (- 1 J) D) 0)
                     (= (+ (- (- 1) I) C) 0))))
     (let ((a!3 (and (InvF B A M L K J I)
                     (or (= (- F L) 0) (= (- F A) 0))
                     (= (- (+ (- 1) H) A) 0)
                     (= (- E K) 0)
                     (= (- G M) 0)
                     (= (- N B) 0)
                     (>= (- (+ (- 1) K) A) 0)
                     (or a!1 a!2))))
       (=> a!3 (InvF N H G F E D C))))
    ))


(check-sat)
(exit)
