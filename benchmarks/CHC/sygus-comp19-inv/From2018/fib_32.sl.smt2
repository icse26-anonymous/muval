(set-logic HORN)

(declare-fun inv-f (Int Int Int Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))
  (let ((a!1 (and (inv-f D C B A E)
                     (>= (+ E (* (- 2) D)) 0)
                     (not (= (- B A) 0)))))
       (=> a!1 false))
    ))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))
  (let ((a!1 (and (= E 0)
                     (= (- B A) 0)
                     (>= (+ (- 1) D) 0)
                     (or (= (+ (- 1) C) 0) (= C 0)))))
       (=> a!1 (inv-f D C B A E)))
    ))
(assert (forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E Int)
         (F Int)
         (G Int)
         (H Int)
         (I Int)
         (J Int))
  (let ((a!1 (and (>= (+ I (* (- 2) D)) 0)
                     (= (- J D) 0)
                     (= (- H C) 0)
                     (= (- G B) 0)
                     (= (- F A) 0)
                     (= (- E I) 0)))
           (a!2 (and (>= (+ (- (- 1) I) (* 2 D)) 0)
                     (= (+ (- 1) C) 0)
                     (= (- J D) 0)
                     (= H 0)
                     (= (- (+ (- 1) G) B) 0)
                     (= (- F A) 0)
                     (= (+ (- (- 1) I) E) 0)))
           (a!3 (and (>= (+ (- (- 1) I) (* 2 D)) 0)
                     (not (= (+ (- 1) C) 0))
                     (= (- J D) 0)
                     (= (+ (- 1) H) 0)
                     (= (- G B) 0)
                     (= (- (+ (- 1) F) A) 0)
                     (= (+ (- (- 1) I) E) 0))))
       (=> (and (inv-f D C B A I) (or a!1 a!2 a!3)) (inv-f J H G F E)))
    ))


(check-sat)
(exit)
