(set-logic HORN)
(set-info :source |
  Benchmark: ./benchmarks/ocaml/safety/tacas2015//harmonic.ml
  Generated by Refinement Caml
|)
(set-info :status unknown)
(declare-fun |$P16| (Int Int) Bool)
(declare-fun |$P0| (Int) Bool)
(declare-fun |$P1| (Int Int) Bool)
(declare-fun |$P11| (Int Int) Bool)
(declare-fun |$P12| (Int Int Int) Bool)
(declare-fun |$P10| (Int Int Int) Bool)
(declare-fun |$P4| (Int Int) Bool)
(declare-fun |$P3| (Int) Bool)
(declare-fun |$P6| (Int Int) Bool)
(declare-fun |$P5| (Int) Bool)
(declare-fun |$P2| (Int Int Int) Bool)
(declare-fun |$P7| (Int) Bool)
(declare-fun |$P8| (Int Int) Bool)
(declare-fun |$P9| (Int Int Int) Bool)
(declare-fun |$P13| (Int) Bool)
(declare-fun |$P14| (Int Int Int) Bool)
(declare-fun |$P15| (Int Int Int Int) Bool)
(assert (not (exists ((x0 Int)) (and (|$P0| x0) (|$P1| x0 0)))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|$P0| x1) (and (|$P1| x1 x2) (and (and (or (< x2 0) (> x2 0)) (<= (+ 1 x1) x2)) (= x0 0)))) (|$P2| x1 x2 x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|$P0| x1) (and (|$P1| x1 x2) (and (and (or (< x2 0) (> x2 0)) (>= x1 x2)) (= x1 (+ x0 x2))))) (|$P0| x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|$P0| x1) (and (|$P1| x1 x2) (and (and (or (< x2 0) (> x2 0)) (>= x1 x2)) (= x1 (+ x0 x2))))) (|$P1| x0 x2))))
(assert (forall ((x1 Int)(x3 Int)(x0 Int)(x2 Int)(x4 Int)) (=> (and (|$P0| x1) (and (|$P1| x1 x3) (and (|$P2| x2 x3 x4) (and (and (or (< x3 0) (> x3 0)) (>= x1 x3)) (and (= x1 (+ x2 x3)) (= x0 (+ 1 x4))))))) (|$P2| x1 x3 x0))))