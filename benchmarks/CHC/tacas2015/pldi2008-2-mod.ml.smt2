(set-logic HORN)
(set-info :source |
  Benchmark: ./benchmarks/ocaml/safety/tacas2015//pldi2008-2-mod.ml
  Generated by Refinement Caml
|)
(set-info :status unknown)
(declare-fun |$P4| (Int) Bool)
(declare-fun |$P5| (Int Int) Bool)
(declare-fun |$P3| (Int Int Int) Bool)
(declare-fun |$P0| (Int) Bool)
(declare-fun |$P1| (Int Int) Bool)
(declare-fun |$P2| (Int Int Int) Bool)
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Int)) (=> (and (|$P4| x2) (and (|$P5| x2 x3) (and (<= x2 50) (and (= x0 (+ 1 x3)) (= x1 (+ 1 x2)))))) (|$P0| x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|$P4| x2) (and (|$P5| x2 x3) (and (<= x2 50) (and (= x0 (+ 1 x2)) (= x1 (+ 1 x3)))))) (|$P1| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)(x4 Int)(x2 Int)(x3 Int)) (=> (and (|$P4| x0) (and (|$P5| x0 x1) (and (|$P3| x2 x3 x4) (and (<= x0 50) (and (= x2 (+ 1 x0)) (= x3 (+ 1 x1))))))) (|$P2| x0 x1 x4))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x0 Int)) (=> (and (|$P4| x2) (and (|$P5| x2 x3) (and (>= x2 51) (and (= x3 (+ 1 x0)) (= x1 (+ 1 x2)))))) (|$P0| x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|$P4| x2) (and (|$P5| x2 x3) (and (>= x2 51) (and (= x0 (+ 1 x2)) (= x3 (+ 1 x1)))))) (|$P1| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)(x4 Int)(x2 Int)(x3 Int)) (=> (and (|$P4| x0) (and (|$P5| x0 x1) (and (|$P3| x2 x3 x4) (and (>= x0 51) (and (= x2 (+ 1 x0)) (= x1 (+ 1 x3))))))) (|$P2| x0 x1 x4))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|$P0| x1) (and (|$P1| x1 x2) (and (<= (+ 1 x2) 0) (>= x1 100)))) (|$P3| x1 x2 x0))))
(assert (not (exists ((x1 Int)(x0 Int)) (and (|$P0| x0) (and (|$P1| x0 x1) (and (<= (+ 1 x1) 0) (<= x0 99)))))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P1| x1 x0) (and (|$P0| x1) (>= x0 0))) (|$P4| x1))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|$P0| x0) (and (|$P1| x0 x1) (>= x1 0))) (|$P5| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|$P0| x0) (and (|$P1| x0 x1) (and (|$P2| x0 x1 x2) (>= x1 0)))) (|$P3| x0 x1 x2))))
(assert (forall ((x0 Int)) (=> (= x0 0) (|$P4| x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (= x0 0) (= x1 0)) (|$P5| x0 x1))))
(check-sat)
