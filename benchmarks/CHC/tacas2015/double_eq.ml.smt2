(set-logic HORN)
(set-info :source |
  Benchmark: ./benchmarks/ocaml/safety/tacas2015//double_eq.ml
  Generated by Refinement Caml
|)
(set-info :status unknown)
(declare-fun |$P0| (Int) Bool)
(declare-fun |$P1| (Int) Bool)
(declare-fun |$P2| (Int Int) Bool)
(declare-fun |$P3| (Int Int) Bool)
(declare-fun |$P4| (Int Int Int) Bool)
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P0| x1) (and (= x0 0) (<= x1 0))) (|$P3| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|$P0| x1) (and (>= x1 1) (= x1 (+ 1 x0)))) (|$P0| x0))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)(x3 Int)) (=> (and (|$P0| x1) (and (|$P3| x2 x3) (and (>= x1 1) (and (= x1 (+ 1 x2)) (= x0 (+ 2 x3)))))) (|$P3| x1 x0))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)) (=> (and (|$P1| x1) (and (|$P2| x1 x0) (and (|$P2| x1 x2) (and (<= x1 0) (= x2 x0))))) (|$P4| x1 x0 x2))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Int)) (=> (and (|$P1| x2) (and (|$P2| x2 x3) (and (>= x2 1) (and (= x0 (+ 2 x3)) (= x2 (+ 1 x1)))))) (|$P1| x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|$P1| x2) (and (|$P2| x2 x3) (and (>= x2 1) (and (= x2 (+ 1 x0)) (= x1 (+ 2 x3)))))) (|$P2| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)(x4 Int)(x2 Int)(x3 Int)) (=> (and (|$P1| x0) (and (|$P2| x0 x1) (and (|$P4| x2 x3 x4) (and (>= x0 1) (and (= x0 (+ 1 x2)) (= x3 (+ 2 x1))))))) (|$P4| x0 x1 x4))))
(assert (forall ((x0 Int)) (|$P0| x0)))
(assert (forall ((x0 Int)(x1 Int)) (=> (|$P3| x0 x1) (|$P1| x0))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)) (=> (and (|$P3| x1 x2) (= x0 0)) (|$P2| x1 x0))))
(assert (not (exists ((x0 Int)(x2 Int)(x1 Int)) (and (|$P3| x1 x0) (and (|$P4| x1 0 x2) (or (< x0 x2) (> x0 x2)))))))
(check-sat)
