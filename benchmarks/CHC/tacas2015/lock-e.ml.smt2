(set-logic HORN)
(set-info :source |
  Benchmark: ./benchmarks/ocaml/safety/tacas2015//lock-e.ml
  Generated by Refinement Caml
|)
(set-info :status unknown)
(declare-fun |$P0| (Int) Bool)
(declare-fun |$P2| (Int) Bool)
(declare-fun |$P1| (Int Int) Bool)
(declare-fun |$P4| (Int) Bool)
(declare-fun |$P5| (Int Int) Bool)
(declare-fun |$P3| (Int Int) Bool)
(declare-fun |$P6| (Int) Bool)
(declare-fun |$P7| (Int Int) Bool)
(declare-fun |$P8| (Int Int Int) Bool)
(declare-fun |$P9| (Int Int Int) Bool)
(assert (not (exists ((x0 Int)) (and (|$P0| x0) (or (< x0 0) (> x0 0))))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P0| x1) (and (= x0 1) (= x1 0))) (|$P1| x1 x0))))
(assert (not (exists ((x0 Int)) (and (|$P2| x0) (or (< x0 1) (> x0 1))))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P2| x1) (and (= x0 0) (= x1 1))) (|$P3| x1 x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P4| x0) (and (|$P5| x0 x1) (>= x0 1))) (|$P0| x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|$P4| x0) (and (|$P5| x0 x1) (and (|$P1| x1 x2) (>= x0 1)))) (|$P8| x0 x1 x2))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)) (=> (and (|$P4| x1) (and (|$P5| x1 x0) (and (|$P5| x1 x2) (and (<= x1 0) (= x2 x0))))) (|$P8| x1 x0 x2))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P6| x0) (and (|$P7| x0 x1) (>= x0 0))) (|$P2| x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|$P6| x0) (and (|$P7| x0 x1) (and (|$P3| x1 x2) (>= x0 0)))) (|$P9| x0 x1 x2))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)) (=> (and (|$P6| x1) (and (|$P7| x1 x0) (and (|$P7| x1 x2) (and (<= (+ 1 x1) 0) (= x2 x0))))) (|$P9| x1 x0 x2))))
(assert (forall ((x0 Int)) (|$P4| x0)))
(assert (forall ((x0 Int)(x1 Int)) (=> (= x1 0) (|$P5| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)) (=> (|$P8| x0 0 x1) (|$P6| x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (|$P8| x0 0 x1) (|$P7| x0 x1))))
(assert (not (exists ((x2 Int)(x0 Int)(x1 Int)) (and (|$P8| x0 0 x1) (and (|$P9| x0 x1 x2) (or (< x2 0) (> x2 0)))))))
(check-sat)
