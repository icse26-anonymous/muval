(set-logic HORN)
(set-info :source |
  Benchmark: ./benchmarks/ocaml/safety/tacas2015//even_odd.ml
  Generated by Refinement Caml
|)
(set-info :status unknown)
(declare-fun |$P2| (Int) Bool)
(declare-fun |$P1| (Int Int) Bool)
(declare-fun |$P0| (Int) Bool)
(declare-fun |$P3| (Int Int) Bool)
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P2| x1) (and (> x0 0) (= x1 0))) (|$P3| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|$P2| x1) (and (or (< x1 0) (> x1 0)) (= x1 (+ 1 x0)))) (|$P0| x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|$P2| x0) (and (|$P1| x1 x2) (and (or (< x0 0) (> x0 0)) (= x0 (+ 1 x1))))) (|$P3| x0 x2))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P0| x1) (and (not (> x0 0)) (= x1 0))) (|$P1| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|$P0| x1) (and (or (< x1 0) (> x1 0)) (= x1 (+ 1 x0)))) (|$P2| x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|$P0| x0) (and (|$P3| x1 x2) (and (or (< x0 0) (> x0 0)) (= x0 (+ 1 x1))))) (|$P1| x0 x2))))
(assert (forall ((x0 Int)(x1 Int)) (=> (= x0 (* 2 x1)) (|$P2| x0))))
(assert (not (exists ((x1 Int)(x0 Int)) (and (|$P3| x1 0) (= x1 (* 2 x0))))))
(check-sat)
