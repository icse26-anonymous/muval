(set-logic HORN)
(set-info :source |
  Benchmark: ./benchmarks/ocaml/safety/tacas2015//apply_context_sensitive.ml
  Generated by Refinement Caml
|)
(set-info :status unknown)
(declare-fun |$P7| (Int Int) Bool)
(declare-fun |$P5| (Int Int) Bool)
(declare-fun |$P0| (Int) Bool)
(declare-fun |$P2| (Int) Bool)
(declare-fun |$P1| (Int Int) Bool)
(declare-fun |$P3| (Int) Bool)
(declare-fun |$P4| (Int Int) Bool)
(declare-fun |$P6| (Int Int Int) Bool)
(assert (forall ((x1 Int)(x0 Int)) (=> (|$P7| x0 x1) (|$P3| x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|$P7| x0 x1) (|$P5| x1 x2)) (|$P6| x0 x1 x2))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P0| x1) (= x1 0)) (|$P1| x1 x0))))
(assert (not (exists ((x0 Int)) (and (|$P0| x0) (or (< x0 0) (> x0 0))))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P2| x1) (= x1 1)) (|$P4| x1 x0))))
(assert (not (exists ((x0 Int)) (and (|$P2| x0) (or (< x0 1) (> x0 1))))))
(assert (forall ((x0 Int)) (=> (|$P3| x0) (|$P0| x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|$P3| x0) (|$P1| x0 x1)) (|$P5| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)) (=> (= x1 0) (|$P7| x0 x1))))
(assert (forall ((x2 Int)(x0 Int)(x1 Int)) (=> (and (|$P6| x0 0 x1) (|$P3| x2)) (|$P2| x2))))
(assert (forall ((x2 Int)(x3 Int)(x0 Int)(x1 Int)) (=> (and (|$P6| x0 0 x1) (and (|$P3| x2) (|$P4| x2 x3))) (|$P5| x2 x3))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|$P6| x2 0 x3) (= x1 1)) (|$P7| x0 x1))))
(check-sat)
