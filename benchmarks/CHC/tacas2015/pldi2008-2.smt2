(set-logic HORN)
(declare-fun P5 (Int Int) Bool)
(declare-fun P4 (Int) Bool)
(declare-fun P3 (Int Int Int) Bool)
(declare-fun P0 (Int) Bool)
(declare-fun P1 (Int Int) Bool)
(declare-fun P2 (Int Int Int) Bool)
(assert (forall ((x2 Int) (x0 Int) (x1 Int)) (=> (and (P5 x2 x1) (P4 x2) (<= x2 50) (= x0 (+ 1 x1))) (P0 x2))))
(assert (forall ((x2 Int) (x0 Int) (x1 Int)) (=> (and (P5 x2 x1) (P4 x2) (<= x2 50) (= x0 (+ 1 x1))) (P1 x2 x0))))
(assert (forall ((x1 Int) (x0 Int) (x3 Int) (x2 Int)) (=> (and (P5 x1 x0) (P4 x1) (P3 x1 x2 x3) (<= x1 50) (= x2 (+ 1 x0))) (P2 x1 x0 x3))))
(assert (forall ((x2 Int) (x1 Int) (x0 Int)) (=> (and (P5 x2 x1) (P4 x2) (>= x2 51) (= x1 (+ 1 x0))) (P0 x2))))
(assert (forall ((x2 Int) (x0 Int) (x1 Int)) (=> (and (P5 x2 x1) (P4 x2) (>= x2 51) (= x1 (+ 1 x0))) (P1 x2 x0))))
(assert (forall ((x1 Int) (x0 Int) (x3 Int) (x2 Int)) (=> (and (P5 x1 x0) (P4 x1) (P3 x1 x2 x3) (>= x1 51) (= x0 (+ 1 x2))) (P2 x1 x0 x3))))
(assert (forall ((x1 Int) (x2 Int) (x0 Int)) (=> (and (P0 x1) (P1 x1 x2) (<= (+ 1 x2) 0) (= x1 102)) (P3 x1 x2 x0))))
(assert (forall ((x0 Int) (x2 Int) (x1 Int)) (=> (and (P0 x1) (P1 x1 x2) (>= x2 0) (= x0 (+ 1 x1))) (P4 x0))))
(assert (forall ((x0 Int) (x2 Int) (x1 Int)) (=> (and (P0 x1) (P1 x1 x2) (>= x2 0) (= x0 (+ 1 x1))) (P5 x0 x2))))
(assert (forall ((x0 Int) (x2 Int) (x3 Int) (x1 Int)) (=> (and (P0 x0) (P1 x0 x2) (P2 x1 x2 x3) (>= x2 0) (= x1 (+ 1 x0))) (P3 x0 x2 x3))))
(assert (forall ((x0 Int)) (=> (= x0 0) (P4 x0))))
(assert (forall ((x0 Int) (x1 Int)) (=> (and (= x0 0) (= x1 0)) (P5 x0 x1))))
(assert (forall ((x1 Int) (x0 Int)) (=> (and (P0 x0) (P1 x0 x1) (<= (+ 1 x1) 0) (or (< x0 102) (> x0 102))) false)))
(check-sat)
