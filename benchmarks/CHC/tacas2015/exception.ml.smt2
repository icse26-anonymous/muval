(set-logic HORN)
(set-info :source |
  Benchmark: ./benchmarks/ocaml/safety/tacas2015//exception.ml
  Generated by Refinement Caml
|)
(set-info :status unknown)
(declare-fun |$P0| (Int Int Int) Bool)
(declare-fun |$P1| (Int) Bool)
(declare-fun |$P5| (Int Int Int) Bool)
(declare-fun |$P2| (Int) Bool)
(declare-fun |$P3| (Int Int) Bool)
(declare-fun |$P4| (Int Int) Bool)
(assert (forall ((x2 Int)(x0 Int)(x1 Int)) (=> (and (|$P1| x2) (>= x2 0)) (|$P0| x2 x0 x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P1| x1) (and (<= (+ 1 x1) 0) (= x0 0))) (|$P3| x1 x0))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)) (=> (and (|$P1| x1) (and (|$P5| x1 0 x2) (<= (+ 1 x1) 0))) (|$P0| x1 x0 x2))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|$P2| x1) (= x1 0)) (|$P4| x1 x0))))
(assert (not (exists ((x0 Int)) (and (|$P2| x0) (or (< x0 0) (> x0 0))))))
(assert (forall ((x0 Int)) (|$P1| x0)))
(assert (forall ((x1 Int)(x0 Int)) (=> (|$P3| x0 x1) (|$P2| x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|$P3| x0 x1) (|$P4| x1 x2)) (|$P5| x0 x1 x2))))
(check-sat)
