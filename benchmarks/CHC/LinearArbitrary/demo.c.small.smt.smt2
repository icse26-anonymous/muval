(set-logic HORN)

(declare-fun |main@.lr.ph5| ( Int Int Int Int Int Int Int ) Bool)
(declare-fun |main@entry| ( Int Int ) Bool)
(declare-fun |main@verifier.error| ( Int ) Bool)
(declare-fun |main@._crit_edge| ( Int Int Int Int Int ) Bool)
(declare-fun |main@verifier.error.split| ( ) Bool)
(declare-fun |main@.lr.ph| ( Int Int Int Int Int ) Bool)

(assert
  (forall ( (A Int) (B Int) ) 
    (=>
      (and
        true
      )
      (main@entry A B)
    )
  )
)
(assert
  (forall ( (A Bool) (B Bool) (C Bool) (D Bool) (E Int) (F Int) (G Bool) (H Int) (I Int) (J Bool) (K Bool) (L Bool) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) ) 
    (=>
      (and
        (main@entry N F)
        (and (= B (= O 0))
     (= C (= T 9))
     (= D (= S 0))
     (= G (not (<= 0 M)))
     (= J (not (<= 10 M)))
     (= K (not (= I 0)))
     (= L (and K J))
     (= E F)
     (= H N)
     (= Q M)
     (= R 0)
     (= A true)
     (= B true)
     (= C true)
     (= D true)
     (not G)
     (= L true)
     (= A (= P 9)))
      )
      (main@.lr.ph5 N O P Q R S T)
    )
  )
)
(assert
  (forall ( (A Bool) (B Bool) (C Int) (D Bool) (E Int) (F Bool) (G Int) (H Int) (I Bool) (J Int) (K Int) (L Bool) (M Bool) (N Bool) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) ) 
    (=>
      (and
        (main@entry P H)
        (and (= I (not (<= 0 O)))
     (= M (not (= K 0)))
     (= N (and L M))
     (= A (= R 9))
     (= B (= Q 0))
     (= D (= C 9))
     (= L (not (<= 10 O)))
     (= G H)
     (= J P)
     (= S 0)
     (= T O)
     (= F true)
     (not I)
     (not N)
     (= A true)
     (= B true)
     (= D true)
     (= F (= E 0)))
      )
      (main@._crit_edge P Q R S T)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Bool) (F Bool) (G Bool) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) ) 
    (=>
      (and
        (main@.lr.ph5 J K L D A O P)
        (and (= F (not (= C O)))
     (= G (and F E))
     (= B J)
     (= I (+ A (* (- 1) H)))
     (= M H)
     (= N I)
     (= H (+ 1 D))
     (= G true)
     (= E (not (<= P D))))
      )
      (main@.lr.ph5 J K L M N O P)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Bool) (H Bool) (I Bool) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) ) 
    (=>
      (and
        (main@.lr.ph5 L M N E A D F)
        (and (= G (not (<= F E)))
     (= H (not (= C D)))
     (= B L)
     (= J (+ A (* (- 1) K)))
     (= K (+ 1 E))
     (= O J)
     (= P K)
     (not I)
     (= I (and H G)))
      )
      (main@._crit_edge L M N O P)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Bool) (D Int) (E Int) (F Int) (G Int) (H Bool) (I Bool) (J Bool) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) ) 
    (=>
      (and
        (main@._crit_edge O P Q A E)
        (and (= J (and I H))
     (= H (not (<= K 10)))
     (= I (not (= G 0)))
     (= D (+ 2 E))
     (= B (ite C D 0))
     (= F O)
     (= K (ite C D E))
     (= L (+ A (* (- 1) B)))
     (= M K)
     (= N L)
     (= J true)
     (= C (= A 10)))
      )
      (main@.lr.ph M N O P Q)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Bool) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Bool) (M Bool) (N Bool) (O Int) (P Int) ) 
    (=>
      (and
        (main@._crit_edge I A B C G)
        (and (= M (not (= J 0)))
     (= N (and M L))
     (= E (= C 10))
     (= F (+ 2 G))
     (= D (ite E F 0))
     (= K (ite E F G))
     (= H I)
     (= O (+ C (* (- 1) D)))
     (= P O)
     (not N)
     (= L (not (<= K 10))))
      )
      (main@verifier.error P)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Bool) (F Bool) (G Bool) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) ) 
    (=>
      (and
        (main@.lr.ph D A L M N)
        (and (= E (not (<= D N)))
     (= F (not (= C M)))
     (= B L)
     (= H (+ 1 D))
     (= I (+ A (* (- 1) H)))
     (= J H)
     (= K I)
     (= G true)
     (= G (and F E)))
      )
      (main@.lr.ph J K L M N)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Bool) (J Bool) (K Bool) (L Int) (M Int) ) 
    (=>
      (and
        (main@.lr.ph G A D F H)
        (and (= J (not (= E F)))
     (= K (and J I))
     (= C D)
     (= B (+ 1 G))
     (= L (+ A (* (- 1) B)))
     (= M L)
     (not K)
     (= I (not (<= G H))))
      )
      (main@verifier.error M)
    )
  )
)
(assert
  (forall ( (A Int) (B Bool) ) 
    (=>
      (and
        (main@verifier.error A)
        (and (= B true) (= B (not (<= A 0))))
      )
      main@verifier.error.split
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        main@verifier.error.split
        true
      )
      false
    )
  )
)

(check-sat)
(exit)
