;; valid

;; let G x = if x < 0 then 5 else G (x - 1)
;; let F n = F (G n)

;; forall n. F n
;; F x =nu G' x /\ forall y. G x y => F y
;; G x y =mu (x < 0 /\ y = 5) \/ G x (y - 1)
;; G' x y =mu x < 0 \/ G' x (y - 1)

(atom (predapp
  (nu F ((x int))
    (and
      (atom (predapp
        (mu G' ((x int))
          (or
            (atom (predapp lt ((x int) (funapp (integer 0) ()))))
            (atom (predapp (G' (int)) ((funapp sub ((x int) (funapp (integer 1) ()))))))
          )
        )
        ((x int))
      ))
      (forall ((y int))
        (imply
          (atom (predapp
            (mu G ((x int) (r int))
              (or
                (and
                  (atom (predapp lt ((x int) (funapp (integer 0) ()))))
                  (atom (predapp eq ((r int) (funapp (integer 5) ()))))
                )
                (atom (predapp (G (int int)) ((funapp sub ((x int) (funapp (integer 1) ()))) (r int))))
              )
            )
            ((x int) (y int))
          ))
          (atom (predapp (F (int)) ((y int))))
        )
      )
    )
  )
  ((n int))
))
