;; invalid

;; 'A' occurs infinitely in g x for some x >= 0
;; where g is defined below:
;;
;; let f x = if x = 0 then 2 else f (x - 3) in
;; let g x =
;;   if x >= 0 then
;;     A; let a = f x in g (x + a)
;; in

;; exists x. G x
;; G x =nu x >= 0 /\ F x y
;; F x y =mu (x = 0 /\ G (y + 2)) \/ (x != 0 /\ F (x - 3) y)

(exists ((x int))
  (atom (predapp
    (nu G ((x int))
      (and
        (atom (predapp geq ((x int) (funapp (integer 0) ()))))
        (atom (predapp
          (mu F ((x int) (y int))
            (or
              (and
                (atom (predapp eq ((x int) (funapp (integer 0) ()))))
                (atom (predapp (G (int)) (
                  (funapp add ((y int) (funapp (integer 2) ())))
                )))
              )
              (and
                (atom (predapp neq ((x int) (funapp (integer 0) ()))))
                (atom (predapp (F (int int)) (
                  (funapp sub ((x int) (funapp (integer 3) ())))
                  (y int)
                )))
              )
            )
          )
          ((x int) (x int))
        ))
      )
    )
    ((x int))
  ))
)
