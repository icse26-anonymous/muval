;; valid

;; forall n, m.
;;   for all timing, A and B occurs in the future
;;   iff m > 0
;;
;; let f x y =
;;   if x > 0 then
;;     A; f (x - y) y
;;   else
;;     B; f (x + y) y

;; forall n, m. m > 0 <=> F n m
;; F x y =nu A x y /\ B x y /\ (x > 0 => F (x - y) y) /\ (x <= 0 => F (x + y) y)
;; A x y =mu x <= 0 => A (x + y) y
;; B x y =mu x > 0 => B (x - y) y

(iff
  (atom (predapp gt ((m int) (funapp (integer 0) ()))))
  (atom (predapp
    (nu F ((x int) (y int))
      (and
        (and
          (atom (predapp
            (mu A ((x int) (y int))
              (imply
                (atom (predapp leq ((x int) (funapp (integer 0) ()))))
                (atom (predapp (A (int int)) (
                  (funapp add ((x int) (y int)))
                  (y int)
                )))
              )
            )
            ((x int) (y int))
          ))
          (atom (predapp
            (mu B ((x int) (y int))
              (imply
                (atom (predapp gt ((x int) (funapp (integer 0) ()))))
                (atom (predapp (B (int int)) (
                  (funapp sub ((x int) (y int)))
                  (y int)
                )))
              )
            )
            ((x int) (y int))
          ))
        )
        (and
          (imply
            (atom (predapp leq ((x int) (funapp (integer 0) ()))))
            (atom (predapp (F (int int)) (
              (funapp add ((x int) (y int)))
              (y int)
            )))
          )
          (imply
            (atom (predapp gt ((x int) (funapp (integer 0) ()))))
            (atom (predapp (F (int int)) (
              (funapp sub ((x int) (y int)))
              (y int)
            )))
          )
        )
      )
    )
    ((n int) (m int))
  ))
)
